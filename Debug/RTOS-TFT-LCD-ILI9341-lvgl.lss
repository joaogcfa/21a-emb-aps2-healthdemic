
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002e56c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0042e56c  0042e56c  0003e56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a20  20400000  0042e574  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0003994c  20400a20  0042ef94  00040a20  2**2
                  ALLOC
  4 .stack        00002004  2043a36c  004688e0  00040a20  2**0
                  ALLOC
  5 .heap         00000200  2043c370  0046a8e4  00040a20  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00040a20  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00040a4c  2**0
                  CONTENTS, READONLY
  8 .debug_info   000ad220  00000000  00000000  00040b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f3c1  00000000  00000000  000edd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004c9a4  00000000  00000000  000fd0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002de0  00000000  00000000  00149a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005940  00000000  00000000  0014c865  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032594  00000000  00000000  001521a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003f360  00000000  00000000  00184739  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000afc7c  00000000  00000000  001c3a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009318  00000000  00000000  00273718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 c3 43 20 6d 15 42 00 69 15 42 00 69 15 42 00     p.C m.B.i.B.i.B.
  400010:	69 15 42 00 69 15 42 00 69 15 42 00 00 00 00 00     i.B.i.B.i.B.....
	...
  40002c:	1d 17 40 00 69 15 42 00 00 00 00 00 bd 17 40 00     ..@.i.B.......@.
  40003c:	25 18 40 00 69 15 42 00 69 15 42 00 b5 1b 42 00     %.@.i.B.i.B...B.
  40004c:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  40005c:	69 15 42 00 69 15 42 00 00 00 00 00 f5 10 42 00     i.B.i.B.......B.
  40006c:	09 11 42 00 1d 11 42 00 69 15 42 00 69 15 42 00     ..B...B.i.B.i.B.
  40007c:	69 15 42 00 31 11 42 00 45 11 42 00 69 15 42 00     i.B.1.B.E.B.i.B.
  40008c:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  40009c:	55 02 40 00 69 15 42 00 69 15 42 00 69 15 42 00     U.@.i.B.i.B.i.B.
  4000ac:	69 15 42 00 69 15 42 00 71 15 40 00 69 15 42 00     i.B.i.B.q.@.i.B.
  4000bc:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  4000cc:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  4000dc:	69 15 42 00 85 15 40 00 69 15 42 00 69 15 42 00     i.B...@.i.B.i.B.
  4000ec:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  4000fc:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  40010c:	69 15 42 00 69 15 42 00 00 00 00 00 00 00 00 00     i.B.i.B.........
  40011c:	00 00 00 00 69 15 42 00 69 15 42 00 69 15 42 00     ....i.B.i.B.i.B.
  40012c:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  40013c:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  40014c:	69 15 42 00 69 15 42 00 69 15 42 00 69 15 42 00     i.B.i.B.i.B.i.B.
  40015c:	69 15 42 00 69 15 42 00 69 15 42 00                 i.B.i.B.i.B.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a20 	.word	0x20400a20
  400184:	00000000 	.word	0x00000000
  400188:	0042e574 	.word	0x0042e574

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0042e574 	.word	0x0042e574
  4001c8:	20400a24 	.word	0x20400a24
  4001cc:	0042e574 	.word	0x0042e574
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);

  tc_start(TC, TC_CHANNEL);
}

void vTimerEcgCallback( TimerHandle_t xTimer ) {
  4001d4:	b508      	push	{r3, lr}
  // delay entre ECGs de [200, 500]
  g_ecgDelayValue = rand() % (500 + 1 - 200) + 200;
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	004235b5 	.word	0x004235b5
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a094 	.word	0x2043a094

00400204 <config_DAC>:
static void config_DAC(void) {
  400204:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  dacc_reset(DACC_BASE);
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  dacc_set_transfer_mode(DACC_BASE, 0);
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  dacc_set_osr(DACC_BASE, DACC_CHANNEL, 5 );
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	0042126d 	.word	0x0042126d
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
void TC0_Handler(void) {
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 0);
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  if (g_ecgCnt >= g_ecgSize) {
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
    g_ecgCnt = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
    g_ecgDelayCnt = g_ecgDelayValue;
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  if (g_ecgDelayCnt > 0) {
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
    g_ecgDelayCnt--;
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  dacc_write_conversion_data(DACC_BASE, ecg[g_ecgCnt], DACC_CHANNEL);
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
}
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
    g_ecgCnt++;
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	0040072f 	.word	0x0040072f
  4002b8:	2043a08c 	.word	0x2043a08c
  4002bc:	0042dae0 	.word	0x0042dae0
  4002c0:	2043a094 	.word	0x2043a094
  4002c4:	2043a090 	.word	0x2043a090
  4002c8:	0042c418 	.word	0x0042c418
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
void TC_init_modificado(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  pmc_enable_periph_clk(ID_TC);
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG);
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / 16) / freq);
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  NVIC_SetPriority(ID_TC, 4);
  400312:	b263      	sxtb	r3, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
}
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	0042126d 	.word	0x0042126d
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	004006fd 	.word	0x004006fd
  400364:	011e1a30 	.word	0x011e1a30
  400368:	0040071f 	.word	0x0040071f
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	00400727 	.word	0x00400727
  400378:	00400717 	.word	0x00400717
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	00400737 	.word	0x00400737
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
 // printf("%d \n", g_ecgDelayValue);
}

void task_aps2(void *pvParameters) {
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  
  g_ecgDelayValue = 200;
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  config_DAC();
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  TC_init_modificado(TC0, ID_TC0, 0, DAC_FS);
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  xTimer = xTimerCreate("ECG", pdMS_TO_TICKS(ECG_CHANGE_TIME), pdTRUE, (void *) 0, vTimerEcgCallback);
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  xTimerStart( xTimer, 0 );
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  
  // oxiometria
  char ox;
  float theta = 0;
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
    
    // Oxiometria: sin entre 88 e 100
    if (theta > 2*PI) {
      theta = 0;
    }
    ox = (char) ((arm_sin_f32(theta) + 1.0)*12.0/2.0 + 88.0);
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
    theta = theta + 0.3;
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
    xQueueSend(xQueueOx, &ox, 100);
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4

    vTaskDelay(2000);
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
    if (theta > 2*PI) {
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
      theta = 0;
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a094 	.word	0x2043a094
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	00425e48 	.word	0x00425e48
  400470:	004030f5 	.word	0x004030f5
  400474:	2043a33c 	.word	0x2043a33c
  400478:	0040271d 	.word	0x0040271d
  40047c:	00403155 	.word	0x00403155
  400480:	00000000 	.word	0x00000000
  400484:	00422181 	.word	0x00422181
  400488:	004224c9 	.word	0x004224c9
  40048c:	0042220d 	.word	0x0042220d
  400490:	3ff00000 	.word	0x3ff00000
  400494:	00422571 	.word	0x00422571
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	00422995 	.word	0x00422995
  4004a8:	004229d5 	.word	0x004229d5
  4004ac:	2043a340 	.word	0x2043a340
  4004b0:	00401d4d 	.word	0x00401d4d
  4004b4:	0040297d 	.word	0x0040297d
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
  4004c4:	6041      	str	r1, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
		p_dacc->DACC_MR = ul_mode;
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_osr(Dacc *p_dacc, uint32_t channel, uint32_t ul_osr)
{
	uint32_t mr = p_dacc->DACC_TRIGR;
  4004d8:	6883      	ldr	r3, [r0, #8]
	if(channel == 0) {
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
{
  4004dc:	b410      	push	{r4}
		mr &= (~DACC_TRIGR_OSR0_Msk);
		mr |=  DACC_TRIGR_OSR0(ul_osr);
	}else if(channel == 1) {
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
		mr &= (~DACC_TRIGR_OSR1_Msk);
		mr |=  DACC_TRIGR_OSR1(ul_osr);
	}
	p_dacc->DACC_TRIGR = mr;
  4004e2:	6083      	str	r3, [r0, #8]
	return DACC_RC_OK;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR0_Msk);
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
		mr |=  DACC_TRIGR_OSR0(ul_osr);
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
	p_dacc->DACC_TRIGR = mr;
  4004f8:	6083      	str	r3, [r0, #8]
}
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR1_Msk);
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
		mr |=  DACC_TRIGR_OSR1(ul_osr);
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400510:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400512:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  400528:	b921      	cbnz	r1, 400534 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40052a:	6843      	ldr	r3, [r0, #4]
  40052c:	f023 0301 	bic.w	r3, r3, #1
  400530:	6043      	str	r3, [r0, #4]
  400532:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  400534:	6843      	ldr	r3, [r0, #4]
  400536:	f043 0301 	orr.w	r3, r3, #1
  40053a:	6043      	str	r3, [r0, #4]
  40053c:	4770      	bx	lr

0040053e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40053e:	6201      	str	r1, [r0, #32]
  400540:	4770      	bx	lr

00400542 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400542:	b470      	push	{r4, r5, r6}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400544:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  400546:	e000      	b.n	40054a <rtc_get_time+0x8>
		ul_time = p_rtc->RTC_TIMR;
  400548:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40054a:	6885      	ldr	r5, [r0, #8]
  40054c:	42ac      	cmp	r4, r5
  40054e:	d1fb      	bne.n	400548 <rtc_get_time+0x6>
	}

	/* Hour */
	if (pul_hour) {
  400550:	b171      	cbz	r1, 400570 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400552:	0c26      	lsrs	r6, r4, #16
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400554:	f3c6 1501 	ubfx	r5, r6, #4, #2
  400558:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055c:	0068      	lsls	r0, r5, #1
  40055e:	f006 060f 	and.w	r6, r6, #15
  400562:	4430      	add	r0, r6
  400564:	6008      	str	r0, [r1, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400566:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
  40056a:	d001      	beq.n	400570 <rtc_get_time+0x2e>
			*pul_hour += 12;
  40056c:	300c      	adds	r0, #12
  40056e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  400570:	b14a      	cbz	r2, 400586 <rtc_get_time+0x44>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400572:	0a25      	lsrs	r5, r4, #8
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  400574:	f3c5 1102 	ubfx	r1, r5, #4, #3
  400578:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40057c:	0048      	lsls	r0, r1, #1
  40057e:	f005 050f 	and.w	r5, r5, #15
  400582:	4428      	add	r0, r5
  400584:	6010      	str	r0, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400586:	b143      	cbz	r3, 40059a <rtc_get_time+0x58>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400588:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40058c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400590:	0051      	lsls	r1, r2, #1
  400592:	f004 040f 	and.w	r4, r4, #15
  400596:	440c      	add	r4, r1
  400598:	601c      	str	r4, [r3, #0]
	}
}
  40059a:	bc70      	pop	{r4, r5, r6}
  40059c:	4770      	bx	lr
	...

004005a0 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4005a2:	6844      	ldr	r4, [r0, #4]
  4005a4:	f014 0f01 	tst.w	r4, #1
  4005a8:	d005      	beq.n	4005b6 <rtc_set_time+0x16>
		if (ul_hour > 12) {
  4005aa:	290c      	cmp	r1, #12
  4005ac:	d93e      	bls.n	40062c <rtc_set_time+0x8c>
			ul_hour -= 12;
  4005ae:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  4005b0:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4005b4:	e000      	b.n	4005b8 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4005b6:	2600      	movs	r6, #0
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005b8:	4c1d      	ldr	r4, [pc, #116]	; (400630 <rtc_set_time+0x90>)
  4005ba:	fba4 7501 	umull	r7, r5, r4, r1
  4005be:	08ef      	lsrs	r7, r5, #3
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4005c0:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
  4005c4:	ea4f 054e 	mov.w	r5, lr, lsl #1
  4005c8:	46ae      	mov	lr, r5
  4005ca:	1b4d      	subs	r5, r1, r5
  4005cc:	042d      	lsls	r5, r5, #16
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005ce:	ea45 5507 	orr.w	r5, r5, r7, lsl #20
  4005d2:	4335      	orrs	r5, r6

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005d4:	fba4 6102 	umull	r6, r1, r4, r2
  4005d8:	08ce      	lsrs	r6, r1, #3
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4005da:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4005de:	0079      	lsls	r1, r7, #1
  4005e0:	1a51      	subs	r1, r2, r1
  4005e2:	0209      	lsls	r1, r1, #8
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005e4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  4005e8:	4329      	orrs	r1, r5

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005ea:	fba4 4203 	umull	r4, r2, r4, r3
  4005ee:	08d2      	lsrs	r2, r2, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4005f0:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4005f4:	006c      	lsls	r4, r5, #1
  4005f6:	1b1c      	subs	r4, r3, r4
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4005f8:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  4005fc:	430a      	orrs	r2, r1

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4005fe:	6983      	ldr	r3, [r0, #24]
  400600:	f013 0f04 	tst.w	r3, #4
  400604:	d0fb      	beq.n	4005fe <rtc_set_time+0x5e>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400606:	6803      	ldr	r3, [r0, #0]
  400608:	f043 0301 	orr.w	r3, r3, #1
  40060c:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40060e:	6983      	ldr	r3, [r0, #24]
  400610:	f013 0f01 	tst.w	r3, #1
  400614:	d0fb      	beq.n	40060e <rtc_set_time+0x6e>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400616:	2301      	movs	r3, #1
  400618:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  40061a:	6082      	str	r2, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  40061c:	6803      	ldr	r3, [r0, #0]
  40061e:	f023 0301 	bic.w	r3, r3, #1
  400622:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  400624:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400626:	f000 0001 	and.w	r0, r0, #1
  40062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t ul_time = 0;
  40062c:	2600      	movs	r6, #0
  40062e:	e7c3      	b.n	4005b8 <rtc_set_time+0x18>
  400630:	cccccccd 	.word	0xcccccccd

00400634 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400634:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ul_date = 0;

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400636:	4d2c      	ldr	r5, [pc, #176]	; (4006e8 <rtc_set_date+0xb4>)
  400638:	fba5 4501 	umull	r4, r5, r5, r1
  40063c:	09af      	lsrs	r7, r5, #6
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40063e:	4c2b      	ldr	r4, [pc, #172]	; (4006ec <rtc_set_date+0xb8>)
  400640:	fba4 5401 	umull	r5, r4, r4, r1
  400644:	0964      	lsrs	r4, r4, #5
  400646:	4e2a      	ldr	r6, [pc, #168]	; (4006f0 <rtc_set_date+0xbc>)
  400648:	fba6 e504 	umull	lr, r5, r6, r4
  40064c:	08ed      	lsrs	r5, r5, #3
  40064e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  400652:	ea4f 0e45 	mov.w	lr, r5, lsl #1
  400656:	eba4 050e 	sub.w	r5, r4, lr
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  40065a:	ea45 1507 	orr.w	r5, r5, r7, lsl #4

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40065e:	fba6 7401 	umull	r7, r4, r6, r1
  400662:	08e4      	lsrs	r4, r4, #3
  400664:	fba6 7e04 	umull	r7, lr, r6, r4
  400668:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  40066c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  400670:	ea4f 074e 	mov.w	r7, lr, lsl #1
  400674:	eba4 0e07 	sub.w	lr, r4, r7
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400678:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40067c:	0067      	lsls	r7, r4, #1
  40067e:	1bcf      	subs	r7, r1, r7
  400680:	0239      	lsls	r1, r7, #8
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  400682:	ea41 310e 	orr.w	r1, r1, lr, lsl #12
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400686:	4329      	orrs	r1, r5

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400688:	fba6 4502 	umull	r4, r5, r6, r2
  40068c:	08ed      	lsrs	r5, r5, #3
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40068e:	eb05 0785 	add.w	r7, r5, r5, lsl #2
  400692:	007c      	lsls	r4, r7, #1
  400694:	1b14      	subs	r4, r2, r4
  400696:	0424      	lsls	r4, r4, #16
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400698:	ea44 5205 	orr.w	r2, r4, r5, lsl #20
  40069c:	4311      	orrs	r1, r2

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40069e:	9a05      	ldr	r2, [sp, #20]
  4006a0:	ea41 5142 	orr.w	r1, r1, r2, lsl #21

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006a4:	fba6 4203 	umull	r4, r2, r6, r3
  4006a8:	08d2      	lsrs	r2, r2, #3
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4006aa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4006ae:	006c      	lsls	r4, r5, #1
  4006b0:	1b1c      	subs	r4, r3, r4
  4006b2:	0624      	lsls	r4, r4, #24
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006b4:	ea44 7202 	orr.w	r2, r4, r2, lsl #28
  4006b8:	430a      	orrs	r2, r1

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4006ba:	6983      	ldr	r3, [r0, #24]
  4006bc:	f013 0f04 	tst.w	r3, #4
  4006c0:	d0fb      	beq.n	4006ba <rtc_set_date+0x86>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4006c2:	6803      	ldr	r3, [r0, #0]
  4006c4:	f043 0302 	orr.w	r3, r3, #2
  4006c8:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4006ca:	6983      	ldr	r3, [r0, #24]
  4006cc:	f013 0f01 	tst.w	r3, #1
  4006d0:	d0fb      	beq.n	4006ca <rtc_set_date+0x96>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4006d2:	2301      	movs	r3, #1
  4006d4:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4006d6:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4006d8:	6803      	ldr	r3, [r0, #0]
  4006da:	f023 0302 	bic.w	r3, r3, #2
  4006de:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4006e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4006e2:	f000 0002 	and.w	r0, r0, #2
  4006e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4006e8:	10624dd3 	.word	0x10624dd3
  4006ec:	51eb851f 	.word	0x51eb851f
  4006f0:	cccccccd 	.word	0xcccccccd

004006f4 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4006f4:	6980      	ldr	r0, [r0, #24]
}
  4006f6:	4770      	bx	lr

004006f8 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4006f8:	61c1      	str	r1, [r0, #28]
  4006fa:	4770      	bx	lr

004006fc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006fc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006fe:	0189      	lsls	r1, r1, #6
  400700:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400702:	2402      	movs	r4, #2
  400704:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400706:	f04f 31ff 	mov.w	r1, #4294967295
  40070a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40070c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40070e:	605a      	str	r2, [r3, #4]
}
  400710:	f85d 4b04 	ldr.w	r4, [sp], #4
  400714:	4770      	bx	lr

00400716 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400716:	0189      	lsls	r1, r1, #6
  400718:	2305      	movs	r3, #5
  40071a:	5043      	str	r3, [r0, r1]
  40071c:	4770      	bx	lr

0040071e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40071e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400722:	61ca      	str	r2, [r1, #28]
  400724:	4770      	bx	lr

00400726 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400726:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40072a:	624a      	str	r2, [r1, #36]	; 0x24
  40072c:	4770      	bx	lr

0040072e <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40072e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400732:	6a08      	ldr	r0, [r1, #32]
}
  400734:	4770      	bx	lr

00400736 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400736:	b470      	push	{r4, r5, r6}
  400738:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40073a:	2402      	movs	r4, #2
  40073c:	9401      	str	r4, [sp, #4]
  40073e:	2408      	movs	r4, #8
  400740:	9402      	str	r4, [sp, #8]
  400742:	2420      	movs	r4, #32
  400744:	9403      	str	r4, [sp, #12]
  400746:	2480      	movs	r4, #128	; 0x80
  400748:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40074a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40074c:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40074e:	9405      	str	r4, [sp, #20]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400750:	2500      	movs	r5, #0
  400752:	2d04      	cmp	r5, #4
  400754:	d80d      	bhi.n	400772 <tc_find_mck_divisor+0x3c>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400756:	ac06      	add	r4, sp, #24
  400758:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  40075c:	f854 4c14 	ldr.w	r4, [r4, #-20]
  400760:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400764:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400766:	4284      	cmp	r4, r0
  400768:	d312      	bcc.n	400790 <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  40076a:	4286      	cmp	r6, r0
  40076c:	d901      	bls.n	400772 <tc_find_mck_divisor+0x3c>
			ul_index++) {
  40076e:	3501      	adds	r5, #1
  400770:	e7ef      	b.n	400752 <tc_find_mck_divisor+0x1c>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  400772:	2d04      	cmp	r5, #4
  400774:	d80e      	bhi.n	400794 <tc_find_mck_divisor+0x5e>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  400776:	b12a      	cbz	r2, 400784 <tc_find_mck_divisor+0x4e>
		*p_uldiv = divisors[ul_index];
  400778:	a906      	add	r1, sp, #24
  40077a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40077e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400782:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  400784:	b143      	cbz	r3, 400798 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  400786:	601d      	str	r5, [r3, #0]
	}

	return 1;
  400788:	2001      	movs	r0, #1
}
  40078a:	b007      	add	sp, #28
  40078c:	bc70      	pop	{r4, r5, r6}
  40078e:	4770      	bx	lr
			return 0;
  400790:	2000      	movs	r0, #0
  400792:	e7fa      	b.n	40078a <tc_find_mck_divisor+0x54>
		return 0;
  400794:	2000      	movs	r0, #0
  400796:	e7f8      	b.n	40078a <tc_find_mck_divisor+0x54>
	return 1;
  400798:	2001      	movs	r0, #1
  40079a:	e7f6      	b.n	40078a <tc_find_mck_divisor+0x54>

0040079c <insert_sort>:

int readTouchY(void) {
  return (readXm());
}

static void insert_sort(int array[], uint8_t size) {
  40079c:	b430      	push	{r4, r5}
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  40079e:	2501      	movs	r5, #1
  4007a0:	e00e      	b.n	4007c0 <insert_sort+0x24>
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
    array[j] = array[j - 1];
  4007a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4007a6:	3b01      	subs	r3, #1
  4007a8:	b2db      	uxtb	r3, r3
  4007aa:	b133      	cbz	r3, 4007ba <insert_sort+0x1e>
  4007ac:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4007b0:	441a      	add	r2, r3
  4007b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4007b6:	4294      	cmp	r4, r2
  4007b8:	dbf3      	blt.n	4007a2 <insert_sort+0x6>
    array[j] = save;
  4007ba:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  4007be:	3501      	adds	r5, #1
  4007c0:	428d      	cmp	r5, r1
  4007c2:	da03      	bge.n	4007cc <insert_sort+0x30>
    save = array[i];
  4007c4:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4007c8:	b2eb      	uxtb	r3, r5
  4007ca:	e7ee      	b.n	4007aa <insert_sort+0xe>
  }
}
  4007cc:	bc30      	pop	{r4, r5}
  4007ce:	4770      	bx	lr

004007d0 <config_AFEC_touch>:
static void config_AFEC_touch(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback) {
  4007d0:	b530      	push	{r4, r5, lr}
  4007d2:	b089      	sub	sp, #36	; 0x24
  4007d4:	4604      	mov	r4, r0
  4007d6:	4615      	mov	r5, r2
  afec_get_config_defaults(&afec_cfg);
  4007d8:	a802      	add	r0, sp, #8
  4007da:	4b13      	ldr	r3, [pc, #76]	; (400828 <config_AFEC_touch+0x58>)
  4007dc:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  4007de:	a902      	add	r1, sp, #8
  4007e0:	4620      	mov	r0, r4
  4007e2:	4b12      	ldr	r3, [pc, #72]	; (40082c <config_AFEC_touch+0x5c>)
  4007e4:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  4007e6:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  4007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  4007ec:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  4007ee:	a801      	add	r0, sp, #4
  4007f0:	4b0f      	ldr	r3, [pc, #60]	; (400830 <config_AFEC_touch+0x60>)
  4007f2:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4007f4:	2300      	movs	r3, #0
  4007f6:	f88d 3005 	strb.w	r3, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  4007fa:	b2ad      	uxth	r5, r5
  4007fc:	aa01      	add	r2, sp, #4
  4007fe:	4629      	mov	r1, r5
  400800:	4620      	mov	r0, r4
  400802:	4b0c      	ldr	r3, [pc, #48]	; (400834 <config_AFEC_touch+0x64>)
  400804:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400806:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400808:	f44f 7300 	mov.w	r3, #512	; 0x200
  40080c:	66e3      	str	r3, [r4, #108]	; 0x6c
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40080e:	f640 73ff 	movw	r3, #4095	; 0xfff
  400812:	429d      	cmp	r5, r3
  400814:	d005      	beq.n	400822 <config_AFEC_touch+0x52>
  400816:	2301      	movs	r3, #1
  400818:	fa03 f505 	lsl.w	r5, r3, r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40081c:	6165      	str	r5, [r4, #20]
}
  40081e:	b009      	add	sp, #36	; 0x24
  400820:	bd30      	pop	{r4, r5, pc}
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  400822:	f640 75ff 	movw	r5, #4095	; 0xfff
  400826:	e7f9      	b.n	40081c <config_AFEC_touch+0x4c>
  400828:	004014cd 	.word	0x004014cd
  40082c:	00401509 	.word	0x00401509
  400830:	004014fd 	.word	0x004014fd
  400834:	00401499 	.word	0x00401499

00400838 <configure_touch>:
void configure_touch(void) {
  400838:	b570      	push	{r4, r5, r6, lr}
  pmc_enable_periph_clk(XM_PIO_ID);
  40083a:	200c      	movs	r0, #12
  40083c:	4c0d      	ldr	r4, [pc, #52]	; (400874 <configure_touch+0x3c>)
  40083e:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  400840:	2010      	movs	r0, #16
  400842:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  400844:	200c      	movs	r0, #12
  400846:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  400848:	2010      	movs	r0, #16
  40084a:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  40084c:	4d0a      	ldr	r5, [pc, #40]	; (400878 <configure_touch+0x40>)
  40084e:	4628      	mov	r0, r5
  400850:	4e0a      	ldr	r6, [pc, #40]	; (40087c <configure_touch+0x44>)
  400852:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  400854:	4c0a      	ldr	r4, [pc, #40]	; (400880 <configure_touch+0x48>)
  400856:	4620      	mov	r0, r4
  400858:	47b0      	blx	r6
  config_AFEC_touch(YP_AFEC, YP_AFEC_ID, YP_CHANNEL, NULL);
  40085a:	2300      	movs	r3, #0
  40085c:	461a      	mov	r2, r3
  40085e:	211d      	movs	r1, #29
  400860:	4620      	mov	r0, r4
  400862:	4c08      	ldr	r4, [pc, #32]	; (400884 <configure_touch+0x4c>)
  400864:	47a0      	blx	r4
  config_AFEC_touch(XM_AFEC, XM_AFEC_ID, XM_CHANNEL, NULL);
  400866:	2300      	movs	r3, #0
  400868:	2201      	movs	r2, #1
  40086a:	2128      	movs	r1, #40	; 0x28
  40086c:	4628      	mov	r0, r5
  40086e:	47a0      	blx	r4
  400870:	bd70      	pop	{r4, r5, r6, pc}
  400872:	bf00      	nop
  400874:	0042126d 	.word	0x0042126d
  400878:	40064000 	.word	0x40064000
  40087c:	00401599 	.word	0x00401599
  400880:	4003c000 	.word	0x4003c000
  400884:	004007d1 	.word	0x004007d1

00400888 <readYp>:
	afec->AFEC_CSELR = afec_ch;
  400888:	4b02      	ldr	r3, [pc, #8]	; (400894 <readYp+0xc>)
  40088a:	2200      	movs	r2, #0
  40088c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40088e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400890:	4770      	bx	lr
  400892:	bf00      	nop
  400894:	4003c000 	.word	0x4003c000

00400898 <readXm>:
	afec->AFEC_CSELR = afec_ch;
  400898:	4b02      	ldr	r3, [pc, #8]	; (4008a4 <readXm+0xc>)
  40089a:	2201      	movs	r2, #1
  40089c:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40089e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop
  4008a4:	40064000 	.word	0x40064000

004008a8 <configReadTouchX>:
void configReadTouchX(void){
  4008a8:	b538      	push	{r3, r4, r5, lr}
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4008aa:	2201      	movs	r2, #1
  4008ac:	4b14      	ldr	r3, [pc, #80]	; (400900 <configReadTouchX+0x58>)
  4008ae:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4008b0:	2202      	movs	r2, #2
  4008b2:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4008b6:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  4008b8:	4d12      	ldr	r5, [pc, #72]	; (400904 <configReadTouchX+0x5c>)
  4008ba:	2300      	movs	r3, #0
  4008bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4008c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4008c4:	4628      	mov	r0, r5
  4008c6:	4c10      	ldr	r4, [pc, #64]	; (400908 <configReadTouchX+0x60>)
  4008c8:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  4008ca:	2300      	movs	r3, #0
  4008cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4008d0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4008d4:	4628      	mov	r0, r5
  4008d6:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  4008d8:	f505 7500 	add.w	r5, r5, #512	; 0x200
  4008dc:	2300      	movs	r3, #0
  4008de:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4008e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008e6:	4628      	mov	r0, r5
  4008e8:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4008ea:	2300      	movs	r3, #0
  4008ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4008f0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008f4:	4628      	mov	r0, r5
  4008f6:	47a0      	blx	r4
  delay_ms(5);
  4008f8:	4804      	ldr	r0, [pc, #16]	; (40090c <configReadTouchX+0x64>)
  4008fa:	4b05      	ldr	r3, [pc, #20]	; (400910 <configReadTouchX+0x68>)
  4008fc:	4798      	blx	r3
  4008fe:	bd38      	pop	{r3, r4, r5, pc}
  400900:	4003c000 	.word	0x4003c000
  400904:	400e1200 	.word	0x400e1200
  400908:	00420eb5 	.word	0x00420eb5
  40090c:	0003dbc2 	.word	0x0003dbc2
  400910:	20400001 	.word	0x20400001

00400914 <configReadTouchY>:
void configReadTouchY(void) {
  400914:	b538      	push	{r3, r4, r5, lr}
  400916:	2201      	movs	r2, #1
  400918:	4b14      	ldr	r3, [pc, #80]	; (40096c <configReadTouchY+0x58>)
  40091a:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40091c:	2202      	movs	r2, #2
  40091e:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400922:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  400924:	4d12      	ldr	r5, [pc, #72]	; (400970 <configReadTouchY+0x5c>)
  400926:	2300      	movs	r3, #0
  400928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40092c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400930:	4628      	mov	r0, r5
  400932:	4c10      	ldr	r4, [pc, #64]	; (400974 <configReadTouchY+0x60>)
  400934:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  400936:	2300      	movs	r3, #0
  400938:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40093c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400940:	4628      	mov	r0, r5
  400942:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  400944:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400948:	2300      	movs	r3, #0
  40094a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40094e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400952:	4628      	mov	r0, r5
  400954:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400956:	2300      	movs	r3, #0
  400958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40095c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400960:	4628      	mov	r0, r5
  400962:	47a0      	blx	r4
  delay_ms(5);
  400964:	4804      	ldr	r0, [pc, #16]	; (400978 <configReadTouchY+0x64>)
  400966:	4b05      	ldr	r3, [pc, #20]	; (40097c <configReadTouchY+0x68>)
  400968:	4798      	blx	r3
  40096a:	bd38      	pop	{r3, r4, r5, pc}
  40096c:	4003c000 	.word	0x4003c000
  400970:	400e1400 	.word	0x400e1400
  400974:	00420eb5 	.word	0x00420eb5
  400978:	0003dbc2 	.word	0x0003dbc2
  40097c:	20400001 	.word	0x20400001

00400980 <readTouchZ>:
int readTouchZ(int rxplate) {
  400980:	b570      	push	{r4, r5, r6, lr}
  400982:	ed2d 8b04 	vpush	{d8-d9}
  400986:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  40098a:	4d2e      	ldr	r5, [pc, #184]	; (400a44 <readTouchZ+0xc4>)
  40098c:	2300      	movs	r3, #0
  40098e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400992:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400996:	4628      	mov	r0, r5
  400998:	4c2b      	ldr	r4, [pc, #172]	; (400a48 <readTouchZ+0xc8>)
  40099a:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  40099c:	4e2b      	ldr	r6, [pc, #172]	; (400a4c <readTouchZ+0xcc>)
  40099e:	2300      	movs	r3, #0
  4009a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4009a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009a8:	4630      	mov	r0, r6
  4009aa:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4009ac:	2300      	movs	r3, #0
  4009ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009b2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009b6:	4630      	mov	r0, r6
  4009b8:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  4009ba:	2300      	movs	r3, #0
  4009bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4009c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4009c4:	4628      	mov	r0, r5
  4009c6:	47a0      	blx	r4
  4009c8:	2201      	movs	r2, #1
  4009ca:	4b21      	ldr	r3, [pc, #132]	; (400a50 <readTouchZ+0xd0>)
  4009cc:	615a      	str	r2, [r3, #20]
  4009ce:	2202      	movs	r2, #2
  4009d0:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4009d4:	615a      	str	r2, [r3, #20]
  delay_ms(5);
  4009d6:	481f      	ldr	r0, [pc, #124]	; (400a54 <readTouchZ+0xd4>)
  4009d8:	4b1f      	ldr	r3, [pc, #124]	; (400a58 <readTouchZ+0xd8>)
  4009da:	4798      	blx	r3
  int z1 = readXm();
  4009dc:	4c1f      	ldr	r4, [pc, #124]	; (400a5c <readTouchZ+0xdc>)
  4009de:	47a0      	blx	r4
  4009e0:	ee08 0a90 	vmov	s17, r0
  int z2 = readYp();
  4009e4:	4b1e      	ldr	r3, [pc, #120]	; (400a60 <readTouchZ+0xe0>)
  4009e6:	4798      	blx	r3
  4009e8:	ee09 0a10 	vmov	s18, r0
  configReadTouchX();
  4009ec:	4b1d      	ldr	r3, [pc, #116]	; (400a64 <readTouchZ+0xe4>)
  4009ee:	4798      	blx	r3
  int x  = readXm();
  4009f0:	47a0      	blx	r4
  rtouch = z2;
  4009f2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  rtouch /= z1;
  4009f6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  4009fa:	ee89 7a28 	vdiv.f32	s14, s18, s17
  rtouch -= 1;
  4009fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  400a02:	ee37 7a67 	vsub.f32	s14, s14, s15
  rtouch *= x;
  400a06:	ee07 0a90 	vmov	s15, r0
  400a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400a0e:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  400a12:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400a16:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  400a1a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400a68 <readTouchZ+0xe8>
  400a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  400a22:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400a6c <readTouchZ+0xec>
  400a26:	eef4 7ac7 	vcmpe.f32	s15, s14
  400a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400a2e:	d501      	bpl.n	400a34 <readTouchZ+0xb4>
  rtouch = 1024.0;
  400a30:	eddf 7a0f 	vldr	s15, [pc, #60]	; 400a70 <readTouchZ+0xf0>
}
  400a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400a38:	ee17 0a90 	vmov	r0, s15
  400a3c:	ecbd 8b04 	vpop	{d8-d9}
  400a40:	bd70      	pop	{r4, r5, r6, pc}
  400a42:	bf00      	nop
  400a44:	400e1200 	.word	0x400e1200
  400a48:	00420eb5 	.word	0x00420eb5
  400a4c:	400e1400 	.word	0x400e1400
  400a50:	4003c000 	.word	0x4003c000
  400a54:	0003dbc2 	.word	0x0003dbc2
  400a58:	20400001 	.word	0x20400001
  400a5c:	00400899 	.word	0x00400899
  400a60:	00400889 	.word	0x00400889
  400a64:	004008a9 	.word	0x004008a9
  400a68:	3a800000 	.word	0x3a800000
  400a6c:	42c80000 	.word	0x42c80000
  400a70:	44800000 	.word	0x44800000

00400a74 <readTouchX>:
int readTouchX(void) {
  400a74:	b508      	push	{r3, lr}
  return(readYp());
  400a76:	4b01      	ldr	r3, [pc, #4]	; (400a7c <readTouchX+0x8>)
  400a78:	4798      	blx	r3
}
  400a7a:	bd08      	pop	{r3, pc}
  400a7c:	00400889 	.word	0x00400889

00400a80 <readTouchY>:
int readTouchY(void) {
  400a80:	b508      	push	{r3, lr}
  return (readXm());
  400a82:	4b01      	ldr	r3, [pc, #4]	; (400a88 <readTouchY+0x8>)
  400a84:	4798      	blx	r3
}
  400a86:	bd08      	pop	{r3, pc}
  400a88:	00400899 	.word	0x00400899

00400a8c <readRawPoint>:

void readRawPoint(int *x, int *y, int *z) {
  400a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a8e:	b0c1      	sub	sp, #260	; 0x104
  400a90:	4607      	mov	r7, r0
  400a92:	460e      	mov	r6, r1
  400a94:	4615      	mov	r5, r2
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  400a96:	4b16      	ldr	r3, [pc, #88]	; (400af0 <readRawPoint+0x64>)
  400a98:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400a9a:	2400      	movs	r4, #0
  400a9c:	e007      	b.n	400aae <readRawPoint+0x22>
    delay_us(1);
  400a9e:	2033      	movs	r0, #51	; 0x33
  400aa0:	4b14      	ldr	r3, [pc, #80]	; (400af4 <readRawPoint+0x68>)
  400aa2:	4798      	blx	r3
    samples[i] = readTouchX();
  400aa4:	4b14      	ldr	r3, [pc, #80]	; (400af8 <readRawPoint+0x6c>)
  400aa6:	4798      	blx	r3
  400aa8:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400aac:	3401      	adds	r4, #1
  400aae:	2c3f      	cmp	r4, #63	; 0x3f
  400ab0:	ddf5      	ble.n	400a9e <readRawPoint+0x12>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400ab2:	2140      	movs	r1, #64	; 0x40
  400ab4:	4668      	mov	r0, sp
  400ab6:	4b11      	ldr	r3, [pc, #68]	; (400afc <readRawPoint+0x70>)
  400ab8:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  400aba:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400abc:	603b      	str	r3, [r7, #0]
  
  configReadTouchY();
  400abe:	4b10      	ldr	r3, [pc, #64]	; (400b00 <readRawPoint+0x74>)
  400ac0:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400ac2:	2400      	movs	r4, #0
  400ac4:	e004      	b.n	400ad0 <readRawPoint+0x44>
    samples[i] = readTouchY();
  400ac6:	4b0f      	ldr	r3, [pc, #60]	; (400b04 <readRawPoint+0x78>)
  400ac8:	4798      	blx	r3
  400aca:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  400ace:	3401      	adds	r4, #1
  400ad0:	2c3f      	cmp	r4, #63	; 0x3f
  400ad2:	ddf8      	ble.n	400ac6 <readRawPoint+0x3a>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400ad4:	2140      	movs	r1, #64	; 0x40
  400ad6:	4668      	mov	r0, sp
  400ad8:	4b08      	ldr	r3, [pc, #32]	; (400afc <readRawPoint+0x70>)
  400ada:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  400adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  400ade:	6033      	str	r3, [r6, #0]
  
  *z = readTouchZ(300);
  400ae0:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400ae4:	4b08      	ldr	r3, [pc, #32]	; (400b08 <readRawPoint+0x7c>)
  400ae6:	4798      	blx	r3
  400ae8:	6028      	str	r0, [r5, #0]
}
  400aea:	b041      	add	sp, #260	; 0x104
  400aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400aee:	bf00      	nop
  400af0:	004008a9 	.word	0x004008a9
  400af4:	20400001 	.word	0x20400001
  400af8:	00400a75 	.word	0x00400a75
  400afc:	0040079d 	.word	0x0040079d
  400b00:	00400915 	.word	0x00400915
  400b04:	00400a81 	.word	0x00400a81
  400b08:	00400981 	.word	0x00400981

00400b0c <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  400b0c:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  400b0e:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  400b12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400b16:	0104      	lsls	r4, r0, #4
  400b18:	4818      	ldr	r0, [pc, #96]	; (400b7c <pointToCoordinate+0x70>)
  400b1a:	fb80 e004 	smull	lr, r0, r0, r4
  400b1e:	4420      	add	r0, r4
  400b20:	17e4      	asrs	r4, r4, #31
  400b22:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  400b26:	2cf0      	cmp	r4, #240	; 0xf0
  400b28:	dd00      	ble.n	400b2c <pointToCoordinate+0x20>
  400b2a:	24f0      	movs	r4, #240	; 0xf0
  if(xtemp < 0) xtemp=0;
  400b2c:	2c00      	cmp	r4, #0
  400b2e:	db1e      	blt.n	400b6e <pointToCoordinate+0x62>
  *py = xtemp;
  400b30:	9802      	ldr	r0, [sp, #8]
  400b32:	6004      	str	r4, [r0, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  400b34:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400b38:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400b3c:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  400b40:	0188      	lsls	r0, r1, #6
  400b42:	490f      	ldr	r1, [pc, #60]	; (400b80 <pointToCoordinate+0x74>)
  400b44:	fb81 4100 	smull	r4, r1, r1, r0
  400b48:	4401      	add	r1, r0
  400b4a:	17c0      	asrs	r0, r0, #31
  400b4c:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  400b50:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  400b54:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400b58:	dd01      	ble.n	400b5e <pointToCoordinate+0x52>
  400b5a:	f44f 70a0 	mov.w	r0, #320	; 0x140
  if(ytemp < 0) ytemp=0;
  400b5e:	2800      	cmp	r0, #0
  400b60:	db07      	blt.n	400b72 <pointToCoordinate+0x66>
  *px = ytemp;
  400b62:	6018      	str	r0, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
  400b64:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400b68:	db05      	blt.n	400b76 <pointToCoordinate+0x6a>
    return 1;
  }  
  return 0;
  400b6a:	2000      	movs	r0, #0
}
  400b6c:	bd10      	pop	{r4, pc}
  if(xtemp < 0) xtemp=0;
  400b6e:	2400      	movs	r4, #0
  400b70:	e7de      	b.n	400b30 <pointToCoordinate+0x24>
  if(ytemp < 0) ytemp=0;
  400b72:	2000      	movs	r0, #0
  400b74:	e7f5      	b.n	400b62 <pointToCoordinate+0x56>
    return 1;
  400b76:	2001      	movs	r0, #1
  400b78:	bd10      	pop	{r4, pc}
  400b7a:	bf00      	nop
  400b7c:	cd9a6735 	.word	0xcd9a6735
  400b80:	bc97c21f 	.word	0xbc97c21f

00400b84 <readPoint>:

int readPoint(int *px, int *py){
  400b84:	b530      	push	{r4, r5, lr}
  400b86:	b087      	sub	sp, #28
  400b88:	4604      	mov	r4, r0
  400b8a:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  400b8c:	aa03      	add	r2, sp, #12
  400b8e:	a904      	add	r1, sp, #16
  400b90:	a805      	add	r0, sp, #20
  400b92:	4b05      	ldr	r3, [pc, #20]	; (400ba8 <readPoint+0x24>)
  400b94:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  400b96:	9500      	str	r5, [sp, #0]
  400b98:	4623      	mov	r3, r4
  400b9a:	9a03      	ldr	r2, [sp, #12]
  400b9c:	9904      	ldr	r1, [sp, #16]
  400b9e:	9805      	ldr	r0, [sp, #20]
  400ba0:	4c02      	ldr	r4, [pc, #8]	; (400bac <readPoint+0x28>)
  400ba2:	47a0      	blx	r4
}
  400ba4:	b007      	add	sp, #28
  400ba6:	bd30      	pop	{r4, r5, pc}
  400ba8:	00400a8d 	.word	0x00400a8d
  400bac:	00400b0d 	.word	0x00400b0d

00400bb0 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400bb0:	2240      	movs	r2, #64	; 0x40
  400bb2:	4b10      	ldr	r3, [pc, #64]	; (400bf4 <ili9341_send_command+0x44>)
  400bb4:	635a      	str	r2, [r3, #52]	; 0x34
  400bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400bba:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400bbe:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400bc0:	4b0d      	ldr	r3, [pc, #52]	; (400bf8 <ili9341_send_command+0x48>)
  400bc2:	691b      	ldr	r3, [r3, #16]
  400bc4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bc8:	d110      	bne.n	400bec <ili9341_send_command+0x3c>
		return 1;
	} else {
		return 0;
  400bca:	2300      	movs	r3, #0
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400bcc:	2b00      	cmp	r3, #0
  400bce:	d0f7      	beq.n	400bc0 <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400bd0:	4b09      	ldr	r3, [pc, #36]	; (400bf8 <ili9341_send_command+0x48>)
  400bd2:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400bd4:	4b08      	ldr	r3, [pc, #32]	; (400bf8 <ili9341_send_command+0x48>)
  400bd6:	691b      	ldr	r3, [r3, #16]
  400bd8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400bdc:	d108      	bne.n	400bf0 <ili9341_send_command+0x40>
		return 0;
  400bde:	2300      	movs	r3, #0
  400be0:	2b00      	cmp	r3, #0
  400be2:	d0f7      	beq.n	400bd4 <ili9341_send_command+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400be4:	2240      	movs	r2, #64	; 0x40
  400be6:	4b03      	ldr	r3, [pc, #12]	; (400bf4 <ili9341_send_command+0x44>)
  400be8:	631a      	str	r2, [r3, #48]	; 0x30
  400bea:	4770      	bx	lr
		return 1;
  400bec:	2301      	movs	r3, #1
  400bee:	e7ed      	b.n	400bcc <ili9341_send_command+0x1c>
  400bf0:	2301      	movs	r3, #1
  400bf2:	e7f5      	b.n	400be0 <ili9341_send_command+0x30>
  400bf4:	400e0e00 	.word	0x400e0e00
  400bf8:	40008000 	.word	0x40008000

00400bfc <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  400bfc:	b510      	push	{r4, lr}
  400bfe:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  400c00:	202a      	movs	r0, #42	; 0x2a
  400c02:	4b4e      	ldr	r3, [pc, #312]	; (400d3c <ili9341_send_draw_limits+0x140>)
  400c04:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  400c06:	4b4e      	ldr	r3, [pc, #312]	; (400d40 <ili9341_send_draw_limits+0x144>)
  400c08:	f9b3 2000 	ldrsh.w	r2, [r3]
  400c0c:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c10:	4b4c      	ldr	r3, [pc, #304]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c12:	691b      	ldr	r3, [r3, #16]
  400c14:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c18:	d17b      	bne.n	400d12 <ili9341_send_draw_limits+0x116>
		return 0;
  400c1a:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c1c:	2b00      	cmp	r3, #0
  400c1e:	d0f7      	beq.n	400c10 <ili9341_send_draw_limits+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c20:	4b48      	ldr	r3, [pc, #288]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c22:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  400c24:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c26:	4b47      	ldr	r3, [pc, #284]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c28:	691b      	ldr	r3, [r3, #16]
  400c2a:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c2e:	d172      	bne.n	400d16 <ili9341_send_draw_limits+0x11a>
		return 0;
  400c30:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c32:	2b00      	cmp	r3, #0
  400c34:	d0f7      	beq.n	400c26 <ili9341_send_draw_limits+0x2a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c36:	4b43      	ldr	r3, [pc, #268]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c38:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400c3a:	b1cc      	cbz	r4, 400c70 <ili9341_send_draw_limits+0x74>
		ili9341_send_byte(limit_end_x >> 8);
  400c3c:	4b42      	ldr	r3, [pc, #264]	; (400d48 <ili9341_send_draw_limits+0x14c>)
  400c3e:	f9b3 2000 	ldrsh.w	r2, [r3]
  400c42:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c46:	4b3f      	ldr	r3, [pc, #252]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c48:	691b      	ldr	r3, [r3, #16]
  400c4a:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c4e:	d164      	bne.n	400d1a <ili9341_send_draw_limits+0x11e>
		return 0;
  400c50:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c52:	2b00      	cmp	r3, #0
  400c54:	d0f7      	beq.n	400c46 <ili9341_send_draw_limits+0x4a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c56:	4b3b      	ldr	r3, [pc, #236]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c58:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400c5a:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c5c:	4b39      	ldr	r3, [pc, #228]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c5e:	691b      	ldr	r3, [r3, #16]
  400c60:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c64:	d15b      	bne.n	400d1e <ili9341_send_draw_limits+0x122>
		return 0;
  400c66:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400c68:	2b00      	cmp	r3, #0
  400c6a:	d0f7      	beq.n	400c5c <ili9341_send_draw_limits+0x60>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400c6c:	4b35      	ldr	r3, [pc, #212]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c6e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c70:	4b34      	ldr	r3, [pc, #208]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c72:	691b      	ldr	r3, [r3, #16]
  400c74:	f413 7f00 	tst.w	r3, #512	; 0x200
  400c78:	d153      	bne.n	400d22 <ili9341_send_draw_limits+0x126>
		return 0;
  400c7a:	2300      	movs	r3, #0
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d0f7      	beq.n	400c70 <ili9341_send_draw_limits+0x74>
  400c80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400c84:	4b31      	ldr	r3, [pc, #196]	; (400d4c <ili9341_send_draw_limits+0x150>)
  400c86:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400c88:	202b      	movs	r0, #43	; 0x2b
  400c8a:	4b2c      	ldr	r3, [pc, #176]	; (400d3c <ili9341_send_draw_limits+0x140>)
  400c8c:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  400c8e:	4b30      	ldr	r3, [pc, #192]	; (400d50 <ili9341_send_draw_limits+0x154>)
  400c90:	f9b3 2000 	ldrsh.w	r2, [r3]
  400c94:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c98:	4b2a      	ldr	r3, [pc, #168]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400c9a:	691b      	ldr	r3, [r3, #16]
  400c9c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ca0:	d141      	bne.n	400d26 <ili9341_send_draw_limits+0x12a>
		return 0;
  400ca2:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ca4:	2b00      	cmp	r3, #0
  400ca6:	d0f7      	beq.n	400c98 <ili9341_send_draw_limits+0x9c>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ca8:	4b26      	ldr	r3, [pc, #152]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400caa:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400cac:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cae:	4b25      	ldr	r3, [pc, #148]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400cb0:	691b      	ldr	r3, [r3, #16]
  400cb2:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cb6:	d138      	bne.n	400d2a <ili9341_send_draw_limits+0x12e>
		return 0;
  400cb8:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cba:	2b00      	cmp	r3, #0
  400cbc:	d0f7      	beq.n	400cae <ili9341_send_draw_limits+0xb2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cbe:	4b21      	ldr	r3, [pc, #132]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400cc0:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400cc2:	b1cc      	cbz	r4, 400cf8 <ili9341_send_draw_limits+0xfc>
		ili9341_send_byte(limit_end_y >> 8);
  400cc4:	4b23      	ldr	r3, [pc, #140]	; (400d54 <ili9341_send_draw_limits+0x158>)
  400cc6:	f9b3 2000 	ldrsh.w	r2, [r3]
  400cca:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cce:	4b1d      	ldr	r3, [pc, #116]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400cd0:	691b      	ldr	r3, [r3, #16]
  400cd2:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cd6:	d12a      	bne.n	400d2e <ili9341_send_draw_limits+0x132>
		return 0;
  400cd8:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cda:	2b00      	cmp	r3, #0
  400cdc:	d0f7      	beq.n	400cce <ili9341_send_draw_limits+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cde:	4b19      	ldr	r3, [pc, #100]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400ce0:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  400ce2:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ce4:	4b17      	ldr	r3, [pc, #92]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400ce6:	691b      	ldr	r3, [r3, #16]
  400ce8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cec:	d121      	bne.n	400d32 <ili9341_send_draw_limits+0x136>
		return 0;
  400cee:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cf0:	2b00      	cmp	r3, #0
  400cf2:	d0f7      	beq.n	400ce4 <ili9341_send_draw_limits+0xe8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cf4:	4b13      	ldr	r3, [pc, #76]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400cf6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cf8:	4b12      	ldr	r3, [pc, #72]	; (400d44 <ili9341_send_draw_limits+0x148>)
  400cfa:	691b      	ldr	r3, [r3, #16]
  400cfc:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d00:	d119      	bne.n	400d36 <ili9341_send_draw_limits+0x13a>
		return 0;
  400d02:	2300      	movs	r3, #0
  400d04:	2b00      	cmp	r3, #0
  400d06:	d0f7      	beq.n	400cf8 <ili9341_send_draw_limits+0xfc>
  400d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d0c:	4b0f      	ldr	r3, [pc, #60]	; (400d4c <ili9341_send_draw_limits+0x150>)
  400d0e:	631a      	str	r2, [r3, #48]	; 0x30
  400d10:	bd10      	pop	{r4, pc}
		return 1;
  400d12:	2301      	movs	r3, #1
  400d14:	e782      	b.n	400c1c <ili9341_send_draw_limits+0x20>
  400d16:	2301      	movs	r3, #1
  400d18:	e78b      	b.n	400c32 <ili9341_send_draw_limits+0x36>
  400d1a:	2301      	movs	r3, #1
  400d1c:	e799      	b.n	400c52 <ili9341_send_draw_limits+0x56>
  400d1e:	2301      	movs	r3, #1
  400d20:	e7a2      	b.n	400c68 <ili9341_send_draw_limits+0x6c>
  400d22:	2301      	movs	r3, #1
  400d24:	e7aa      	b.n	400c7c <ili9341_send_draw_limits+0x80>
  400d26:	2301      	movs	r3, #1
  400d28:	e7bc      	b.n	400ca4 <ili9341_send_draw_limits+0xa8>
  400d2a:	2301      	movs	r3, #1
  400d2c:	e7c5      	b.n	400cba <ili9341_send_draw_limits+0xbe>
  400d2e:	2301      	movs	r3, #1
  400d30:	e7d3      	b.n	400cda <ili9341_send_draw_limits+0xde>
  400d32:	2301      	movs	r3, #1
  400d34:	e7dc      	b.n	400cf0 <ili9341_send_draw_limits+0xf4>
  400d36:	2301      	movs	r3, #1
  400d38:	e7e4      	b.n	400d04 <ili9341_send_draw_limits+0x108>
  400d3a:	bf00      	nop
  400d3c:	00400bb1 	.word	0x00400bb1
  400d40:	20400a40 	.word	0x20400a40
  400d44:	40008000 	.word	0x40008000
  400d48:	20400a3c 	.word	0x20400a3c
  400d4c:	400e1400 	.word	0x400e1400
  400d50:	20400a42 	.word	0x20400a42
  400d54:	20400a3e 	.word	0x20400a3e

00400d58 <ili9341_interface_init>:
 * interface through either the SPI module in master mode or the USART in
 * Master SPI mode.  Configuration must be done in the associated
 * conf_ili9341.h file.
 */
static void ili9341_interface_init(void)
{
  400d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d5c:	b084      	sub	sp, #16
	#error Interface for ILI9341 has not been selected or interface not\
	supported, please configure component driver using the conf_ili9341.h\
	file!
#endif

	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  400d5e:	2703      	movs	r7, #3
  400d60:	ad04      	add	r5, sp, #16
  400d62:	f845 7d04 	str.w	r7, [r5, #-4]!

	spi_master_init(CONF_ILI9341_SPI);
  400d66:	4c10      	ldr	r4, [pc, #64]	; (400da8 <ili9341_interface_init+0x50>)
  400d68:	4620      	mov	r0, r4
  400d6a:	4b10      	ldr	r3, [pc, #64]	; (400dac <ili9341_interface_init+0x54>)
  400d6c:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  400d6e:	2600      	movs	r6, #0
  400d70:	9600      	str	r6, [sp, #0]
  400d72:	4b0f      	ldr	r3, [pc, #60]	; (400db0 <ili9341_interface_init+0x58>)
  400d74:	4632      	mov	r2, r6
  400d76:	4629      	mov	r1, r5
  400d78:	4620      	mov	r0, r4
  400d7a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400dc4 <ili9341_interface_init+0x6c>
  400d7e:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400d80:	4632      	mov	r2, r6
  400d82:	4639      	mov	r1, r7
  400d84:	4620      	mov	r0, r4
  400d86:	4b0b      	ldr	r3, [pc, #44]	; (400db4 <ili9341_interface_init+0x5c>)
  400d88:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400d8a:	2601      	movs	r6, #1
  400d8c:	6026      	str	r6, [r4, #0]
	spi_enable(CONF_ILI9341_SPI);
  spi_select_device(CONF_ILI9341_SPI, &device);
  400d8e:	4629      	mov	r1, r5
  400d90:	4620      	mov	r0, r4
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <ili9341_interface_init+0x60>)
  400d94:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d96:	23f0      	movs	r3, #240	; 0xf0
  400d98:	60e3      	str	r3, [r4, #12]
  400d9a:	60e6      	str	r6, [r4, #12]
	/* Send one dummy byte for the spi_is_tx_ok() to work as expected */
	spi_write_single(CONF_ILI9341_SPI, 0xF0);
  
  // from adafruit lib: https://github.com/adafruit/Adafruit_ILI9341/blob/1e4305308aae231bb5c475de9afc671e78caa722/Adafruit_ILI9341.cpp#L194
  spi_write_single(CONF_ILI9341_SPI, ILI9341_CMD_SOFTWARE_RESET); // Engage software reset
  delay_ms(150);
  400d9c:	4807      	ldr	r0, [pc, #28]	; (400dbc <ili9341_interface_init+0x64>)
  400d9e:	4b08      	ldr	r3, [pc, #32]	; (400dc0 <ili9341_interface_init+0x68>)
  400da0:	4798      	blx	r3
}
  400da2:	b004      	add	sp, #16
  400da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400da8:	40008000 	.word	0x40008000
  400dac:	00420965 	.word	0x00420965
  400db0:	02625a00 	.word	0x02625a00
  400db4:	00421325 	.word	0x00421325
  400db8:	00420a39 	.word	0x00420a39
  400dbc:	0073c0b7 	.word	0x0073c0b7
  400dc0:	20400001 	.word	0x20400001
  400dc4:	004209b9 	.word	0x004209b9

00400dc8 <ili9341_reset_display>:
 * \brief Reset the display using the digital control interface
 *
 * Controls the reset pin of the display controller to reset the display.
 */
static void ili9341_reset_display(void)
{
  400dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400dca:	4d07      	ldr	r5, [pc, #28]	; (400de8 <ili9341_reset_display+0x20>)
  400dcc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400dd0:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(10);
  400dd2:	4f06      	ldr	r7, [pc, #24]	; (400dec <ili9341_reset_display+0x24>)
  400dd4:	4638      	mov	r0, r7
  400dd6:	4c06      	ldr	r4, [pc, #24]	; (400df0 <ili9341_reset_display+0x28>)
  400dd8:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400dda:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_SPI_RESET_PIO, false);
	delay_ms(10);
  400ddc:	4638      	mov	r0, r7
  400dde:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400de0:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(150);
  400de2:	4804      	ldr	r0, [pc, #16]	; (400df4 <ili9341_reset_display+0x2c>)
  400de4:	47a0      	blx	r4
  400de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400de8:	400e0e00 	.word	0x400e0e00
  400dec:	0007b784 	.word	0x0007b784
  400df0:	20400001 	.word	0x20400001
  400df4:	0073c0b7 	.word	0x0073c0b7

00400df8 <ili9341_exit_standby>:
{
  400df8:	b570      	push	{r4, r5, r6, lr}
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  400dfa:	2011      	movs	r0, #17
  400dfc:	4e06      	ldr	r6, [pc, #24]	; (400e18 <ili9341_exit_standby+0x20>)
  400dfe:	47b0      	blx	r6
  400e00:	4c06      	ldr	r4, [pc, #24]	; (400e1c <ili9341_exit_standby+0x24>)
  400e02:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400e06:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(150);
  400e08:	4805      	ldr	r0, [pc, #20]	; (400e20 <ili9341_exit_standby+0x28>)
  400e0a:	4b06      	ldr	r3, [pc, #24]	; (400e24 <ili9341_exit_standby+0x2c>)
  400e0c:	4798      	blx	r3
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  400e0e:	2029      	movs	r0, #41	; 0x29
  400e10:	47b0      	blx	r6
  400e12:	6325      	str	r5, [r4, #48]	; 0x30
  400e14:	bd70      	pop	{r4, r5, r6, pc}
  400e16:	bf00      	nop
  400e18:	00400bb1 	.word	0x00400bb1
  400e1c:	400e1400 	.word	0x400e1400
  400e20:	0073c0b7 	.word	0x0073c0b7
  400e24:	20400001 	.word	0x20400001

00400e28 <ili9341_set_top_left_limit>:
{
  400e28:	b508      	push	{r3, lr}
	limit_start_x = x;
  400e2a:	4b04      	ldr	r3, [pc, #16]	; (400e3c <ili9341_set_top_left_limit+0x14>)
  400e2c:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  400e2e:	4b04      	ldr	r3, [pc, #16]	; (400e40 <ili9341_set_top_left_limit+0x18>)
  400e30:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(false);
  400e32:	2000      	movs	r0, #0
  400e34:	4b03      	ldr	r3, [pc, #12]	; (400e44 <ili9341_set_top_left_limit+0x1c>)
  400e36:	4798      	blx	r3
  400e38:	bd08      	pop	{r3, pc}
  400e3a:	bf00      	nop
  400e3c:	20400a40 	.word	0x20400a40
  400e40:	20400a42 	.word	0x20400a42
  400e44:	00400bfd 	.word	0x00400bfd

00400e48 <ili9341_set_bottom_right_limit>:
{
  400e48:	b508      	push	{r3, lr}
	limit_end_x = x;
  400e4a:	4b04      	ldr	r3, [pc, #16]	; (400e5c <ili9341_set_bottom_right_limit+0x14>)
  400e4c:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  400e4e:	4b04      	ldr	r3, [pc, #16]	; (400e60 <ili9341_set_bottom_right_limit+0x18>)
  400e50:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(true);
  400e52:	2001      	movs	r0, #1
  400e54:	4b03      	ldr	r3, [pc, #12]	; (400e64 <ili9341_set_bottom_right_limit+0x1c>)
  400e56:	4798      	blx	r3
  400e58:	bd08      	pop	{r3, pc}
  400e5a:	bf00      	nop
  400e5c:	20400a3c 	.word	0x20400a3c
  400e60:	20400a3e 	.word	0x20400a3e
  400e64:	00400bfd 	.word	0x00400bfd

00400e68 <ili9341_set_limits>:
{
  400e68:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  400e6a:	4c06      	ldr	r4, [pc, #24]	; (400e84 <ili9341_set_limits+0x1c>)
  400e6c:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  400e6e:	4806      	ldr	r0, [pc, #24]	; (400e88 <ili9341_set_limits+0x20>)
  400e70:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  400e72:	4906      	ldr	r1, [pc, #24]	; (400e8c <ili9341_set_limits+0x24>)
  400e74:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  400e76:	4a06      	ldr	r2, [pc, #24]	; (400e90 <ili9341_set_limits+0x28>)
  400e78:	8013      	strh	r3, [r2, #0]
	ili9341_send_draw_limits(true);
  400e7a:	2001      	movs	r0, #1
  400e7c:	4b05      	ldr	r3, [pc, #20]	; (400e94 <ili9341_set_limits+0x2c>)
  400e7e:	4798      	blx	r3
  400e80:	bd10      	pop	{r4, pc}
  400e82:	bf00      	nop
  400e84:	20400a40 	.word	0x20400a40
  400e88:	20400a42 	.word	0x20400a42
  400e8c:	20400a3c 	.word	0x20400a3c
  400e90:	20400a3e 	.word	0x20400a3e
  400e94:	00400bfd 	.word	0x00400bfd

00400e98 <ili9341_copy_pixels_to_screen>:
{
  400e98:	b538      	push	{r3, r4, r5, lr}
  400e9a:	4605      	mov	r5, r0
  400e9c:	460c      	mov	r4, r1
	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  400e9e:	202c      	movs	r0, #44	; 0x2c
  400ea0:	4b18      	ldr	r3, [pc, #96]	; (400f04 <ili9341_copy_pixels_to_screen+0x6c>)
  400ea2:	4798      	blx	r3
	while (count--) {
  400ea4:	e018      	b.n	400ed8 <ili9341_copy_pixels_to_screen+0x40>
		ili9341_send_byte(*pixel);
  400ea6:	782a      	ldrb	r2, [r5, #0]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ea8:	4b17      	ldr	r3, [pc, #92]	; (400f08 <ili9341_copy_pixels_to_screen+0x70>)
  400eaa:	691b      	ldr	r3, [r3, #16]
  400eac:	f413 7f00 	tst.w	r3, #512	; 0x200
  400eb0:	d122      	bne.n	400ef8 <ili9341_copy_pixels_to_screen+0x60>
		return 0;
  400eb2:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400eb4:	2b00      	cmp	r3, #0
  400eb6:	d0f7      	beq.n	400ea8 <ili9341_copy_pixels_to_screen+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400eb8:	4b13      	ldr	r3, [pc, #76]	; (400f08 <ili9341_copy_pixels_to_screen+0x70>)
  400eba:	60da      	str	r2, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  400ebc:	882a      	ldrh	r2, [r5, #0]
  400ebe:	0a12      	lsrs	r2, r2, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ec0:	4b11      	ldr	r3, [pc, #68]	; (400f08 <ili9341_copy_pixels_to_screen+0x70>)
  400ec2:	691b      	ldr	r3, [r3, #16]
  400ec4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ec8:	d118      	bne.n	400efc <ili9341_copy_pixels_to_screen+0x64>
		return 0;
  400eca:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ecc:	2b00      	cmp	r3, #0
  400ece:	d0f7      	beq.n	400ec0 <ili9341_copy_pixels_to_screen+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ed0:	4b0d      	ldr	r3, [pc, #52]	; (400f08 <ili9341_copy_pixels_to_screen+0x70>)
  400ed2:	60da      	str	r2, [r3, #12]
		pixel++;
  400ed4:	3502      	adds	r5, #2
	while (count--) {
  400ed6:	460c      	mov	r4, r1
  400ed8:	1e61      	subs	r1, r4, #1
  400eda:	2c00      	cmp	r4, #0
  400edc:	d1e3      	bne.n	400ea6 <ili9341_copy_pixels_to_screen+0xe>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ede:	4b0a      	ldr	r3, [pc, #40]	; (400f08 <ili9341_copy_pixels_to_screen+0x70>)
  400ee0:	691b      	ldr	r3, [r3, #16]
  400ee2:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ee6:	d10b      	bne.n	400f00 <ili9341_copy_pixels_to_screen+0x68>
		return 0;
  400ee8:	4623      	mov	r3, r4
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400eea:	2b00      	cmp	r3, #0
  400eec:	d0f7      	beq.n	400ede <ili9341_copy_pixels_to_screen+0x46>
  400eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ef2:	4b06      	ldr	r3, [pc, #24]	; (400f0c <ili9341_copy_pixels_to_screen+0x74>)
  400ef4:	631a      	str	r2, [r3, #48]	; 0x30
  400ef6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
  400ef8:	2301      	movs	r3, #1
  400efa:	e7db      	b.n	400eb4 <ili9341_copy_pixels_to_screen+0x1c>
  400efc:	2301      	movs	r3, #1
  400efe:	e7e5      	b.n	400ecc <ili9341_copy_pixels_to_screen+0x34>
  400f00:	2301      	movs	r3, #1
  400f02:	e7f2      	b.n	400eea <ili9341_copy_pixels_to_screen+0x52>
  400f04:	00400bb1 	.word	0x00400bb1
  400f08:	40008000 	.word	0x40008000
  400f0c:	400e1400 	.word	0x400e1400

00400f10 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  400f10:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  400f12:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  400f16:	f010 0f01 	tst.w	r0, #1
  400f1a:	d124      	bne.n	400f66 <ili9341_set_orientation+0x56>
	uint8_t madctl = 0x48;
  400f1c:	2448      	movs	r4, #72	; 0x48
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9341_FLIP_Y) {
  400f1e:	f010 0f02 	tst.w	r0, #2
  400f22:	d001      	beq.n	400f28 <ili9341_set_orientation+0x18>
		madctl |= 1 << 7;
  400f24:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  400f28:	f010 0f04 	tst.w	r0, #4
  400f2c:	d001      	beq.n	400f32 <ili9341_set_orientation+0x22>
		madctl |= 1 << 5;
  400f2e:	f044 0420 	orr.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  400f32:	2036      	movs	r0, #54	; 0x36
  400f34:	4b0f      	ldr	r3, [pc, #60]	; (400f74 <ili9341_set_orientation+0x64>)
  400f36:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f38:	4b0f      	ldr	r3, [pc, #60]	; (400f78 <ili9341_set_orientation+0x68>)
  400f3a:	691b      	ldr	r3, [r3, #16]
  400f3c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f40:	d113      	bne.n	400f6a <ili9341_set_orientation+0x5a>
		return 0;
  400f42:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f44:	2b00      	cmp	r3, #0
  400f46:	d0f7      	beq.n	400f38 <ili9341_set_orientation+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f48:	4b0b      	ldr	r3, [pc, #44]	; (400f78 <ili9341_set_orientation+0x68>)
  400f4a:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f4c:	4b0a      	ldr	r3, [pc, #40]	; (400f78 <ili9341_set_orientation+0x68>)
  400f4e:	691b      	ldr	r3, [r3, #16]
  400f50:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f54:	d10b      	bne.n	400f6e <ili9341_set_orientation+0x5e>
		return 0;
  400f56:	2300      	movs	r3, #0
  400f58:	2b00      	cmp	r3, #0
  400f5a:	d0f7      	beq.n	400f4c <ili9341_set_orientation+0x3c>
  400f5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f60:	4b06      	ldr	r3, [pc, #24]	; (400f7c <ili9341_set_orientation+0x6c>)
  400f62:	631a      	str	r2, [r3, #48]	; 0x30
  400f64:	bd10      	pop	{r4, pc}
		madctl &= ~(1 << 6);
  400f66:	2408      	movs	r4, #8
  400f68:	e7d9      	b.n	400f1e <ili9341_set_orientation+0xe>
		return 1;
  400f6a:	2301      	movs	r3, #1
  400f6c:	e7ea      	b.n	400f44 <ili9341_set_orientation+0x34>
  400f6e:	2301      	movs	r3, #1
  400f70:	e7f2      	b.n	400f58 <ili9341_set_orientation+0x48>
  400f72:	bf00      	nop
  400f74:	00400bb1 	.word	0x00400bb1
  400f78:	40008000 	.word	0x40008000
  400f7c:	400e1400 	.word	0x400e1400

00400f80 <ili9341_controller_init_registers>:
{
  400f80:	b510      	push	{r4, lr}
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  400f82:	20cd      	movs	r0, #205	; 0xcd
  400f84:	4ba9      	ldr	r3, [pc, #676]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  400f86:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f88:	4ba9      	ldr	r3, [pc, #676]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400f8a:	691b      	ldr	r3, [r3, #16]
  400f8c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f90:	f040 8195 	bne.w	4012be <ili9341_controller_init_registers+0x33e>
		return 0;
  400f94:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f96:	2b00      	cmp	r3, #0
  400f98:	d0f6      	beq.n	400f88 <ili9341_controller_init_registers+0x8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f9a:	2239      	movs	r2, #57	; 0x39
  400f9c:	4ba4      	ldr	r3, [pc, #656]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400f9e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fa0:	4ba3      	ldr	r3, [pc, #652]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fa2:	691b      	ldr	r3, [r3, #16]
  400fa4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fa8:	f040 818b 	bne.w	4012c2 <ili9341_controller_init_registers+0x342>
		return 0;
  400fac:	2300      	movs	r3, #0
  400fae:	2b00      	cmp	r3, #0
  400fb0:	d0f6      	beq.n	400fa0 <ili9341_controller_init_registers+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fb2:	222c      	movs	r2, #44	; 0x2c
  400fb4:	4b9e      	ldr	r3, [pc, #632]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fb6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fb8:	4b9d      	ldr	r3, [pc, #628]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fba:	691b      	ldr	r3, [r3, #16]
  400fbc:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fc0:	f040 8181 	bne.w	4012c6 <ili9341_controller_init_registers+0x346>
		return 0;
  400fc4:	2300      	movs	r3, #0
  400fc6:	2b00      	cmp	r3, #0
  400fc8:	d0f6      	beq.n	400fb8 <ili9341_controller_init_registers+0x38>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fca:	2200      	movs	r2, #0
  400fcc:	4b98      	ldr	r3, [pc, #608]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fce:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fd0:	4b97      	ldr	r3, [pc, #604]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fd2:	691b      	ldr	r3, [r3, #16]
  400fd4:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fd8:	f040 8177 	bne.w	4012ca <ili9341_controller_init_registers+0x34a>
		return 0;
  400fdc:	2300      	movs	r3, #0
  400fde:	2b00      	cmp	r3, #0
  400fe0:	d0f6      	beq.n	400fd0 <ili9341_controller_init_registers+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fe2:	2234      	movs	r2, #52	; 0x34
  400fe4:	4b92      	ldr	r3, [pc, #584]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fe6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fe8:	4b91      	ldr	r3, [pc, #580]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400fea:	691b      	ldr	r3, [r3, #16]
  400fec:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ff0:	f040 816d 	bne.w	4012ce <ili9341_controller_init_registers+0x34e>
		return 0;
  400ff4:	2300      	movs	r3, #0
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d0f6      	beq.n	400fe8 <ili9341_controller_init_registers+0x68>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ffa:	2202      	movs	r2, #2
  400ffc:	4b8c      	ldr	r3, [pc, #560]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  400ffe:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401000:	4b8b      	ldr	r3, [pc, #556]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401002:	691b      	ldr	r3, [r3, #16]
  401004:	f413 7f00 	tst.w	r3, #512	; 0x200
  401008:	f040 8163 	bne.w	4012d2 <ili9341_controller_init_registers+0x352>
		return 0;
  40100c:	2300      	movs	r3, #0
  40100e:	2b00      	cmp	r3, #0
  401010:	d0f6      	beq.n	401000 <ili9341_controller_init_registers+0x80>
  401012:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401016:	4b87      	ldr	r3, [pc, #540]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  401018:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  40101a:	20cf      	movs	r0, #207	; 0xcf
  40101c:	4b83      	ldr	r3, [pc, #524]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  40101e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401020:	4b83      	ldr	r3, [pc, #524]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401022:	691b      	ldr	r3, [r3, #16]
  401024:	f413 7f00 	tst.w	r3, #512	; 0x200
  401028:	f040 8155 	bne.w	4012d6 <ili9341_controller_init_registers+0x356>
		return 0;
  40102c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40102e:	2b00      	cmp	r3, #0
  401030:	d0f6      	beq.n	401020 <ili9341_controller_init_registers+0xa0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401032:	2200      	movs	r2, #0
  401034:	4b7e      	ldr	r3, [pc, #504]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401036:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401038:	4b7d      	ldr	r3, [pc, #500]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40103a:	691b      	ldr	r3, [r3, #16]
  40103c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401040:	f040 814b 	bne.w	4012da <ili9341_controller_init_registers+0x35a>
		return 0;
  401044:	2300      	movs	r3, #0
  401046:	2b00      	cmp	r3, #0
  401048:	d0f6      	beq.n	401038 <ili9341_controller_init_registers+0xb8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40104a:	22aa      	movs	r2, #170	; 0xaa
  40104c:	4b78      	ldr	r3, [pc, #480]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40104e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401050:	4b77      	ldr	r3, [pc, #476]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401052:	691b      	ldr	r3, [r3, #16]
  401054:	f413 7f00 	tst.w	r3, #512	; 0x200
  401058:	f040 8141 	bne.w	4012de <ili9341_controller_init_registers+0x35e>
		return 0;
  40105c:	2300      	movs	r3, #0
  40105e:	2b00      	cmp	r3, #0
  401060:	d0f6      	beq.n	401050 <ili9341_controller_init_registers+0xd0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401062:	22b0      	movs	r2, #176	; 0xb0
  401064:	4b72      	ldr	r3, [pc, #456]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401066:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401068:	4b71      	ldr	r3, [pc, #452]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40106a:	691b      	ldr	r3, [r3, #16]
  40106c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401070:	f040 8137 	bne.w	4012e2 <ili9341_controller_init_registers+0x362>
		return 0;
  401074:	2300      	movs	r3, #0
  401076:	2b00      	cmp	r3, #0
  401078:	d0f6      	beq.n	401068 <ili9341_controller_init_registers+0xe8>
  40107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40107e:	4b6d      	ldr	r3, [pc, #436]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  401080:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  401082:	20f7      	movs	r0, #247	; 0xf7
  401084:	4b69      	ldr	r3, [pc, #420]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  401086:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401088:	4b69      	ldr	r3, [pc, #420]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40108a:	691b      	ldr	r3, [r3, #16]
  40108c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401090:	f040 8129 	bne.w	4012e6 <ili9341_controller_init_registers+0x366>
		return 0;
  401094:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401096:	2b00      	cmp	r3, #0
  401098:	d0f6      	beq.n	401088 <ili9341_controller_init_registers+0x108>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40109a:	2230      	movs	r2, #48	; 0x30
  40109c:	4b64      	ldr	r3, [pc, #400]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40109e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010a0:	4b63      	ldr	r3, [pc, #396]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4010a2:	691b      	ldr	r3, [r3, #16]
  4010a4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010a8:	f040 811f 	bne.w	4012ea <ili9341_controller_init_registers+0x36a>
		return 0;
  4010ac:	2300      	movs	r3, #0
  4010ae:	2b00      	cmp	r3, #0
  4010b0:	d0f6      	beq.n	4010a0 <ili9341_controller_init_registers+0x120>
  4010b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010b6:	4b5f      	ldr	r3, [pc, #380]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  4010b8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  4010ba:	20c0      	movs	r0, #192	; 0xc0
  4010bc:	4b5b      	ldr	r3, [pc, #364]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  4010be:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010c0:	4b5b      	ldr	r3, [pc, #364]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4010c2:	691b      	ldr	r3, [r3, #16]
  4010c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c8:	f040 8111 	bne.w	4012ee <ili9341_controller_init_registers+0x36e>
		return 0;
  4010cc:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4010ce:	2b00      	cmp	r3, #0
  4010d0:	d0f6      	beq.n	4010c0 <ili9341_controller_init_registers+0x140>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010d2:	2225      	movs	r2, #37	; 0x25
  4010d4:	4b56      	ldr	r3, [pc, #344]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4010d6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010d8:	4b55      	ldr	r3, [pc, #340]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4010da:	691b      	ldr	r3, [r3, #16]
  4010dc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010e0:	f040 8107 	bne.w	4012f2 <ili9341_controller_init_registers+0x372>
		return 0;
  4010e4:	2300      	movs	r3, #0
  4010e6:	2b00      	cmp	r3, #0
  4010e8:	d0f6      	beq.n	4010d8 <ili9341_controller_init_registers+0x158>
  4010ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010ee:	4b51      	ldr	r3, [pc, #324]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  4010f0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  4010f2:	20c1      	movs	r0, #193	; 0xc1
  4010f4:	4b4d      	ldr	r3, [pc, #308]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  4010f6:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010f8:	4b4d      	ldr	r3, [pc, #308]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4010fa:	691b      	ldr	r3, [r3, #16]
  4010fc:	f413 7f00 	tst.w	r3, #512	; 0x200
  401100:	f040 80f9 	bne.w	4012f6 <ili9341_controller_init_registers+0x376>
		return 0;
  401104:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401106:	2b00      	cmp	r3, #0
  401108:	d0f6      	beq.n	4010f8 <ili9341_controller_init_registers+0x178>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40110a:	2211      	movs	r2, #17
  40110c:	4b48      	ldr	r3, [pc, #288]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40110e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401110:	4b47      	ldr	r3, [pc, #284]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401112:	691b      	ldr	r3, [r3, #16]
  401114:	f413 7f00 	tst.w	r3, #512	; 0x200
  401118:	f040 80ef 	bne.w	4012fa <ili9341_controller_init_registers+0x37a>
		return 0;
  40111c:	2300      	movs	r3, #0
  40111e:	2b00      	cmp	r3, #0
  401120:	d0f6      	beq.n	401110 <ili9341_controller_init_registers+0x190>
  401122:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401126:	4b43      	ldr	r3, [pc, #268]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  401128:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  40112a:	20c5      	movs	r0, #197	; 0xc5
  40112c:	4b3f      	ldr	r3, [pc, #252]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  40112e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401130:	4b3f      	ldr	r3, [pc, #252]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401132:	691b      	ldr	r3, [r3, #16]
  401134:	f413 7f00 	tst.w	r3, #512	; 0x200
  401138:	f040 80e1 	bne.w	4012fe <ili9341_controller_init_registers+0x37e>
		return 0;
  40113c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40113e:	2b00      	cmp	r3, #0
  401140:	d0f6      	beq.n	401130 <ili9341_controller_init_registers+0x1b0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401142:	225c      	movs	r2, #92	; 0x5c
  401144:	4b3a      	ldr	r3, [pc, #232]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401146:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401148:	4b39      	ldr	r3, [pc, #228]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40114a:	691b      	ldr	r3, [r3, #16]
  40114c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401150:	f040 80d7 	bne.w	401302 <ili9341_controller_init_registers+0x382>
		return 0;
  401154:	2300      	movs	r3, #0
  401156:	2b00      	cmp	r3, #0
  401158:	d0f6      	beq.n	401148 <ili9341_controller_init_registers+0x1c8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40115a:	224c      	movs	r2, #76	; 0x4c
  40115c:	4b34      	ldr	r3, [pc, #208]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40115e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401160:	4b33      	ldr	r3, [pc, #204]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401162:	691b      	ldr	r3, [r3, #16]
  401164:	f413 7f00 	tst.w	r3, #512	; 0x200
  401168:	f040 80cd 	bne.w	401306 <ili9341_controller_init_registers+0x386>
		return 0;
  40116c:	2300      	movs	r3, #0
  40116e:	2b00      	cmp	r3, #0
  401170:	d0f6      	beq.n	401160 <ili9341_controller_init_registers+0x1e0>
  401172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401176:	4b2f      	ldr	r3, [pc, #188]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  401178:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  40117a:	20c7      	movs	r0, #199	; 0xc7
  40117c:	4b2b      	ldr	r3, [pc, #172]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  40117e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401180:	4b2b      	ldr	r3, [pc, #172]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401182:	691b      	ldr	r3, [r3, #16]
  401184:	f413 7f00 	tst.w	r3, #512	; 0x200
  401188:	f040 80bf 	bne.w	40130a <ili9341_controller_init_registers+0x38a>
		return 0;
  40118c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40118e:	2b00      	cmp	r3, #0
  401190:	d0f6      	beq.n	401180 <ili9341_controller_init_registers+0x200>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401192:	2294      	movs	r2, #148	; 0x94
  401194:	4b26      	ldr	r3, [pc, #152]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401196:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401198:	4b25      	ldr	r3, [pc, #148]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  40119a:	691b      	ldr	r3, [r3, #16]
  40119c:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011a0:	f040 80b5 	bne.w	40130e <ili9341_controller_init_registers+0x38e>
		return 0;
  4011a4:	2300      	movs	r3, #0
  4011a6:	2b00      	cmp	r3, #0
  4011a8:	d0f6      	beq.n	401198 <ili9341_controller_init_registers+0x218>
  4011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011ae:	4b21      	ldr	r3, [pc, #132]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  4011b0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  4011b2:	20e8      	movs	r0, #232	; 0xe8
  4011b4:	4b1d      	ldr	r3, [pc, #116]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  4011b6:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011b8:	4b1d      	ldr	r3, [pc, #116]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4011ba:	691b      	ldr	r3, [r3, #16]
  4011bc:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011c0:	f040 80a7 	bne.w	401312 <ili9341_controller_init_registers+0x392>
		return 0;
  4011c4:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4011c6:	2b00      	cmp	r3, #0
  4011c8:	d0f6      	beq.n	4011b8 <ili9341_controller_init_registers+0x238>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4011ca:	2285      	movs	r2, #133	; 0x85
  4011cc:	4b18      	ldr	r3, [pc, #96]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4011ce:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011d0:	4b17      	ldr	r3, [pc, #92]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4011d2:	691b      	ldr	r3, [r3, #16]
  4011d4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011d8:	f040 809d 	bne.w	401316 <ili9341_controller_init_registers+0x396>
		return 0;
  4011dc:	2300      	movs	r3, #0
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d0f6      	beq.n	4011d0 <ili9341_controller_init_registers+0x250>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4011e2:	2201      	movs	r2, #1
  4011e4:	4b12      	ldr	r3, [pc, #72]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4011e6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4011e8:	4b11      	ldr	r3, [pc, #68]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4011ea:	691b      	ldr	r3, [r3, #16]
  4011ec:	f413 7f00 	tst.w	r3, #512	; 0x200
  4011f0:	f040 8093 	bne.w	40131a <ili9341_controller_init_registers+0x39a>
		return 0;
  4011f4:	2300      	movs	r3, #0
  4011f6:	2b00      	cmp	r3, #0
  4011f8:	d0f6      	beq.n	4011e8 <ili9341_controller_init_registers+0x268>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4011fa:	2278      	movs	r2, #120	; 0x78
  4011fc:	4b0c      	ldr	r3, [pc, #48]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  4011fe:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401200:	4b0b      	ldr	r3, [pc, #44]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401202:	691b      	ldr	r3, [r3, #16]
  401204:	f413 7f00 	tst.w	r3, #512	; 0x200
  401208:	f040 8089 	bne.w	40131e <ili9341_controller_init_registers+0x39e>
		return 0;
  40120c:	2300      	movs	r3, #0
  40120e:	2b00      	cmp	r3, #0
  401210:	d0f6      	beq.n	401200 <ili9341_controller_init_registers+0x280>
  401212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401216:	4b07      	ldr	r3, [pc, #28]	; (401234 <ili9341_controller_init_registers+0x2b4>)
  401218:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  40121a:	20ea      	movs	r0, #234	; 0xea
  40121c:	4b03      	ldr	r3, [pc, #12]	; (40122c <ili9341_controller_init_registers+0x2ac>)
  40121e:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401220:	4b03      	ldr	r3, [pc, #12]	; (401230 <ili9341_controller_init_registers+0x2b0>)
  401222:	691b      	ldr	r3, [r3, #16]
  401224:	f413 7f00 	tst.w	r3, #512	; 0x200
  401228:	e006      	b.n	401238 <ili9341_controller_init_registers+0x2b8>
  40122a:	bf00      	nop
  40122c:	00400bb1 	.word	0x00400bb1
  401230:	40008000 	.word	0x40008000
  401234:	400e1400 	.word	0x400e1400
  401238:	d173      	bne.n	401322 <ili9341_controller_init_registers+0x3a2>
		return 0;
  40123a:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  40123c:	2b00      	cmp	r3, #0
  40123e:	d0ef      	beq.n	401220 <ili9341_controller_init_registers+0x2a0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401240:	2200      	movs	r2, #0
  401242:	4b3d      	ldr	r3, [pc, #244]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  401244:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401246:	4b3c      	ldr	r3, [pc, #240]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  401248:	691b      	ldr	r3, [r3, #16]
  40124a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40124e:	d16a      	bne.n	401326 <ili9341_controller_init_registers+0x3a6>
		return 0;
  401250:	2300      	movs	r3, #0
  401252:	2b00      	cmp	r3, #0
  401254:	d0f7      	beq.n	401246 <ili9341_controller_init_registers+0x2c6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401256:	2200      	movs	r2, #0
  401258:	4b37      	ldr	r3, [pc, #220]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  40125a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40125c:	4b36      	ldr	r3, [pc, #216]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  40125e:	691b      	ldr	r3, [r3, #16]
  401260:	f413 7f00 	tst.w	r3, #512	; 0x200
  401264:	d161      	bne.n	40132a <ili9341_controller_init_registers+0x3aa>
		return 0;
  401266:	2300      	movs	r3, #0
  401268:	2b00      	cmp	r3, #0
  40126a:	d0f7      	beq.n	40125c <ili9341_controller_init_registers+0x2dc>
  40126c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401270:	4b32      	ldr	r3, [pc, #200]	; (40133c <ili9341_controller_init_registers+0x3bc>)
  401272:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  401274:	203a      	movs	r0, #58	; 0x3a
  401276:	4b32      	ldr	r3, [pc, #200]	; (401340 <ili9341_controller_init_registers+0x3c0>)
  401278:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40127a:	4b2f      	ldr	r3, [pc, #188]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  40127c:	691b      	ldr	r3, [r3, #16]
  40127e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401282:	d154      	bne.n	40132e <ili9341_controller_init_registers+0x3ae>
		return 0;
  401284:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401286:	2b00      	cmp	r3, #0
  401288:	d0f7      	beq.n	40127a <ili9341_controller_init_registers+0x2fa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40128a:	2255      	movs	r2, #85	; 0x55
  40128c:	4b2a      	ldr	r3, [pc, #168]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  40128e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401290:	4b29      	ldr	r3, [pc, #164]	; (401338 <ili9341_controller_init_registers+0x3b8>)
  401292:	691b      	ldr	r3, [r3, #16]
  401294:	f413 7f00 	tst.w	r3, #512	; 0x200
  401298:	d14b      	bne.n	401332 <ili9341_controller_init_registers+0x3b2>
		return 0;
  40129a:	2300      	movs	r3, #0
  40129c:	2b00      	cmp	r3, #0
  40129e:	d0f7      	beq.n	401290 <ili9341_controller_init_registers+0x310>
  4012a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4012a4:	4b25      	ldr	r3, [pc, #148]	; (40133c <ili9341_controller_init_registers+0x3bc>)
  4012a6:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  4012a8:	2000      	movs	r0, #0
  4012aa:	4b26      	ldr	r3, [pc, #152]	; (401344 <ili9341_controller_init_registers+0x3c4>)
  4012ac:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  4012ae:	23f0      	movs	r3, #240	; 0xf0
  4012b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4012b4:	2100      	movs	r1, #0
  4012b6:	4608      	mov	r0, r1
  4012b8:	4c23      	ldr	r4, [pc, #140]	; (401348 <ili9341_controller_init_registers+0x3c8>)
  4012ba:	47a0      	blx	r4
  4012bc:	bd10      	pop	{r4, pc}
		return 1;
  4012be:	2301      	movs	r3, #1
  4012c0:	e669      	b.n	400f96 <ili9341_controller_init_registers+0x16>
  4012c2:	2301      	movs	r3, #1
  4012c4:	e673      	b.n	400fae <ili9341_controller_init_registers+0x2e>
  4012c6:	2301      	movs	r3, #1
  4012c8:	e67d      	b.n	400fc6 <ili9341_controller_init_registers+0x46>
  4012ca:	2301      	movs	r3, #1
  4012cc:	e687      	b.n	400fde <ili9341_controller_init_registers+0x5e>
  4012ce:	2301      	movs	r3, #1
  4012d0:	e691      	b.n	400ff6 <ili9341_controller_init_registers+0x76>
  4012d2:	2301      	movs	r3, #1
  4012d4:	e69b      	b.n	40100e <ili9341_controller_init_registers+0x8e>
  4012d6:	2301      	movs	r3, #1
  4012d8:	e6a9      	b.n	40102e <ili9341_controller_init_registers+0xae>
  4012da:	2301      	movs	r3, #1
  4012dc:	e6b3      	b.n	401046 <ili9341_controller_init_registers+0xc6>
  4012de:	2301      	movs	r3, #1
  4012e0:	e6bd      	b.n	40105e <ili9341_controller_init_registers+0xde>
  4012e2:	2301      	movs	r3, #1
  4012e4:	e6c7      	b.n	401076 <ili9341_controller_init_registers+0xf6>
  4012e6:	2301      	movs	r3, #1
  4012e8:	e6d5      	b.n	401096 <ili9341_controller_init_registers+0x116>
  4012ea:	2301      	movs	r3, #1
  4012ec:	e6df      	b.n	4010ae <ili9341_controller_init_registers+0x12e>
  4012ee:	2301      	movs	r3, #1
  4012f0:	e6ed      	b.n	4010ce <ili9341_controller_init_registers+0x14e>
  4012f2:	2301      	movs	r3, #1
  4012f4:	e6f7      	b.n	4010e6 <ili9341_controller_init_registers+0x166>
  4012f6:	2301      	movs	r3, #1
  4012f8:	e705      	b.n	401106 <ili9341_controller_init_registers+0x186>
  4012fa:	2301      	movs	r3, #1
  4012fc:	e70f      	b.n	40111e <ili9341_controller_init_registers+0x19e>
  4012fe:	2301      	movs	r3, #1
  401300:	e71d      	b.n	40113e <ili9341_controller_init_registers+0x1be>
  401302:	2301      	movs	r3, #1
  401304:	e727      	b.n	401156 <ili9341_controller_init_registers+0x1d6>
  401306:	2301      	movs	r3, #1
  401308:	e731      	b.n	40116e <ili9341_controller_init_registers+0x1ee>
  40130a:	2301      	movs	r3, #1
  40130c:	e73f      	b.n	40118e <ili9341_controller_init_registers+0x20e>
  40130e:	2301      	movs	r3, #1
  401310:	e749      	b.n	4011a6 <ili9341_controller_init_registers+0x226>
  401312:	2301      	movs	r3, #1
  401314:	e757      	b.n	4011c6 <ili9341_controller_init_registers+0x246>
  401316:	2301      	movs	r3, #1
  401318:	e761      	b.n	4011de <ili9341_controller_init_registers+0x25e>
  40131a:	2301      	movs	r3, #1
  40131c:	e76b      	b.n	4011f6 <ili9341_controller_init_registers+0x276>
  40131e:	2301      	movs	r3, #1
  401320:	e775      	b.n	40120e <ili9341_controller_init_registers+0x28e>
  401322:	2301      	movs	r3, #1
  401324:	e78a      	b.n	40123c <ili9341_controller_init_registers+0x2bc>
  401326:	2301      	movs	r3, #1
  401328:	e793      	b.n	401252 <ili9341_controller_init_registers+0x2d2>
  40132a:	2301      	movs	r3, #1
  40132c:	e79c      	b.n	401268 <ili9341_controller_init_registers+0x2e8>
  40132e:	2301      	movs	r3, #1
  401330:	e7a9      	b.n	401286 <ili9341_controller_init_registers+0x306>
  401332:	2301      	movs	r3, #1
  401334:	e7b2      	b.n	40129c <ili9341_controller_init_registers+0x31c>
  401336:	bf00      	nop
  401338:	40008000 	.word	0x40008000
  40133c:	400e1400 	.word	0x400e1400
  401340:	00400bb1 	.word	0x00400bb1
  401344:	00400f11 	.word	0x00400f11
  401348:	00400e69 	.word	0x00400e69

0040134c <ili9341_init>:
{
  40134c:	b508      	push	{r3, lr}
	ili9341_interface_init();
  40134e:	4b04      	ldr	r3, [pc, #16]	; (401360 <ili9341_init+0x14>)
  401350:	4798      	blx	r3
	ili9341_reset_display();
  401352:	4b04      	ldr	r3, [pc, #16]	; (401364 <ili9341_init+0x18>)
  401354:	4798      	blx	r3
	ili9341_exit_standby();
  401356:	4b04      	ldr	r3, [pc, #16]	; (401368 <ili9341_init+0x1c>)
  401358:	4798      	blx	r3
	ili9341_controller_init_registers();
  40135a:	4b04      	ldr	r3, [pc, #16]	; (40136c <ili9341_init+0x20>)
  40135c:	4798      	blx	r3
  40135e:	bd08      	pop	{r3, pc}
  401360:	00400d59 	.word	0x00400d59
  401364:	00400dc9 	.word	0x00400dc9
  401368:	00400df9 	.word	0x00400df9
  40136c:	00400f81 	.word	0x00400f81

00401370 <afec_find_inst_num>:
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
#if defined(AFEC1)
	if (afec == AFEC1) {
  401370:	4b03      	ldr	r3, [pc, #12]	; (401380 <afec_find_inst_num+0x10>)
  401372:	4298      	cmp	r0, r3
  401374:	d001      	beq.n	40137a <afec_find_inst_num+0xa>
		return 1;
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
		return 0;
  401376:	2000      	movs	r0, #0
	}
#endif
	return 0;
}
  401378:	4770      	bx	lr
		return 1;
  40137a:	2001      	movs	r0, #1
  40137c:	4770      	bx	lr
  40137e:	bf00      	nop
  401380:	40064000 	.word	0x40064000

00401384 <afec_find_pid>:
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  401384:	4b03      	ldr	r3, [pc, #12]	; (401394 <afec_find_pid+0x10>)
  401386:	4298      	cmp	r0, r3
  401388:	d001      	beq.n	40138e <afec_find_pid+0xa>
		return ID_AFEC1;
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
		return ID_AFEC0;
  40138a:	201d      	movs	r0, #29
	}
#endif
	return ID_AFEC0;
}
  40138c:	4770      	bx	lr
		return ID_AFEC1;
  40138e:	2028      	movs	r0, #40	; 0x28
  401390:	4770      	bx	lr
  401392:	bf00      	nop
  401394:	40064000 	.word	0x40064000

00401398 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  401398:	b410      	push	{r4}
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40139a:	7ccb      	ldrb	r3, [r1, #19]
  40139c:	b373      	cbz	r3, 4013fc <afec_set_config+0x64>
  40139e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4013a2:	684a      	ldr	r2, [r1, #4]
  4013a4:	688c      	ldr	r4, [r1, #8]
  4013a6:	fbb2 f2f4 	udiv	r2, r2, r4
  4013aa:	3a01      	subs	r2, #1
  4013ac:	0212      	lsls	r2, r2, #8
  4013ae:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4013b0:	4313      	orrs	r3, r2
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4013b2:	7c0a      	ldrb	r2, [r1, #16]
  4013b4:	0612      	lsls	r2, r2, #24
  4013b6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			AFEC_MR_ONE |
  4013ba:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4013bc:	7c4a      	ldrb	r2, [r1, #17]
  4013be:	0712      	lsls	r2, r2, #28
  4013c0:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  4013c4:	4313      	orrs	r3, r2
			(config->startup_time);
  4013c6:	68ca      	ldr	r2, [r1, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  4013c8:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4013ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000

	afec->AFEC_MR = reg;
  4013ce:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4013d0:	7d0b      	ldrb	r3, [r1, #20]
  4013d2:	b1ab      	cbz	r3, 401400 <afec_set_config+0x68>
  4013d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			(config->resolution) |
  4013d8:	680a      	ldr	r2, [r1, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4013da:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  4013dc:	7d4b      	ldrb	r3, [r1, #21]
  4013de:	b98b      	cbnz	r3, 401404 <afec_set_config+0x6c>
  4013e0:	2300      	movs	r3, #0
			(config->resolution) |
  4013e2:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4013e4:	6083      	str	r3, [r0, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4013e6:	7d8b      	ldrb	r3, [r1, #22]
  4013e8:	021b      	lsls	r3, r3, #8
  4013ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4013ee:	f043 030c 	orr.w	r3, r3, #12
  4013f2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  4013f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013fa:	4770      	bx	lr
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4013fc:	2300      	movs	r3, #0
  4013fe:	e7d0      	b.n	4013a2 <afec_set_config+0xa>
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401400:	2300      	movs	r3, #0
  401402:	e7e9      	b.n	4013d8 <afec_set_config+0x40>
			(config->stm ? AFEC_EMR_STM : 0);
  401404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  401408:	e7eb      	b.n	4013e2 <afec_set_config+0x4a>
	...

0040140c <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  40140c:	b508      	push	{r3, lr}
	if (afec_callback_pointer[inst_num][source]) {
  40140e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  401412:	4b03      	ldr	r3, [pc, #12]	; (401420 <afec_interrupt+0x14>)
  401414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  401418:	b103      	cbz	r3, 40141c <afec_interrupt+0x10>
		afec_callback_pointer[inst_num][source]();
  40141a:	4798      	blx	r3
  40141c:	bd08      	pop	{r3, pc}
  40141e:	bf00      	nop
  401420:	2043a0e4 	.word	0x2043a0e4

00401424 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  401424:	b530      	push	{r4, r5, lr}
  401426:	b083      	sub	sp, #12
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  401428:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40142a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40142c:	400b      	ands	r3, r1
  40142e:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);
  401430:	4b17      	ldr	r3, [pc, #92]	; (401490 <afec_process_callback+0x6c>)
  401432:	4798      	blx	r3
  401434:	4605      	mov	r5, r0

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401436:	2400      	movs	r4, #0
  401438:	e009      	b.n	40144e <afec_process_callback+0x2a>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40143a:	2c0e      	cmp	r4, #14
  40143c:	d81a      	bhi.n	401474 <afec_process_callback+0x50>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40143e:	f104 020c 	add.w	r2, r4, #12
  401442:	2301      	movs	r3, #1
  401444:	4093      	lsls	r3, r2
  401446:	9a01      	ldr	r2, [sp, #4]
  401448:	4213      	tst	r3, r2
  40144a:	d10e      	bne.n	40146a <afec_process_callback+0x46>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40144c:	3401      	adds	r4, #1
  40144e:	2c0f      	cmp	r4, #15
  401450:	d81c      	bhi.n	40148c <afec_process_callback+0x68>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  401452:	2c0b      	cmp	r4, #11
  401454:	d8f1      	bhi.n	40143a <afec_process_callback+0x16>
			if (status & (1 << cnt)) {
  401456:	2301      	movs	r3, #1
  401458:	40a3      	lsls	r3, r4
  40145a:	9a01      	ldr	r2, [sp, #4]
  40145c:	4213      	tst	r3, r2
  40145e:	d0f5      	beq.n	40144c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401460:	4621      	mov	r1, r4
  401462:	b2e8      	uxtb	r0, r5
  401464:	4b0b      	ldr	r3, [pc, #44]	; (401494 <afec_process_callback+0x70>)
  401466:	4798      	blx	r3
  401468:	e7f0      	b.n	40144c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40146a:	4621      	mov	r1, r4
  40146c:	b2e8      	uxtb	r0, r5
  40146e:	4b09      	ldr	r3, [pc, #36]	; (401494 <afec_process_callback+0x70>)
  401470:	4798      	blx	r3
  401472:	e7eb      	b.n	40144c <afec_process_callback+0x28>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  401474:	f104 020f 	add.w	r2, r4, #15
  401478:	2301      	movs	r3, #1
  40147a:	4093      	lsls	r3, r2
  40147c:	9a01      	ldr	r2, [sp, #4]
  40147e:	4213      	tst	r3, r2
  401480:	d0e4      	beq.n	40144c <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401482:	4621      	mov	r1, r4
  401484:	b2e8      	uxtb	r0, r5
  401486:	4b03      	ldr	r3, [pc, #12]	; (401494 <afec_process_callback+0x70>)
  401488:	4798      	blx	r3
  40148a:	e7df      	b.n	40144c <afec_process_callback+0x28>
			}
		}
	}
}
  40148c:	b003      	add	sp, #12
  40148e:	bd30      	pop	{r4, r5, pc}
  401490:	00401371 	.word	0x00401371
  401494:	0040140d 	.word	0x0040140d

00401498 <afec_ch_set_config>:
{
  401498:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40149a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  40149c:	2301      	movs	r3, #1
  40149e:	408b      	lsls	r3, r1
  4014a0:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4014a4:	7815      	ldrb	r5, [r2, #0]
  4014a6:	b175      	cbz	r5, 4014c6 <afec_ch_set_config+0x2e>
  4014a8:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4014aa:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4014ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4014ae:	004c      	lsls	r4, r1, #1
  4014b0:	2103      	movs	r1, #3
  4014b2:	40a1      	lsls	r1, r4
  4014b4:	ea23 0101 	bic.w	r1, r3, r1
	reg |= (config->gain) << (2 * channel);
  4014b8:	7853      	ldrb	r3, [r2, #1]
  4014ba:	fa03 f404 	lsl.w	r4, r3, r4
  4014be:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4014c0:	6541      	str	r1, [r0, #84]	; 0x54
}
  4014c2:	bc30      	pop	{r4, r5}
  4014c4:	4770      	bx	lr
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4014c6:	2300      	movs	r3, #0
  4014c8:	e7ee      	b.n	4014a8 <afec_ch_set_config+0x10>
	...

004014cc <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4014cc:	2200      	movs	r2, #0
  4014ce:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4014d0:	4b08      	ldr	r3, [pc, #32]	; (4014f4 <afec_get_config_defaults+0x28>)
  4014d2:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4014d4:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <afec_get_config_defaults+0x2c>)
  4014d6:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4014d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4014dc:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4014de:	2302      	movs	r3, #2
  4014e0:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4014e2:	2301      	movs	r3, #1
  4014e4:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4014e6:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4014e8:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4014ea:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4014ec:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4014ee:	7583      	strb	r3, [r0, #22]
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	11e1a300 	.word	0x11e1a300
  4014f8:	005b8d80 	.word	0x005b8d80

004014fc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4014fc:	2300      	movs	r3, #0
  4014fe:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  401500:	2301      	movs	r3, #1
  401502:	7043      	strb	r3, [r0, #1]
  401504:	4770      	bx	lr
	...

00401508 <afec_init>:
	return afec->AFEC_ISR;
  401508:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40150a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40150e:	d001      	beq.n	401514 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  401510:	2019      	movs	r0, #25
  401512:	4770      	bx	lr
{
  401514:	b510      	push	{r4, lr}
  401516:	4604      	mov	r4, r0
	afec->AFEC_CR = AFEC_CR_SWRST;
  401518:	2301      	movs	r3, #1
  40151a:	6003      	str	r3, [r0, #0]
	afec_set_config(afec, config);
  40151c:	4b10      	ldr	r3, [pc, #64]	; (401560 <afec_init+0x58>)
  40151e:	4798      	blx	r3
	if(afec == AFEC0) {
  401520:	4b10      	ldr	r3, [pc, #64]	; (401564 <afec_init+0x5c>)
  401522:	429c      	cmp	r4, r3
  401524:	d00c      	beq.n	401540 <afec_init+0x38>
	if(afec == AFEC1) {
  401526:	4b10      	ldr	r3, [pc, #64]	; (401568 <afec_init+0x60>)
  401528:	429c      	cmp	r4, r3
  40152a:	d00b      	beq.n	401544 <afec_init+0x3c>
	return STATUS_OK;
  40152c:	2000      	movs	r0, #0
  40152e:	bd10      	pop	{r4, pc}
			afec_callback_pointer[0][i] = 0;
  401530:	2100      	movs	r1, #0
  401532:	4a0e      	ldr	r2, [pc, #56]	; (40156c <afec_init+0x64>)
  401534:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401538:	3301      	adds	r3, #1
  40153a:	2b0f      	cmp	r3, #15
  40153c:	d9f8      	bls.n	401530 <afec_init+0x28>
  40153e:	e7f2      	b.n	401526 <afec_init+0x1e>
  401540:	2300      	movs	r3, #0
  401542:	e7fa      	b.n	40153a <afec_init+0x32>
  401544:	2300      	movs	r3, #0
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401546:	2b0f      	cmp	r3, #15
  401548:	d807      	bhi.n	40155a <afec_init+0x52>
			afec_callback_pointer[1][i] = 0;
  40154a:	f103 0110 	add.w	r1, r3, #16
  40154e:	2000      	movs	r0, #0
  401550:	4a06      	ldr	r2, [pc, #24]	; (40156c <afec_init+0x64>)
  401552:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401556:	3301      	adds	r3, #1
  401558:	e7f5      	b.n	401546 <afec_init+0x3e>
	return STATUS_OK;
  40155a:	2000      	movs	r0, #0
  40155c:	bd10      	pop	{r4, pc}
  40155e:	bf00      	nop
  401560:	00401399 	.word	0x00401399
  401564:	4003c000 	.word	0x4003c000
  401568:	40064000 	.word	0x40064000
  40156c:	2043a0e4 	.word	0x2043a0e4

00401570 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401570:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  401572:	4802      	ldr	r0, [pc, #8]	; (40157c <AFEC0_Handler+0xc>)
  401574:	4b02      	ldr	r3, [pc, #8]	; (401580 <AFEC0_Handler+0x10>)
  401576:	4798      	blx	r3
  401578:	bd08      	pop	{r3, pc}
  40157a:	bf00      	nop
  40157c:	4003c000 	.word	0x4003c000
  401580:	00401425 	.word	0x00401425

00401584 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  401584:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  401586:	4802      	ldr	r0, [pc, #8]	; (401590 <AFEC1_Handler+0xc>)
  401588:	4b02      	ldr	r3, [pc, #8]	; (401594 <AFEC1_Handler+0x10>)
  40158a:	4798      	blx	r3
  40158c:	bd08      	pop	{r3, pc}
  40158e:	bf00      	nop
  401590:	40064000 	.word	0x40064000
  401594:	00401425 	.word	0x00401425

00401598 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  401598:	b500      	push	{lr}
  40159a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  40159c:	4b11      	ldr	r3, [pc, #68]	; (4015e4 <afec_enable+0x4c>)
  40159e:	4798      	blx	r3
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4015a0:	4b11      	ldr	r3, [pc, #68]	; (4015e8 <afec_enable+0x50>)
  4015a2:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4015a4:	4b11      	ldr	r3, [pc, #68]	; (4015ec <afec_enable+0x54>)
  4015a6:	789b      	ldrb	r3, [r3, #2]
  4015a8:	2bff      	cmp	r3, #255	; 0xff
  4015aa:	d01a      	beq.n	4015e2 <afec_enable+0x4a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4015ac:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4015b0:	fab3 f383 	clz	r3, r3
  4015b4:	095b      	lsrs	r3, r3, #5
  4015b6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4015b8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4015ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4015be:	2200      	movs	r2, #0
  4015c0:	4b0b      	ldr	r3, [pc, #44]	; (4015f0 <afec_enable+0x58>)
  4015c2:	701a      	strb	r2, [r3, #0]
	return flags;
  4015c4:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4015c6:	4a09      	ldr	r2, [pc, #36]	; (4015ec <afec_enable+0x54>)
  4015c8:	7893      	ldrb	r3, [r2, #2]
  4015ca:	3301      	adds	r3, #1
  4015cc:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4015ce:	b129      	cbz	r1, 4015dc <afec_enable+0x44>
		cpu_irq_enable();
  4015d0:	2201      	movs	r2, #1
  4015d2:	4b07      	ldr	r3, [pc, #28]	; (4015f0 <afec_enable+0x58>)
  4015d4:	701a      	strb	r2, [r3, #0]
  4015d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4015da:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4015dc:	b003      	add	sp, #12
  4015de:	f85d fb04 	ldr.w	pc, [sp], #4
  4015e2:	e7fe      	b.n	4015e2 <afec_enable+0x4a>
  4015e4:	00401385 	.word	0x00401385
  4015e8:	0042126d 	.word	0x0042126d
  4015ec:	2043a0dc 	.word	0x2043a0dc
  4015f0:	20400068 	.word	0x20400068

004015f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4015f4:	f100 0308 	add.w	r3, r0, #8
  4015f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4015fa:	f04f 32ff 	mov.w	r2, #4294967295
  4015fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401600:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401602:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401604:	2300      	movs	r3, #0
  401606:	6003      	str	r3, [r0, #0]
  401608:	4770      	bx	lr

0040160a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40160a:	2300      	movs	r3, #0
  40160c:	6103      	str	r3, [r0, #16]
  40160e:	4770      	bx	lr

00401610 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401610:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401612:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401614:	689a      	ldr	r2, [r3, #8]
  401616:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401618:	689a      	ldr	r2, [r3, #8]
  40161a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40161c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40161e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401620:	6803      	ldr	r3, [r0, #0]
  401622:	3301      	adds	r3, #1
  401624:	6003      	str	r3, [r0, #0]
  401626:	4770      	bx	lr

00401628 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401628:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40162a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40162c:	f1b5 3fff 	cmp.w	r5, #4294967295
  401630:	d002      	beq.n	401638 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401632:	f100 0208 	add.w	r2, r0, #8
  401636:	e002      	b.n	40163e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401638:	6902      	ldr	r2, [r0, #16]
  40163a:	e004      	b.n	401646 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40163c:	461a      	mov	r2, r3
  40163e:	6853      	ldr	r3, [r2, #4]
  401640:	681c      	ldr	r4, [r3, #0]
  401642:	42a5      	cmp	r5, r4
  401644:	d2fa      	bcs.n	40163c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401646:	6853      	ldr	r3, [r2, #4]
  401648:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40164a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40164c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40164e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401650:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401652:	6803      	ldr	r3, [r0, #0]
  401654:	3301      	adds	r3, #1
  401656:	6003      	str	r3, [r0, #0]
}
  401658:	bc30      	pop	{r4, r5}
  40165a:	4770      	bx	lr

0040165c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40165c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40165e:	6842      	ldr	r2, [r0, #4]
  401660:	6881      	ldr	r1, [r0, #8]
  401662:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401664:	6882      	ldr	r2, [r0, #8]
  401666:	6841      	ldr	r1, [r0, #4]
  401668:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40166a:	685a      	ldr	r2, [r3, #4]
  40166c:	4290      	cmp	r0, r2
  40166e:	d005      	beq.n	40167c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401670:	2200      	movs	r2, #0
  401672:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401674:	6818      	ldr	r0, [r3, #0]
  401676:	3801      	subs	r0, #1
  401678:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40167a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40167c:	6882      	ldr	r2, [r0, #8]
  40167e:	605a      	str	r2, [r3, #4]
  401680:	e7f6      	b.n	401670 <uxListRemove+0x14>
	...

00401684 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401684:	4b0d      	ldr	r3, [pc, #52]	; (4016bc <prvTaskExitError+0x38>)
  401686:	681b      	ldr	r3, [r3, #0]
  401688:	f1b3 3fff 	cmp.w	r3, #4294967295
  40168c:	d00a      	beq.n	4016a4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40168e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401692:	b672      	cpsid	i
  401694:	f383 8811 	msr	BASEPRI, r3
  401698:	f3bf 8f6f 	isb	sy
  40169c:	f3bf 8f4f 	dsb	sy
  4016a0:	b662      	cpsie	i
  4016a2:	e7fe      	b.n	4016a2 <prvTaskExitError+0x1e>
  4016a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016a8:	b672      	cpsid	i
  4016aa:	f383 8811 	msr	BASEPRI, r3
  4016ae:	f3bf 8f6f 	isb	sy
  4016b2:	f3bf 8f4f 	dsb	sy
  4016b6:	b662      	cpsie	i
  4016b8:	e7fe      	b.n	4016b8 <prvTaskExitError+0x34>
  4016ba:	bf00      	nop
  4016bc:	2040000c 	.word	0x2040000c

004016c0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4016c0:	4806      	ldr	r0, [pc, #24]	; (4016dc <prvPortStartFirstTask+0x1c>)
  4016c2:	6800      	ldr	r0, [r0, #0]
  4016c4:	6800      	ldr	r0, [r0, #0]
  4016c6:	f380 8808 	msr	MSP, r0
  4016ca:	b662      	cpsie	i
  4016cc:	b661      	cpsie	f
  4016ce:	f3bf 8f4f 	dsb	sy
  4016d2:	f3bf 8f6f 	isb	sy
  4016d6:	df00      	svc	0
  4016d8:	bf00      	nop
  4016da:	0000      	.short	0x0000
  4016dc:	e000ed08 	.word	0xe000ed08

004016e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4016e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4016f0 <vPortEnableVFP+0x10>
  4016e4:	6801      	ldr	r1, [r0, #0]
  4016e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4016ea:	6001      	str	r1, [r0, #0]
  4016ec:	4770      	bx	lr
  4016ee:	0000      	.short	0x0000
  4016f0:	e000ed88 	.word	0xe000ed88

004016f4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4016f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4016f8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4016fc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401700:	4b05      	ldr	r3, [pc, #20]	; (401718 <pxPortInitialiseStack+0x24>)
  401702:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401706:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40170a:	f06f 0302 	mvn.w	r3, #2
  40170e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401712:	3844      	subs	r0, #68	; 0x44
  401714:	4770      	bx	lr
  401716:	bf00      	nop
  401718:	00401685 	.word	0x00401685

0040171c <SVC_Handler>:
	__asm volatile (
  40171c:	4b06      	ldr	r3, [pc, #24]	; (401738 <pxCurrentTCBConst2>)
  40171e:	6819      	ldr	r1, [r3, #0]
  401720:	6808      	ldr	r0, [r1, #0]
  401722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401726:	f380 8809 	msr	PSP, r0
  40172a:	f3bf 8f6f 	isb	sy
  40172e:	f04f 0000 	mov.w	r0, #0
  401732:	f380 8811 	msr	BASEPRI, r0
  401736:	4770      	bx	lr

00401738 <pxCurrentTCBConst2>:
  401738:	2040c254 	.word	0x2040c254
  40173c:	4770      	bx	lr
  40173e:	bf00      	nop

00401740 <vPortEnterCritical>:
  401740:	f04f 0380 	mov.w	r3, #128	; 0x80
  401744:	b672      	cpsid	i
  401746:	f383 8811 	msr	BASEPRI, r3
  40174a:	f3bf 8f6f 	isb	sy
  40174e:	f3bf 8f4f 	dsb	sy
  401752:	b662      	cpsie	i
	uxCriticalNesting++;
  401754:	4a0b      	ldr	r2, [pc, #44]	; (401784 <vPortEnterCritical+0x44>)
  401756:	6813      	ldr	r3, [r2, #0]
  401758:	3301      	adds	r3, #1
  40175a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  40175c:	2b01      	cmp	r3, #1
  40175e:	d10f      	bne.n	401780 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401760:	4b09      	ldr	r3, [pc, #36]	; (401788 <vPortEnterCritical+0x48>)
  401762:	681b      	ldr	r3, [r3, #0]
  401764:	f013 0fff 	tst.w	r3, #255	; 0xff
  401768:	d00a      	beq.n	401780 <vPortEnterCritical+0x40>
  40176a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40176e:	b672      	cpsid	i
  401770:	f383 8811 	msr	BASEPRI, r3
  401774:	f3bf 8f6f 	isb	sy
  401778:	f3bf 8f4f 	dsb	sy
  40177c:	b662      	cpsie	i
  40177e:	e7fe      	b.n	40177e <vPortEnterCritical+0x3e>
  401780:	4770      	bx	lr
  401782:	bf00      	nop
  401784:	2040000c 	.word	0x2040000c
  401788:	e000ed04 	.word	0xe000ed04

0040178c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  40178c:	4b0a      	ldr	r3, [pc, #40]	; (4017b8 <vPortExitCritical+0x2c>)
  40178e:	681b      	ldr	r3, [r3, #0]
  401790:	b953      	cbnz	r3, 4017a8 <vPortExitCritical+0x1c>
  401792:	f04f 0380 	mov.w	r3, #128	; 0x80
  401796:	b672      	cpsid	i
  401798:	f383 8811 	msr	BASEPRI, r3
  40179c:	f3bf 8f6f 	isb	sy
  4017a0:	f3bf 8f4f 	dsb	sy
  4017a4:	b662      	cpsie	i
  4017a6:	e7fe      	b.n	4017a6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4017a8:	3b01      	subs	r3, #1
  4017aa:	4a03      	ldr	r2, [pc, #12]	; (4017b8 <vPortExitCritical+0x2c>)
  4017ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4017ae:	b90b      	cbnz	r3, 4017b4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4017b0:	f383 8811 	msr	BASEPRI, r3
  4017b4:	4770      	bx	lr
  4017b6:	bf00      	nop
  4017b8:	2040000c 	.word	0x2040000c

004017bc <PendSV_Handler>:
	__asm volatile
  4017bc:	f3ef 8009 	mrs	r0, PSP
  4017c0:	f3bf 8f6f 	isb	sy
  4017c4:	4b15      	ldr	r3, [pc, #84]	; (40181c <pxCurrentTCBConst>)
  4017c6:	681a      	ldr	r2, [r3, #0]
  4017c8:	f01e 0f10 	tst.w	lr, #16
  4017cc:	bf08      	it	eq
  4017ce:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4017d2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017d6:	6010      	str	r0, [r2, #0]
  4017d8:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4017dc:	f04f 0080 	mov.w	r0, #128	; 0x80
  4017e0:	b672      	cpsid	i
  4017e2:	f380 8811 	msr	BASEPRI, r0
  4017e6:	f3bf 8f4f 	dsb	sy
  4017ea:	f3bf 8f6f 	isb	sy
  4017ee:	b662      	cpsie	i
  4017f0:	f001 f960 	bl	402ab4 <vTaskSwitchContext>
  4017f4:	f04f 0000 	mov.w	r0, #0
  4017f8:	f380 8811 	msr	BASEPRI, r0
  4017fc:	bc08      	pop	{r3}
  4017fe:	6819      	ldr	r1, [r3, #0]
  401800:	6808      	ldr	r0, [r1, #0]
  401802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401806:	f01e 0f10 	tst.w	lr, #16
  40180a:	bf08      	it	eq
  40180c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401810:	f380 8809 	msr	PSP, r0
  401814:	f3bf 8f6f 	isb	sy
  401818:	4770      	bx	lr
  40181a:	bf00      	nop

0040181c <pxCurrentTCBConst>:
  40181c:	2040c254 	.word	0x2040c254
  401820:	4770      	bx	lr
  401822:	bf00      	nop

00401824 <SysTick_Handler>:
{
  401824:	b508      	push	{r3, lr}
	__asm volatile
  401826:	f3ef 8311 	mrs	r3, BASEPRI
  40182a:	f04f 0280 	mov.w	r2, #128	; 0x80
  40182e:	b672      	cpsid	i
  401830:	f382 8811 	msr	BASEPRI, r2
  401834:	f3bf 8f6f 	isb	sy
  401838:	f3bf 8f4f 	dsb	sy
  40183c:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40183e:	4b05      	ldr	r3, [pc, #20]	; (401854 <SysTick_Handler+0x30>)
  401840:	4798      	blx	r3
  401842:	b118      	cbz	r0, 40184c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401848:	4b03      	ldr	r3, [pc, #12]	; (401858 <SysTick_Handler+0x34>)
  40184a:	601a      	str	r2, [r3, #0]
	__asm volatile
  40184c:	2300      	movs	r3, #0
  40184e:	f383 8811 	msr	BASEPRI, r3
  401852:	bd08      	pop	{r3, pc}
  401854:	00402729 	.word	0x00402729
  401858:	e000ed04 	.word	0xe000ed04

0040185c <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  40185c:	4a03      	ldr	r2, [pc, #12]	; (40186c <vPortSetupTimerInterrupt+0x10>)
  40185e:	4b04      	ldr	r3, [pc, #16]	; (401870 <vPortSetupTimerInterrupt+0x14>)
  401860:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401862:	2207      	movs	r2, #7
  401864:	3b04      	subs	r3, #4
  401866:	601a      	str	r2, [r3, #0]
  401868:	4770      	bx	lr
  40186a:	bf00      	nop
  40186c:	0003a97f 	.word	0x0003a97f
  401870:	e000e014 	.word	0xe000e014

00401874 <xPortStartScheduler>:
{
  401874:	b500      	push	{lr}
  401876:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401878:	4b22      	ldr	r3, [pc, #136]	; (401904 <xPortStartScheduler+0x90>)
  40187a:	781a      	ldrb	r2, [r3, #0]
  40187c:	b2d2      	uxtb	r2, r2
  40187e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401880:	22ff      	movs	r2, #255	; 0xff
  401882:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401884:	781b      	ldrb	r3, [r3, #0]
  401886:	b2db      	uxtb	r3, r3
  401888:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  40188c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401890:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401894:	4a1c      	ldr	r2, [pc, #112]	; (401908 <xPortStartScheduler+0x94>)
  401896:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401898:	2207      	movs	r2, #7
  40189a:	4b1c      	ldr	r3, [pc, #112]	; (40190c <xPortStartScheduler+0x98>)
  40189c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40189e:	e009      	b.n	4018b4 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
  4018a0:	4a1a      	ldr	r2, [pc, #104]	; (40190c <xPortStartScheduler+0x98>)
  4018a2:	6813      	ldr	r3, [r2, #0]
  4018a4:	3b01      	subs	r3, #1
  4018a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4018a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4018ac:	005b      	lsls	r3, r3, #1
  4018ae:	b2db      	uxtb	r3, r3
  4018b0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4018b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4018b8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4018bc:	d1f0      	bne.n	4018a0 <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4018be:	4a13      	ldr	r2, [pc, #76]	; (40190c <xPortStartScheduler+0x98>)
  4018c0:	6813      	ldr	r3, [r2, #0]
  4018c2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4018c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4018c8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4018ca:	9b01      	ldr	r3, [sp, #4]
  4018cc:	b2db      	uxtb	r3, r3
  4018ce:	4a0d      	ldr	r2, [pc, #52]	; (401904 <xPortStartScheduler+0x90>)
  4018d0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4018d2:	4b0f      	ldr	r3, [pc, #60]	; (401910 <xPortStartScheduler+0x9c>)
  4018d4:	681a      	ldr	r2, [r3, #0]
  4018d6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4018da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4018dc:	681a      	ldr	r2, [r3, #0]
  4018de:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4018e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4018e4:	4b0b      	ldr	r3, [pc, #44]	; (401914 <xPortStartScheduler+0xa0>)
  4018e6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4018e8:	2200      	movs	r2, #0
  4018ea:	4b0b      	ldr	r3, [pc, #44]	; (401918 <xPortStartScheduler+0xa4>)
  4018ec:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4018ee:	4b0b      	ldr	r3, [pc, #44]	; (40191c <xPortStartScheduler+0xa8>)
  4018f0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4018f2:	4a0b      	ldr	r2, [pc, #44]	; (401920 <xPortStartScheduler+0xac>)
  4018f4:	6813      	ldr	r3, [r2, #0]
  4018f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4018fa:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4018fc:	4b09      	ldr	r3, [pc, #36]	; (401924 <xPortStartScheduler+0xb0>)
  4018fe:	4798      	blx	r3
	prvTaskExitError();
  401900:	4b09      	ldr	r3, [pc, #36]	; (401928 <xPortStartScheduler+0xb4>)
  401902:	4798      	blx	r3
  401904:	e000e400 	.word	0xe000e400
  401908:	20400a44 	.word	0x20400a44
  40190c:	20400a48 	.word	0x20400a48
  401910:	e000ed20 	.word	0xe000ed20
  401914:	0040185d 	.word	0x0040185d
  401918:	2040000c 	.word	0x2040000c
  40191c:	004016e1 	.word	0x004016e1
  401920:	e000ef34 	.word	0xe000ef34
  401924:	004016c1 	.word	0x004016c1
  401928:	00401685 	.word	0x00401685

0040192c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40192c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401930:	2b0f      	cmp	r3, #15
  401932:	d911      	bls.n	401958 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401934:	4a12      	ldr	r2, [pc, #72]	; (401980 <vPortValidateInterruptPriority+0x54>)
  401936:	5c9b      	ldrb	r3, [r3, r2]
  401938:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40193a:	4a12      	ldr	r2, [pc, #72]	; (401984 <vPortValidateInterruptPriority+0x58>)
  40193c:	7812      	ldrb	r2, [r2, #0]
  40193e:	4293      	cmp	r3, r2
  401940:	d20a      	bcs.n	401958 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401942:	f04f 0380 	mov.w	r3, #128	; 0x80
  401946:	b672      	cpsid	i
  401948:	f383 8811 	msr	BASEPRI, r3
  40194c:	f3bf 8f6f 	isb	sy
  401950:	f3bf 8f4f 	dsb	sy
  401954:	b662      	cpsie	i
  401956:	e7fe      	b.n	401956 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401958:	4b0b      	ldr	r3, [pc, #44]	; (401988 <vPortValidateInterruptPriority+0x5c>)
  40195a:	681b      	ldr	r3, [r3, #0]
  40195c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401960:	4a0a      	ldr	r2, [pc, #40]	; (40198c <vPortValidateInterruptPriority+0x60>)
  401962:	6812      	ldr	r2, [r2, #0]
  401964:	4293      	cmp	r3, r2
  401966:	d90a      	bls.n	40197e <vPortValidateInterruptPriority+0x52>
  401968:	f04f 0380 	mov.w	r3, #128	; 0x80
  40196c:	b672      	cpsid	i
  40196e:	f383 8811 	msr	BASEPRI, r3
  401972:	f3bf 8f6f 	isb	sy
  401976:	f3bf 8f4f 	dsb	sy
  40197a:	b662      	cpsie	i
  40197c:	e7fe      	b.n	40197c <vPortValidateInterruptPriority+0x50>
  40197e:	4770      	bx	lr
  401980:	e000e3f0 	.word	0xe000e3f0
  401984:	20400a44 	.word	0x20400a44
  401988:	e000ed0c 	.word	0xe000ed0c
  40198c:	20400a48 	.word	0x20400a48

00401990 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401990:	b538      	push	{r3, r4, r5, lr}
  401992:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  401994:	f010 0f07 	tst.w	r0, #7
  401998:	d002      	beq.n	4019a0 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40199a:	f020 0407 	bic.w	r4, r0, #7
  40199e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4019a0:	4b12      	ldr	r3, [pc, #72]	; (4019ec <pvPortMalloc+0x5c>)
  4019a2:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4019a4:	4b12      	ldr	r3, [pc, #72]	; (4019f0 <pvPortMalloc+0x60>)
  4019a6:	681b      	ldr	r3, [r3, #0]
  4019a8:	b193      	cbz	r3, 4019d0 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4019aa:	4b12      	ldr	r3, [pc, #72]	; (4019f4 <pvPortMalloc+0x64>)
  4019ac:	681b      	ldr	r3, [r3, #0]
  4019ae:	441c      	add	r4, r3
  4019b0:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4019b4:	4294      	cmp	r4, r2
  4019b6:	d811      	bhi.n	4019dc <pvPortMalloc+0x4c>
  4019b8:	42a3      	cmp	r3, r4
  4019ba:	d211      	bcs.n	4019e0 <pvPortMalloc+0x50>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4019bc:	4a0c      	ldr	r2, [pc, #48]	; (4019f0 <pvPortMalloc+0x60>)
  4019be:	6815      	ldr	r5, [r2, #0]
  4019c0:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4019c2:	4b0c      	ldr	r3, [pc, #48]	; (4019f4 <pvPortMalloc+0x64>)
  4019c4:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4019c6:	4b0c      	ldr	r3, [pc, #48]	; (4019f8 <pvPortMalloc+0x68>)
  4019c8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4019ca:	b15d      	cbz	r5, 4019e4 <pvPortMalloc+0x54>
		}
	}
	#endif

	return pvReturn;
}
  4019cc:	4628      	mov	r0, r5
  4019ce:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4019d0:	4b0a      	ldr	r3, [pc, #40]	; (4019fc <pvPortMalloc+0x6c>)
  4019d2:	f023 0307 	bic.w	r3, r3, #7
  4019d6:	4a06      	ldr	r2, [pc, #24]	; (4019f0 <pvPortMalloc+0x60>)
  4019d8:	6013      	str	r3, [r2, #0]
  4019da:	e7e6      	b.n	4019aa <pvPortMalloc+0x1a>
void *pvReturn = NULL;
  4019dc:	2500      	movs	r5, #0
  4019de:	e7f2      	b.n	4019c6 <pvPortMalloc+0x36>
  4019e0:	2500      	movs	r5, #0
  4019e2:	e7f0      	b.n	4019c6 <pvPortMalloc+0x36>
			vApplicationMallocFailedHook();
  4019e4:	4b06      	ldr	r3, [pc, #24]	; (401a00 <pvPortMalloc+0x70>)
  4019e6:	4798      	blx	r3
	return pvReturn;
  4019e8:	e7f0      	b.n	4019cc <pvPortMalloc+0x3c>
  4019ea:	bf00      	nop
  4019ec:	0040270d 	.word	0x0040270d
  4019f0:	20400a4c 	.word	0x20400a4c
  4019f4:	2040c250 	.word	0x2040c250
  4019f8:	0040286d 	.word	0x0040286d
  4019fc:	20400a58 	.word	0x20400a58
  401a00:	00421b9f 	.word	0x00421b9f

00401a04 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401a04:	b150      	cbz	r0, 401a1c <vPortFree+0x18>
  401a06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a0a:	b672      	cpsid	i
  401a0c:	f383 8811 	msr	BASEPRI, r3
  401a10:	f3bf 8f6f 	isb	sy
  401a14:	f3bf 8f4f 	dsb	sy
  401a18:	b662      	cpsie	i
  401a1a:	e7fe      	b.n	401a1a <vPortFree+0x16>
  401a1c:	4770      	bx	lr
	...

00401a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  401a20:	b510      	push	{r4, lr}
  401a22:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401a24:	4b06      	ldr	r3, [pc, #24]	; (401a40 <prvIsQueueFull+0x20>)
  401a26:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401a28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401a2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a2c:	429a      	cmp	r2, r3
  401a2e:	d004      	beq.n	401a3a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  401a30:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  401a32:	4b04      	ldr	r3, [pc, #16]	; (401a44 <prvIsQueueFull+0x24>)
  401a34:	4798      	blx	r3

	return xReturn;
}
  401a36:	4620      	mov	r0, r4
  401a38:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401a3a:	2401      	movs	r4, #1
  401a3c:	e7f9      	b.n	401a32 <prvIsQueueFull+0x12>
  401a3e:	bf00      	nop
  401a40:	00401741 	.word	0x00401741
  401a44:	0040178d 	.word	0x0040178d

00401a48 <prvIsQueueEmpty>:
{
  401a48:	b510      	push	{r4, lr}
  401a4a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401a4c:	4b05      	ldr	r3, [pc, #20]	; (401a64 <prvIsQueueEmpty+0x1c>)
  401a4e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401a50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a52:	b123      	cbz	r3, 401a5e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  401a54:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401a56:	4b04      	ldr	r3, [pc, #16]	; (401a68 <prvIsQueueEmpty+0x20>)
  401a58:	4798      	blx	r3
}
  401a5a:	4620      	mov	r0, r4
  401a5c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401a5e:	2401      	movs	r4, #1
  401a60:	e7f9      	b.n	401a56 <prvIsQueueEmpty+0xe>
  401a62:	bf00      	nop
  401a64:	00401741 	.word	0x00401741
  401a68:	0040178d 	.word	0x0040178d

00401a6c <prvCopyDataToQueue>:
{
  401a6c:	b538      	push	{r3, r4, r5, lr}
  401a6e:	4604      	mov	r4, r0
  401a70:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401a72:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401a74:	b95a      	cbnz	r2, 401a8e <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401a76:	6803      	ldr	r3, [r0, #0]
  401a78:	2b00      	cmp	r3, #0
  401a7a:	d12e      	bne.n	401ada <prvCopyDataToQueue+0x6e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401a7c:	6840      	ldr	r0, [r0, #4]
  401a7e:	4b1b      	ldr	r3, [pc, #108]	; (401aec <prvCopyDataToQueue+0x80>)
  401a80:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401a82:	2300      	movs	r3, #0
  401a84:	6063      	str	r3, [r4, #4]
	++( pxQueue->uxMessagesWaiting );
  401a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401a88:	3301      	adds	r3, #1
  401a8a:	63a3      	str	r3, [r4, #56]	; 0x38
}
  401a8c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401a8e:	b96d      	cbnz	r5, 401aac <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401a90:	6880      	ldr	r0, [r0, #8]
  401a92:	4b17      	ldr	r3, [pc, #92]	; (401af0 <prvCopyDataToQueue+0x84>)
  401a94:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401a96:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401a98:	68a3      	ldr	r3, [r4, #8]
  401a9a:	4413      	add	r3, r2
  401a9c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401a9e:	6862      	ldr	r2, [r4, #4]
  401aa0:	4293      	cmp	r3, r2
  401aa2:	d31c      	bcc.n	401ade <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401aa4:	6823      	ldr	r3, [r4, #0]
  401aa6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401aa8:	2000      	movs	r0, #0
  401aaa:	e7ec      	b.n	401a86 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401aac:	68c0      	ldr	r0, [r0, #12]
  401aae:	4b10      	ldr	r3, [pc, #64]	; (401af0 <prvCopyDataToQueue+0x84>)
  401ab0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401ab4:	425b      	negs	r3, r3
  401ab6:	68e2      	ldr	r2, [r4, #12]
  401ab8:	441a      	add	r2, r3
  401aba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401abc:	6821      	ldr	r1, [r4, #0]
  401abe:	428a      	cmp	r2, r1
  401ac0:	d202      	bcs.n	401ac8 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401ac2:	6862      	ldr	r2, [r4, #4]
  401ac4:	4413      	add	r3, r2
  401ac6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401ac8:	2d02      	cmp	r5, #2
  401aca:	d10a      	bne.n	401ae2 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401acc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ace:	b153      	cbz	r3, 401ae6 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ad2:	3b01      	subs	r3, #1
  401ad4:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401ad6:	2000      	movs	r0, #0
  401ad8:	e7d5      	b.n	401a86 <prvCopyDataToQueue+0x1a>
  401ada:	2000      	movs	r0, #0
  401adc:	e7d3      	b.n	401a86 <prvCopyDataToQueue+0x1a>
  401ade:	2000      	movs	r0, #0
  401ae0:	e7d1      	b.n	401a86 <prvCopyDataToQueue+0x1a>
  401ae2:	2000      	movs	r0, #0
  401ae4:	e7cf      	b.n	401a86 <prvCopyDataToQueue+0x1a>
  401ae6:	2000      	movs	r0, #0
  401ae8:	e7cd      	b.n	401a86 <prvCopyDataToQueue+0x1a>
  401aea:	bf00      	nop
  401aec:	00402ec1 	.word	0x00402ec1
  401af0:	004233cd 	.word	0x004233cd

00401af4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401af4:	b530      	push	{r4, r5, lr}
  401af6:	b083      	sub	sp, #12
  401af8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401afa:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401afc:	b174      	cbz	r4, 401b1c <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401afe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b02:	429a      	cmp	r2, r3
  401b04:	d315      	bcc.n	401b32 <prvNotifyQueueSetContainer+0x3e>
  401b06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b0a:	b672      	cpsid	i
  401b0c:	f383 8811 	msr	BASEPRI, r3
  401b10:	f3bf 8f6f 	isb	sy
  401b14:	f3bf 8f4f 	dsb	sy
  401b18:	b662      	cpsie	i
  401b1a:	e7fe      	b.n	401b1a <prvNotifyQueueSetContainer+0x26>
  401b1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b20:	b672      	cpsid	i
  401b22:	f383 8811 	msr	BASEPRI, r3
  401b26:	f3bf 8f6f 	isb	sy
  401b2a:	f3bf 8f4f 	dsb	sy
  401b2e:	b662      	cpsie	i
  401b30:	e7fe      	b.n	401b30 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401b32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b34:	4293      	cmp	r3, r2
  401b36:	d803      	bhi.n	401b40 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401b38:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401b3a:	4628      	mov	r0, r5
  401b3c:	b003      	add	sp, #12
  401b3e:	bd30      	pop	{r4, r5, pc}
  401b40:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401b42:	a901      	add	r1, sp, #4
  401b44:	4620      	mov	r0, r4
  401b46:	4b0b      	ldr	r3, [pc, #44]	; (401b74 <prvNotifyQueueSetContainer+0x80>)
  401b48:	4798      	blx	r3
  401b4a:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401b4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b52:	d10a      	bne.n	401b6a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b56:	2b00      	cmp	r3, #0
  401b58:	d0ef      	beq.n	401b3a <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401b5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b5e:	4b06      	ldr	r3, [pc, #24]	; (401b78 <prvNotifyQueueSetContainer+0x84>)
  401b60:	4798      	blx	r3
  401b62:	2800      	cmp	r0, #0
  401b64:	d0e9      	beq.n	401b3a <prvNotifyQueueSetContainer+0x46>
						xReturn = pdTRUE;
  401b66:	2501      	movs	r5, #1
		return xReturn;
  401b68:	e7e7      	b.n	401b3a <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401b6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b6c:	3301      	adds	r3, #1
  401b6e:	64a3      	str	r3, [r4, #72]	; 0x48
  401b70:	e7e3      	b.n	401b3a <prvNotifyQueueSetContainer+0x46>
  401b72:	bf00      	nop
  401b74:	00401a6d 	.word	0x00401a6d
  401b78:	00402c8d 	.word	0x00402c8d

00401b7c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401b7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b7e:	b172      	cbz	r2, 401b9e <prvCopyDataFromQueue+0x22>
{
  401b80:	b510      	push	{r4, lr}
  401b82:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401b84:	68c4      	ldr	r4, [r0, #12]
  401b86:	4414      	add	r4, r2
  401b88:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401b8a:	6840      	ldr	r0, [r0, #4]
  401b8c:	4284      	cmp	r4, r0
  401b8e:	d301      	bcc.n	401b94 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401b90:	6818      	ldr	r0, [r3, #0]
  401b92:	60d8      	str	r0, [r3, #12]
  401b94:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401b96:	68d9      	ldr	r1, [r3, #12]
  401b98:	4b01      	ldr	r3, [pc, #4]	; (401ba0 <prvCopyDataFromQueue+0x24>)
  401b9a:	4798      	blx	r3
  401b9c:	bd10      	pop	{r4, pc}
  401b9e:	4770      	bx	lr
  401ba0:	004233cd 	.word	0x004233cd

00401ba4 <prvUnlockQueue>:
{
  401ba4:	b510      	push	{r4, lr}
  401ba6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401ba8:	4b1e      	ldr	r3, [pc, #120]	; (401c24 <prvUnlockQueue+0x80>)
  401baa:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401bac:	e009      	b.n	401bc2 <prvUnlockQueue+0x1e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bb0:	b1cb      	cbz	r3, 401be6 <prvUnlockQueue+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bb6:	4b1c      	ldr	r3, [pc, #112]	; (401c28 <prvUnlockQueue+0x84>)
  401bb8:	4798      	blx	r3
  401bba:	b988      	cbnz	r0, 401be0 <prvUnlockQueue+0x3c>
			--( pxQueue->xTxLock );
  401bbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bbe:	3b01      	subs	r3, #1
  401bc0:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401bc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	dd0e      	ble.n	401be6 <prvUnlockQueue+0x42>
				if( pxQueue->pxQueueSetContainer != NULL )
  401bc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401bca:	2b00      	cmp	r3, #0
  401bcc:	d0ef      	beq.n	401bae <prvUnlockQueue+0xa>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401bce:	2100      	movs	r1, #0
  401bd0:	4620      	mov	r0, r4
  401bd2:	4b16      	ldr	r3, [pc, #88]	; (401c2c <prvUnlockQueue+0x88>)
  401bd4:	4798      	blx	r3
  401bd6:	2801      	cmp	r0, #1
  401bd8:	d1f0      	bne.n	401bbc <prvUnlockQueue+0x18>
						vTaskMissedYield();
  401bda:	4b15      	ldr	r3, [pc, #84]	; (401c30 <prvUnlockQueue+0x8c>)
  401bdc:	4798      	blx	r3
  401bde:	e7ed      	b.n	401bbc <prvUnlockQueue+0x18>
							vTaskMissedYield();
  401be0:	4b13      	ldr	r3, [pc, #76]	; (401c30 <prvUnlockQueue+0x8c>)
  401be2:	4798      	blx	r3
  401be4:	e7ea      	b.n	401bbc <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
  401be6:	f04f 33ff 	mov.w	r3, #4294967295
  401bea:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401bec:	4b11      	ldr	r3, [pc, #68]	; (401c34 <prvUnlockQueue+0x90>)
  401bee:	4798      	blx	r3
	taskENTER_CRITICAL();
  401bf0:	4b0c      	ldr	r3, [pc, #48]	; (401c24 <prvUnlockQueue+0x80>)
  401bf2:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401bf4:	e002      	b.n	401bfc <prvUnlockQueue+0x58>
				--( pxQueue->xRxLock );
  401bf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401bf8:	3b01      	subs	r3, #1
  401bfa:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401bfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401bfe:	2b00      	cmp	r3, #0
  401c00:	dd0a      	ble.n	401c18 <prvUnlockQueue+0x74>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c02:	6923      	ldr	r3, [r4, #16]
  401c04:	b143      	cbz	r3, 401c18 <prvUnlockQueue+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c06:	f104 0010 	add.w	r0, r4, #16
  401c0a:	4b07      	ldr	r3, [pc, #28]	; (401c28 <prvUnlockQueue+0x84>)
  401c0c:	4798      	blx	r3
  401c0e:	2800      	cmp	r0, #0
  401c10:	d0f1      	beq.n	401bf6 <prvUnlockQueue+0x52>
					vTaskMissedYield();
  401c12:	4b07      	ldr	r3, [pc, #28]	; (401c30 <prvUnlockQueue+0x8c>)
  401c14:	4798      	blx	r3
  401c16:	e7ee      	b.n	401bf6 <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
  401c18:	f04f 33ff 	mov.w	r3, #4294967295
  401c1c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401c1e:	4b05      	ldr	r3, [pc, #20]	; (401c34 <prvUnlockQueue+0x90>)
  401c20:	4798      	blx	r3
  401c22:	bd10      	pop	{r4, pc}
  401c24:	00401741 	.word	0x00401741
  401c28:	00402c8d 	.word	0x00402c8d
  401c2c:	00401af5 	.word	0x00401af5
  401c30:	00402de9 	.word	0x00402de9
  401c34:	0040178d 	.word	0x0040178d

00401c38 <xQueueGenericReset>:
{
  401c38:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401c3a:	b308      	cbz	r0, 401c80 <xQueueGenericReset+0x48>
  401c3c:	4604      	mov	r4, r0
  401c3e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401c40:	4b1d      	ldr	r3, [pc, #116]	; (401cb8 <xQueueGenericReset+0x80>)
  401c42:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401c44:	6821      	ldr	r1, [r4, #0]
  401c46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401c4a:	fb03 1002 	mla	r0, r3, r2, r1
  401c4e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401c50:	2000      	movs	r0, #0
  401c52:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401c54:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401c56:	3a01      	subs	r2, #1
  401c58:	fb02 1303 	mla	r3, r2, r3, r1
  401c5c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401c5e:	f04f 33ff 	mov.w	r3, #4294967295
  401c62:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401c64:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401c66:	b9fd      	cbnz	r5, 401ca8 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c68:	6923      	ldr	r3, [r4, #16]
  401c6a:	b12b      	cbz	r3, 401c78 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401c6c:	f104 0010 	add.w	r0, r4, #16
  401c70:	4b12      	ldr	r3, [pc, #72]	; (401cbc <xQueueGenericReset+0x84>)
  401c72:	4798      	blx	r3
  401c74:	2801      	cmp	r0, #1
  401c76:	d00e      	beq.n	401c96 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401c78:	4b11      	ldr	r3, [pc, #68]	; (401cc0 <xQueueGenericReset+0x88>)
  401c7a:	4798      	blx	r3
}
  401c7c:	2001      	movs	r0, #1
  401c7e:	bd38      	pop	{r3, r4, r5, pc}
  401c80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c84:	b672      	cpsid	i
  401c86:	f383 8811 	msr	BASEPRI, r3
  401c8a:	f3bf 8f6f 	isb	sy
  401c8e:	f3bf 8f4f 	dsb	sy
  401c92:	b662      	cpsie	i
  401c94:	e7fe      	b.n	401c94 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c9a:	4b0a      	ldr	r3, [pc, #40]	; (401cc4 <xQueueGenericReset+0x8c>)
  401c9c:	601a      	str	r2, [r3, #0]
  401c9e:	f3bf 8f4f 	dsb	sy
  401ca2:	f3bf 8f6f 	isb	sy
  401ca6:	e7e7      	b.n	401c78 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401ca8:	f104 0010 	add.w	r0, r4, #16
  401cac:	4d06      	ldr	r5, [pc, #24]	; (401cc8 <xQueueGenericReset+0x90>)
  401cae:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401cb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cb4:	47a8      	blx	r5
  401cb6:	e7df      	b.n	401c78 <xQueueGenericReset+0x40>
  401cb8:	00401741 	.word	0x00401741
  401cbc:	00402c8d 	.word	0x00402c8d
  401cc0:	0040178d 	.word	0x0040178d
  401cc4:	e000ed04 	.word	0xe000ed04
  401cc8:	004015f5 	.word	0x004015f5

00401ccc <xQueueGenericCreate>:
{
  401ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401cce:	b950      	cbnz	r0, 401ce6 <xQueueGenericCreate+0x1a>
  401cd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd4:	b672      	cpsid	i
  401cd6:	f383 8811 	msr	BASEPRI, r3
  401cda:	f3bf 8f6f 	isb	sy
  401cde:	f3bf 8f4f 	dsb	sy
  401ce2:	b662      	cpsie	i
  401ce4:	e7fe      	b.n	401ce4 <xQueueGenericCreate+0x18>
  401ce6:	4606      	mov	r6, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
  401ce8:	b119      	cbz	r1, 401cf2 <xQueueGenericCreate+0x26>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401cea:	fb01 f000 	mul.w	r0, r1, r0
  401cee:	3001      	adds	r0, #1
  401cf0:	e000      	b.n	401cf4 <xQueueGenericCreate+0x28>
		xQueueSizeInBytes = ( size_t ) 0;
  401cf2:	2000      	movs	r0, #0
  401cf4:	4617      	mov	r7, r2
  401cf6:	460d      	mov	r5, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401cf8:	3058      	adds	r0, #88	; 0x58
  401cfa:	4b12      	ldr	r3, [pc, #72]	; (401d44 <xQueueGenericCreate+0x78>)
  401cfc:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401cfe:	4604      	mov	r4, r0
  401d00:	b190      	cbz	r0, 401d28 <xQueueGenericCreate+0x5c>
		if( uxItemSize == ( UBaseType_t ) 0 )
  401d02:	b96d      	cbnz	r5, 401d20 <xQueueGenericCreate+0x54>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401d04:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401d06:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401d08:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401d0a:	2101      	movs	r1, #1
  401d0c:	4620      	mov	r0, r4
  401d0e:	4b0e      	ldr	r3, [pc, #56]	; (401d48 <xQueueGenericCreate+0x7c>)
  401d10:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401d12:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401d16:	2300      	movs	r3, #0
  401d18:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
  401d1a:	4620      	mov	r0, r4
	configASSERT( xReturn );
  401d1c:	b130      	cbz	r0, 401d2c <xQueueGenericCreate+0x60>
}
  401d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401d20:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401d24:	6003      	str	r3, [r0, #0]
  401d26:	e7ee      	b.n	401d06 <xQueueGenericCreate+0x3a>
QueueHandle_t xReturn = NULL;
  401d28:	2000      	movs	r0, #0
  401d2a:	e7f7      	b.n	401d1c <xQueueGenericCreate+0x50>
  401d2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d30:	b672      	cpsid	i
  401d32:	f383 8811 	msr	BASEPRI, r3
  401d36:	f3bf 8f6f 	isb	sy
  401d3a:	f3bf 8f4f 	dsb	sy
  401d3e:	b662      	cpsie	i
  401d40:	e7fe      	b.n	401d40 <xQueueGenericCreate+0x74>
  401d42:	bf00      	nop
  401d44:	00401991 	.word	0x00401991
  401d48:	00401c39 	.word	0x00401c39

00401d4c <xQueueGenericSend>:
{
  401d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d4e:	b085      	sub	sp, #20
  401d50:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401d52:	b170      	cbz	r0, 401d72 <xQueueGenericSend+0x26>
  401d54:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d56:	b1b9      	cbz	r1, 401d88 <xQueueGenericSend+0x3c>
  401d58:	2501      	movs	r5, #1
  401d5a:	b9dd      	cbnz	r5, 401d94 <xQueueGenericSend+0x48>
  401d5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d60:	b672      	cpsid	i
  401d62:	f383 8811 	msr	BASEPRI, r3
  401d66:	f3bf 8f6f 	isb	sy
  401d6a:	f3bf 8f4f 	dsb	sy
  401d6e:	b662      	cpsie	i
  401d70:	e7fe      	b.n	401d70 <xQueueGenericSend+0x24>
  401d72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d76:	b672      	cpsid	i
  401d78:	f383 8811 	msr	BASEPRI, r3
  401d7c:	f3bf 8f6f 	isb	sy
  401d80:	f3bf 8f4f 	dsb	sy
  401d84:	b662      	cpsie	i
  401d86:	e7fe      	b.n	401d86 <xQueueGenericSend+0x3a>
  401d88:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401d8a:	b90a      	cbnz	r2, 401d90 <xQueueGenericSend+0x44>
  401d8c:	2501      	movs	r5, #1
  401d8e:	e7e4      	b.n	401d5a <xQueueGenericSend+0xe>
  401d90:	2500      	movs	r5, #0
  401d92:	e7e2      	b.n	401d5a <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d94:	2b02      	cmp	r3, #2
  401d96:	d00b      	beq.n	401db0 <xQueueGenericSend+0x64>
  401d98:	b97d      	cbnz	r5, 401dba <xQueueGenericSend+0x6e>
  401d9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d9e:	b672      	cpsid	i
  401da0:	f383 8811 	msr	BASEPRI, r3
  401da4:	f3bf 8f6f 	isb	sy
  401da8:	f3bf 8f4f 	dsb	sy
  401dac:	b662      	cpsie	i
  401dae:	e7fe      	b.n	401dae <xQueueGenericSend+0x62>
  401db0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401db2:	2a01      	cmp	r2, #1
  401db4:	d0f0      	beq.n	401d98 <xQueueGenericSend+0x4c>
  401db6:	2500      	movs	r5, #0
  401db8:	e7ee      	b.n	401d98 <xQueueGenericSend+0x4c>
  401dba:	461e      	mov	r6, r3
  401dbc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401dbe:	4b4e      	ldr	r3, [pc, #312]	; (401ef8 <xQueueGenericSend+0x1ac>)
  401dc0:	4798      	blx	r3
  401dc2:	b910      	cbnz	r0, 401dca <xQueueGenericSend+0x7e>
  401dc4:	9b01      	ldr	r3, [sp, #4]
  401dc6:	b103      	cbz	r3, 401dca <xQueueGenericSend+0x7e>
  401dc8:	2500      	movs	r5, #0
  401dca:	b955      	cbnz	r5, 401de2 <xQueueGenericSend+0x96>
  401dcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dd0:	b672      	cpsid	i
  401dd2:	f383 8811 	msr	BASEPRI, r3
  401dd6:	f3bf 8f6f 	isb	sy
  401dda:	f3bf 8f4f 	dsb	sy
  401dde:	b662      	cpsie	i
  401de0:	e7fe      	b.n	401de0 <xQueueGenericSend+0x94>
  401de2:	2500      	movs	r5, #0
  401de4:	e03e      	b.n	401e64 <xQueueGenericSend+0x118>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401de6:	4632      	mov	r2, r6
  401de8:	4639      	mov	r1, r7
  401dea:	4620      	mov	r0, r4
  401dec:	4b43      	ldr	r3, [pc, #268]	; (401efc <xQueueGenericSend+0x1b0>)
  401dee:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401df2:	b193      	cbz	r3, 401e1a <xQueueGenericSend+0xce>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401df4:	4631      	mov	r1, r6
  401df6:	4620      	mov	r0, r4
  401df8:	4b41      	ldr	r3, [pc, #260]	; (401f00 <xQueueGenericSend+0x1b4>)
  401dfa:	4798      	blx	r3
  401dfc:	2801      	cmp	r0, #1
  401dfe:	d107      	bne.n	401e10 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e04:	4b3f      	ldr	r3, [pc, #252]	; (401f04 <xQueueGenericSend+0x1b8>)
  401e06:	601a      	str	r2, [r3, #0]
  401e08:	f3bf 8f4f 	dsb	sy
  401e0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401e10:	4b3d      	ldr	r3, [pc, #244]	; (401f08 <xQueueGenericSend+0x1bc>)
  401e12:	4798      	blx	r3
				return pdPASS;
  401e14:	2001      	movs	r0, #1
}
  401e16:	b005      	add	sp, #20
  401e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e1c:	b173      	cbz	r3, 401e3c <xQueueGenericSend+0xf0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401e1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e22:	4b3a      	ldr	r3, [pc, #232]	; (401f0c <xQueueGenericSend+0x1c0>)
  401e24:	4798      	blx	r3
  401e26:	2801      	cmp	r0, #1
  401e28:	d1f2      	bne.n	401e10 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e2e:	4b35      	ldr	r3, [pc, #212]	; (401f04 <xQueueGenericSend+0x1b8>)
  401e30:	601a      	str	r2, [r3, #0]
  401e32:	f3bf 8f4f 	dsb	sy
  401e36:	f3bf 8f6f 	isb	sy
  401e3a:	e7e9      	b.n	401e10 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401e3c:	2800      	cmp	r0, #0
  401e3e:	d0e7      	beq.n	401e10 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e44:	4b2f      	ldr	r3, [pc, #188]	; (401f04 <xQueueGenericSend+0x1b8>)
  401e46:	601a      	str	r2, [r3, #0]
  401e48:	f3bf 8f4f 	dsb	sy
  401e4c:	f3bf 8f6f 	isb	sy
  401e50:	e7de      	b.n	401e10 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401e52:	4b2d      	ldr	r3, [pc, #180]	; (401f08 <xQueueGenericSend+0x1bc>)
  401e54:	4798      	blx	r3
					return errQUEUE_FULL;
  401e56:	2000      	movs	r0, #0
  401e58:	e7dd      	b.n	401e16 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401e5a:	4620      	mov	r0, r4
  401e5c:	4b2c      	ldr	r3, [pc, #176]	; (401f10 <xQueueGenericSend+0x1c4>)
  401e5e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401e60:	4b2c      	ldr	r3, [pc, #176]	; (401f14 <xQueueGenericSend+0x1c8>)
  401e62:	4798      	blx	r3
		taskENTER_CRITICAL();
  401e64:	4b2c      	ldr	r3, [pc, #176]	; (401f18 <xQueueGenericSend+0x1cc>)
  401e66:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401e68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e6c:	429a      	cmp	r2, r3
  401e6e:	d3ba      	bcc.n	401de6 <xQueueGenericSend+0x9a>
  401e70:	2e02      	cmp	r6, #2
  401e72:	d0b8      	beq.n	401de6 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401e74:	9b01      	ldr	r3, [sp, #4]
  401e76:	2b00      	cmp	r3, #0
  401e78:	d0eb      	beq.n	401e52 <xQueueGenericSend+0x106>
				else if( xEntryTimeSet == pdFALSE )
  401e7a:	b91d      	cbnz	r5, 401e84 <xQueueGenericSend+0x138>
					vTaskSetTimeOutState( &xTimeOut );
  401e7c:	a802      	add	r0, sp, #8
  401e7e:	4b27      	ldr	r3, [pc, #156]	; (401f1c <xQueueGenericSend+0x1d0>)
  401e80:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401e82:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  401e84:	4b20      	ldr	r3, [pc, #128]	; (401f08 <xQueueGenericSend+0x1bc>)
  401e86:	4798      	blx	r3
		vTaskSuspendAll();
  401e88:	4b25      	ldr	r3, [pc, #148]	; (401f20 <xQueueGenericSend+0x1d4>)
  401e8a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401e8c:	4b22      	ldr	r3, [pc, #136]	; (401f18 <xQueueGenericSend+0x1cc>)
  401e8e:	4798      	blx	r3
  401e90:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401e92:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e96:	d101      	bne.n	401e9c <xQueueGenericSend+0x150>
  401e98:	2300      	movs	r3, #0
  401e9a:	6463      	str	r3, [r4, #68]	; 0x44
  401e9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ea2:	d101      	bne.n	401ea8 <xQueueGenericSend+0x15c>
  401ea4:	2300      	movs	r3, #0
  401ea6:	64a3      	str	r3, [r4, #72]	; 0x48
  401ea8:	4b17      	ldr	r3, [pc, #92]	; (401f08 <xQueueGenericSend+0x1bc>)
  401eaa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401eac:	a901      	add	r1, sp, #4
  401eae:	a802      	add	r0, sp, #8
  401eb0:	4b1c      	ldr	r3, [pc, #112]	; (401f24 <xQueueGenericSend+0x1d8>)
  401eb2:	4798      	blx	r3
  401eb4:	b9c8      	cbnz	r0, 401eea <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401eb6:	4620      	mov	r0, r4
  401eb8:	4b1b      	ldr	r3, [pc, #108]	; (401f28 <xQueueGenericSend+0x1dc>)
  401eba:	4798      	blx	r3
  401ebc:	2800      	cmp	r0, #0
  401ebe:	d0cc      	beq.n	401e5a <xQueueGenericSend+0x10e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401ec0:	9901      	ldr	r1, [sp, #4]
  401ec2:	f104 0010 	add.w	r0, r4, #16
  401ec6:	4b19      	ldr	r3, [pc, #100]	; (401f2c <xQueueGenericSend+0x1e0>)
  401ec8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401eca:	4620      	mov	r0, r4
  401ecc:	4b10      	ldr	r3, [pc, #64]	; (401f10 <xQueueGenericSend+0x1c4>)
  401ece:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ed0:	4b10      	ldr	r3, [pc, #64]	; (401f14 <xQueueGenericSend+0x1c8>)
  401ed2:	4798      	blx	r3
  401ed4:	2800      	cmp	r0, #0
  401ed6:	d1c5      	bne.n	401e64 <xQueueGenericSend+0x118>
					portYIELD_WITHIN_API();
  401ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401edc:	4b09      	ldr	r3, [pc, #36]	; (401f04 <xQueueGenericSend+0x1b8>)
  401ede:	601a      	str	r2, [r3, #0]
  401ee0:	f3bf 8f4f 	dsb	sy
  401ee4:	f3bf 8f6f 	isb	sy
  401ee8:	e7bc      	b.n	401e64 <xQueueGenericSend+0x118>
			prvUnlockQueue( pxQueue );
  401eea:	4620      	mov	r0, r4
  401eec:	4b08      	ldr	r3, [pc, #32]	; (401f10 <xQueueGenericSend+0x1c4>)
  401eee:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ef0:	4b08      	ldr	r3, [pc, #32]	; (401f14 <xQueueGenericSend+0x1c8>)
  401ef2:	4798      	blx	r3
			return errQUEUE_FULL;
  401ef4:	2000      	movs	r0, #0
  401ef6:	e78e      	b.n	401e16 <xQueueGenericSend+0xca>
  401ef8:	00402df5 	.word	0x00402df5
  401efc:	00401a6d 	.word	0x00401a6d
  401f00:	00401af5 	.word	0x00401af5
  401f04:	e000ed04 	.word	0xe000ed04
  401f08:	0040178d 	.word	0x0040178d
  401f0c:	00402c8d 	.word	0x00402c8d
  401f10:	00401ba5 	.word	0x00401ba5
  401f14:	0040286d 	.word	0x0040286d
  401f18:	00401741 	.word	0x00401741
  401f1c:	00402d25 	.word	0x00402d25
  401f20:	0040270d 	.word	0x0040270d
  401f24:	00402d55 	.word	0x00402d55
  401f28:	00401a21 	.word	0x00401a21
  401f2c:	00402b89 	.word	0x00402b89

00401f30 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401f30:	b180      	cbz	r0, 401f54 <xQueueGenericSendFromISR+0x24>
{
  401f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f36:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f38:	b1b9      	cbz	r1, 401f6a <xQueueGenericSendFromISR+0x3a>
  401f3a:	2001      	movs	r0, #1
  401f3c:	b9d8      	cbnz	r0, 401f76 <xQueueGenericSendFromISR+0x46>
  401f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f42:	b672      	cpsid	i
  401f44:	f383 8811 	msr	BASEPRI, r3
  401f48:	f3bf 8f6f 	isb	sy
  401f4c:	f3bf 8f4f 	dsb	sy
  401f50:	b662      	cpsie	i
  401f52:	e7fe      	b.n	401f52 <xQueueGenericSendFromISR+0x22>
  401f54:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f58:	b672      	cpsid	i
  401f5a:	f383 8811 	msr	BASEPRI, r3
  401f5e:	f3bf 8f6f 	isb	sy
  401f62:	f3bf 8f4f 	dsb	sy
  401f66:	b662      	cpsie	i
  401f68:	e7fe      	b.n	401f68 <xQueueGenericSendFromISR+0x38>
  401f6a:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401f6c:	b908      	cbnz	r0, 401f72 <xQueueGenericSendFromISR+0x42>
  401f6e:	2001      	movs	r0, #1
  401f70:	e7e4      	b.n	401f3c <xQueueGenericSendFromISR+0xc>
  401f72:	2000      	movs	r0, #0
  401f74:	e7e2      	b.n	401f3c <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401f76:	2b02      	cmp	r3, #2
  401f78:	d00b      	beq.n	401f92 <xQueueGenericSendFromISR+0x62>
  401f7a:	b978      	cbnz	r0, 401f9c <xQueueGenericSendFromISR+0x6c>
  401f7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f80:	b672      	cpsid	i
  401f82:	f383 8811 	msr	BASEPRI, r3
  401f86:	f3bf 8f6f 	isb	sy
  401f8a:	f3bf 8f4f 	dsb	sy
  401f8e:	b662      	cpsie	i
  401f90:	e7fe      	b.n	401f90 <xQueueGenericSendFromISR+0x60>
  401f92:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  401f94:	2d01      	cmp	r5, #1
  401f96:	d0f0      	beq.n	401f7a <xQueueGenericSendFromISR+0x4a>
  401f98:	2000      	movs	r0, #0
  401f9a:	e7ee      	b.n	401f7a <xQueueGenericSendFromISR+0x4a>
  401f9c:	461e      	mov	r6, r3
  401f9e:	4615      	mov	r5, r2
  401fa0:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401fa2:	4b23      	ldr	r3, [pc, #140]	; (402030 <xQueueGenericSendFromISR+0x100>)
  401fa4:	4798      	blx	r3
	__asm volatile
  401fa6:	f3ef 8711 	mrs	r7, BASEPRI
  401faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fae:	b672      	cpsid	i
  401fb0:	f383 8811 	msr	BASEPRI, r3
  401fb4:	f3bf 8f6f 	isb	sy
  401fb8:	f3bf 8f4f 	dsb	sy
  401fbc:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401fbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401fc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401fc2:	429a      	cmp	r2, r3
  401fc4:	d301      	bcc.n	401fca <xQueueGenericSendFromISR+0x9a>
  401fc6:	2e02      	cmp	r6, #2
  401fc8:	d126      	bne.n	402018 <xQueueGenericSendFromISR+0xe8>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401fca:	4632      	mov	r2, r6
  401fcc:	4641      	mov	r1, r8
  401fce:	4620      	mov	r0, r4
  401fd0:	4b18      	ldr	r3, [pc, #96]	; (402034 <xQueueGenericSendFromISR+0x104>)
  401fd2:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401fd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fda:	d118      	bne.n	40200e <xQueueGenericSendFromISR+0xde>
					if( pxQueue->pxQueueSetContainer != NULL )
  401fdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401fde:	b15b      	cbz	r3, 401ff8 <xQueueGenericSendFromISR+0xc8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401fe0:	4631      	mov	r1, r6
  401fe2:	4620      	mov	r0, r4
  401fe4:	4b14      	ldr	r3, [pc, #80]	; (402038 <xQueueGenericSendFromISR+0x108>)
  401fe6:	4798      	blx	r3
  401fe8:	2801      	cmp	r0, #1
  401fea:	d117      	bne.n	40201c <xQueueGenericSendFromISR+0xec>
							if( pxHigherPriorityTaskWoken != NULL )
  401fec:	b1c5      	cbz	r5, 402020 <xQueueGenericSendFromISR+0xf0>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401fee:	6028      	str	r0, [r5, #0]
	__asm volatile
  401ff0:	f387 8811 	msr	BASEPRI, r7
}
  401ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ffa:	b19b      	cbz	r3, 402024 <xQueueGenericSendFromISR+0xf4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401ffc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402000:	4b0e      	ldr	r3, [pc, #56]	; (40203c <xQueueGenericSendFromISR+0x10c>)
  402002:	4798      	blx	r3
  402004:	b180      	cbz	r0, 402028 <xQueueGenericSendFromISR+0xf8>
								if( pxHigherPriorityTaskWoken != NULL )
  402006:	b18d      	cbz	r5, 40202c <xQueueGenericSendFromISR+0xfc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402008:	2001      	movs	r0, #1
  40200a:	6028      	str	r0, [r5, #0]
  40200c:	e7f0      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
				++( pxQueue->xTxLock );
  40200e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402010:	3301      	adds	r3, #1
  402012:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  402014:	2001      	movs	r0, #1
  402016:	e7eb      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
			xReturn = errQUEUE_FULL;
  402018:	2000      	movs	r0, #0
  40201a:	e7e9      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
  40201c:	2001      	movs	r0, #1
  40201e:	e7e7      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
  402020:	2001      	movs	r0, #1
  402022:	e7e5      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
  402024:	2001      	movs	r0, #1
  402026:	e7e3      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
  402028:	2001      	movs	r0, #1
  40202a:	e7e1      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
  40202c:	2001      	movs	r0, #1
  40202e:	e7df      	b.n	401ff0 <xQueueGenericSendFromISR+0xc0>
  402030:	0040192d 	.word	0x0040192d
  402034:	00401a6d 	.word	0x00401a6d
  402038:	00401af5 	.word	0x00401af5
  40203c:	00402c8d 	.word	0x00402c8d

00402040 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  402040:	b170      	cbz	r0, 402060 <xQueueGiveFromISR+0x20>
{
  402042:	b570      	push	{r4, r5, r6, lr}
  402044:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402046:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402048:	b1ab      	cbz	r3, 402076 <xQueueGiveFromISR+0x36>
	__asm volatile
  40204a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40204e:	b672      	cpsid	i
  402050:	f383 8811 	msr	BASEPRI, r3
  402054:	f3bf 8f6f 	isb	sy
  402058:	f3bf 8f4f 	dsb	sy
  40205c:	b662      	cpsie	i
  40205e:	e7fe      	b.n	40205e <xQueueGiveFromISR+0x1e>
  402060:	f04f 0380 	mov.w	r3, #128	; 0x80
  402064:	b672      	cpsid	i
  402066:	f383 8811 	msr	BASEPRI, r3
  40206a:	f3bf 8f6f 	isb	sy
  40206e:	f3bf 8f4f 	dsb	sy
  402072:	b662      	cpsie	i
  402074:	e7fe      	b.n	402074 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  402076:	6803      	ldr	r3, [r0, #0]
  402078:	b163      	cbz	r3, 402094 <xQueueGiveFromISR+0x54>
  40207a:	2301      	movs	r3, #1
  40207c:	b983      	cbnz	r3, 4020a0 <xQueueGiveFromISR+0x60>
  40207e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402082:	b672      	cpsid	i
  402084:	f383 8811 	msr	BASEPRI, r3
  402088:	f3bf 8f6f 	isb	sy
  40208c:	f3bf 8f4f 	dsb	sy
  402090:	b662      	cpsie	i
  402092:	e7fe      	b.n	402092 <xQueueGiveFromISR+0x52>
  402094:	6843      	ldr	r3, [r0, #4]
  402096:	b90b      	cbnz	r3, 40209c <xQueueGiveFromISR+0x5c>
  402098:	2301      	movs	r3, #1
  40209a:	e7ef      	b.n	40207c <xQueueGiveFromISR+0x3c>
  40209c:	2300      	movs	r3, #0
  40209e:	e7ed      	b.n	40207c <xQueueGiveFromISR+0x3c>
  4020a0:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4020a2:	4b21      	ldr	r3, [pc, #132]	; (402128 <xQueueGiveFromISR+0xe8>)
  4020a4:	4798      	blx	r3
	__asm volatile
  4020a6:	f3ef 8611 	mrs	r6, BASEPRI
  4020aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ae:	b672      	cpsid	i
  4020b0:	f383 8811 	msr	BASEPRI, r3
  4020b4:	f3bf 8f6f 	isb	sy
  4020b8:	f3bf 8f4f 	dsb	sy
  4020bc:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4020be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4020c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4020c2:	429a      	cmp	r2, r3
  4020c4:	d223      	bcs.n	40210e <xQueueGiveFromISR+0xce>
			++( pxQueue->uxMessagesWaiting );
  4020c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4020c8:	3301      	adds	r3, #1
  4020ca:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4020cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4020d2:	d117      	bne.n	402104 <xQueueGiveFromISR+0xc4>
					if( pxQueue->pxQueueSetContainer != NULL )
  4020d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4020d6:	b153      	cbz	r3, 4020ee <xQueueGiveFromISR+0xae>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4020d8:	2100      	movs	r1, #0
  4020da:	4620      	mov	r0, r4
  4020dc:	4b13      	ldr	r3, [pc, #76]	; (40212c <xQueueGiveFromISR+0xec>)
  4020de:	4798      	blx	r3
  4020e0:	2801      	cmp	r0, #1
  4020e2:	d116      	bne.n	402112 <xQueueGiveFromISR+0xd2>
							if( pxHigherPriorityTaskWoken != NULL )
  4020e4:	b1bd      	cbz	r5, 402116 <xQueueGiveFromISR+0xd6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4020e6:	6028      	str	r0, [r5, #0]
	__asm volatile
  4020e8:	f386 8811 	msr	BASEPRI, r6
}
  4020ec:	bd70      	pop	{r4, r5, r6, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4020ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4020f0:	b19b      	cbz	r3, 40211a <xQueueGiveFromISR+0xda>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4020f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020f6:	4b0e      	ldr	r3, [pc, #56]	; (402130 <xQueueGiveFromISR+0xf0>)
  4020f8:	4798      	blx	r3
  4020fa:	b180      	cbz	r0, 40211e <xQueueGiveFromISR+0xde>
								if( pxHigherPriorityTaskWoken != NULL )
  4020fc:	b18d      	cbz	r5, 402122 <xQueueGiveFromISR+0xe2>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4020fe:	2001      	movs	r0, #1
  402100:	6028      	str	r0, [r5, #0]
  402102:	e7f1      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
				++( pxQueue->xTxLock );
  402104:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402106:	3301      	adds	r3, #1
  402108:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40210a:	2001      	movs	r0, #1
  40210c:	e7ec      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
			xReturn = errQUEUE_FULL;
  40210e:	2000      	movs	r0, #0
  402110:	e7ea      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
			xReturn = pdPASS;
  402112:	2001      	movs	r0, #1
  402114:	e7e8      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
  402116:	2001      	movs	r0, #1
  402118:	e7e6      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
  40211a:	2001      	movs	r0, #1
  40211c:	e7e4      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
  40211e:	2001      	movs	r0, #1
  402120:	e7e2      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
  402122:	2001      	movs	r0, #1
  402124:	e7e0      	b.n	4020e8 <xQueueGiveFromISR+0xa8>
  402126:	bf00      	nop
  402128:	0040192d 	.word	0x0040192d
  40212c:	00401af5 	.word	0x00401af5
  402130:	00402c8d 	.word	0x00402c8d

00402134 <xQueueGenericReceive>:
{
  402134:	b5f0      	push	{r4, r5, r6, r7, lr}
  402136:	b085      	sub	sp, #20
  402138:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  40213a:	b170      	cbz	r0, 40215a <xQueueGenericReceive+0x26>
  40213c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40213e:	b1b9      	cbz	r1, 402170 <xQueueGenericReceive+0x3c>
  402140:	2501      	movs	r5, #1
  402142:	b9dd      	cbnz	r5, 40217c <xQueueGenericReceive+0x48>
	__asm volatile
  402144:	f04f 0380 	mov.w	r3, #128	; 0x80
  402148:	b672      	cpsid	i
  40214a:	f383 8811 	msr	BASEPRI, r3
  40214e:	f3bf 8f6f 	isb	sy
  402152:	f3bf 8f4f 	dsb	sy
  402156:	b662      	cpsie	i
  402158:	e7fe      	b.n	402158 <xQueueGenericReceive+0x24>
  40215a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40215e:	b672      	cpsid	i
  402160:	f383 8811 	msr	BASEPRI, r3
  402164:	f3bf 8f6f 	isb	sy
  402168:	f3bf 8f4f 	dsb	sy
  40216c:	b662      	cpsie	i
  40216e:	e7fe      	b.n	40216e <xQueueGenericReceive+0x3a>
  402170:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402172:	b90a      	cbnz	r2, 402178 <xQueueGenericReceive+0x44>
  402174:	2501      	movs	r5, #1
  402176:	e7e4      	b.n	402142 <xQueueGenericReceive+0xe>
  402178:	2500      	movs	r5, #0
  40217a:	e7e2      	b.n	402142 <xQueueGenericReceive+0xe>
  40217c:	461f      	mov	r7, r3
  40217e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402180:	4b52      	ldr	r3, [pc, #328]	; (4022cc <xQueueGenericReceive+0x198>)
  402182:	4798      	blx	r3
  402184:	b910      	cbnz	r0, 40218c <xQueueGenericReceive+0x58>
  402186:	9b01      	ldr	r3, [sp, #4]
  402188:	b103      	cbz	r3, 40218c <xQueueGenericReceive+0x58>
  40218a:	2500      	movs	r5, #0
  40218c:	b955      	cbnz	r5, 4021a4 <xQueueGenericReceive+0x70>
  40218e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402192:	b672      	cpsid	i
  402194:	f383 8811 	msr	BASEPRI, r3
  402198:	f3bf 8f6f 	isb	sy
  40219c:	f3bf 8f4f 	dsb	sy
  4021a0:	b662      	cpsie	i
  4021a2:	e7fe      	b.n	4021a2 <xQueueGenericReceive+0x6e>
  4021a4:	2500      	movs	r5, #0
  4021a6:	e046      	b.n	402236 <xQueueGenericReceive+0x102>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4021a8:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4021aa:	4631      	mov	r1, r6
  4021ac:	4620      	mov	r0, r4
  4021ae:	4b48      	ldr	r3, [pc, #288]	; (4022d0 <xQueueGenericReceive+0x19c>)
  4021b0:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  4021b2:	b9e7      	cbnz	r7, 4021ee <xQueueGenericReceive+0xba>
					--( pxQueue->uxMessagesWaiting );
  4021b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4021b6:	3b01      	subs	r3, #1
  4021b8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4021ba:	6823      	ldr	r3, [r4, #0]
  4021bc:	b913      	cbnz	r3, 4021c4 <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4021be:	4b45      	ldr	r3, [pc, #276]	; (4022d4 <xQueueGenericReceive+0x1a0>)
  4021c0:	4798      	blx	r3
  4021c2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4021c4:	6923      	ldr	r3, [r4, #16]
  4021c6:	b16b      	cbz	r3, 4021e4 <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4021c8:	f104 0010 	add.w	r0, r4, #16
  4021cc:	4b42      	ldr	r3, [pc, #264]	; (4022d8 <xQueueGenericReceive+0x1a4>)
  4021ce:	4798      	blx	r3
  4021d0:	2801      	cmp	r0, #1
  4021d2:	d107      	bne.n	4021e4 <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  4021d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021d8:	4b40      	ldr	r3, [pc, #256]	; (4022dc <xQueueGenericReceive+0x1a8>)
  4021da:	601a      	str	r2, [r3, #0]
  4021dc:	f3bf 8f4f 	dsb	sy
  4021e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4021e4:	4b3e      	ldr	r3, [pc, #248]	; (4022e0 <xQueueGenericReceive+0x1ac>)
  4021e6:	4798      	blx	r3
				return pdPASS;
  4021e8:	2001      	movs	r0, #1
}
  4021ea:	b005      	add	sp, #20
  4021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4021ee:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4021f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4021f2:	2b00      	cmp	r3, #0
  4021f4:	d0f6      	beq.n	4021e4 <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4021f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4021fa:	4b37      	ldr	r3, [pc, #220]	; (4022d8 <xQueueGenericReceive+0x1a4>)
  4021fc:	4798      	blx	r3
  4021fe:	2800      	cmp	r0, #0
  402200:	d0f0      	beq.n	4021e4 <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  402202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402206:	4b35      	ldr	r3, [pc, #212]	; (4022dc <xQueueGenericReceive+0x1a8>)
  402208:	601a      	str	r2, [r3, #0]
  40220a:	f3bf 8f4f 	dsb	sy
  40220e:	f3bf 8f6f 	isb	sy
  402212:	e7e7      	b.n	4021e4 <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
  402214:	4b32      	ldr	r3, [pc, #200]	; (4022e0 <xQueueGenericReceive+0x1ac>)
  402216:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402218:	2000      	movs	r0, #0
  40221a:	e7e6      	b.n	4021ea <xQueueGenericReceive+0xb6>
						taskENTER_CRITICAL();
  40221c:	4b31      	ldr	r3, [pc, #196]	; (4022e4 <xQueueGenericReceive+0x1b0>)
  40221e:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  402220:	6860      	ldr	r0, [r4, #4]
  402222:	4b31      	ldr	r3, [pc, #196]	; (4022e8 <xQueueGenericReceive+0x1b4>)
  402224:	4798      	blx	r3
						taskEXIT_CRITICAL();
  402226:	4b2e      	ldr	r3, [pc, #184]	; (4022e0 <xQueueGenericReceive+0x1ac>)
  402228:	4798      	blx	r3
  40222a:	e032      	b.n	402292 <xQueueGenericReceive+0x15e>
				prvUnlockQueue( pxQueue );
  40222c:	4620      	mov	r0, r4
  40222e:	4b2f      	ldr	r3, [pc, #188]	; (4022ec <xQueueGenericReceive+0x1b8>)
  402230:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402232:	4b2f      	ldr	r3, [pc, #188]	; (4022f0 <xQueueGenericReceive+0x1bc>)
  402234:	4798      	blx	r3
		taskENTER_CRITICAL();
  402236:	4b2b      	ldr	r3, [pc, #172]	; (4022e4 <xQueueGenericReceive+0x1b0>)
  402238:	4798      	blx	r3
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40223a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40223c:	2b00      	cmp	r3, #0
  40223e:	d1b3      	bne.n	4021a8 <xQueueGenericReceive+0x74>
				if( xTicksToWait == ( TickType_t ) 0 )
  402240:	9b01      	ldr	r3, [sp, #4]
  402242:	2b00      	cmp	r3, #0
  402244:	d0e6      	beq.n	402214 <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  402246:	b91d      	cbnz	r5, 402250 <xQueueGenericReceive+0x11c>
					vTaskSetTimeOutState( &xTimeOut );
  402248:	a802      	add	r0, sp, #8
  40224a:	4b2a      	ldr	r3, [pc, #168]	; (4022f4 <xQueueGenericReceive+0x1c0>)
  40224c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40224e:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  402250:	4b23      	ldr	r3, [pc, #140]	; (4022e0 <xQueueGenericReceive+0x1ac>)
  402252:	4798      	blx	r3
		vTaskSuspendAll();
  402254:	4b28      	ldr	r3, [pc, #160]	; (4022f8 <xQueueGenericReceive+0x1c4>)
  402256:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402258:	4b22      	ldr	r3, [pc, #136]	; (4022e4 <xQueueGenericReceive+0x1b0>)
  40225a:	4798      	blx	r3
  40225c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40225e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402262:	d101      	bne.n	402268 <xQueueGenericReceive+0x134>
  402264:	2300      	movs	r3, #0
  402266:	6463      	str	r3, [r4, #68]	; 0x44
  402268:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40226a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40226e:	d101      	bne.n	402274 <xQueueGenericReceive+0x140>
  402270:	2300      	movs	r3, #0
  402272:	64a3      	str	r3, [r4, #72]	; 0x48
  402274:	4b1a      	ldr	r3, [pc, #104]	; (4022e0 <xQueueGenericReceive+0x1ac>)
  402276:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402278:	a901      	add	r1, sp, #4
  40227a:	a802      	add	r0, sp, #8
  40227c:	4b1f      	ldr	r3, [pc, #124]	; (4022fc <xQueueGenericReceive+0x1c8>)
  40227e:	4798      	blx	r3
  402280:	b9e0      	cbnz	r0, 4022bc <xQueueGenericReceive+0x188>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402282:	4620      	mov	r0, r4
  402284:	4b1e      	ldr	r3, [pc, #120]	; (402300 <xQueueGenericReceive+0x1cc>)
  402286:	4798      	blx	r3
  402288:	2800      	cmp	r0, #0
  40228a:	d0cf      	beq.n	40222c <xQueueGenericReceive+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40228c:	6823      	ldr	r3, [r4, #0]
  40228e:	2b00      	cmp	r3, #0
  402290:	d0c4      	beq.n	40221c <xQueueGenericReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402292:	9901      	ldr	r1, [sp, #4]
  402294:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402298:	4b1a      	ldr	r3, [pc, #104]	; (402304 <xQueueGenericReceive+0x1d0>)
  40229a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40229c:	4620      	mov	r0, r4
  40229e:	4b13      	ldr	r3, [pc, #76]	; (4022ec <xQueueGenericReceive+0x1b8>)
  4022a0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4022a2:	4b13      	ldr	r3, [pc, #76]	; (4022f0 <xQueueGenericReceive+0x1bc>)
  4022a4:	4798      	blx	r3
  4022a6:	2800      	cmp	r0, #0
  4022a8:	d1c5      	bne.n	402236 <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
  4022aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022ae:	4b0b      	ldr	r3, [pc, #44]	; (4022dc <xQueueGenericReceive+0x1a8>)
  4022b0:	601a      	str	r2, [r3, #0]
  4022b2:	f3bf 8f4f 	dsb	sy
  4022b6:	f3bf 8f6f 	isb	sy
  4022ba:	e7bc      	b.n	402236 <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
  4022bc:	4620      	mov	r0, r4
  4022be:	4b0b      	ldr	r3, [pc, #44]	; (4022ec <xQueueGenericReceive+0x1b8>)
  4022c0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4022c2:	4b0b      	ldr	r3, [pc, #44]	; (4022f0 <xQueueGenericReceive+0x1bc>)
  4022c4:	4798      	blx	r3
			return errQUEUE_EMPTY;
  4022c6:	2000      	movs	r0, #0
  4022c8:	e78f      	b.n	4021ea <xQueueGenericReceive+0xb6>
  4022ca:	bf00      	nop
  4022cc:	00402df5 	.word	0x00402df5
  4022d0:	00401b7d 	.word	0x00401b7d
  4022d4:	00402f85 	.word	0x00402f85
  4022d8:	00402c8d 	.word	0x00402c8d
  4022dc:	e000ed04 	.word	0xe000ed04
  4022e0:	0040178d 	.word	0x0040178d
  4022e4:	00401741 	.word	0x00401741
  4022e8:	00402e15 	.word	0x00402e15
  4022ec:	00401ba5 	.word	0x00401ba5
  4022f0:	0040286d 	.word	0x0040286d
  4022f4:	00402d25 	.word	0x00402d25
  4022f8:	0040270d 	.word	0x0040270d
  4022fc:	00402d55 	.word	0x00402d55
  402300:	00401a49 	.word	0x00401a49
  402304:	00402b89 	.word	0x00402b89

00402308 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402308:	2300      	movs	r3, #0
  40230a:	2b07      	cmp	r3, #7
  40230c:	d80c      	bhi.n	402328 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40230e:	4a07      	ldr	r2, [pc, #28]	; (40232c <vQueueAddToRegistry+0x24>)
  402310:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  402314:	b10a      	cbz	r2, 40231a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402316:	3301      	adds	r3, #1
  402318:	e7f7      	b.n	40230a <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40231a:	4a04      	ldr	r2, [pc, #16]	; (40232c <vQueueAddToRegistry+0x24>)
  40231c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402324:	6058      	str	r0, [r3, #4]
				break;
  402326:	4770      	bx	lr
  402328:	4770      	bx	lr
  40232a:	bf00      	nop
  40232c:	2043a164 	.word	0x2043a164

00402330 <vQueueWaitForMessageRestricted>:
	{
  402330:	b570      	push	{r4, r5, r6, lr}
  402332:	4604      	mov	r4, r0
  402334:	460d      	mov	r5, r1
  402336:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402338:	4b0f      	ldr	r3, [pc, #60]	; (402378 <vQueueWaitForMessageRestricted+0x48>)
  40233a:	4798      	blx	r3
  40233c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40233e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402342:	d00b      	beq.n	40235c <vQueueWaitForMessageRestricted+0x2c>
  402344:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402346:	f1b3 3fff 	cmp.w	r3, #4294967295
  40234a:	d00a      	beq.n	402362 <vQueueWaitForMessageRestricted+0x32>
  40234c:	4b0b      	ldr	r3, [pc, #44]	; (40237c <vQueueWaitForMessageRestricted+0x4c>)
  40234e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402352:	b14b      	cbz	r3, 402368 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402354:	4620      	mov	r0, r4
  402356:	4b0a      	ldr	r3, [pc, #40]	; (402380 <vQueueWaitForMessageRestricted+0x50>)
  402358:	4798      	blx	r3
  40235a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  40235c:	2300      	movs	r3, #0
  40235e:	6463      	str	r3, [r4, #68]	; 0x44
  402360:	e7f0      	b.n	402344 <vQueueWaitForMessageRestricted+0x14>
  402362:	2300      	movs	r3, #0
  402364:	64a3      	str	r3, [r4, #72]	; 0x48
  402366:	e7f1      	b.n	40234c <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402368:	4632      	mov	r2, r6
  40236a:	4629      	mov	r1, r5
  40236c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402370:	4b04      	ldr	r3, [pc, #16]	; (402384 <vQueueWaitForMessageRestricted+0x54>)
  402372:	4798      	blx	r3
  402374:	e7ee      	b.n	402354 <vQueueWaitForMessageRestricted+0x24>
  402376:	bf00      	nop
  402378:	00401741 	.word	0x00401741
  40237c:	0040178d 	.word	0x0040178d
  402380:	00401ba5 	.word	0x00401ba5
  402384:	00402c0d 	.word	0x00402c0d

00402388 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402388:	4b0a      	ldr	r3, [pc, #40]	; (4023b4 <prvResetNextTaskUnblockTime+0x2c>)
  40238a:	681b      	ldr	r3, [r3, #0]
  40238c:	681b      	ldr	r3, [r3, #0]
  40238e:	b94b      	cbnz	r3, 4023a4 <prvResetNextTaskUnblockTime+0x1c>
  402390:	2301      	movs	r3, #1
  402392:	b94b      	cbnz	r3, 4023a8 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402394:	4b07      	ldr	r3, [pc, #28]	; (4023b4 <prvResetNextTaskUnblockTime+0x2c>)
  402396:	681b      	ldr	r3, [r3, #0]
  402398:	68db      	ldr	r3, [r3, #12]
  40239a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40239c:	685a      	ldr	r2, [r3, #4]
  40239e:	4b06      	ldr	r3, [pc, #24]	; (4023b8 <prvResetNextTaskUnblockTime+0x30>)
  4023a0:	601a      	str	r2, [r3, #0]
  4023a2:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023a4:	2300      	movs	r3, #0
  4023a6:	e7f4      	b.n	402392 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
  4023a8:	f04f 32ff 	mov.w	r2, #4294967295
  4023ac:	4b02      	ldr	r3, [pc, #8]	; (4023b8 <prvResetNextTaskUnblockTime+0x30>)
  4023ae:	601a      	str	r2, [r3, #0]
  4023b0:	4770      	bx	lr
  4023b2:	bf00      	nop
  4023b4:	2040c258 	.word	0x2040c258
  4023b8:	2040c304 	.word	0x2040c304

004023bc <prvDeleteTCB>:
	{
  4023bc:	b538      	push	{r3, r4, r5, lr}
  4023be:	4605      	mov	r5, r0
			vPortFreeAligned( pxTCB->pxStack );
  4023c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4023c2:	4c02      	ldr	r4, [pc, #8]	; (4023cc <prvDeleteTCB+0x10>)
  4023c4:	47a0      	blx	r4
		vPortFree( pxTCB );
  4023c6:	4628      	mov	r0, r5
  4023c8:	47a0      	blx	r4
  4023ca:	bd38      	pop	{r3, r4, r5, pc}
  4023cc:	00401a05 	.word	0x00401a05

004023d0 <prvAllocateTCBAndStack>:
{
  4023d0:	b570      	push	{r4, r5, r6, lr}
  4023d2:	4606      	mov	r6, r0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023d4:	460c      	mov	r4, r1
  4023d6:	b919      	cbnz	r1, 4023e0 <prvAllocateTCBAndStack+0x10>
  4023d8:	0080      	lsls	r0, r0, #2
  4023da:	4b0c      	ldr	r3, [pc, #48]	; (40240c <prvAllocateTCBAndStack+0x3c>)
  4023dc:	4798      	blx	r3
  4023de:	4604      	mov	r4, r0
		if( pxStack != NULL )
  4023e0:	b18c      	cbz	r4, 402406 <prvAllocateTCBAndStack+0x36>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4023e2:	2058      	movs	r0, #88	; 0x58
  4023e4:	4b09      	ldr	r3, [pc, #36]	; (40240c <prvAllocateTCBAndStack+0x3c>)
  4023e6:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4023e8:	4605      	mov	r5, r0
  4023ea:	b140      	cbz	r0, 4023fe <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
  4023ec:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
  4023ee:	b125      	cbz	r5, 4023fa <prvAllocateTCBAndStack+0x2a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4023f0:	00b2      	lsls	r2, r6, #2
  4023f2:	21a5      	movs	r1, #165	; 0xa5
  4023f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
  4023f6:	4b06      	ldr	r3, [pc, #24]	; (402410 <prvAllocateTCBAndStack+0x40>)
  4023f8:	4798      	blx	r3
}
  4023fa:	4628      	mov	r0, r5
  4023fc:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
  4023fe:	4620      	mov	r0, r4
  402400:	4b04      	ldr	r3, [pc, #16]	; (402414 <prvAllocateTCBAndStack+0x44>)
  402402:	4798      	blx	r3
  402404:	e7f3      	b.n	4023ee <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
  402406:	2500      	movs	r5, #0
  402408:	e7f1      	b.n	4023ee <prvAllocateTCBAndStack+0x1e>
  40240a:	bf00      	nop
  40240c:	00401991 	.word	0x00401991
  402410:	00423501 	.word	0x00423501
  402414:	00401a05 	.word	0x00401a05

00402418 <prvInitialiseTCBVariables>:
{
  402418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40241a:	4604      	mov	r4, r0
  40241c:	4615      	mov	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40241e:	2300      	movs	r3, #0
  402420:	2b09      	cmp	r3, #9
  402422:	d918      	bls.n	402456 <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402424:	2300      	movs	r3, #0
  402426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  40242a:	2d04      	cmp	r5, #4
  40242c:	d900      	bls.n	402430 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  40242e:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
  402430:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402432:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402434:	2600      	movs	r6, #0
  402436:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402438:	1d20      	adds	r0, r4, #4
  40243a:	4f0b      	ldr	r7, [pc, #44]	; (402468 <prvInitialiseTCBVariables+0x50>)
  40243c:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40243e:	f104 0018 	add.w	r0, r4, #24
  402442:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402444:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402446:	f1c5 0505 	rsb	r5, r5, #5
  40244a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40244c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40244e:	6526      	str	r6, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402450:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  402454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402456:	5cc8      	ldrb	r0, [r1, r3]
  402458:	18e2      	adds	r2, r4, r3
  40245a:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40245e:	5cca      	ldrb	r2, [r1, r3]
  402460:	2a00      	cmp	r2, #0
  402462:	d0df      	beq.n	402424 <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402464:	3301      	adds	r3, #1
  402466:	e7db      	b.n	402420 <prvInitialiseTCBVariables+0x8>
  402468:	0040160b 	.word	0x0040160b

0040246c <prvInitialiseTaskLists>:
{
  40246c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40246e:	2400      	movs	r4, #0
  402470:	2c04      	cmp	r4, #4
  402472:	d911      	bls.n	402498 <prvInitialiseTaskLists+0x2c>
	vListInitialise( &xDelayedTaskList1 );
  402474:	4e0c      	ldr	r6, [pc, #48]	; (4024a8 <prvInitialiseTaskLists+0x3c>)
  402476:	4630      	mov	r0, r6
  402478:	4c0c      	ldr	r4, [pc, #48]	; (4024ac <prvInitialiseTaskLists+0x40>)
  40247a:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  40247c:	4d0c      	ldr	r5, [pc, #48]	; (4024b0 <prvInitialiseTaskLists+0x44>)
  40247e:	4628      	mov	r0, r5
  402480:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  402482:	480c      	ldr	r0, [pc, #48]	; (4024b4 <prvInitialiseTaskLists+0x48>)
  402484:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  402486:	480c      	ldr	r0, [pc, #48]	; (4024b8 <prvInitialiseTaskLists+0x4c>)
  402488:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  40248a:	480c      	ldr	r0, [pc, #48]	; (4024bc <prvInitialiseTaskLists+0x50>)
  40248c:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  40248e:	4b0c      	ldr	r3, [pc, #48]	; (4024c0 <prvInitialiseTaskLists+0x54>)
  402490:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402492:	4b0c      	ldr	r3, [pc, #48]	; (4024c4 <prvInitialiseTaskLists+0x58>)
  402494:	601d      	str	r5, [r3, #0]
  402496:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402498:	2014      	movs	r0, #20
  40249a:	4b0b      	ldr	r3, [pc, #44]	; (4024c8 <prvInitialiseTaskLists+0x5c>)
  40249c:	fb00 3004 	mla	r0, r0, r4, r3
  4024a0:	4b02      	ldr	r3, [pc, #8]	; (4024ac <prvInitialiseTaskLists+0x40>)
  4024a2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4024a4:	3401      	adds	r4, #1
  4024a6:	e7e3      	b.n	402470 <prvInitialiseTaskLists+0x4>
  4024a8:	2040c2dc 	.word	0x2040c2dc
  4024ac:	004015f5 	.word	0x004015f5
  4024b0:	2040c2f0 	.word	0x2040c2f0
  4024b4:	2040c30c 	.word	0x2040c30c
  4024b8:	2040c338 	.word	0x2040c338
  4024bc:	2040c324 	.word	0x2040c324
  4024c0:	2040c258 	.word	0x2040c258
  4024c4:	2040c25c 	.word	0x2040c25c
  4024c8:	2040c260 	.word	0x2040c260

004024cc <prvAddCurrentTaskToDelayedList>:
{
  4024cc:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4024ce:	4b0f      	ldr	r3, [pc, #60]	; (40250c <prvAddCurrentTaskToDelayedList+0x40>)
  4024d0:	681b      	ldr	r3, [r3, #0]
  4024d2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4024d4:	4b0e      	ldr	r3, [pc, #56]	; (402510 <prvAddCurrentTaskToDelayedList+0x44>)
  4024d6:	681b      	ldr	r3, [r3, #0]
  4024d8:	4298      	cmp	r0, r3
  4024da:	d30e      	bcc.n	4024fa <prvAddCurrentTaskToDelayedList+0x2e>
  4024dc:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024de:	4b0d      	ldr	r3, [pc, #52]	; (402514 <prvAddCurrentTaskToDelayedList+0x48>)
  4024e0:	6818      	ldr	r0, [r3, #0]
  4024e2:	4b0a      	ldr	r3, [pc, #40]	; (40250c <prvAddCurrentTaskToDelayedList+0x40>)
  4024e4:	6819      	ldr	r1, [r3, #0]
  4024e6:	3104      	adds	r1, #4
  4024e8:	4b0b      	ldr	r3, [pc, #44]	; (402518 <prvAddCurrentTaskToDelayedList+0x4c>)
  4024ea:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4024ec:	4b0b      	ldr	r3, [pc, #44]	; (40251c <prvAddCurrentTaskToDelayedList+0x50>)
  4024ee:	681b      	ldr	r3, [r3, #0]
  4024f0:	429c      	cmp	r4, r3
  4024f2:	d201      	bcs.n	4024f8 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4024f4:	4b09      	ldr	r3, [pc, #36]	; (40251c <prvAddCurrentTaskToDelayedList+0x50>)
  4024f6:	601c      	str	r4, [r3, #0]
  4024f8:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024fa:	4b09      	ldr	r3, [pc, #36]	; (402520 <prvAddCurrentTaskToDelayedList+0x54>)
  4024fc:	6818      	ldr	r0, [r3, #0]
  4024fe:	4b03      	ldr	r3, [pc, #12]	; (40250c <prvAddCurrentTaskToDelayedList+0x40>)
  402500:	6819      	ldr	r1, [r3, #0]
  402502:	3104      	adds	r1, #4
  402504:	4b04      	ldr	r3, [pc, #16]	; (402518 <prvAddCurrentTaskToDelayedList+0x4c>)
  402506:	4798      	blx	r3
  402508:	bd10      	pop	{r4, pc}
  40250a:	bf00      	nop
  40250c:	2040c254 	.word	0x2040c254
  402510:	2040c34c 	.word	0x2040c34c
  402514:	2040c258 	.word	0x2040c258
  402518:	00401629 	.word	0x00401629
  40251c:	2040c304 	.word	0x2040c304
  402520:	2040c25c 	.word	0x2040c25c

00402524 <xTaskGenericCreate>:
{
  402524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402528:	b083      	sub	sp, #12
  40252a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40252c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
  402530:	b168      	cbz	r0, 40254e <xTaskGenericCreate+0x2a>
  402532:	4680      	mov	r8, r0
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402534:	2f04      	cmp	r7, #4
  402536:	d915      	bls.n	402564 <xTaskGenericCreate+0x40>
  402538:	f04f 0380 	mov.w	r3, #128	; 0x80
  40253c:	b672      	cpsid	i
  40253e:	f383 8811 	msr	BASEPRI, r3
  402542:	f3bf 8f6f 	isb	sy
  402546:	f3bf 8f4f 	dsb	sy
  40254a:	b662      	cpsie	i
  40254c:	e7fe      	b.n	40254c <xTaskGenericCreate+0x28>
  40254e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402552:	b672      	cpsid	i
  402554:	f383 8811 	msr	BASEPRI, r3
  402558:	f3bf 8f6f 	isb	sy
  40255c:	f3bf 8f4f 	dsb	sy
  402560:	b662      	cpsie	i
  402562:	e7fe      	b.n	402562 <xTaskGenericCreate+0x3e>
  402564:	4699      	mov	r9, r3
  402566:	4616      	mov	r6, r2
  402568:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  40256a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40256c:	4610      	mov	r0, r2
  40256e:	4b35      	ldr	r3, [pc, #212]	; (402644 <xTaskGenericCreate+0x120>)
  402570:	4798      	blx	r3
	if( pxNewTCB != NULL )
  402572:	4604      	mov	r4, r0
  402574:	2800      	cmp	r0, #0
  402576:	d062      	beq.n	40263e <xTaskGenericCreate+0x11a>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402578:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40257a:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40257e:	4435      	add	r5, r6
  402580:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402584:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  402588:	9600      	str	r6, [sp, #0]
  40258a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40258c:	463a      	mov	r2, r7
  40258e:	4651      	mov	r1, sl
  402590:	4e2d      	ldr	r6, [pc, #180]	; (402648 <xTaskGenericCreate+0x124>)
  402592:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402594:	464a      	mov	r2, r9
  402596:	4641      	mov	r1, r8
  402598:	4628      	mov	r0, r5
  40259a:	4b2c      	ldr	r3, [pc, #176]	; (40264c <xTaskGenericCreate+0x128>)
  40259c:	4798      	blx	r3
  40259e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4025a0:	f1bb 0f00 	cmp.w	fp, #0
  4025a4:	d001      	beq.n	4025aa <xTaskGenericCreate+0x86>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4025a6:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
  4025aa:	4b29      	ldr	r3, [pc, #164]	; (402650 <xTaskGenericCreate+0x12c>)
  4025ac:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4025ae:	4a29      	ldr	r2, [pc, #164]	; (402654 <xTaskGenericCreate+0x130>)
  4025b0:	6813      	ldr	r3, [r2, #0]
  4025b2:	3301      	adds	r3, #1
  4025b4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4025b6:	4b28      	ldr	r3, [pc, #160]	; (402658 <xTaskGenericCreate+0x134>)
  4025b8:	681b      	ldr	r3, [r3, #0]
  4025ba:	2b00      	cmp	r3, #0
  4025bc:	d133      	bne.n	402626 <xTaskGenericCreate+0x102>
				pxCurrentTCB =  pxNewTCB;
  4025be:	4b26      	ldr	r3, [pc, #152]	; (402658 <xTaskGenericCreate+0x134>)
  4025c0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4025c2:	6813      	ldr	r3, [r2, #0]
  4025c4:	2b01      	cmp	r3, #1
  4025c6:	d101      	bne.n	4025cc <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
  4025c8:	4b24      	ldr	r3, [pc, #144]	; (40265c <xTaskGenericCreate+0x138>)
  4025ca:	4798      	blx	r3
			uxTaskNumber++;
  4025cc:	4a24      	ldr	r2, [pc, #144]	; (402660 <xTaskGenericCreate+0x13c>)
  4025ce:	6813      	ldr	r3, [r2, #0]
  4025d0:	3301      	adds	r3, #1
  4025d2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4025d4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4025d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4025d8:	2501      	movs	r5, #1
  4025da:	fa05 f203 	lsl.w	r2, r5, r3
  4025de:	4921      	ldr	r1, [pc, #132]	; (402664 <xTaskGenericCreate+0x140>)
  4025e0:	6808      	ldr	r0, [r1, #0]
  4025e2:	4302      	orrs	r2, r0
  4025e4:	600a      	str	r2, [r1, #0]
  4025e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4025ea:	009a      	lsls	r2, r3, #2
  4025ec:	1d21      	adds	r1, r4, #4
  4025ee:	481e      	ldr	r0, [pc, #120]	; (402668 <xTaskGenericCreate+0x144>)
  4025f0:	4410      	add	r0, r2
  4025f2:	4b1e      	ldr	r3, [pc, #120]	; (40266c <xTaskGenericCreate+0x148>)
  4025f4:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4025f6:	4b1e      	ldr	r3, [pc, #120]	; (402670 <xTaskGenericCreate+0x14c>)
  4025f8:	4798      	blx	r3
			xReturn = pdPASS;
  4025fa:	4628      	mov	r0, r5
	if( xReturn == pdPASS )
  4025fc:	2801      	cmp	r0, #1
  4025fe:	d10f      	bne.n	402620 <xTaskGenericCreate+0xfc>
		if( xSchedulerRunning != pdFALSE )
  402600:	4b1c      	ldr	r3, [pc, #112]	; (402674 <xTaskGenericCreate+0x150>)
  402602:	681b      	ldr	r3, [r3, #0]
  402604:	b163      	cbz	r3, 402620 <xTaskGenericCreate+0xfc>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402606:	4b14      	ldr	r3, [pc, #80]	; (402658 <xTaskGenericCreate+0x134>)
  402608:	681b      	ldr	r3, [r3, #0]
  40260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40260c:	429f      	cmp	r7, r3
  40260e:	d907      	bls.n	402620 <xTaskGenericCreate+0xfc>
				taskYIELD_IF_USING_PREEMPTION();
  402610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402614:	4b18      	ldr	r3, [pc, #96]	; (402678 <xTaskGenericCreate+0x154>)
  402616:	601a      	str	r2, [r3, #0]
  402618:	f3bf 8f4f 	dsb	sy
  40261c:	f3bf 8f6f 	isb	sy
}
  402620:	b003      	add	sp, #12
  402622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( xSchedulerRunning == pdFALSE )
  402626:	4b13      	ldr	r3, [pc, #76]	; (402674 <xTaskGenericCreate+0x150>)
  402628:	681b      	ldr	r3, [r3, #0]
  40262a:	2b00      	cmp	r3, #0
  40262c:	d1ce      	bne.n	4025cc <xTaskGenericCreate+0xa8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40262e:	4b0a      	ldr	r3, [pc, #40]	; (402658 <xTaskGenericCreate+0x134>)
  402630:	681b      	ldr	r3, [r3, #0]
  402632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402634:	429f      	cmp	r7, r3
  402636:	d3c9      	bcc.n	4025cc <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
  402638:	4b07      	ldr	r3, [pc, #28]	; (402658 <xTaskGenericCreate+0x134>)
  40263a:	601c      	str	r4, [r3, #0]
  40263c:	e7c6      	b.n	4025cc <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40263e:	f04f 30ff 	mov.w	r0, #4294967295
  402642:	e7db      	b.n	4025fc <xTaskGenericCreate+0xd8>
  402644:	004023d1 	.word	0x004023d1
  402648:	00402419 	.word	0x00402419
  40264c:	004016f5 	.word	0x004016f5
  402650:	00401741 	.word	0x00401741
  402654:	2040c2c4 	.word	0x2040c2c4
  402658:	2040c254 	.word	0x2040c254
  40265c:	0040246d 	.word	0x0040246d
  402660:	2040c2d0 	.word	0x2040c2d0
  402664:	2040c2d8 	.word	0x2040c2d8
  402668:	2040c260 	.word	0x2040c260
  40266c:	00401611 	.word	0x00401611
  402670:	0040178d 	.word	0x0040178d
  402674:	2040c320 	.word	0x2040c320
  402678:	e000ed04 	.word	0xe000ed04

0040267c <vTaskStartScheduler>:
{
  40267c:	b510      	push	{r4, lr}
  40267e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402680:	2300      	movs	r3, #0
  402682:	9303      	str	r3, [sp, #12]
  402684:	9302      	str	r3, [sp, #8]
  402686:	9301      	str	r3, [sp, #4]
  402688:	9300      	str	r3, [sp, #0]
  40268a:	2282      	movs	r2, #130	; 0x82
  40268c:	4917      	ldr	r1, [pc, #92]	; (4026ec <vTaskStartScheduler+0x70>)
  40268e:	4818      	ldr	r0, [pc, #96]	; (4026f0 <vTaskStartScheduler+0x74>)
  402690:	4c18      	ldr	r4, [pc, #96]	; (4026f4 <vTaskStartScheduler+0x78>)
  402692:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402694:	2801      	cmp	r0, #1
  402696:	d00d      	beq.n	4026b4 <vTaskStartScheduler+0x38>
	if( xReturn == pdPASS )
  402698:	2801      	cmp	r0, #1
  40269a:	d00e      	beq.n	4026ba <vTaskStartScheduler+0x3e>
		configASSERT( xReturn );
  40269c:	bb18      	cbnz	r0, 4026e6 <vTaskStartScheduler+0x6a>
  40269e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a2:	b672      	cpsid	i
  4026a4:	f383 8811 	msr	BASEPRI, r3
  4026a8:	f3bf 8f6f 	isb	sy
  4026ac:	f3bf 8f4f 	dsb	sy
  4026b0:	b662      	cpsie	i
  4026b2:	e7fe      	b.n	4026b2 <vTaskStartScheduler+0x36>
			xReturn = xTimerCreateTimerTask();
  4026b4:	4b10      	ldr	r3, [pc, #64]	; (4026f8 <vTaskStartScheduler+0x7c>)
  4026b6:	4798      	blx	r3
  4026b8:	e7ee      	b.n	402698 <vTaskStartScheduler+0x1c>
  4026ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026be:	b672      	cpsid	i
  4026c0:	f383 8811 	msr	BASEPRI, r3
  4026c4:	f3bf 8f6f 	isb	sy
  4026c8:	f3bf 8f4f 	dsb	sy
  4026cc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4026ce:	f04f 32ff 	mov.w	r2, #4294967295
  4026d2:	4b0a      	ldr	r3, [pc, #40]	; (4026fc <vTaskStartScheduler+0x80>)
  4026d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4026d6:	2201      	movs	r2, #1
  4026d8:	4b09      	ldr	r3, [pc, #36]	; (402700 <vTaskStartScheduler+0x84>)
  4026da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4026dc:	2200      	movs	r2, #0
  4026de:	4b09      	ldr	r3, [pc, #36]	; (402704 <vTaskStartScheduler+0x88>)
  4026e0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4026e2:	4b09      	ldr	r3, [pc, #36]	; (402708 <vTaskStartScheduler+0x8c>)
  4026e4:	4798      	blx	r3
}
  4026e6:	b004      	add	sp, #16
  4026e8:	bd10      	pop	{r4, pc}
  4026ea:	bf00      	nop
  4026ec:	00428c7c 	.word	0x00428c7c
  4026f0:	00402a89 	.word	0x00402a89
  4026f4:	00402525 	.word	0x00402525
  4026f8:	00403099 	.word	0x00403099
  4026fc:	2040c304 	.word	0x2040c304
  402700:	2040c320 	.word	0x2040c320
  402704:	2040c34c 	.word	0x2040c34c
  402708:	00401875 	.word	0x00401875

0040270c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  40270c:	4a02      	ldr	r2, [pc, #8]	; (402718 <vTaskSuspendAll+0xc>)
  40270e:	6813      	ldr	r3, [r2, #0]
  402710:	3301      	adds	r3, #1
  402712:	6013      	str	r3, [r2, #0]
  402714:	4770      	bx	lr
  402716:	bf00      	nop
  402718:	2040c2cc 	.word	0x2040c2cc

0040271c <xTaskGetTickCount>:
		xTicks = xTickCount;
  40271c:	4b01      	ldr	r3, [pc, #4]	; (402724 <xTaskGetTickCount+0x8>)
  40271e:	6818      	ldr	r0, [r3, #0]
}
  402720:	4770      	bx	lr
  402722:	bf00      	nop
  402724:	2040c34c 	.word	0x2040c34c

00402728 <xTaskIncrementTick>:
{
  402728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40272a:	4b41      	ldr	r3, [pc, #260]	; (402830 <xTaskIncrementTick+0x108>)
  40272c:	681b      	ldr	r3, [r3, #0]
  40272e:	2b00      	cmp	r3, #0
  402730:	d175      	bne.n	40281e <xTaskIncrementTick+0xf6>
		++xTickCount;
  402732:	4b40      	ldr	r3, [pc, #256]	; (402834 <xTaskIncrementTick+0x10c>)
  402734:	681a      	ldr	r2, [r3, #0]
  402736:	3201      	adds	r2, #1
  402738:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  40273a:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40273c:	b9d6      	cbnz	r6, 402774 <xTaskIncrementTick+0x4c>
				taskSWITCH_DELAYED_LISTS();
  40273e:	4b3e      	ldr	r3, [pc, #248]	; (402838 <xTaskIncrementTick+0x110>)
  402740:	681b      	ldr	r3, [r3, #0]
  402742:	681b      	ldr	r3, [r3, #0]
  402744:	b153      	cbz	r3, 40275c <xTaskIncrementTick+0x34>
  402746:	f04f 0380 	mov.w	r3, #128	; 0x80
  40274a:	b672      	cpsid	i
  40274c:	f383 8811 	msr	BASEPRI, r3
  402750:	f3bf 8f6f 	isb	sy
  402754:	f3bf 8f4f 	dsb	sy
  402758:	b662      	cpsie	i
  40275a:	e7fe      	b.n	40275a <xTaskIncrementTick+0x32>
  40275c:	4a36      	ldr	r2, [pc, #216]	; (402838 <xTaskIncrementTick+0x110>)
  40275e:	6811      	ldr	r1, [r2, #0]
  402760:	4b36      	ldr	r3, [pc, #216]	; (40283c <xTaskIncrementTick+0x114>)
  402762:	6818      	ldr	r0, [r3, #0]
  402764:	6010      	str	r0, [r2, #0]
  402766:	6019      	str	r1, [r3, #0]
  402768:	4a35      	ldr	r2, [pc, #212]	; (402840 <xTaskIncrementTick+0x118>)
  40276a:	6813      	ldr	r3, [r2, #0]
  40276c:	3301      	adds	r3, #1
  40276e:	6013      	str	r3, [r2, #0]
  402770:	4b34      	ldr	r3, [pc, #208]	; (402844 <xTaskIncrementTick+0x11c>)
  402772:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402774:	4b34      	ldr	r3, [pc, #208]	; (402848 <xTaskIncrementTick+0x120>)
  402776:	681b      	ldr	r3, [r3, #0]
  402778:	429e      	cmp	r6, r3
  40277a:	d244      	bcs.n	402806 <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
  40277c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40277e:	4b33      	ldr	r3, [pc, #204]	; (40284c <xTaskIncrementTick+0x124>)
  402780:	681b      	ldr	r3, [r3, #0]
  402782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402784:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402788:	009a      	lsls	r2, r3, #2
  40278a:	4b31      	ldr	r3, [pc, #196]	; (402850 <xTaskIncrementTick+0x128>)
  40278c:	589b      	ldr	r3, [r3, r2]
  40278e:	2b01      	cmp	r3, #1
  402790:	d900      	bls.n	402794 <xTaskIncrementTick+0x6c>
				xSwitchRequired = pdTRUE;
  402792:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402794:	4b2f      	ldr	r3, [pc, #188]	; (402854 <xTaskIncrementTick+0x12c>)
  402796:	681b      	ldr	r3, [r3, #0]
  402798:	b90b      	cbnz	r3, 40279e <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  40279a:	4b2f      	ldr	r3, [pc, #188]	; (402858 <xTaskIncrementTick+0x130>)
  40279c:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40279e:	4b2f      	ldr	r3, [pc, #188]	; (40285c <xTaskIncrementTick+0x134>)
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	b103      	cbz	r3, 4027a6 <xTaskIncrementTick+0x7e>
			xSwitchRequired = pdTRUE;
  4027a4:	2401      	movs	r4, #1
}
  4027a6:	4620      	mov	r0, r4
  4027a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								xSwitchRequired = pdTRUE;
  4027aa:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4027ac:	4b22      	ldr	r3, [pc, #136]	; (402838 <xTaskIncrementTick+0x110>)
  4027ae:	681b      	ldr	r3, [r3, #0]
  4027b0:	681b      	ldr	r3, [r3, #0]
  4027b2:	b353      	cbz	r3, 40280a <xTaskIncrementTick+0xe2>
  4027b4:	2300      	movs	r3, #0
  4027b6:	bb53      	cbnz	r3, 40280e <xTaskIncrementTick+0xe6>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4027b8:	4b1f      	ldr	r3, [pc, #124]	; (402838 <xTaskIncrementTick+0x110>)
  4027ba:	681b      	ldr	r3, [r3, #0]
  4027bc:	68db      	ldr	r3, [r3, #12]
  4027be:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4027c0:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4027c2:	429e      	cmp	r6, r3
  4027c4:	d328      	bcc.n	402818 <xTaskIncrementTick+0xf0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4027c6:	1d2f      	adds	r7, r5, #4
  4027c8:	4638      	mov	r0, r7
  4027ca:	4b25      	ldr	r3, [pc, #148]	; (402860 <xTaskIncrementTick+0x138>)
  4027cc:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4027ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4027d0:	b11b      	cbz	r3, 4027da <xTaskIncrementTick+0xb2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4027d2:	f105 0018 	add.w	r0, r5, #24
  4027d6:	4b22      	ldr	r3, [pc, #136]	; (402860 <xTaskIncrementTick+0x138>)
  4027d8:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  4027da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  4027dc:	2201      	movs	r2, #1
  4027de:	409a      	lsls	r2, r3
  4027e0:	4920      	ldr	r1, [pc, #128]	; (402864 <xTaskIncrementTick+0x13c>)
  4027e2:	6808      	ldr	r0, [r1, #0]
  4027e4:	4302      	orrs	r2, r0
  4027e6:	600a      	str	r2, [r1, #0]
  4027e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4027ec:	009a      	lsls	r2, r3, #2
  4027ee:	4639      	mov	r1, r7
  4027f0:	4817      	ldr	r0, [pc, #92]	; (402850 <xTaskIncrementTick+0x128>)
  4027f2:	4410      	add	r0, r2
  4027f4:	4b1c      	ldr	r3, [pc, #112]	; (402868 <xTaskIncrementTick+0x140>)
  4027f6:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4027f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4027fa:	4b14      	ldr	r3, [pc, #80]	; (40284c <xTaskIncrementTick+0x124>)
  4027fc:	681b      	ldr	r3, [r3, #0]
  4027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402800:	429a      	cmp	r2, r3
  402802:	d2d2      	bcs.n	4027aa <xTaskIncrementTick+0x82>
  402804:	e7d2      	b.n	4027ac <xTaskIncrementTick+0x84>
  402806:	2400      	movs	r4, #0
  402808:	e7d0      	b.n	4027ac <xTaskIncrementTick+0x84>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40280a:	2301      	movs	r3, #1
  40280c:	e7d3      	b.n	4027b6 <xTaskIncrementTick+0x8e>
						xNextTaskUnblockTime = portMAX_DELAY;
  40280e:	f04f 32ff 	mov.w	r2, #4294967295
  402812:	4b0d      	ldr	r3, [pc, #52]	; (402848 <xTaskIncrementTick+0x120>)
  402814:	601a      	str	r2, [r3, #0]
						break;
  402816:	e7b2      	b.n	40277e <xTaskIncrementTick+0x56>
							xNextTaskUnblockTime = xItemValue;
  402818:	4a0b      	ldr	r2, [pc, #44]	; (402848 <xTaskIncrementTick+0x120>)
  40281a:	6013      	str	r3, [r2, #0]
							break;
  40281c:	e7af      	b.n	40277e <xTaskIncrementTick+0x56>
		++uxPendedTicks;
  40281e:	4a0d      	ldr	r2, [pc, #52]	; (402854 <xTaskIncrementTick+0x12c>)
  402820:	6813      	ldr	r3, [r2, #0]
  402822:	3301      	adds	r3, #1
  402824:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402826:	4b0c      	ldr	r3, [pc, #48]	; (402858 <xTaskIncrementTick+0x130>)
  402828:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40282a:	2400      	movs	r4, #0
  40282c:	e7b7      	b.n	40279e <xTaskIncrementTick+0x76>
  40282e:	bf00      	nop
  402830:	2040c2cc 	.word	0x2040c2cc
  402834:	2040c34c 	.word	0x2040c34c
  402838:	2040c258 	.word	0x2040c258
  40283c:	2040c25c 	.word	0x2040c25c
  402840:	2040c308 	.word	0x2040c308
  402844:	00402389 	.word	0x00402389
  402848:	2040c304 	.word	0x2040c304
  40284c:	2040c254 	.word	0x2040c254
  402850:	2040c260 	.word	0x2040c260
  402854:	2040c2c8 	.word	0x2040c2c8
  402858:	00421b9d 	.word	0x00421b9d
  40285c:	2040c350 	.word	0x2040c350
  402860:	0040165d 	.word	0x0040165d
  402864:	2040c2d8 	.word	0x2040c2d8
  402868:	00401611 	.word	0x00401611

0040286c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  40286c:	4b35      	ldr	r3, [pc, #212]	; (402944 <xTaskResumeAll+0xd8>)
  40286e:	681b      	ldr	r3, [r3, #0]
  402870:	b953      	cbnz	r3, 402888 <xTaskResumeAll+0x1c>
  402872:	f04f 0380 	mov.w	r3, #128	; 0x80
  402876:	b672      	cpsid	i
  402878:	f383 8811 	msr	BASEPRI, r3
  40287c:	f3bf 8f6f 	isb	sy
  402880:	f3bf 8f4f 	dsb	sy
  402884:	b662      	cpsie	i
  402886:	e7fe      	b.n	402886 <xTaskResumeAll+0x1a>
{
  402888:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
  40288a:	4b2f      	ldr	r3, [pc, #188]	; (402948 <xTaskResumeAll+0xdc>)
  40288c:	4798      	blx	r3
		--uxSchedulerSuspended;
  40288e:	4b2d      	ldr	r3, [pc, #180]	; (402944 <xTaskResumeAll+0xd8>)
  402890:	681a      	ldr	r2, [r3, #0]
  402892:	3a01      	subs	r2, #1
  402894:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402896:	681b      	ldr	r3, [r3, #0]
  402898:	2b00      	cmp	r3, #0
  40289a:	d14f      	bne.n	40293c <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40289c:	4b2b      	ldr	r3, [pc, #172]	; (40294c <xTaskResumeAll+0xe0>)
  40289e:	681b      	ldr	r3, [r3, #0]
  4028a0:	bb1b      	cbnz	r3, 4028ea <xTaskResumeAll+0x7e>
BaseType_t xAlreadyYielded = pdFALSE;
  4028a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4028a4:	4b2a      	ldr	r3, [pc, #168]	; (402950 <xTaskResumeAll+0xe4>)
  4028a6:	4798      	blx	r3
}
  4028a8:	4620      	mov	r0, r4
  4028aa:	bd70      	pop	{r4, r5, r6, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4028ac:	4b29      	ldr	r3, [pc, #164]	; (402954 <xTaskResumeAll+0xe8>)
  4028ae:	68db      	ldr	r3, [r3, #12]
  4028b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4028b2:	f104 0018 	add.w	r0, r4, #24
  4028b6:	4e28      	ldr	r6, [pc, #160]	; (402958 <xTaskResumeAll+0xec>)
  4028b8:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4028ba:	1d25      	adds	r5, r4, #4
  4028bc:	4628      	mov	r0, r5
  4028be:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4028c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4028c2:	2201      	movs	r2, #1
  4028c4:	409a      	lsls	r2, r3
  4028c6:	4925      	ldr	r1, [pc, #148]	; (40295c <xTaskResumeAll+0xf0>)
  4028c8:	6808      	ldr	r0, [r1, #0]
  4028ca:	4302      	orrs	r2, r0
  4028cc:	600a      	str	r2, [r1, #0]
  4028ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028d2:	009a      	lsls	r2, r3, #2
  4028d4:	4629      	mov	r1, r5
  4028d6:	4822      	ldr	r0, [pc, #136]	; (402960 <xTaskResumeAll+0xf4>)
  4028d8:	4410      	add	r0, r2
  4028da:	4b22      	ldr	r3, [pc, #136]	; (402964 <xTaskResumeAll+0xf8>)
  4028dc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4028de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4028e0:	4b21      	ldr	r3, [pc, #132]	; (402968 <xTaskResumeAll+0xfc>)
  4028e2:	681b      	ldr	r3, [r3, #0]
  4028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4028e6:	429a      	cmp	r2, r3
  4028e8:	d214      	bcs.n	402914 <xTaskResumeAll+0xa8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4028ea:	4b1a      	ldr	r3, [pc, #104]	; (402954 <xTaskResumeAll+0xe8>)
  4028ec:	681b      	ldr	r3, [r3, #0]
  4028ee:	2b00      	cmp	r3, #0
  4028f0:	d1dc      	bne.n	4028ac <xTaskResumeAll+0x40>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4028f2:	4b1e      	ldr	r3, [pc, #120]	; (40296c <xTaskResumeAll+0x100>)
  4028f4:	681b      	ldr	r3, [r3, #0]
  4028f6:	b9ab      	cbnz	r3, 402924 <xTaskResumeAll+0xb8>
				if( xYieldPending == pdTRUE )
  4028f8:	4b1d      	ldr	r3, [pc, #116]	; (402970 <xTaskResumeAll+0x104>)
  4028fa:	681b      	ldr	r3, [r3, #0]
  4028fc:	2b01      	cmp	r3, #1
  4028fe:	d11f      	bne.n	402940 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
  402900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402904:	4b1b      	ldr	r3, [pc, #108]	; (402974 <xTaskResumeAll+0x108>)
  402906:	601a      	str	r2, [r3, #0]
  402908:	f3bf 8f4f 	dsb	sy
  40290c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402910:	2401      	movs	r4, #1
  402912:	e7c7      	b.n	4028a4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
  402914:	2201      	movs	r2, #1
  402916:	4b16      	ldr	r3, [pc, #88]	; (402970 <xTaskResumeAll+0x104>)
  402918:	601a      	str	r2, [r3, #0]
  40291a:	e7e6      	b.n	4028ea <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40291c:	4a13      	ldr	r2, [pc, #76]	; (40296c <xTaskResumeAll+0x100>)
  40291e:	6813      	ldr	r3, [r2, #0]
  402920:	3b01      	subs	r3, #1
  402922:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402924:	4b11      	ldr	r3, [pc, #68]	; (40296c <xTaskResumeAll+0x100>)
  402926:	681b      	ldr	r3, [r3, #0]
  402928:	2b00      	cmp	r3, #0
  40292a:	d0e5      	beq.n	4028f8 <xTaskResumeAll+0x8c>
						if( xTaskIncrementTick() != pdFALSE )
  40292c:	4b12      	ldr	r3, [pc, #72]	; (402978 <xTaskResumeAll+0x10c>)
  40292e:	4798      	blx	r3
  402930:	2800      	cmp	r0, #0
  402932:	d0f3      	beq.n	40291c <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
  402934:	2201      	movs	r2, #1
  402936:	4b0e      	ldr	r3, [pc, #56]	; (402970 <xTaskResumeAll+0x104>)
  402938:	601a      	str	r2, [r3, #0]
  40293a:	e7ef      	b.n	40291c <xTaskResumeAll+0xb0>
BaseType_t xAlreadyYielded = pdFALSE;
  40293c:	2400      	movs	r4, #0
  40293e:	e7b1      	b.n	4028a4 <xTaskResumeAll+0x38>
  402940:	2400      	movs	r4, #0
  402942:	e7af      	b.n	4028a4 <xTaskResumeAll+0x38>
  402944:	2040c2cc 	.word	0x2040c2cc
  402948:	00401741 	.word	0x00401741
  40294c:	2040c2c4 	.word	0x2040c2c4
  402950:	0040178d 	.word	0x0040178d
  402954:	2040c30c 	.word	0x2040c30c
  402958:	0040165d 	.word	0x0040165d
  40295c:	2040c2d8 	.word	0x2040c2d8
  402960:	2040c260 	.word	0x2040c260
  402964:	00401611 	.word	0x00401611
  402968:	2040c254 	.word	0x2040c254
  40296c:	2040c2c8 	.word	0x2040c2c8
  402970:	2040c350 	.word	0x2040c350
  402974:	e000ed04 	.word	0xe000ed04
  402978:	00402729 	.word	0x00402729

0040297c <vTaskDelay>:
	{
  40297c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40297e:	2800      	cmp	r0, #0
  402980:	d02a      	beq.n	4029d8 <vTaskDelay+0x5c>
  402982:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402984:	4b1a      	ldr	r3, [pc, #104]	; (4029f0 <vTaskDelay+0x74>)
  402986:	681b      	ldr	r3, [r3, #0]
  402988:	b153      	cbz	r3, 4029a0 <vTaskDelay+0x24>
  40298a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40298e:	b672      	cpsid	i
  402990:	f383 8811 	msr	BASEPRI, r3
  402994:	f3bf 8f6f 	isb	sy
  402998:	f3bf 8f4f 	dsb	sy
  40299c:	b662      	cpsie	i
  40299e:	e7fe      	b.n	40299e <vTaskDelay+0x22>
			vTaskSuspendAll();
  4029a0:	4b14      	ldr	r3, [pc, #80]	; (4029f4 <vTaskDelay+0x78>)
  4029a2:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4029a4:	4b14      	ldr	r3, [pc, #80]	; (4029f8 <vTaskDelay+0x7c>)
  4029a6:	681b      	ldr	r3, [r3, #0]
  4029a8:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029aa:	4b14      	ldr	r3, [pc, #80]	; (4029fc <vTaskDelay+0x80>)
  4029ac:	6818      	ldr	r0, [r3, #0]
  4029ae:	3004      	adds	r0, #4
  4029b0:	4b13      	ldr	r3, [pc, #76]	; (402a00 <vTaskDelay+0x84>)
  4029b2:	4798      	blx	r3
  4029b4:	b950      	cbnz	r0, 4029cc <vTaskDelay+0x50>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029b6:	4b11      	ldr	r3, [pc, #68]	; (4029fc <vTaskDelay+0x80>)
  4029b8:	681b      	ldr	r3, [r3, #0]
  4029ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4029bc:	2301      	movs	r3, #1
  4029be:	fa03 f202 	lsl.w	r2, r3, r2
  4029c2:	4910      	ldr	r1, [pc, #64]	; (402a04 <vTaskDelay+0x88>)
  4029c4:	680b      	ldr	r3, [r1, #0]
  4029c6:	ea23 0302 	bic.w	r3, r3, r2
  4029ca:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4029cc:	4620      	mov	r0, r4
  4029ce:	4b0e      	ldr	r3, [pc, #56]	; (402a08 <vTaskDelay+0x8c>)
  4029d0:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4029d2:	4b0e      	ldr	r3, [pc, #56]	; (402a0c <vTaskDelay+0x90>)
  4029d4:	4798      	blx	r3
  4029d6:	e000      	b.n	4029da <vTaskDelay+0x5e>
	BaseType_t xAlreadyYielded = pdFALSE;
  4029d8:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
  4029da:	b938      	cbnz	r0, 4029ec <vTaskDelay+0x70>
			portYIELD_WITHIN_API();
  4029dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4029e0:	4b0b      	ldr	r3, [pc, #44]	; (402a10 <vTaskDelay+0x94>)
  4029e2:	601a      	str	r2, [r3, #0]
  4029e4:	f3bf 8f4f 	dsb	sy
  4029e8:	f3bf 8f6f 	isb	sy
  4029ec:	bd10      	pop	{r4, pc}
  4029ee:	bf00      	nop
  4029f0:	2040c2cc 	.word	0x2040c2cc
  4029f4:	0040270d 	.word	0x0040270d
  4029f8:	2040c34c 	.word	0x2040c34c
  4029fc:	2040c254 	.word	0x2040c254
  402a00:	0040165d 	.word	0x0040165d
  402a04:	2040c2d8 	.word	0x2040c2d8
  402a08:	004024cd 	.word	0x004024cd
  402a0c:	0040286d 	.word	0x0040286d
  402a10:	e000ed04 	.word	0xe000ed04

00402a14 <prvCheckTasksWaitingTermination>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402a14:	4b13      	ldr	r3, [pc, #76]	; (402a64 <prvCheckTasksWaitingTermination+0x50>)
  402a16:	681b      	ldr	r3, [r3, #0]
  402a18:	b313      	cbz	r3, 402a60 <prvCheckTasksWaitingTermination+0x4c>
{
  402a1a:	b510      	push	{r4, lr}
			vTaskSuspendAll();
  402a1c:	4b12      	ldr	r3, [pc, #72]	; (402a68 <prvCheckTasksWaitingTermination+0x54>)
  402a1e:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402a20:	4b12      	ldr	r3, [pc, #72]	; (402a6c <prvCheckTasksWaitingTermination+0x58>)
  402a22:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
  402a24:	4b12      	ldr	r3, [pc, #72]	; (402a70 <prvCheckTasksWaitingTermination+0x5c>)
  402a26:	4798      	blx	r3
			if( xListIsEmpty == pdFALSE )
  402a28:	b924      	cbnz	r4, 402a34 <prvCheckTasksWaitingTermination+0x20>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402a2a:	4b0e      	ldr	r3, [pc, #56]	; (402a64 <prvCheckTasksWaitingTermination+0x50>)
  402a2c:	681b      	ldr	r3, [r3, #0]
  402a2e:	2b00      	cmp	r3, #0
  402a30:	d1f4      	bne.n	402a1c <prvCheckTasksWaitingTermination+0x8>
}
  402a32:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
  402a34:	4b0f      	ldr	r3, [pc, #60]	; (402a74 <prvCheckTasksWaitingTermination+0x60>)
  402a36:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402a38:	4b0c      	ldr	r3, [pc, #48]	; (402a6c <prvCheckTasksWaitingTermination+0x58>)
  402a3a:	68db      	ldr	r3, [r3, #12]
  402a3c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402a3e:	1d20      	adds	r0, r4, #4
  402a40:	4b0d      	ldr	r3, [pc, #52]	; (402a78 <prvCheckTasksWaitingTermination+0x64>)
  402a42:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402a44:	4a0d      	ldr	r2, [pc, #52]	; (402a7c <prvCheckTasksWaitingTermination+0x68>)
  402a46:	6813      	ldr	r3, [r2, #0]
  402a48:	3b01      	subs	r3, #1
  402a4a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402a4c:	4a05      	ldr	r2, [pc, #20]	; (402a64 <prvCheckTasksWaitingTermination+0x50>)
  402a4e:	6813      	ldr	r3, [r2, #0]
  402a50:	3b01      	subs	r3, #1
  402a52:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
  402a54:	4b0a      	ldr	r3, [pc, #40]	; (402a80 <prvCheckTasksWaitingTermination+0x6c>)
  402a56:	4798      	blx	r3
				prvDeleteTCB( pxTCB );
  402a58:	4620      	mov	r0, r4
  402a5a:	4b0a      	ldr	r3, [pc, #40]	; (402a84 <prvCheckTasksWaitingTermination+0x70>)
  402a5c:	4798      	blx	r3
  402a5e:	e7e4      	b.n	402a2a <prvCheckTasksWaitingTermination+0x16>
  402a60:	4770      	bx	lr
  402a62:	bf00      	nop
  402a64:	2040c2d4 	.word	0x2040c2d4
  402a68:	0040270d 	.word	0x0040270d
  402a6c:	2040c338 	.word	0x2040c338
  402a70:	0040286d 	.word	0x0040286d
  402a74:	00401741 	.word	0x00401741
  402a78:	0040165d 	.word	0x0040165d
  402a7c:	2040c2c4 	.word	0x2040c2c4
  402a80:	0040178d 	.word	0x0040178d
  402a84:	004023bd 	.word	0x004023bd

00402a88 <prvIdleTask>:
{
  402a88:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  402a8a:	4b07      	ldr	r3, [pc, #28]	; (402aa8 <prvIdleTask+0x20>)
  402a8c:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402a8e:	4b07      	ldr	r3, [pc, #28]	; (402aac <prvIdleTask+0x24>)
  402a90:	681b      	ldr	r3, [r3, #0]
  402a92:	2b01      	cmp	r3, #1
  402a94:	d9f9      	bls.n	402a8a <prvIdleTask+0x2>
				taskYIELD();
  402a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402a9a:	4b05      	ldr	r3, [pc, #20]	; (402ab0 <prvIdleTask+0x28>)
  402a9c:	601a      	str	r2, [r3, #0]
  402a9e:	f3bf 8f4f 	dsb	sy
  402aa2:	f3bf 8f6f 	isb	sy
  402aa6:	e7f0      	b.n	402a8a <prvIdleTask+0x2>
  402aa8:	00402a15 	.word	0x00402a15
  402aac:	2040c260 	.word	0x2040c260
  402ab0:	e000ed04 	.word	0xe000ed04

00402ab4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402ab4:	4b2e      	ldr	r3, [pc, #184]	; (402b70 <vTaskSwitchContext+0xbc>)
  402ab6:	681b      	ldr	r3, [r3, #0]
  402ab8:	2b00      	cmp	r3, #0
  402aba:	d12c      	bne.n	402b16 <vTaskSwitchContext+0x62>
{
  402abc:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402abe:	2200      	movs	r2, #0
  402ac0:	4b2c      	ldr	r3, [pc, #176]	; (402b74 <vTaskSwitchContext+0xc0>)
  402ac2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402ac4:	4b2c      	ldr	r3, [pc, #176]	; (402b78 <vTaskSwitchContext+0xc4>)
  402ac6:	681b      	ldr	r3, [r3, #0]
  402ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402aca:	681a      	ldr	r2, [r3, #0]
  402acc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ad0:	d103      	bne.n	402ada <vTaskSwitchContext+0x26>
  402ad2:	685a      	ldr	r2, [r3, #4]
  402ad4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402ad8:	d021      	beq.n	402b1e <vTaskSwitchContext+0x6a>
  402ada:	4b27      	ldr	r3, [pc, #156]	; (402b78 <vTaskSwitchContext+0xc4>)
  402adc:	6818      	ldr	r0, [r3, #0]
  402ade:	6819      	ldr	r1, [r3, #0]
  402ae0:	3134      	adds	r1, #52	; 0x34
  402ae2:	4b26      	ldr	r3, [pc, #152]	; (402b7c <vTaskSwitchContext+0xc8>)
  402ae4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402ae6:	4b26      	ldr	r3, [pc, #152]	; (402b80 <vTaskSwitchContext+0xcc>)
  402ae8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402aea:	fab3 f383 	clz	r3, r3
  402aee:	b2db      	uxtb	r3, r3
  402af0:	f1c3 031f 	rsb	r3, r3, #31
  402af4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402af8:	008a      	lsls	r2, r1, #2
  402afa:	4922      	ldr	r1, [pc, #136]	; (402b84 <vTaskSwitchContext+0xd0>)
  402afc:	588a      	ldr	r2, [r1, r2]
  402afe:	b9ba      	cbnz	r2, 402b30 <vTaskSwitchContext+0x7c>
	__asm volatile
  402b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b04:	b672      	cpsid	i
  402b06:	f383 8811 	msr	BASEPRI, r3
  402b0a:	f3bf 8f6f 	isb	sy
  402b0e:	f3bf 8f4f 	dsb	sy
  402b12:	b662      	cpsie	i
  402b14:	e7fe      	b.n	402b14 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402b16:	2201      	movs	r2, #1
  402b18:	4b16      	ldr	r3, [pc, #88]	; (402b74 <vTaskSwitchContext+0xc0>)
  402b1a:	601a      	str	r2, [r3, #0]
  402b1c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402b1e:	689a      	ldr	r2, [r3, #8]
  402b20:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402b24:	d1d9      	bne.n	402ada <vTaskSwitchContext+0x26>
  402b26:	68db      	ldr	r3, [r3, #12]
  402b28:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402b2c:	d1d5      	bne.n	402ada <vTaskSwitchContext+0x26>
  402b2e:	e7da      	b.n	402ae6 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402b30:	4814      	ldr	r0, [pc, #80]	; (402b84 <vTaskSwitchContext+0xd0>)
  402b32:	009a      	lsls	r2, r3, #2
  402b34:	18d4      	adds	r4, r2, r3
  402b36:	00a1      	lsls	r1, r4, #2
  402b38:	4401      	add	r1, r0
  402b3a:	684c      	ldr	r4, [r1, #4]
  402b3c:	6864      	ldr	r4, [r4, #4]
  402b3e:	604c      	str	r4, [r1, #4]
  402b40:	441a      	add	r2, r3
  402b42:	0091      	lsls	r1, r2, #2
  402b44:	3108      	adds	r1, #8
  402b46:	4408      	add	r0, r1
  402b48:	4284      	cmp	r4, r0
  402b4a:	d009      	beq.n	402b60 <vTaskSwitchContext+0xac>
  402b4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b50:	009a      	lsls	r2, r3, #2
  402b52:	4b0c      	ldr	r3, [pc, #48]	; (402b84 <vTaskSwitchContext+0xd0>)
  402b54:	4413      	add	r3, r2
  402b56:	685b      	ldr	r3, [r3, #4]
  402b58:	68da      	ldr	r2, [r3, #12]
  402b5a:	4b07      	ldr	r3, [pc, #28]	; (402b78 <vTaskSwitchContext+0xc4>)
  402b5c:	601a      	str	r2, [r3, #0]
  402b5e:	bd10      	pop	{r4, pc}
  402b60:	6860      	ldr	r0, [r4, #4]
  402b62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402b66:	0091      	lsls	r1, r2, #2
  402b68:	4a06      	ldr	r2, [pc, #24]	; (402b84 <vTaskSwitchContext+0xd0>)
  402b6a:	440a      	add	r2, r1
  402b6c:	6050      	str	r0, [r2, #4]
  402b6e:	e7ed      	b.n	402b4c <vTaskSwitchContext+0x98>
  402b70:	2040c2cc 	.word	0x2040c2cc
  402b74:	2040c350 	.word	0x2040c350
  402b78:	2040c254 	.word	0x2040c254
  402b7c:	00421b85 	.word	0x00421b85
  402b80:	2040c2d8 	.word	0x2040c2d8
  402b84:	2040c260 	.word	0x2040c260

00402b88 <vTaskPlaceOnEventList>:
{
  402b88:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402b8a:	b1e8      	cbz	r0, 402bc8 <vTaskPlaceOnEventList+0x40>
  402b8c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402b8e:	4d17      	ldr	r5, [pc, #92]	; (402bec <vTaskPlaceOnEventList+0x64>)
  402b90:	6829      	ldr	r1, [r5, #0]
  402b92:	3118      	adds	r1, #24
  402b94:	4b16      	ldr	r3, [pc, #88]	; (402bf0 <vTaskPlaceOnEventList+0x68>)
  402b96:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b98:	6828      	ldr	r0, [r5, #0]
  402b9a:	3004      	adds	r0, #4
  402b9c:	4b15      	ldr	r3, [pc, #84]	; (402bf4 <vTaskPlaceOnEventList+0x6c>)
  402b9e:	4798      	blx	r3
  402ba0:	b948      	cbnz	r0, 402bb6 <vTaskPlaceOnEventList+0x2e>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402ba2:	682b      	ldr	r3, [r5, #0]
  402ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402ba6:	2301      	movs	r3, #1
  402ba8:	fa03 f202 	lsl.w	r2, r3, r2
  402bac:	4912      	ldr	r1, [pc, #72]	; (402bf8 <vTaskPlaceOnEventList+0x70>)
  402bae:	680b      	ldr	r3, [r1, #0]
  402bb0:	ea23 0302 	bic.w	r3, r3, r2
  402bb4:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402bb6:	f1b4 3fff 	cmp.w	r4, #4294967295
  402bba:	d010      	beq.n	402bde <vTaskPlaceOnEventList+0x56>
			xTimeToWake = xTickCount + xTicksToWait;
  402bbc:	4b0f      	ldr	r3, [pc, #60]	; (402bfc <vTaskPlaceOnEventList+0x74>)
  402bbe:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402bc0:	4420      	add	r0, r4
  402bc2:	4b0f      	ldr	r3, [pc, #60]	; (402c00 <vTaskPlaceOnEventList+0x78>)
  402bc4:	4798      	blx	r3
  402bc6:	bd38      	pop	{r3, r4, r5, pc}
  402bc8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402bcc:	b672      	cpsid	i
  402bce:	f383 8811 	msr	BASEPRI, r3
  402bd2:	f3bf 8f6f 	isb	sy
  402bd6:	f3bf 8f4f 	dsb	sy
  402bda:	b662      	cpsie	i
  402bdc:	e7fe      	b.n	402bdc <vTaskPlaceOnEventList+0x54>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402bde:	4b03      	ldr	r3, [pc, #12]	; (402bec <vTaskPlaceOnEventList+0x64>)
  402be0:	6819      	ldr	r1, [r3, #0]
  402be2:	3104      	adds	r1, #4
  402be4:	4807      	ldr	r0, [pc, #28]	; (402c04 <vTaskPlaceOnEventList+0x7c>)
  402be6:	4b08      	ldr	r3, [pc, #32]	; (402c08 <vTaskPlaceOnEventList+0x80>)
  402be8:	4798      	blx	r3
  402bea:	bd38      	pop	{r3, r4, r5, pc}
  402bec:	2040c254 	.word	0x2040c254
  402bf0:	00401629 	.word	0x00401629
  402bf4:	0040165d 	.word	0x0040165d
  402bf8:	2040c2d8 	.word	0x2040c2d8
  402bfc:	2040c34c 	.word	0x2040c34c
  402c00:	004024cd 	.word	0x004024cd
  402c04:	2040c324 	.word	0x2040c324
  402c08:	00401611 	.word	0x00401611

00402c0c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402c0c:	b1f0      	cbz	r0, 402c4c <vTaskPlaceOnEventListRestricted+0x40>
	{
  402c0e:	b570      	push	{r4, r5, r6, lr}
  402c10:	4615      	mov	r5, r2
  402c12:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402c14:	4e16      	ldr	r6, [pc, #88]	; (402c70 <vTaskPlaceOnEventListRestricted+0x64>)
  402c16:	6831      	ldr	r1, [r6, #0]
  402c18:	3118      	adds	r1, #24
  402c1a:	4b16      	ldr	r3, [pc, #88]	; (402c74 <vTaskPlaceOnEventListRestricted+0x68>)
  402c1c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c1e:	6830      	ldr	r0, [r6, #0]
  402c20:	3004      	adds	r0, #4
  402c22:	4b15      	ldr	r3, [pc, #84]	; (402c78 <vTaskPlaceOnEventListRestricted+0x6c>)
  402c24:	4798      	blx	r3
  402c26:	b948      	cbnz	r0, 402c3c <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402c28:	6833      	ldr	r3, [r6, #0]
  402c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402c2c:	2301      	movs	r3, #1
  402c2e:	fa03 f202 	lsl.w	r2, r3, r2
  402c32:	4912      	ldr	r1, [pc, #72]	; (402c7c <vTaskPlaceOnEventListRestricted+0x70>)
  402c34:	680b      	ldr	r3, [r1, #0]
  402c36:	ea23 0302 	bic.w	r3, r3, r2
  402c3a:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402c3c:	2d01      	cmp	r5, #1
  402c3e:	d010      	beq.n	402c62 <vTaskPlaceOnEventListRestricted+0x56>
				xTimeToWake = xTickCount + xTicksToWait;
  402c40:	4b0f      	ldr	r3, [pc, #60]	; (402c80 <vTaskPlaceOnEventListRestricted+0x74>)
  402c42:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402c44:	4420      	add	r0, r4
  402c46:	4b0f      	ldr	r3, [pc, #60]	; (402c84 <vTaskPlaceOnEventListRestricted+0x78>)
  402c48:	4798      	blx	r3
  402c4a:	bd70      	pop	{r4, r5, r6, pc}
  402c4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c50:	b672      	cpsid	i
  402c52:	f383 8811 	msr	BASEPRI, r3
  402c56:	f3bf 8f6f 	isb	sy
  402c5a:	f3bf 8f4f 	dsb	sy
  402c5e:	b662      	cpsie	i
  402c60:	e7fe      	b.n	402c60 <vTaskPlaceOnEventListRestricted+0x54>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402c62:	4b03      	ldr	r3, [pc, #12]	; (402c70 <vTaskPlaceOnEventListRestricted+0x64>)
  402c64:	6819      	ldr	r1, [r3, #0]
  402c66:	3104      	adds	r1, #4
  402c68:	4807      	ldr	r0, [pc, #28]	; (402c88 <vTaskPlaceOnEventListRestricted+0x7c>)
  402c6a:	4b02      	ldr	r3, [pc, #8]	; (402c74 <vTaskPlaceOnEventListRestricted+0x68>)
  402c6c:	4798      	blx	r3
  402c6e:	bd70      	pop	{r4, r5, r6, pc}
  402c70:	2040c254 	.word	0x2040c254
  402c74:	00401611 	.word	0x00401611
  402c78:	0040165d 	.word	0x0040165d
  402c7c:	2040c2d8 	.word	0x2040c2d8
  402c80:	2040c34c 	.word	0x2040c34c
  402c84:	004024cd 	.word	0x004024cd
  402c88:	2040c324 	.word	0x2040c324

00402c8c <xTaskRemoveFromEventList>:
{
  402c8c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402c8e:	68c3      	ldr	r3, [r0, #12]
  402c90:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402c92:	b324      	cbz	r4, 402cde <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402c94:	f104 0518 	add.w	r5, r4, #24
  402c98:	4628      	mov	r0, r5
  402c9a:	4b1a      	ldr	r3, [pc, #104]	; (402d04 <xTaskRemoveFromEventList+0x78>)
  402c9c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402c9e:	4b1a      	ldr	r3, [pc, #104]	; (402d08 <xTaskRemoveFromEventList+0x7c>)
  402ca0:	681b      	ldr	r3, [r3, #0]
  402ca2:	bb3b      	cbnz	r3, 402cf4 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402ca4:	1d25      	adds	r5, r4, #4
  402ca6:	4628      	mov	r0, r5
  402ca8:	4b16      	ldr	r3, [pc, #88]	; (402d04 <xTaskRemoveFromEventList+0x78>)
  402caa:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402cac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402cae:	2201      	movs	r2, #1
  402cb0:	409a      	lsls	r2, r3
  402cb2:	4916      	ldr	r1, [pc, #88]	; (402d0c <xTaskRemoveFromEventList+0x80>)
  402cb4:	6808      	ldr	r0, [r1, #0]
  402cb6:	4302      	orrs	r2, r0
  402cb8:	600a      	str	r2, [r1, #0]
  402cba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402cbe:	009a      	lsls	r2, r3, #2
  402cc0:	4629      	mov	r1, r5
  402cc2:	4813      	ldr	r0, [pc, #76]	; (402d10 <xTaskRemoveFromEventList+0x84>)
  402cc4:	4410      	add	r0, r2
  402cc6:	4b13      	ldr	r3, [pc, #76]	; (402d14 <xTaskRemoveFromEventList+0x88>)
  402cc8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402cca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402ccc:	4b12      	ldr	r3, [pc, #72]	; (402d18 <xTaskRemoveFromEventList+0x8c>)
  402cce:	681b      	ldr	r3, [r3, #0]
  402cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cd2:	429a      	cmp	r2, r3
  402cd4:	d913      	bls.n	402cfe <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402cd6:	2001      	movs	r0, #1
  402cd8:	4b10      	ldr	r3, [pc, #64]	; (402d1c <xTaskRemoveFromEventList+0x90>)
  402cda:	6018      	str	r0, [r3, #0]
  402cdc:	bd38      	pop	{r3, r4, r5, pc}
  402cde:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ce2:	b672      	cpsid	i
  402ce4:	f383 8811 	msr	BASEPRI, r3
  402ce8:	f3bf 8f6f 	isb	sy
  402cec:	f3bf 8f4f 	dsb	sy
  402cf0:	b662      	cpsie	i
  402cf2:	e7fe      	b.n	402cf2 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402cf4:	4629      	mov	r1, r5
  402cf6:	480a      	ldr	r0, [pc, #40]	; (402d20 <xTaskRemoveFromEventList+0x94>)
  402cf8:	4b06      	ldr	r3, [pc, #24]	; (402d14 <xTaskRemoveFromEventList+0x88>)
  402cfa:	4798      	blx	r3
  402cfc:	e7e5      	b.n	402cca <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402cfe:	2000      	movs	r0, #0
}
  402d00:	bd38      	pop	{r3, r4, r5, pc}
  402d02:	bf00      	nop
  402d04:	0040165d 	.word	0x0040165d
  402d08:	2040c2cc 	.word	0x2040c2cc
  402d0c:	2040c2d8 	.word	0x2040c2d8
  402d10:	2040c260 	.word	0x2040c260
  402d14:	00401611 	.word	0x00401611
  402d18:	2040c254 	.word	0x2040c254
  402d1c:	2040c350 	.word	0x2040c350
  402d20:	2040c30c 	.word	0x2040c30c

00402d24 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402d24:	b130      	cbz	r0, 402d34 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402d26:	4a09      	ldr	r2, [pc, #36]	; (402d4c <vTaskSetTimeOutState+0x28>)
  402d28:	6812      	ldr	r2, [r2, #0]
  402d2a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402d2c:	4a08      	ldr	r2, [pc, #32]	; (402d50 <vTaskSetTimeOutState+0x2c>)
  402d2e:	6812      	ldr	r2, [r2, #0]
  402d30:	6042      	str	r2, [r0, #4]
  402d32:	4770      	bx	lr
  402d34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d38:	b672      	cpsid	i
  402d3a:	f383 8811 	msr	BASEPRI, r3
  402d3e:	f3bf 8f6f 	isb	sy
  402d42:	f3bf 8f4f 	dsb	sy
  402d46:	b662      	cpsie	i
  402d48:	e7fe      	b.n	402d48 <vTaskSetTimeOutState+0x24>
  402d4a:	bf00      	nop
  402d4c:	2040c308 	.word	0x2040c308
  402d50:	2040c34c 	.word	0x2040c34c

00402d54 <xTaskCheckForTimeOut>:
{
  402d54:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402d56:	b1c0      	cbz	r0, 402d8a <xTaskCheckForTimeOut+0x36>
  402d58:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402d5a:	b309      	cbz	r1, 402da0 <xTaskCheckForTimeOut+0x4c>
  402d5c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402d5e:	4b1d      	ldr	r3, [pc, #116]	; (402dd4 <xTaskCheckForTimeOut+0x80>)
  402d60:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402d62:	4b1d      	ldr	r3, [pc, #116]	; (402dd8 <xTaskCheckForTimeOut+0x84>)
  402d64:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402d66:	682b      	ldr	r3, [r5, #0]
  402d68:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d6c:	d02e      	beq.n	402dcc <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402d6e:	6820      	ldr	r0, [r4, #0]
  402d70:	4a1a      	ldr	r2, [pc, #104]	; (402ddc <xTaskCheckForTimeOut+0x88>)
  402d72:	6812      	ldr	r2, [r2, #0]
  402d74:	4290      	cmp	r0, r2
  402d76:	d002      	beq.n	402d7e <xTaskCheckForTimeOut+0x2a>
  402d78:	6862      	ldr	r2, [r4, #4]
  402d7a:	4291      	cmp	r1, r2
  402d7c:	d228      	bcs.n	402dd0 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402d7e:	6862      	ldr	r2, [r4, #4]
  402d80:	1a88      	subs	r0, r1, r2
  402d82:	4283      	cmp	r3, r0
  402d84:	d817      	bhi.n	402db6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402d86:	2401      	movs	r4, #1
  402d88:	e01c      	b.n	402dc4 <xTaskCheckForTimeOut+0x70>
  402d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d8e:	b672      	cpsid	i
  402d90:	f383 8811 	msr	BASEPRI, r3
  402d94:	f3bf 8f6f 	isb	sy
  402d98:	f3bf 8f4f 	dsb	sy
  402d9c:	b662      	cpsie	i
  402d9e:	e7fe      	b.n	402d9e <xTaskCheckForTimeOut+0x4a>
  402da0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402da4:	b672      	cpsid	i
  402da6:	f383 8811 	msr	BASEPRI, r3
  402daa:	f3bf 8f6f 	isb	sy
  402dae:	f3bf 8f4f 	dsb	sy
  402db2:	b662      	cpsie	i
  402db4:	e7fe      	b.n	402db4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402db6:	1a52      	subs	r2, r2, r1
  402db8:	4413      	add	r3, r2
  402dba:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402dbc:	4620      	mov	r0, r4
  402dbe:	4b08      	ldr	r3, [pc, #32]	; (402de0 <xTaskCheckForTimeOut+0x8c>)
  402dc0:	4798      	blx	r3
			xReturn = pdFALSE;
  402dc2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402dc4:	4b07      	ldr	r3, [pc, #28]	; (402de4 <xTaskCheckForTimeOut+0x90>)
  402dc6:	4798      	blx	r3
}
  402dc8:	4620      	mov	r0, r4
  402dca:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402dcc:	2400      	movs	r4, #0
  402dce:	e7f9      	b.n	402dc4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402dd0:	2401      	movs	r4, #1
  402dd2:	e7f7      	b.n	402dc4 <xTaskCheckForTimeOut+0x70>
  402dd4:	00401741 	.word	0x00401741
  402dd8:	2040c34c 	.word	0x2040c34c
  402ddc:	2040c308 	.word	0x2040c308
  402de0:	00402d25 	.word	0x00402d25
  402de4:	0040178d 	.word	0x0040178d

00402de8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402de8:	2201      	movs	r2, #1
  402dea:	4b01      	ldr	r3, [pc, #4]	; (402df0 <vTaskMissedYield+0x8>)
  402dec:	601a      	str	r2, [r3, #0]
  402dee:	4770      	bx	lr
  402df0:	2040c350 	.word	0x2040c350

00402df4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402df4:	4b05      	ldr	r3, [pc, #20]	; (402e0c <xTaskGetSchedulerState+0x18>)
  402df6:	681b      	ldr	r3, [r3, #0]
  402df8:	b123      	cbz	r3, 402e04 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402dfa:	4b05      	ldr	r3, [pc, #20]	; (402e10 <xTaskGetSchedulerState+0x1c>)
  402dfc:	681b      	ldr	r3, [r3, #0]
  402dfe:	b91b      	cbnz	r3, 402e08 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402e00:	2002      	movs	r0, #2
  402e02:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402e04:	2001      	movs	r0, #1
  402e06:	4770      	bx	lr
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402e08:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  402e0a:	4770      	bx	lr
  402e0c:	2040c320 	.word	0x2040c320
  402e10:	2040c2cc 	.word	0x2040c2cc

00402e14 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402e14:	2800      	cmp	r0, #0
  402e16:	d047      	beq.n	402ea8 <vTaskPriorityInherit+0x94>
	{
  402e18:	b538      	push	{r3, r4, r5, lr}
  402e1a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402e1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402e1e:	4923      	ldr	r1, [pc, #140]	; (402eac <vTaskPriorityInherit+0x98>)
  402e20:	6809      	ldr	r1, [r1, #0]
  402e22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e24:	428b      	cmp	r3, r1
  402e26:	d216      	bcs.n	402e56 <vTaskPriorityInherit+0x42>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402e28:	6981      	ldr	r1, [r0, #24]
  402e2a:	2900      	cmp	r1, #0
  402e2c:	db05      	blt.n	402e3a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e2e:	491f      	ldr	r1, [pc, #124]	; (402eac <vTaskPriorityInherit+0x98>)
  402e30:	6809      	ldr	r1, [r1, #0]
  402e32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e34:	f1c1 0105 	rsb	r1, r1, #5
  402e38:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402e3a:	6960      	ldr	r0, [r4, #20]
  402e3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e40:	0099      	lsls	r1, r3, #2
  402e42:	4b1b      	ldr	r3, [pc, #108]	; (402eb0 <vTaskPriorityInherit+0x9c>)
  402e44:	440b      	add	r3, r1
  402e46:	4298      	cmp	r0, r3
  402e48:	d006      	beq.n	402e58 <vTaskPriorityInherit+0x44>
  402e4a:	2300      	movs	r3, #0
  402e4c:	b933      	cbnz	r3, 402e5c <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e4e:	4b17      	ldr	r3, [pc, #92]	; (402eac <vTaskPriorityInherit+0x98>)
  402e50:	681b      	ldr	r3, [r3, #0]
  402e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e54:	62e3      	str	r3, [r4, #44]	; 0x2c
  402e56:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402e58:	2301      	movs	r3, #1
  402e5a:	e7f7      	b.n	402e4c <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402e5c:	1d25      	adds	r5, r4, #4
  402e5e:	4628      	mov	r0, r5
  402e60:	4b14      	ldr	r3, [pc, #80]	; (402eb4 <vTaskPriorityInherit+0xa0>)
  402e62:	4798      	blx	r3
  402e64:	b968      	cbnz	r0, 402e82 <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402e68:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402e6c:	008a      	lsls	r2, r1, #2
  402e6e:	4910      	ldr	r1, [pc, #64]	; (402eb0 <vTaskPriorityInherit+0x9c>)
  402e70:	588a      	ldr	r2, [r1, r2]
  402e72:	b932      	cbnz	r2, 402e82 <vTaskPriorityInherit+0x6e>
  402e74:	2201      	movs	r2, #1
  402e76:	409a      	lsls	r2, r3
  402e78:	490f      	ldr	r1, [pc, #60]	; (402eb8 <vTaskPriorityInherit+0xa4>)
  402e7a:	680b      	ldr	r3, [r1, #0]
  402e7c:	ea23 0302 	bic.w	r3, r3, r2
  402e80:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e82:	4b0a      	ldr	r3, [pc, #40]	; (402eac <vTaskPriorityInherit+0x98>)
  402e84:	681b      	ldr	r3, [r3, #0]
  402e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402e88:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402e8a:	2201      	movs	r2, #1
  402e8c:	409a      	lsls	r2, r3
  402e8e:	490a      	ldr	r1, [pc, #40]	; (402eb8 <vTaskPriorityInherit+0xa4>)
  402e90:	6808      	ldr	r0, [r1, #0]
  402e92:	4302      	orrs	r2, r0
  402e94:	600a      	str	r2, [r1, #0]
  402e96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e9a:	009a      	lsls	r2, r3, #2
  402e9c:	4629      	mov	r1, r5
  402e9e:	4804      	ldr	r0, [pc, #16]	; (402eb0 <vTaskPriorityInherit+0x9c>)
  402ea0:	4410      	add	r0, r2
  402ea2:	4b06      	ldr	r3, [pc, #24]	; (402ebc <vTaskPriorityInherit+0xa8>)
  402ea4:	4798      	blx	r3
  402ea6:	bd38      	pop	{r3, r4, r5, pc}
  402ea8:	4770      	bx	lr
  402eaa:	bf00      	nop
  402eac:	2040c254 	.word	0x2040c254
  402eb0:	2040c260 	.word	0x2040c260
  402eb4:	0040165d 	.word	0x0040165d
  402eb8:	2040c2d8 	.word	0x2040c2d8
  402ebc:	00401611 	.word	0x00401611

00402ec0 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402ec0:	2800      	cmp	r0, #0
  402ec2:	d04f      	beq.n	402f64 <xTaskPriorityDisinherit+0xa4>
	{
  402ec4:	b538      	push	{r3, r4, r5, lr}
  402ec6:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402ec8:	4a29      	ldr	r2, [pc, #164]	; (402f70 <xTaskPriorityDisinherit+0xb0>)
  402eca:	6812      	ldr	r2, [r2, #0]
  402ecc:	4290      	cmp	r0, r2
  402ece:	d00a      	beq.n	402ee6 <xTaskPriorityDisinherit+0x26>
  402ed0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed4:	b672      	cpsid	i
  402ed6:	f383 8811 	msr	BASEPRI, r3
  402eda:	f3bf 8f6f 	isb	sy
  402ede:	f3bf 8f4f 	dsb	sy
  402ee2:	b662      	cpsie	i
  402ee4:	e7fe      	b.n	402ee4 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402ee6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402ee8:	b952      	cbnz	r2, 402f00 <xTaskPriorityDisinherit+0x40>
  402eea:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eee:	b672      	cpsid	i
  402ef0:	f383 8811 	msr	BASEPRI, r3
  402ef4:	f3bf 8f6f 	isb	sy
  402ef8:	f3bf 8f4f 	dsb	sy
  402efc:	b662      	cpsie	i
  402efe:	e7fe      	b.n	402efe <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402f00:	3a01      	subs	r2, #1
  402f02:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402f04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402f06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  402f08:	4288      	cmp	r0, r1
  402f0a:	d02d      	beq.n	402f68 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402f0c:	2a00      	cmp	r2, #0
  402f0e:	d12d      	bne.n	402f6c <xTaskPriorityDisinherit+0xac>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402f10:	1d25      	adds	r5, r4, #4
  402f12:	4628      	mov	r0, r5
  402f14:	4b17      	ldr	r3, [pc, #92]	; (402f74 <xTaskPriorityDisinherit+0xb4>)
  402f16:	4798      	blx	r3
  402f18:	b970      	cbnz	r0, 402f38 <xTaskPriorityDisinherit+0x78>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402f1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402f1c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402f20:	008b      	lsls	r3, r1, #2
  402f22:	4915      	ldr	r1, [pc, #84]	; (402f78 <xTaskPriorityDisinherit+0xb8>)
  402f24:	58cb      	ldr	r3, [r1, r3]
  402f26:	b93b      	cbnz	r3, 402f38 <xTaskPriorityDisinherit+0x78>
  402f28:	2301      	movs	r3, #1
  402f2a:	fa03 f202 	lsl.w	r2, r3, r2
  402f2e:	4913      	ldr	r1, [pc, #76]	; (402f7c <xTaskPriorityDisinherit+0xbc>)
  402f30:	680b      	ldr	r3, [r1, #0]
  402f32:	ea23 0302 	bic.w	r3, r3, r2
  402f36:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402f38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402f3a:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402f3c:	f1c3 0205 	rsb	r2, r3, #5
  402f40:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402f42:	2401      	movs	r4, #1
  402f44:	fa04 f203 	lsl.w	r2, r4, r3
  402f48:	490c      	ldr	r1, [pc, #48]	; (402f7c <xTaskPriorityDisinherit+0xbc>)
  402f4a:	6808      	ldr	r0, [r1, #0]
  402f4c:	4302      	orrs	r2, r0
  402f4e:	600a      	str	r2, [r1, #0]
  402f50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402f54:	009a      	lsls	r2, r3, #2
  402f56:	4629      	mov	r1, r5
  402f58:	4807      	ldr	r0, [pc, #28]	; (402f78 <xTaskPriorityDisinherit+0xb8>)
  402f5a:	4410      	add	r0, r2
  402f5c:	4b08      	ldr	r3, [pc, #32]	; (402f80 <xTaskPriorityDisinherit+0xc0>)
  402f5e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402f60:	4620      	mov	r0, r4
  402f62:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402f64:	2000      	movs	r0, #0
  402f66:	4770      	bx	lr
  402f68:	2000      	movs	r0, #0
  402f6a:	bd38      	pop	{r3, r4, r5, pc}
  402f6c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402f6e:	bd38      	pop	{r3, r4, r5, pc}
  402f70:	2040c254 	.word	0x2040c254
  402f74:	0040165d 	.word	0x0040165d
  402f78:	2040c260 	.word	0x2040c260
  402f7c:	2040c2d8 	.word	0x2040c2d8
  402f80:	00401611 	.word	0x00401611

00402f84 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402f84:	4b05      	ldr	r3, [pc, #20]	; (402f9c <pvTaskIncrementMutexHeldCount+0x18>)
  402f86:	681b      	ldr	r3, [r3, #0]
  402f88:	b123      	cbz	r3, 402f94 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402f8a:	4b04      	ldr	r3, [pc, #16]	; (402f9c <pvTaskIncrementMutexHeldCount+0x18>)
  402f8c:	681a      	ldr	r2, [r3, #0]
  402f8e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402f90:	3301      	adds	r3, #1
  402f92:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402f94:	4b01      	ldr	r3, [pc, #4]	; (402f9c <pvTaskIncrementMutexHeldCount+0x18>)
  402f96:	6818      	ldr	r0, [r3, #0]
	}
  402f98:	4770      	bx	lr
  402f9a:	bf00      	nop
  402f9c:	2040c254 	.word	0x2040c254

00402fa0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402fa0:	4b06      	ldr	r3, [pc, #24]	; (402fbc <prvGetNextExpireTime+0x1c>)
  402fa2:	681a      	ldr	r2, [r3, #0]
  402fa4:	6813      	ldr	r3, [r2, #0]
  402fa6:	fab3 f383 	clz	r3, r3
  402faa:	095b      	lsrs	r3, r3, #5
  402fac:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  402fae:	b913      	cbnz	r3, 402fb6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fb0:	68d3      	ldr	r3, [r2, #12]
  402fb2:	6818      	ldr	r0, [r3, #0]
  402fb4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402fb6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  402fb8:	4770      	bx	lr
  402fba:	bf00      	nop
  402fbc:	2040c354 	.word	0x2040c354

00402fc0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402fc0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402fc2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402fc4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402fc6:	4291      	cmp	r1, r2
  402fc8:	d80c      	bhi.n	402fe4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402fca:	1ad2      	subs	r2, r2, r3
  402fcc:	6983      	ldr	r3, [r0, #24]
  402fce:	429a      	cmp	r2, r3
  402fd0:	d301      	bcc.n	402fd6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402fd2:	2001      	movs	r0, #1
  402fd4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402fd6:	1d01      	adds	r1, r0, #4
  402fd8:	4b0b      	ldr	r3, [pc, #44]	; (403008 <prvInsertTimerInActiveList+0x48>)
  402fda:	6818      	ldr	r0, [r3, #0]
  402fdc:	4b0b      	ldr	r3, [pc, #44]	; (40300c <prvInsertTimerInActiveList+0x4c>)
  402fde:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402fe0:	2000      	movs	r0, #0
  402fe2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402fe4:	429a      	cmp	r2, r3
  402fe6:	bf2c      	ite	cs
  402fe8:	2200      	movcs	r2, #0
  402fea:	2201      	movcc	r2, #1
  402fec:	4299      	cmp	r1, r3
  402fee:	bf38      	it	cc
  402ff0:	2200      	movcc	r2, #0
  402ff2:	b10a      	cbz	r2, 402ff8 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402ff4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402ff6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402ff8:	1d01      	adds	r1, r0, #4
  402ffa:	4b05      	ldr	r3, [pc, #20]	; (403010 <prvInsertTimerInActiveList+0x50>)
  402ffc:	6818      	ldr	r0, [r3, #0]
  402ffe:	4b03      	ldr	r3, [pc, #12]	; (40300c <prvInsertTimerInActiveList+0x4c>)
  403000:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403002:	2000      	movs	r0, #0
  403004:	bd08      	pop	{r3, pc}
  403006:	bf00      	nop
  403008:	2040c358 	.word	0x2040c358
  40300c:	00401629 	.word	0x00401629
  403010:	2040c354 	.word	0x2040c354

00403014 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403014:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403016:	4b15      	ldr	r3, [pc, #84]	; (40306c <prvCheckForValidListAndQueue+0x58>)
  403018:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40301a:	4b15      	ldr	r3, [pc, #84]	; (403070 <prvCheckForValidListAndQueue+0x5c>)
  40301c:	681b      	ldr	r3, [r3, #0]
  40301e:	b113      	cbz	r3, 403026 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403020:	4b14      	ldr	r3, [pc, #80]	; (403074 <prvCheckForValidListAndQueue+0x60>)
  403022:	4798      	blx	r3
  403024:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403026:	4d14      	ldr	r5, [pc, #80]	; (403078 <prvCheckForValidListAndQueue+0x64>)
  403028:	4628      	mov	r0, r5
  40302a:	4e14      	ldr	r6, [pc, #80]	; (40307c <prvCheckForValidListAndQueue+0x68>)
  40302c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40302e:	4c14      	ldr	r4, [pc, #80]	; (403080 <prvCheckForValidListAndQueue+0x6c>)
  403030:	4620      	mov	r0, r4
  403032:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403034:	4b13      	ldr	r3, [pc, #76]	; (403084 <prvCheckForValidListAndQueue+0x70>)
  403036:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403038:	4b13      	ldr	r3, [pc, #76]	; (403088 <prvCheckForValidListAndQueue+0x74>)
  40303a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40303c:	2200      	movs	r2, #0
  40303e:	2110      	movs	r1, #16
  403040:	2005      	movs	r0, #5
  403042:	4b12      	ldr	r3, [pc, #72]	; (40308c <prvCheckForValidListAndQueue+0x78>)
  403044:	4798      	blx	r3
  403046:	4b0a      	ldr	r3, [pc, #40]	; (403070 <prvCheckForValidListAndQueue+0x5c>)
  403048:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40304a:	b118      	cbz	r0, 403054 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40304c:	4910      	ldr	r1, [pc, #64]	; (403090 <prvCheckForValidListAndQueue+0x7c>)
  40304e:	4b11      	ldr	r3, [pc, #68]	; (403094 <prvCheckForValidListAndQueue+0x80>)
  403050:	4798      	blx	r3
  403052:	e7e5      	b.n	403020 <prvCheckForValidListAndQueue+0xc>
  403054:	f04f 0380 	mov.w	r3, #128	; 0x80
  403058:	b672      	cpsid	i
  40305a:	f383 8811 	msr	BASEPRI, r3
  40305e:	f3bf 8f6f 	isb	sy
  403062:	f3bf 8f4f 	dsb	sy
  403066:	b662      	cpsie	i
  403068:	e7fe      	b.n	403068 <prvCheckForValidListAndQueue+0x54>
  40306a:	bf00      	nop
  40306c:	00401741 	.word	0x00401741
  403070:	2040c388 	.word	0x2040c388
  403074:	0040178d 	.word	0x0040178d
  403078:	2040c35c 	.word	0x2040c35c
  40307c:	004015f5 	.word	0x004015f5
  403080:	2040c370 	.word	0x2040c370
  403084:	2040c354 	.word	0x2040c354
  403088:	2040c358 	.word	0x2040c358
  40308c:	00401ccd 	.word	0x00401ccd
  403090:	00428c84 	.word	0x00428c84
  403094:	00402309 	.word	0x00402309

00403098 <xTimerCreateTimerTask>:
{
  403098:	b510      	push	{r4, lr}
  40309a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  40309c:	4b10      	ldr	r3, [pc, #64]	; (4030e0 <xTimerCreateTimerTask+0x48>)
  40309e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4030a0:	4b10      	ldr	r3, [pc, #64]	; (4030e4 <xTimerCreateTimerTask+0x4c>)
  4030a2:	681b      	ldr	r3, [r3, #0]
  4030a4:	b1bb      	cbz	r3, 4030d6 <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4030a6:	2300      	movs	r3, #0
  4030a8:	9303      	str	r3, [sp, #12]
  4030aa:	9302      	str	r3, [sp, #8]
  4030ac:	9301      	str	r3, [sp, #4]
  4030ae:	2204      	movs	r2, #4
  4030b0:	9200      	str	r2, [sp, #0]
  4030b2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4030b6:	490c      	ldr	r1, [pc, #48]	; (4030e8 <xTimerCreateTimerTask+0x50>)
  4030b8:	480c      	ldr	r0, [pc, #48]	; (4030ec <xTimerCreateTimerTask+0x54>)
  4030ba:	4c0d      	ldr	r4, [pc, #52]	; (4030f0 <xTimerCreateTimerTask+0x58>)
  4030bc:	47a0      	blx	r4
	configASSERT( xReturn );
  4030be:	b960      	cbnz	r0, 4030da <xTimerCreateTimerTask+0x42>
  4030c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030c4:	b672      	cpsid	i
  4030c6:	f383 8811 	msr	BASEPRI, r3
  4030ca:	f3bf 8f6f 	isb	sy
  4030ce:	f3bf 8f4f 	dsb	sy
  4030d2:	b662      	cpsie	i
  4030d4:	e7fe      	b.n	4030d4 <xTimerCreateTimerTask+0x3c>
BaseType_t xReturn = pdFAIL;
  4030d6:	2000      	movs	r0, #0
  4030d8:	e7f1      	b.n	4030be <xTimerCreateTimerTask+0x26>
}
  4030da:	b004      	add	sp, #16
  4030dc:	bd10      	pop	{r4, pc}
  4030de:	bf00      	nop
  4030e0:	00403015 	.word	0x00403015
  4030e4:	2040c388 	.word	0x2040c388
  4030e8:	00428c8c 	.word	0x00428c8c
  4030ec:	0040349d 	.word	0x0040349d
  4030f0:	00402525 	.word	0x00402525

004030f4 <xTimerCreate>:
{
  4030f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  4030f8:	460d      	mov	r5, r1
  4030fa:	b1f9      	cbz	r1, 40313c <xTimerCreate+0x48>
  4030fc:	4680      	mov	r8, r0
  4030fe:	4617      	mov	r7, r2
  403100:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  403102:	202c      	movs	r0, #44	; 0x2c
  403104:	4b10      	ldr	r3, [pc, #64]	; (403148 <xTimerCreate+0x54>)
  403106:	4798      	blx	r3
		if( pxNewTimer != NULL )
  403108:	4604      	mov	r4, r0
  40310a:	b158      	cbz	r0, 403124 <xTimerCreate+0x30>
			prvCheckForValidListAndQueue();
  40310c:	4b0f      	ldr	r3, [pc, #60]	; (40314c <xTimerCreate+0x58>)
  40310e:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  403110:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  403114:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  403116:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  403118:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  40311a:	9b06      	ldr	r3, [sp, #24]
  40311c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  40311e:	1d20      	adds	r0, r4, #4
  403120:	4b0b      	ldr	r3, [pc, #44]	; (403150 <xTimerCreate+0x5c>)
  403122:	4798      	blx	r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
  403124:	b965      	cbnz	r5, 403140 <xTimerCreate+0x4c>
  403126:	f04f 0380 	mov.w	r3, #128	; 0x80
  40312a:	b672      	cpsid	i
  40312c:	f383 8811 	msr	BASEPRI, r3
  403130:	f3bf 8f6f 	isb	sy
  403134:	f3bf 8f4f 	dsb	sy
  403138:	b662      	cpsie	i
  40313a:	e7fe      	b.n	40313a <xTimerCreate+0x46>
		pxNewTimer = NULL;
  40313c:	2400      	movs	r4, #0
  40313e:	e7f1      	b.n	403124 <xTimerCreate+0x30>
}
  403140:	4620      	mov	r0, r4
  403142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403146:	bf00      	nop
  403148:	00401991 	.word	0x00401991
  40314c:	00403015 	.word	0x00403015
  403150:	0040160b 	.word	0x0040160b

00403154 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403154:	b1c8      	cbz	r0, 40318a <xTimerGenericCommand+0x36>
{
  403156:	b530      	push	{r4, r5, lr}
  403158:	b085      	sub	sp, #20
  40315a:	4615      	mov	r5, r2
  40315c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40315e:	4a18      	ldr	r2, [pc, #96]	; (4031c0 <xTimerGenericCommand+0x6c>)
  403160:	6810      	ldr	r0, [r2, #0]
  403162:	2800      	cmp	r0, #0
  403164:	d02a      	beq.n	4031bc <xTimerGenericCommand+0x68>
  403166:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403168:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40316a:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40316c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40316e:	2905      	cmp	r1, #5
  403170:	dc1e      	bgt.n	4031b0 <xTimerGenericCommand+0x5c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  403172:	4b14      	ldr	r3, [pc, #80]	; (4031c4 <xTimerGenericCommand+0x70>)
  403174:	4798      	blx	r3
  403176:	2802      	cmp	r0, #2
  403178:	d012      	beq.n	4031a0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40317a:	2300      	movs	r3, #0
  40317c:	461a      	mov	r2, r3
  40317e:	4669      	mov	r1, sp
  403180:	480f      	ldr	r0, [pc, #60]	; (4031c0 <xTimerGenericCommand+0x6c>)
  403182:	6800      	ldr	r0, [r0, #0]
  403184:	4c10      	ldr	r4, [pc, #64]	; (4031c8 <xTimerGenericCommand+0x74>)
  403186:	47a0      	blx	r4
  403188:	e016      	b.n	4031b8 <xTimerGenericCommand+0x64>
  40318a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40318e:	b672      	cpsid	i
  403190:	f383 8811 	msr	BASEPRI, r3
  403194:	f3bf 8f6f 	isb	sy
  403198:	f3bf 8f4f 	dsb	sy
  40319c:	b662      	cpsie	i
  40319e:	e7fe      	b.n	40319e <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4031a0:	2300      	movs	r3, #0
  4031a2:	9a08      	ldr	r2, [sp, #32]
  4031a4:	4669      	mov	r1, sp
  4031a6:	4806      	ldr	r0, [pc, #24]	; (4031c0 <xTimerGenericCommand+0x6c>)
  4031a8:	6800      	ldr	r0, [r0, #0]
  4031aa:	4c07      	ldr	r4, [pc, #28]	; (4031c8 <xTimerGenericCommand+0x74>)
  4031ac:	47a0      	blx	r4
  4031ae:	e003      	b.n	4031b8 <xTimerGenericCommand+0x64>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4031b0:	2300      	movs	r3, #0
  4031b2:	4669      	mov	r1, sp
  4031b4:	4c05      	ldr	r4, [pc, #20]	; (4031cc <xTimerGenericCommand+0x78>)
  4031b6:	47a0      	blx	r4
}
  4031b8:	b005      	add	sp, #20
  4031ba:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
  4031bc:	2000      	movs	r0, #0
	return xReturn;
  4031be:	e7fb      	b.n	4031b8 <xTimerGenericCommand+0x64>
  4031c0:	2040c388 	.word	0x2040c388
  4031c4:	00402df5 	.word	0x00402df5
  4031c8:	00401d4d 	.word	0x00401d4d
  4031cc:	00401f31 	.word	0x00401f31

004031d0 <prvSwitchTimerLists>:
{
  4031d0:	b570      	push	{r4, r5, r6, lr}
  4031d2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4031d4:	4b1c      	ldr	r3, [pc, #112]	; (403248 <prvSwitchTimerLists+0x78>)
  4031d6:	681b      	ldr	r3, [r3, #0]
  4031d8:	681a      	ldr	r2, [r3, #0]
  4031da:	2a00      	cmp	r2, #0
  4031dc:	d02c      	beq.n	403238 <prvSwitchTimerLists+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4031de:	68db      	ldr	r3, [r3, #12]
  4031e0:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4031e2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4031e4:	1d25      	adds	r5, r4, #4
  4031e6:	4628      	mov	r0, r5
  4031e8:	4b18      	ldr	r3, [pc, #96]	; (40324c <prvSwitchTimerLists+0x7c>)
  4031ea:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4031ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4031ee:	4620      	mov	r0, r4
  4031f0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4031f2:	69e3      	ldr	r3, [r4, #28]
  4031f4:	2b01      	cmp	r3, #1
  4031f6:	d1ed      	bne.n	4031d4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4031f8:	69a3      	ldr	r3, [r4, #24]
  4031fa:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  4031fc:	429e      	cmp	r6, r3
  4031fe:	d207      	bcs.n	403210 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403200:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  403202:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403204:	4629      	mov	r1, r5
  403206:	4b10      	ldr	r3, [pc, #64]	; (403248 <prvSwitchTimerLists+0x78>)
  403208:	6818      	ldr	r0, [r3, #0]
  40320a:	4b11      	ldr	r3, [pc, #68]	; (403250 <prvSwitchTimerLists+0x80>)
  40320c:	4798      	blx	r3
  40320e:	e7e1      	b.n	4031d4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403210:	2100      	movs	r1, #0
  403212:	9100      	str	r1, [sp, #0]
  403214:	460b      	mov	r3, r1
  403216:	4632      	mov	r2, r6
  403218:	4620      	mov	r0, r4
  40321a:	4c0e      	ldr	r4, [pc, #56]	; (403254 <prvSwitchTimerLists+0x84>)
  40321c:	47a0      	blx	r4
				configASSERT( xResult );
  40321e:	2800      	cmp	r0, #0
  403220:	d1d8      	bne.n	4031d4 <prvSwitchTimerLists+0x4>
  403222:	f04f 0380 	mov.w	r3, #128	; 0x80
  403226:	b672      	cpsid	i
  403228:	f383 8811 	msr	BASEPRI, r3
  40322c:	f3bf 8f6f 	isb	sy
  403230:	f3bf 8f4f 	dsb	sy
  403234:	b662      	cpsie	i
  403236:	e7fe      	b.n	403236 <prvSwitchTimerLists+0x66>
	pxCurrentTimerList = pxOverflowTimerList;
  403238:	4a07      	ldr	r2, [pc, #28]	; (403258 <prvSwitchTimerLists+0x88>)
  40323a:	6810      	ldr	r0, [r2, #0]
  40323c:	4902      	ldr	r1, [pc, #8]	; (403248 <prvSwitchTimerLists+0x78>)
  40323e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403240:	6013      	str	r3, [r2, #0]
}
  403242:	b002      	add	sp, #8
  403244:	bd70      	pop	{r4, r5, r6, pc}
  403246:	bf00      	nop
  403248:	2040c354 	.word	0x2040c354
  40324c:	0040165d 	.word	0x0040165d
  403250:	00401629 	.word	0x00401629
  403254:	00403155 	.word	0x00403155
  403258:	2040c358 	.word	0x2040c358

0040325c <prvSampleTimeNow>:
{
  40325c:	b538      	push	{r3, r4, r5, lr}
  40325e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  403260:	4b08      	ldr	r3, [pc, #32]	; (403284 <prvSampleTimeNow+0x28>)
  403262:	4798      	blx	r3
  403264:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  403266:	4b08      	ldr	r3, [pc, #32]	; (403288 <prvSampleTimeNow+0x2c>)
  403268:	681b      	ldr	r3, [r3, #0]
  40326a:	4298      	cmp	r0, r3
  40326c:	d305      	bcc.n	40327a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  40326e:	2300      	movs	r3, #0
  403270:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  403272:	4b05      	ldr	r3, [pc, #20]	; (403288 <prvSampleTimeNow+0x2c>)
  403274:	601c      	str	r4, [r3, #0]
}
  403276:	4620      	mov	r0, r4
  403278:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  40327a:	4b04      	ldr	r3, [pc, #16]	; (40328c <prvSampleTimeNow+0x30>)
  40327c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40327e:	2301      	movs	r3, #1
  403280:	602b      	str	r3, [r5, #0]
  403282:	e7f6      	b.n	403272 <prvSampleTimeNow+0x16>
  403284:	0040271d 	.word	0x0040271d
  403288:	2040c384 	.word	0x2040c384
  40328c:	004031d1 	.word	0x004031d1

00403290 <prvProcessExpiredTimer>:
{
  403290:	b570      	push	{r4, r5, r6, lr}
  403292:	b082      	sub	sp, #8
  403294:	4605      	mov	r5, r0
  403296:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403298:	4b15      	ldr	r3, [pc, #84]	; (4032f0 <prvProcessExpiredTimer+0x60>)
  40329a:	681b      	ldr	r3, [r3, #0]
  40329c:	68db      	ldr	r3, [r3, #12]
  40329e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4032a0:	1d20      	adds	r0, r4, #4
  4032a2:	4b14      	ldr	r3, [pc, #80]	; (4032f4 <prvProcessExpiredTimer+0x64>)
  4032a4:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4032a6:	69e3      	ldr	r3, [r4, #28]
  4032a8:	2b01      	cmp	r3, #1
  4032aa:	d004      	beq.n	4032b6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4032ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4032ae:	4620      	mov	r0, r4
  4032b0:	4798      	blx	r3
}
  4032b2:	b002      	add	sp, #8
  4032b4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4032b6:	69a1      	ldr	r1, [r4, #24]
  4032b8:	462b      	mov	r3, r5
  4032ba:	4632      	mov	r2, r6
  4032bc:	4429      	add	r1, r5
  4032be:	4620      	mov	r0, r4
  4032c0:	4e0d      	ldr	r6, [pc, #52]	; (4032f8 <prvProcessExpiredTimer+0x68>)
  4032c2:	47b0      	blx	r6
  4032c4:	2801      	cmp	r0, #1
  4032c6:	d1f1      	bne.n	4032ac <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4032c8:	2100      	movs	r1, #0
  4032ca:	9100      	str	r1, [sp, #0]
  4032cc:	460b      	mov	r3, r1
  4032ce:	462a      	mov	r2, r5
  4032d0:	4620      	mov	r0, r4
  4032d2:	4d0a      	ldr	r5, [pc, #40]	; (4032fc <prvProcessExpiredTimer+0x6c>)
  4032d4:	47a8      	blx	r5
			configASSERT( xResult );
  4032d6:	2800      	cmp	r0, #0
  4032d8:	d1e8      	bne.n	4032ac <prvProcessExpiredTimer+0x1c>
  4032da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032de:	b672      	cpsid	i
  4032e0:	f383 8811 	msr	BASEPRI, r3
  4032e4:	f3bf 8f6f 	isb	sy
  4032e8:	f3bf 8f4f 	dsb	sy
  4032ec:	b662      	cpsie	i
  4032ee:	e7fe      	b.n	4032ee <prvProcessExpiredTimer+0x5e>
  4032f0:	2040c354 	.word	0x2040c354
  4032f4:	0040165d 	.word	0x0040165d
  4032f8:	00402fc1 	.word	0x00402fc1
  4032fc:	00403155 	.word	0x00403155

00403300 <prvProcessTimerOrBlockTask>:
{
  403300:	b570      	push	{r4, r5, r6, lr}
  403302:	b082      	sub	sp, #8
  403304:	4606      	mov	r6, r0
  403306:	460c      	mov	r4, r1
	vTaskSuspendAll();
  403308:	4b17      	ldr	r3, [pc, #92]	; (403368 <prvProcessTimerOrBlockTask+0x68>)
  40330a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40330c:	a801      	add	r0, sp, #4
  40330e:	4b17      	ldr	r3, [pc, #92]	; (40336c <prvProcessTimerOrBlockTask+0x6c>)
  403310:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  403312:	9b01      	ldr	r3, [sp, #4]
  403314:	bb23      	cbnz	r3, 403360 <prvProcessTimerOrBlockTask+0x60>
  403316:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403318:	42b0      	cmp	r0, r6
  40331a:	bf28      	it	cs
  40331c:	2c00      	cmpcs	r4, #0
  40331e:	d018      	beq.n	403352 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
  403320:	b12c      	cbz	r4, 40332e <prvProcessTimerOrBlockTask+0x2e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403322:	4b13      	ldr	r3, [pc, #76]	; (403370 <prvProcessTimerOrBlockTask+0x70>)
  403324:	681b      	ldr	r3, [r3, #0]
  403326:	681c      	ldr	r4, [r3, #0]
  403328:	fab4 f484 	clz	r4, r4
  40332c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40332e:	4622      	mov	r2, r4
  403330:	1b71      	subs	r1, r6, r5
  403332:	4b10      	ldr	r3, [pc, #64]	; (403374 <prvProcessTimerOrBlockTask+0x74>)
  403334:	6818      	ldr	r0, [r3, #0]
  403336:	4b10      	ldr	r3, [pc, #64]	; (403378 <prvProcessTimerOrBlockTask+0x78>)
  403338:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40333a:	4b10      	ldr	r3, [pc, #64]	; (40337c <prvProcessTimerOrBlockTask+0x7c>)
  40333c:	4798      	blx	r3
  40333e:	b988      	cbnz	r0, 403364 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
  403340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403344:	4b0e      	ldr	r3, [pc, #56]	; (403380 <prvProcessTimerOrBlockTask+0x80>)
  403346:	601a      	str	r2, [r3, #0]
  403348:	f3bf 8f4f 	dsb	sy
  40334c:	f3bf 8f6f 	isb	sy
  403350:	e008      	b.n	403364 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
  403352:	4b0a      	ldr	r3, [pc, #40]	; (40337c <prvProcessTimerOrBlockTask+0x7c>)
  403354:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  403356:	4629      	mov	r1, r5
  403358:	4630      	mov	r0, r6
  40335a:	4b0a      	ldr	r3, [pc, #40]	; (403384 <prvProcessTimerOrBlockTask+0x84>)
  40335c:	4798      	blx	r3
  40335e:	e001      	b.n	403364 <prvProcessTimerOrBlockTask+0x64>
			( void ) xTaskResumeAll();
  403360:	4b06      	ldr	r3, [pc, #24]	; (40337c <prvProcessTimerOrBlockTask+0x7c>)
  403362:	4798      	blx	r3
}
  403364:	b002      	add	sp, #8
  403366:	bd70      	pop	{r4, r5, r6, pc}
  403368:	0040270d 	.word	0x0040270d
  40336c:	0040325d 	.word	0x0040325d
  403370:	2040c358 	.word	0x2040c358
  403374:	2040c388 	.word	0x2040c388
  403378:	00402331 	.word	0x00402331
  40337c:	0040286d 	.word	0x0040286d
  403380:	e000ed04 	.word	0xe000ed04
  403384:	00403291 	.word	0x00403291

00403388 <prvProcessReceivedCommands>:
{
  403388:	b530      	push	{r4, r5, lr}
  40338a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40338c:	e002      	b.n	403394 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  40338e:	9b04      	ldr	r3, [sp, #16]
  403390:	2b00      	cmp	r3, #0
  403392:	da10      	bge.n	4033b6 <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403394:	2300      	movs	r3, #0
  403396:	461a      	mov	r2, r3
  403398:	a904      	add	r1, sp, #16
  40339a:	4839      	ldr	r0, [pc, #228]	; (403480 <prvProcessReceivedCommands+0xf8>)
  40339c:	6800      	ldr	r0, [r0, #0]
  40339e:	4c39      	ldr	r4, [pc, #228]	; (403484 <prvProcessReceivedCommands+0xfc>)
  4033a0:	47a0      	blx	r4
  4033a2:	2800      	cmp	r0, #0
  4033a4:	d069      	beq.n	40347a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4033a6:	9b04      	ldr	r3, [sp, #16]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	daf0      	bge.n	40338e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4033ac:	9907      	ldr	r1, [sp, #28]
  4033ae:	9806      	ldr	r0, [sp, #24]
  4033b0:	9b05      	ldr	r3, [sp, #20]
  4033b2:	4798      	blx	r3
  4033b4:	e7eb      	b.n	40338e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4033b6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4033b8:	6963      	ldr	r3, [r4, #20]
  4033ba:	b113      	cbz	r3, 4033c2 <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4033bc:	1d20      	adds	r0, r4, #4
  4033be:	4b32      	ldr	r3, [pc, #200]	; (403488 <prvProcessReceivedCommands+0x100>)
  4033c0:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4033c2:	a803      	add	r0, sp, #12
  4033c4:	4b31      	ldr	r3, [pc, #196]	; (40348c <prvProcessReceivedCommands+0x104>)
  4033c6:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4033c8:	9b04      	ldr	r3, [sp, #16]
  4033ca:	2b09      	cmp	r3, #9
  4033cc:	d8e2      	bhi.n	403394 <prvProcessReceivedCommands+0xc>
  4033ce:	a201      	add	r2, pc, #4	; (adr r2, 4033d4 <prvProcessReceivedCommands+0x4c>)
  4033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4033d4:	004033fd 	.word	0x004033fd
  4033d8:	004033fd 	.word	0x004033fd
  4033dc:	004033fd 	.word	0x004033fd
  4033e0:	00403395 	.word	0x00403395
  4033e4:	00403449 	.word	0x00403449
  4033e8:	00403473 	.word	0x00403473
  4033ec:	004033fd 	.word	0x004033fd
  4033f0:	004033fd 	.word	0x004033fd
  4033f4:	00403395 	.word	0x00403395
  4033f8:	00403449 	.word	0x00403449
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4033fc:	9905      	ldr	r1, [sp, #20]
  4033fe:	69a5      	ldr	r5, [r4, #24]
  403400:	460b      	mov	r3, r1
  403402:	4602      	mov	r2, r0
  403404:	4429      	add	r1, r5
  403406:	4620      	mov	r0, r4
  403408:	4d21      	ldr	r5, [pc, #132]	; (403490 <prvProcessReceivedCommands+0x108>)
  40340a:	47a8      	blx	r5
  40340c:	2801      	cmp	r0, #1
  40340e:	d1c1      	bne.n	403394 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403410:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403412:	4620      	mov	r0, r4
  403414:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403416:	69e3      	ldr	r3, [r4, #28]
  403418:	2b01      	cmp	r3, #1
  40341a:	d1bb      	bne.n	403394 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40341c:	69a2      	ldr	r2, [r4, #24]
  40341e:	2100      	movs	r1, #0
  403420:	9100      	str	r1, [sp, #0]
  403422:	460b      	mov	r3, r1
  403424:	9805      	ldr	r0, [sp, #20]
  403426:	4402      	add	r2, r0
  403428:	4620      	mov	r0, r4
  40342a:	4c1a      	ldr	r4, [pc, #104]	; (403494 <prvProcessReceivedCommands+0x10c>)
  40342c:	47a0      	blx	r4
							configASSERT( xResult );
  40342e:	2800      	cmp	r0, #0
  403430:	d1b0      	bne.n	403394 <prvProcessReceivedCommands+0xc>
  403432:	f04f 0380 	mov.w	r3, #128	; 0x80
  403436:	b672      	cpsid	i
  403438:	f383 8811 	msr	BASEPRI, r3
  40343c:	f3bf 8f6f 	isb	sy
  403440:	f3bf 8f4f 	dsb	sy
  403444:	b662      	cpsie	i
  403446:	e7fe      	b.n	403446 <prvProcessReceivedCommands+0xbe>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403448:	9905      	ldr	r1, [sp, #20]
  40344a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40344c:	b131      	cbz	r1, 40345c <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40344e:	4603      	mov	r3, r0
  403450:	4602      	mov	r2, r0
  403452:	4401      	add	r1, r0
  403454:	4620      	mov	r0, r4
  403456:	4c0e      	ldr	r4, [pc, #56]	; (403490 <prvProcessReceivedCommands+0x108>)
  403458:	47a0      	blx	r4
					break;
  40345a:	e79b      	b.n	403394 <prvProcessReceivedCommands+0xc>
  40345c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403460:	b672      	cpsid	i
  403462:	f383 8811 	msr	BASEPRI, r3
  403466:	f3bf 8f6f 	isb	sy
  40346a:	f3bf 8f4f 	dsb	sy
  40346e:	b662      	cpsie	i
  403470:	e7fe      	b.n	403470 <prvProcessReceivedCommands+0xe8>
					vPortFree( pxTimer );
  403472:	4620      	mov	r0, r4
  403474:	4b08      	ldr	r3, [pc, #32]	; (403498 <prvProcessReceivedCommands+0x110>)
  403476:	4798      	blx	r3
					break;
  403478:	e78c      	b.n	403394 <prvProcessReceivedCommands+0xc>
}
  40347a:	b009      	add	sp, #36	; 0x24
  40347c:	bd30      	pop	{r4, r5, pc}
  40347e:	bf00      	nop
  403480:	2040c388 	.word	0x2040c388
  403484:	00402135 	.word	0x00402135
  403488:	0040165d 	.word	0x0040165d
  40348c:	0040325d 	.word	0x0040325d
  403490:	00402fc1 	.word	0x00402fc1
  403494:	00403155 	.word	0x00403155
  403498:	00401a05 	.word	0x00401a05

0040349c <prvTimerTask>:
{
  40349c:	b500      	push	{lr}
  40349e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  4034a0:	a801      	add	r0, sp, #4
  4034a2:	4b04      	ldr	r3, [pc, #16]	; (4034b4 <prvTimerTask+0x18>)
  4034a4:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  4034a6:	9901      	ldr	r1, [sp, #4]
  4034a8:	4b03      	ldr	r3, [pc, #12]	; (4034b8 <prvTimerTask+0x1c>)
  4034aa:	4798      	blx	r3
		prvProcessReceivedCommands();
  4034ac:	4b03      	ldr	r3, [pc, #12]	; (4034bc <prvTimerTask+0x20>)
  4034ae:	4798      	blx	r3
  4034b0:	e7f6      	b.n	4034a0 <prvTimerTask+0x4>
  4034b2:	bf00      	nop
  4034b4:	00402fa1 	.word	0x00402fa1
  4034b8:	00403301 	.word	0x00403301
  4034bc:	00403389 	.word	0x00403389

004034c0 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  4034c0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4034c2:	4603      	mov	r3, r0
  4034c4:	b110      	cbz	r0, 4034cc <lv_disp_get_scr_act+0xc>
    if(!disp) {
  4034c6:	b12b      	cbz	r3, 4034d4 <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  4034c8:	6c58      	ldr	r0, [r3, #68]	; 0x44
  4034ca:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  4034cc:	4b02      	ldr	r3, [pc, #8]	; (4034d8 <lv_disp_get_scr_act+0x18>)
  4034ce:	4798      	blx	r3
  4034d0:	4603      	mov	r3, r0
  4034d2:	e7f8      	b.n	4034c6 <lv_disp_get_scr_act+0x6>
        return NULL;
  4034d4:	2000      	movs	r0, #0
}
  4034d6:	bd08      	pop	{r3, pc}
  4034d8:	004148ed 	.word	0x004148ed

004034dc <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  4034dc:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4034de:	4603      	mov	r3, r0
  4034e0:	b110      	cbz	r0, 4034e8 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  4034e2:	b12b      	cbz	r3, 4034f0 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  4034e4:	6c98      	ldr	r0, [r3, #72]	; 0x48
  4034e6:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  4034e8:	4b02      	ldr	r3, [pc, #8]	; (4034f4 <lv_disp_get_scr_prev+0x18>)
  4034ea:	4798      	blx	r3
  4034ec:	4603      	mov	r3, r0
  4034ee:	e7f8      	b.n	4034e2 <lv_disp_get_scr_prev+0x6>
        return NULL;
  4034f0:	2000      	movs	r0, #0
}
  4034f2:	bd08      	pop	{r3, pc}
  4034f4:	004148ed 	.word	0x004148ed

004034f8 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  4034f8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4034fa:	4603      	mov	r3, r0
  4034fc:	b110      	cbz	r0, 403504 <lv_disp_get_layer_top+0xc>
    if(!disp) {
  4034fe:	b12b      	cbz	r3, 40350c <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403500:	6d18      	ldr	r0, [r3, #80]	; 0x50
  403502:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403504:	4b02      	ldr	r3, [pc, #8]	; (403510 <lv_disp_get_layer_top+0x18>)
  403506:	4798      	blx	r3
  403508:	4603      	mov	r3, r0
  40350a:	e7f8      	b.n	4034fe <lv_disp_get_layer_top+0x6>
        return NULL;
  40350c:	2000      	movs	r0, #0
}
  40350e:	bd08      	pop	{r3, pc}
  403510:	004148ed 	.word	0x004148ed

00403514 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  403514:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403516:	4603      	mov	r3, r0
  403518:	b110      	cbz	r0, 403520 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  40351a:	b12b      	cbz	r3, 403528 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  40351c:	6d58      	ldr	r0, [r3, #84]	; 0x54
  40351e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403520:	4b02      	ldr	r3, [pc, #8]	; (40352c <lv_disp_get_layer_sys+0x18>)
  403522:	4798      	blx	r3
  403524:	4603      	mov	r3, r0
  403526:	e7f8      	b.n	40351a <lv_disp_get_layer_sys+0x6>
        return NULL;
  403528:	2000      	movs	r0, #0
}
  40352a:	bd08      	pop	{r3, pc}
  40352c:	004148ed 	.word	0x004148ed

00403530 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  403530:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  403532:	2400      	movs	r4, #0
    while(i != NULL) {
  403534:	e001      	b.n	40353a <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  403536:	4b07      	ldr	r3, [pc, #28]	; (403554 <obj_to_foreground+0x24>)
  403538:	4798      	blx	r3
    while(i != NULL) {
  40353a:	b130      	cbz	r0, 40354a <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  40353c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403540:	f013 0f20 	tst.w	r3, #32
  403544:	d0f7      	beq.n	403536 <obj_to_foreground+0x6>
  403546:	4604      	mov	r4, r0
  403548:	e7f5      	b.n	403536 <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  40354a:	b114      	cbz	r4, 403552 <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  40354c:	4620      	mov	r0, r4
  40354e:	4b02      	ldr	r3, [pc, #8]	; (403558 <obj_to_foreground+0x28>)
  403550:	4798      	blx	r3
  403552:	bd10      	pop	{r4, pc}
  403554:	004057bd 	.word	0x004057bd
  403558:	00405de5 	.word	0x00405de5

0040355c <focus_next_core>:
{
  40355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  403560:	7d03      	ldrb	r3, [r0, #20]
  403562:	f013 0f01 	tst.w	r3, #1
  403566:	d15f      	bne.n	403628 <focus_next_core+0xcc>
  403568:	4690      	mov	r8, r2
  40356a:	4689      	mov	r9, r1
  40356c:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  40356e:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  403570:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  403572:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  403574:	2c00      	cmp	r4, #0
  403576:	d042      	beq.n	4035fe <focus_next_core+0xa2>
  403578:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  40357a:	2d00      	cmp	r5, #0
  40357c:	d04b      	beq.n	403616 <focus_next_core+0xba>
        if(can_move) {
  40357e:	2b00      	cmp	r3, #0
  403580:	d14c      	bne.n	40361c <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  403582:	2c00      	cmp	r4, #0
  403584:	d0f6      	beq.n	403574 <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  403586:	2100      	movs	r1, #0
  403588:	6820      	ldr	r0, [r4, #0]
  40358a:	4b28      	ldr	r3, [pc, #160]	; (40362c <focus_next_core+0xd0>)
  40358c:	4798      	blx	r3
  40358e:	f010 0f20 	tst.w	r0, #32
  403592:	d1ef      	bne.n	403574 <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  403594:	6820      	ldr	r0, [r4, #0]
  403596:	4b26      	ldr	r3, [pc, #152]	; (403630 <focus_next_core+0xd4>)
  403598:	4798      	blx	r3
  40359a:	2800      	cmp	r0, #0
  40359c:	d1ea      	bne.n	403574 <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  40359e:	68f3      	ldr	r3, [r6, #12]
  4035a0:	429c      	cmp	r4, r3
  4035a2:	d041      	beq.n	403628 <focus_next_core+0xcc>
    if(group->obj_focus) {
  4035a4:	b183      	cbz	r3, 4035c8 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4035a6:	6818      	ldr	r0, [r3, #0]
  4035a8:	69c3      	ldr	r3, [r0, #28]
  4035aa:	2200      	movs	r2, #0
  4035ac:	2117      	movs	r1, #23
  4035ae:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  4035b0:	68f3      	ldr	r3, [r6, #12]
  4035b2:	2200      	movs	r2, #0
  4035b4:	210e      	movs	r1, #14
  4035b6:	6818      	ldr	r0, [r3, #0]
  4035b8:	4b1e      	ldr	r3, [pc, #120]	; (403634 <focus_next_core+0xd8>)
  4035ba:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4035bc:	2801      	cmp	r0, #1
  4035be:	d133      	bne.n	403628 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  4035c0:	68f3      	ldr	r3, [r6, #12]
  4035c2:	6818      	ldr	r0, [r3, #0]
  4035c4:	4b1c      	ldr	r3, [pc, #112]	; (403638 <focus_next_core+0xdc>)
  4035c6:	4798      	blx	r3
    group->obj_focus = obj_next;
  4035c8:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  4035ca:	6820      	ldr	r0, [r4, #0]
  4035cc:	69c3      	ldr	r3, [r0, #28]
  4035ce:	2200      	movs	r2, #0
  4035d0:	2116      	movs	r1, #22
  4035d2:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  4035d4:	68f3      	ldr	r3, [r6, #12]
  4035d6:	2200      	movs	r2, #0
  4035d8:	210d      	movs	r1, #13
  4035da:	6818      	ldr	r0, [r3, #0]
  4035dc:	4b15      	ldr	r3, [pc, #84]	; (403634 <focus_next_core+0xd8>)
  4035de:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  4035e0:	2801      	cmp	r0, #1
  4035e2:	d121      	bne.n	403628 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  4035e4:	68f3      	ldr	r3, [r6, #12]
  4035e6:	6818      	ldr	r0, [r3, #0]
  4035e8:	4b14      	ldr	r3, [pc, #80]	; (40363c <focus_next_core+0xe0>)
  4035ea:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  4035ec:	68f3      	ldr	r3, [r6, #12]
  4035ee:	6818      	ldr	r0, [r3, #0]
  4035f0:	4b11      	ldr	r3, [pc, #68]	; (403638 <focus_next_core+0xdc>)
  4035f2:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  4035f4:	6933      	ldr	r3, [r6, #16]
  4035f6:	b1bb      	cbz	r3, 403628 <focus_next_core+0xcc>
  4035f8:	4630      	mov	r0, r6
  4035fa:	4798      	blx	r3
  4035fc:	e014      	b.n	403628 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  4035fe:	7d33      	ldrb	r3, [r6, #20]
  403600:	f013 0f10 	tst.w	r3, #16
  403604:	d100      	bne.n	403608 <focus_next_core+0xac>
  403606:	b97d      	cbnz	r5, 403628 <focus_next_core+0xcc>
                if(!can_begin) return;
  403608:	b177      	cbz	r7, 403628 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  40360a:	4630      	mov	r0, r6
  40360c:	47c8      	blx	r9
  40360e:	4604      	mov	r4, r0
                can_begin = false;
  403610:	2700      	movs	r7, #0
                can_move  = false;
  403612:	463b      	mov	r3, r7
                can_begin = false;
  403614:	e7b1      	b.n	40357a <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  403616:	b13c      	cbz	r4, 403628 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  403618:	4625      	mov	r5, r4
  40361a:	e7b0      	b.n	40357e <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  40361c:	4621      	mov	r1, r4
  40361e:	4630      	mov	r0, r6
  403620:	47c0      	blx	r8
  403622:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  403624:	4285      	cmp	r5, r0
  403626:	d1ac      	bne.n	403582 <focus_next_core+0x26>
  403628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40362c:	00406bf1 	.word	0x00406bf1
  403630:	00405bd9 	.word	0x00405bd9
  403634:	004056ad 	.word	0x004056ad
  403638:	00405d69 	.word	0x00405d69
  40363c:	00403531 	.word	0x00403531

00403640 <_lv_group_init>:
{
  403640:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  403642:	2118      	movs	r1, #24
  403644:	4801      	ldr	r0, [pc, #4]	; (40364c <_lv_group_init+0xc>)
  403646:	4b02      	ldr	r3, [pc, #8]	; (403650 <_lv_group_init+0x10>)
  403648:	4798      	blx	r3
  40364a:	bd08      	pop	{r3, pc}
  40364c:	2043a314 	.word	0x2043a314
  403650:	00415ce7 	.word	0x00415ce7

00403654 <lv_group_focus_next>:
{
  403654:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  403656:	4a02      	ldr	r2, [pc, #8]	; (403660 <lv_group_focus_next+0xc>)
  403658:	4902      	ldr	r1, [pc, #8]	; (403664 <lv_group_focus_next+0x10>)
  40365a:	4b03      	ldr	r3, [pc, #12]	; (403668 <lv_group_focus_next+0x14>)
  40365c:	4798      	blx	r3
  40365e:	bd08      	pop	{r3, pc}
  403660:	00415da5 	.word	0x00415da5
  403664:	00415d91 	.word	0x00415d91
  403668:	0040355d 	.word	0x0040355d

0040366c <lv_group_focus_prev>:
{
  40366c:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  40366e:	4a02      	ldr	r2, [pc, #8]	; (403678 <lv_group_focus_prev+0xc>)
  403670:	4902      	ldr	r1, [pc, #8]	; (40367c <lv_group_focus_prev+0x10>)
  403672:	4b03      	ldr	r3, [pc, #12]	; (403680 <lv_group_focus_prev+0x14>)
  403674:	4798      	blx	r3
  403676:	bd08      	pop	{r3, pc}
  403678:	00415db3 	.word	0x00415db3
  40367c:	00415d9b 	.word	0x00415d9b
  403680:	0040355d 	.word	0x0040355d

00403684 <lv_group_refocus>:
{
  403684:	b538      	push	{r3, r4, r5, lr}
  403686:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  403688:	7d03      	ldrb	r3, [r0, #20]
  40368a:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  40368e:	f043 0310 	orr.w	r3, r3, #16
  403692:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  403694:	f013 0f08 	tst.w	r3, #8
  403698:	d006      	beq.n	4036a8 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  40369a:	4b05      	ldr	r3, [pc, #20]	; (4036b0 <lv_group_refocus+0x2c>)
  40369c:	4798      	blx	r3
    g->wrap = temp_wrap;
  40369e:	7d23      	ldrb	r3, [r4, #20]
  4036a0:	f365 1304 	bfi	r3, r5, #4, #1
  4036a4:	7523      	strb	r3, [r4, #20]
  4036a6:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  4036a8:	4b02      	ldr	r3, [pc, #8]	; (4036b4 <lv_group_refocus+0x30>)
  4036aa:	4798      	blx	r3
  4036ac:	e7f7      	b.n	40369e <lv_group_refocus+0x1a>
  4036ae:	bf00      	nop
  4036b0:	0040366d 	.word	0x0040366d
  4036b4:	00403655 	.word	0x00403655

004036b8 <lv_group_add_obj>:
    if(group == NULL) return;
  4036b8:	2800      	cmp	r0, #0
  4036ba:	d031      	beq.n	403720 <lv_group_add_obj+0x68>
{
  4036bc:	b570      	push	{r4, r5, r6, lr}
  4036be:	4605      	mov	r5, r0
  4036c0:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  4036c2:	4606      	mov	r6, r0
  4036c4:	4b17      	ldr	r3, [pc, #92]	; (403724 <lv_group_add_obj+0x6c>)
  4036c6:	4798      	blx	r3
  4036c8:	b138      	cbz	r0, 4036da <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  4036ca:	6803      	ldr	r3, [r0, #0]
  4036cc:	42a3      	cmp	r3, r4
  4036ce:	d01c      	beq.n	40370a <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  4036d0:	4601      	mov	r1, r0
  4036d2:	4630      	mov	r0, r6
  4036d4:	4b14      	ldr	r3, [pc, #80]	; (403728 <lv_group_add_obj+0x70>)
  4036d6:	4798      	blx	r3
  4036d8:	e7f6      	b.n	4036c8 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  4036da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4036dc:	b133      	cbz	r3, 4036ec <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  4036de:	4620      	mov	r0, r4
  4036e0:	4b12      	ldr	r3, [pc, #72]	; (40372c <lv_group_add_obj+0x74>)
  4036e2:	4798      	blx	r3
  4036e4:	b110      	cbz	r0, 4036ec <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  4036e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  4036e8:	4b11      	ldr	r3, [pc, #68]	; (403730 <lv_group_add_obj+0x78>)
  4036ea:	4798      	blx	r3
    obj->group_p     = group;
  4036ec:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  4036ee:	4628      	mov	r0, r5
  4036f0:	4b10      	ldr	r3, [pc, #64]	; (403734 <lv_group_add_obj+0x7c>)
  4036f2:	4798      	blx	r3
  4036f4:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  4036f6:	4b10      	ldr	r3, [pc, #64]	; (403738 <lv_group_add_obj+0x80>)
  4036f8:	4798      	blx	r3
  4036fa:	b138      	cbz	r0, 40370c <lv_group_add_obj+0x54>
    if(next == NULL) return;
  4036fc:	b12e      	cbz	r6, 40370a <lv_group_add_obj+0x52>
    *next = obj;
  4036fe:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403700:	4628      	mov	r0, r5
  403702:	4b08      	ldr	r3, [pc, #32]	; (403724 <lv_group_add_obj+0x6c>)
  403704:	4798      	blx	r3
  403706:	4286      	cmp	r6, r0
  403708:	d006      	beq.n	403718 <lv_group_add_obj+0x60>
  40370a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  40370c:	4632      	mov	r2, r6
  40370e:	2300      	movs	r3, #0
  403710:	480a      	ldr	r0, [pc, #40]	; (40373c <lv_group_add_obj+0x84>)
  403712:	490b      	ldr	r1, [pc, #44]	; (403740 <lv_group_add_obj+0x88>)
  403714:	4788      	blx	r1
  403716:	e7fe      	b.n	403716 <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  403718:	4628      	mov	r0, r5
  40371a:	4b05      	ldr	r3, [pc, #20]	; (403730 <lv_group_add_obj+0x78>)
  40371c:	4798      	blx	r3
  40371e:	e7f4      	b.n	40370a <lv_group_add_obj+0x52>
  403720:	4770      	bx	lr
  403722:	bf00      	nop
  403724:	00415d91 	.word	0x00415d91
  403728:	00415da5 	.word	0x00415da5
  40372c:	00408001 	.word	0x00408001
  403730:	00403685 	.word	0x00403685
  403734:	00415d45 	.word	0x00415d45
  403738:	00415a81 	.word	0x00415a81
  40373c:	00428c94 	.word	0x00428c94
  403740:	00415a8d 	.word	0x00415a8d

00403744 <lv_group_remove_obj>:
{
  403744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
  403746:	6b87      	ldr	r7, [r0, #56]	; 0x38
    if(g == NULL) return;
  403748:	2f00      	cmp	r7, #0
  40374a:	d043      	beq.n	4037d4 <lv_group_remove_obj+0x90>
  40374c:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  40374e:	68fb      	ldr	r3, [r7, #12]
  403750:	681b      	ldr	r3, [r3, #0]
  403752:	4298      	cmp	r0, r3
  403754:	d013      	beq.n	40377e <lv_group_remove_obj+0x3a>
    if(*g->obj_focus == obj) {
  403756:	68fb      	ldr	r3, [r7, #12]
  403758:	681b      	ldr	r3, [r3, #0]
  40375a:	429d      	cmp	r5, r3
  40375c:	d02d      	beq.n	4037ba <lv_group_remove_obj+0x76>
    _LV_LL_READ(g->obj_ll, i) {
  40375e:	463e      	mov	r6, r7
  403760:	4638      	mov	r0, r7
  403762:	4b1d      	ldr	r3, [pc, #116]	; (4037d8 <lv_group_remove_obj+0x94>)
  403764:	4798      	blx	r3
  403766:	4604      	mov	r4, r0
  403768:	2c00      	cmp	r4, #0
  40376a:	d033      	beq.n	4037d4 <lv_group_remove_obj+0x90>
        if(*i == obj) {
  40376c:	6823      	ldr	r3, [r4, #0]
  40376e:	429d      	cmp	r5, r3
  403770:	d026      	beq.n	4037c0 <lv_group_remove_obj+0x7c>
    _LV_LL_READ(g->obj_ll, i) {
  403772:	4621      	mov	r1, r4
  403774:	4630      	mov	r0, r6
  403776:	4b19      	ldr	r3, [pc, #100]	; (4037dc <lv_group_remove_obj+0x98>)
  403778:	4798      	blx	r3
  40377a:	4604      	mov	r4, r0
  40377c:	e7f4      	b.n	403768 <lv_group_remove_obj+0x24>
        if(g->frozen) g->frozen = 0;
  40377e:	7d3b      	ldrb	r3, [r7, #20]
  403780:	f013 0f01 	tst.w	r3, #1
  403784:	d003      	beq.n	40378e <lv_group_remove_obj+0x4a>
  403786:	7d3b      	ldrb	r3, [r7, #20]
  403788:	f36f 0300 	bfc	r3, #0, #1
  40378c:	753b      	strb	r3, [r7, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  40378e:	4638      	mov	r0, r7
  403790:	4b11      	ldr	r3, [pc, #68]	; (4037d8 <lv_group_remove_obj+0x94>)
  403792:	4798      	blx	r3
  403794:	68fb      	ldr	r3, [r7, #12]
  403796:	4283      	cmp	r3, r0
  403798:	d003      	beq.n	4037a2 <lv_group_remove_obj+0x5e>
            lv_group_refocus(g);
  40379a:	4638      	mov	r0, r7
  40379c:	4b10      	ldr	r3, [pc, #64]	; (4037e0 <lv_group_remove_obj+0x9c>)
  40379e:	4798      	blx	r3
  4037a0:	e7d9      	b.n	403756 <lv_group_remove_obj+0x12>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4037a2:	4638      	mov	r0, r7
  4037a4:	4b0f      	ldr	r3, [pc, #60]	; (4037e4 <lv_group_remove_obj+0xa0>)
  4037a6:	4798      	blx	r3
  4037a8:	68fb      	ldr	r3, [r7, #12]
  4037aa:	4283      	cmp	r3, r0
  4037ac:	d1f5      	bne.n	40379a <lv_group_remove_obj+0x56>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4037ae:	6818      	ldr	r0, [r3, #0]
  4037b0:	69c3      	ldr	r3, [r0, #28]
  4037b2:	2200      	movs	r2, #0
  4037b4:	2117      	movs	r1, #23
  4037b6:	4798      	blx	r3
  4037b8:	e7cd      	b.n	403756 <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
  4037ba:	2300      	movs	r3, #0
  4037bc:	60fb      	str	r3, [r7, #12]
  4037be:	e7ce      	b.n	40375e <lv_group_remove_obj+0x1a>
            _lv_ll_remove(&g->obj_ll, i);
  4037c0:	4621      	mov	r1, r4
  4037c2:	4638      	mov	r0, r7
  4037c4:	4b08      	ldr	r3, [pc, #32]	; (4037e8 <lv_group_remove_obj+0xa4>)
  4037c6:	4798      	blx	r3
            lv_mem_free(i);
  4037c8:	4620      	mov	r0, r4
  4037ca:	4b08      	ldr	r3, [pc, #32]	; (4037ec <lv_group_remove_obj+0xa8>)
  4037cc:	4798      	blx	r3
            obj->group_p = NULL;
  4037ce:	2300      	movs	r3, #0
  4037d0:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  4037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4037d6:	bf00      	nop
  4037d8:	00415d91 	.word	0x00415d91
  4037dc:	00415da5 	.word	0x00415da5
  4037e0:	00403685 	.word	0x00403685
  4037e4:	00415d9b 	.word	0x00415d9b
  4037e8:	00415e4d 	.word	0x00415e4d
  4037ec:	0041624d 	.word	0x0041624d

004037f0 <lv_group_get_focused>:
    if(!group) return NULL;
  4037f0:	b118      	cbz	r0, 4037fa <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  4037f2:	68c3      	ldr	r3, [r0, #12]
  4037f4:	b11b      	cbz	r3, 4037fe <lv_group_get_focused+0xe>
    return *group->obj_focus;
  4037f6:	6818      	ldr	r0, [r3, #0]
  4037f8:	4770      	bx	lr
    if(!group) return NULL;
  4037fa:	2000      	movs	r0, #0
  4037fc:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  4037fe:	2000      	movs	r0, #0
}
  403800:	4770      	bx	lr
	...

00403804 <lv_group_send_data>:
{
  403804:	b510      	push	{r4, lr}
  403806:	b082      	sub	sp, #8
  403808:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  40380a:	4b0a      	ldr	r3, [pc, #40]	; (403834 <lv_group_send_data+0x30>)
  40380c:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  40380e:	b170      	cbz	r0, 40382e <lv_group_send_data+0x2a>
  403810:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  403812:	69c3      	ldr	r3, [r0, #28]
  403814:	aa01      	add	r2, sp, #4
  403816:	2118      	movs	r1, #24
  403818:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  40381a:	2801      	cmp	r0, #1
  40381c:	d001      	beq.n	403822 <lv_group_send_data+0x1e>
}
  40381e:	b002      	add	sp, #8
  403820:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  403822:	aa01      	add	r2, sp, #4
  403824:	210c      	movs	r1, #12
  403826:	4620      	mov	r0, r4
  403828:	4b03      	ldr	r3, [pc, #12]	; (403838 <lv_group_send_data+0x34>)
  40382a:	4798      	blx	r3
  40382c:	e7f7      	b.n	40381e <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  40382e:	2001      	movs	r0, #1
  403830:	e7f5      	b.n	40381e <lv_group_send_data+0x1a>
  403832:	bf00      	nop
  403834:	004037f1 	.word	0x004037f1
  403838:	004056ad 	.word	0x004056ad

0040383c <lv_group_set_editing>:
    if(group == NULL) return;
  40383c:	b1f8      	cbz	r0, 40387e <lv_group_set_editing+0x42>
{
  40383e:	b538      	push	{r3, r4, r5, lr}
  403840:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  403842:	7d03      	ldrb	r3, [r0, #20]
  403844:	f3c3 0340 	ubfx	r3, r3, #1, #1
  403848:	4299      	cmp	r1, r3
  40384a:	d013      	beq.n	403874 <lv_group_set_editing+0x38>
    group->editing     = en_val;
  40384c:	7d03      	ldrb	r3, [r0, #20]
  40384e:	f361 0341 	bfi	r3, r1, #1, #1
  403852:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  403854:	4b0a      	ldr	r3, [pc, #40]	; (403880 <lv_group_set_editing+0x44>)
  403856:	4798      	blx	r3
    if(focused) {
  403858:	4605      	mov	r5, r0
  40385a:	b158      	cbz	r0, 403874 <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  40385c:	69c3      	ldr	r3, [r0, #28]
  40385e:	2200      	movs	r2, #0
  403860:	2116      	movs	r1, #22
  403862:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  403864:	68e3      	ldr	r3, [r4, #12]
  403866:	2200      	movs	r2, #0
  403868:	210d      	movs	r1, #13
  40386a:	6818      	ldr	r0, [r3, #0]
  40386c:	4b05      	ldr	r3, [pc, #20]	; (403884 <lv_group_set_editing+0x48>)
  40386e:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  403870:	2801      	cmp	r0, #1
  403872:	d000      	beq.n	403876 <lv_group_set_editing+0x3a>
  403874:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  403876:	4628      	mov	r0, r5
  403878:	4b03      	ldr	r3, [pc, #12]	; (403888 <lv_group_set_editing+0x4c>)
  40387a:	4798      	blx	r3
  40387c:	e7fa      	b.n	403874 <lv_group_set_editing+0x38>
  40387e:	4770      	bx	lr
  403880:	004037f1 	.word	0x004037f1
  403884:	004056ad 	.word	0x004056ad
  403888:	00405d69 	.word	0x00405d69

0040388c <lv_group_focus_obj>:
    if(obj == NULL) return;
  40388c:	2800      	cmp	r0, #0
  40388e:	d04e      	beq.n	40392e <lv_group_focus_obj+0xa2>
{
  403890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403892:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  403894:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  403896:	b356      	cbz	r6, 4038ee <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  403898:	7d33      	ldrb	r3, [r6, #20]
  40389a:	f013 0f01 	tst.w	r3, #1
  40389e:	d126      	bne.n	4038ee <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  4038a0:	68f3      	ldr	r3, [r6, #12]
  4038a2:	b113      	cbz	r3, 4038aa <lv_group_focus_obj+0x1e>
  4038a4:	681b      	ldr	r3, [r3, #0]
  4038a6:	4298      	cmp	r0, r3
  4038a8:	d021      	beq.n	4038ee <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  4038aa:	2100      	movs	r1, #0
  4038ac:	4630      	mov	r0, r6
  4038ae:	4b20      	ldr	r3, [pc, #128]	; (403930 <lv_group_focus_obj+0xa4>)
  4038b0:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  4038b2:	4637      	mov	r7, r6
  4038b4:	4630      	mov	r0, r6
  4038b6:	4b1f      	ldr	r3, [pc, #124]	; (403934 <lv_group_focus_obj+0xa8>)
  4038b8:	4798      	blx	r3
  4038ba:	4604      	mov	r4, r0
  4038bc:	b1bc      	cbz	r4, 4038ee <lv_group_focus_obj+0x62>
        if(*i == obj) {
  4038be:	6823      	ldr	r3, [r4, #0]
  4038c0:	429d      	cmp	r5, r3
  4038c2:	d005      	beq.n	4038d0 <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  4038c4:	4621      	mov	r1, r4
  4038c6:	4638      	mov	r0, r7
  4038c8:	4b1b      	ldr	r3, [pc, #108]	; (403938 <lv_group_focus_obj+0xac>)
  4038ca:	4798      	blx	r3
  4038cc:	4604      	mov	r4, r0
  4038ce:	e7f5      	b.n	4038bc <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  4038d0:	68f3      	ldr	r3, [r6, #12]
  4038d2:	b18b      	cbz	r3, 4038f8 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4038d4:	6818      	ldr	r0, [r3, #0]
  4038d6:	69c3      	ldr	r3, [r0, #28]
  4038d8:	2200      	movs	r2, #0
  4038da:	2117      	movs	r1, #23
  4038dc:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  4038de:	68f3      	ldr	r3, [r6, #12]
  4038e0:	2200      	movs	r2, #0
  4038e2:	210e      	movs	r1, #14
  4038e4:	6818      	ldr	r0, [r3, #0]
  4038e6:	4b15      	ldr	r3, [pc, #84]	; (40393c <lv_group_focus_obj+0xb0>)
  4038e8:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  4038ea:	2801      	cmp	r0, #1
  4038ec:	d000      	beq.n	4038f0 <lv_group_focus_obj+0x64>
  4038ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  4038f0:	68f3      	ldr	r3, [r6, #12]
  4038f2:	6818      	ldr	r0, [r3, #0]
  4038f4:	4b12      	ldr	r3, [pc, #72]	; (403940 <lv_group_focus_obj+0xb4>)
  4038f6:	4798      	blx	r3
            g->obj_focus = i;
  4038f8:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  4038fa:	6820      	ldr	r0, [r4, #0]
  4038fc:	69c3      	ldr	r3, [r0, #28]
  4038fe:	2200      	movs	r2, #0
  403900:	2116      	movs	r1, #22
  403902:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  403904:	6933      	ldr	r3, [r6, #16]
  403906:	b10b      	cbz	r3, 40390c <lv_group_focus_obj+0x80>
  403908:	4630      	mov	r0, r6
  40390a:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  40390c:	68f3      	ldr	r3, [r6, #12]
  40390e:	2200      	movs	r2, #0
  403910:	210d      	movs	r1, #13
  403912:	6818      	ldr	r0, [r3, #0]
  403914:	4b09      	ldr	r3, [pc, #36]	; (40393c <lv_group_focus_obj+0xb0>)
  403916:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403918:	2801      	cmp	r0, #1
  40391a:	d1e8      	bne.n	4038ee <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  40391c:	68f3      	ldr	r3, [r6, #12]
  40391e:	6818      	ldr	r0, [r3, #0]
  403920:	4b07      	ldr	r3, [pc, #28]	; (403940 <lv_group_focus_obj+0xb4>)
  403922:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  403924:	68f3      	ldr	r3, [r6, #12]
  403926:	6818      	ldr	r0, [r3, #0]
  403928:	4b06      	ldr	r3, [pc, #24]	; (403944 <lv_group_focus_obj+0xb8>)
  40392a:	4798      	blx	r3
  40392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40392e:	4770      	bx	lr
  403930:	0040383d 	.word	0x0040383d
  403934:	00415d91 	.word	0x00415d91
  403938:	00415da5 	.word	0x00415da5
  40393c:	004056ad 	.word	0x004056ad
  403940:	00405d69 	.word	0x00405d69
  403944:	00403531 	.word	0x00403531

00403948 <lv_group_get_editing>:
    if(!group) return false;
  403948:	b118      	cbz	r0, 403952 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  40394a:	7d00      	ldrb	r0, [r0, #20]
  40394c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403950:	4770      	bx	lr
    if(!group) return false;
  403952:	2000      	movs	r0, #0
}
  403954:	4770      	bx	lr
	...

00403958 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  403958:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40395c:	f013 0f02 	tst.w	r3, #2
  403960:	d022      	beq.n	4039a8 <indev_proc_reset_query_handler+0x50>
{
  403962:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  403964:	2300      	movs	r3, #0
  403966:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  403968:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  40396a:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  40396e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  403972:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  403974:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  403976:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  403978:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  40397a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  40397e:	2403      	movs	r4, #3
  403980:	f364 0184 	bfi	r1, r4, #2, #3
  403984:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  403988:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  40398a:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  40398c:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  403990:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  403994:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  403998:	f363 0241 	bfi	r2, r3, #1, #1
  40399c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  4039a0:	4a02      	ldr	r2, [pc, #8]	; (4039ac <indev_proc_reset_query_handler+0x54>)
  4039a2:	6013      	str	r3, [r2, #0]
    }
}
  4039a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4039a8:	4770      	bx	lr
  4039aa:	bf00      	nop
  4039ac:	2040c390 	.word	0x2040c390

004039b0 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  4039b0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  4039b4:	f010 0002 	ands.w	r0, r0, #2
  4039b8:	d002      	beq.n	4039c0 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  4039ba:	2200      	movs	r2, #0
  4039bc:	4b02      	ldr	r3, [pc, #8]	; (4039c8 <indev_reset_check+0x18>)
  4039be:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  4039c0:	3000      	adds	r0, #0
  4039c2:	bf18      	it	ne
  4039c4:	2001      	movne	r0, #1
  4039c6:	4770      	bx	lr
  4039c8:	2040c390 	.word	0x2040c390

004039cc <get_dragged_obj>:
{
  4039cc:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  4039ce:	4604      	mov	r4, r0
  4039d0:	b920      	cbnz	r0, 4039dc <get_dragged_obj+0x10>
  4039d2:	e009      	b.n	4039e8 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  4039d4:	4620      	mov	r0, r4
  4039d6:	4b05      	ldr	r3, [pc, #20]	; (4039ec <get_dragged_obj+0x20>)
  4039d8:	4798      	blx	r3
  4039da:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  4039dc:	4620      	mov	r0, r4
  4039de:	4b04      	ldr	r3, [pc, #16]	; (4039f0 <get_dragged_obj+0x24>)
  4039e0:	4798      	blx	r3
  4039e2:	b108      	cbz	r0, 4039e8 <get_dragged_obj+0x1c>
  4039e4:	2c00      	cmp	r4, #0
  4039e6:	d1f5      	bne.n	4039d4 <get_dragged_obj+0x8>
}
  4039e8:	4620      	mov	r0, r4
  4039ea:	bd10      	pop	{r4, pc}
  4039ec:	004057bd 	.word	0x004057bd
  4039f0:	004065dd 	.word	0x004065dd

004039f4 <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  4039f4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  4039f8:	f013 0f02 	tst.w	r3, #2
  4039fc:	d100      	bne.n	403a00 <indev_drag_throw+0xc>
  4039fe:	4770      	bx	lr
{
  403a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a02:	b085      	sub	sp, #20
  403a04:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  403a06:	69c0      	ldr	r0, [r0, #28]
  403a08:	4b64      	ldr	r3, [pc, #400]	; (403b9c <indev_drag_throw+0x1a8>)
  403a0a:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403a0c:	4605      	mov	r5, r0
  403a0e:	b190      	cbz	r0, 403a36 <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403a10:	4b63      	ldr	r3, [pc, #396]	; (403ba0 <indev_drag_throw+0x1ac>)
  403a12:	4798      	blx	r3
  403a14:	b9b8      	cbnz	r0, 403a46 <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  403a16:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403a1a:	f36f 0341 	bfc	r3, #1, #1
  403a1e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403a22:	69eb      	ldr	r3, [r5, #28]
  403a24:	4a5f      	ldr	r2, [pc, #380]	; (403ba4 <indev_drag_throw+0x1b0>)
  403a26:	6812      	ldr	r2, [r2, #0]
  403a28:	2113      	movs	r1, #19
  403a2a:	4628      	mov	r0, r5
  403a2c:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403a2e:	4620      	mov	r0, r4
  403a30:	4b5d      	ldr	r3, [pc, #372]	; (403ba8 <indev_drag_throw+0x1b4>)
  403a32:	4798      	blx	r3
  403a34:	b108      	cbz	r0, 403a3a <indev_drag_throw+0x46>
}
  403a36:	b005      	add	sp, #20
  403a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403a3a:	2200      	movs	r2, #0
  403a3c:	2109      	movs	r1, #9
  403a3e:	4628      	mov	r0, r5
  403a40:	4b5a      	ldr	r3, [pc, #360]	; (403bac <indev_drag_throw+0x1b8>)
  403a42:	4798      	blx	r3
        return;
  403a44:	e7f7      	b.n	403a36 <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403a46:	4628      	mov	r0, r5
  403a48:	4b59      	ldr	r3, [pc, #356]	; (403bb0 <indev_drag_throw+0x1bc>)
  403a4a:	4798      	blx	r3
  403a4c:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  403a4e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403a52:	4a54      	ldr	r2, [pc, #336]	; (403ba4 <indev_drag_throw+0x1b0>)
  403a54:	6812      	ldr	r2, [r2, #0]
  403a56:	7d51      	ldrb	r1, [r2, #21]
  403a58:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  403a5c:	fb01 f103 	mul.w	r1, r1, r3
  403a60:	4854      	ldr	r0, [pc, #336]	; (403bb4 <indev_drag_throw+0x1c0>)
  403a62:	fb80 7301 	smull	r7, r3, r0, r1
  403a66:	17c9      	asrs	r1, r1, #31
  403a68:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  403a6c:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  403a6e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  403a72:	7d53      	ldrb	r3, [r2, #21]
  403a74:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  403a78:	fb03 f301 	mul.w	r3, r3, r1
  403a7c:	fb80 1003 	smull	r1, r0, r0, r3
  403a80:	17db      	asrs	r3, r3, #31
  403a82:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  403a86:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  403a88:	6963      	ldr	r3, [r4, #20]
  403a8a:	2b00      	cmp	r3, #0
  403a8c:	d06c      	beq.n	403b68 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  403a8e:	4669      	mov	r1, sp
  403a90:	4628      	mov	r0, r5
  403a92:	4b49      	ldr	r3, [pc, #292]	; (403bb8 <indev_drag_throw+0x1c4>)
  403a94:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  403a96:	4628      	mov	r0, r5
  403a98:	4b48      	ldr	r3, [pc, #288]	; (403bbc <indev_drag_throw+0x1c8>)
  403a9a:	4798      	blx	r3
  403a9c:	8aa3      	ldrh	r3, [r4, #20]
  403a9e:	fa13 f080 	uxtah	r0, r3, r0
  403aa2:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  403aa4:	4628      	mov	r0, r5
  403aa6:	4b46      	ldr	r3, [pc, #280]	; (403bc0 <indev_drag_throw+0x1cc>)
  403aa8:	4798      	blx	r3
  403aaa:	8ae2      	ldrh	r2, [r4, #22]
  403aac:	fa12 f280 	uxtah	r2, r2, r0
  403ab0:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403ab2:	2e03      	cmp	r6, #3
  403ab4:	d03c      	beq.n	403b30 <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403ab6:	2e01      	cmp	r6, #1
  403ab8:	d03f      	beq.n	403b3a <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403aba:	2e02      	cmp	r6, #2
  403abc:	d042      	beq.n	403b44 <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403abe:	2e04      	cmp	r6, #4
  403ac0:	d045      	beq.n	403b4e <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  403ac2:	a902      	add	r1, sp, #8
  403ac4:	4628      	mov	r0, r5
  403ac6:	4b3c      	ldr	r3, [pc, #240]	; (403bb8 <indev_drag_throw+0x1c4>)
  403ac8:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403aca:	f9bd 2000 	ldrsh.w	r2, [sp]
  403ace:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  403ad2:	429a      	cmp	r2, r3
  403ad4:	d003      	beq.n	403ade <indev_drag_throw+0xea>
  403ad6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403ada:	2b00      	cmp	r3, #0
  403adc:	d1ab      	bne.n	403a36 <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403ade:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  403ae2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403ae6:	429a      	cmp	r2, r3
  403ae8:	d003      	beq.n	403af2 <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403aea:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403aee:	2b00      	cmp	r3, #0
  403af0:	d1a1      	bne.n	403a36 <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  403af2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403af6:	f36f 0341 	bfc	r3, #1, #1
  403afa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  403afe:	2300      	movs	r3, #0
  403b00:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  403b02:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  403b04:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  403b06:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403b08:	69eb      	ldr	r3, [r5, #28]
  403b0a:	4a26      	ldr	r2, [pc, #152]	; (403ba4 <indev_drag_throw+0x1b0>)
  403b0c:	6812      	ldr	r2, [r2, #0]
  403b0e:	2113      	movs	r1, #19
  403b10:	4628      	mov	r0, r5
  403b12:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403b14:	4620      	mov	r0, r4
  403b16:	4b24      	ldr	r3, [pc, #144]	; (403ba8 <indev_drag_throw+0x1b4>)
  403b18:	4798      	blx	r3
  403b1a:	2800      	cmp	r0, #0
  403b1c:	d18b      	bne.n	403a36 <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403b1e:	2200      	movs	r2, #0
  403b20:	2109      	movs	r1, #9
  403b22:	4628      	mov	r0, r5
  403b24:	4b21      	ldr	r3, [pc, #132]	; (403bac <indev_drag_throw+0x1b8>)
  403b26:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403b28:	4620      	mov	r0, r4
  403b2a:	4b1f      	ldr	r3, [pc, #124]	; (403ba8 <indev_drag_throw+0x1b4>)
  403b2c:	4798      	blx	r3
  403b2e:	e782      	b.n	403a36 <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403b30:	4639      	mov	r1, r7
  403b32:	4628      	mov	r0, r5
  403b34:	4b23      	ldr	r3, [pc, #140]	; (403bc4 <indev_drag_throw+0x1d0>)
  403b36:	4798      	blx	r3
  403b38:	e7c3      	b.n	403ac2 <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403b3a:	4639      	mov	r1, r7
  403b3c:	4628      	mov	r0, r5
  403b3e:	4b22      	ldr	r3, [pc, #136]	; (403bc8 <indev_drag_throw+0x1d4>)
  403b40:	4798      	blx	r3
  403b42:	e7be      	b.n	403ac2 <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  403b44:	4611      	mov	r1, r2
  403b46:	4628      	mov	r0, r5
  403b48:	4b20      	ldr	r3, [pc, #128]	; (403bcc <indev_drag_throw+0x1d8>)
  403b4a:	4798      	blx	r3
  403b4c:	e7b9      	b.n	403ac2 <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  403b4e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  403b52:	b123      	cbz	r3, 403b5e <indev_drag_throw+0x16a>
  403b54:	4639      	mov	r1, r7
  403b56:	4628      	mov	r0, r5
  403b58:	4b1b      	ldr	r3, [pc, #108]	; (403bc8 <indev_drag_throw+0x1d4>)
  403b5a:	4798      	blx	r3
  403b5c:	e7b1      	b.n	403ac2 <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  403b5e:	4611      	mov	r1, r2
  403b60:	4628      	mov	r0, r5
  403b62:	4b1a      	ldr	r3, [pc, #104]	; (403bcc <indev_drag_throw+0x1d8>)
  403b64:	4798      	blx	r3
  403b66:	e7ac      	b.n	403ac2 <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  403b68:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403b6c:	f36f 0341 	bfc	r3, #1, #1
  403b70:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403b74:	69eb      	ldr	r3, [r5, #28]
  403b76:	2113      	movs	r1, #19
  403b78:	4628      	mov	r0, r5
  403b7a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403b7c:	4620      	mov	r0, r4
  403b7e:	4b0a      	ldr	r3, [pc, #40]	; (403ba8 <indev_drag_throw+0x1b4>)
  403b80:	4798      	blx	r3
  403b82:	2800      	cmp	r0, #0
  403b84:	f47f af57 	bne.w	403a36 <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403b88:	2200      	movs	r2, #0
  403b8a:	2109      	movs	r1, #9
  403b8c:	4628      	mov	r0, r5
  403b8e:	4b07      	ldr	r3, [pc, #28]	; (403bac <indev_drag_throw+0x1b8>)
  403b90:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403b92:	4620      	mov	r0, r4
  403b94:	4b04      	ldr	r3, [pc, #16]	; (403ba8 <indev_drag_throw+0x1b4>)
  403b96:	4798      	blx	r3
  403b98:	e74d      	b.n	403a36 <indev_drag_throw+0x42>
  403b9a:	bf00      	nop
  403b9c:	004039cd 	.word	0x004039cd
  403ba0:	004065b1 	.word	0x004065b1
  403ba4:	2040c38c 	.word	0x2040c38c
  403ba8:	004039b1 	.word	0x004039b1
  403bac:	004056ad 	.word	0x004056ad
  403bb0:	00406585 	.word	0x00406585
  403bb4:	51eb851f 	.word	0x51eb851f
  403bb8:	004058d1 	.word	0x004058d1
  403bbc:	00405911 	.word	0x00405911
  403bc0:	00405951 	.word	0x00405951
  403bc4:	00405e4d 	.word	0x00405e4d
  403bc8:	00405f05 	.word	0x00405f05
  403bcc:	00405f45 	.word	0x00405f45

00403bd0 <indev_proc_release>:
{
  403bd0:	b538      	push	{r3, r4, r5, lr}
  403bd2:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  403bd4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403bd8:	f013 0f08 	tst.w	r3, #8
  403bdc:	d00a      	beq.n	403bf4 <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  403bde:	2300      	movs	r3, #0
  403be0:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  403be2:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  403be4:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  403be6:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403be8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403bec:	f363 02c3 	bfi	r2, r3, #3, #1
  403bf0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  403bf4:	69a0      	ldr	r0, [r4, #24]
  403bf6:	4b59      	ldr	r3, [pc, #356]	; (403d5c <indev_proc_release+0x18c>)
  403bf8:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403bfa:	2800      	cmp	r0, #0
  403bfc:	f000 8093 	beq.w	403d26 <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403c00:	2110      	movs	r1, #16
  403c02:	4b57      	ldr	r3, [pc, #348]	; (403d60 <indev_proc_release+0x190>)
  403c04:	4798      	blx	r3
  403c06:	2800      	cmp	r0, #0
  403c08:	d038      	beq.n	403c7c <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403c0a:	4b54      	ldr	r3, [pc, #336]	; (403d5c <indev_proc_release+0x18c>)
  403c0c:	6818      	ldr	r0, [r3, #0]
  403c0e:	69c3      	ldr	r3, [r0, #28]
  403c10:	4a54      	ldr	r2, [pc, #336]	; (403d64 <indev_proc_release+0x194>)
  403c12:	6812      	ldr	r2, [r2, #0]
  403c14:	210e      	movs	r1, #14
  403c16:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403c18:	4620      	mov	r0, r4
  403c1a:	4b53      	ldr	r3, [pc, #332]	; (403d68 <indev_proc_release+0x198>)
  403c1c:	4798      	blx	r3
  403c1e:	2800      	cmp	r0, #0
  403c20:	f040 8088 	bne.w	403d34 <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  403c24:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c28:	f013 0f02 	tst.w	r3, #2
  403c2c:	d11a      	bne.n	403c64 <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  403c2e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403c32:	f013 0f01 	tst.w	r3, #1
  403c36:	d10a      	bne.n	403c4e <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403c38:	2200      	movs	r2, #0
  403c3a:	2103      	movs	r1, #3
  403c3c:	4b47      	ldr	r3, [pc, #284]	; (403d5c <indev_proc_release+0x18c>)
  403c3e:	6818      	ldr	r0, [r3, #0]
  403c40:	4b4a      	ldr	r3, [pc, #296]	; (403d6c <indev_proc_release+0x19c>)
  403c42:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403c44:	4620      	mov	r0, r4
  403c46:	4b48      	ldr	r3, [pc, #288]	; (403d68 <indev_proc_release+0x198>)
  403c48:	4798      	blx	r3
  403c4a:	2800      	cmp	r0, #0
  403c4c:	d172      	bne.n	403d34 <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403c4e:	2200      	movs	r2, #0
  403c50:	2106      	movs	r1, #6
  403c52:	4b42      	ldr	r3, [pc, #264]	; (403d5c <indev_proc_release+0x18c>)
  403c54:	6818      	ldr	r0, [r3, #0]
  403c56:	4b45      	ldr	r3, [pc, #276]	; (403d6c <indev_proc_release+0x19c>)
  403c58:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403c5a:	4620      	mov	r0, r4
  403c5c:	4b42      	ldr	r3, [pc, #264]	; (403d68 <indev_proc_release+0x198>)
  403c5e:	4798      	blx	r3
  403c60:	2800      	cmp	r0, #0
  403c62:	d167      	bne.n	403d34 <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403c64:	2200      	movs	r2, #0
  403c66:	2107      	movs	r1, #7
  403c68:	4b3c      	ldr	r3, [pc, #240]	; (403d5c <indev_proc_release+0x18c>)
  403c6a:	6818      	ldr	r0, [r3, #0]
  403c6c:	4b3f      	ldr	r3, [pc, #252]	; (403d6c <indev_proc_release+0x19c>)
  403c6e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403c70:	4620      	mov	r0, r4
  403c72:	4b3d      	ldr	r3, [pc, #244]	; (403d68 <indev_proc_release+0x198>)
  403c74:	4798      	blx	r3
  403c76:	2800      	cmp	r0, #0
  403c78:	d030      	beq.n	403cdc <indev_proc_release+0x10c>
  403c7a:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403c7c:	4b37      	ldr	r3, [pc, #220]	; (403d5c <indev_proc_release+0x18c>)
  403c7e:	6818      	ldr	r0, [r3, #0]
  403c80:	69c3      	ldr	r3, [r0, #28]
  403c82:	4a38      	ldr	r2, [pc, #224]	; (403d64 <indev_proc_release+0x194>)
  403c84:	6812      	ldr	r2, [r2, #0]
  403c86:	210e      	movs	r1, #14
  403c88:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403c8a:	4620      	mov	r0, r4
  403c8c:	4b36      	ldr	r3, [pc, #216]	; (403d68 <indev_proc_release+0x198>)
  403c8e:	4798      	blx	r3
  403c90:	2800      	cmp	r0, #0
  403c92:	d14f      	bne.n	403d34 <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  403c94:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403c98:	f013 0f01 	tst.w	r3, #1
  403c9c:	d104      	bne.n	403ca8 <indev_proc_release+0xd8>
  403c9e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403ca2:	f013 0f02 	tst.w	r3, #2
  403ca6:	d046      	beq.n	403d36 <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  403ca8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cac:	f013 0f02 	tst.w	r3, #2
  403cb0:	d10a      	bne.n	403cc8 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403cb2:	2200      	movs	r2, #0
  403cb4:	2106      	movs	r1, #6
  403cb6:	4b29      	ldr	r3, [pc, #164]	; (403d5c <indev_proc_release+0x18c>)
  403cb8:	6818      	ldr	r0, [r3, #0]
  403cba:	4b2c      	ldr	r3, [pc, #176]	; (403d6c <indev_proc_release+0x19c>)
  403cbc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403cbe:	4620      	mov	r0, r4
  403cc0:	4b29      	ldr	r3, [pc, #164]	; (403d68 <indev_proc_release+0x198>)
  403cc2:	4798      	blx	r3
  403cc4:	2800      	cmp	r0, #0
  403cc6:	d135      	bne.n	403d34 <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403cc8:	2200      	movs	r2, #0
  403cca:	2107      	movs	r1, #7
  403ccc:	4b23      	ldr	r3, [pc, #140]	; (403d5c <indev_proc_release+0x18c>)
  403cce:	6818      	ldr	r0, [r3, #0]
  403cd0:	4b26      	ldr	r3, [pc, #152]	; (403d6c <indev_proc_release+0x19c>)
  403cd2:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403cd4:	4620      	mov	r0, r4
  403cd6:	4b24      	ldr	r3, [pc, #144]	; (403d68 <indev_proc_release+0x198>)
  403cd8:	4798      	blx	r3
  403cda:	bb58      	cbnz	r0, 403d34 <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403cdc:	4b1f      	ldr	r3, [pc, #124]	; (403d5c <indev_proc_release+0x18c>)
  403cde:	6818      	ldr	r0, [r3, #0]
  403ce0:	4b23      	ldr	r3, [pc, #140]	; (403d70 <indev_proc_release+0x1a0>)
  403ce2:	4798      	blx	r3
        if(drag_obj) {
  403ce4:	4605      	mov	r5, r0
  403ce6:	b1d0      	cbz	r0, 403d1e <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403ce8:	4b22      	ldr	r3, [pc, #136]	; (403d74 <indev_proc_release+0x1a4>)
  403cea:	4798      	blx	r3
  403cec:	b1b8      	cbz	r0, 403d1e <indev_proc_release+0x14e>
  403cee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cf2:	f013 0f02 	tst.w	r3, #2
  403cf6:	d012      	beq.n	403d1e <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403cf8:	69eb      	ldr	r3, [r5, #28]
  403cfa:	b11b      	cbz	r3, 403d04 <indev_proc_release+0x134>
  403cfc:	2200      	movs	r2, #0
  403cfe:	2112      	movs	r1, #18
  403d00:	4628      	mov	r0, r5
  403d02:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d04:	4620      	mov	r0, r4
  403d06:	4b18      	ldr	r3, [pc, #96]	; (403d68 <indev_proc_release+0x198>)
  403d08:	4798      	blx	r3
  403d0a:	b998      	cbnz	r0, 403d34 <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403d0c:	2200      	movs	r2, #0
  403d0e:	210a      	movs	r1, #10
  403d10:	4628      	mov	r0, r5
  403d12:	4b16      	ldr	r3, [pc, #88]	; (403d6c <indev_proc_release+0x19c>)
  403d14:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d16:	4620      	mov	r0, r4
  403d18:	4b13      	ldr	r3, [pc, #76]	; (403d68 <indev_proc_release+0x198>)
  403d1a:	4798      	blx	r3
  403d1c:	b950      	cbnz	r0, 403d34 <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  403d1e:	2300      	movs	r3, #0
  403d20:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403d22:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403d24:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403d26:	69e3      	ldr	r3, [r4, #28]
  403d28:	b123      	cbz	r3, 403d34 <indev_proc_release+0x164>
  403d2a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403d2e:	f013 0f02 	tst.w	r3, #2
  403d32:	d00c      	beq.n	403d4e <indev_proc_release+0x17e>
  403d34:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403d36:	2200      	movs	r2, #0
  403d38:	2103      	movs	r1, #3
  403d3a:	4b08      	ldr	r3, [pc, #32]	; (403d5c <indev_proc_release+0x18c>)
  403d3c:	6818      	ldr	r0, [r3, #0]
  403d3e:	4b0b      	ldr	r3, [pc, #44]	; (403d6c <indev_proc_release+0x19c>)
  403d40:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403d42:	4620      	mov	r0, r4
  403d44:	4b08      	ldr	r3, [pc, #32]	; (403d68 <indev_proc_release+0x198>)
  403d46:	4798      	blx	r3
  403d48:	2800      	cmp	r0, #0
  403d4a:	d0ad      	beq.n	403ca8 <indev_proc_release+0xd8>
  403d4c:	e7f2      	b.n	403d34 <indev_proc_release+0x164>
        indev_drag_throw(proc);
  403d4e:	4620      	mov	r0, r4
  403d50:	4b09      	ldr	r3, [pc, #36]	; (403d78 <indev_proc_release+0x1a8>)
  403d52:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403d54:	4620      	mov	r0, r4
  403d56:	4b04      	ldr	r3, [pc, #16]	; (403d68 <indev_proc_release+0x198>)
  403d58:	4798      	blx	r3
  403d5a:	e7eb      	b.n	403d34 <indev_proc_release+0x164>
  403d5c:	2040c390 	.word	0x2040c390
  403d60:	00406bbd 	.word	0x00406bbd
  403d64:	2040c38c 	.word	0x2040c38c
  403d68:	004039b1 	.word	0x004039b1
  403d6c:	004056ad 	.word	0x004056ad
  403d70:	004039cd 	.word	0x004039cd
  403d74:	004065b1 	.word	0x004065b1
  403d78:	004039f5 	.word	0x004039f5

00403d7c <indev_click_focus>:
{
  403d7c:	b570      	push	{r4, r5, r6, lr}
  403d7e:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403d80:	4d58      	ldr	r5, [pc, #352]	; (403ee4 <indev_click_focus+0x168>)
  403d82:	6828      	ldr	r0, [r5, #0]
  403d84:	4b58      	ldr	r3, [pc, #352]	; (403ee8 <indev_click_focus+0x16c>)
  403d86:	4798      	blx	r3
  403d88:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403d8a:	2120      	movs	r1, #32
  403d8c:	6828      	ldr	r0, [r5, #0]
  403d8e:	4b57      	ldr	r3, [pc, #348]	; (403eec <indev_click_focus+0x170>)
  403d90:	4798      	blx	r3
  403d92:	b9e8      	cbnz	r0, 403dd0 <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403d94:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403d96:	429e      	cmp	r6, r3
  403d98:	d01a      	beq.n	403dd0 <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403d9a:	4630      	mov	r0, r6
  403d9c:	4b54      	ldr	r3, [pc, #336]	; (403ef0 <indev_click_focus+0x174>)
  403d9e:	4798      	blx	r3
  403da0:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403da2:	6a20      	ldr	r0, [r4, #32]
  403da4:	b1a8      	cbz	r0, 403dd2 <indev_click_focus+0x56>
  403da6:	4b52      	ldr	r3, [pc, #328]	; (403ef0 <indev_click_focus+0x174>)
  403da8:	4798      	blx	r3
  403daa:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403dac:	42ab      	cmp	r3, r5
  403dae:	d012      	beq.n	403dd6 <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403db0:	2b00      	cmp	r3, #0
  403db2:	d044      	beq.n	403e3e <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403db4:	6a20      	ldr	r0, [r4, #32]
  403db6:	2800      	cmp	r0, #0
  403db8:	d074      	beq.n	403ea4 <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403dba:	2b00      	cmp	r3, #0
  403dbc:	d055      	beq.n	403e6a <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403dbe:	2200      	movs	r2, #0
  403dc0:	2115      	movs	r1, #21
  403dc2:	4b4c      	ldr	r3, [pc, #304]	; (403ef4 <indev_click_focus+0x178>)
  403dc4:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403dc6:	4620      	mov	r0, r4
  403dc8:	4b4b      	ldr	r3, [pc, #300]	; (403ef8 <indev_click_focus+0x17c>)
  403dca:	4798      	blx	r3
  403dcc:	2800      	cmp	r0, #0
  403dce:	d05f      	beq.n	403e90 <indev_click_focus+0x114>
  403dd0:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403dd2:	2300      	movs	r3, #0
  403dd4:	e7ea      	b.n	403dac <indev_click_focus+0x30>
            if(g_act) {
  403dd6:	b145      	cbz	r5, 403dea <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403dd8:	4630      	mov	r0, r6
  403dda:	4b48      	ldr	r3, [pc, #288]	; (403efc <indev_click_focus+0x180>)
  403ddc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403dde:	4620      	mov	r0, r4
  403de0:	4b45      	ldr	r3, [pc, #276]	; (403ef8 <indev_click_focus+0x17c>)
  403de2:	4798      	blx	r3
  403de4:	2800      	cmp	r0, #0
  403de6:	d065      	beq.n	403eb4 <indev_click_focus+0x138>
  403de8:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403dea:	6a20      	ldr	r0, [r4, #32]
  403dec:	b190      	cbz	r0, 403e14 <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403dee:	2200      	movs	r2, #0
  403df0:	2117      	movs	r1, #23
  403df2:	4b40      	ldr	r3, [pc, #256]	; (403ef4 <indev_click_focus+0x178>)
  403df4:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403df6:	4620      	mov	r0, r4
  403df8:	4b3f      	ldr	r3, [pc, #252]	; (403ef8 <indev_click_focus+0x17c>)
  403dfa:	4798      	blx	r3
  403dfc:	2800      	cmp	r0, #0
  403dfe:	d1e7      	bne.n	403dd0 <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403e00:	2200      	movs	r2, #0
  403e02:	210e      	movs	r1, #14
  403e04:	6a20      	ldr	r0, [r4, #32]
  403e06:	4b3e      	ldr	r3, [pc, #248]	; (403f00 <indev_click_focus+0x184>)
  403e08:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403e0a:	4620      	mov	r0, r4
  403e0c:	4b3a      	ldr	r3, [pc, #232]	; (403ef8 <indev_click_focus+0x17c>)
  403e0e:	4798      	blx	r3
  403e10:	2800      	cmp	r0, #0
  403e12:	d1dd      	bne.n	403dd0 <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403e14:	2200      	movs	r2, #0
  403e16:	2116      	movs	r1, #22
  403e18:	4630      	mov	r0, r6
  403e1a:	4b36      	ldr	r3, [pc, #216]	; (403ef4 <indev_click_focus+0x178>)
  403e1c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e1e:	4620      	mov	r0, r4
  403e20:	4b35      	ldr	r3, [pc, #212]	; (403ef8 <indev_click_focus+0x17c>)
  403e22:	4798      	blx	r3
  403e24:	2800      	cmp	r0, #0
  403e26:	d1d3      	bne.n	403dd0 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403e28:	2200      	movs	r2, #0
  403e2a:	210d      	movs	r1, #13
  403e2c:	4630      	mov	r0, r6
  403e2e:	4b34      	ldr	r3, [pc, #208]	; (403f00 <indev_click_focus+0x184>)
  403e30:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e32:	4620      	mov	r0, r4
  403e34:	4b30      	ldr	r3, [pc, #192]	; (403ef8 <indev_click_focus+0x17c>)
  403e36:	4798      	blx	r3
  403e38:	2800      	cmp	r0, #0
  403e3a:	d03b      	beq.n	403eb4 <indev_click_focus+0x138>
  403e3c:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403e3e:	6a20      	ldr	r0, [r4, #32]
  403e40:	2800      	cmp	r0, #0
  403e42:	d0b7      	beq.n	403db4 <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403e44:	2200      	movs	r2, #0
  403e46:	2117      	movs	r1, #23
  403e48:	4b2a      	ldr	r3, [pc, #168]	; (403ef4 <indev_click_focus+0x178>)
  403e4a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e4c:	4620      	mov	r0, r4
  403e4e:	4b2a      	ldr	r3, [pc, #168]	; (403ef8 <indev_click_focus+0x17c>)
  403e50:	4798      	blx	r3
  403e52:	2800      	cmp	r0, #0
  403e54:	d1bc      	bne.n	403dd0 <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403e56:	2200      	movs	r2, #0
  403e58:	210e      	movs	r1, #14
  403e5a:	6a20      	ldr	r0, [r4, #32]
  403e5c:	4b28      	ldr	r3, [pc, #160]	; (403f00 <indev_click_focus+0x184>)
  403e5e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403e60:	4620      	mov	r0, r4
  403e62:	4b25      	ldr	r3, [pc, #148]	; (403ef8 <indev_click_focus+0x17c>)
  403e64:	4798      	blx	r3
  403e66:	b1e8      	cbz	r0, 403ea4 <indev_click_focus+0x128>
  403e68:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403e6a:	2200      	movs	r2, #0
  403e6c:	2117      	movs	r1, #23
  403e6e:	4b21      	ldr	r3, [pc, #132]	; (403ef4 <indev_click_focus+0x178>)
  403e70:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403e72:	4620      	mov	r0, r4
  403e74:	4b20      	ldr	r3, [pc, #128]	; (403ef8 <indev_click_focus+0x17c>)
  403e76:	4798      	blx	r3
  403e78:	2800      	cmp	r0, #0
  403e7a:	d1a9      	bne.n	403dd0 <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403e7c:	2200      	movs	r2, #0
  403e7e:	210e      	movs	r1, #14
  403e80:	6a20      	ldr	r0, [r4, #32]
  403e82:	4b1f      	ldr	r3, [pc, #124]	; (403f00 <indev_click_focus+0x184>)
  403e84:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403e86:	4620      	mov	r0, r4
  403e88:	4b1b      	ldr	r3, [pc, #108]	; (403ef8 <indev_click_focus+0x17c>)
  403e8a:	4798      	blx	r3
  403e8c:	b150      	cbz	r0, 403ea4 <indev_click_focus+0x128>
  403e8e:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  403e90:	2200      	movs	r2, #0
  403e92:	210f      	movs	r1, #15
  403e94:	6a20      	ldr	r0, [r4, #32]
  403e96:	4b1a      	ldr	r3, [pc, #104]	; (403f00 <indev_click_focus+0x184>)
  403e98:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403e9a:	4620      	mov	r0, r4
  403e9c:	4b16      	ldr	r3, [pc, #88]	; (403ef8 <indev_click_focus+0x17c>)
  403e9e:	4798      	blx	r3
  403ea0:	2800      	cmp	r0, #0
  403ea2:	d195      	bne.n	403dd0 <indev_click_focus+0x54>
            if(g_act) {
  403ea4:	b14d      	cbz	r5, 403eba <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  403ea6:	4630      	mov	r0, r6
  403ea8:	4b14      	ldr	r3, [pc, #80]	; (403efc <indev_click_focus+0x180>)
  403eaa:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403eac:	4620      	mov	r0, r4
  403eae:	4b12      	ldr	r3, [pc, #72]	; (403ef8 <indev_click_focus+0x17c>)
  403eb0:	4798      	blx	r3
  403eb2:	b908      	cbnz	r0, 403eb8 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  403eb4:	6226      	str	r6, [r4, #32]
  403eb6:	e78b      	b.n	403dd0 <indev_click_focus+0x54>
  403eb8:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403eba:	2200      	movs	r2, #0
  403ebc:	2116      	movs	r1, #22
  403ebe:	4630      	mov	r0, r6
  403ec0:	4b0c      	ldr	r3, [pc, #48]	; (403ef4 <indev_click_focus+0x178>)
  403ec2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ec4:	4620      	mov	r0, r4
  403ec6:	4b0c      	ldr	r3, [pc, #48]	; (403ef8 <indev_click_focus+0x17c>)
  403ec8:	4798      	blx	r3
  403eca:	2800      	cmp	r0, #0
  403ecc:	d180      	bne.n	403dd0 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403ece:	2200      	movs	r2, #0
  403ed0:	210d      	movs	r1, #13
  403ed2:	4630      	mov	r0, r6
  403ed4:	4b0a      	ldr	r3, [pc, #40]	; (403f00 <indev_click_focus+0x184>)
  403ed6:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403ed8:	4620      	mov	r0, r4
  403eda:	4b07      	ldr	r3, [pc, #28]	; (403ef8 <indev_click_focus+0x17c>)
  403edc:	4798      	blx	r3
  403ede:	2800      	cmp	r0, #0
  403ee0:	d0e8      	beq.n	403eb4 <indev_click_focus+0x138>
  403ee2:	e775      	b.n	403dd0 <indev_click_focus+0x54>
  403ee4:	2040c390 	.word	0x2040c390
  403ee8:	00408fc1 	.word	0x00408fc1
  403eec:	00406bbd 	.word	0x00406bbd
  403ef0:	00407e4d 	.word	0x00407e4d
  403ef4:	00405715 	.word	0x00405715
  403ef8:	004039b1 	.word	0x004039b1
  403efc:	0040388d 	.word	0x0040388d
  403f00:	004056ad 	.word	0x004056ad

00403f04 <indev_drag>:
{
  403f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403f08:	b083      	sub	sp, #12
  403f0a:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  403f0c:	6980      	ldr	r0, [r0, #24]
  403f0e:	4bb3      	ldr	r3, [pc, #716]	; (4041dc <indev_drag+0x2d8>)
  403f10:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403f12:	b120      	cbz	r0, 403f1e <indev_drag+0x1a>
  403f14:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  403f16:	4bb2      	ldr	r3, [pc, #712]	; (4041e0 <indev_drag+0x2dc>)
  403f18:	4798      	blx	r3
  403f1a:	4680      	mov	r8, r0
  403f1c:	b910      	cbnz	r0, 403f24 <indev_drag+0x20>
}
  403f1e:	b003      	add	sp, #12
  403f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403f24:	4628      	mov	r0, r5
  403f26:	4baf      	ldr	r3, [pc, #700]	; (4041e4 <indev_drag+0x2e0>)
  403f28:	4798      	blx	r3
  403f2a:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  403f2c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403f30:	f013 0f01 	tst.w	r3, #1
  403f34:	d142      	bne.n	403fbc <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  403f36:	89a3      	ldrh	r3, [r4, #12]
  403f38:	8a22      	ldrh	r2, [r4, #16]
  403f3a:	4413      	add	r3, r2
  403f3c:	b21b      	sxth	r3, r3
  403f3e:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  403f40:	89e2      	ldrh	r2, [r4, #14]
  403f42:	8a61      	ldrh	r1, [r4, #18]
  403f44:	440a      	add	r2, r1
  403f46:	b211      	sxth	r1, r2
  403f48:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403f4a:	2803      	cmp	r0, #3
  403f4c:	bf18      	it	ne
  403f4e:	2801      	cmpne	r0, #1
  403f50:	bf0c      	ite	eq
  403f52:	2001      	moveq	r0, #1
  403f54:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403f56:	1eb2      	subs	r2, r6, #2
  403f58:	b2d2      	uxtb	r2, r2
  403f5a:	2a01      	cmp	r2, #1
  403f5c:	d91e      	bls.n	403f9c <indev_drag+0x98>
        bool ver_en = false;
  403f5e:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403f60:	2e04      	cmp	r6, #4
  403f62:	d01d      	beq.n	403fa0 <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  403f64:	b138      	cbz	r0, 403f76 <indev_drag+0x72>
  403f66:	2b00      	cmp	r3, #0
  403f68:	bfb8      	it	lt
  403f6a:	425b      	neglt	r3, r3
  403f6c:	4a9e      	ldr	r2, [pc, #632]	; (4041e8 <indev_drag+0x2e4>)
  403f6e:	6812      	ldr	r2, [r2, #0]
  403f70:	7d12      	ldrb	r2, [r2, #20]
  403f72:	4293      	cmp	r3, r2
  403f74:	da0a      	bge.n	403f8c <indev_drag+0x88>
  403f76:	b317      	cbz	r7, 403fbe <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  403f78:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403f7c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403f80:	4b99      	ldr	r3, [pc, #612]	; (4041e8 <indev_drag+0x2e4>)
  403f82:	681b      	ldr	r3, [r3, #0]
  403f84:	7d1b      	ldrb	r3, [r3, #20]
  403f86:	429a      	cmp	r2, r3
  403f88:	f2c0 808d 	blt.w	4040a6 <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  403f8c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403f90:	f043 0301 	orr.w	r3, r3, #1
  403f94:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  403f98:	4647      	mov	r7, r8
  403f9a:	e010      	b.n	403fbe <indev_drag+0xba>
            ver_en = true;
  403f9c:	4647      	mov	r7, r8
  403f9e:	e7df      	b.n	403f60 <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403fa0:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  403fa4:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  403fa8:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403fac:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403fb0:	4596      	cmp	lr, r2
  403fb2:	dd01      	ble.n	403fb8 <indev_drag+0xb4>
                hor_en = true;
  403fb4:	4640      	mov	r0, r8
  403fb6:	e7d5      	b.n	403f64 <indev_drag+0x60>
                ver_en = true;
  403fb8:	4647      	mov	r7, r8
  403fba:	e7d3      	b.n	403f64 <indev_drag+0x60>
    bool drag_just_started = false;
  403fbc:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  403fbe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403fc2:	f013 0f01 	tst.w	r3, #1
  403fc6:	d0aa      	beq.n	403f1e <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  403fc8:	68e3      	ldr	r3, [r4, #12]
  403fca:	2b00      	cmp	r3, #0
  403fcc:	d0a7      	beq.n	403f1e <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  403fce:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  403fd2:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403fd6:	4628      	mov	r0, r5
  403fd8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 404210 <indev_drag+0x30c>
  403fdc:	47c0      	blx	r8
  403fde:	4b83      	ldr	r3, [pc, #524]	; (4041ec <indev_drag+0x2e8>)
  403fe0:	4798      	blx	r3
  403fe2:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403fe4:	4628      	mov	r0, r5
  403fe6:	47c0      	blx	r8
  403fe8:	4b81      	ldr	r3, [pc, #516]	; (4041f0 <indev_drag+0x2ec>)
  403fea:	4798      	blx	r3
  403fec:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  403fee:	4628      	mov	r0, r5
  403ff0:	4b80      	ldr	r3, [pc, #512]	; (4041f4 <indev_drag+0x2f0>)
  403ff2:	4798      	blx	r3
  403ff4:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  403ff6:	4628      	mov	r0, r5
  403ff8:	4b7f      	ldr	r3, [pc, #508]	; (4041f8 <indev_drag+0x2f4>)
  403ffa:	4798      	blx	r3
  403ffc:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  403ffe:	2e03      	cmp	r6, #3
  404000:	d053      	beq.n	4040aa <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  404002:	2e01      	cmp	r6, #1
  404004:	d063      	beq.n	4040ce <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  404006:	2e02      	cmp	r6, #2
  404008:	d071      	beq.n	4040ee <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  40400a:	2e04      	cmp	r6, #4
  40400c:	d07f      	beq.n	40410e <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  40400e:	2e03      	cmp	r6, #3
  404010:	bf18      	it	ne
  404012:	2e01      	cmpne	r6, #1
  404014:	d00d      	beq.n	404032 <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  404016:	2e04      	cmp	r6, #4
  404018:	d10f      	bne.n	40403a <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  40401a:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  40401e:	2a00      	cmp	r2, #0
  404020:	bfb8      	it	lt
  404022:	4252      	neglt	r2, r2
  404024:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  404028:	2b00      	cmp	r3, #0
  40402a:	bfb8      	it	lt
  40402c:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  40402e:	429a      	cmp	r2, r3
  404030:	dd03      	ble.n	40403a <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  404032:	89a3      	ldrh	r3, [r4, #12]
  404034:	4498      	add	r8, r3
  404036:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  40403a:	1eb3      	subs	r3, r6, #2
  40403c:	b2db      	uxtb	r3, r3
  40403e:	2b01      	cmp	r3, #1
  404040:	f240 809f 	bls.w	404182 <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  404044:	2e04      	cmp	r6, #4
  404046:	f000 808f 	beq.w	404168 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  40404a:	4b67      	ldr	r3, [pc, #412]	; (4041e8 <indev_drag+0x2e4>)
  40404c:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  40404e:	68d8      	ldr	r0, [r3, #12]
  404050:	4b6a      	ldr	r3, [pc, #424]	; (4041fc <indev_drag+0x2f8>)
  404052:	4798      	blx	r3
  404054:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  404056:	464a      	mov	r2, r9
  404058:	4641      	mov	r1, r8
  40405a:	4628      	mov	r0, r5
  40405c:	4b68      	ldr	r3, [pc, #416]	; (404200 <indev_drag+0x2fc>)
  40405e:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  404060:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404064:	f043 0302 	orr.w	r3, r3, #2
  404068:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  40406c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  404070:	459a      	cmp	sl, r3
  404072:	f000 808b 	beq.w	40418c <indev_drag+0x288>
            if(drag_just_started) {
  404076:	2f00      	cmp	r7, #0
  404078:	f43f af51 	beq.w	403f1e <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  40407c:	69eb      	ldr	r3, [r5, #28]
  40407e:	4a5a      	ldr	r2, [pc, #360]	; (4041e8 <indev_drag+0x2e4>)
  404080:	6812      	ldr	r2, [r2, #0]
  404082:	2111      	movs	r1, #17
  404084:	4628      	mov	r0, r5
  404086:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404088:	4620      	mov	r0, r4
  40408a:	4b5e      	ldr	r3, [pc, #376]	; (404204 <indev_drag+0x300>)
  40408c:	4798      	blx	r3
  40408e:	2800      	cmp	r0, #0
  404090:	f47f af45 	bne.w	403f1e <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  404094:	2200      	movs	r2, #0
  404096:	2108      	movs	r1, #8
  404098:	4628      	mov	r0, r5
  40409a:	4b5b      	ldr	r3, [pc, #364]	; (404208 <indev_drag+0x304>)
  40409c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  40409e:	4620      	mov	r0, r4
  4040a0:	4b58      	ldr	r3, [pc, #352]	; (404204 <indev_drag+0x300>)
  4040a2:	4798      	blx	r3
  4040a4:	e73b      	b.n	403f1e <indev_drag+0x1a>
    bool drag_just_started = false;
  4040a6:	2700      	movs	r7, #0
  4040a8:	e789      	b.n	403fbe <indev_drag+0xba>
                if(drag_just_started) {
  4040aa:	2f00      	cmp	r7, #0
  4040ac:	d0af      	beq.n	40400e <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  4040ae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040b2:	2203      	movs	r2, #3
  4040b4:	f362 0384 	bfi	r3, r2, #2, #3
  4040b8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  4040bc:	8a23      	ldrh	r3, [r4, #16]
  4040be:	4498      	add	r8, r3
  4040c0:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  4040c4:	8a63      	ldrh	r3, [r4, #18]
  4040c6:	4499      	add	r9, r3
  4040c8:	fa0f f989 	sxth.w	r9, r9
  4040cc:	e79f      	b.n	40400e <indev_drag+0x10a>
                if(drag_just_started) {
  4040ce:	2f00      	cmp	r7, #0
  4040d0:	d09d      	beq.n	40400e <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  4040d2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040d6:	2201      	movs	r2, #1
  4040d8:	f362 0384 	bfi	r3, r2, #2, #3
  4040dc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  4040e0:	2300      	movs	r3, #0
  4040e2:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  4040e4:	8a23      	ldrh	r3, [r4, #16]
  4040e6:	4498      	add	r8, r3
  4040e8:	fa0f f888 	sxth.w	r8, r8
  4040ec:	e78f      	b.n	40400e <indev_drag+0x10a>
                if(drag_just_started) {
  4040ee:	2f00      	cmp	r7, #0
  4040f0:	d08d      	beq.n	40400e <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  4040f2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4040f6:	2202      	movs	r2, #2
  4040f8:	f362 0384 	bfi	r3, r2, #2, #3
  4040fc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  404100:	2300      	movs	r3, #0
  404102:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  404104:	8a63      	ldrh	r3, [r4, #18]
  404106:	4499      	add	r9, r3
  404108:	fa0f f989 	sxth.w	r9, r9
  40410c:	e77f      	b.n	40400e <indev_drag+0x10a>
                if(drag_just_started) {
  40410e:	2f00      	cmp	r7, #0
  404110:	f43f af7d 	beq.w	40400e <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  404114:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  404118:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  40411c:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  404120:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  404124:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  404128:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  40412c:	4288      	cmp	r0, r1
  40412e:	dd0d      	ble.n	40414c <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  404130:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404134:	2101      	movs	r1, #1
  404136:	f361 0384 	bfi	r3, r1, #2, #3
  40413a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  40413e:	2300      	movs	r3, #0
  404140:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  404142:	fa18 f882 	uxtah	r8, r8, r2
  404146:	fa0f f888 	sxth.w	r8, r8
  40414a:	e760      	b.n	40400e <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  40414c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  404150:	2102      	movs	r1, #2
  404152:	f361 0284 	bfi	r2, r1, #2, #3
  404156:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  40415a:	2200      	movs	r2, #0
  40415c:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  40415e:	fa19 f983 	uxtah	r9, r9, r3
  404162:	fa0f f989 	sxth.w	r9, r9
  404166:	e752      	b.n	40400e <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  404168:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  40416c:	2a00      	cmp	r2, #0
  40416e:	bfb8      	it	lt
  404170:	4252      	neglt	r2, r2
  404172:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  404176:	2b00      	cmp	r3, #0
  404178:	bfb8      	it	lt
  40417a:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  40417c:	429a      	cmp	r2, r3
  40417e:	f6bf af64 	bge.w	40404a <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  404182:	89e3      	ldrh	r3, [r4, #14]
  404184:	4499      	add	r9, r3
  404186:	fa0f f989 	sxth.w	r9, r9
  40418a:	e75e      	b.n	40404a <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  40418c:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  404190:	459b      	cmp	fp, r3
  404192:	f47f af70 	bne.w	404076 <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  404196:	4628      	mov	r0, r5
  404198:	f8df 8074 	ldr.w	r8, [pc, #116]	; 404210 <indev_drag+0x30c>
  40419c:	47c0      	blx	r8
  40419e:	4b13      	ldr	r3, [pc, #76]	; (4041ec <indev_drag+0x2e8>)
  4041a0:	4798      	blx	r3
  4041a2:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  4041a4:	4628      	mov	r0, r5
  4041a6:	47c0      	blx	r8
  4041a8:	4b11      	ldr	r3, [pc, #68]	; (4041f0 <indev_drag+0x2ec>)
  4041aa:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  4041ac:	9b00      	ldr	r3, [sp, #0]
  4041ae:	461a      	mov	r2, r3
  4041b0:	9b01      	ldr	r3, [sp, #4]
  4041b2:	454a      	cmp	r2, r9
  4041b4:	bf08      	it	eq
  4041b6:	4283      	cmpeq	r3, r0
  4041b8:	f47f af5d 	bne.w	404076 <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  4041bc:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4041e8 <indev_drag+0x2e4>
  4041c0:	f8d8 3000 	ldr.w	r3, [r8]
  4041c4:	68d8      	ldr	r0, [r3, #12]
  4041c6:	4b0d      	ldr	r3, [pc, #52]	; (4041fc <indev_drag+0x2f8>)
  4041c8:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  4041ca:	f8d8 3000 	ldr.w	r3, [r8]
  4041ce:	1b81      	subs	r1, r0, r6
  4041d0:	b289      	uxth	r1, r1
  4041d2:	68d8      	ldr	r0, [r3, #12]
  4041d4:	4b0d      	ldr	r3, [pc, #52]	; (40420c <indev_drag+0x308>)
  4041d6:	4798      	blx	r3
  4041d8:	e74d      	b.n	404076 <indev_drag+0x172>
  4041da:	bf00      	nop
  4041dc:	004039cd 	.word	0x004039cd
  4041e0:	00406559 	.word	0x00406559
  4041e4:	00406585 	.word	0x00406585
  4041e8:	2040c38c 	.word	0x2040c38c
  4041ec:	00405991 	.word	0x00405991
  4041f0:	004059c1 	.word	0x004059c1
  4041f4:	00405911 	.word	0x00405911
  4041f8:	00405951 	.word	0x00405951
  4041fc:	00414a01 	.word	0x00414a01
  404200:	00405e4d 	.word	0x00405e4d
  404204:	004039b1 	.word	0x004039b1
  404208:	004056ad 	.word	0x004056ad
  40420c:	00414a0b 	.word	0x00414a0b
  404210:	004057bd 	.word	0x004057bd

00404214 <indev_gesture>:
{
  404214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  404216:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  40421a:	f013 0f20 	tst.w	r3, #32
  40421e:	d153      	bne.n	4042c8 <indev_gesture+0xb4>
  404220:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  404222:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  404224:	e003      	b.n	40422e <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  404226:	4620      	mov	r0, r4
  404228:	4b33      	ldr	r3, [pc, #204]	; (4042f8 <indev_gesture+0xe4>)
  40422a:	4798      	blx	r3
  40422c:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  40422e:	b124      	cbz	r4, 40423a <indev_gesture+0x26>
  404230:	4620      	mov	r0, r4
  404232:	4b32      	ldr	r3, [pc, #200]	; (4042fc <indev_gesture+0xe8>)
  404234:	4798      	blx	r3
  404236:	2800      	cmp	r0, #0
  404238:	d1f5      	bne.n	404226 <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  40423a:	2c00      	cmp	r4, #0
  40423c:	d044      	beq.n	4042c8 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  40423e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  404242:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  404246:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  40424a:	4a2d      	ldr	r2, [pc, #180]	; (404300 <indev_gesture+0xec>)
  40424c:	6812      	ldr	r2, [r2, #0]
  40424e:	7d91      	ldrb	r1, [r2, #22]
  404250:	4288      	cmp	r0, r1
  404252:	da09      	bge.n	404268 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  404254:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  404258:	2800      	cmp	r0, #0
  40425a:	bfb8      	it	lt
  40425c:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  40425e:	4281      	cmp	r1, r0
  404260:	dd02      	ble.n	404268 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  404262:	2100      	movs	r1, #0
  404264:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  404266:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  404268:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  40426a:	fa11 f383 	uxtah	r3, r1, r3
  40426e:	b21b      	sxth	r3, r3
  404270:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  404272:	89e9      	ldrh	r1, [r5, #14]
  404274:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  404276:	4401      	add	r1, r0
  404278:	b209      	sxth	r1, r1
  40427a:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  40427c:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  404280:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  404284:	7dd0      	ldrb	r0, [r2, #23]
  404286:	4286      	cmp	r6, r0
  404288:	dc05      	bgt.n	404296 <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  40428a:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  40428e:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  404292:	42b8      	cmp	r0, r7
  404294:	da18      	bge.n	4042c8 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  404296:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  40429a:	f040 0020 	orr.w	r0, r0, #32
  40429e:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  4042a2:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  4042a6:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  4042aa:	4286      	cmp	r6, r0
  4042ac:	dd11      	ble.n	4042d2 <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  4042ae:	2b00      	cmp	r3, #0
  4042b0:	dd0b      	ble.n	4042ca <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  4042b2:	2303      	movs	r3, #3
  4042b4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  4042b8:	69e3      	ldr	r3, [r4, #28]
  4042ba:	2114      	movs	r1, #20
  4042bc:	4620      	mov	r0, r4
  4042be:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4042c0:	4628      	mov	r0, r5
  4042c2:	4b10      	ldr	r3, [pc, #64]	; (404304 <indev_gesture+0xf0>)
  4042c4:	4798      	blx	r3
  4042c6:	b170      	cbz	r0, 4042e6 <indev_gesture+0xd2>
  4042c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  4042ca:	2302      	movs	r3, #2
  4042cc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  4042d0:	e7f2      	b.n	4042b8 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  4042d2:	2900      	cmp	r1, #0
  4042d4:	dd03      	ble.n	4042de <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  4042d6:	2301      	movs	r3, #1
  4042d8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  4042dc:	e7ec      	b.n	4042b8 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  4042de:	2300      	movs	r3, #0
  4042e0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  4042e4:	e7e8      	b.n	4042b8 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  4042e6:	2200      	movs	r2, #0
  4042e8:	210b      	movs	r1, #11
  4042ea:	4620      	mov	r0, r4
  4042ec:	4b06      	ldr	r3, [pc, #24]	; (404308 <indev_gesture+0xf4>)
  4042ee:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4042f0:	4628      	mov	r0, r5
  4042f2:	4b04      	ldr	r3, [pc, #16]	; (404304 <indev_gesture+0xf0>)
  4042f4:	4798      	blx	r3
  4042f6:	e7e7      	b.n	4042c8 <indev_gesture+0xb4>
  4042f8:	004057bd 	.word	0x004057bd
  4042fc:	004065e7 	.word	0x004065e7
  404300:	2040c38c 	.word	0x2040c38c
  404304:	004039b1 	.word	0x004039b1
  404308:	004056ad 	.word	0x004056ad

0040430c <indev_keypad_proc>:
{
  40430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  40430e:	7b8b      	ldrb	r3, [r1, #14]
  404310:	2b01      	cmp	r3, #1
  404312:	d02f      	beq.n	404374 <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  404314:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404318:	f013 0f08 	tst.w	r3, #8
  40431c:	d00b      	beq.n	404336 <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  40431e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  404322:	2200      	movs	r2, #0
  404324:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  404326:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  40432a:	f362 0300 	bfi	r3, r2, #0, #1
  40432e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  404332:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  404336:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  404338:	b1de      	cbz	r6, 404372 <indev_keypad_proc+0x66>
  40433a:	460d      	mov	r5, r1
  40433c:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  40433e:	4630      	mov	r0, r6
  404340:	4b95      	ldr	r3, [pc, #596]	; (404598 <indev_keypad_proc+0x28c>)
  404342:	4798      	blx	r3
  404344:	4b95      	ldr	r3, [pc, #596]	; (40459c <indev_keypad_proc+0x290>)
  404346:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404348:	b198      	cbz	r0, 404372 <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  40434a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  40434c:	686b      	ldr	r3, [r5, #4]
  40434e:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  404350:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  404354:	7bab      	ldrb	r3, [r5, #14]
  404356:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  40435a:	7bab      	ldrb	r3, [r5, #14]
  40435c:	2b01      	cmp	r3, #1
  40435e:	d00f      	beq.n	404380 <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  404360:	2b01      	cmp	r3, #1
  404362:	d066      	beq.n	404432 <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  404364:	b913      	cbnz	r3, 40436c <indev_keypad_proc+0x60>
  404366:	2a01      	cmp	r2, #1
  404368:	f000 810a 	beq.w	404580 <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  40436c:	2200      	movs	r2, #0
  40436e:	4b8b      	ldr	r3, [pc, #556]	; (40459c <indev_keypad_proc+0x290>)
  404370:	601a      	str	r2, [r3, #0]
  404372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404374:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404378:	f013 0f08 	tst.w	r3, #8
  40437c:	d0ca      	beq.n	404314 <indev_keypad_proc+0x8>
  40437e:	e7f8      	b.n	404372 <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404380:	2a00      	cmp	r2, #0
  404382:	d1ed      	bne.n	404360 <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  404384:	4b86      	ldr	r3, [pc, #536]	; (4045a0 <indev_keypad_proc+0x294>)
  404386:	4798      	blx	r3
  404388:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40438a:	6869      	ldr	r1, [r5, #4]
  40438c:	290a      	cmp	r1, #10
  40438e:	d009      	beq.n	4043a4 <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  404390:	291b      	cmp	r1, #27
  404392:	d022      	beq.n	4043da <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  404394:	2909      	cmp	r1, #9
  404396:	d030      	beq.n	4043fa <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  404398:	290b      	cmp	r1, #11
  40439a:	d03c      	beq.n	404416 <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  40439c:	4630      	mov	r0, r6
  40439e:	4b81      	ldr	r3, [pc, #516]	; (4045a4 <indev_keypad_proc+0x298>)
  4043a0:	4798      	blx	r3
  4043a2:	e7e3      	b.n	40436c <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  4043a4:	4630      	mov	r0, r6
  4043a6:	4b7f      	ldr	r3, [pc, #508]	; (4045a4 <indev_keypad_proc+0x298>)
  4043a8:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  4043aa:	4b7c      	ldr	r3, [pc, #496]	; (40459c <indev_keypad_proc+0x290>)
  4043ac:	6818      	ldr	r0, [r3, #0]
  4043ae:	69c3      	ldr	r3, [r0, #28]
  4043b0:	2200      	movs	r2, #0
  4043b2:	210b      	movs	r1, #11
  4043b4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4043b6:	341c      	adds	r4, #28
  4043b8:	4620      	mov	r0, r4
  4043ba:	4b7b      	ldr	r3, [pc, #492]	; (4045a8 <indev_keypad_proc+0x29c>)
  4043bc:	4798      	blx	r3
  4043be:	2800      	cmp	r0, #0
  4043c0:	d1d7      	bne.n	404372 <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4043c2:	2200      	movs	r2, #0
  4043c4:	4611      	mov	r1, r2
  4043c6:	4b75      	ldr	r3, [pc, #468]	; (40459c <indev_keypad_proc+0x290>)
  4043c8:	6818      	ldr	r0, [r3, #0]
  4043ca:	4b78      	ldr	r3, [pc, #480]	; (4045ac <indev_keypad_proc+0x2a0>)
  4043cc:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4043ce:	4620      	mov	r0, r4
  4043d0:	4b75      	ldr	r3, [pc, #468]	; (4045a8 <indev_keypad_proc+0x29c>)
  4043d2:	4798      	blx	r3
  4043d4:	2800      	cmp	r0, #0
  4043d6:	d0c9      	beq.n	40436c <indev_keypad_proc+0x60>
  4043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  4043da:	4630      	mov	r0, r6
  4043dc:	4b71      	ldr	r3, [pc, #452]	; (4045a4 <indev_keypad_proc+0x298>)
  4043de:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  4043e0:	2200      	movs	r2, #0
  4043e2:	2114      	movs	r1, #20
  4043e4:	4b6d      	ldr	r3, [pc, #436]	; (40459c <indev_keypad_proc+0x290>)
  4043e6:	6818      	ldr	r0, [r3, #0]
  4043e8:	4b70      	ldr	r3, [pc, #448]	; (4045ac <indev_keypad_proc+0x2a0>)
  4043ea:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4043ec:	f104 001c 	add.w	r0, r4, #28
  4043f0:	4b6d      	ldr	r3, [pc, #436]	; (4045a8 <indev_keypad_proc+0x29c>)
  4043f2:	4798      	blx	r3
  4043f4:	2800      	cmp	r0, #0
  4043f6:	d0b9      	beq.n	40436c <indev_keypad_proc+0x60>
  4043f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  4043fa:	2100      	movs	r1, #0
  4043fc:	4630      	mov	r0, r6
  4043fe:	4b6c      	ldr	r3, [pc, #432]	; (4045b0 <indev_keypad_proc+0x2a4>)
  404400:	4798      	blx	r3
            lv_group_focus_next(g);
  404402:	4630      	mov	r0, r6
  404404:	4b6b      	ldr	r3, [pc, #428]	; (4045b4 <indev_keypad_proc+0x2a8>)
  404406:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404408:	f104 001c 	add.w	r0, r4, #28
  40440c:	4b66      	ldr	r3, [pc, #408]	; (4045a8 <indev_keypad_proc+0x29c>)
  40440e:	4798      	blx	r3
  404410:	2800      	cmp	r0, #0
  404412:	d0ab      	beq.n	40436c <indev_keypad_proc+0x60>
  404414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404416:	2100      	movs	r1, #0
  404418:	4630      	mov	r0, r6
  40441a:	4b65      	ldr	r3, [pc, #404]	; (4045b0 <indev_keypad_proc+0x2a4>)
  40441c:	4798      	blx	r3
            lv_group_focus_prev(g);
  40441e:	4630      	mov	r0, r6
  404420:	4b65      	ldr	r3, [pc, #404]	; (4045b8 <indev_keypad_proc+0x2ac>)
  404422:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404424:	f104 001c 	add.w	r0, r4, #28
  404428:	4b5f      	ldr	r3, [pc, #380]	; (4045a8 <indev_keypad_proc+0x29c>)
  40442a:	4798      	blx	r3
  40442c:	2800      	cmp	r0, #0
  40442e:	d09d      	beq.n	40436c <indev_keypad_proc+0x60>
  404430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  404432:	2a01      	cmp	r2, #1
  404434:	d196      	bne.n	404364 <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  404436:	686b      	ldr	r3, [r5, #4]
  404438:	2b0a      	cmp	r3, #10
  40443a:	d024      	beq.n	404486 <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40443c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404440:	f013 0f01 	tst.w	r3, #1
  404444:	d037      	beq.n	4044b6 <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  404446:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40444a:	f013 0f01 	tst.w	r3, #1
  40444e:	d08d      	beq.n	40436c <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  404450:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  404452:	4b5a      	ldr	r3, [pc, #360]	; (4045bc <indev_keypad_proc+0x2b0>)
  404454:	4798      	blx	r3
  404456:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  404458:	4298      	cmp	r0, r3
  40445a:	d987      	bls.n	40436c <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  40445c:	4b50      	ldr	r3, [pc, #320]	; (4045a0 <indev_keypad_proc+0x294>)
  40445e:	4798      	blx	r3
  404460:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  404462:	6869      	ldr	r1, [r5, #4]
  404464:	290a      	cmp	r1, #10
  404466:	d053      	beq.n	404510 <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  404468:	2909      	cmp	r1, #9
  40446a:	d06b      	beq.n	404544 <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  40446c:	290b      	cmp	r1, #11
  40446e:	d078      	beq.n	404562 <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  404470:	4630      	mov	r0, r6
  404472:	4b4c      	ldr	r3, [pc, #304]	; (4045a4 <indev_keypad_proc+0x298>)
  404474:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404476:	f104 001c 	add.w	r0, r4, #28
  40447a:	4b4b      	ldr	r3, [pc, #300]	; (4045a8 <indev_keypad_proc+0x29c>)
  40447c:	4798      	blx	r3
  40447e:	2800      	cmp	r0, #0
  404480:	f43f af74 	beq.w	40436c <indev_keypad_proc+0x60>
  404484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  404486:	69c3      	ldr	r3, [r0, #28]
  404488:	2200      	movs	r2, #0
  40448a:	210c      	movs	r1, #12
  40448c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40448e:	f104 071c 	add.w	r7, r4, #28
  404492:	4638      	mov	r0, r7
  404494:	4b44      	ldr	r3, [pc, #272]	; (4045a8 <indev_keypad_proc+0x29c>)
  404496:	4798      	blx	r3
  404498:	2800      	cmp	r0, #0
  40449a:	f47f af6a 	bne.w	404372 <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  40449e:	2200      	movs	r2, #0
  4044a0:	2101      	movs	r1, #1
  4044a2:	4b3e      	ldr	r3, [pc, #248]	; (40459c <indev_keypad_proc+0x290>)
  4044a4:	6818      	ldr	r0, [r3, #0]
  4044a6:	4b41      	ldr	r3, [pc, #260]	; (4045ac <indev_keypad_proc+0x2a0>)
  4044a8:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044aa:	4638      	mov	r0, r7
  4044ac:	4b3e      	ldr	r3, [pc, #248]	; (4045a8 <indev_keypad_proc+0x29c>)
  4044ae:	4798      	blx	r3
  4044b0:	2800      	cmp	r0, #0
  4044b2:	d0c3      	beq.n	40443c <indev_keypad_proc+0x130>
  4044b4:	e75d      	b.n	404372 <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4044b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4044b8:	4b40      	ldr	r3, [pc, #256]	; (4045bc <indev_keypad_proc+0x2b0>)
  4044ba:	4798      	blx	r3
  4044bc:	8b23      	ldrh	r3, [r4, #24]
  4044be:	4298      	cmp	r0, r3
  4044c0:	d9c1      	bls.n	404446 <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  4044c2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4044c6:	f043 0301 	orr.w	r3, r3, #1
  4044ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  4044ce:	686b      	ldr	r3, [r5, #4]
  4044d0:	2b0a      	cmp	r3, #10
  4044d2:	f47f af4b 	bne.w	40436c <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  4044d6:	4b32      	ldr	r3, [pc, #200]	; (4045a0 <indev_keypad_proc+0x294>)
  4044d8:	4798      	blx	r3
  4044da:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  4044dc:	4b2f      	ldr	r3, [pc, #188]	; (40459c <indev_keypad_proc+0x290>)
  4044de:	6818      	ldr	r0, [r3, #0]
  4044e0:	69c3      	ldr	r3, [r0, #28]
  4044e2:	2200      	movs	r2, #0
  4044e4:	210f      	movs	r1, #15
  4044e6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4044e8:	341c      	adds	r4, #28
  4044ea:	4620      	mov	r0, r4
  4044ec:	4b2e      	ldr	r3, [pc, #184]	; (4045a8 <indev_keypad_proc+0x29c>)
  4044ee:	4798      	blx	r3
  4044f0:	2800      	cmp	r0, #0
  4044f2:	f47f af3e 	bne.w	404372 <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  4044f6:	2200      	movs	r2, #0
  4044f8:	2104      	movs	r1, #4
  4044fa:	4b28      	ldr	r3, [pc, #160]	; (40459c <indev_keypad_proc+0x290>)
  4044fc:	6818      	ldr	r0, [r3, #0]
  4044fe:	4b2b      	ldr	r3, [pc, #172]	; (4045ac <indev_keypad_proc+0x2a0>)
  404500:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404502:	4620      	mov	r0, r4
  404504:	4b28      	ldr	r3, [pc, #160]	; (4045a8 <indev_keypad_proc+0x29c>)
  404506:	4798      	blx	r3
  404508:	2800      	cmp	r0, #0
  40450a:	f43f af2f 	beq.w	40436c <indev_keypad_proc+0x60>
  40450e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404510:	4b22      	ldr	r3, [pc, #136]	; (40459c <indev_keypad_proc+0x290>)
  404512:	6818      	ldr	r0, [r3, #0]
  404514:	69c3      	ldr	r3, [r0, #28]
  404516:	2200      	movs	r2, #0
  404518:	2110      	movs	r1, #16
  40451a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40451c:	341c      	adds	r4, #28
  40451e:	4620      	mov	r0, r4
  404520:	4b21      	ldr	r3, [pc, #132]	; (4045a8 <indev_keypad_proc+0x29c>)
  404522:	4798      	blx	r3
  404524:	2800      	cmp	r0, #0
  404526:	f47f af24 	bne.w	404372 <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  40452a:	2200      	movs	r2, #0
  40452c:	2105      	movs	r1, #5
  40452e:	4b1b      	ldr	r3, [pc, #108]	; (40459c <indev_keypad_proc+0x290>)
  404530:	6818      	ldr	r0, [r3, #0]
  404532:	4b1e      	ldr	r3, [pc, #120]	; (4045ac <indev_keypad_proc+0x2a0>)
  404534:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404536:	4620      	mov	r0, r4
  404538:	4b1b      	ldr	r3, [pc, #108]	; (4045a8 <indev_keypad_proc+0x29c>)
  40453a:	4798      	blx	r3
  40453c:	2800      	cmp	r0, #0
  40453e:	f43f af15 	beq.w	40436c <indev_keypad_proc+0x60>
  404542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404544:	2100      	movs	r1, #0
  404546:	4630      	mov	r0, r6
  404548:	4b19      	ldr	r3, [pc, #100]	; (4045b0 <indev_keypad_proc+0x2a4>)
  40454a:	4798      	blx	r3
                lv_group_focus_next(g);
  40454c:	4630      	mov	r0, r6
  40454e:	4b19      	ldr	r3, [pc, #100]	; (4045b4 <indev_keypad_proc+0x2a8>)
  404550:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404552:	f104 001c 	add.w	r0, r4, #28
  404556:	4b14      	ldr	r3, [pc, #80]	; (4045a8 <indev_keypad_proc+0x29c>)
  404558:	4798      	blx	r3
  40455a:	2800      	cmp	r0, #0
  40455c:	f43f af06 	beq.w	40436c <indev_keypad_proc+0x60>
  404560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404562:	2100      	movs	r1, #0
  404564:	4630      	mov	r0, r6
  404566:	4b12      	ldr	r3, [pc, #72]	; (4045b0 <indev_keypad_proc+0x2a4>)
  404568:	4798      	blx	r3
                lv_group_focus_prev(g);
  40456a:	4630      	mov	r0, r6
  40456c:	4b12      	ldr	r3, [pc, #72]	; (4045b8 <indev_keypad_proc+0x2ac>)
  40456e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404570:	f104 001c 	add.w	r0, r4, #28
  404574:	4b0c      	ldr	r3, [pc, #48]	; (4045a8 <indev_keypad_proc+0x29c>)
  404576:	4798      	blx	r3
  404578:	2800      	cmp	r0, #0
  40457a:	f43f aef7 	beq.w	40436c <indev_keypad_proc+0x60>
  40457e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  404580:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  404582:	290a      	cmp	r1, #10
  404584:	d01c      	beq.n	4045c0 <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  404586:	2200      	movs	r2, #0
  404588:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  40458a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  40458e:	f362 0300 	bfi	r3, r2, #0, #1
  404592:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  404596:	e6e9      	b.n	40436c <indev_keypad_proc+0x60>
  404598:	004037f1 	.word	0x004037f1
  40459c:	2040c390 	.word	0x2040c390
  4045a0:	00414d05 	.word	0x00414d05
  4045a4:	00403805 	.word	0x00403805
  4045a8:	004039b1 	.word	0x004039b1
  4045ac:	004056ad 	.word	0x004056ad
  4045b0:	0040383d 	.word	0x0040383d
  4045b4:	00403655 	.word	0x00403655
  4045b8:	0040366d 	.word	0x0040366d
  4045bc:	00414d21 	.word	0x00414d21
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4045c0:	69c3      	ldr	r3, [r0, #28]
  4045c2:	2200      	movs	r2, #0
  4045c4:	210e      	movs	r1, #14
  4045c6:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4045c8:	f104 051c 	add.w	r5, r4, #28
  4045cc:	4628      	mov	r0, r5
  4045ce:	4b17      	ldr	r3, [pc, #92]	; (40462c <indev_keypad_proc+0x320>)
  4045d0:	4798      	blx	r3
  4045d2:	2800      	cmp	r0, #0
  4045d4:	f47f aecd 	bne.w	404372 <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  4045d8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4045dc:	f013 0f01 	tst.w	r3, #1
  4045e0:	d10b      	bne.n	4045fa <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4045e2:	2200      	movs	r2, #0
  4045e4:	2103      	movs	r1, #3
  4045e6:	4b12      	ldr	r3, [pc, #72]	; (404630 <indev_keypad_proc+0x324>)
  4045e8:	6818      	ldr	r0, [r3, #0]
  4045ea:	4b12      	ldr	r3, [pc, #72]	; (404634 <indev_keypad_proc+0x328>)
  4045ec:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045ee:	4628      	mov	r0, r5
  4045f0:	4b0e      	ldr	r3, [pc, #56]	; (40462c <indev_keypad_proc+0x320>)
  4045f2:	4798      	blx	r3
  4045f4:	2800      	cmp	r0, #0
  4045f6:	f47f aebc 	bne.w	404372 <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4045fa:	2200      	movs	r2, #0
  4045fc:	2106      	movs	r1, #6
  4045fe:	4b0c      	ldr	r3, [pc, #48]	; (404630 <indev_keypad_proc+0x324>)
  404600:	6818      	ldr	r0, [r3, #0]
  404602:	4b0c      	ldr	r3, [pc, #48]	; (404634 <indev_keypad_proc+0x328>)
  404604:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404606:	4628      	mov	r0, r5
  404608:	4b08      	ldr	r3, [pc, #32]	; (40462c <indev_keypad_proc+0x320>)
  40460a:	4798      	blx	r3
  40460c:	2800      	cmp	r0, #0
  40460e:	f47f aeb0 	bne.w	404372 <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404612:	2200      	movs	r2, #0
  404614:	2107      	movs	r1, #7
  404616:	4b06      	ldr	r3, [pc, #24]	; (404630 <indev_keypad_proc+0x324>)
  404618:	6818      	ldr	r0, [r3, #0]
  40461a:	4b06      	ldr	r3, [pc, #24]	; (404634 <indev_keypad_proc+0x328>)
  40461c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40461e:	4628      	mov	r0, r5
  404620:	4b02      	ldr	r3, [pc, #8]	; (40462c <indev_keypad_proc+0x320>)
  404622:	4798      	blx	r3
  404624:	2800      	cmp	r0, #0
  404626:	d0ae      	beq.n	404586 <indev_keypad_proc+0x27a>
  404628:	e6a3      	b.n	404372 <indev_keypad_proc+0x66>
  40462a:	bf00      	nop
  40462c:	004039b1 	.word	0x004039b1
  404630:	2040c390 	.word	0x2040c390
  404634:	004056ad 	.word	0x004056ad

00404638 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404638:	7b8b      	ldrb	r3, [r1, #14]
  40463a:	2b01      	cmp	r3, #1
  40463c:	d040      	beq.n	4046c0 <indev_encoder_proc+0x88>
{
  40463e:	b5f0      	push	{r4, r5, r6, r7, lr}
  404640:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  404642:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404646:	f013 0f08 	tst.w	r3, #8
  40464a:	d00b      	beq.n	404664 <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  40464c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  404650:	2200      	movs	r2, #0
  404652:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  404654:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  404658:	f362 0300 	bfi	r3, r2, #0, #1
  40465c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  404660:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  404664:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  404668:	7b8b      	ldrb	r3, [r1, #14]
  40466a:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  40466e:	684b      	ldr	r3, [r1, #4]
  404670:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  404672:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  404674:	b316      	cbz	r6, 4046bc <indev_encoder_proc+0x84>
  404676:	460c      	mov	r4, r1
  404678:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  40467a:	4630      	mov	r0, r6
  40467c:	4b90      	ldr	r3, [pc, #576]	; (4048c0 <indev_encoder_proc+0x288>)
  40467e:	4798      	blx	r3
  404680:	4b90      	ldr	r3, [pc, #576]	; (4048c4 <indev_encoder_proc+0x28c>)
  404682:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404684:	b1d0      	cbz	r0, 4046bc <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  404686:	7ba3      	ldrb	r3, [r4, #14]
  404688:	b10b      	cbz	r3, 40468e <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  40468a:	2300      	movs	r3, #0
  40468c:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  40468e:	4630      	mov	r0, r6
  404690:	4b8b      	ldr	r3, [pc, #556]	; (4048c0 <indev_encoder_proc+0x288>)
  404692:	4798      	blx	r3
  404694:	4b8b      	ldr	r3, [pc, #556]	; (4048c4 <indev_encoder_proc+0x28c>)
  404696:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404698:	b180      	cbz	r0, 4046bc <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  40469a:	7ba3      	ldrb	r3, [r4, #14]
  40469c:	2b01      	cmp	r3, #1
  40469e:	d015      	beq.n	4046cc <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  4046a0:	2b01      	cmp	r3, #1
  4046a2:	d068      	beq.n	404776 <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  4046a4:	b913      	cbnz	r3, 4046ac <indev_encoder_proc+0x74>
  4046a6:	2f01      	cmp	r7, #1
  4046a8:	f000 80fe 	beq.w	4048a8 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  4046ac:	2200      	movs	r2, #0
  4046ae:	4b85      	ldr	r3, [pc, #532]	; (4048c4 <indev_encoder_proc+0x28c>)
  4046b0:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  4046b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046b6:	2b00      	cmp	r3, #0
  4046b8:	f040 81aa 	bne.w	404a10 <indev_encoder_proc+0x3d8>
}
  4046bc:	b003      	add	sp, #12
  4046be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4046c0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4046c4:	f013 0f08 	tst.w	r3, #8
  4046c8:	d0b9      	beq.n	40463e <indev_encoder_proc+0x6>
  4046ca:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  4046cc:	2f00      	cmp	r7, #0
  4046ce:	d1e7      	bne.n	4046a0 <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  4046d0:	4b7d      	ldr	r3, [pc, #500]	; (4048c8 <indev_encoder_proc+0x290>)
  4046d2:	4798      	blx	r3
  4046d4:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  4046d6:	6861      	ldr	r1, [r4, #4]
  4046d8:	290a      	cmp	r1, #10
  4046da:	d009      	beq.n	4046f0 <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  4046dc:	2914      	cmp	r1, #20
  4046de:	d030      	beq.n	404742 <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  4046e0:	2913      	cmp	r1, #19
  4046e2:	d033      	beq.n	40474c <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  4046e4:	291b      	cmp	r1, #27
  4046e6:	d036      	beq.n	404756 <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  4046e8:	4630      	mov	r0, r6
  4046ea:	4b78      	ldr	r3, [pc, #480]	; (4048cc <indev_encoder_proc+0x294>)
  4046ec:	4798      	blx	r3
  4046ee:	e7dd      	b.n	4046ac <indev_encoder_proc+0x74>
            bool editable = false;
  4046f0:	aa02      	add	r2, sp, #8
  4046f2:	2300      	movs	r3, #0
  4046f4:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  4046f8:	4b72      	ldr	r3, [pc, #456]	; (4048c4 <indev_encoder_proc+0x28c>)
  4046fa:	6818      	ldr	r0, [r3, #0]
  4046fc:	69c3      	ldr	r3, [r0, #28]
  4046fe:	2119      	movs	r1, #25
  404700:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  404702:	4630      	mov	r0, r6
  404704:	4b72      	ldr	r3, [pc, #456]	; (4048d0 <indev_encoder_proc+0x298>)
  404706:	4798      	blx	r3
  404708:	b918      	cbnz	r0, 404712 <indev_encoder_proc+0xda>
  40470a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40470e:	2b00      	cmp	r3, #0
  404710:	d1cc      	bne.n	4046ac <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  404712:	4b6c      	ldr	r3, [pc, #432]	; (4048c4 <indev_encoder_proc+0x28c>)
  404714:	6818      	ldr	r0, [r3, #0]
  404716:	69c3      	ldr	r3, [r0, #28]
  404718:	2200      	movs	r2, #0
  40471a:	210b      	movs	r1, #11
  40471c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40471e:	351c      	adds	r5, #28
  404720:	4628      	mov	r0, r5
  404722:	4b6c      	ldr	r3, [pc, #432]	; (4048d4 <indev_encoder_proc+0x29c>)
  404724:	4798      	blx	r3
  404726:	2800      	cmp	r0, #0
  404728:	d1c8      	bne.n	4046bc <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  40472a:	2200      	movs	r2, #0
  40472c:	4611      	mov	r1, r2
  40472e:	4b65      	ldr	r3, [pc, #404]	; (4048c4 <indev_encoder_proc+0x28c>)
  404730:	6818      	ldr	r0, [r3, #0]
  404732:	4b69      	ldr	r3, [pc, #420]	; (4048d8 <indev_encoder_proc+0x2a0>)
  404734:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404736:	4628      	mov	r0, r5
  404738:	4b66      	ldr	r3, [pc, #408]	; (4048d4 <indev_encoder_proc+0x29c>)
  40473a:	4798      	blx	r3
  40473c:	2800      	cmp	r0, #0
  40473e:	d0b5      	beq.n	4046ac <indev_encoder_proc+0x74>
  404740:	e7bc      	b.n	4046bc <indev_encoder_proc+0x84>
            data->enc_diff--;
  404742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404746:	3b01      	subs	r3, #1
  404748:	81a3      	strh	r3, [r4, #12]
  40474a:	e7af      	b.n	4046ac <indev_encoder_proc+0x74>
            data->enc_diff++;
  40474c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404750:	3301      	adds	r3, #1
  404752:	81a3      	strh	r3, [r4, #12]
  404754:	e7aa      	b.n	4046ac <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  404756:	4630      	mov	r0, r6
  404758:	4b5c      	ldr	r3, [pc, #368]	; (4048cc <indev_encoder_proc+0x294>)
  40475a:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  40475c:	2200      	movs	r2, #0
  40475e:	2114      	movs	r1, #20
  404760:	4b58      	ldr	r3, [pc, #352]	; (4048c4 <indev_encoder_proc+0x28c>)
  404762:	6818      	ldr	r0, [r3, #0]
  404764:	4b5c      	ldr	r3, [pc, #368]	; (4048d8 <indev_encoder_proc+0x2a0>)
  404766:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404768:	f105 001c 	add.w	r0, r5, #28
  40476c:	4b59      	ldr	r3, [pc, #356]	; (4048d4 <indev_encoder_proc+0x29c>)
  40476e:	4798      	blx	r3
  404770:	2800      	cmp	r0, #0
  404772:	d09b      	beq.n	4046ac <indev_encoder_proc+0x74>
  404774:	e7a2      	b.n	4046bc <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  404776:	2f01      	cmp	r7, #1
  404778:	d194      	bne.n	4046a4 <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  40477a:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40477e:	f013 0f01 	tst.w	r3, #1
  404782:	d01f      	beq.n	4047c4 <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  404784:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404788:	f013 0f01 	tst.w	r3, #1
  40478c:	d08e      	beq.n	4046ac <indev_encoder_proc+0x74>
  40478e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  404790:	4b52      	ldr	r3, [pc, #328]	; (4048dc <indev_encoder_proc+0x2a4>)
  404792:	4798      	blx	r3
  404794:	8b6b      	ldrh	r3, [r5, #26]
  404796:	4298      	cmp	r0, r3
  404798:	d988      	bls.n	4046ac <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  40479a:	4b4b      	ldr	r3, [pc, #300]	; (4048c8 <indev_encoder_proc+0x290>)
  40479c:	4798      	blx	r3
  40479e:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4047a0:	6861      	ldr	r1, [r4, #4]
  4047a2:	290a      	cmp	r1, #10
  4047a4:	d05c      	beq.n	404860 <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  4047a6:	2914      	cmp	r1, #20
  4047a8:	d074      	beq.n	404894 <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  4047aa:	2913      	cmp	r1, #19
  4047ac:	d077      	beq.n	40489e <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  4047ae:	4630      	mov	r0, r6
  4047b0:	4b46      	ldr	r3, [pc, #280]	; (4048cc <indev_encoder_proc+0x294>)
  4047b2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4047b4:	f105 001c 	add.w	r0, r5, #28
  4047b8:	4b46      	ldr	r3, [pc, #280]	; (4048d4 <indev_encoder_proc+0x29c>)
  4047ba:	4798      	blx	r3
  4047bc:	2800      	cmp	r0, #0
  4047be:	f43f af75 	beq.w	4046ac <indev_encoder_proc+0x74>
  4047c2:	e77b      	b.n	4046bc <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4047c4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  4047c6:	4b45      	ldr	r3, [pc, #276]	; (4048dc <indev_encoder_proc+0x2a4>)
  4047c8:	4798      	blx	r3
  4047ca:	8b2b      	ldrh	r3, [r5, #24]
  4047cc:	4298      	cmp	r0, r3
  4047ce:	d9d9      	bls.n	404784 <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  4047d0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4047d4:	f043 0301 	orr.w	r3, r3, #1
  4047d8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4047dc:	4b3a      	ldr	r3, [pc, #232]	; (4048c8 <indev_encoder_proc+0x290>)
  4047de:	4798      	blx	r3
  4047e0:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4047e2:	6863      	ldr	r3, [r4, #4]
  4047e4:	2b0a      	cmp	r3, #10
  4047e6:	d006      	beq.n	4047f6 <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  4047e8:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4047ec:	f043 0301 	orr.w	r3, r3, #1
  4047f0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  4047f4:	e75a      	b.n	4046ac <indev_encoder_proc+0x74>
                bool editable = false;
  4047f6:	aa02      	add	r2, sp, #8
  4047f8:	2300      	movs	r3, #0
  4047fa:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  4047fe:	4b31      	ldr	r3, [pc, #196]	; (4048c4 <indev_encoder_proc+0x28c>)
  404800:	6818      	ldr	r0, [r3, #0]
  404802:	69c3      	ldr	r3, [r0, #28]
  404804:	2119      	movs	r1, #25
  404806:	4798      	blx	r3
                if(editable) {
  404808:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40480c:	b173      	cbz	r3, 40482c <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  40480e:	4630      	mov	r0, r6
  404810:	4b33      	ldr	r3, [pc, #204]	; (4048e0 <indev_encoder_proc+0x2a8>)
  404812:	4798      	blx	r3
  404814:	2801      	cmp	r0, #1
  404816:	d9e7      	bls.n	4047e8 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  404818:	4630      	mov	r0, r6
  40481a:	4b2d      	ldr	r3, [pc, #180]	; (4048d0 <indev_encoder_proc+0x298>)
  40481c:	4798      	blx	r3
  40481e:	f080 0101 	eor.w	r1, r0, #1
  404822:	b2c9      	uxtb	r1, r1
  404824:	4630      	mov	r0, r6
  404826:	4b2f      	ldr	r3, [pc, #188]	; (4048e4 <indev_encoder_proc+0x2ac>)
  404828:	4798      	blx	r3
  40482a:	e7dd      	b.n	4047e8 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  40482c:	4b25      	ldr	r3, [pc, #148]	; (4048c4 <indev_encoder_proc+0x28c>)
  40482e:	6818      	ldr	r0, [r3, #0]
  404830:	69c3      	ldr	r3, [r0, #28]
  404832:	2200      	movs	r2, #0
  404834:	210f      	movs	r1, #15
  404836:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404838:	f105 071c 	add.w	r7, r5, #28
  40483c:	4638      	mov	r0, r7
  40483e:	4b25      	ldr	r3, [pc, #148]	; (4048d4 <indev_encoder_proc+0x29c>)
  404840:	4798      	blx	r3
  404842:	2800      	cmp	r0, #0
  404844:	f47f af3a 	bne.w	4046bc <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404848:	2200      	movs	r2, #0
  40484a:	2104      	movs	r1, #4
  40484c:	4b1d      	ldr	r3, [pc, #116]	; (4048c4 <indev_encoder_proc+0x28c>)
  40484e:	6818      	ldr	r0, [r3, #0]
  404850:	4b21      	ldr	r3, [pc, #132]	; (4048d8 <indev_encoder_proc+0x2a0>)
  404852:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404854:	4638      	mov	r0, r7
  404856:	4b1f      	ldr	r3, [pc, #124]	; (4048d4 <indev_encoder_proc+0x29c>)
  404858:	4798      	blx	r3
  40485a:	2800      	cmp	r0, #0
  40485c:	d0c4      	beq.n	4047e8 <indev_encoder_proc+0x1b0>
  40485e:	e72d      	b.n	4046bc <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404860:	4b18      	ldr	r3, [pc, #96]	; (4048c4 <indev_encoder_proc+0x28c>)
  404862:	6818      	ldr	r0, [r3, #0]
  404864:	69c3      	ldr	r3, [r0, #28]
  404866:	2200      	movs	r2, #0
  404868:	2110      	movs	r1, #16
  40486a:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40486c:	351c      	adds	r5, #28
  40486e:	4628      	mov	r0, r5
  404870:	4b18      	ldr	r3, [pc, #96]	; (4048d4 <indev_encoder_proc+0x29c>)
  404872:	4798      	blx	r3
  404874:	2800      	cmp	r0, #0
  404876:	f47f af21 	bne.w	4046bc <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  40487a:	2200      	movs	r2, #0
  40487c:	2105      	movs	r1, #5
  40487e:	4b11      	ldr	r3, [pc, #68]	; (4048c4 <indev_encoder_proc+0x28c>)
  404880:	6818      	ldr	r0, [r3, #0]
  404882:	4b15      	ldr	r3, [pc, #84]	; (4048d8 <indev_encoder_proc+0x2a0>)
  404884:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404886:	4628      	mov	r0, r5
  404888:	4b12      	ldr	r3, [pc, #72]	; (4048d4 <indev_encoder_proc+0x29c>)
  40488a:	4798      	blx	r3
  40488c:	2800      	cmp	r0, #0
  40488e:	f43f af0d 	beq.w	4046ac <indev_encoder_proc+0x74>
  404892:	e713      	b.n	4046bc <indev_encoder_proc+0x84>
                data->enc_diff--;
  404894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404898:	3b01      	subs	r3, #1
  40489a:	81a3      	strh	r3, [r4, #12]
  40489c:	e706      	b.n	4046ac <indev_encoder_proc+0x74>
                data->enc_diff++;
  40489e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048a2:	3301      	adds	r3, #1
  4048a4:	81a3      	strh	r3, [r4, #12]
  4048a6:	e701      	b.n	4046ac <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  4048a8:	6863      	ldr	r3, [r4, #4]
  4048aa:	2b0a      	cmp	r3, #10
  4048ac:	d01c      	beq.n	4048e8 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  4048ae:	2200      	movs	r2, #0
  4048b0:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  4048b2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4048b6:	f362 0300 	bfi	r3, r2, #0, #1
  4048ba:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  4048be:	e6f5      	b.n	4046ac <indev_encoder_proc+0x74>
  4048c0:	004037f1 	.word	0x004037f1
  4048c4:	2040c390 	.word	0x2040c390
  4048c8:	00414d05 	.word	0x00414d05
  4048cc:	00403805 	.word	0x00403805
  4048d0:	00403949 	.word	0x00403949
  4048d4:	004039b1 	.word	0x004039b1
  4048d8:	004056ad 	.word	0x004056ad
  4048dc:	00414d21 	.word	0x00414d21
  4048e0:	00415f59 	.word	0x00415f59
  4048e4:	0040383d 	.word	0x0040383d
            bool editable = false;
  4048e8:	aa02      	add	r2, sp, #8
  4048ea:	2300      	movs	r3, #0
  4048ec:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  4048f0:	69c3      	ldr	r3, [r0, #28]
  4048f2:	2119      	movs	r1, #25
  4048f4:	4798      	blx	r3
            if(editable == false) {
  4048f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4048fa:	2b00      	cmp	r3, #0
  4048fc:	d044      	beq.n	404988 <indev_encoder_proc+0x350>
            else if(g->editing) {
  4048fe:	7d33      	ldrb	r3, [r6, #20]
  404900:	f013 0f02 	tst.w	r3, #2
  404904:	d079      	beq.n	4049fa <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  404906:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40490a:	f013 0f01 	tst.w	r3, #1
  40490e:	d004      	beq.n	40491a <indev_encoder_proc+0x2e2>
  404910:	4630      	mov	r0, r6
  404912:	4b60      	ldr	r3, [pc, #384]	; (404a94 <indev_encoder_proc+0x45c>)
  404914:	4798      	blx	r3
  404916:	2801      	cmp	r0, #1
  404918:	d8c9      	bhi.n	4048ae <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  40491a:	4b5f      	ldr	r3, [pc, #380]	; (404a98 <indev_encoder_proc+0x460>)
  40491c:	6818      	ldr	r0, [r3, #0]
  40491e:	69c3      	ldr	r3, [r0, #28]
  404920:	2200      	movs	r2, #0
  404922:	210e      	movs	r1, #14
  404924:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404926:	f105 071c 	add.w	r7, r5, #28
  40492a:	4638      	mov	r0, r7
  40492c:	4b5b      	ldr	r3, [pc, #364]	; (404a9c <indev_encoder_proc+0x464>)
  40492e:	4798      	blx	r3
  404930:	2800      	cmp	r0, #0
  404932:	f47f aec3 	bne.w	4046bc <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404936:	2200      	movs	r2, #0
  404938:	2103      	movs	r1, #3
  40493a:	4b57      	ldr	r3, [pc, #348]	; (404a98 <indev_encoder_proc+0x460>)
  40493c:	6818      	ldr	r0, [r3, #0]
  40493e:	4b58      	ldr	r3, [pc, #352]	; (404aa0 <indev_encoder_proc+0x468>)
  404940:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404942:	4638      	mov	r0, r7
  404944:	4b55      	ldr	r3, [pc, #340]	; (404a9c <indev_encoder_proc+0x464>)
  404946:	4798      	blx	r3
  404948:	2800      	cmp	r0, #0
  40494a:	f47f aeb7 	bne.w	4046bc <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  40494e:	2200      	movs	r2, #0
  404950:	2106      	movs	r1, #6
  404952:	4b51      	ldr	r3, [pc, #324]	; (404a98 <indev_encoder_proc+0x460>)
  404954:	6818      	ldr	r0, [r3, #0]
  404956:	4b52      	ldr	r3, [pc, #328]	; (404aa0 <indev_encoder_proc+0x468>)
  404958:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40495a:	4638      	mov	r0, r7
  40495c:	4b4f      	ldr	r3, [pc, #316]	; (404a9c <indev_encoder_proc+0x464>)
  40495e:	4798      	blx	r3
  404960:	2800      	cmp	r0, #0
  404962:	f47f aeab 	bne.w	4046bc <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  404966:	2200      	movs	r2, #0
  404968:	2107      	movs	r1, #7
  40496a:	4b4b      	ldr	r3, [pc, #300]	; (404a98 <indev_encoder_proc+0x460>)
  40496c:	6818      	ldr	r0, [r3, #0]
  40496e:	4b4c      	ldr	r3, [pc, #304]	; (404aa0 <indev_encoder_proc+0x468>)
  404970:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404972:	4638      	mov	r0, r7
  404974:	4b49      	ldr	r3, [pc, #292]	; (404a9c <indev_encoder_proc+0x464>)
  404976:	4798      	blx	r3
  404978:	2800      	cmp	r0, #0
  40497a:	f47f ae9f 	bne.w	4046bc <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  40497e:	210a      	movs	r1, #10
  404980:	4630      	mov	r0, r6
  404982:	4b48      	ldr	r3, [pc, #288]	; (404aa4 <indev_encoder_proc+0x46c>)
  404984:	4798      	blx	r3
  404986:	e792      	b.n	4048ae <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404988:	4b43      	ldr	r3, [pc, #268]	; (404a98 <indev_encoder_proc+0x460>)
  40498a:	6818      	ldr	r0, [r3, #0]
  40498c:	69c3      	ldr	r3, [r0, #28]
  40498e:	2200      	movs	r2, #0
  404990:	210e      	movs	r1, #14
  404992:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404994:	f105 071c 	add.w	r7, r5, #28
  404998:	4638      	mov	r0, r7
  40499a:	4b40      	ldr	r3, [pc, #256]	; (404a9c <indev_encoder_proc+0x464>)
  40499c:	4798      	blx	r3
  40499e:	2800      	cmp	r0, #0
  4049a0:	f47f ae8c 	bne.w	4046bc <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4049a4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4049a8:	f013 0f01 	tst.w	r3, #1
  4049ac:	d01e      	beq.n	4049ec <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  4049ae:	4638      	mov	r0, r7
  4049b0:	4b3a      	ldr	r3, [pc, #232]	; (404a9c <indev_encoder_proc+0x464>)
  4049b2:	4798      	blx	r3
  4049b4:	2800      	cmp	r0, #0
  4049b6:	f47f ae81 	bne.w	4046bc <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4049ba:	2200      	movs	r2, #0
  4049bc:	2106      	movs	r1, #6
  4049be:	4b36      	ldr	r3, [pc, #216]	; (404a98 <indev_encoder_proc+0x460>)
  4049c0:	6818      	ldr	r0, [r3, #0]
  4049c2:	4b37      	ldr	r3, [pc, #220]	; (404aa0 <indev_encoder_proc+0x468>)
  4049c4:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4049c6:	4638      	mov	r0, r7
  4049c8:	4b34      	ldr	r3, [pc, #208]	; (404a9c <indev_encoder_proc+0x464>)
  4049ca:	4798      	blx	r3
  4049cc:	2800      	cmp	r0, #0
  4049ce:	f47f ae75 	bne.w	4046bc <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  4049d2:	2200      	movs	r2, #0
  4049d4:	2107      	movs	r1, #7
  4049d6:	4b30      	ldr	r3, [pc, #192]	; (404a98 <indev_encoder_proc+0x460>)
  4049d8:	6818      	ldr	r0, [r3, #0]
  4049da:	4b31      	ldr	r3, [pc, #196]	; (404aa0 <indev_encoder_proc+0x468>)
  4049dc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4049de:	4638      	mov	r0, r7
  4049e0:	4b2e      	ldr	r3, [pc, #184]	; (404a9c <indev_encoder_proc+0x464>)
  4049e2:	4798      	blx	r3
  4049e4:	2800      	cmp	r0, #0
  4049e6:	f43f af62 	beq.w	4048ae <indev_encoder_proc+0x276>
  4049ea:	e667      	b.n	4046bc <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4049ec:	2200      	movs	r2, #0
  4049ee:	2103      	movs	r1, #3
  4049f0:	4b29      	ldr	r3, [pc, #164]	; (404a98 <indev_encoder_proc+0x460>)
  4049f2:	6818      	ldr	r0, [r3, #0]
  4049f4:	4b2a      	ldr	r3, [pc, #168]	; (404aa0 <indev_encoder_proc+0x468>)
  4049f6:	4798      	blx	r3
  4049f8:	e7d9      	b.n	4049ae <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  4049fa:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4049fe:	f013 0f01 	tst.w	r3, #1
  404a02:	f47f af54 	bne.w	4048ae <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  404a06:	2101      	movs	r1, #1
  404a08:	4630      	mov	r0, r6
  404a0a:	4b27      	ldr	r3, [pc, #156]	; (404aa8 <indev_encoder_proc+0x470>)
  404a0c:	4798      	blx	r3
  404a0e:	e74e      	b.n	4048ae <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  404a10:	4630      	mov	r0, r6
  404a12:	4b26      	ldr	r3, [pc, #152]	; (404aac <indev_encoder_proc+0x474>)
  404a14:	4798      	blx	r3
  404a16:	b1f8      	cbz	r0, 404a58 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  404a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a1c:	2b00      	cmp	r3, #0
  404a1e:	db0f      	blt.n	404a40 <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  404a20:	2b00      	cmp	r3, #0
  404a22:	f77f ae4b 	ble.w	4046bc <indev_encoder_proc+0x84>
  404a26:	2500      	movs	r5, #0
  404a28:	e011      	b.n	404a4e <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404a2a:	2114      	movs	r1, #20
  404a2c:	4630      	mov	r0, r6
  404a2e:	4b1d      	ldr	r3, [pc, #116]	; (404aa4 <indev_encoder_proc+0x46c>)
  404a30:	4798      	blx	r3
  404a32:	3501      	adds	r5, #1
  404a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a38:	425b      	negs	r3, r3
  404a3a:	429d      	cmp	r5, r3
  404a3c:	dbf5      	blt.n	404a2a <indev_encoder_proc+0x3f2>
  404a3e:	e63d      	b.n	4046bc <indev_encoder_proc+0x84>
  404a40:	2500      	movs	r5, #0
  404a42:	e7f7      	b.n	404a34 <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  404a44:	2113      	movs	r1, #19
  404a46:	4630      	mov	r0, r6
  404a48:	4b16      	ldr	r3, [pc, #88]	; (404aa4 <indev_encoder_proc+0x46c>)
  404a4a:	4798      	blx	r3
  404a4c:	3501      	adds	r5, #1
  404a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a52:	429d      	cmp	r5, r3
  404a54:	dbf6      	blt.n	404a44 <indev_encoder_proc+0x40c>
  404a56:	e631      	b.n	4046bc <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  404a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a5c:	2b00      	cmp	r3, #0
  404a5e:	db0e      	blt.n	404a7e <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  404a60:	2b00      	cmp	r3, #0
  404a62:	f77f ae2b 	ble.w	4046bc <indev_encoder_proc+0x84>
  404a66:	2500      	movs	r5, #0
  404a68:	e00f      	b.n	404a8a <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  404a6a:	4630      	mov	r0, r6
  404a6c:	4b10      	ldr	r3, [pc, #64]	; (404ab0 <indev_encoder_proc+0x478>)
  404a6e:	4798      	blx	r3
  404a70:	3501      	adds	r5, #1
  404a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a76:	425b      	negs	r3, r3
  404a78:	429d      	cmp	r5, r3
  404a7a:	dbf6      	blt.n	404a6a <indev_encoder_proc+0x432>
  404a7c:	e61e      	b.n	4046bc <indev_encoder_proc+0x84>
  404a7e:	2500      	movs	r5, #0
  404a80:	e7f7      	b.n	404a72 <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  404a82:	4630      	mov	r0, r6
  404a84:	4b0b      	ldr	r3, [pc, #44]	; (404ab4 <indev_encoder_proc+0x47c>)
  404a86:	4798      	blx	r3
  404a88:	3501      	adds	r5, #1
  404a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a8e:	429d      	cmp	r5, r3
  404a90:	dbf7      	blt.n	404a82 <indev_encoder_proc+0x44a>
  404a92:	e613      	b.n	4046bc <indev_encoder_proc+0x84>
  404a94:	00415f59 	.word	0x00415f59
  404a98:	2040c390 	.word	0x2040c390
  404a9c:	004039b1 	.word	0x004039b1
  404aa0:	004056ad 	.word	0x004056ad
  404aa4:	00403805 	.word	0x00403805
  404aa8:	0040383d 	.word	0x0040383d
  404aac:	00403949 	.word	0x00403949
  404ab0:	0040366d 	.word	0x0040366d
  404ab4:	00403655 	.word	0x00403655

00404ab8 <lv_indev_get_act>:
}
  404ab8:	4b01      	ldr	r3, [pc, #4]	; (404ac0 <lv_indev_get_act+0x8>)
  404aba:	6818      	ldr	r0, [r3, #0]
  404abc:	4770      	bx	lr
  404abe:	bf00      	nop
  404ac0:	2040c38c 	.word	0x2040c38c

00404ac4 <lv_indev_reset>:
    if(indev) {
  404ac4:	b1b0      	cbz	r0, 404af4 <lv_indev_reset+0x30>
  404ac6:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404ac8:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404acc:	f042 0202 	orr.w	r2, r2, #2
  404ad0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  404ad4:	4a17      	ldr	r2, [pc, #92]	; (404b34 <lv_indev_reset+0x70>)
  404ad6:	6812      	ldr	r2, [r2, #0]
  404ad8:	4290      	cmp	r0, r2
  404ada:	d004      	beq.n	404ae6 <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404adc:	b139      	cbz	r1, 404aee <lv_indev_reset+0x2a>
  404ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404ae0:	4291      	cmp	r1, r2
  404ae2:	d004      	beq.n	404aee <lv_indev_reset+0x2a>
  404ae4:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  404ae6:	2000      	movs	r0, #0
  404ae8:	4a13      	ldr	r2, [pc, #76]	; (404b38 <lv_indev_reset+0x74>)
  404aea:	6010      	str	r0, [r2, #0]
  404aec:	e7f6      	b.n	404adc <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  404aee:	2200      	movs	r2, #0
  404af0:	63da      	str	r2, [r3, #60]	; 0x3c
  404af2:	4770      	bx	lr
{
  404af4:	b510      	push	{r4, lr}
  404af6:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404af8:	2000      	movs	r0, #0
  404afa:	4b10      	ldr	r3, [pc, #64]	; (404b3c <lv_indev_reset+0x78>)
  404afc:	4798      	blx	r3
        while(i) {
  404afe:	e007      	b.n	404b10 <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  404b00:	2200      	movs	r2, #0
  404b02:	4b0d      	ldr	r3, [pc, #52]	; (404b38 <lv_indev_reset+0x74>)
  404b04:	601a      	str	r2, [r3, #0]
  404b06:	e00e      	b.n	404b26 <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404b08:	2300      	movs	r3, #0
  404b0a:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404b0c:	4b0b      	ldr	r3, [pc, #44]	; (404b3c <lv_indev_reset+0x78>)
  404b0e:	4798      	blx	r3
        while(i) {
  404b10:	b178      	cbz	r0, 404b32 <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  404b12:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404b16:	f043 0302 	orr.w	r3, r3, #2
  404b1a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  404b1e:	4b05      	ldr	r3, [pc, #20]	; (404b34 <lv_indev_reset+0x70>)
  404b20:	681b      	ldr	r3, [r3, #0]
  404b22:	4298      	cmp	r0, r3
  404b24:	d0ec      	beq.n	404b00 <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  404b26:	2c00      	cmp	r4, #0
  404b28:	d0ee      	beq.n	404b08 <lv_indev_reset+0x44>
  404b2a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404b2c:	429c      	cmp	r4, r3
  404b2e:	d1ed      	bne.n	404b0c <lv_indev_reset+0x48>
  404b30:	e7ea      	b.n	404b08 <lv_indev_reset+0x44>
  404b32:	bd10      	pop	{r4, pc}
  404b34:	2040c38c 	.word	0x2040c38c
  404b38:	2040c390 	.word	0x2040c390
  404b3c:	00414c79 	.word	0x00414c79

00404b40 <_lv_indev_init>:
{
  404b40:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  404b42:	2100      	movs	r1, #0
  404b44:	4608      	mov	r0, r1
  404b46:	4b01      	ldr	r3, [pc, #4]	; (404b4c <_lv_indev_init+0xc>)
  404b48:	4798      	blx	r3
  404b4a:	bd08      	pop	{r3, pc}
  404b4c:	00404ac5 	.word	0x00404ac5

00404b50 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
  404b50:	b148      	cbz	r0, 404b66 <lv_indev_is_dragging+0x16>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404b52:	7803      	ldrb	r3, [r0, #0]
  404b54:	2b01      	cmp	r3, #1
  404b56:	bf18      	it	ne
  404b58:	2b03      	cmpne	r3, #3
  404b5a:	d106      	bne.n	404b6a <lv_indev_is_dragging+0x1a>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
  404b5c:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
  404b60:	f3c0 0040 	ubfx	r0, r0, #1, #1
  404b64:	4770      	bx	lr
    if(indev == NULL) return false;
  404b66:	2000      	movs	r0, #0
  404b68:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  404b6a:	2000      	movs	r0, #0
}
  404b6c:	4770      	bx	lr
	...

00404b70 <lv_indev_get_obj_act>:
}
  404b70:	4b01      	ldr	r3, [pc, #4]	; (404b78 <lv_indev_get_obj_act+0x8>)
  404b72:	6818      	ldr	r0, [r3, #0]
  404b74:	4770      	bx	lr
  404b76:	bf00      	nop
  404b78:	2040c390 	.word	0x2040c390

00404b7c <lv_indev_search_obj>:
{
  404b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b80:	4680      	mov	r8, r0
  404b82:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  404b84:	4b21      	ldr	r3, [pc, #132]	; (404c0c <lv_indev_search_obj+0x90>)
  404b86:	4798      	blx	r3
  404b88:	2800      	cmp	r0, #0
  404b8a:	d03c      	beq.n	404c06 <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  404b8c:	f108 0604 	add.w	r6, r8, #4
  404b90:	4630      	mov	r0, r6
  404b92:	4b1f      	ldr	r3, [pc, #124]	; (404c10 <lv_indev_search_obj+0x94>)
  404b94:	4798      	blx	r3
  404b96:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  404b98:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  404b9a:	b15c      	cbz	r4, 404bb4 <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  404b9c:	4639      	mov	r1, r7
  404b9e:	4620      	mov	r0, r4
  404ba0:	f7ff ffec 	bl	404b7c <lv_indev_search_obj>
            if(found_p != NULL) {
  404ba4:	4605      	mov	r5, r0
  404ba6:	b928      	cbnz	r0, 404bb4 <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  404ba8:	4621      	mov	r1, r4
  404baa:	4630      	mov	r0, r6
  404bac:	4b19      	ldr	r3, [pc, #100]	; (404c14 <lv_indev_search_obj+0x98>)
  404bae:	4798      	blx	r3
  404bb0:	4604      	mov	r4, r0
  404bb2:	e7f2      	b.n	404b9a <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404bb4:	b115      	cbz	r5, 404bbc <lv_indev_search_obj+0x40>
}
  404bb6:	4628      	mov	r0, r5
  404bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  404bbc:	4640      	mov	r0, r8
  404bbe:	4b16      	ldr	r3, [pc, #88]	; (404c18 <lv_indev_search_obj+0x9c>)
  404bc0:	4798      	blx	r3
  404bc2:	2800      	cmp	r0, #0
  404bc4:	d0f7      	beq.n	404bb6 <lv_indev_search_obj+0x3a>
  404bc6:	4644      	mov	r4, r8
  404bc8:	e003      	b.n	404bd2 <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  404bca:	4620      	mov	r0, r4
  404bcc:	4b13      	ldr	r3, [pc, #76]	; (404c1c <lv_indev_search_obj+0xa0>)
  404bce:	4798      	blx	r3
  404bd0:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  404bd2:	b124      	cbz	r4, 404bde <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  404bd4:	4620      	mov	r0, r4
  404bd6:	4b12      	ldr	r3, [pc, #72]	; (404c20 <lv_indev_search_obj+0xa4>)
  404bd8:	4798      	blx	r3
  404bda:	2800      	cmp	r0, #0
  404bdc:	d0f5      	beq.n	404bca <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  404bde:	2140      	movs	r1, #64	; 0x40
  404be0:	4640      	mov	r0, r8
  404be2:	4b10      	ldr	r3, [pc, #64]	; (404c24 <lv_indev_search_obj+0xa8>)
  404be4:	4798      	blx	r3
  404be6:	b950      	cbnz	r0, 404bfe <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404be8:	2c00      	cmp	r4, #0
  404bea:	d1e4      	bne.n	404bb6 <lv_indev_search_obj+0x3a>
  404bec:	2100      	movs	r1, #0
  404bee:	4640      	mov	r0, r8
  404bf0:	4b0d      	ldr	r3, [pc, #52]	; (404c28 <lv_indev_search_obj+0xac>)
  404bf2:	4798      	blx	r3
  404bf4:	f010 0f20 	tst.w	r0, #32
  404bf8:	d1dd      	bne.n	404bb6 <lv_indev_search_obj+0x3a>
  404bfa:	4645      	mov	r5, r8
  404bfc:	e7db      	b.n	404bb6 <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  404bfe:	2c00      	cmp	r4, #0
  404c00:	d1d9      	bne.n	404bb6 <lv_indev_search_obj+0x3a>
  404c02:	4645      	mov	r5, r8
    return found_p;
  404c04:	e7d7      	b.n	404bb6 <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  404c06:	2500      	movs	r5, #0
  404c08:	e7d5      	b.n	404bb6 <lv_indev_search_obj+0x3a>
  404c0a:	bf00      	nop
  404c0c:	00408081 	.word	0x00408081
  404c10:	00415d91 	.word	0x00415d91
  404c14:	00415da5 	.word	0x00415da5
  404c18:	0040652d 	.word	0x0040652d
  404c1c:	004057bd 	.word	0x004057bd
  404c20:	00405bd9 	.word	0x00405bd9
  404c24:	00406bbd 	.word	0x00406bbd
  404c28:	00406bf1 	.word	0x00406bf1

00404c2c <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  404c2c:	6983      	ldr	r3, [r0, #24]
  404c2e:	4a5d      	ldr	r2, [pc, #372]	; (404da4 <indev_proc_press+0x178>)
  404c30:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  404c32:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  404c36:	f012 0f08 	tst.w	r2, #8
  404c3a:	f040 81bc 	bne.w	404fb6 <indev_proc_press+0x38a>
{
  404c3e:	b570      	push	{r4, r5, r6, lr}
  404c40:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  404c42:	4a59      	ldr	r2, [pc, #356]	; (404da8 <indev_proc_press+0x17c>)
  404c44:	6812      	ldr	r2, [r2, #0]
  404c46:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  404c48:	b343      	cbz	r3, 404c9c <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404c4a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  404c4e:	f012 0f02 	tst.w	r2, #2
  404c52:	d045      	beq.n	404ce0 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  404c54:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  404c56:	b13b      	cbz	r3, 404c68 <indev_proc_press+0x3c>
  404c58:	69e3      	ldr	r3, [r4, #28]
  404c5a:	b12b      	cbz	r3, 404c68 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  404c5c:	2300      	movs	r3, #0
  404c5e:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  404c60:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  404c62:	4620      	mov	r0, r4
  404c64:	4b51      	ldr	r3, [pc, #324]	; (404dac <indev_proc_press+0x180>)
  404c66:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  404c68:	69a5      	ldr	r5, [r4, #24]
  404c6a:	4b4e      	ldr	r3, [pc, #312]	; (404da4 <indev_proc_press+0x178>)
  404c6c:	681b      	ldr	r3, [r3, #0]
  404c6e:	429d      	cmp	r5, r3
  404c70:	f000 80de 	beq.w	404e30 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  404c74:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  404c78:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  404c7a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  404c7e:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  404c80:	2d00      	cmp	r5, #0
  404c82:	d060      	beq.n	404d46 <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  404c84:	69eb      	ldr	r3, [r5, #28]
  404c86:	4a48      	ldr	r2, [pc, #288]	; (404da8 <indev_proc_press+0x17c>)
  404c88:	6812      	ldr	r2, [r2, #0]
  404c8a:	210d      	movs	r1, #13
  404c8c:	4628      	mov	r0, r5
  404c8e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404c90:	4620      	mov	r0, r4
  404c92:	4b47      	ldr	r3, [pc, #284]	; (404db0 <indev_proc_press+0x184>)
  404c94:	4798      	blx	r3
  404c96:	2800      	cmp	r0, #0
  404c98:	d04b      	beq.n	404d32 <indev_proc_press+0x106>
  404c9a:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404c9c:	4628      	mov	r0, r5
  404c9e:	4b45      	ldr	r3, [pc, #276]	; (404db4 <indev_proc_press+0x188>)
  404ca0:	4798      	blx	r3
  404ca2:	1d26      	adds	r6, r4, #4
  404ca4:	4631      	mov	r1, r6
  404ca6:	4b44      	ldr	r3, [pc, #272]	; (404db8 <indev_proc_press+0x18c>)
  404ca8:	4798      	blx	r3
  404caa:	4b3e      	ldr	r3, [pc, #248]	; (404da4 <indev_proc_press+0x178>)
  404cac:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404cae:	b120      	cbz	r0, 404cba <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404cb0:	4b3c      	ldr	r3, [pc, #240]	; (404da4 <indev_proc_press+0x178>)
  404cb2:	681b      	ldr	r3, [r3, #0]
  404cb4:	b153      	cbz	r3, 404ccc <indev_proc_press+0xa0>
        new_obj_searched = true;
  404cb6:	2301      	movs	r3, #1
  404cb8:	e7cd      	b.n	404c56 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404cba:	4628      	mov	r0, r5
  404cbc:	4b3f      	ldr	r3, [pc, #252]	; (404dbc <indev_proc_press+0x190>)
  404cbe:	4798      	blx	r3
  404cc0:	4631      	mov	r1, r6
  404cc2:	4b3d      	ldr	r3, [pc, #244]	; (404db8 <indev_proc_press+0x18c>)
  404cc4:	4798      	blx	r3
  404cc6:	4b37      	ldr	r3, [pc, #220]	; (404da4 <indev_proc_press+0x178>)
  404cc8:	6018      	str	r0, [r3, #0]
  404cca:	e7f1      	b.n	404cb0 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404ccc:	4628      	mov	r0, r5
  404cce:	4b3c      	ldr	r3, [pc, #240]	; (404dc0 <indev_proc_press+0x194>)
  404cd0:	4798      	blx	r3
  404cd2:	4631      	mov	r1, r6
  404cd4:	4b38      	ldr	r3, [pc, #224]	; (404db8 <indev_proc_press+0x18c>)
  404cd6:	4798      	blx	r3
  404cd8:	4b32      	ldr	r3, [pc, #200]	; (404da4 <indev_proc_press+0x178>)
  404cda:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404cdc:	2301      	movs	r3, #1
  404cde:	e7ba      	b.n	404c56 <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  404ce0:	2110      	movs	r1, #16
  404ce2:	4618      	mov	r0, r3
  404ce4:	4b37      	ldr	r3, [pc, #220]	; (404dc4 <indev_proc_press+0x198>)
  404ce6:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404ce8:	b108      	cbz	r0, 404cee <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  404cea:	2300      	movs	r3, #0
  404cec:	e7b3      	b.n	404c56 <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404cee:	4628      	mov	r0, r5
  404cf0:	4b30      	ldr	r3, [pc, #192]	; (404db4 <indev_proc_press+0x188>)
  404cf2:	4798      	blx	r3
  404cf4:	1d26      	adds	r6, r4, #4
  404cf6:	4631      	mov	r1, r6
  404cf8:	4b2f      	ldr	r3, [pc, #188]	; (404db8 <indev_proc_press+0x18c>)
  404cfa:	4798      	blx	r3
  404cfc:	4b29      	ldr	r3, [pc, #164]	; (404da4 <indev_proc_press+0x178>)
  404cfe:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404d00:	b120      	cbz	r0, 404d0c <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404d02:	4b28      	ldr	r3, [pc, #160]	; (404da4 <indev_proc_press+0x178>)
  404d04:	681b      	ldr	r3, [r3, #0]
  404d06:	b153      	cbz	r3, 404d1e <indev_proc_press+0xf2>
        new_obj_searched = true;
  404d08:	2301      	movs	r3, #1
  404d0a:	e7a4      	b.n	404c56 <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404d0c:	4628      	mov	r0, r5
  404d0e:	4b2b      	ldr	r3, [pc, #172]	; (404dbc <indev_proc_press+0x190>)
  404d10:	4798      	blx	r3
  404d12:	4631      	mov	r1, r6
  404d14:	4b28      	ldr	r3, [pc, #160]	; (404db8 <indev_proc_press+0x18c>)
  404d16:	4798      	blx	r3
  404d18:	4b22      	ldr	r3, [pc, #136]	; (404da4 <indev_proc_press+0x178>)
  404d1a:	6018      	str	r0, [r3, #0]
  404d1c:	e7f1      	b.n	404d02 <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404d1e:	4628      	mov	r0, r5
  404d20:	4b27      	ldr	r3, [pc, #156]	; (404dc0 <indev_proc_press+0x194>)
  404d22:	4798      	blx	r3
  404d24:	4631      	mov	r1, r6
  404d26:	4b24      	ldr	r3, [pc, #144]	; (404db8 <indev_proc_press+0x18c>)
  404d28:	4798      	blx	r3
  404d2a:	4b1e      	ldr	r3, [pc, #120]	; (404da4 <indev_proc_press+0x178>)
  404d2c:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404d2e:	2301      	movs	r3, #1
  404d30:	e791      	b.n	404c56 <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404d32:	2200      	movs	r2, #0
  404d34:	2102      	movs	r1, #2
  404d36:	4628      	mov	r0, r5
  404d38:	4b23      	ldr	r3, [pc, #140]	; (404dc8 <indev_proc_press+0x19c>)
  404d3a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404d3c:	4620      	mov	r0, r4
  404d3e:	4b1c      	ldr	r3, [pc, #112]	; (404db0 <indev_proc_press+0x184>)
  404d40:	4798      	blx	r3
  404d42:	2800      	cmp	r0, #0
  404d44:	d1a9      	bne.n	404c9a <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  404d46:	4b17      	ldr	r3, [pc, #92]	; (404da4 <indev_proc_press+0x178>)
  404d48:	681b      	ldr	r3, [r3, #0]
  404d4a:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  404d4c:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  404d4e:	2b00      	cmp	r3, #0
  404d50:	d06e      	beq.n	404e30 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  404d52:	4b1e      	ldr	r3, [pc, #120]	; (404dcc <indev_proc_press+0x1a0>)
  404d54:	4798      	blx	r3
  404d56:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  404d58:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404d5c:	f36f 0300 	bfc	r3, #0, #1
  404d60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  404d64:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  404d68:	2300      	movs	r3, #0
  404d6a:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  404d6c:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404d6e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  404d72:	2103      	movs	r1, #3
  404d74:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  404d78:	f363 1245 	bfi	r2, r3, #5, #1
  404d7c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  404d80:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  404d82:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  404d84:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  404d86:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  404d88:	4a06      	ldr	r2, [pc, #24]	; (404da4 <indev_proc_press+0x178>)
  404d8a:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  404d8c:	461d      	mov	r5, r3
            while(i != NULL) {
  404d8e:	e001      	b.n	404d94 <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  404d90:	4b0f      	ldr	r3, [pc, #60]	; (404dd0 <indev_proc_press+0x1a4>)
  404d92:	4798      	blx	r3
            while(i != NULL) {
  404d94:	b1f0      	cbz	r0, 404dd4 <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  404d96:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  404d9a:	f013 0f20 	tst.w	r3, #32
  404d9e:	d0f7      	beq.n	404d90 <indev_proc_press+0x164>
  404da0:	4605      	mov	r5, r0
  404da2:	e7f5      	b.n	404d90 <indev_proc_press+0x164>
  404da4:	2040c390 	.word	0x2040c390
  404da8:	2040c38c 	.word	0x2040c38c
  404dac:	004039f5 	.word	0x004039f5
  404db0:	004039b1 	.word	0x004039b1
  404db4:	00403515 	.word	0x00403515
  404db8:	00404b7d 	.word	0x00404b7d
  404dbc:	004034f9 	.word	0x004034f9
  404dc0:	004034c1 	.word	0x004034c1
  404dc4:	00406bbd 	.word	0x00406bbd
  404dc8:	004056ad 	.word	0x004056ad
  404dcc:	00414d05 	.word	0x00414d05
  404dd0:	004057bd 	.word	0x004057bd
            if(last_top != NULL) {
  404dd4:	b115      	cbz	r5, 404ddc <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404dd6:	4628      	mov	r0, r5
  404dd8:	4b77      	ldr	r3, [pc, #476]	; (404fb8 <indev_proc_press+0x38c>)
  404dda:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404ddc:	4b77      	ldr	r3, [pc, #476]	; (404fbc <indev_proc_press+0x390>)
  404dde:	6818      	ldr	r0, [r3, #0]
  404de0:	69c3      	ldr	r3, [r0, #28]
  404de2:	4a77      	ldr	r2, [pc, #476]	; (404fc0 <indev_proc_press+0x394>)
  404de4:	6812      	ldr	r2, [r2, #0]
  404de6:	210b      	movs	r1, #11
  404de8:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404dea:	4620      	mov	r0, r4
  404dec:	4b75      	ldr	r3, [pc, #468]	; (404fc4 <indev_proc_press+0x398>)
  404dee:	4798      	blx	r3
  404df0:	2800      	cmp	r0, #0
  404df2:	f47f af52 	bne.w	404c9a <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404df6:	2200      	movs	r2, #0
  404df8:	4611      	mov	r1, r2
  404dfa:	4b70      	ldr	r3, [pc, #448]	; (404fbc <indev_proc_press+0x390>)
  404dfc:	6818      	ldr	r0, [r3, #0]
  404dfe:	4b72      	ldr	r3, [pc, #456]	; (404fc8 <indev_proc_press+0x39c>)
  404e00:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404e02:	4620      	mov	r0, r4
  404e04:	4b6f      	ldr	r3, [pc, #444]	; (404fc4 <indev_proc_press+0x398>)
  404e06:	4798      	blx	r3
  404e08:	2800      	cmp	r0, #0
  404e0a:	f47f af46 	bne.w	404c9a <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404e0e:	4b6c      	ldr	r3, [pc, #432]	; (404fc0 <indev_proc_press+0x394>)
  404e10:	6818      	ldr	r0, [r3, #0]
  404e12:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404e16:	f013 0f08 	tst.w	r3, #8
  404e1a:	f47f af3e 	bne.w	404c9a <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  404e1e:	301c      	adds	r0, #28
  404e20:	4b6a      	ldr	r3, [pc, #424]	; (404fcc <indev_proc_press+0x3a0>)
  404e22:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404e24:	4620      	mov	r0, r4
  404e26:	4b67      	ldr	r3, [pc, #412]	; (404fc4 <indev_proc_press+0x398>)
  404e28:	4798      	blx	r3
  404e2a:	2800      	cmp	r0, #0
  404e2c:	f47f af35 	bne.w	404c9a <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  404e30:	88a0      	ldrh	r0, [r4, #4]
  404e32:	8923      	ldrh	r3, [r4, #8]
  404e34:	1ac0      	subs	r0, r0, r3
  404e36:	b200      	sxth	r0, r0
  404e38:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  404e3a:	88e1      	ldrh	r1, [r4, #6]
  404e3c:	8963      	ldrh	r3, [r4, #10]
  404e3e:	1ac9      	subs	r1, r1, r3
  404e40:	b209      	sxth	r1, r1
  404e42:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  404e44:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  404e48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404e4c:	10d2      	asrs	r2, r2, #3
  404e4e:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  404e50:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  404e54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404e58:	10db      	asrs	r3, r3, #3
  404e5a:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  404e5c:	2a00      	cmp	r2, #0
  404e5e:	db7b      	blt.n	404f58 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  404e60:	2a00      	cmp	r2, #0
  404e62:	dd01      	ble.n	404e68 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  404e64:	3a01      	subs	r2, #1
  404e66:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  404e68:	2b00      	cmp	r3, #0
  404e6a:	db78      	blt.n	404f5e <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  404e6c:	2b00      	cmp	r3, #0
  404e6e:	dd01      	ble.n	404e74 <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  404e70:	3b01      	subs	r3, #1
  404e72:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  404e74:	8aa3      	ldrh	r3, [r4, #20]
  404e76:	eb03 0060 	add.w	r0, r3, r0, asr #1
  404e7a:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  404e7c:	8ae3      	ldrh	r3, [r4, #22]
  404e7e:	eb03 0161 	add.w	r1, r3, r1, asr #1
  404e82:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  404e84:	4b4d      	ldr	r3, [pc, #308]	; (404fbc <indev_proc_press+0x390>)
  404e86:	6818      	ldr	r0, [r3, #0]
  404e88:	2800      	cmp	r0, #0
  404e8a:	f43f af06 	beq.w	404c9a <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  404e8e:	69c3      	ldr	r3, [r0, #28]
  404e90:	4a4b      	ldr	r2, [pc, #300]	; (404fc0 <indev_proc_press+0x394>)
  404e92:	6812      	ldr	r2, [r2, #0]
  404e94:	210c      	movs	r1, #12
  404e96:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404e98:	4620      	mov	r0, r4
  404e9a:	4b4a      	ldr	r3, [pc, #296]	; (404fc4 <indev_proc_press+0x398>)
  404e9c:	4798      	blx	r3
  404e9e:	2800      	cmp	r0, #0
  404ea0:	f47f aefb 	bne.w	404c9a <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404ea4:	2200      	movs	r2, #0
  404ea6:	2101      	movs	r1, #1
  404ea8:	4b44      	ldr	r3, [pc, #272]	; (404fbc <indev_proc_press+0x390>)
  404eaa:	6818      	ldr	r0, [r3, #0]
  404eac:	4b46      	ldr	r3, [pc, #280]	; (404fc8 <indev_proc_press+0x39c>)
  404eae:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404eb0:	4620      	mov	r0, r4
  404eb2:	4b44      	ldr	r3, [pc, #272]	; (404fc4 <indev_proc_press+0x398>)
  404eb4:	4798      	blx	r3
  404eb6:	2800      	cmp	r0, #0
  404eb8:	f47f aeef 	bne.w	404c9a <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  404ebc:	4b40      	ldr	r3, [pc, #256]	; (404fc0 <indev_proc_press+0x394>)
  404ebe:	681b      	ldr	r3, [r3, #0]
  404ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404ec4:	f013 0f08 	tst.w	r3, #8
  404ec8:	f47f aee7 	bne.w	404c9a <indev_proc_press+0x6e>
        indev_drag(proc);
  404ecc:	4620      	mov	r0, r4
  404ece:	4b40      	ldr	r3, [pc, #256]	; (404fd0 <indev_proc_press+0x3a4>)
  404ed0:	4798      	blx	r3
        indev_gesture(proc);
  404ed2:	4620      	mov	r0, r4
  404ed4:	4b3f      	ldr	r3, [pc, #252]	; (404fd4 <indev_proc_press+0x3a8>)
  404ed6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404ed8:	4620      	mov	r0, r4
  404eda:	4b3a      	ldr	r3, [pc, #232]	; (404fc4 <indev_proc_press+0x398>)
  404edc:	4798      	blx	r3
  404ede:	2800      	cmp	r0, #0
  404ee0:	f47f aedb 	bne.w	404c9a <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  404ee4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404ee8:	f013 0f02 	tst.w	r3, #2
  404eec:	d104      	bne.n	404ef8 <indev_proc_press+0x2cc>
  404eee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404ef2:	f013 0f01 	tst.w	r3, #1
  404ef6:	d035      	beq.n	404f64 <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  404ef8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404efc:	f013 0f02 	tst.w	r3, #2
  404f00:	f47f aecb 	bne.w	404c9a <indev_proc_press+0x6e>
  404f04:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404f08:	f013 0f01 	tst.w	r3, #1
  404f0c:	f43f aec5 	beq.w	404c9a <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  404f10:	6b20      	ldr	r0, [r4, #48]	; 0x30
  404f12:	4b31      	ldr	r3, [pc, #196]	; (404fd8 <indev_proc_press+0x3ac>)
  404f14:	4798      	blx	r3
  404f16:	4b2a      	ldr	r3, [pc, #168]	; (404fc0 <indev_proc_press+0x394>)
  404f18:	681a      	ldr	r2, [r3, #0]
  404f1a:	8b53      	ldrh	r3, [r2, #26]
  404f1c:	4298      	cmp	r0, r3
  404f1e:	f67f aebc 	bls.w	404c9a <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  404f22:	4b26      	ldr	r3, [pc, #152]	; (404fbc <indev_proc_press+0x390>)
  404f24:	6818      	ldr	r0, [r3, #0]
  404f26:	69c3      	ldr	r3, [r0, #28]
  404f28:	2110      	movs	r1, #16
  404f2a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404f2c:	4620      	mov	r0, r4
  404f2e:	4b25      	ldr	r3, [pc, #148]	; (404fc4 <indev_proc_press+0x398>)
  404f30:	4798      	blx	r3
  404f32:	2800      	cmp	r0, #0
  404f34:	f47f aeb1 	bne.w	404c9a <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404f38:	2200      	movs	r2, #0
  404f3a:	2105      	movs	r1, #5
  404f3c:	4b1f      	ldr	r3, [pc, #124]	; (404fbc <indev_proc_press+0x390>)
  404f3e:	6818      	ldr	r0, [r3, #0]
  404f40:	4b21      	ldr	r3, [pc, #132]	; (404fc8 <indev_proc_press+0x39c>)
  404f42:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404f44:	4620      	mov	r0, r4
  404f46:	4b1f      	ldr	r3, [pc, #124]	; (404fc4 <indev_proc_press+0x398>)
  404f48:	4798      	blx	r3
  404f4a:	2800      	cmp	r0, #0
  404f4c:	f47f aea5 	bne.w	404c9a <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  404f50:	4b22      	ldr	r3, [pc, #136]	; (404fdc <indev_proc_press+0x3b0>)
  404f52:	4798      	blx	r3
  404f54:	6320      	str	r0, [r4, #48]	; 0x30
  404f56:	e6a0      	b.n	404c9a <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  404f58:	3201      	adds	r2, #1
  404f5a:	82a2      	strh	r2, [r4, #20]
  404f5c:	e784      	b.n	404e68 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  404f5e:	3301      	adds	r3, #1
  404f60:	82e3      	strh	r3, [r4, #22]
  404f62:	e787      	b.n	404e74 <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  404f64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404f66:	4b1c      	ldr	r3, [pc, #112]	; (404fd8 <indev_proc_press+0x3ac>)
  404f68:	4798      	blx	r3
  404f6a:	4b15      	ldr	r3, [pc, #84]	; (404fc0 <indev_proc_press+0x394>)
  404f6c:	681a      	ldr	r2, [r3, #0]
  404f6e:	8b13      	ldrh	r3, [r2, #24]
  404f70:	4298      	cmp	r0, r3
  404f72:	d9c1      	bls.n	404ef8 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  404f74:	4b11      	ldr	r3, [pc, #68]	; (404fbc <indev_proc_press+0x390>)
  404f76:	6818      	ldr	r0, [r3, #0]
  404f78:	69c3      	ldr	r3, [r0, #28]
  404f7a:	210f      	movs	r1, #15
  404f7c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404f7e:	4620      	mov	r0, r4
  404f80:	4b10      	ldr	r3, [pc, #64]	; (404fc4 <indev_proc_press+0x398>)
  404f82:	4798      	blx	r3
  404f84:	2800      	cmp	r0, #0
  404f86:	f47f ae88 	bne.w	404c9a <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404f8a:	2200      	movs	r2, #0
  404f8c:	2104      	movs	r1, #4
  404f8e:	4b0b      	ldr	r3, [pc, #44]	; (404fbc <indev_proc_press+0x390>)
  404f90:	6818      	ldr	r0, [r3, #0]
  404f92:	4b0d      	ldr	r3, [pc, #52]	; (404fc8 <indev_proc_press+0x39c>)
  404f94:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404f96:	4620      	mov	r0, r4
  404f98:	4b0a      	ldr	r3, [pc, #40]	; (404fc4 <indev_proc_press+0x398>)
  404f9a:	4798      	blx	r3
  404f9c:	2800      	cmp	r0, #0
  404f9e:	f47f ae7c 	bne.w	404c9a <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  404fa2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404fa6:	f043 0301 	orr.w	r3, r3, #1
  404faa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  404fae:	4b0b      	ldr	r3, [pc, #44]	; (404fdc <indev_proc_press+0x3b0>)
  404fb0:	4798      	blx	r3
  404fb2:	6320      	str	r0, [r4, #48]	; 0x30
  404fb4:	e7a0      	b.n	404ef8 <indev_proc_press+0x2cc>
  404fb6:	4770      	bx	lr
  404fb8:	00405de5 	.word	0x00405de5
  404fbc:	2040c390 	.word	0x2040c390
  404fc0:	2040c38c 	.word	0x2040c38c
  404fc4:	004039b1 	.word	0x004039b1
  404fc8:	004056ad 	.word	0x004056ad
  404fcc:	00403d7d 	.word	0x00403d7d
  404fd0:	00403f05 	.word	0x00403f05
  404fd4:	00404215 	.word	0x00404215
  404fd8:	00414d21 	.word	0x00414d21
  404fdc:	00414d05 	.word	0x00414d05

00404fe0 <indev_pointer_proc>:
{
  404fe0:	b538      	push	{r3, r4, r5, lr}
  404fe2:	4604      	mov	r4, r0
  404fe4:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  404fe6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  404fe8:	b148      	cbz	r0, 404ffe <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  404fea:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404fec:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  404fee:	429a      	cmp	r2, r3
  404ff0:	d005      	beq.n	404ffe <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  404ff2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  404ff6:	f9b1 1000 	ldrsh.w	r1, [r1]
  404ffa:	4b0d      	ldr	r3, [pc, #52]	; (405030 <indev_pointer_proc+0x50>)
  404ffc:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  404ffe:	f9b5 3000 	ldrsh.w	r3, [r5]
  405002:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  405004:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  405008:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  40500a:	7f23      	ldrb	r3, [r4, #28]
  40500c:	2b01      	cmp	r3, #1
  40500e:	d00a      	beq.n	405026 <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  405010:	f104 001c 	add.w	r0, r4, #28
  405014:	4b07      	ldr	r3, [pc, #28]	; (405034 <indev_pointer_proc+0x54>)
  405016:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  405018:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  40501c:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40501e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  405022:	84e3      	strh	r3, [r4, #38]	; 0x26
  405024:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  405026:	f104 001c 	add.w	r0, r4, #28
  40502a:	4b03      	ldr	r3, [pc, #12]	; (405038 <indev_pointer_proc+0x58>)
  40502c:	4798      	blx	r3
  40502e:	e7f3      	b.n	405018 <indev_pointer_proc+0x38>
  405030:	00405e4d 	.word	0x00405e4d
  405034:	00403bd1 	.word	0x00403bd1
  405038:	00404c2d 	.word	0x00404c2d

0040503c <indev_button_proc>:
    if(i->btn_points == NULL) {
  40503c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  40503e:	2b00      	cmp	r3, #0
  405040:	d03a      	beq.n	4050b8 <indev_button_proc+0x7c>
{
  405042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405046:	460d      	mov	r5, r1
  405048:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  40504a:	688a      	ldr	r2, [r1, #8]
  40504c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405050:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  405054:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  405058:	7bab      	ldrb	r3, [r5, #14]
  40505a:	2b01      	cmp	r3, #1
  40505c:	d01a      	beq.n	405094 <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  40505e:	f104 061c 	add.w	r6, r4, #28
  405062:	4630      	mov	r0, r6
  405064:	4b15      	ldr	r3, [pc, #84]	; (4050bc <indev_button_proc+0x80>)
  405066:	4798      	blx	r3
  405068:	b990      	cbnz	r0, 405090 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  40506a:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  40506c:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  405070:	7bab      	ldrb	r3, [r5, #14]
  405072:	2b01      	cmp	r3, #1
  405074:	d01c      	beq.n	4050b0 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  405076:	4630      	mov	r0, r6
  405078:	4b11      	ldr	r3, [pc, #68]	; (4050c0 <indev_button_proc+0x84>)
  40507a:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  40507c:	4630      	mov	r0, r6
  40507e:	4b0f      	ldr	r3, [pc, #60]	; (4050bc <indev_button_proc+0x80>)
  405080:	4798      	blx	r3
  405082:	b928      	cbnz	r0, 405090 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  405084:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  405088:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  40508a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  40508e:	84e3      	strh	r3, [r4, #38]	; 0x26
  405090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  405094:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  405098:	429f      	cmp	r7, r3
  40509a:	d004      	beq.n	4050a6 <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  40509c:	f104 001c 	add.w	r0, r4, #28
  4050a0:	4b07      	ldr	r3, [pc, #28]	; (4050c0 <indev_button_proc+0x84>)
  4050a2:	4798      	blx	r3
  4050a4:	e7db      	b.n	40505e <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  4050a6:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  4050aa:	4598      	cmp	r8, r3
  4050ac:	d1f6      	bne.n	40509c <indev_button_proc+0x60>
  4050ae:	e7d6      	b.n	40505e <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  4050b0:	4630      	mov	r0, r6
  4050b2:	4b04      	ldr	r3, [pc, #16]	; (4050c4 <indev_button_proc+0x88>)
  4050b4:	4798      	blx	r3
  4050b6:	e7e1      	b.n	40507c <indev_button_proc+0x40>
  4050b8:	4770      	bx	lr
  4050ba:	bf00      	nop
  4050bc:	004039b1 	.word	0x004039b1
  4050c0:	00403bd1 	.word	0x00403bd1
  4050c4:	00404c2d 	.word	0x00404c2d

004050c8 <_lv_indev_read_task>:
    indev_act = task->user_data;
  4050c8:	68c0      	ldr	r0, [r0, #12]
  4050ca:	4b2e      	ldr	r3, [pc, #184]	; (405184 <_lv_indev_read_task+0xbc>)
  4050cc:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  4050ce:	68c3      	ldr	r3, [r0, #12]
  4050d0:	2b00      	cmp	r3, #0
  4050d2:	d055      	beq.n	405180 <_lv_indev_read_task+0xb8>
{
  4050d4:	b530      	push	{r4, r5, lr}
  4050d6:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  4050d8:	4b2b      	ldr	r3, [pc, #172]	; (405188 <_lv_indev_read_task+0xc0>)
  4050da:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  4050dc:	4b29      	ldr	r3, [pc, #164]	; (405184 <_lv_indev_read_task+0xbc>)
  4050de:	681b      	ldr	r3, [r3, #0]
  4050e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  4050e4:	f013 0f04 	tst.w	r3, #4
  4050e8:	d018      	beq.n	40511c <_lv_indev_read_task+0x54>
}
  4050ea:	b005      	add	sp, #20
  4050ec:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  4050ee:	68dc      	ldr	r4, [r3, #12]
  4050f0:	4b26      	ldr	r3, [pc, #152]	; (40518c <_lv_indev_read_task+0xc4>)
  4050f2:	4798      	blx	r3
  4050f4:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  4050f8:	e025      	b.n	405146 <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  4050fa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  4050fe:	b312      	cbz	r2, 405146 <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  405100:	68dc      	ldr	r4, [r3, #12]
  405102:	4b22      	ldr	r3, [pc, #136]	; (40518c <_lv_indev_read_task+0xc4>)
  405104:	4798      	blx	r3
  405106:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  40510a:	e01c      	b.n	405146 <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  40510c:	4669      	mov	r1, sp
  40510e:	4b20      	ldr	r3, [pc, #128]	; (405190 <_lv_indev_read_task+0xc8>)
  405110:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  405112:	4b1c      	ldr	r3, [pc, #112]	; (405184 <_lv_indev_read_task+0xbc>)
  405114:	6818      	ldr	r0, [r3, #0]
  405116:	4b1c      	ldr	r3, [pc, #112]	; (405188 <_lv_indev_read_task+0xc0>)
  405118:	4798      	blx	r3
    } while(more_to_read);
  40511a:	b35d      	cbz	r5, 405174 <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  40511c:	4c19      	ldr	r4, [pc, #100]	; (405184 <_lv_indev_read_task+0xbc>)
  40511e:	4669      	mov	r1, sp
  405120:	6820      	ldr	r0, [r4, #0]
  405122:	4b1c      	ldr	r3, [pc, #112]	; (405194 <_lv_indev_read_task+0xcc>)
  405124:	4798      	blx	r3
  405126:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  405128:	6820      	ldr	r0, [r4, #0]
  40512a:	4b17      	ldr	r3, [pc, #92]	; (405188 <_lv_indev_read_task+0xc0>)
  40512c:	4798      	blx	r3
        indev_obj_act = NULL;
  40512e:	2200      	movs	r2, #0
  405130:	4b19      	ldr	r3, [pc, #100]	; (405198 <_lv_indev_read_task+0xd0>)
  405132:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  405134:	6823      	ldr	r3, [r4, #0]
  405136:	f89d 200e 	ldrb.w	r2, [sp, #14]
  40513a:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  40513c:	2a01      	cmp	r2, #1
  40513e:	d0d6      	beq.n	4050ee <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  405140:	781a      	ldrb	r2, [r3, #0]
  405142:	2a04      	cmp	r2, #4
  405144:	d0d9      	beq.n	4050fa <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  405146:	4b0f      	ldr	r3, [pc, #60]	; (405184 <_lv_indev_read_task+0xbc>)
  405148:	6818      	ldr	r0, [r3, #0]
  40514a:	7803      	ldrb	r3, [r0, #0]
  40514c:	2b01      	cmp	r3, #1
  40514e:	d0dd      	beq.n	40510c <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  405150:	2b02      	cmp	r3, #2
  405152:	d007      	beq.n	405164 <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  405154:	2b04      	cmp	r3, #4
  405156:	d009      	beq.n	40516c <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  405158:	2b03      	cmp	r3, #3
  40515a:	d1da      	bne.n	405112 <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  40515c:	4669      	mov	r1, sp
  40515e:	4b0f      	ldr	r3, [pc, #60]	; (40519c <_lv_indev_read_task+0xd4>)
  405160:	4798      	blx	r3
  405162:	e7d6      	b.n	405112 <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  405164:	4669      	mov	r1, sp
  405166:	4b0e      	ldr	r3, [pc, #56]	; (4051a0 <_lv_indev_read_task+0xd8>)
  405168:	4798      	blx	r3
  40516a:	e7d2      	b.n	405112 <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  40516c:	4669      	mov	r1, sp
  40516e:	4b0d      	ldr	r3, [pc, #52]	; (4051a4 <_lv_indev_read_task+0xdc>)
  405170:	4798      	blx	r3
  405172:	e7ce      	b.n	405112 <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  405174:	2300      	movs	r3, #0
  405176:	4a03      	ldr	r2, [pc, #12]	; (405184 <_lv_indev_read_task+0xbc>)
  405178:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  40517a:	4a07      	ldr	r2, [pc, #28]	; (405198 <_lv_indev_read_task+0xd0>)
  40517c:	6013      	str	r3, [r2, #0]
  40517e:	e7b4      	b.n	4050ea <_lv_indev_read_task+0x22>
  405180:	4770      	bx	lr
  405182:	bf00      	nop
  405184:	2040c38c 	.word	0x2040c38c
  405188:	00403959 	.word	0x00403959
  40518c:	00414d05 	.word	0x00414d05
  405190:	00404fe1 	.word	0x00404fe1
  405194:	00414c9d 	.word	0x00414c9d
  405198:	2040c390 	.word	0x2040c390
  40519c:	0040503d 	.word	0x0040503d
  4051a0:	0040430d 	.word	0x0040430d
  4051a4:	00404639 	.word	0x00404639

004051a8 <lv_event_mark_deleted>:

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
  4051a8:	4b05      	ldr	r3, [pc, #20]	; (4051c0 <lv_event_mark_deleted+0x18>)
  4051aa:	681b      	ldr	r3, [r3, #0]

    while(t) {
  4051ac:	e000      	b.n	4051b0 <lv_event_mark_deleted+0x8>
        if(t->obj == obj) t->deleted = true;
        t = t->prev;
  4051ae:	689b      	ldr	r3, [r3, #8]
    while(t) {
  4051b0:	b12b      	cbz	r3, 4051be <lv_event_mark_deleted+0x16>
        if(t->obj == obj) t->deleted = true;
  4051b2:	681a      	ldr	r2, [r3, #0]
  4051b4:	4282      	cmp	r2, r0
  4051b6:	d1fa      	bne.n	4051ae <lv_event_mark_deleted+0x6>
  4051b8:	2201      	movs	r2, #1
  4051ba:	711a      	strb	r2, [r3, #4]
  4051bc:	e7f7      	b.n	4051ae <lv_event_mark_deleted+0x6>
    }
}
  4051be:	4770      	bx	lr
  4051c0:	2040c398 	.word	0x2040c398

004051c4 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  4051c4:	2850      	cmp	r0, #80	; 0x50
  4051c6:	d017      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  4051c8:	d90c      	bls.n	4051e4 <style_prop_is_cacheble+0x20>
  4051ca:	28ff      	cmp	r0, #255	; 0xff
  4051cc:	d014      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  4051ce:	d82e      	bhi.n	40522e <style_prop_is_cacheble+0x6a>
  4051d0:	286e      	cmp	r0, #110	; 0x6e
  4051d2:	d011      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  4051d4:	d926      	bls.n	405224 <style_prop_is_cacheble+0x60>
  4051d6:	287f      	cmp	r0, #127	; 0x7f
  4051d8:	d00e      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  4051da:	2891      	cmp	r0, #145	; 0x91
  4051dc:	d00c      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  4051de:	2872      	cmp	r0, #114	; 0x72
  4051e0:	d115      	bne.n	40520e <style_prop_is_cacheble+0x4a>
  4051e2:	e009      	b.n	4051f8 <style_prop_is_cacheble+0x34>
  4051e4:	2818      	cmp	r0, #24
  4051e6:	d909      	bls.n	4051fc <style_prop_is_cacheble+0x38>
  4051e8:	2833      	cmp	r0, #51	; 0x33
  4051ea:	d816      	bhi.n	40521a <style_prop_is_cacheble+0x56>
  4051ec:	2830      	cmp	r0, #48	; 0x30
  4051ee:	d203      	bcs.n	4051f8 <style_prop_is_cacheble+0x34>
  4051f0:	2820      	cmp	r0, #32
  4051f2:	d001      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  4051f4:	282c      	cmp	r0, #44	; 0x2c
  4051f6:	d10a      	bne.n	40520e <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  4051f8:	2001      	movs	r0, #1
  4051fa:	4770      	bx	lr
    switch(prop) {
  4051fc:	2815      	cmp	r0, #21
  4051fe:	d2fb      	bcs.n	4051f8 <style_prop_is_cacheble+0x34>
  405200:	2807      	cmp	r0, #7
  405202:	d806      	bhi.n	405212 <style_prop_is_cacheble+0x4e>
  405204:	2804      	cmp	r0, #4
  405206:	d2f7      	bcs.n	4051f8 <style_prop_is_cacheble+0x34>
  405208:	3801      	subs	r0, #1
  40520a:	2801      	cmp	r0, #1
  40520c:	d9f4      	bls.n	4051f8 <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  40520e:	2000      	movs	r0, #0
    }
}
  405210:	4770      	bx	lr
    switch(prop) {
  405212:	3810      	subs	r0, #16
  405214:	2803      	cmp	r0, #3
  405216:	d8fa      	bhi.n	40520e <style_prop_is_cacheble+0x4a>
  405218:	e7ee      	b.n	4051f8 <style_prop_is_cacheble+0x34>
  40521a:	2840      	cmp	r0, #64	; 0x40
  40521c:	d0ec      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  40521e:	2842      	cmp	r0, #66	; 0x42
  405220:	d1f5      	bne.n	40520e <style_prop_is_cacheble+0x4a>
  405222:	e7e9      	b.n	4051f8 <style_prop_is_cacheble+0x34>
  405224:	2854      	cmp	r0, #84	; 0x54
  405226:	d0e7      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  405228:	2860      	cmp	r0, #96	; 0x60
  40522a:	d1f0      	bne.n	40520e <style_prop_is_cacheble+0x4a>
  40522c:	e7e4      	b.n	4051f8 <style_prop_is_cacheble+0x34>
  40522e:	f248 0383 	movw	r3, #32899	; 0x8083
  405232:	4298      	cmp	r0, r3
  405234:	d0e0      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  405236:	d90c      	bls.n	405252 <style_prop_is_cacheble+0x8e>
  405238:	f248 03a0 	movw	r3, #32928	; 0x80a0
  40523c:	4298      	cmp	r0, r3
  40523e:	d0db      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  405240:	f248 03ad 	movw	r3, #32941	; 0x80ad
  405244:	4298      	cmp	r0, r3
  405246:	d0d7      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  405248:	f248 038e 	movw	r3, #32910	; 0x808e
  40524c:	4298      	cmp	r0, r3
  40524e:	d1de      	bne.n	40520e <style_prop_is_cacheble+0x4a>
  405250:	e7d2      	b.n	4051f8 <style_prop_is_cacheble+0x34>
  405252:	f248 030c 	movw	r3, #32780	; 0x800c
  405256:	4298      	cmp	r0, r3
  405258:	d0ce      	beq.n	4051f8 <style_prop_is_cacheble+0x34>
  40525a:	d3d8      	bcc.n	40520e <style_prop_is_cacheble+0x4a>
  40525c:	4b02      	ldr	r3, [pc, #8]	; (405268 <style_prop_is_cacheble+0xa4>)
  40525e:	4403      	add	r3, r0
  405260:	2b01      	cmp	r3, #1
  405262:	d8d4      	bhi.n	40520e <style_prop_is_cacheble+0x4a>
  405264:	e7c8      	b.n	4051f8 <style_prop_is_cacheble+0x34>
  405266:	bf00      	nop
  405268:	ffff7f80 	.word	0xffff7f80

0040526c <refresh_children_position>:
{
  40526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40526e:	460e      	mov	r6, r1
  405270:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  405272:	1d07      	adds	r7, r0, #4
  405274:	4638      	mov	r0, r7
  405276:	4b0f      	ldr	r3, [pc, #60]	; (4052b4 <refresh_children_position+0x48>)
  405278:	4798      	blx	r3
  40527a:	4604      	mov	r4, r0
  40527c:	e017      	b.n	4052ae <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  40527e:	b2b2      	uxth	r2, r6
  405280:	8a23      	ldrh	r3, [r4, #16]
  405282:	4413      	add	r3, r2
  405284:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  405286:	b2ab      	uxth	r3, r5
  405288:	8a61      	ldrh	r1, [r4, #18]
  40528a:	4419      	add	r1, r3
  40528c:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  40528e:	8aa1      	ldrh	r1, [r4, #20]
  405290:	440a      	add	r2, r1
  405292:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  405294:	8ae2      	ldrh	r2, [r4, #22]
  405296:	4413      	add	r3, r2
  405298:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  40529a:	462a      	mov	r2, r5
  40529c:	4631      	mov	r1, r6
  40529e:	4620      	mov	r0, r4
  4052a0:	f7ff ffe4 	bl	40526c <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  4052a4:	4621      	mov	r1, r4
  4052a6:	4638      	mov	r0, r7
  4052a8:	4b03      	ldr	r3, [pc, #12]	; (4052b8 <refresh_children_position+0x4c>)
  4052aa:	4798      	blx	r3
  4052ac:	4604      	mov	r4, r0
  4052ae:	2c00      	cmp	r4, #0
  4052b0:	d1e5      	bne.n	40527e <refresh_children_position+0x12>
}
  4052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052b4:	00415d91 	.word	0x00415d91
  4052b8:	00415da5 	.word	0x00415da5

004052bc <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  4052bc:	b538      	push	{r3, r4, r5, lr}
  4052be:	4604      	mov	r4, r0
  4052c0:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4052c2:	22bc      	movs	r2, #188	; 0xbc
  4052c4:	4b55      	ldr	r3, [pc, #340]	; (40541c <style_snapshot_compare+0x160>)
  4052c6:	4798      	blx	r3
  4052c8:	2800      	cmp	r0, #0
  4052ca:	f000 8086 	beq.w	4053da <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  4052ce:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  4052d2:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  4052d6:	429a      	cmp	r2, r3
  4052d8:	d001      	beq.n	4052de <style_snapshot_compare+0x22>
  4052da:	2002      	movs	r0, #2
  4052dc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  4052de:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  4052e2:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  4052e6:	429a      	cmp	r2, r3
  4052e8:	d001      	beq.n	4052ee <style_snapshot_compare+0x32>
  4052ea:	2002      	movs	r0, #2
  4052ec:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  4052ee:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  4052f2:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  4052f6:	429a      	cmp	r2, r3
  4052f8:	d001      	beq.n	4052fe <style_snapshot_compare+0x42>
  4052fa:	2002      	movs	r0, #2
  4052fc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  4052fe:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  405302:	4293      	cmp	r3, r2
  405304:	d001      	beq.n	40530a <style_snapshot_compare+0x4e>
  405306:	2002      	movs	r0, #2
  405308:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  40530a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  40530e:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  405312:	429a      	cmp	r2, r3
  405314:	d001      	beq.n	40531a <style_snapshot_compare+0x5e>
  405316:	2002      	movs	r0, #2
  405318:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  40531a:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  40531e:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  405322:	429a      	cmp	r2, r3
  405324:	d001      	beq.n	40532a <style_snapshot_compare+0x6e>
  405326:	2002      	movs	r0, #2
  405328:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  40532a:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  40532e:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  405332:	429a      	cmp	r2, r3
  405334:	d153      	bne.n	4053de <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405336:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  40533a:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  40533e:	429a      	cmp	r2, r3
  405340:	d14f      	bne.n	4053e2 <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  405342:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  405346:	4293      	cmp	r3, r2
  405348:	d14d      	bne.n	4053e6 <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  40534a:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  40534e:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  405352:	429a      	cmp	r2, r3
  405354:	d149      	bne.n	4053ea <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405356:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  40535a:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  40535e:	429a      	cmp	r2, r3
  405360:	d145      	bne.n	4053ee <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  405362:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  405366:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  40536a:	429a      	cmp	r2, r3
  40536c:	d141      	bne.n	4053f2 <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40536e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  405372:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  405376:	429a      	cmp	r2, r3
  405378:	d13d      	bne.n	4053f6 <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  40537a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  40537e:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  405382:	429a      	cmp	r2, r3
  405384:	d139      	bne.n	4053fa <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405386:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  40538a:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  40538e:	429a      	cmp	r2, r3
  405390:	d135      	bne.n	4053fe <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  405392:	6c22      	ldr	r2, [r4, #64]	; 0x40
  405394:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  405396:	429a      	cmp	r2, r3
  405398:	d133      	bne.n	405402 <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40539a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  40539e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4053a2:	429a      	cmp	r2, r3
  4053a4:	d12f      	bne.n	405406 <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4053a6:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  4053aa:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  4053ae:	429a      	cmp	r2, r3
  4053b0:	d12b      	bne.n	40540a <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4053b2:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  4053b6:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  4053ba:	429a      	cmp	r2, r3
  4053bc:	d127      	bne.n	40540e <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4053be:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  4053c2:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  4053c6:	429a      	cmp	r2, r3
  4053c8:	d123      	bne.n	405412 <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  4053ca:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  4053ce:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  4053d2:	429a      	cmp	r2, r3
  4053d4:	d01f      	beq.n	405416 <style_snapshot_compare+0x15a>
  4053d6:	2002      	movs	r0, #2
  4053d8:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4053da:	2000      	movs	r0, #0
  4053dc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  4053de:	2002      	movs	r0, #2
  4053e0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4053e2:	2002      	movs	r0, #2
  4053e4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4053e6:	2002      	movs	r0, #2
  4053e8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  4053ea:	2002      	movs	r0, #2
  4053ec:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  4053ee:	2002      	movs	r0, #2
  4053f0:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  4053f2:	2002      	movs	r0, #2
  4053f4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  4053f6:	2002      	movs	r0, #2
  4053f8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  4053fa:	2002      	movs	r0, #2
  4053fc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  4053fe:	2002      	movs	r0, #2
  405400:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  405402:	2002      	movs	r0, #2
  405404:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  405406:	2002      	movs	r0, #2
  405408:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  40540a:	2002      	movs	r0, #2
  40540c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  40540e:	2002      	movs	r0, #2
  405410:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  405412:	2002      	movs	r0, #2
  405414:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  405416:	2001      	movs	r0, #1
}
  405418:	bd38      	pop	{r3, r4, r5, pc}
  40541a:	bf00      	nop
  40541c:	0042336d 	.word	0x0042336d

00405420 <lv_init>:
    if(lv_initialized) {
  405420:	4b22      	ldr	r3, [pc, #136]	; (4054ac <lv_init+0x8c>)
  405422:	781b      	ldrb	r3, [r3, #0]
  405424:	b103      	cbz	r3, 405428 <lv_init+0x8>
  405426:	4770      	bx	lr
{
  405428:	b510      	push	{r4, lr}
  40542a:	b084      	sub	sp, #16
    _lv_mem_init();
  40542c:	4b20      	ldr	r3, [pc, #128]	; (4054b0 <lv_init+0x90>)
  40542e:	4798      	blx	r3
    _lv_task_core_init();
  405430:	4b20      	ldr	r3, [pc, #128]	; (4054b4 <lv_init+0x94>)
  405432:	4798      	blx	r3
    _lv_fs_init();
  405434:	4b20      	ldr	r3, [pc, #128]	; (4054b8 <lv_init+0x98>)
  405436:	4798      	blx	r3
    _lv_anim_core_init();
  405438:	4b20      	ldr	r3, [pc, #128]	; (4054bc <lv_init+0x9c>)
  40543a:	4798      	blx	r3
    _lv_group_init();
  40543c:	4b20      	ldr	r3, [pc, #128]	; (4054c0 <lv_init+0xa0>)
  40543e:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  405440:	2110      	movs	r1, #16
  405442:	4820      	ldr	r0, [pc, #128]	; (4054c4 <lv_init+0xa4>)
  405444:	4c20      	ldr	r4, [pc, #128]	; (4054c8 <lv_init+0xa8>)
  405446:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  405448:	f44f 71c4 	mov.w	r1, #392	; 0x188
  40544c:	481f      	ldr	r0, [pc, #124]	; (4054cc <lv_init+0xac>)
  40544e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  405450:	2160      	movs	r1, #96	; 0x60
  405452:	481f      	ldr	r0, [pc, #124]	; (4054d0 <lv_init+0xb0>)
  405454:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  405456:	f04f 0000 	mov.w	r0, #0
  40545a:	2316      	movs	r3, #22
  40545c:	f363 00c7 	bfi	r0, r3, #3, #5
  405460:	2214      	movs	r2, #20
  405462:	f362 200c 	bfi	r0, r2, #8, #5
  405466:	f36f 304f 	bfc	r0, #13, #3
  40546a:	f04f 0100 	mov.w	r1, #0
  40546e:	220d      	movs	r2, #13
  405470:	f362 01c7 	bfi	r1, r2, #3, #5
  405474:	f363 210c 	bfi	r1, r3, #8, #5
  405478:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  40547c:	4b15      	ldr	r3, [pc, #84]	; (4054d4 <lv_init+0xb4>)
  40547e:	9302      	str	r3, [sp, #8]
  405480:	9301      	str	r3, [sp, #4]
  405482:	9300      	str	r3, [sp, #0]
  405484:	2202      	movs	r2, #2
  405486:	4c14      	ldr	r4, [pc, #80]	; (4054d8 <lv_init+0xb8>)
  405488:	47a0      	blx	r4
    lv_theme_set_act(th);
  40548a:	4b14      	ldr	r3, [pc, #80]	; (4054dc <lv_init+0xbc>)
  40548c:	4798      	blx	r3
    _lv_refr_init();
  40548e:	4b14      	ldr	r3, [pc, #80]	; (4054e0 <lv_init+0xc0>)
  405490:	4798      	blx	r3
    _lv_indev_init();
  405492:	4b14      	ldr	r3, [pc, #80]	; (4054e4 <lv_init+0xc4>)
  405494:	4798      	blx	r3
    _lv_img_decoder_init();
  405496:	4b14      	ldr	r3, [pc, #80]	; (4054e8 <lv_init+0xc8>)
  405498:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  40549a:	2001      	movs	r0, #1
  40549c:	4b13      	ldr	r3, [pc, #76]	; (4054ec <lv_init+0xcc>)
  40549e:	4798      	blx	r3
    lv_initialized = true;
  4054a0:	2201      	movs	r2, #1
  4054a2:	4b02      	ldr	r3, [pc, #8]	; (4054ac <lv_init+0x8c>)
  4054a4:	701a      	strb	r2, [r3, #0]
}
  4054a6:	b004      	add	sp, #16
  4054a8:	bd10      	pop	{r4, pc}
  4054aa:	bf00      	nop
  4054ac:	2040c39c 	.word	0x2040c39c
  4054b0:	00416165 	.word	0x00416165
  4054b4:	004174e1 	.word	0x004174e1
  4054b8:	00415b11 	.word	0x00415b11
  4054bc:	00414f41 	.word	0x00414f41
  4054c0:	00403641 	.word	0x00403641
  4054c4:	2043a264 	.word	0x2043a264
  4054c8:	00415ce7 	.word	0x00415ce7
  4054cc:	2043a1c0 	.word	0x2043a1c0
  4054d0:	2043a1b4 	.word	0x2043a1b4
  4054d4:	2040002c 	.word	0x2040002c
  4054d8:	0041d4f1 	.word	0x0041d4f1
  4054dc:	00417eb9 	.word	0x00417eb9
  4054e0:	00409421 	.word	0x00409421
  4054e4:	00404b41 	.word	0x00404b41
  4054e8:	004136b5 	.word	0x004136b5
  4054ec:	00412ca5 	.word	0x00412ca5

004054f0 <lv_obj_set_adv_hittest>:
{
  4054f0:	b538      	push	{r3, r4, r5, lr}
  4054f2:	4604      	mov	r4, r0
  4054f4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054f6:	4b0a      	ldr	r3, [pc, #40]	; (405520 <lv_obj_set_adv_hittest+0x30>)
  4054f8:	4798      	blx	r3
  4054fa:	b140      	cbz	r0, 40550e <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
  4054fc:	b96d      	cbnz	r5, 40551a <lv_obj_set_adv_hittest+0x2a>
  4054fe:	2200      	movs	r2, #0
  405500:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405504:	f362 13c7 	bfi	r3, r2, #7, #1
  405508:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40550c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40550e:	4622      	mov	r2, r4
  405510:	2300      	movs	r3, #0
  405512:	4804      	ldr	r0, [pc, #16]	; (405524 <lv_obj_set_adv_hittest+0x34>)
  405514:	4904      	ldr	r1, [pc, #16]	; (405528 <lv_obj_set_adv_hittest+0x38>)
  405516:	4788      	blx	r1
  405518:	e7fe      	b.n	405518 <lv_obj_set_adv_hittest+0x28>
    obj->adv_hittest = en == false ? 0 : 1;
  40551a:	2201      	movs	r2, #1
  40551c:	e7f0      	b.n	405500 <lv_obj_set_adv_hittest+0x10>
  40551e:	bf00      	nop
  405520:	00415a81 	.word	0x00415a81
  405524:	00428ca8 	.word	0x00428ca8
  405528:	00415a8d 	.word	0x00415a8d

0040552c <lv_obj_set_click>:
{
  40552c:	b538      	push	{r3, r4, r5, lr}
  40552e:	4604      	mov	r4, r0
  405530:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405532:	4b08      	ldr	r3, [pc, #32]	; (405554 <lv_obj_set_click+0x28>)
  405534:	4798      	blx	r3
  405536:	b130      	cbz	r0, 405546 <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  405538:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40553c:	f365 0300 	bfi	r3, r5, #0, #1
  405540:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  405544:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405546:	4622      	mov	r2, r4
  405548:	2300      	movs	r3, #0
  40554a:	4803      	ldr	r0, [pc, #12]	; (405558 <lv_obj_set_click+0x2c>)
  40554c:	4903      	ldr	r1, [pc, #12]	; (40555c <lv_obj_set_click+0x30>)
  40554e:	4788      	blx	r1
  405550:	e7fe      	b.n	405550 <lv_obj_set_click+0x24>
  405552:	bf00      	nop
  405554:	00415a81 	.word	0x00415a81
  405558:	00428ca8 	.word	0x00428ca8
  40555c:	00415a8d 	.word	0x00415a8d

00405560 <lv_obj_add_protect>:
{
  405560:	b538      	push	{r3, r4, r5, lr}
  405562:	4604      	mov	r4, r0
  405564:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405566:	4b07      	ldr	r3, [pc, #28]	; (405584 <lv_obj_add_protect+0x24>)
  405568:	4798      	blx	r3
  40556a:	b128      	cbz	r0, 405578 <lv_obj_add_protect+0x18>
    obj->protect |= prot;
  40556c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  405570:	431d      	orrs	r5, r3
  405572:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  405576:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405578:	4622      	mov	r2, r4
  40557a:	2300      	movs	r3, #0
  40557c:	4802      	ldr	r0, [pc, #8]	; (405588 <lv_obj_add_protect+0x28>)
  40557e:	4903      	ldr	r1, [pc, #12]	; (40558c <lv_obj_add_protect+0x2c>)
  405580:	4788      	blx	r1
  405582:	e7fe      	b.n	405582 <lv_obj_add_protect+0x22>
  405584:	00415a81 	.word	0x00415a81
  405588:	00428ca8 	.word	0x00428ca8
  40558c:	00415a8d 	.word	0x00415a8d

00405590 <lv_obj_clear_protect>:
{
  405590:	b538      	push	{r3, r4, r5, lr}
  405592:	4604      	mov	r4, r0
  405594:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405596:	4b08      	ldr	r3, [pc, #32]	; (4055b8 <lv_obj_clear_protect+0x28>)
  405598:	4798      	blx	r3
  40559a:	b130      	cbz	r0, 4055aa <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
  40559c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  4055a0:	ea23 0305 	bic.w	r3, r3, r5
  4055a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  4055a8:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055aa:	4622      	mov	r2, r4
  4055ac:	2300      	movs	r3, #0
  4055ae:	4803      	ldr	r0, [pc, #12]	; (4055bc <lv_obj_clear_protect+0x2c>)
  4055b0:	4903      	ldr	r1, [pc, #12]	; (4055c0 <lv_obj_clear_protect+0x30>)
  4055b2:	4788      	blx	r1
  4055b4:	e7fe      	b.n	4055b4 <lv_obj_clear_protect+0x24>
  4055b6:	bf00      	nop
  4055b8:	00415a81 	.word	0x00415a81
  4055bc:	00428ca8 	.word	0x00428ca8
  4055c0:	00415a8d 	.word	0x00415a8d

004055c4 <lv_obj_set_event_cb>:
{
  4055c4:	b538      	push	{r3, r4, r5, lr}
  4055c6:	4604      	mov	r4, r0
  4055c8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055ca:	4b05      	ldr	r3, [pc, #20]	; (4055e0 <lv_obj_set_event_cb+0x1c>)
  4055cc:	4798      	blx	r3
  4055ce:	b108      	cbz	r0, 4055d4 <lv_obj_set_event_cb+0x10>
    obj->event_cb = event_cb;
  4055d0:	61a5      	str	r5, [r4, #24]
  4055d2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055d4:	4622      	mov	r2, r4
  4055d6:	2300      	movs	r3, #0
  4055d8:	4802      	ldr	r0, [pc, #8]	; (4055e4 <lv_obj_set_event_cb+0x20>)
  4055da:	4903      	ldr	r1, [pc, #12]	; (4055e8 <lv_obj_set_event_cb+0x24>)
  4055dc:	4788      	blx	r1
  4055de:	e7fe      	b.n	4055de <lv_obj_set_event_cb+0x1a>
  4055e0:	00415a81 	.word	0x00415a81
  4055e4:	00428ca8 	.word	0x00428ca8
  4055e8:	00415a8d 	.word	0x00415a8d

004055ec <lv_event_send_func>:
{
  4055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055f0:	b084      	sub	sp, #16
  4055f2:	4607      	mov	r7, r0
  4055f4:	4615      	mov	r5, r2
  4055f6:	461e      	mov	r6, r3
    if(obj != NULL) {
  4055f8:	460c      	mov	r4, r1
  4055fa:	b121      	cbz	r1, 405606 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055fc:	4608      	mov	r0, r1
  4055fe:	4b24      	ldr	r3, [pc, #144]	; (405690 <lv_event_send_func+0xa4>)
  405600:	4798      	blx	r3
  405602:	2800      	cmp	r0, #0
  405604:	d034      	beq.n	405670 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  405606:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  405608:	2300      	movs	r3, #0
  40560a:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  40560e:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  405610:	4b20      	ldr	r3, [pc, #128]	; (405694 <lv_event_send_func+0xa8>)
  405612:	681b      	ldr	r3, [r3, #0]
  405614:	b103      	cbz	r3, 405618 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  405616:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  405618:	aa01      	add	r2, sp, #4
  40561a:	4b1e      	ldr	r3, [pc, #120]	; (405694 <lv_event_send_func+0xa8>)
  40561c:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  40561e:	4b1e      	ldr	r3, [pc, #120]	; (405698 <lv_event_send_func+0xac>)
  405620:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  405624:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  405626:	4b1d      	ldr	r3, [pc, #116]	; (40569c <lv_event_send_func+0xb0>)
  405628:	4798      	blx	r3
    if(indev_act) {
  40562a:	b118      	cbz	r0, 405634 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  40562c:	6883      	ldr	r3, [r0, #8]
  40562e:	b10b      	cbz	r3, 405634 <lv_event_send_func+0x48>
  405630:	4629      	mov	r1, r5
  405632:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  405634:	b117      	cbz	r7, 40563c <lv_event_send_func+0x50>
  405636:	4629      	mov	r1, r5
  405638:	4620      	mov	r0, r4
  40563a:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  40563c:	4b16      	ldr	r3, [pc, #88]	; (405698 <lv_event_send_func+0xac>)
  40563e:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  405642:	4b14      	ldr	r3, [pc, #80]	; (405694 <lv_event_send_func+0xa8>)
  405644:	681a      	ldr	r2, [r3, #0]
  405646:	6892      	ldr	r2, [r2, #8]
  405648:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  40564a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  40564e:	b9ab      	cbnz	r3, 40567c <lv_event_send_func+0x90>
    if(obj) {
  405650:	b1c4      	cbz	r4, 405684 <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  405652:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405656:	f013 0f40 	tst.w	r3, #64	; 0x40
  40565a:	d015      	beq.n	405688 <lv_event_send_func+0x9c>
  40565c:	6820      	ldr	r0, [r4, #0]
  40565e:	b1a8      	cbz	r0, 40568c <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  405660:	4632      	mov	r2, r6
  405662:	4629      	mov	r1, r5
  405664:	4b0e      	ldr	r3, [pc, #56]	; (4056a0 <lv_event_send_func+0xb4>)
  405666:	4798      	blx	r3
            if(res != LV_RES_OK) {
  405668:	2801      	cmp	r0, #1
  40566a:	d008      	beq.n	40567e <lv_event_send_func+0x92>
                return LV_RES_INV;
  40566c:	2000      	movs	r0, #0
  40566e:	e006      	b.n	40567e <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405670:	4622      	mov	r2, r4
  405672:	2300      	movs	r3, #0
  405674:	480b      	ldr	r0, [pc, #44]	; (4056a4 <lv_event_send_func+0xb8>)
  405676:	490c      	ldr	r1, [pc, #48]	; (4056a8 <lv_event_send_func+0xbc>)
  405678:	4788      	blx	r1
  40567a:	e7fe      	b.n	40567a <lv_event_send_func+0x8e>
        return LV_RES_INV;
  40567c:	2000      	movs	r0, #0
}
  40567e:	b004      	add	sp, #16
  405680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  405684:	2001      	movs	r0, #1
  405686:	e7fa      	b.n	40567e <lv_event_send_func+0x92>
  405688:	2001      	movs	r0, #1
  40568a:	e7f8      	b.n	40567e <lv_event_send_func+0x92>
  40568c:	2001      	movs	r0, #1
  40568e:	e7f6      	b.n	40567e <lv_event_send_func+0x92>
  405690:	00415a81 	.word	0x00415a81
  405694:	2040c398 	.word	0x2040c398
  405698:	2040c394 	.word	0x2040c394
  40569c:	00404ab9 	.word	0x00404ab9
  4056a0:	004056ad 	.word	0x004056ad
  4056a4:	00428ca8 	.word	0x00428ca8
  4056a8:	00415a8d 	.word	0x00415a8d

004056ac <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  4056ac:	b198      	cbz	r0, 4056d6 <lv_event_send+0x2a>
{
  4056ae:	b570      	push	{r4, r5, r6, lr}
  4056b0:	4604      	mov	r4, r0
  4056b2:	4616      	mov	r6, r2
  4056b4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056b6:	4b09      	ldr	r3, [pc, #36]	; (4056dc <lv_event_send+0x30>)
  4056b8:	4798      	blx	r3
  4056ba:	b928      	cbnz	r0, 4056c8 <lv_event_send+0x1c>
  4056bc:	4622      	mov	r2, r4
  4056be:	2300      	movs	r3, #0
  4056c0:	4807      	ldr	r0, [pc, #28]	; (4056e0 <lv_event_send+0x34>)
  4056c2:	4908      	ldr	r1, [pc, #32]	; (4056e4 <lv_event_send+0x38>)
  4056c4:	4788      	blx	r1
  4056c6:	e7fe      	b.n	4056c6 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  4056c8:	4633      	mov	r3, r6
  4056ca:	462a      	mov	r2, r5
  4056cc:	4621      	mov	r1, r4
  4056ce:	69a0      	ldr	r0, [r4, #24]
  4056d0:	4c05      	ldr	r4, [pc, #20]	; (4056e8 <lv_event_send+0x3c>)
  4056d2:	47a0      	blx	r4
    return res;
  4056d4:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  4056d6:	2001      	movs	r0, #1
  4056d8:	4770      	bx	lr
  4056da:	bf00      	nop
  4056dc:	00415a81 	.word	0x00415a81
  4056e0:	00428ca8 	.word	0x00428ca8
  4056e4:	00415a8d 	.word	0x00415a8d
  4056e8:	004055ed 	.word	0x004055ed

004056ec <lv_obj_set_signal_cb>:
{
  4056ec:	b538      	push	{r3, r4, r5, lr}
  4056ee:	4604      	mov	r4, r0
  4056f0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056f2:	4b05      	ldr	r3, [pc, #20]	; (405708 <lv_obj_set_signal_cb+0x1c>)
  4056f4:	4798      	blx	r3
  4056f6:	b108      	cbz	r0, 4056fc <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  4056f8:	61e5      	str	r5, [r4, #28]
  4056fa:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056fc:	4622      	mov	r2, r4
  4056fe:	2300      	movs	r3, #0
  405700:	4802      	ldr	r0, [pc, #8]	; (40570c <lv_obj_set_signal_cb+0x20>)
  405702:	4903      	ldr	r1, [pc, #12]	; (405710 <lv_obj_set_signal_cb+0x24>)
  405704:	4788      	blx	r1
  405706:	e7fe      	b.n	405706 <lv_obj_set_signal_cb+0x1a>
  405708:	00415a81 	.word	0x00415a81
  40570c:	00428ca8 	.word	0x00428ca8
  405710:	00415a8d 	.word	0x00415a8d

00405714 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  405714:	b120      	cbz	r0, 405720 <lv_signal_send+0xc>
{
  405716:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  405718:	69c4      	ldr	r4, [r0, #28]
  40571a:	b11c      	cbz	r4, 405724 <lv_signal_send+0x10>
  40571c:	47a0      	blx	r4
  40571e:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  405720:	2001      	movs	r0, #1
  405722:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  405724:	2001      	movs	r0, #1
}
  405726:	bd10      	pop	{r4, pc}

00405728 <lv_obj_set_design_cb>:
{
  405728:	b538      	push	{r3, r4, r5, lr}
  40572a:	4604      	mov	r4, r0
  40572c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40572e:	4b05      	ldr	r3, [pc, #20]	; (405744 <lv_obj_set_design_cb+0x1c>)
  405730:	4798      	blx	r3
  405732:	b108      	cbz	r0, 405738 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  405734:	6225      	str	r5, [r4, #32]
  405736:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405738:	4622      	mov	r2, r4
  40573a:	2300      	movs	r3, #0
  40573c:	4802      	ldr	r0, [pc, #8]	; (405748 <lv_obj_set_design_cb+0x20>)
  40573e:	4903      	ldr	r1, [pc, #12]	; (40574c <lv_obj_set_design_cb+0x24>)
  405740:	4788      	blx	r1
  405742:	e7fe      	b.n	405742 <lv_obj_set_design_cb+0x1a>
  405744:	00415a81 	.word	0x00415a81
  405748:	00428ca8 	.word	0x00428ca8
  40574c:	00415a8d 	.word	0x00415a8d

00405750 <lv_obj_allocate_ext_attr>:
{
  405750:	b538      	push	{r3, r4, r5, lr}
  405752:	4604      	mov	r4, r0
  405754:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405756:	4b09      	ldr	r3, [pc, #36]	; (40577c <lv_obj_allocate_ext_attr+0x2c>)
  405758:	4798      	blx	r3
  40575a:	b928      	cbnz	r0, 405768 <lv_obj_allocate_ext_attr+0x18>
  40575c:	4622      	mov	r2, r4
  40575e:	2300      	movs	r3, #0
  405760:	4807      	ldr	r0, [pc, #28]	; (405780 <lv_obj_allocate_ext_attr+0x30>)
  405762:	4908      	ldr	r1, [pc, #32]	; (405784 <lv_obj_allocate_ext_attr+0x34>)
  405764:	4788      	blx	r1
  405766:	e7fe      	b.n	405766 <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  405768:	4629      	mov	r1, r5
  40576a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40576c:	4b06      	ldr	r3, [pc, #24]	; (405788 <lv_obj_allocate_ext_attr+0x38>)
  40576e:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  405770:	4603      	mov	r3, r0
  405772:	b100      	cbz	r0, 405776 <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  405774:	6260      	str	r0, [r4, #36]	; 0x24
}
  405776:	4618      	mov	r0, r3
  405778:	bd38      	pop	{r3, r4, r5, pc}
  40577a:	bf00      	nop
  40577c:	00415a81 	.word	0x00415a81
  405780:	00428ca8 	.word	0x00428ca8
  405784:	00415a8d 	.word	0x00415a8d
  405788:	004164b9 	.word	0x004164b9

0040578c <lv_obj_refresh_ext_draw_pad>:
{
  40578c:	b510      	push	{r4, lr}
  40578e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405790:	4b07      	ldr	r3, [pc, #28]	; (4057b0 <lv_obj_refresh_ext_draw_pad+0x24>)
  405792:	4798      	blx	r3
  405794:	b928      	cbnz	r0, 4057a2 <lv_obj_refresh_ext_draw_pad+0x16>
  405796:	4622      	mov	r2, r4
  405798:	2300      	movs	r3, #0
  40579a:	4806      	ldr	r0, [pc, #24]	; (4057b4 <lv_obj_refresh_ext_draw_pad+0x28>)
  40579c:	4906      	ldr	r1, [pc, #24]	; (4057b8 <lv_obj_refresh_ext_draw_pad+0x2c>)
  40579e:	4788      	blx	r1
  4057a0:	e7fe      	b.n	4057a0 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  4057a2:	2200      	movs	r2, #0
  4057a4:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  4057a6:	69e3      	ldr	r3, [r4, #28]
  4057a8:	2106      	movs	r1, #6
  4057aa:	4620      	mov	r0, r4
  4057ac:	4798      	blx	r3
  4057ae:	bd10      	pop	{r4, pc}
  4057b0:	00415a81 	.word	0x00415a81
  4057b4:	00428ca8 	.word	0x00428ca8
  4057b8:	00415a8d 	.word	0x00415a8d

004057bc <lv_obj_get_parent>:
{
  4057bc:	b510      	push	{r4, lr}
  4057be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057c0:	4b05      	ldr	r3, [pc, #20]	; (4057d8 <lv_obj_get_parent+0x1c>)
  4057c2:	4798      	blx	r3
  4057c4:	b108      	cbz	r0, 4057ca <lv_obj_get_parent+0xe>
}
  4057c6:	6820      	ldr	r0, [r4, #0]
  4057c8:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057ca:	4622      	mov	r2, r4
  4057cc:	2300      	movs	r3, #0
  4057ce:	4803      	ldr	r0, [pc, #12]	; (4057dc <lv_obj_get_parent+0x20>)
  4057d0:	4903      	ldr	r1, [pc, #12]	; (4057e0 <lv_obj_get_parent+0x24>)
  4057d2:	4788      	blx	r1
  4057d4:	e7fe      	b.n	4057d4 <lv_obj_get_parent+0x18>
  4057d6:	bf00      	nop
  4057d8:	00415a81 	.word	0x00415a81
  4057dc:	00428ca8 	.word	0x00428ca8
  4057e0:	00415a8d 	.word	0x00415a8d

004057e4 <lv_obj_get_screen>:
{
  4057e4:	b510      	push	{r4, lr}
  4057e6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4057e8:	4b08      	ldr	r3, [pc, #32]	; (40580c <lv_obj_get_screen+0x28>)
  4057ea:	4798      	blx	r3
  4057ec:	b930      	cbnz	r0, 4057fc <lv_obj_get_screen+0x18>
  4057ee:	4622      	mov	r2, r4
  4057f0:	2300      	movs	r3, #0
  4057f2:	4807      	ldr	r0, [pc, #28]	; (405810 <lv_obj_get_screen+0x2c>)
  4057f4:	4907      	ldr	r1, [pc, #28]	; (405814 <lv_obj_get_screen+0x30>)
  4057f6:	4788      	blx	r1
  4057f8:	e7fe      	b.n	4057f8 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  4057fa:	461c      	mov	r4, r3
  4057fc:	4620      	mov	r0, r4
  4057fe:	4b06      	ldr	r3, [pc, #24]	; (405818 <lv_obj_get_screen+0x34>)
  405800:	4798      	blx	r3
    } while(par != NULL);
  405802:	4603      	mov	r3, r0
  405804:	2800      	cmp	r0, #0
  405806:	d1f8      	bne.n	4057fa <lv_obj_get_screen+0x16>
}
  405808:	4620      	mov	r0, r4
  40580a:	bd10      	pop	{r4, pc}
  40580c:	00415a81 	.word	0x00415a81
  405810:	00428ca8 	.word	0x00428ca8
  405814:	00415a8d 	.word	0x00415a8d
  405818:	004057bd 	.word	0x004057bd

0040581c <lv_obj_get_disp>:
{
  40581c:	b570      	push	{r4, r5, r6, lr}
  40581e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405820:	4b14      	ldr	r3, [pc, #80]	; (405874 <lv_obj_get_disp+0x58>)
  405822:	4798      	blx	r3
  405824:	b1b8      	cbz	r0, 405856 <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  405826:	6823      	ldr	r3, [r4, #0]
  405828:	b11b      	cbz	r3, 405832 <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  40582a:	4620      	mov	r0, r4
  40582c:	4b12      	ldr	r3, [pc, #72]	; (405878 <lv_obj_get_disp+0x5c>)
  40582e:	4798      	blx	r3
  405830:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405832:	4812      	ldr	r0, [pc, #72]	; (40587c <lv_obj_get_disp+0x60>)
  405834:	4b12      	ldr	r3, [pc, #72]	; (405880 <lv_obj_get_disp+0x64>)
  405836:	4798      	blx	r3
  405838:	4605      	mov	r5, r0
  40583a:	b1c5      	cbz	r5, 40586e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  40583c:	f105 0638 	add.w	r6, r5, #56	; 0x38
  405840:	4630      	mov	r0, r6
  405842:	4b0f      	ldr	r3, [pc, #60]	; (405880 <lv_obj_get_disp+0x64>)
  405844:	4798      	blx	r3
  405846:	b160      	cbz	r0, 405862 <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  405848:	4284      	cmp	r4, r0
  40584a:	d010      	beq.n	40586e <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  40584c:	4601      	mov	r1, r0
  40584e:	4630      	mov	r0, r6
  405850:	4b0c      	ldr	r3, [pc, #48]	; (405884 <lv_obj_get_disp+0x68>)
  405852:	4798      	blx	r3
  405854:	e7f7      	b.n	405846 <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405856:	4622      	mov	r2, r4
  405858:	2300      	movs	r3, #0
  40585a:	480b      	ldr	r0, [pc, #44]	; (405888 <lv_obj_get_disp+0x6c>)
  40585c:	490b      	ldr	r1, [pc, #44]	; (40588c <lv_obj_get_disp+0x70>)
  40585e:	4788      	blx	r1
  405860:	e7fe      	b.n	405860 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  405862:	4629      	mov	r1, r5
  405864:	4805      	ldr	r0, [pc, #20]	; (40587c <lv_obj_get_disp+0x60>)
  405866:	4b07      	ldr	r3, [pc, #28]	; (405884 <lv_obj_get_disp+0x68>)
  405868:	4798      	blx	r3
  40586a:	4605      	mov	r5, r0
  40586c:	e7e5      	b.n	40583a <lv_obj_get_disp+0x1e>
}
  40586e:	4628      	mov	r0, r5
  405870:	bd70      	pop	{r4, r5, r6, pc}
  405872:	bf00      	nop
  405874:	00415a81 	.word	0x00415a81
  405878:	004057e5 	.word	0x004057e5
  40587c:	2043a1c0 	.word	0x2043a1c0
  405880:	00415d91 	.word	0x00415d91
  405884:	00415da5 	.word	0x00415da5
  405888:	00428ca8 	.word	0x00428ca8
  40588c:	00415a8d 	.word	0x00415a8d

00405890 <lv_obj_get_child>:
{
  405890:	b538      	push	{r3, r4, r5, lr}
  405892:	4604      	mov	r4, r0
  405894:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405896:	4b09      	ldr	r3, [pc, #36]	; (4058bc <lv_obj_get_child+0x2c>)
  405898:	4798      	blx	r3
  40589a:	b128      	cbz	r0, 4058a8 <lv_obj_get_child+0x18>
    if(child == NULL) {
  40589c:	b155      	cbz	r5, 4058b4 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  40589e:	4629      	mov	r1, r5
  4058a0:	1d20      	adds	r0, r4, #4
  4058a2:	4b07      	ldr	r3, [pc, #28]	; (4058c0 <lv_obj_get_child+0x30>)
  4058a4:	4798      	blx	r3
}
  4058a6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058a8:	4622      	mov	r2, r4
  4058aa:	2300      	movs	r3, #0
  4058ac:	4805      	ldr	r0, [pc, #20]	; (4058c4 <lv_obj_get_child+0x34>)
  4058ae:	4906      	ldr	r1, [pc, #24]	; (4058c8 <lv_obj_get_child+0x38>)
  4058b0:	4788      	blx	r1
  4058b2:	e7fe      	b.n	4058b2 <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  4058b4:	1d20      	adds	r0, r4, #4
  4058b6:	4b05      	ldr	r3, [pc, #20]	; (4058cc <lv_obj_get_child+0x3c>)
  4058b8:	4798      	blx	r3
  4058ba:	bd38      	pop	{r3, r4, r5, pc}
  4058bc:	00415a81 	.word	0x00415a81
  4058c0:	00415da5 	.word	0x00415da5
  4058c4:	00428ca8 	.word	0x00428ca8
  4058c8:	00415a8d 	.word	0x00415a8d
  4058cc:	00415d91 	.word	0x00415d91

004058d0 <lv_obj_get_coords>:
{
  4058d0:	b538      	push	{r3, r4, r5, lr}
  4058d2:	4604      	mov	r4, r0
  4058d4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058d6:	4b0b      	ldr	r3, [pc, #44]	; (405904 <lv_obj_get_coords+0x34>)
  4058d8:	4798      	blx	r3
  4058da:	b120      	cbz	r0, 4058e6 <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  4058dc:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  4058e0:	4629      	mov	r1, r5
  4058e2:	2208      	movs	r2, #8
  4058e4:	e00a      	b.n	4058fc <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4058e6:	4622      	mov	r2, r4
  4058e8:	2300      	movs	r3, #0
  4058ea:	4807      	ldr	r0, [pc, #28]	; (405908 <lv_obj_get_coords+0x38>)
  4058ec:	4907      	ldr	r1, [pc, #28]	; (40590c <lv_obj_get_coords+0x3c>)
  4058ee:	4788      	blx	r1
  4058f0:	e7fe      	b.n	4058f0 <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  4058f2:	f813 0b01 	ldrb.w	r0, [r3], #1
  4058f6:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  4058fa:	3a01      	subs	r2, #1
    while(len) {
  4058fc:	2a00      	cmp	r2, #0
  4058fe:	d1f8      	bne.n	4058f2 <lv_obj_get_coords+0x22>
}
  405900:	bd38      	pop	{r3, r4, r5, pc}
  405902:	bf00      	nop
  405904:	00415a81 	.word	0x00415a81
  405908:	00428ca8 	.word	0x00428ca8
  40590c:	00415a8d 	.word	0x00415a8d

00405910 <lv_obj_get_x>:
{
  405910:	b510      	push	{r4, lr}
  405912:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405914:	4b0a      	ldr	r3, [pc, #40]	; (405940 <lv_obj_get_x+0x30>)
  405916:	4798      	blx	r3
  405918:	b928      	cbnz	r0, 405926 <lv_obj_get_x+0x16>
  40591a:	4622      	mov	r2, r4
  40591c:	2300      	movs	r3, #0
  40591e:	4809      	ldr	r0, [pc, #36]	; (405944 <lv_obj_get_x+0x34>)
  405920:	4909      	ldr	r1, [pc, #36]	; (405948 <lv_obj_get_x+0x38>)
  405922:	4788      	blx	r1
  405924:	e7fe      	b.n	405924 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405926:	4620      	mov	r0, r4
  405928:	4b08      	ldr	r3, [pc, #32]	; (40594c <lv_obj_get_x+0x3c>)
  40592a:	4798      	blx	r3
    if(parent) {
  40592c:	4603      	mov	r3, r0
  40592e:	b120      	cbz	r0, 40593a <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  405930:	8a20      	ldrh	r0, [r4, #16]
  405932:	8a1b      	ldrh	r3, [r3, #16]
  405934:	1ac0      	subs	r0, r0, r3
  405936:	b200      	sxth	r0, r0
  405938:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  40593a:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  40593e:	bd10      	pop	{r4, pc}
  405940:	00415a81 	.word	0x00415a81
  405944:	00428ca8 	.word	0x00428ca8
  405948:	00415a8d 	.word	0x00415a8d
  40594c:	004057bd 	.word	0x004057bd

00405950 <lv_obj_get_y>:
{
  405950:	b510      	push	{r4, lr}
  405952:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405954:	4b0a      	ldr	r3, [pc, #40]	; (405980 <lv_obj_get_y+0x30>)
  405956:	4798      	blx	r3
  405958:	b928      	cbnz	r0, 405966 <lv_obj_get_y+0x16>
  40595a:	4622      	mov	r2, r4
  40595c:	2300      	movs	r3, #0
  40595e:	4809      	ldr	r0, [pc, #36]	; (405984 <lv_obj_get_y+0x34>)
  405960:	4909      	ldr	r1, [pc, #36]	; (405988 <lv_obj_get_y+0x38>)
  405962:	4788      	blx	r1
  405964:	e7fe      	b.n	405964 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405966:	4620      	mov	r0, r4
  405968:	4b08      	ldr	r3, [pc, #32]	; (40598c <lv_obj_get_y+0x3c>)
  40596a:	4798      	blx	r3
    if(parent) {
  40596c:	4603      	mov	r3, r0
  40596e:	b120      	cbz	r0, 40597a <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  405970:	8a60      	ldrh	r0, [r4, #18]
  405972:	8a5b      	ldrh	r3, [r3, #18]
  405974:	1ac0      	subs	r0, r0, r3
  405976:	b200      	sxth	r0, r0
  405978:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  40597a:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  40597e:	bd10      	pop	{r4, pc}
  405980:	00415a81 	.word	0x00415a81
  405984:	00428ca8 	.word	0x00428ca8
  405988:	00415a8d 	.word	0x00415a8d
  40598c:	004057bd 	.word	0x004057bd

00405990 <lv_obj_get_width>:
{
  405990:	b510      	push	{r4, lr}
  405992:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405994:	4b07      	ldr	r3, [pc, #28]	; (4059b4 <lv_obj_get_width+0x24>)
  405996:	4798      	blx	r3
  405998:	b130      	cbz	r0, 4059a8 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40599a:	8aa0      	ldrh	r0, [r4, #20]
  40599c:	8a23      	ldrh	r3, [r4, #16]
  40599e:	1ac0      	subs	r0, r0, r3
  4059a0:	b280      	uxth	r0, r0
  4059a2:	3001      	adds	r0, #1
}
  4059a4:	b200      	sxth	r0, r0
  4059a6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059a8:	4622      	mov	r2, r4
  4059aa:	2300      	movs	r3, #0
  4059ac:	4802      	ldr	r0, [pc, #8]	; (4059b8 <lv_obj_get_width+0x28>)
  4059ae:	4903      	ldr	r1, [pc, #12]	; (4059bc <lv_obj_get_width+0x2c>)
  4059b0:	4788      	blx	r1
  4059b2:	e7fe      	b.n	4059b2 <lv_obj_get_width+0x22>
  4059b4:	00415a81 	.word	0x00415a81
  4059b8:	00428ca8 	.word	0x00428ca8
  4059bc:	00415a8d 	.word	0x00415a8d

004059c0 <lv_obj_get_height>:
{
  4059c0:	b510      	push	{r4, lr}
  4059c2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059c4:	4b07      	ldr	r3, [pc, #28]	; (4059e4 <lv_obj_get_height+0x24>)
  4059c6:	4798      	blx	r3
  4059c8:	b130      	cbz	r0, 4059d8 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4059ca:	8ae0      	ldrh	r0, [r4, #22]
  4059cc:	8a63      	ldrh	r3, [r4, #18]
  4059ce:	1ac0      	subs	r0, r0, r3
  4059d0:	b280      	uxth	r0, r0
  4059d2:	3001      	adds	r0, #1
}
  4059d4:	b200      	sxth	r0, r0
  4059d6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059d8:	4622      	mov	r2, r4
  4059da:	2300      	movs	r3, #0
  4059dc:	4802      	ldr	r0, [pc, #8]	; (4059e8 <lv_obj_get_height+0x28>)
  4059de:	4903      	ldr	r1, [pc, #12]	; (4059ec <lv_obj_get_height+0x2c>)
  4059e0:	4788      	blx	r1
  4059e2:	e7fe      	b.n	4059e2 <lv_obj_get_height+0x22>
  4059e4:	00415a81 	.word	0x00415a81
  4059e8:	00428ca8 	.word	0x00428ca8
  4059ec:	00415a8d 	.word	0x00415a8d

004059f0 <lv_obj_get_auto_realign>:
{
  4059f0:	b510      	push	{r4, lr}
  4059f2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059f4:	4b06      	ldr	r3, [pc, #24]	; (405a10 <lv_obj_get_auto_realign+0x20>)
  4059f6:	4798      	blx	r3
  4059f8:	b120      	cbz	r0, 405a04 <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
  4059fa:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
  4059fe:	f000 0001 	and.w	r0, r0, #1
  405a02:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a04:	4622      	mov	r2, r4
  405a06:	2300      	movs	r3, #0
  405a08:	4802      	ldr	r0, [pc, #8]	; (405a14 <lv_obj_get_auto_realign+0x24>)
  405a0a:	4903      	ldr	r1, [pc, #12]	; (405a18 <lv_obj_get_auto_realign+0x28>)
  405a0c:	4788      	blx	r1
  405a0e:	e7fe      	b.n	405a0e <lv_obj_get_auto_realign+0x1e>
  405a10:	00415a81 	.word	0x00415a81
  405a14:	00428ca8 	.word	0x00428ca8
  405a18:	00415a8d 	.word	0x00415a8d

00405a1c <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  405a1c:	b909      	cbnz	r1, 405a22 <lv_obj_get_style_list+0x6>
  405a1e:	3028      	adds	r0, #40	; 0x28
  405a20:	4770      	bx	lr
{
  405a22:	b500      	push	{lr}
  405a24:	b083      	sub	sp, #12
    info.part = part;
  405a26:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  405a2a:	2300      	movs	r3, #0
  405a2c:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  405a2e:	466a      	mov	r2, sp
  405a30:	2108      	movs	r1, #8
  405a32:	4b05      	ldr	r3, [pc, #20]	; (405a48 <lv_obj_get_style_list+0x2c>)
  405a34:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  405a36:	2801      	cmp	r0, #1
  405a38:	d103      	bne.n	405a42 <lv_obj_get_style_list+0x26>
    return info.result;
  405a3a:	9801      	ldr	r0, [sp, #4]
}
  405a3c:	b003      	add	sp, #12
  405a3e:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  405a42:	2000      	movs	r0, #0
  405a44:	e7fa      	b.n	405a3c <lv_obj_get_style_list+0x20>
  405a46:	bf00      	nop
  405a48:	00405715 	.word	0x00405715

00405a4c <trans_del>:
{
  405a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a50:	4607      	mov	r7, r0
  405a52:	4688      	mov	r8, r1
  405a54:	4691      	mov	r9, r2
  405a56:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405a58:	4819      	ldr	r0, [pc, #100]	; (405ac0 <trans_del+0x74>)
  405a5a:	4b1a      	ldr	r3, [pc, #104]	; (405ac4 <trans_del+0x78>)
  405a5c:	4798      	blx	r3
  405a5e:	4604      	mov	r4, r0
    while(tr != NULL) {
  405a60:	e006      	b.n	405a70 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405a62:	88a3      	ldrh	r3, [r4, #4]
  405a64:	454b      	cmp	r3, r9
  405a66:	d015      	beq.n	405a94 <trans_del+0x48>
  405a68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  405a6c:	d012      	beq.n	405a94 <trans_del+0x48>
{
  405a6e:	462c      	mov	r4, r5
    while(tr != NULL) {
  405a70:	b31c      	cbz	r4, 405aba <trans_del+0x6e>
        if(tr == tr_limit) break;
  405a72:	42b4      	cmp	r4, r6
  405a74:	d021      	beq.n	405aba <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405a76:	4621      	mov	r1, r4
  405a78:	4811      	ldr	r0, [pc, #68]	; (405ac0 <trans_del+0x74>)
  405a7a:	4b13      	ldr	r3, [pc, #76]	; (405ac8 <trans_del+0x7c>)
  405a7c:	4798      	blx	r3
  405a7e:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  405a80:	6820      	ldr	r0, [r4, #0]
  405a82:	42b8      	cmp	r0, r7
  405a84:	d1f3      	bne.n	405a6e <trans_del+0x22>
  405a86:	79a1      	ldrb	r1, [r4, #6]
  405a88:	4541      	cmp	r1, r8
  405a8a:	d0ea      	beq.n	405a62 <trans_del+0x16>
  405a8c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  405a90:	d1ed      	bne.n	405a6e <trans_del+0x22>
  405a92:	e7e6      	b.n	405a62 <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405a94:	4b0d      	ldr	r3, [pc, #52]	; (405acc <trans_del+0x80>)
  405a96:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405a98:	4b0d      	ldr	r3, [pc, #52]	; (405ad0 <trans_del+0x84>)
  405a9a:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  405a9c:	88a1      	ldrh	r1, [r4, #4]
  405a9e:	4b0d      	ldr	r3, [pc, #52]	; (405ad4 <trans_del+0x88>)
  405aa0:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  405aa2:	2100      	movs	r1, #0
  405aa4:	4620      	mov	r0, r4
  405aa6:	4b0c      	ldr	r3, [pc, #48]	; (405ad8 <trans_del+0x8c>)
  405aa8:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405aaa:	4621      	mov	r1, r4
  405aac:	4804      	ldr	r0, [pc, #16]	; (405ac0 <trans_del+0x74>)
  405aae:	4b0b      	ldr	r3, [pc, #44]	; (405adc <trans_del+0x90>)
  405ab0:	4798      	blx	r3
            lv_mem_free(tr);
  405ab2:	4620      	mov	r0, r4
  405ab4:	4b0a      	ldr	r3, [pc, #40]	; (405ae0 <trans_del+0x94>)
  405ab6:	4798      	blx	r3
  405ab8:	e7d9      	b.n	405a6e <trans_del+0x22>
  405aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405abe:	bf00      	nop
  405ac0:	2043a264 	.word	0x2043a264
  405ac4:	00415d9b 	.word	0x00415d9b
  405ac8:	00415db3 	.word	0x00415db3
  405acc:	00405a1d 	.word	0x00405a1d
  405ad0:	0040a9bd 	.word	0x0040a9bd
  405ad4:	00409e19 	.word	0x00409e19
  405ad8:	00414fe1 	.word	0x00414fe1
  405adc:	00415e4d 	.word	0x00415e4d
  405ae0:	0041624d 	.word	0x0041624d

00405ae4 <lv_obj_clean_style_list>:
{
  405ae4:	b538      	push	{r3, r4, r5, lr}
  405ae6:	4604      	mov	r4, r0
  405ae8:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  405aea:	4b06      	ldr	r3, [pc, #24]	; (405b04 <lv_obj_clean_style_list+0x20>)
  405aec:	4798      	blx	r3
    if(style_dsc == NULL) {
  405aee:	b138      	cbz	r0, 405b00 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  405af0:	4b05      	ldr	r3, [pc, #20]	; (405b08 <lv_obj_clean_style_list+0x24>)
  405af2:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  405af4:	2300      	movs	r3, #0
  405af6:	22ff      	movs	r2, #255	; 0xff
  405af8:	4629      	mov	r1, r5
  405afa:	4620      	mov	r0, r4
  405afc:	4c03      	ldr	r4, [pc, #12]	; (405b0c <lv_obj_clean_style_list+0x28>)
  405afe:	47a0      	blx	r4
  405b00:	bd38      	pop	{r3, r4, r5, pc}
  405b02:	bf00      	nop
  405b04:	00405a1d 	.word	0x00405a1d
  405b08:	0040a9d1 	.word	0x0040a9d1
  405b0c:	00405a4d 	.word	0x00405a4d

00405b10 <_lv_obj_disable_style_caching>:
{
  405b10:	b570      	push	{r4, r5, r6, lr}
  405b12:	4605      	mov	r5, r0
  405b14:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405b16:	2400      	movs	r4, #0
  405b18:	2c3f      	cmp	r4, #63	; 0x3f
  405b1a:	d80b      	bhi.n	405b34 <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405b1c:	4621      	mov	r1, r4
  405b1e:	4628      	mov	r0, r5
  405b20:	4b0c      	ldr	r3, [pc, #48]	; (405b54 <_lv_obj_disable_style_caching+0x44>)
  405b22:	4798      	blx	r3
        if(list == NULL) break;
  405b24:	b130      	cbz	r0, 405b34 <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  405b26:	7942      	ldrb	r2, [r0, #5]
  405b28:	f366 02c3 	bfi	r2, r6, #3, #1
  405b2c:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405b2e:	3401      	adds	r4, #1
  405b30:	b2e4      	uxtb	r4, r4
  405b32:	e7f1      	b.n	405b18 <_lv_obj_disable_style_caching+0x8>
  405b34:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405b36:	2cff      	cmp	r4, #255	; 0xff
  405b38:	d00b      	beq.n	405b52 <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405b3a:	4621      	mov	r1, r4
  405b3c:	4628      	mov	r0, r5
  405b3e:	4b05      	ldr	r3, [pc, #20]	; (405b54 <_lv_obj_disable_style_caching+0x44>)
  405b40:	4798      	blx	r3
        if(list == NULL) break;
  405b42:	b130      	cbz	r0, 405b52 <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  405b44:	7942      	ldrb	r2, [r0, #5]
  405b46:	f366 02c3 	bfi	r2, r6, #3, #1
  405b4a:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405b4c:	3401      	adds	r4, #1
  405b4e:	b2e4      	uxtb	r4, r4
  405b50:	e7f1      	b.n	405b36 <_lv_obj_disable_style_caching+0x26>
  405b52:	bd70      	pop	{r4, r5, r6, pc}
  405b54:	00405a1d 	.word	0x00405a1d

00405b58 <trans_anim_ready_cb>:
{
  405b58:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  405b5a:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405b5c:	4816      	ldr	r0, [pc, #88]	; (405bb8 <trans_anim_ready_cb+0x60>)
  405b5e:	4b17      	ldr	r3, [pc, #92]	; (405bbc <trans_anim_ready_cb+0x64>)
  405b60:	4798      	blx	r3
    bool running = false;
  405b62:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405b64:	e003      	b.n	405b6e <trans_anim_ready_cb+0x16>
  405b66:	4601      	mov	r1, r0
  405b68:	4813      	ldr	r0, [pc, #76]	; (405bb8 <trans_anim_ready_cb+0x60>)
  405b6a:	4b15      	ldr	r3, [pc, #84]	; (405bc0 <trans_anim_ready_cb+0x68>)
  405b6c:	4798      	blx	r3
  405b6e:	b178      	cbz	r0, 405b90 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  405b70:	42a0      	cmp	r0, r4
  405b72:	d0f8      	beq.n	405b66 <trans_anim_ready_cb+0xe>
  405b74:	6802      	ldr	r2, [r0, #0]
  405b76:	6823      	ldr	r3, [r4, #0]
  405b78:	429a      	cmp	r2, r3
  405b7a:	d1f4      	bne.n	405b66 <trans_anim_ready_cb+0xe>
  405b7c:	6843      	ldr	r3, [r0, #4]
  405b7e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  405b82:	6863      	ldr	r3, [r4, #4]
  405b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  405b88:	429a      	cmp	r2, r3
  405b8a:	d1ec      	bne.n	405b66 <trans_anim_ready_cb+0xe>
            running = true;
  405b8c:	2501      	movs	r5, #1
  405b8e:	e7ea      	b.n	405b66 <trans_anim_ready_cb+0xe>
    if(!running) {
  405b90:	b13d      	cbz	r5, 405ba2 <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  405b92:	4621      	mov	r1, r4
  405b94:	4808      	ldr	r0, [pc, #32]	; (405bb8 <trans_anim_ready_cb+0x60>)
  405b96:	4b0b      	ldr	r3, [pc, #44]	; (405bc4 <trans_anim_ready_cb+0x6c>)
  405b98:	4798      	blx	r3
    lv_mem_free(tr);
  405b9a:	4620      	mov	r0, r4
  405b9c:	4b0a      	ldr	r3, [pc, #40]	; (405bc8 <trans_anim_ready_cb+0x70>)
  405b9e:	4798      	blx	r3
  405ba0:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405ba2:	79a1      	ldrb	r1, [r4, #6]
  405ba4:	6820      	ldr	r0, [r4, #0]
  405ba6:	4b09      	ldr	r3, [pc, #36]	; (405bcc <trans_anim_ready_cb+0x74>)
  405ba8:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  405baa:	4b09      	ldr	r3, [pc, #36]	; (405bd0 <trans_anim_ready_cb+0x78>)
  405bac:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  405bae:	88a1      	ldrh	r1, [r4, #4]
  405bb0:	4b08      	ldr	r3, [pc, #32]	; (405bd4 <trans_anim_ready_cb+0x7c>)
  405bb2:	4798      	blx	r3
  405bb4:	e7ed      	b.n	405b92 <trans_anim_ready_cb+0x3a>
  405bb6:	bf00      	nop
  405bb8:	2043a264 	.word	0x2043a264
  405bbc:	00415d91 	.word	0x00415d91
  405bc0:	00415da5 	.word	0x00415da5
  405bc4:	00415e4d 	.word	0x00415e4d
  405bc8:	0041624d 	.word	0x0041624d
  405bcc:	00405a1d 	.word	0x00405a1d
  405bd0:	0040a9bd 	.word	0x0040a9bd
  405bd4:	00409e19 	.word	0x00409e19

00405bd8 <lv_obj_get_hidden>:
{
  405bd8:	b510      	push	{r4, lr}
  405bda:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bdc:	4b06      	ldr	r3, [pc, #24]	; (405bf8 <lv_obj_get_hidden+0x20>)
  405bde:	4798      	blx	r3
  405be0:	b120      	cbz	r0, 405bec <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  405be2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405be6:	f3c0 1000 	ubfx	r0, r0, #4, #1
  405bea:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405bec:	4622      	mov	r2, r4
  405bee:	2300      	movs	r3, #0
  405bf0:	4802      	ldr	r0, [pc, #8]	; (405bfc <lv_obj_get_hidden+0x24>)
  405bf2:	4903      	ldr	r1, [pc, #12]	; (405c00 <lv_obj_get_hidden+0x28>)
  405bf4:	4788      	blx	r1
  405bf6:	e7fe      	b.n	405bf6 <lv_obj_get_hidden+0x1e>
  405bf8:	00415a81 	.word	0x00415a81
  405bfc:	00428ca8 	.word	0x00428ca8
  405c00:	00415a8d 	.word	0x00415a8d

00405c04 <lv_obj_area_is_visible>:
{
  405c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c08:	b082      	sub	sp, #8
  405c0a:	4604      	mov	r4, r0
  405c0c:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  405c0e:	4b34      	ldr	r3, [pc, #208]	; (405ce0 <lv_obj_area_is_visible+0xdc>)
  405c10:	4798      	blx	r3
  405c12:	b120      	cbz	r0, 405c1e <lv_obj_area_is_visible+0x1a>
  405c14:	2600      	movs	r6, #0
}
  405c16:	4630      	mov	r0, r6
  405c18:	b002      	add	sp, #8
  405c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405c1e:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  405c20:	4620      	mov	r0, r4
  405c22:	4b30      	ldr	r3, [pc, #192]	; (405ce4 <lv_obj_area_is_visible+0xe0>)
  405c24:	4798      	blx	r3
  405c26:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405c28:	4b2f      	ldr	r3, [pc, #188]	; (405ce8 <lv_obj_area_is_visible+0xe4>)
  405c2a:	4798      	blx	r3
  405c2c:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405c2e:	4b2f      	ldr	r3, [pc, #188]	; (405cec <lv_obj_area_is_visible+0xe8>)
  405c30:	4798      	blx	r3
  405c32:	4287      	cmp	r7, r0
  405c34:	d010      	beq.n	405c58 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405c36:	4640      	mov	r0, r8
  405c38:	4b2d      	ldr	r3, [pc, #180]	; (405cf0 <lv_obj_area_is_visible+0xec>)
  405c3a:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405c3c:	4287      	cmp	r7, r0
  405c3e:	d00b      	beq.n	405c58 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  405c40:	4640      	mov	r0, r8
  405c42:	4b2c      	ldr	r3, [pc, #176]	; (405cf4 <lv_obj_area_is_visible+0xf0>)
  405c44:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405c46:	4287      	cmp	r7, r0
  405c48:	d006      	beq.n	405c58 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  405c4a:	4640      	mov	r0, r8
  405c4c:	4b2a      	ldr	r3, [pc, #168]	; (405cf8 <lv_obj_area_is_visible+0xf4>)
  405c4e:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  405c50:	4287      	cmp	r7, r0
  405c52:	d001      	beq.n	405c58 <lv_obj_area_is_visible+0x54>
    return true;
  405c54:	2601      	movs	r6, #1
  405c56:	e7de      	b.n	405c16 <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  405c58:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  405c5c:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405c60:	466a      	mov	r2, sp
  405c62:	2308      	movs	r3, #8
  405c64:	e004      	b.n	405c70 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  405c66:	f811 0b01 	ldrb.w	r0, [r1], #1
  405c6a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  405c6e:	3b01      	subs	r3, #1
    while(len) {
  405c70:	2b00      	cmp	r3, #0
  405c72:	d1f8      	bne.n	405c66 <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  405c74:	b2bb      	uxth	r3, r7
  405c76:	f8bd 2000 	ldrh.w	r2, [sp]
  405c7a:	1ad2      	subs	r2, r2, r3
  405c7c:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  405c80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405c84:	1ad2      	subs	r2, r2, r3
  405c86:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  405c8a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405c8e:	441a      	add	r2, r3
  405c90:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  405c94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405c98:	4413      	add	r3, r2
  405c9a:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  405c9e:	466a      	mov	r2, sp
  405ca0:	4629      	mov	r1, r5
  405ca2:	4628      	mov	r0, r5
  405ca4:	4b15      	ldr	r3, [pc, #84]	; (405cfc <lv_obj_area_is_visible+0xf8>)
  405ca6:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  405ca8:	4607      	mov	r7, r0
  405caa:	2800      	cmp	r0, #0
  405cac:	d0b3      	beq.n	405c16 <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  405cae:	4620      	mov	r0, r4
  405cb0:	4b13      	ldr	r3, [pc, #76]	; (405d00 <lv_obj_area_is_visible+0xfc>)
  405cb2:	4798      	blx	r3
  405cb4:	4604      	mov	r4, r0
        while(par != NULL) {
  405cb6:	b18c      	cbz	r4, 405cdc <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  405cb8:	f104 0210 	add.w	r2, r4, #16
  405cbc:	4629      	mov	r1, r5
  405cbe:	4628      	mov	r0, r5
  405cc0:	4b0e      	ldr	r3, [pc, #56]	; (405cfc <lv_obj_area_is_visible+0xf8>)
  405cc2:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  405cc4:	2800      	cmp	r0, #0
  405cc6:	d0a6      	beq.n	405c16 <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  405cc8:	4620      	mov	r0, r4
  405cca:	4b05      	ldr	r3, [pc, #20]	; (405ce0 <lv_obj_area_is_visible+0xdc>)
  405ccc:	4798      	blx	r3
  405cce:	2800      	cmp	r0, #0
  405cd0:	d1a1      	bne.n	405c16 <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405cd2:	4620      	mov	r0, r4
  405cd4:	4b0a      	ldr	r3, [pc, #40]	; (405d00 <lv_obj_area_is_visible+0xfc>)
  405cd6:	4798      	blx	r3
  405cd8:	4604      	mov	r4, r0
  405cda:	e7ec      	b.n	405cb6 <lv_obj_area_is_visible+0xb2>
    return true;
  405cdc:	463e      	mov	r6, r7
  405cde:	e79a      	b.n	405c16 <lv_obj_area_is_visible+0x12>
  405ce0:	00405bd9 	.word	0x00405bd9
  405ce4:	004057e5 	.word	0x004057e5
  405ce8:	0040581d 	.word	0x0040581d
  405cec:	004034c1 	.word	0x004034c1
  405cf0:	004034dd 	.word	0x004034dd
  405cf4:	004034f9 	.word	0x004034f9
  405cf8:	00403515 	.word	0x00403515
  405cfc:	004151bb 	.word	0x004151bb
  405d00:	004057bd 	.word	0x004057bd

00405d04 <lv_obj_invalidate_area>:
{
  405d04:	b530      	push	{r4, r5, lr}
  405d06:	b083      	sub	sp, #12
  405d08:	4605      	mov	r5, r0
  405d0a:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d0c:	4b10      	ldr	r3, [pc, #64]	; (405d50 <lv_obj_invalidate_area+0x4c>)
  405d0e:	4798      	blx	r3
  405d10:	b118      	cbz	r0, 405d1a <lv_obj_invalidate_area+0x16>
  405d12:	4622      	mov	r2, r4
  405d14:	4669      	mov	r1, sp
  405d16:	2308      	movs	r3, #8
  405d18:	e00a      	b.n	405d30 <lv_obj_invalidate_area+0x2c>
  405d1a:	462a      	mov	r2, r5
  405d1c:	2300      	movs	r3, #0
  405d1e:	480d      	ldr	r0, [pc, #52]	; (405d54 <lv_obj_invalidate_area+0x50>)
  405d20:	490d      	ldr	r1, [pc, #52]	; (405d58 <lv_obj_invalidate_area+0x54>)
  405d22:	4788      	blx	r1
  405d24:	e7fe      	b.n	405d24 <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  405d26:	f812 0b01 	ldrb.w	r0, [r2], #1
  405d2a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  405d2e:	3b01      	subs	r3, #1
    while(len) {
  405d30:	2b00      	cmp	r3, #0
  405d32:	d1f8      	bne.n	405d26 <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405d34:	4669      	mov	r1, sp
  405d36:	4628      	mov	r0, r5
  405d38:	4b08      	ldr	r3, [pc, #32]	; (405d5c <lv_obj_invalidate_area+0x58>)
  405d3a:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  405d3c:	b128      	cbz	r0, 405d4a <lv_obj_invalidate_area+0x46>
  405d3e:	4628      	mov	r0, r5
  405d40:	4b07      	ldr	r3, [pc, #28]	; (405d60 <lv_obj_invalidate_area+0x5c>)
  405d42:	4798      	blx	r3
  405d44:	4669      	mov	r1, sp
  405d46:	4b07      	ldr	r3, [pc, #28]	; (405d64 <lv_obj_invalidate_area+0x60>)
  405d48:	4798      	blx	r3
}
  405d4a:	b003      	add	sp, #12
  405d4c:	bd30      	pop	{r4, r5, pc}
  405d4e:	bf00      	nop
  405d50:	00415a81 	.word	0x00415a81
  405d54:	00428ca8 	.word	0x00428ca8
  405d58:	00415a8d 	.word	0x00415a8d
  405d5c:	00405c05 	.word	0x00405c05
  405d60:	0040581d 	.word	0x0040581d
  405d64:	00409425 	.word	0x00409425

00405d68 <lv_obj_invalidate>:
{
  405d68:	b530      	push	{r4, r5, lr}
  405d6a:	b083      	sub	sp, #12
  405d6c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d6e:	4b19      	ldr	r3, [pc, #100]	; (405dd4 <lv_obj_invalidate+0x6c>)
  405d70:	4798      	blx	r3
  405d72:	b130      	cbz	r0, 405d82 <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405d74:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  405d78:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405d7c:	4669      	mov	r1, sp
  405d7e:	2208      	movs	r2, #8
  405d80:	e00a      	b.n	405d98 <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d82:	4622      	mov	r2, r4
  405d84:	2300      	movs	r3, #0
  405d86:	4814      	ldr	r0, [pc, #80]	; (405dd8 <lv_obj_invalidate+0x70>)
  405d88:	4914      	ldr	r1, [pc, #80]	; (405ddc <lv_obj_invalidate+0x74>)
  405d8a:	4788      	blx	r1
  405d8c:	e7fe      	b.n	405d8c <lv_obj_invalidate+0x24>
        *d8 = *s8;
  405d8e:	f810 5b01 	ldrb.w	r5, [r0], #1
  405d92:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  405d96:	3a01      	subs	r2, #1
    while(len) {
  405d98:	2a00      	cmp	r2, #0
  405d9a:	d1f8      	bne.n	405d8e <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  405d9c:	b29b      	uxth	r3, r3
  405d9e:	f8bd 2000 	ldrh.w	r2, [sp]
  405da2:	1ad2      	subs	r2, r2, r3
  405da4:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405da8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405dac:	1ad2      	subs	r2, r2, r3
  405dae:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405db2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405db6:	441a      	add	r2, r3
  405db8:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405dbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405dc0:	4413      	add	r3, r2
  405dc2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  405dc6:	4669      	mov	r1, sp
  405dc8:	4620      	mov	r0, r4
  405dca:	4b05      	ldr	r3, [pc, #20]	; (405de0 <lv_obj_invalidate+0x78>)
  405dcc:	4798      	blx	r3
}
  405dce:	b003      	add	sp, #12
  405dd0:	bd30      	pop	{r4, r5, pc}
  405dd2:	bf00      	nop
  405dd4:	00415a81 	.word	0x00415a81
  405dd8:	00428ca8 	.word	0x00428ca8
  405ddc:	00415a8d 	.word	0x00415a8d
  405de0:	00405d05 	.word	0x00405d05

00405de4 <lv_obj_move_foreground>:
{
  405de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405de6:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405de8:	4b11      	ldr	r3, [pc, #68]	; (405e30 <lv_obj_move_foreground+0x4c>)
  405dea:	4798      	blx	r3
  405dec:	b928      	cbnz	r0, 405dfa <lv_obj_move_foreground+0x16>
  405dee:	462a      	mov	r2, r5
  405df0:	2300      	movs	r3, #0
  405df2:	4810      	ldr	r0, [pc, #64]	; (405e34 <lv_obj_move_foreground+0x50>)
  405df4:	4910      	ldr	r1, [pc, #64]	; (405e38 <lv_obj_move_foreground+0x54>)
  405df6:	4788      	blx	r1
  405df8:	e7fe      	b.n	405df8 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405dfa:	4628      	mov	r0, r5
  405dfc:	4b0f      	ldr	r3, [pc, #60]	; (405e3c <lv_obj_move_foreground+0x58>)
  405dfe:	4798      	blx	r3
  405e00:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  405e02:	1d06      	adds	r6, r0, #4
  405e04:	4630      	mov	r0, r6
  405e06:	4b0e      	ldr	r3, [pc, #56]	; (405e40 <lv_obj_move_foreground+0x5c>)
  405e08:	4798      	blx	r3
  405e0a:	4285      	cmp	r5, r0
  405e0c:	d00f      	beq.n	405e2e <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  405e0e:	4620      	mov	r0, r4
  405e10:	4f0c      	ldr	r7, [pc, #48]	; (405e44 <lv_obj_move_foreground+0x60>)
  405e12:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  405e14:	2301      	movs	r3, #1
  405e16:	462a      	mov	r2, r5
  405e18:	4631      	mov	r1, r6
  405e1a:	4630      	mov	r0, r6
  405e1c:	4e0a      	ldr	r6, [pc, #40]	; (405e48 <lv_obj_move_foreground+0x64>)
  405e1e:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  405e20:	69e3      	ldr	r3, [r4, #28]
  405e22:	462a      	mov	r2, r5
  405e24:	2101      	movs	r1, #1
  405e26:	4620      	mov	r0, r4
  405e28:	4798      	blx	r3
    lv_obj_invalidate(parent);
  405e2a:	4620      	mov	r0, r4
  405e2c:	47b8      	blx	r7
  405e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e30:	00415a81 	.word	0x00415a81
  405e34:	00428ca8 	.word	0x00428ca8
  405e38:	00415a8d 	.word	0x00415a8d
  405e3c:	004057bd 	.word	0x004057bd
  405e40:	00415d91 	.word	0x00415d91
  405e44:	00405d69 	.word	0x00405d69
  405e48:	00415ee5 	.word	0x00415ee5

00405e4c <lv_obj_set_pos>:
{
  405e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405e50:	b083      	sub	sp, #12
  405e52:	4604      	mov	r4, r0
  405e54:	460f      	mov	r7, r1
  405e56:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405e58:	4b24      	ldr	r3, [pc, #144]	; (405eec <lv_obj_set_pos+0xa0>)
  405e5a:	4798      	blx	r3
  405e5c:	2800      	cmp	r0, #0
  405e5e:	d03f      	beq.n	405ee0 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  405e60:	6826      	ldr	r6, [r4, #0]
    if(par) {
  405e62:	b12e      	cbz	r6, 405e70 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  405e64:	8a33      	ldrh	r3, [r6, #16]
  405e66:	441f      	add	r7, r3
  405e68:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  405e6a:	8a73      	ldrh	r3, [r6, #18]
  405e6c:	441d      	add	r5, r3
  405e6e:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  405e70:	8a23      	ldrh	r3, [r4, #16]
  405e72:	1afb      	subs	r3, r7, r3
  405e74:	fa1f f883 	uxth.w	r8, r3
  405e78:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  405e7c:	8a63      	ldrh	r3, [r4, #18]
  405e7e:	1aed      	subs	r5, r5, r3
  405e80:	b2ad      	uxth	r5, r5
  405e82:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  405e86:	b917      	cbnz	r7, 405e8e <lv_obj_set_pos+0x42>
  405e88:	f1b9 0f00 	cmp.w	r9, #0
  405e8c:	d025      	beq.n	405eda <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  405e8e:	4620      	mov	r0, r4
  405e90:	4b17      	ldr	r3, [pc, #92]	; (405ef0 <lv_obj_set_pos+0xa4>)
  405e92:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  405e94:	4669      	mov	r1, sp
  405e96:	4620      	mov	r0, r4
  405e98:	4b16      	ldr	r3, [pc, #88]	; (405ef4 <lv_obj_set_pos+0xa8>)
  405e9a:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  405e9c:	8a23      	ldrh	r3, [r4, #16]
  405e9e:	4443      	add	r3, r8
  405ea0:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  405ea2:	8a63      	ldrh	r3, [r4, #18]
  405ea4:	442b      	add	r3, r5
  405ea6:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  405ea8:	8aa3      	ldrh	r3, [r4, #20]
  405eaa:	4443      	add	r3, r8
  405eac:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  405eae:	8ae3      	ldrh	r3, [r4, #22]
  405eb0:	441d      	add	r5, r3
  405eb2:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  405eb4:	464a      	mov	r2, r9
  405eb6:	4639      	mov	r1, r7
  405eb8:	4620      	mov	r0, r4
  405eba:	4b0f      	ldr	r3, [pc, #60]	; (405ef8 <lv_obj_set_pos+0xac>)
  405ebc:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  405ebe:	69e3      	ldr	r3, [r4, #28]
  405ec0:	466a      	mov	r2, sp
  405ec2:	2102      	movs	r1, #2
  405ec4:	4620      	mov	r0, r4
  405ec6:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  405ec8:	b126      	cbz	r6, 405ed4 <lv_obj_set_pos+0x88>
  405eca:	69f3      	ldr	r3, [r6, #28]
  405ecc:	4622      	mov	r2, r4
  405ece:	2101      	movs	r1, #1
  405ed0:	4630      	mov	r0, r6
  405ed2:	4798      	blx	r3
    lv_obj_invalidate(obj);
  405ed4:	4620      	mov	r0, r4
  405ed6:	4b06      	ldr	r3, [pc, #24]	; (405ef0 <lv_obj_set_pos+0xa4>)
  405ed8:	4798      	blx	r3
}
  405eda:	b003      	add	sp, #12
  405edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ee0:	4622      	mov	r2, r4
  405ee2:	2300      	movs	r3, #0
  405ee4:	4805      	ldr	r0, [pc, #20]	; (405efc <lv_obj_set_pos+0xb0>)
  405ee6:	4906      	ldr	r1, [pc, #24]	; (405f00 <lv_obj_set_pos+0xb4>)
  405ee8:	4788      	blx	r1
  405eea:	e7fe      	b.n	405eea <lv_obj_set_pos+0x9e>
  405eec:	00415a81 	.word	0x00415a81
  405ef0:	00405d69 	.word	0x00405d69
  405ef4:	004058d1 	.word	0x004058d1
  405ef8:	0040526d 	.word	0x0040526d
  405efc:	00428ca8 	.word	0x00428ca8
  405f00:	00415a8d 	.word	0x00415a8d

00405f04 <lv_obj_set_x>:
{
  405f04:	b538      	push	{r3, r4, r5, lr}
  405f06:	4604      	mov	r4, r0
  405f08:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f0a:	4b09      	ldr	r3, [pc, #36]	; (405f30 <lv_obj_set_x+0x2c>)
  405f0c:	4798      	blx	r3
  405f0e:	b928      	cbnz	r0, 405f1c <lv_obj_set_x+0x18>
  405f10:	4622      	mov	r2, r4
  405f12:	2300      	movs	r3, #0
  405f14:	4807      	ldr	r0, [pc, #28]	; (405f34 <lv_obj_set_x+0x30>)
  405f16:	4908      	ldr	r1, [pc, #32]	; (405f38 <lv_obj_set_x+0x34>)
  405f18:	4788      	blx	r1
  405f1a:	e7fe      	b.n	405f1a <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  405f1c:	4620      	mov	r0, r4
  405f1e:	4b07      	ldr	r3, [pc, #28]	; (405f3c <lv_obj_set_x+0x38>)
  405f20:	4798      	blx	r3
  405f22:	4602      	mov	r2, r0
  405f24:	4629      	mov	r1, r5
  405f26:	4620      	mov	r0, r4
  405f28:	4b05      	ldr	r3, [pc, #20]	; (405f40 <lv_obj_set_x+0x3c>)
  405f2a:	4798      	blx	r3
  405f2c:	bd38      	pop	{r3, r4, r5, pc}
  405f2e:	bf00      	nop
  405f30:	00415a81 	.word	0x00415a81
  405f34:	00428ca8 	.word	0x00428ca8
  405f38:	00415a8d 	.word	0x00415a8d
  405f3c:	00405951 	.word	0x00405951
  405f40:	00405e4d 	.word	0x00405e4d

00405f44 <lv_obj_set_y>:
{
  405f44:	b538      	push	{r3, r4, r5, lr}
  405f46:	4604      	mov	r4, r0
  405f48:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405f4a:	4b09      	ldr	r3, [pc, #36]	; (405f70 <lv_obj_set_y+0x2c>)
  405f4c:	4798      	blx	r3
  405f4e:	b928      	cbnz	r0, 405f5c <lv_obj_set_y+0x18>
  405f50:	4622      	mov	r2, r4
  405f52:	2300      	movs	r3, #0
  405f54:	4807      	ldr	r0, [pc, #28]	; (405f74 <lv_obj_set_y+0x30>)
  405f56:	4908      	ldr	r1, [pc, #32]	; (405f78 <lv_obj_set_y+0x34>)
  405f58:	4788      	blx	r1
  405f5a:	e7fe      	b.n	405f5a <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  405f5c:	4620      	mov	r0, r4
  405f5e:	4b07      	ldr	r3, [pc, #28]	; (405f7c <lv_obj_set_y+0x38>)
  405f60:	4798      	blx	r3
  405f62:	462a      	mov	r2, r5
  405f64:	4601      	mov	r1, r0
  405f66:	4620      	mov	r0, r4
  405f68:	4b05      	ldr	r3, [pc, #20]	; (405f80 <lv_obj_set_y+0x3c>)
  405f6a:	4798      	blx	r3
  405f6c:	bd38      	pop	{r3, r4, r5, pc}
  405f6e:	bf00      	nop
  405f70:	00415a81 	.word	0x00415a81
  405f74:	00428ca8 	.word	0x00428ca8
  405f78:	00415a8d 	.word	0x00415a8d
  405f7c:	00405911 	.word	0x00405911
  405f80:	00405e4d 	.word	0x00405e4d

00405f84 <obj_align_core>:
{
  405f84:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f86:	b083      	sub	sp, #12
  405f88:	4604      	mov	r4, r0
  405f8a:	461d      	mov	r5, r3
  405f8c:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  405f90:	f101 0010 	add.w	r0, r1, #16
  405f94:	ab01      	add	r3, sp, #4
  405f96:	f104 0110 	add.w	r1, r4, #16
  405f9a:	4f18      	ldr	r7, [pc, #96]	; (405ffc <obj_align_core+0x78>)
  405f9c:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405f9e:	4620      	mov	r0, r4
  405fa0:	4b17      	ldr	r3, [pc, #92]	; (406000 <obj_align_core+0x7c>)
  405fa2:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  405fa4:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405fa8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  405fac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405fb0:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  405fb4:	4411      	add	r1, r2
  405fb6:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  405fb8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  405fbc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  405fc0:	4402      	add	r2, r0
  405fc2:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  405fc4:	1bc9      	subs	r1, r1, r7
  405fc6:	b209      	sxth	r1, r1
  405fc8:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  405fcc:	1ad2      	subs	r2, r2, r3
  405fce:	b212      	sxth	r2, r2
  405fd0:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405fd4:	4235      	tst	r5, r6
  405fd6:	d103      	bne.n	405fe0 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405fd8:	b935      	cbnz	r5, 405fe8 <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405fda:	b94e      	cbnz	r6, 405ff0 <obj_align_core+0x6c>
}
  405fdc:	b003      	add	sp, #12
  405fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405fe0:	4620      	mov	r0, r4
  405fe2:	4b08      	ldr	r3, [pc, #32]	; (406004 <obj_align_core+0x80>)
  405fe4:	4798      	blx	r3
  405fe6:	e7f9      	b.n	405fdc <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405fe8:	4620      	mov	r0, r4
  405fea:	4b07      	ldr	r3, [pc, #28]	; (406008 <obj_align_core+0x84>)
  405fec:	4798      	blx	r3
  405fee:	e7f5      	b.n	405fdc <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405ff0:	4611      	mov	r1, r2
  405ff2:	4620      	mov	r0, r4
  405ff4:	4b05      	ldr	r3, [pc, #20]	; (40600c <obj_align_core+0x88>)
  405ff6:	4798      	blx	r3
}
  405ff8:	e7f0      	b.n	405fdc <obj_align_core+0x58>
  405ffa:	bf00      	nop
  405ffc:	004154f9 	.word	0x004154f9
  406000:	004057bd 	.word	0x004057bd
  406004:	00405e4d 	.word	0x00405e4d
  406008:	00405f05 	.word	0x00405f05
  40600c:	00405f45 	.word	0x00405f45

00406010 <lv_obj_align>:
{
  406010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406014:	b085      	sub	sp, #20
  406016:	4604      	mov	r4, r0
  406018:	460d      	mov	r5, r1
  40601a:	4690      	mov	r8, r2
  40601c:	461f      	mov	r7, r3
  40601e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406022:	4b19      	ldr	r3, [pc, #100]	; (406088 <lv_obj_align+0x78>)
  406024:	4798      	blx	r3
  406026:	b928      	cbnz	r0, 406034 <lv_obj_align+0x24>
  406028:	4622      	mov	r2, r4
  40602a:	2300      	movs	r3, #0
  40602c:	4817      	ldr	r0, [pc, #92]	; (40608c <lv_obj_align+0x7c>)
  40602e:	4918      	ldr	r1, [pc, #96]	; (406090 <lv_obj_align+0x80>)
  406030:	4788      	blx	r1
  406032:	e7fe      	b.n	406032 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  406034:	b14d      	cbz	r5, 40604a <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  406036:	4628      	mov	r0, r5
  406038:	4b13      	ldr	r3, [pc, #76]	; (406088 <lv_obj_align+0x78>)
  40603a:	4798      	blx	r3
  40603c:	b950      	cbnz	r0, 406054 <lv_obj_align+0x44>
  40603e:	462a      	mov	r2, r5
  406040:	2300      	movs	r3, #0
  406042:	4812      	ldr	r0, [pc, #72]	; (40608c <lv_obj_align+0x7c>)
  406044:	4912      	ldr	r1, [pc, #72]	; (406090 <lv_obj_align+0x80>)
  406046:	4788      	blx	r1
  406048:	e7fe      	b.n	406048 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  40604a:	4620      	mov	r0, r4
  40604c:	4b11      	ldr	r3, [pc, #68]	; (406094 <lv_obj_align+0x84>)
  40604e:	4798      	blx	r3
  406050:	4605      	mov	r5, r0
  406052:	e7f0      	b.n	406036 <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  406054:	9602      	str	r6, [sp, #8]
  406056:	9701      	str	r7, [sp, #4]
  406058:	2301      	movs	r3, #1
  40605a:	9300      	str	r3, [sp, #0]
  40605c:	4642      	mov	r2, r8
  40605e:	4629      	mov	r1, r5
  406060:	4620      	mov	r0, r4
  406062:	f8df 9034 	ldr.w	r9, [pc, #52]	; 406098 <lv_obj_align+0x88>
  406066:	47c8      	blx	r9
    obj->realign.align       = align;
  406068:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  40606c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406070:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  406074:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  406076:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40607a:	f36f 0341 	bfc	r3, #1, #1
  40607e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  406082:	b005      	add	sp, #20
  406084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406088:	00415a81 	.word	0x00415a81
  40608c:	00428ca8 	.word	0x00428ca8
  406090:	00415a8d 	.word	0x00415a8d
  406094:	004057bd 	.word	0x004057bd
  406098:	00405f85 	.word	0x00405f85

0040609c <obj_align_mid_core>:
{
  40609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060a0:	b083      	sub	sp, #12
  4060a2:	4680      	mov	r8, r0
  4060a4:	9001      	str	r0, [sp, #4]
  4060a6:	460f      	mov	r7, r1
  4060a8:	4616      	mov	r6, r2
  4060aa:	469a      	mov	sl, r3
  4060ac:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  4060b0:	4ba4      	ldr	r3, [pc, #656]	; (406344 <obj_align_mid_core+0x2a8>)
  4060b2:	4798      	blx	r3
  4060b4:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  4060b6:	4640      	mov	r0, r8
  4060b8:	4ba3      	ldr	r3, [pc, #652]	; (406348 <obj_align_mid_core+0x2ac>)
  4060ba:	4798      	blx	r3
  4060bc:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  4060be:	4640      	mov	r0, r8
  4060c0:	4ba2      	ldr	r3, [pc, #648]	; (40634c <obj_align_mid_core+0x2b0>)
  4060c2:	4798      	blx	r3
  4060c4:	4681      	mov	r9, r0
  4060c6:	2800      	cmp	r0, #0
  4060c8:	db22      	blt.n	406110 <obj_align_mid_core+0x74>
  4060ca:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  4060ce:	9801      	ldr	r0, [sp, #4]
  4060d0:	4b9f      	ldr	r3, [pc, #636]	; (406350 <obj_align_mid_core+0x2b4>)
  4060d2:	4798      	blx	r3
  4060d4:	4680      	mov	r8, r0
  4060d6:	2800      	cmp	r0, #0
  4060d8:	db1d      	blt.n	406116 <obj_align_mid_core+0x7a>
  4060da:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  4060de:	2e14      	cmp	r6, #20
  4060e0:	d82e      	bhi.n	406140 <obj_align_mid_core+0xa4>
  4060e2:	e8df f016 	tbh	[pc, r6, lsl #1]
  4060e6:	001b      	.short	0x001b
  4060e8:	0062005b 	.word	0x0062005b
  4060ec:	007c0071 	.word	0x007c0071
  4060f0:	009a0087 	.word	0x009a0087
  4060f4:	00b800a9 	.word	0x00b800a9
  4060f8:	00d200cb 	.word	0x00d200cb
  4060fc:	00ec00e1 	.word	0x00ec00e1
  406100:	010a00f7 	.word	0x010a00f7
  406104:	01200119 	.word	0x01200119
  406108:	01440139 	.word	0x01440139
  40610c:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  406110:	f100 0901 	add.w	r9, r0, #1
  406114:	e7d9      	b.n	4060ca <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  406116:	f100 0801 	add.w	r8, r0, #1
  40611a:	e7de      	b.n	4060da <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40611c:	4638      	mov	r0, r7
  40611e:	4b8b      	ldr	r3, [pc, #556]	; (40634c <obj_align_mid_core+0x2b0>)
  406120:	4798      	blx	r3
  406122:	4605      	mov	r5, r0
  406124:	2800      	cmp	r0, #0
  406126:	db35      	blt.n	406194 <obj_align_mid_core+0xf8>
  406128:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40612c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40612e:	4638      	mov	r0, r7
  406130:	4b87      	ldr	r3, [pc, #540]	; (406350 <obj_align_mid_core+0x2b4>)
  406132:	4798      	blx	r3
  406134:	4604      	mov	r4, r0
  406136:	2800      	cmp	r0, #0
  406138:	db2e      	blt.n	406198 <obj_align_mid_core+0xfc>
  40613a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40613e:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  406140:	9801      	ldr	r0, [sp, #4]
  406142:	4b84      	ldr	r3, [pc, #528]	; (406354 <obj_align_mid_core+0x2b8>)
  406144:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  406146:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  40614a:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  40614e:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  406152:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  406156:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  40615a:	4411      	add	r1, r2
  40615c:	fa15 f181 	uxtah	r1, r5, r1
  406160:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  406162:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  406166:	4472      	add	r2, lr
  406168:	fa14 f282 	uxtah	r2, r4, r2
  40616c:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  40616e:	1bc9      	subs	r1, r1, r7
  406170:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  406172:	1ad2      	subs	r2, r2, r3
  406174:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  406176:	ea1a 0f0b 	tst.w	sl, fp
  40617a:	f040 8125 	bne.w	4063c8 <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  40617e:	f1ba 0f00 	cmp.w	sl, #0
  406182:	f040 8125 	bne.w	4063d0 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  406186:	f1bb 0f00 	cmp.w	fp, #0
  40618a:	f040 8125 	bne.w	4063d8 <obj_align_mid_core+0x33c>
}
  40618e:	b003      	add	sp, #12
  406190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406194:	1c45      	adds	r5, r0, #1
  406196:	e7c7      	b.n	406128 <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406198:	1c44      	adds	r4, r0, #1
  40619a:	e7ce      	b.n	40613a <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  40619c:	f1c9 0500 	rsb	r5, r9, #0
  4061a0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4061a2:	f1c8 0400 	rsb	r4, r8, #0
  4061a6:	b224      	sxth	r4, r4
            break;
  4061a8:	e7ca      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4061aa:	4638      	mov	r0, r7
  4061ac:	4b67      	ldr	r3, [pc, #412]	; (40634c <obj_align_mid_core+0x2b0>)
  4061ae:	4798      	blx	r3
  4061b0:	4605      	mov	r5, r0
  4061b2:	2800      	cmp	r0, #0
  4061b4:	db06      	blt.n	4061c4 <obj_align_mid_core+0x128>
  4061b6:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4061ba:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4061bc:	f1c8 0400 	rsb	r4, r8, #0
  4061c0:	b224      	sxth	r4, r4
            break;
  4061c2:	e7bd      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4061c4:	1c45      	adds	r5, r0, #1
  4061c6:	e7f6      	b.n	4061b6 <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4061c8:	4638      	mov	r0, r7
  4061ca:	4b60      	ldr	r3, [pc, #384]	; (40634c <obj_align_mid_core+0x2b0>)
  4061cc:	4798      	blx	r3
  4061ce:	b285      	uxth	r5, r0
  4061d0:	eba5 0509 	sub.w	r5, r5, r9
  4061d4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4061d6:	f1c8 0400 	rsb	r4, r8, #0
  4061da:	b224      	sxth	r4, r4
            break;
  4061dc:	e7b0      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4061de:	f1c9 0500 	rsb	r5, r9, #0
  4061e2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4061e4:	4638      	mov	r0, r7
  4061e6:	4b5a      	ldr	r3, [pc, #360]	; (406350 <obj_align_mid_core+0x2b4>)
  4061e8:	4798      	blx	r3
  4061ea:	b284      	uxth	r4, r0
  4061ec:	eba4 0408 	sub.w	r4, r4, r8
  4061f0:	b224      	sxth	r4, r4
            break;
  4061f2:	e7a5      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4061f4:	4638      	mov	r0, r7
  4061f6:	4b55      	ldr	r3, [pc, #340]	; (40634c <obj_align_mid_core+0x2b0>)
  4061f8:	4798      	blx	r3
  4061fa:	4605      	mov	r5, r0
  4061fc:	2800      	cmp	r0, #0
  4061fe:	db0a      	blt.n	406216 <obj_align_mid_core+0x17a>
  406200:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  406204:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406206:	4638      	mov	r0, r7
  406208:	4b51      	ldr	r3, [pc, #324]	; (406350 <obj_align_mid_core+0x2b4>)
  40620a:	4798      	blx	r3
  40620c:	b284      	uxth	r4, r0
  40620e:	eba4 0408 	sub.w	r4, r4, r8
  406212:	b224      	sxth	r4, r4
            break;
  406214:	e794      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  406216:	1c45      	adds	r5, r0, #1
  406218:	e7f2      	b.n	406200 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40621a:	4638      	mov	r0, r7
  40621c:	4b4b      	ldr	r3, [pc, #300]	; (40634c <obj_align_mid_core+0x2b0>)
  40621e:	4798      	blx	r3
  406220:	b285      	uxth	r5, r0
  406222:	eba5 0509 	sub.w	r5, r5, r9
  406226:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406228:	4638      	mov	r0, r7
  40622a:	4b49      	ldr	r3, [pc, #292]	; (406350 <obj_align_mid_core+0x2b4>)
  40622c:	4798      	blx	r3
  40622e:	b284      	uxth	r4, r0
  406230:	eba4 0408 	sub.w	r4, r4, r8
  406234:	b224      	sxth	r4, r4
            break;
  406236:	e783      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406238:	f1c9 0500 	rsb	r5, r9, #0
  40623c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40623e:	4638      	mov	r0, r7
  406240:	4b43      	ldr	r3, [pc, #268]	; (406350 <obj_align_mid_core+0x2b4>)
  406242:	4798      	blx	r3
  406244:	4604      	mov	r4, r0
  406246:	2800      	cmp	r0, #0
  406248:	db03      	blt.n	406252 <obj_align_mid_core+0x1b6>
  40624a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40624e:	b224      	sxth	r4, r4
            break;
  406250:	e776      	b.n	406140 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406252:	1c44      	adds	r4, r0, #1
  406254:	e7f9      	b.n	40624a <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406256:	4638      	mov	r0, r7
  406258:	4b3c      	ldr	r3, [pc, #240]	; (40634c <obj_align_mid_core+0x2b0>)
  40625a:	4798      	blx	r3
  40625c:	b285      	uxth	r5, r0
  40625e:	eba5 0509 	sub.w	r5, r5, r9
  406262:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406264:	4638      	mov	r0, r7
  406266:	4b3a      	ldr	r3, [pc, #232]	; (406350 <obj_align_mid_core+0x2b4>)
  406268:	4798      	blx	r3
  40626a:	4604      	mov	r4, r0
  40626c:	2800      	cmp	r0, #0
  40626e:	db03      	blt.n	406278 <obj_align_mid_core+0x1dc>
  406270:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  406274:	b224      	sxth	r4, r4
            break;
  406276:	e763      	b.n	406140 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406278:	1c44      	adds	r4, r0, #1
  40627a:	e7f9      	b.n	406270 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  40627c:	f1c9 0500 	rsb	r5, r9, #0
  406280:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406282:	f1c8 0400 	rsb	r4, r8, #0
  406286:	b224      	sxth	r4, r4
            break;
  406288:	e75a      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40628a:	4638      	mov	r0, r7
  40628c:	4b2f      	ldr	r3, [pc, #188]	; (40634c <obj_align_mid_core+0x2b0>)
  40628e:	4798      	blx	r3
  406290:	4605      	mov	r5, r0
  406292:	2800      	cmp	r0, #0
  406294:	db06      	blt.n	4062a4 <obj_align_mid_core+0x208>
  406296:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40629a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40629c:	f1c8 0400 	rsb	r4, r8, #0
  4062a0:	b224      	sxth	r4, r4
            break;
  4062a2:	e74d      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4062a4:	1c45      	adds	r5, r0, #1
  4062a6:	e7f6      	b.n	406296 <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4062a8:	4638      	mov	r0, r7
  4062aa:	4b28      	ldr	r3, [pc, #160]	; (40634c <obj_align_mid_core+0x2b0>)
  4062ac:	4798      	blx	r3
  4062ae:	b285      	uxth	r5, r0
  4062b0:	eba5 0509 	sub.w	r5, r5, r9
  4062b4:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4062b6:	f1c8 0400 	rsb	r4, r8, #0
  4062ba:	b224      	sxth	r4, r4
            break;
  4062bc:	e740      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  4062be:	f1c9 0500 	rsb	r5, r9, #0
  4062c2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4062c4:	4638      	mov	r0, r7
  4062c6:	4b22      	ldr	r3, [pc, #136]	; (406350 <obj_align_mid_core+0x2b4>)
  4062c8:	4798      	blx	r3
  4062ca:	b284      	uxth	r4, r0
  4062cc:	eba4 0408 	sub.w	r4, r4, r8
  4062d0:	b224      	sxth	r4, r4
            break;
  4062d2:	e735      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4062d4:	4638      	mov	r0, r7
  4062d6:	4b1d      	ldr	r3, [pc, #116]	; (40634c <obj_align_mid_core+0x2b0>)
  4062d8:	4798      	blx	r3
  4062da:	4605      	mov	r5, r0
  4062dc:	2800      	cmp	r0, #0
  4062de:	db0a      	blt.n	4062f6 <obj_align_mid_core+0x25a>
  4062e0:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  4062e4:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4062e6:	4638      	mov	r0, r7
  4062e8:	4b19      	ldr	r3, [pc, #100]	; (406350 <obj_align_mid_core+0x2b4>)
  4062ea:	4798      	blx	r3
  4062ec:	b284      	uxth	r4, r0
  4062ee:	eba4 0408 	sub.w	r4, r4, r8
  4062f2:	b224      	sxth	r4, r4
            break;
  4062f4:	e724      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  4062f6:	1c45      	adds	r5, r0, #1
  4062f8:	e7f2      	b.n	4062e0 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4062fa:	4638      	mov	r0, r7
  4062fc:	4b13      	ldr	r3, [pc, #76]	; (40634c <obj_align_mid_core+0x2b0>)
  4062fe:	4798      	blx	r3
  406300:	b285      	uxth	r5, r0
  406302:	eba5 0509 	sub.w	r5, r5, r9
  406306:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406308:	4638      	mov	r0, r7
  40630a:	4b11      	ldr	r3, [pc, #68]	; (406350 <obj_align_mid_core+0x2b4>)
  40630c:	4798      	blx	r3
  40630e:	b284      	uxth	r4, r0
  406310:	eba4 0408 	sub.w	r4, r4, r8
  406314:	b224      	sxth	r4, r4
            break;
  406316:	e713      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406318:	f1c9 0500 	rsb	r5, r9, #0
  40631c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40631e:	f1c8 0400 	rsb	r4, r8, #0
  406322:	b224      	sxth	r4, r4
            break;
  406324:	e70c      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406326:	f1c9 0500 	rsb	r5, r9, #0
  40632a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  40632c:	4638      	mov	r0, r7
  40632e:	4b08      	ldr	r3, [pc, #32]	; (406350 <obj_align_mid_core+0x2b4>)
  406330:	4798      	blx	r3
  406332:	4604      	mov	r4, r0
  406334:	2800      	cmp	r0, #0
  406336:	db03      	blt.n	406340 <obj_align_mid_core+0x2a4>
  406338:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  40633c:	b224      	sxth	r4, r4
            break;
  40633e:	e6ff      	b.n	406140 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406340:	1c44      	adds	r4, r0, #1
  406342:	e7f9      	b.n	406338 <obj_align_mid_core+0x29c>
  406344:	00405911 	.word	0x00405911
  406348:	00405951 	.word	0x00405951
  40634c:	00405991 	.word	0x00405991
  406350:	004059c1 	.word	0x004059c1
  406354:	004057bd 	.word	0x004057bd
            new_x = -obj_w_half;
  406358:	f1c9 0500 	rsb	r5, r9, #0
  40635c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40635e:	4638      	mov	r0, r7
  406360:	4b20      	ldr	r3, [pc, #128]	; (4063e4 <obj_align_mid_core+0x348>)
  406362:	4798      	blx	r3
  406364:	b284      	uxth	r4, r0
  406366:	eba4 0408 	sub.w	r4, r4, r8
  40636a:	b224      	sxth	r4, r4
            break;
  40636c:	e6e8      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40636e:	4638      	mov	r0, r7
  406370:	4b1d      	ldr	r3, [pc, #116]	; (4063e8 <obj_align_mid_core+0x34c>)
  406372:	4798      	blx	r3
  406374:	b285      	uxth	r5, r0
  406376:	eba5 0509 	sub.w	r5, r5, r9
  40637a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  40637c:	f1c8 0400 	rsb	r4, r8, #0
  406380:	b224      	sxth	r4, r4
            break;
  406382:	e6dd      	b.n	406140 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406384:	4638      	mov	r0, r7
  406386:	4b18      	ldr	r3, [pc, #96]	; (4063e8 <obj_align_mid_core+0x34c>)
  406388:	4798      	blx	r3
  40638a:	b285      	uxth	r5, r0
  40638c:	eba5 0509 	sub.w	r5, r5, r9
  406390:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406392:	4638      	mov	r0, r7
  406394:	4b13      	ldr	r3, [pc, #76]	; (4063e4 <obj_align_mid_core+0x348>)
  406396:	4798      	blx	r3
  406398:	4604      	mov	r4, r0
  40639a:	2800      	cmp	r0, #0
  40639c:	db03      	blt.n	4063a6 <obj_align_mid_core+0x30a>
  40639e:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4063a2:	b224      	sxth	r4, r4
            break;
  4063a4:	e6cc      	b.n	406140 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4063a6:	1c44      	adds	r4, r0, #1
  4063a8:	e7f9      	b.n	40639e <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4063aa:	4638      	mov	r0, r7
  4063ac:	4b0e      	ldr	r3, [pc, #56]	; (4063e8 <obj_align_mid_core+0x34c>)
  4063ae:	4798      	blx	r3
  4063b0:	b285      	uxth	r5, r0
  4063b2:	eba5 0509 	sub.w	r5, r5, r9
  4063b6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4063b8:	4638      	mov	r0, r7
  4063ba:	4b0a      	ldr	r3, [pc, #40]	; (4063e4 <obj_align_mid_core+0x348>)
  4063bc:	4798      	blx	r3
  4063be:	b284      	uxth	r4, r0
  4063c0:	eba4 0408 	sub.w	r4, r4, r8
  4063c4:	b224      	sxth	r4, r4
            break;
  4063c6:	e6bb      	b.n	406140 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  4063c8:	9801      	ldr	r0, [sp, #4]
  4063ca:	4b08      	ldr	r3, [pc, #32]	; (4063ec <obj_align_mid_core+0x350>)
  4063cc:	4798      	blx	r3
  4063ce:	e6de      	b.n	40618e <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  4063d0:	9801      	ldr	r0, [sp, #4]
  4063d2:	4b07      	ldr	r3, [pc, #28]	; (4063f0 <obj_align_mid_core+0x354>)
  4063d4:	4798      	blx	r3
  4063d6:	e6da      	b.n	40618e <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  4063d8:	4611      	mov	r1, r2
  4063da:	9801      	ldr	r0, [sp, #4]
  4063dc:	4b05      	ldr	r3, [pc, #20]	; (4063f4 <obj_align_mid_core+0x358>)
  4063de:	4798      	blx	r3
}
  4063e0:	e6d5      	b.n	40618e <obj_align_mid_core+0xf2>
  4063e2:	bf00      	nop
  4063e4:	004059c1 	.word	0x004059c1
  4063e8:	00405991 	.word	0x00405991
  4063ec:	00405e4d 	.word	0x00405e4d
  4063f0:	00405f05 	.word	0x00405f05
  4063f4:	00405f45 	.word	0x00405f45

004063f8 <lv_obj_align_mid>:
{
  4063f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4063fc:	b085      	sub	sp, #20
  4063fe:	4604      	mov	r4, r0
  406400:	460d      	mov	r5, r1
  406402:	4690      	mov	r8, r2
  406404:	461f      	mov	r7, r3
  406406:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40640a:	4b19      	ldr	r3, [pc, #100]	; (406470 <lv_obj_align_mid+0x78>)
  40640c:	4798      	blx	r3
  40640e:	b928      	cbnz	r0, 40641c <lv_obj_align_mid+0x24>
  406410:	4622      	mov	r2, r4
  406412:	2300      	movs	r3, #0
  406414:	4817      	ldr	r0, [pc, #92]	; (406474 <lv_obj_align_mid+0x7c>)
  406416:	4918      	ldr	r1, [pc, #96]	; (406478 <lv_obj_align_mid+0x80>)
  406418:	4788      	blx	r1
  40641a:	e7fe      	b.n	40641a <lv_obj_align_mid+0x22>
    if(base == NULL) {
  40641c:	b14d      	cbz	r5, 406432 <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  40641e:	4628      	mov	r0, r5
  406420:	4b13      	ldr	r3, [pc, #76]	; (406470 <lv_obj_align_mid+0x78>)
  406422:	4798      	blx	r3
  406424:	b950      	cbnz	r0, 40643c <lv_obj_align_mid+0x44>
  406426:	462a      	mov	r2, r5
  406428:	2300      	movs	r3, #0
  40642a:	4812      	ldr	r0, [pc, #72]	; (406474 <lv_obj_align_mid+0x7c>)
  40642c:	4912      	ldr	r1, [pc, #72]	; (406478 <lv_obj_align_mid+0x80>)
  40642e:	4788      	blx	r1
  406430:	e7fe      	b.n	406430 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  406432:	4620      	mov	r0, r4
  406434:	4b11      	ldr	r3, [pc, #68]	; (40647c <lv_obj_align_mid+0x84>)
  406436:	4798      	blx	r3
  406438:	4605      	mov	r5, r0
  40643a:	e7f0      	b.n	40641e <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  40643c:	9602      	str	r6, [sp, #8]
  40643e:	9701      	str	r7, [sp, #4]
  406440:	2301      	movs	r3, #1
  406442:	9300      	str	r3, [sp, #0]
  406444:	4642      	mov	r2, r8
  406446:	4629      	mov	r1, r5
  406448:	4620      	mov	r0, r4
  40644a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 406480 <lv_obj_align_mid+0x88>
  40644e:	47c8      	blx	r9
    obj->realign.align       = align;
  406450:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  406454:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406458:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  40645c:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  40645e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406462:	f043 0302 	orr.w	r3, r3, #2
  406466:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  40646a:	b005      	add	sp, #20
  40646c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406470:	00415a81 	.word	0x00415a81
  406474:	00428ca8 	.word	0x00428ca8
  406478:	00415a8d 	.word	0x00415a8d
  40647c:	004057bd 	.word	0x004057bd
  406480:	0040609d 	.word	0x0040609d

00406484 <lv_obj_realign>:
{
  406484:	b510      	push	{r4, lr}
  406486:	b082      	sub	sp, #8
  406488:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40648a:	4b13      	ldr	r3, [pc, #76]	; (4064d8 <lv_obj_realign+0x54>)
  40648c:	4798      	blx	r3
  40648e:	b188      	cbz	r0, 4064b4 <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  406490:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406494:	f013 0f02 	tst.w	r3, #2
  406498:	d012      	beq.n	4064c0 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  40649a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  40649e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  4064a2:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  4064a6:	9100      	str	r1, [sp, #0]
  4064a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4064aa:	4620      	mov	r0, r4
  4064ac:	4c0b      	ldr	r4, [pc, #44]	; (4064dc <lv_obj_realign+0x58>)
  4064ae:	47a0      	blx	r4
}
  4064b0:	b002      	add	sp, #8
  4064b2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4064b4:	4622      	mov	r2, r4
  4064b6:	2300      	movs	r3, #0
  4064b8:	4809      	ldr	r0, [pc, #36]	; (4064e0 <lv_obj_realign+0x5c>)
  4064ba:	490a      	ldr	r1, [pc, #40]	; (4064e4 <lv_obj_realign+0x60>)
  4064bc:	4788      	blx	r1
  4064be:	e7fe      	b.n	4064be <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4064c0:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4064c4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  4064c8:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  4064cc:	9100      	str	r1, [sp, #0]
  4064ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4064d0:	4620      	mov	r0, r4
  4064d2:	4c05      	ldr	r4, [pc, #20]	; (4064e8 <lv_obj_realign+0x64>)
  4064d4:	47a0      	blx	r4
}
  4064d6:	e7eb      	b.n	4064b0 <lv_obj_realign+0x2c>
  4064d8:	00415a81 	.word	0x00415a81
  4064dc:	004063f9 	.word	0x004063f9
  4064e0:	00428ca8 	.word	0x00428ca8
  4064e4:	00415a8d 	.word	0x00415a8d
  4064e8:	00406011 	.word	0x00406011

004064ec <refresh_children_style>:
{
  4064ec:	b570      	push	{r4, r5, r6, lr}
  4064ee:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4064f0:	2100      	movs	r1, #0
  4064f2:	4b0c      	ldr	r3, [pc, #48]	; (406524 <refresh_children_style+0x38>)
  4064f4:	4798      	blx	r3
  4064f6:	4604      	mov	r4, r0
    while(child != NULL) {
  4064f8:	e011      	b.n	40651e <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  4064fa:	4620      	mov	r0, r4
  4064fc:	4d0a      	ldr	r5, [pc, #40]	; (406528 <refresh_children_style+0x3c>)
  4064fe:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  406500:	69e3      	ldr	r3, [r4, #28]
  406502:	2200      	movs	r2, #0
  406504:	2104      	movs	r1, #4
  406506:	4620      	mov	r0, r4
  406508:	4798      	blx	r3
        lv_obj_invalidate(child);
  40650a:	4620      	mov	r0, r4
  40650c:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  40650e:	4620      	mov	r0, r4
  406510:	f7ff ffec 	bl	4064ec <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  406514:	4621      	mov	r1, r4
  406516:	4630      	mov	r0, r6
  406518:	4b02      	ldr	r3, [pc, #8]	; (406524 <refresh_children_style+0x38>)
  40651a:	4798      	blx	r3
  40651c:	4604      	mov	r4, r0
    while(child != NULL) {
  40651e:	2c00      	cmp	r4, #0
  406520:	d1eb      	bne.n	4064fa <refresh_children_style+0xe>
}
  406522:	bd70      	pop	{r4, r5, r6, pc}
  406524:	00405891 	.word	0x00405891
  406528:	00405d69 	.word	0x00405d69

0040652c <lv_obj_get_click>:
{
  40652c:	b510      	push	{r4, lr}
  40652e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406530:	4b06      	ldr	r3, [pc, #24]	; (40654c <lv_obj_get_click+0x20>)
  406532:	4798      	blx	r3
  406534:	b120      	cbz	r0, 406540 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  406536:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40653a:	f000 0001 	and.w	r0, r0, #1
  40653e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406540:	4622      	mov	r2, r4
  406542:	2300      	movs	r3, #0
  406544:	4802      	ldr	r0, [pc, #8]	; (406550 <lv_obj_get_click+0x24>)
  406546:	4903      	ldr	r1, [pc, #12]	; (406554 <lv_obj_get_click+0x28>)
  406548:	4788      	blx	r1
  40654a:	e7fe      	b.n	40654a <lv_obj_get_click+0x1e>
  40654c:	00415a81 	.word	0x00415a81
  406550:	00428ca8 	.word	0x00428ca8
  406554:	00415a8d 	.word	0x00415a8d

00406558 <lv_obj_get_drag>:
{
  406558:	b510      	push	{r4, lr}
  40655a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40655c:	4b06      	ldr	r3, [pc, #24]	; (406578 <lv_obj_get_drag+0x20>)
  40655e:	4798      	blx	r3
  406560:	b120      	cbz	r0, 40656c <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  406562:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  406566:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40656a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40656c:	4622      	mov	r2, r4
  40656e:	2300      	movs	r3, #0
  406570:	4802      	ldr	r0, [pc, #8]	; (40657c <lv_obj_get_drag+0x24>)
  406572:	4903      	ldr	r1, [pc, #12]	; (406580 <lv_obj_get_drag+0x28>)
  406574:	4788      	blx	r1
  406576:	e7fe      	b.n	406576 <lv_obj_get_drag+0x1e>
  406578:	00415a81 	.word	0x00415a81
  40657c:	00428ca8 	.word	0x00428ca8
  406580:	00415a8d 	.word	0x00415a8d

00406584 <lv_obj_get_drag_dir>:
{
  406584:	b510      	push	{r4, lr}
  406586:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406588:	4b06      	ldr	r3, [pc, #24]	; (4065a4 <lv_obj_get_drag_dir+0x20>)
  40658a:	4798      	blx	r3
  40658c:	b120      	cbz	r0, 406598 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  40658e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  406592:	f3c0 0082 	ubfx	r0, r0, #2, #3
  406596:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406598:	4622      	mov	r2, r4
  40659a:	2300      	movs	r3, #0
  40659c:	4802      	ldr	r0, [pc, #8]	; (4065a8 <lv_obj_get_drag_dir+0x24>)
  40659e:	4903      	ldr	r1, [pc, #12]	; (4065ac <lv_obj_get_drag_dir+0x28>)
  4065a0:	4788      	blx	r1
  4065a2:	e7fe      	b.n	4065a2 <lv_obj_get_drag_dir+0x1e>
  4065a4:	00415a81 	.word	0x00415a81
  4065a8:	00428ca8 	.word	0x00428ca8
  4065ac:	00415a8d 	.word	0x00415a8d

004065b0 <lv_obj_get_drag_throw>:
{
  4065b0:	b510      	push	{r4, lr}
  4065b2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4065b4:	4b06      	ldr	r3, [pc, #24]	; (4065d0 <lv_obj_get_drag_throw+0x20>)
  4065b6:	4798      	blx	r3
  4065b8:	b120      	cbz	r0, 4065c4 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  4065ba:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4065be:	f3c0 0080 	ubfx	r0, r0, #2, #1
  4065c2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4065c4:	4622      	mov	r2, r4
  4065c6:	2300      	movs	r3, #0
  4065c8:	4802      	ldr	r0, [pc, #8]	; (4065d4 <lv_obj_get_drag_throw+0x24>)
  4065ca:	4903      	ldr	r1, [pc, #12]	; (4065d8 <lv_obj_get_drag_throw+0x28>)
  4065cc:	4788      	blx	r1
  4065ce:	e7fe      	b.n	4065ce <lv_obj_get_drag_throw+0x1e>
  4065d0:	00415a81 	.word	0x00415a81
  4065d4:	00428ca8 	.word	0x00428ca8
  4065d8:	00415a8d 	.word	0x00415a8d

004065dc <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  4065dc:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  4065e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  4065e4:	4770      	bx	lr

004065e6 <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  4065e6:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  4065ea:	f000 0001 	and.w	r0, r0, #1
  4065ee:	4770      	bx	lr

004065f0 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  4065f0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  4065f4:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4065f8:	4770      	bx	lr
	...

004065fc <lv_obj_get_base_dir>:
{
  4065fc:	b510      	push	{r4, lr}
  4065fe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406600:	4b05      	ldr	r3, [pc, #20]	; (406618 <lv_obj_get_base_dir+0x1c>)
  406602:	4798      	blx	r3
  406604:	b108      	cbz	r0, 40660a <lv_obj_get_base_dir+0xe>
}
  406606:	2000      	movs	r0, #0
  406608:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40660a:	4622      	mov	r2, r4
  40660c:	2300      	movs	r3, #0
  40660e:	4803      	ldr	r0, [pc, #12]	; (40661c <lv_obj_get_base_dir+0x20>)
  406610:	4903      	ldr	r1, [pc, #12]	; (406620 <lv_obj_get_base_dir+0x24>)
  406612:	4788      	blx	r1
  406614:	e7fe      	b.n	406614 <lv_obj_get_base_dir+0x18>
  406616:	bf00      	nop
  406618:	00415a81 	.word	0x00415a81
  40661c:	00428ca8 	.word	0x00428ca8
  406620:	00415a8d 	.word	0x00415a8d

00406624 <lv_obj_create>:
{
  406624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406626:	460d      	mov	r5, r1
    if(parent == NULL) {
  406628:	4606      	mov	r6, r0
  40662a:	b150      	cbz	r0, 406642 <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  40662c:	4b8e      	ldr	r3, [pc, #568]	; (406868 <lv_obj_create+0x244>)
  40662e:	4798      	blx	r3
  406630:	2800      	cmp	r0, #0
  406632:	f040 8086 	bne.w	406742 <lv_obj_create+0x11e>
  406636:	4632      	mov	r2, r6
  406638:	2300      	movs	r3, #0
  40663a:	488c      	ldr	r0, [pc, #560]	; (40686c <lv_obj_create+0x248>)
  40663c:	498c      	ldr	r1, [pc, #560]	; (406870 <lv_obj_create+0x24c>)
  40663e:	4788      	blx	r1
  406640:	e7fe      	b.n	406640 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  406642:	4b8c      	ldr	r3, [pc, #560]	; (406874 <lv_obj_create+0x250>)
  406644:	4798      	blx	r3
        if(!disp) {
  406646:	2800      	cmp	r0, #0
  406648:	f000 81f0 	beq.w	406a2c <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  40664c:	3038      	adds	r0, #56	; 0x38
  40664e:	4b8a      	ldr	r3, [pc, #552]	; (406878 <lv_obj_create+0x254>)
  406650:	4798      	blx	r3
  406652:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  406654:	4b84      	ldr	r3, [pc, #528]	; (406868 <lv_obj_create+0x244>)
  406656:	4798      	blx	r3
  406658:	b928      	cbnz	r0, 406666 <lv_obj_create+0x42>
  40665a:	4622      	mov	r2, r4
  40665c:	2300      	movs	r3, #0
  40665e:	4887      	ldr	r0, [pc, #540]	; (40687c <lv_obj_create+0x258>)
  406660:	4983      	ldr	r1, [pc, #524]	; (406870 <lv_obj_create+0x24c>)
  406662:	4788      	blx	r1
  406664:	e7fe      	b.n	406664 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  406666:	2c00      	cmp	r4, #0
  406668:	f000 81de 	beq.w	406a28 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  40666c:	214c      	movs	r1, #76	; 0x4c
  40666e:	4620      	mov	r0, r4
  406670:	4b83      	ldr	r3, [pc, #524]	; (406880 <lv_obj_create+0x25c>)
  406672:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406674:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406678:	f36f 1346 	bfc	r3, #5, #2
  40667c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  406680:	4b80      	ldr	r3, [pc, #512]	; (406884 <lv_obj_create+0x260>)
  406682:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  406684:	4b80      	ldr	r3, [pc, #512]	; (406888 <lv_obj_create+0x264>)
  406686:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  406688:	2700      	movs	r7, #0
  40668a:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  40668c:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  40668e:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  406690:	4638      	mov	r0, r7
  406692:	4b7e      	ldr	r3, [pc, #504]	; (40688c <lv_obj_create+0x268>)
  406694:	4798      	blx	r3
  406696:	b283      	uxth	r3, r0
  406698:	3b01      	subs	r3, #1
  40669a:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  40669c:	4638      	mov	r0, r7
  40669e:	4b7c      	ldr	r3, [pc, #496]	; (406890 <lv_obj_create+0x26c>)
  4066a0:	4798      	blx	r3
  4066a2:	b283      	uxth	r3, r0
  4066a4:	3b01      	subs	r3, #1
  4066a6:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  4066a8:	214c      	movs	r1, #76	; 0x4c
  4066aa:	1d20      	adds	r0, r4, #4
  4066ac:	4b79      	ldr	r3, [pc, #484]	; (406894 <lv_obj_create+0x270>)
  4066ae:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  4066b0:	2300      	movs	r3, #0
  4066b2:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  4066b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  4066b8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  4066bc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  4066c0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  4066c4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  4066c8:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  4066ca:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  4066ce:	f363 0200 	bfi	r2, r3, #0, #1
  4066d2:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  4066d6:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  4066d8:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  4066dc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  4066e0:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  4066e4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4066e8:	2003      	movs	r0, #3
  4066ea:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  4066ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  4066f2:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  4066f6:	f363 1186 	bfi	r1, r3, #6, #1
  4066fa:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  4066fe:	1af1      	subs	r1, r6, r3
  406700:	bf18      	it	ne
  406702:	2101      	movne	r1, #1
  406704:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  406708:	f363 0241 	bfi	r2, r3, #1, #1
  40670c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  406710:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  406714:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  406716:	f104 0728 	add.w	r7, r4, #40	; 0x28
  40671a:	4638      	mov	r0, r7
  40671c:	4b5e      	ldr	r3, [pc, #376]	; (406898 <lv_obj_create+0x274>)
  40671e:	4798      	blx	r3
    if(copy == NULL) {
  406720:	2d00      	cmp	r5, #0
  406722:	f000 8096 	beq.w	406852 <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  406726:	f105 0128 	add.w	r1, r5, #40	; 0x28
  40672a:	4638      	mov	r0, r7
  40672c:	4b5b      	ldr	r3, [pc, #364]	; (40689c <lv_obj_create+0x278>)
  40672e:	4798      	blx	r3
    if(copy != NULL) {
  406730:	2d00      	cmp	r5, #0
  406732:	f000 8170 	beq.w	406a16 <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  406736:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  40673a:	f104 0210 	add.w	r2, r4, #16
  40673e:	2308      	movs	r3, #8
  406740:	e0bb      	b.n	4068ba <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  406742:	1d30      	adds	r0, r6, #4
  406744:	4b4c      	ldr	r3, [pc, #304]	; (406878 <lv_obj_create+0x254>)
  406746:	4798      	blx	r3
  406748:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  40674a:	4b47      	ldr	r3, [pc, #284]	; (406868 <lv_obj_create+0x244>)
  40674c:	4798      	blx	r3
  40674e:	2800      	cmp	r0, #0
  406750:	d047      	beq.n	4067e2 <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  406752:	2c00      	cmp	r4, #0
  406754:	f000 8168 	beq.w	406a28 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  406758:	214c      	movs	r1, #76	; 0x4c
  40675a:	4620      	mov	r0, r4
  40675c:	4b48      	ldr	r3, [pc, #288]	; (406880 <lv_obj_create+0x25c>)
  40675e:	4798      	blx	r3
        new_obj->parent = parent;
  406760:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  406762:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406766:	f36f 1346 	bfc	r3, #5, #2
  40676a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  40676e:	4b45      	ldr	r3, [pc, #276]	; (406884 <lv_obj_create+0x260>)
  406770:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  406772:	4b45      	ldr	r3, [pc, #276]	; (406888 <lv_obj_create+0x264>)
  406774:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  406776:	2000      	movs	r0, #0
  406778:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  40677a:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  40677e:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406780:	8a77      	ldrh	r7, [r6, #18]
  406782:	4b47      	ldr	r3, [pc, #284]	; (4068a0 <lv_obj_create+0x27c>)
  406784:	4798      	blx	r3
  406786:	2332      	movs	r3, #50	; 0x32
  406788:	fb03 f300 	mul.w	r3, r3, r0
  40678c:	3350      	adds	r3, #80	; 0x50
  40678e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406792:	da2c      	bge.n	4067ee <lv_obj_create+0x1ca>
  406794:	2301      	movs	r3, #1
  406796:	443b      	add	r3, r7
  406798:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  40679a:	4620      	mov	r0, r4
  40679c:	4b41      	ldr	r3, [pc, #260]	; (4068a4 <lv_obj_create+0x280>)
  40679e:	4798      	blx	r3
  4067a0:	2801      	cmp	r0, #1
  4067a2:	d033      	beq.n	40680c <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  4067a4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  4067a8:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  4067aa:	8a37      	ldrh	r7, [r6, #16]
  4067ac:	2000      	movs	r0, #0
  4067ae:	4b3c      	ldr	r3, [pc, #240]	; (4068a0 <lv_obj_create+0x27c>)
  4067b0:	4798      	blx	r3
  4067b2:	2364      	movs	r3, #100	; 0x64
  4067b4:	fb03 f300 	mul.w	r3, r3, r0
  4067b8:	3350      	adds	r3, #80	; 0x50
  4067ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4067be:	db46      	blt.n	40684e <lv_obj_create+0x22a>
  4067c0:	2000      	movs	r0, #0
  4067c2:	4b37      	ldr	r3, [pc, #220]	; (4068a0 <lv_obj_create+0x27c>)
  4067c4:	4798      	blx	r3
  4067c6:	2364      	movs	r3, #100	; 0x64
  4067c8:	fb03 f300 	mul.w	r3, r3, r0
  4067cc:	3350      	adds	r3, #80	; 0x50
  4067ce:	4a36      	ldr	r2, [pc, #216]	; (4068a8 <lv_obj_create+0x284>)
  4067d0:	fb82 1203 	smull	r1, r2, r2, r3
  4067d4:	17db      	asrs	r3, r3, #31
  4067d6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4067da:	b29b      	uxth	r3, r3
  4067dc:	443b      	add	r3, r7
  4067de:	82a3      	strh	r3, [r4, #20]
  4067e0:	e762      	b.n	4066a8 <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  4067e2:	4622      	mov	r2, r4
  4067e4:	2300      	movs	r3, #0
  4067e6:	4825      	ldr	r0, [pc, #148]	; (40687c <lv_obj_create+0x258>)
  4067e8:	4921      	ldr	r1, [pc, #132]	; (406870 <lv_obj_create+0x24c>)
  4067ea:	4788      	blx	r1
  4067ec:	e7fe      	b.n	4067ec <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4067ee:	2000      	movs	r0, #0
  4067f0:	4b2b      	ldr	r3, [pc, #172]	; (4068a0 <lv_obj_create+0x27c>)
  4067f2:	4798      	blx	r3
  4067f4:	2332      	movs	r3, #50	; 0x32
  4067f6:	fb03 f300 	mul.w	r3, r3, r0
  4067fa:	3350      	adds	r3, #80	; 0x50
  4067fc:	4a2a      	ldr	r2, [pc, #168]	; (4068a8 <lv_obj_create+0x284>)
  4067fe:	fb82 1203 	smull	r1, r2, r2, r3
  406802:	17db      	asrs	r3, r3, #31
  406804:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406808:	b29b      	uxth	r3, r3
  40680a:	e7c4      	b.n	406796 <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  40680c:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  406810:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  406812:	8ab7      	ldrh	r7, [r6, #20]
  406814:	2000      	movs	r0, #0
  406816:	4b22      	ldr	r3, [pc, #136]	; (4068a0 <lv_obj_create+0x27c>)
  406818:	4798      	blx	r3
  40681a:	2364      	movs	r3, #100	; 0x64
  40681c:	fb03 f300 	mul.w	r3, r3, r0
  406820:	3350      	adds	r3, #80	; 0x50
  406822:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406826:	db10      	blt.n	40684a <lv_obj_create+0x226>
  406828:	2000      	movs	r0, #0
  40682a:	4b1d      	ldr	r3, [pc, #116]	; (4068a0 <lv_obj_create+0x27c>)
  40682c:	4798      	blx	r3
  40682e:	2364      	movs	r3, #100	; 0x64
  406830:	fb03 f300 	mul.w	r3, r3, r0
  406834:	3350      	adds	r3, #80	; 0x50
  406836:	4a1c      	ldr	r2, [pc, #112]	; (4068a8 <lv_obj_create+0x284>)
  406838:	fb82 1203 	smull	r1, r2, r2, r3
  40683c:	17db      	asrs	r3, r3, #31
  40683e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406842:	b29b      	uxth	r3, r3
  406844:	1afb      	subs	r3, r7, r3
  406846:	8223      	strh	r3, [r4, #16]
  406848:	e72e      	b.n	4066a8 <lv_obj_create+0x84>
  40684a:	2301      	movs	r3, #1
  40684c:	e7fa      	b.n	406844 <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  40684e:	2301      	movs	r3, #1
  406850:	e7c4      	b.n	4067dc <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  406852:	b126      	cbz	r6, 40685e <lv_obj_create+0x23a>
  406854:	2102      	movs	r1, #2
  406856:	4620      	mov	r0, r4
  406858:	4b14      	ldr	r3, [pc, #80]	; (4068ac <lv_obj_create+0x288>)
  40685a:	4798      	blx	r3
  40685c:	e768      	b.n	406730 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  40685e:	2101      	movs	r1, #1
  406860:	4620      	mov	r0, r4
  406862:	4b12      	ldr	r3, [pc, #72]	; (4068ac <lv_obj_create+0x288>)
  406864:	4798      	blx	r3
  406866:	e763      	b.n	406730 <lv_obj_create+0x10c>
  406868:	00415a81 	.word	0x00415a81
  40686c:	00428ca8 	.word	0x00428ca8
  406870:	00415a8d 	.word	0x00415a8d
  406874:	004148ed 	.word	0x004148ed
  406878:	00415cf9 	.word	0x00415cf9
  40687c:	00428c94 	.word	0x00428c94
  406880:	004166bd 	.word	0x004166bd
  406884:	00408ff1 	.word	0x00408ff1
  406888:	00408421 	.word	0x00408421
  40688c:	004148f9 	.word	0x004148f9
  406890:	00414929 	.word	0x00414929
  406894:	00415ce7 	.word	0x00415ce7
  406898:	00409b71 	.word	0x00409b71
  40689c:	0040aa4d 	.word	0x0040aa4d
  4068a0:	00414955 	.word	0x00414955
  4068a4:	004065fd 	.word	0x004065fd
  4068a8:	66666667 	.word	0x66666667
  4068ac:	00417ec5 	.word	0x00417ec5
        *d8 = *s8;
  4068b0:	f811 0b01 	ldrb.w	r0, [r1], #1
  4068b4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4068b8:	3b01      	subs	r3, #1
    while(len) {
  4068ba:	2b00      	cmp	r3, #0
  4068bc:	d1f8      	bne.n	4068b0 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  4068be:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  4068c2:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  4068c4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  4068c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  4068cc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  4068d0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  4068d4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  4068d8:	f3c3 1341 	ubfx	r3, r3, #5, #2
  4068dc:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4068e0:	f363 1246 	bfi	r2, r3, #5, #2
  4068e4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  4068e8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  4068ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  4068f0:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  4068f4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  4068f8:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  4068fc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  406900:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  406902:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  406904:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  406908:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40690c:	f362 0300 	bfi	r3, r2, #0, #1
  406910:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  406914:	69ab      	ldr	r3, [r5, #24]
  406916:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  406918:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40691c:	09db      	lsrs	r3, r3, #7
  40691e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406922:	f363 12c7 	bfi	r2, r3, #7, #1
  406926:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  40692a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  40692e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  406932:	f362 0300 	bfi	r3, r2, #0, #1
  406936:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  40693a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40693e:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406942:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406946:	f363 0241 	bfi	r2, r3, #1, #1
  40694a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  40694e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406952:	f3c3 0382 	ubfx	r3, r3, #2, #3
  406956:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  40695a:	f363 0284 	bfi	r2, r3, #2, #3
  40695e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  406962:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406966:	f3c3 0380 	ubfx	r3, r3, #2, #1
  40696a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  40696e:	f363 0282 	bfi	r2, r3, #2, #1
  406972:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  406976:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40697a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  40697e:	b2d2      	uxtb	r2, r2
  406980:	f363 02c3 	bfi	r2, r3, #3, #1
  406984:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  406988:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40698c:	f3c3 1300 	ubfx	r3, r3, #4, #1
  406990:	b2d2      	uxtb	r2, r2
  406992:	f363 1204 	bfi	r2, r3, #4, #1
  406996:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  40699a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40699e:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4069a2:	b2d2      	uxtb	r2, r2
  4069a4:	f363 1245 	bfi	r2, r3, #5, #1
  4069a8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  4069ac:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4069b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4069b4:	b2d2      	uxtb	r2, r2
  4069b6:	f363 1286 	bfi	r2, r3, #6, #1
  4069ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  4069be:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  4069c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  4069c6:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  4069ca:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  4069ce:	f362 0300 	bfi	r3, r2, #0, #1
  4069d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  4069d6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  4069da:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4069de:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4069e2:	f363 0241 	bfi	r2, r3, #1, #1
  4069e6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  4069ea:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  4069ec:	b110      	cbz	r0, 4069f4 <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  4069ee:	4621      	mov	r1, r4
  4069f0:	4b0f      	ldr	r3, [pc, #60]	; (406a30 <lv_obj_create+0x40c>)
  4069f2:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  4069f4:	4628      	mov	r0, r5
  4069f6:	4b0f      	ldr	r3, [pc, #60]	; (406a34 <lv_obj_create+0x410>)
  4069f8:	4798      	blx	r3
  4069fa:	b160      	cbz	r0, 406a16 <lv_obj_create+0x3f2>
  4069fc:	b15e      	cbz	r6, 406a16 <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  4069fe:	4628      	mov	r0, r5
  406a00:	4b0d      	ldr	r3, [pc, #52]	; (406a38 <lv_obj_create+0x414>)
  406a02:	4798      	blx	r3
  406a04:	4607      	mov	r7, r0
  406a06:	4628      	mov	r0, r5
  406a08:	4b0c      	ldr	r3, [pc, #48]	; (406a3c <lv_obj_create+0x418>)
  406a0a:	4798      	blx	r3
  406a0c:	4602      	mov	r2, r0
  406a0e:	4639      	mov	r1, r7
  406a10:	4620      	mov	r0, r4
  406a12:	4b0b      	ldr	r3, [pc, #44]	; (406a40 <lv_obj_create+0x41c>)
  406a14:	4798      	blx	r3
    if(parent != NULL) {
  406a16:	b13e      	cbz	r6, 406a28 <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406a18:	69f3      	ldr	r3, [r6, #28]
  406a1a:	4622      	mov	r2, r4
  406a1c:	2101      	movs	r1, #1
  406a1e:	4630      	mov	r0, r6
  406a20:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  406a22:	4620      	mov	r0, r4
  406a24:	4b07      	ldr	r3, [pc, #28]	; (406a44 <lv_obj_create+0x420>)
  406a26:	4798      	blx	r3
}
  406a28:	4620      	mov	r0, r4
  406a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  406a2c:	4634      	mov	r4, r6
  406a2e:	e7fb      	b.n	406a28 <lv_obj_create+0x404>
  406a30:	004036b9 	.word	0x004036b9
  406a34:	004057bd 	.word	0x004057bd
  406a38:	00405911 	.word	0x00405911
  406a3c:	00405951 	.word	0x00405951
  406a40:	00405e4d 	.word	0x00405e4d
  406a44:	00405d69 	.word	0x00405d69

00406a48 <lv_obj_set_size>:
{
  406a48:	b570      	push	{r4, r5, r6, lr}
  406a4a:	b082      	sub	sp, #8
  406a4c:	4604      	mov	r4, r0
  406a4e:	460d      	mov	r5, r1
  406a50:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406a52:	4b2e      	ldr	r3, [pc, #184]	; (406b0c <lv_obj_set_size+0xc4>)
  406a54:	4798      	blx	r3
  406a56:	b928      	cbnz	r0, 406a64 <lv_obj_set_size+0x1c>
  406a58:	4622      	mov	r2, r4
  406a5a:	2300      	movs	r3, #0
  406a5c:	482c      	ldr	r0, [pc, #176]	; (406b10 <lv_obj_set_size+0xc8>)
  406a5e:	492d      	ldr	r1, [pc, #180]	; (406b14 <lv_obj_set_size+0xcc>)
  406a60:	4788      	blx	r1
  406a62:	e7fe      	b.n	406a62 <lv_obj_set_size+0x1a>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406a64:	4620      	mov	r0, r4
  406a66:	4b2c      	ldr	r3, [pc, #176]	; (406b18 <lv_obj_set_size+0xd0>)
  406a68:	4798      	blx	r3
  406a6a:	42a8      	cmp	r0, r5
  406a6c:	d028      	beq.n	406ac0 <lv_obj_set_size+0x78>
    lv_obj_invalidate(obj);
  406a6e:	4620      	mov	r0, r4
  406a70:	4b2a      	ldr	r3, [pc, #168]	; (406b1c <lv_obj_set_size+0xd4>)
  406a72:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  406a74:	4669      	mov	r1, sp
  406a76:	4620      	mov	r0, r4
  406a78:	4b29      	ldr	r3, [pc, #164]	; (406b20 <lv_obj_set_size+0xd8>)
  406a7a:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  406a7c:	8a63      	ldrh	r3, [r4, #18]
  406a7e:	4433      	add	r3, r6
  406a80:	b29b      	uxth	r3, r3
  406a82:	3b01      	subs	r3, #1
  406a84:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  406a86:	4620      	mov	r0, r4
  406a88:	4b26      	ldr	r3, [pc, #152]	; (406b24 <lv_obj_set_size+0xdc>)
  406a8a:	4798      	blx	r3
  406a8c:	2801      	cmp	r0, #1
  406a8e:	d01d      	beq.n	406acc <lv_obj_set_size+0x84>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  406a90:	8a23      	ldrh	r3, [r4, #16]
  406a92:	442b      	add	r3, r5
  406a94:	b29b      	uxth	r3, r3
  406a96:	3b01      	subs	r3, #1
  406a98:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  406a9a:	69e3      	ldr	r3, [r4, #28]
  406a9c:	466a      	mov	r2, sp
  406a9e:	2102      	movs	r1, #2
  406aa0:	4620      	mov	r0, r4
  406aa2:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  406aa4:	4620      	mov	r0, r4
  406aa6:	4b20      	ldr	r3, [pc, #128]	; (406b28 <lv_obj_set_size+0xe0>)
  406aa8:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  406aaa:	b118      	cbz	r0, 406ab4 <lv_obj_set_size+0x6c>
  406aac:	69c5      	ldr	r5, [r0, #28]
  406aae:	4622      	mov	r2, r4
  406ab0:	2101      	movs	r1, #1
  406ab2:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  406ab4:	1d26      	adds	r6, r4, #4
  406ab6:	4630      	mov	r0, r6
  406ab8:	4b1c      	ldr	r3, [pc, #112]	; (406b2c <lv_obj_set_size+0xe4>)
  406aba:	4798      	blx	r3
  406abc:	4605      	mov	r5, r0
  406abe:	e015      	b.n	406aec <lv_obj_set_size+0xa4>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406ac0:	4620      	mov	r0, r4
  406ac2:	4b1b      	ldr	r3, [pc, #108]	; (406b30 <lv_obj_set_size+0xe8>)
  406ac4:	4798      	blx	r3
  406ac6:	42b0      	cmp	r0, r6
  406ac8:	d1d1      	bne.n	406a6e <lv_obj_set_size+0x26>
  406aca:	e019      	b.n	406b00 <lv_obj_set_size+0xb8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  406acc:	8aa3      	ldrh	r3, [r4, #20]
  406ace:	1b5b      	subs	r3, r3, r5
  406ad0:	b29b      	uxth	r3, r3
  406ad2:	3301      	adds	r3, #1
  406ad4:	8223      	strh	r3, [r4, #16]
  406ad6:	e7e0      	b.n	406a9a <lv_obj_set_size+0x52>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406ad8:	69eb      	ldr	r3, [r5, #28]
  406ada:	466a      	mov	r2, sp
  406adc:	2103      	movs	r1, #3
  406ade:	4628      	mov	r0, r5
  406ae0:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  406ae2:	4629      	mov	r1, r5
  406ae4:	4630      	mov	r0, r6
  406ae6:	4b13      	ldr	r3, [pc, #76]	; (406b34 <lv_obj_set_size+0xec>)
  406ae8:	4798      	blx	r3
  406aea:	4605      	mov	r5, r0
  406aec:	2d00      	cmp	r5, #0
  406aee:	d1f3      	bne.n	406ad8 <lv_obj_set_size+0x90>
    lv_obj_invalidate(obj);
  406af0:	4620      	mov	r0, r4
  406af2:	4b0a      	ldr	r3, [pc, #40]	; (406b1c <lv_obj_set_size+0xd4>)
  406af4:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406af6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406afa:	f013 0f01 	tst.w	r3, #1
  406afe:	d101      	bne.n	406b04 <lv_obj_set_size+0xbc>
}
  406b00:	b002      	add	sp, #8
  406b02:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406b04:	4620      	mov	r0, r4
  406b06:	4b0c      	ldr	r3, [pc, #48]	; (406b38 <lv_obj_set_size+0xf0>)
  406b08:	4798      	blx	r3
  406b0a:	e7f9      	b.n	406b00 <lv_obj_set_size+0xb8>
  406b0c:	00415a81 	.word	0x00415a81
  406b10:	00428ca8 	.word	0x00428ca8
  406b14:	00415a8d 	.word	0x00415a8d
  406b18:	00405991 	.word	0x00405991
  406b1c:	00405d69 	.word	0x00405d69
  406b20:	004058d1 	.word	0x004058d1
  406b24:	004065fd 	.word	0x004065fd
  406b28:	004057bd 	.word	0x004057bd
  406b2c:	00415d91 	.word	0x00415d91
  406b30:	004059c1 	.word	0x004059c1
  406b34:	00415da5 	.word	0x00415da5
  406b38:	00406485 	.word	0x00406485

00406b3c <lv_obj_set_width>:
{
  406b3c:	b538      	push	{r3, r4, r5, lr}
  406b3e:	4604      	mov	r4, r0
  406b40:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406b42:	4b09      	ldr	r3, [pc, #36]	; (406b68 <lv_obj_set_width+0x2c>)
  406b44:	4798      	blx	r3
  406b46:	b928      	cbnz	r0, 406b54 <lv_obj_set_width+0x18>
  406b48:	4622      	mov	r2, r4
  406b4a:	2300      	movs	r3, #0
  406b4c:	4807      	ldr	r0, [pc, #28]	; (406b6c <lv_obj_set_width+0x30>)
  406b4e:	4908      	ldr	r1, [pc, #32]	; (406b70 <lv_obj_set_width+0x34>)
  406b50:	4788      	blx	r1
  406b52:	e7fe      	b.n	406b52 <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
  406b54:	4620      	mov	r0, r4
  406b56:	4b07      	ldr	r3, [pc, #28]	; (406b74 <lv_obj_set_width+0x38>)
  406b58:	4798      	blx	r3
  406b5a:	4602      	mov	r2, r0
  406b5c:	4629      	mov	r1, r5
  406b5e:	4620      	mov	r0, r4
  406b60:	4b05      	ldr	r3, [pc, #20]	; (406b78 <lv_obj_set_width+0x3c>)
  406b62:	4798      	blx	r3
  406b64:	bd38      	pop	{r3, r4, r5, pc}
  406b66:	bf00      	nop
  406b68:	00415a81 	.word	0x00415a81
  406b6c:	00428ca8 	.word	0x00428ca8
  406b70:	00415a8d 	.word	0x00415a8d
  406b74:	004059c1 	.word	0x004059c1
  406b78:	00406a49 	.word	0x00406a49

00406b7c <lv_obj_set_height>:
{
  406b7c:	b538      	push	{r3, r4, r5, lr}
  406b7e:	4604      	mov	r4, r0
  406b80:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406b82:	4b09      	ldr	r3, [pc, #36]	; (406ba8 <lv_obj_set_height+0x2c>)
  406b84:	4798      	blx	r3
  406b86:	b928      	cbnz	r0, 406b94 <lv_obj_set_height+0x18>
  406b88:	4622      	mov	r2, r4
  406b8a:	2300      	movs	r3, #0
  406b8c:	4807      	ldr	r0, [pc, #28]	; (406bac <lv_obj_set_height+0x30>)
  406b8e:	4908      	ldr	r1, [pc, #32]	; (406bb0 <lv_obj_set_height+0x34>)
  406b90:	4788      	blx	r1
  406b92:	e7fe      	b.n	406b92 <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
  406b94:	4620      	mov	r0, r4
  406b96:	4b07      	ldr	r3, [pc, #28]	; (406bb4 <lv_obj_set_height+0x38>)
  406b98:	4798      	blx	r3
  406b9a:	462a      	mov	r2, r5
  406b9c:	4601      	mov	r1, r0
  406b9e:	4620      	mov	r0, r4
  406ba0:	4b05      	ldr	r3, [pc, #20]	; (406bb8 <lv_obj_set_height+0x3c>)
  406ba2:	4798      	blx	r3
  406ba4:	bd38      	pop	{r3, r4, r5, pc}
  406ba6:	bf00      	nop
  406ba8:	00415a81 	.word	0x00415a81
  406bac:	00428ca8 	.word	0x00428ca8
  406bb0:	00415a8d 	.word	0x00415a8d
  406bb4:	00405991 	.word	0x00405991
  406bb8:	00406a49 	.word	0x00406a49

00406bbc <lv_obj_is_protected>:
{
  406bbc:	b538      	push	{r3, r4, r5, lr}
  406bbe:	4604      	mov	r4, r0
  406bc0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406bc2:	4b08      	ldr	r3, [pc, #32]	; (406be4 <lv_obj_is_protected+0x28>)
  406bc4:	4798      	blx	r3
  406bc6:	b130      	cbz	r0, 406bd6 <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406bc8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  406bcc:	422b      	tst	r3, r5
}
  406bce:	bf14      	ite	ne
  406bd0:	2001      	movne	r0, #1
  406bd2:	2000      	moveq	r0, #0
  406bd4:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406bd6:	4622      	mov	r2, r4
  406bd8:	2300      	movs	r3, #0
  406bda:	4803      	ldr	r0, [pc, #12]	; (406be8 <lv_obj_is_protected+0x2c>)
  406bdc:	4903      	ldr	r1, [pc, #12]	; (406bec <lv_obj_is_protected+0x30>)
  406bde:	4788      	blx	r1
  406be0:	e7fe      	b.n	406be0 <lv_obj_is_protected+0x24>
  406be2:	bf00      	nop
  406be4:	00415a81 	.word	0x00415a81
  406be8:	00428ca8 	.word	0x00428ca8
  406bec:	00415a8d 	.word	0x00415a8d

00406bf0 <lv_obj_get_state>:
{
  406bf0:	b530      	push	{r4, r5, lr}
  406bf2:	b083      	sub	sp, #12
  406bf4:	4604      	mov	r4, r0
  406bf6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406bf8:	4b0d      	ldr	r3, [pc, #52]	; (406c30 <lv_obj_get_state+0x40>)
  406bfa:	4798      	blx	r3
  406bfc:	b128      	cbz	r0, 406c0a <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  406bfe:	2d3f      	cmp	r5, #63	; 0x3f
  406c00:	d809      	bhi.n	406c16 <lv_obj_get_state+0x26>
  406c02:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  406c06:	b003      	add	sp, #12
  406c08:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406c0a:	4622      	mov	r2, r4
  406c0c:	2300      	movs	r3, #0
  406c0e:	4809      	ldr	r0, [pc, #36]	; (406c34 <lv_obj_get_state+0x44>)
  406c10:	4909      	ldr	r1, [pc, #36]	; (406c38 <lv_obj_get_state+0x48>)
  406c12:	4788      	blx	r1
  406c14:	e7fe      	b.n	406c14 <lv_obj_get_state+0x24>
    info.part = part;
  406c16:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  406c1a:	2300      	movs	r3, #0
  406c1c:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406c20:	aa01      	add	r2, sp, #4
  406c22:	2109      	movs	r1, #9
  406c24:	4620      	mov	r0, r4
  406c26:	4b05      	ldr	r3, [pc, #20]	; (406c3c <lv_obj_get_state+0x4c>)
  406c28:	4798      	blx	r3
    return info.result;
  406c2a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406c2e:	e7ea      	b.n	406c06 <lv_obj_get_state+0x16>
  406c30:	00415a81 	.word	0x00415a81
  406c34:	00428ca8 	.word	0x00428ca8
  406c38:	00415a8d 	.word	0x00415a8d
  406c3c:	00405715 	.word	0x00405715

00406c40 <_lv_obj_get_style_color>:
{
  406c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406c44:	b083      	sub	sp, #12
  406c46:	4606      	mov	r6, r0
  406c48:	460d      	mov	r5, r1
  406c4a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406c4c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406c50:	4614      	mov	r4, r2
  406c52:	e006      	b.n	406c62 <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  406c54:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  406c58:	e026      	b.n	406ca8 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  406c5a:	4630      	mov	r0, r6
  406c5c:	4b15      	ldr	r3, [pc, #84]	; (406cb4 <_lv_obj_get_style_color+0x74>)
  406c5e:	4798      	blx	r3
  406c60:	4606      	mov	r6, r0
    while(parent) {
  406c62:	b1d6      	cbz	r6, 406c9a <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406c64:	4629      	mov	r1, r5
  406c66:	4630      	mov	r0, r6
  406c68:	4b13      	ldr	r3, [pc, #76]	; (406cb8 <_lv_obj_get_style_color+0x78>)
  406c6a:	4798      	blx	r3
  406c6c:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  406c6e:	4629      	mov	r1, r5
  406c70:	4630      	mov	r0, r6
  406c72:	4b12      	ldr	r3, [pc, #72]	; (406cbc <_lv_obj_get_style_color+0x7c>)
  406c74:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406c76:	0204      	lsls	r4, r0, #8
  406c78:	b2a4      	uxth	r4, r4
  406c7a:	4444      	add	r4, r8
  406c7c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  406c7e:	aa01      	add	r2, sp, #4
  406c80:	4621      	mov	r1, r4
  406c82:	4638      	mov	r0, r7
  406c84:	4b0e      	ldr	r3, [pc, #56]	; (406cc0 <_lv_obj_get_style_color+0x80>)
  406c86:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406c88:	2801      	cmp	r0, #1
  406c8a:	d0e3      	beq.n	406c54 <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406c8c:	f019 0f80 	tst.w	r9, #128	; 0x80
  406c90:	d003      	beq.n	406c9a <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  406c92:	2d00      	cmp	r5, #0
  406c94:	d0e1      	beq.n	406c5a <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  406c96:	2500      	movs	r5, #0
  406c98:	e7e3      	b.n	406c62 <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406c9a:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  406c9e:	3c29      	subs	r4, #41	; 0x29
  406ca0:	2c01      	cmp	r4, #1
  406ca2:	d904      	bls.n	406cae <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  406ca4:	f04f 0000 	mov.w	r0, #0
}
  406ca8:	b003      	add	sp, #12
  406caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  406cae:	4b05      	ldr	r3, [pc, #20]	; (406cc4 <_lv_obj_get_style_color+0x84>)
  406cb0:	8818      	ldrh	r0, [r3, #0]
  406cb2:	e7f9      	b.n	406ca8 <_lv_obj_get_style_color+0x68>
  406cb4:	004057bd 	.word	0x004057bd
  406cb8:	00405a1d 	.word	0x00405a1d
  406cbc:	00406bf1 	.word	0x00406bf1
  406cc0:	0040ace1 	.word	0x0040ace1
  406cc4:	00428ca4 	.word	0x00428ca4

00406cc8 <_lv_obj_get_style_opa>:
{
  406cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406ccc:	b083      	sub	sp, #12
  406cce:	4607      	mov	r7, r0
  406cd0:	460e      	mov	r6, r1
  406cd2:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406cd4:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406cd8:	4614      	mov	r4, r2
  406cda:	e023      	b.n	406d24 <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406cdc:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406ce0:	4631      	mov	r1, r6
  406ce2:	4638      	mov	r0, r7
  406ce4:	4b37      	ldr	r3, [pc, #220]	; (406dc4 <_lv_obj_get_style_opa+0xfc>)
  406ce6:	4798      	blx	r3
  406ce8:	e02e      	b.n	406d48 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  406cea:	796b      	ldrb	r3, [r5, #5]
  406cec:	f013 0f20 	tst.w	r3, #32
  406cf0:	d147      	bne.n	406d82 <_lv_obj_get_style_opa+0xba>
            bool def = false;
  406cf2:	2300      	movs	r3, #0
            if(def) {
  406cf4:	2b00      	cmp	r3, #0
  406cf6:	d152      	bne.n	406d9e <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  406cf8:	4631      	mov	r1, r6
  406cfa:	4638      	mov	r0, r7
  406cfc:	4b32      	ldr	r3, [pc, #200]	; (406dc8 <_lv_obj_get_style_opa+0x100>)
  406cfe:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406d00:	0204      	lsls	r4, r0, #8
  406d02:	b2a4      	uxth	r4, r4
  406d04:	4444      	add	r4, r8
  406d06:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  406d08:	f10d 0207 	add.w	r2, sp, #7
  406d0c:	4621      	mov	r1, r4
  406d0e:	4628      	mov	r0, r5
  406d10:	4b2e      	ldr	r3, [pc, #184]	; (406dcc <_lv_obj_get_style_opa+0x104>)
  406d12:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406d14:	2801      	cmp	r0, #1
  406d16:	d03a      	beq.n	406d8e <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406d18:	f019 0f80 	tst.w	r9, #128	; 0x80
  406d1c:	d03f      	beq.n	406d9e <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  406d1e:	2e00      	cmp	r6, #0
  406d20:	d038      	beq.n	406d94 <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406d22:	2600      	movs	r6, #0
    while(parent) {
  406d24:	2f00      	cmp	r7, #0
  406d26:	d03a      	beq.n	406d9e <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406d28:	4631      	mov	r1, r6
  406d2a:	4638      	mov	r0, r7
  406d2c:	4b28      	ldr	r3, [pc, #160]	; (406dd0 <_lv_obj_get_style_opa+0x108>)
  406d2e:	4798      	blx	r3
  406d30:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406d32:	7943      	ldrb	r3, [r0, #5]
  406d34:	f013 0f08 	tst.w	r3, #8
  406d38:	d1de      	bne.n	406cf8 <_lv_obj_get_style_opa+0x30>
  406d3a:	7902      	ldrb	r2, [r0, #4]
  406d3c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406d40:	d0da      	beq.n	406cf8 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406d42:	f013 0f04 	tst.w	r3, #4
  406d46:	d0c9      	beq.n	406cdc <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406d48:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406d4c:	f248 020c 	movw	r2, #32780	; 0x800c
  406d50:	4293      	cmp	r3, r2
  406d52:	d0ca      	beq.n	406cea <_lv_obj_get_style_opa+0x22>
  406d54:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406d58:	4293      	cmp	r3, r2
  406d5a:	d00c      	beq.n	406d76 <_lv_obj_get_style_opa+0xae>
  406d5c:	2b2c      	cmp	r3, #44	; 0x2c
  406d5e:	d001      	beq.n	406d64 <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  406d60:	2300      	movs	r3, #0
  406d62:	e7c7      	b.n	406cf4 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406d64:	79ab      	ldrb	r3, [r5, #6]
  406d66:	f013 0f10 	tst.w	r3, #16
  406d6a:	d127      	bne.n	406dbc <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  406d6c:	f013 0f08 	tst.w	r3, #8
  406d70:	d109      	bne.n	406d86 <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  406d72:	2300      	movs	r3, #0
  406d74:	e7be      	b.n	406cf4 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406d76:	79eb      	ldrb	r3, [r5, #7]
  406d78:	f013 0f10 	tst.w	r3, #16
  406d7c:	d105      	bne.n	406d8a <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  406d7e:	2300      	movs	r3, #0
  406d80:	e7b8      	b.n	406cf4 <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  406d82:	2301      	movs	r3, #1
  406d84:	e7b6      	b.n	406cf4 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  406d86:	2301      	movs	r3, #1
  406d88:	e7b4      	b.n	406cf4 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406d8a:	2301      	movs	r3, #1
  406d8c:	e7b2      	b.n	406cf4 <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  406d8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406d92:	e014      	b.n	406dbe <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  406d94:	4638      	mov	r0, r7
  406d96:	4b0f      	ldr	r3, [pc, #60]	; (406dd4 <_lv_obj_get_style_opa+0x10c>)
  406d98:	4798      	blx	r3
  406d9a:	4607      	mov	r7, r0
  406d9c:	e7c2      	b.n	406d24 <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406d9e:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406da2:	b2a4      	uxth	r4, r4
    switch(prop) {
  406da4:	2c6d      	cmp	r4, #109	; 0x6d
  406da6:	d007      	beq.n	406db8 <_lv_obj_get_style_opa+0xf0>
  406da8:	f248 03ad 	movw	r3, #32941	; 0x80ad
  406dac:	429c      	cmp	r4, r3
  406dae:	d003      	beq.n	406db8 <_lv_obj_get_style_opa+0xf0>
  406db0:	2c2c      	cmp	r4, #44	; 0x2c
  406db2:	d001      	beq.n	406db8 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406db4:	20ff      	movs	r0, #255	; 0xff
  406db6:	e002      	b.n	406dbe <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406db8:	2000      	movs	r0, #0
  406dba:	e000      	b.n	406dbe <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406dbc:	20ff      	movs	r0, #255	; 0xff
}
  406dbe:	b003      	add	sp, #12
  406dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406dc4:	00406dd9 	.word	0x00406dd9
  406dc8:	00406bf1 	.word	0x00406bf1
  406dcc:	0040adb1 	.word	0x0040adb1
  406dd0:	00405a1d 	.word	0x00405a1d
  406dd4:	004057bd 	.word	0x004057bd

00406dd8 <update_style_cache>:
{
  406dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406ddc:	4605      	mov	r5, r0
  406dde:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  406de0:	4610      	mov	r0, r2
  406de2:	4baf      	ldr	r3, [pc, #700]	; (4070a0 <update_style_cache+0x2c8>)
  406de4:	4798      	blx	r3
  406de6:	b908      	cbnz	r0, 406dec <update_style_cache+0x14>
  406de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406dec:	4631      	mov	r1, r6
  406dee:	4628      	mov	r0, r5
  406df0:	4bac      	ldr	r3, [pc, #688]	; (4070a4 <update_style_cache+0x2cc>)
  406df2:	4798      	blx	r3
  406df4:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  406df6:	7943      	ldrb	r3, [r0, #5]
  406df8:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  406dfc:	f043 0308 	orr.w	r3, r3, #8
  406e00:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406e02:	f248 020c 	movw	r2, #32780	; 0x800c
  406e06:	4631      	mov	r1, r6
  406e08:	4628      	mov	r0, r5
  406e0a:	4ba7      	ldr	r3, [pc, #668]	; (4070a8 <update_style_cache+0x2d0>)
  406e0c:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406e0e:	28ff      	cmp	r0, #255	; 0xff
  406e10:	bf14      	ite	ne
  406e12:	2000      	movne	r0, #0
  406e14:	2001      	moveq	r0, #1
  406e16:	7963      	ldrb	r3, [r4, #5]
  406e18:	f360 1345 	bfi	r3, r0, #5, #1
  406e1c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406e1e:	f248 0282 	movw	r2, #32898	; 0x8082
  406e22:	4631      	mov	r1, r6
  406e24:	4628      	mov	r0, r5
  406e26:	4fa1      	ldr	r7, [pc, #644]	; (4070ac <update_style_cache+0x2d4>)
  406e28:	47b8      	blx	r7
  406e2a:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  406e2c:	fab0 f080 	clz	r0, r0
  406e30:	0940      	lsrs	r0, r0, #5
  406e32:	79e3      	ldrb	r3, [r4, #7]
  406e34:	f360 1386 	bfi	r3, r0, #6, #1
  406e38:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  406e3a:	f248 028e 	movw	r2, #32910	; 0x808e
  406e3e:	4631      	mov	r1, r6
  406e40:	4628      	mov	r0, r5
  406e42:	4b9b      	ldr	r3, [pc, #620]	; (4070b0 <update_style_cache+0x2d8>)
  406e44:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  406e46:	4b9b      	ldr	r3, [pc, #620]	; (4070b4 <update_style_cache+0x2dc>)
  406e48:	4283      	cmp	r3, r0
  406e4a:	bf14      	ite	ne
  406e4c:	2000      	movne	r0, #0
  406e4e:	2001      	moveq	r0, #1
  406e50:	79e3      	ldrb	r3, [r4, #7]
  406e52:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  406e56:	b2db      	uxtb	r3, r3
  406e58:	f043 0320 	orr.w	r3, r3, #32
  406e5c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  406e5e:	f248 0280 	movw	r2, #32896	; 0x8080
  406e62:	4631      	mov	r1, r6
  406e64:	4628      	mov	r0, r5
  406e66:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406e68:	2800      	cmp	r0, #0
  406e6a:	f000 80cf 	beq.w	40700c <update_style_cache+0x234>
        list->text_space_zero = 0;
  406e6e:	79e3      	ldrb	r3, [r4, #7]
  406e70:	f36f 1345 	bfc	r3, #5, #1
  406e74:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  406e76:	222c      	movs	r2, #44	; 0x2c
  406e78:	4631      	mov	r1, r6
  406e7a:	4628      	mov	r0, r5
  406e7c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 4070a8 <update_style_cache+0x2d0>
  406e80:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  406e82:	fab0 f280 	clz	r2, r0
  406e86:	0952      	lsrs	r2, r2, #5
  406e88:	79a3      	ldrb	r3, [r4, #6]
  406e8a:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  406e8e:	28ff      	cmp	r0, #255	; 0xff
  406e90:	bf14      	ite	ne
  406e92:	2000      	movne	r0, #0
  406e94:	2001      	moveq	r0, #1
  406e96:	f360 1304 	bfi	r3, r0, #4, #1
  406e9a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  406e9c:	2230      	movs	r2, #48	; 0x30
  406e9e:	4631      	mov	r1, r6
  406ea0:	4628      	mov	r0, r5
  406ea2:	4f82      	ldr	r7, [pc, #520]	; (4070ac <update_style_cache+0x2d4>)
  406ea4:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  406ea6:	fab0 f080 	clz	r0, r0
  406eaa:	0940      	lsrs	r0, r0, #5
  406eac:	79a3      	ldrb	r3, [r4, #6]
  406eae:	f360 1345 	bfi	r3, r0, #5, #1
  406eb2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  406eb4:	2231      	movs	r2, #49	; 0x31
  406eb6:	4631      	mov	r1, r6
  406eb8:	4628      	mov	r0, r5
  406eba:	47b8      	blx	r7
  406ebc:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  406ebe:	280f      	cmp	r0, #15
  406ec0:	bf14      	ite	ne
  406ec2:	2000      	movne	r0, #0
  406ec4:	2001      	moveq	r0, #1
  406ec6:	79a3      	ldrb	r3, [r4, #6]
  406ec8:	f360 1386 	bfi	r3, r0, #6, #1
  406ecc:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  406ece:	2233      	movs	r2, #51	; 0x33
  406ed0:	4631      	mov	r1, r6
  406ed2:	4628      	mov	r0, r5
  406ed4:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  406ed6:	fab0 f080 	clz	r0, r0
  406eda:	0940      	lsrs	r0, r0, #5
  406edc:	79a3      	ldrb	r3, [r4, #6]
  406ede:	f360 13c7 	bfi	r3, r0, #7, #1
  406ee2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  406ee4:	2202      	movs	r2, #2
  406ee6:	4631      	mov	r1, r6
  406ee8:	4628      	mov	r0, r5
  406eea:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  406eec:	fab0 f080 	clz	r0, r0
  406ef0:	0940      	lsrs	r0, r0, #5
  406ef2:	7963      	ldrb	r3, [r4, #5]
  406ef4:	f360 1386 	bfi	r3, r0, #6, #1
  406ef8:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  406efa:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406efe:	4631      	mov	r1, r6
  406f00:	4628      	mov	r0, r5
  406f02:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  406f04:	fab0 f080 	clz	r0, r0
  406f08:	0940      	lsrs	r0, r0, #5
  406f0a:	79e3      	ldrb	r3, [r4, #7]
  406f0c:	f360 1304 	bfi	r3, r0, #4, #1
  406f10:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  406f12:	2240      	movs	r2, #64	; 0x40
  406f14:	4631      	mov	r1, r6
  406f16:	4628      	mov	r0, r5
  406f18:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  406f1a:	fab0 f080 	clz	r0, r0
  406f1e:	0940      	lsrs	r0, r0, #5
  406f20:	79e3      	ldrb	r3, [r4, #7]
  406f22:	f360 0300 	bfi	r3, r0, #0, #1
  406f26:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  406f28:	226e      	movs	r2, #110	; 0x6e
  406f2a:	4631      	mov	r1, r6
  406f2c:	4628      	mov	r0, r5
  406f2e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 4070b0 <update_style_cache+0x2d8>
  406f32:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  406f34:	fab0 f080 	clz	r0, r0
  406f38:	0940      	lsrs	r0, r0, #5
  406f3a:	79e3      	ldrb	r3, [r4, #7]
  406f3c:	f360 0341 	bfi	r3, r0, #1, #1
  406f40:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  406f42:	2201      	movs	r2, #1
  406f44:	4631      	mov	r1, r6
  406f46:	4628      	mov	r0, r5
  406f48:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  406f4a:	fab0 f080 	clz	r0, r0
  406f4e:	0940      	lsrs	r0, r0, #5
  406f50:	7963      	ldrb	r3, [r4, #5]
  406f52:	f360 1304 	bfi	r3, r0, #4, #1
  406f56:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  406f58:	2250      	movs	r2, #80	; 0x50
  406f5a:	4631      	mov	r1, r6
  406f5c:	4628      	mov	r0, r5
  406f5e:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  406f60:	fab0 f080 	clz	r0, r0
  406f64:	0940      	lsrs	r0, r0, #5
  406f66:	79e3      	ldrb	r3, [r4, #7]
  406f68:	f360 0382 	bfi	r3, r0, #2, #1
  406f6c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  406f6e:	227f      	movs	r2, #127	; 0x7f
  406f70:	4631      	mov	r1, r6
  406f72:	4628      	mov	r0, r5
  406f74:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  406f76:	fab0 f080 	clz	r0, r0
  406f7a:	0940      	lsrs	r0, r0, #5
  406f7c:	79e3      	ldrb	r3, [r4, #7]
  406f7e:	f360 03c3 	bfi	r3, r0, #3, #1
  406f82:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  406f84:	7963      	ldrb	r3, [r4, #5]
  406f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406f8a:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  406f8c:	2206      	movs	r2, #6
  406f8e:	4631      	mov	r1, r6
  406f90:	4628      	mov	r0, r5
  406f92:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  406f94:	2800      	cmp	r0, #0
  406f96:	d042      	beq.n	40701e <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  406f98:	7963      	ldrb	r3, [r4, #5]
  406f9a:	f36f 13c7 	bfc	r3, #7, #1
  406f9e:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  406fa0:	79a3      	ldrb	r3, [r4, #6]
  406fa2:	f043 0301 	orr.w	r3, r3, #1
  406fa6:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  406fa8:	2210      	movs	r2, #16
  406faa:	4631      	mov	r1, r6
  406fac:	4628      	mov	r0, r5
  406fae:	4b3f      	ldr	r3, [pc, #252]	; (4070ac <update_style_cache+0x2d4>)
  406fb0:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406fb2:	2800      	cmp	r0, #0
  406fb4:	d047      	beq.n	407046 <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  406fb6:	79a3      	ldrb	r3, [r4, #6]
  406fb8:	f36f 0300 	bfc	r3, #0, #1
  406fbc:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  406fbe:	79a3      	ldrb	r3, [r4, #6]
  406fc0:	f043 0302 	orr.w	r3, r3, #2
  406fc4:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  406fc6:	2215      	movs	r2, #21
  406fc8:	4631      	mov	r1, r6
  406fca:	4628      	mov	r0, r5
  406fcc:	4b37      	ldr	r3, [pc, #220]	; (4070ac <update_style_cache+0x2d4>)
  406fce:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406fd0:	2800      	cmp	r0, #0
  406fd2:	d04e      	beq.n	407072 <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  406fd4:	79a3      	ldrb	r3, [r4, #6]
  406fd6:	f36f 0341 	bfc	r3, #1, #1
  406fda:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  406fdc:	79a3      	ldrb	r3, [r4, #6]
  406fde:	f043 0304 	orr.w	r3, r3, #4
  406fe2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  406fe4:	2220      	movs	r2, #32
  406fe6:	4631      	mov	r1, r6
  406fe8:	4628      	mov	r0, r5
  406fea:	4b30      	ldr	r3, [pc, #192]	; (4070ac <update_style_cache+0x2d4>)
  406fec:	4798      	blx	r3
  406fee:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406ff0:	2800      	cmp	r0, #0
  406ff2:	d061      	beq.n	4070b8 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  406ff4:	79a3      	ldrb	r3, [r4, #6]
  406ff6:	f36f 0382 	bfc	r3, #2, #1
  406ffa:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  406ffc:	7963      	ldrb	r3, [r4, #5]
  406ffe:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  407002:	b2db      	uxtb	r3, r3
  407004:	f043 0304 	orr.w	r3, r3, #4
  407008:	7163      	strb	r3, [r4, #5]
  40700a:	e6ed      	b.n	406de8 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  40700c:	f248 0281 	movw	r2, #32897	; 0x8081
  407010:	4631      	mov	r1, r6
  407012:	4628      	mov	r0, r5
  407014:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407016:	2800      	cmp	r0, #0
  407018:	f43f af2d 	beq.w	406e76 <update_style_cache+0x9e>
  40701c:	e727      	b.n	406e6e <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40701e:	2204      	movs	r2, #4
  407020:	4631      	mov	r1, r6
  407022:	4628      	mov	r0, r5
  407024:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  407026:	2800      	cmp	r0, #0
  407028:	d1b6      	bne.n	406f98 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40702a:	2205      	movs	r2, #5
  40702c:	4631      	mov	r1, r6
  40702e:	4628      	mov	r0, r5
  407030:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  407032:	2800      	cmp	r0, #0
  407034:	d1b0      	bne.n	406f98 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  407036:	2207      	movs	r2, #7
  407038:	4631      	mov	r1, r6
  40703a:	4628      	mov	r0, r5
  40703c:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  40703e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  407042:	d1a9      	bne.n	406f98 <update_style_cache+0x1c0>
  407044:	e7ac      	b.n	406fa0 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  407046:	2211      	movs	r2, #17
  407048:	4631      	mov	r1, r6
  40704a:	4628      	mov	r0, r5
  40704c:	4b17      	ldr	r3, [pc, #92]	; (4070ac <update_style_cache+0x2d4>)
  40704e:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  407050:	2800      	cmp	r0, #0
  407052:	d1b0      	bne.n	406fb6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  407054:	2212      	movs	r2, #18
  407056:	4631      	mov	r1, r6
  407058:	4628      	mov	r0, r5
  40705a:	4b14      	ldr	r3, [pc, #80]	; (4070ac <update_style_cache+0x2d4>)
  40705c:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  40705e:	2800      	cmp	r0, #0
  407060:	d1a9      	bne.n	406fb6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  407062:	2213      	movs	r2, #19
  407064:	4631      	mov	r1, r6
  407066:	4628      	mov	r0, r5
  407068:	4b10      	ldr	r3, [pc, #64]	; (4070ac <update_style_cache+0x2d4>)
  40706a:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  40706c:	2800      	cmp	r0, #0
  40706e:	d0a6      	beq.n	406fbe <update_style_cache+0x1e6>
  407070:	e7a1      	b.n	406fb6 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  407072:	2216      	movs	r2, #22
  407074:	4631      	mov	r1, r6
  407076:	4628      	mov	r0, r5
  407078:	4b0c      	ldr	r3, [pc, #48]	; (4070ac <update_style_cache+0x2d4>)
  40707a:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  40707c:	2800      	cmp	r0, #0
  40707e:	d1a9      	bne.n	406fd4 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  407080:	2217      	movs	r2, #23
  407082:	4631      	mov	r1, r6
  407084:	4628      	mov	r0, r5
  407086:	4b09      	ldr	r3, [pc, #36]	; (4070ac <update_style_cache+0x2d4>)
  407088:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  40708a:	2800      	cmp	r0, #0
  40708c:	d1a2      	bne.n	406fd4 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  40708e:	2218      	movs	r2, #24
  407090:	4631      	mov	r1, r6
  407092:	4628      	mov	r0, r5
  407094:	4b05      	ldr	r3, [pc, #20]	; (4070ac <update_style_cache+0x2d4>)
  407096:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  407098:	2800      	cmp	r0, #0
  40709a:	d09f      	beq.n	406fdc <update_style_cache+0x204>
  40709c:	e79a      	b.n	406fd4 <update_style_cache+0x1fc>
  40709e:	bf00      	nop
  4070a0:	004051c5 	.word	0x004051c5
  4070a4:	00405a1d 	.word	0x00405a1d
  4070a8:	00406cc9 	.word	0x00406cc9
  4070ac:	00407255 	.word	0x00407255
  4070b0:	0040714d 	.word	0x0040714d
  4070b4:	2040002c 	.word	0x2040002c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4070b8:	2232      	movs	r2, #50	; 0x32
  4070ba:	4631      	mov	r1, r6
  4070bc:	4628      	mov	r0, r5
  4070be:	4b22      	ldr	r3, [pc, #136]	; (407148 <update_style_cache+0x370>)
  4070c0:	4798      	blx	r3
  4070c2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4070c4:	2800      	cmp	r0, #0
  4070c6:	d195      	bne.n	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  4070c8:	2260      	movs	r2, #96	; 0x60
  4070ca:	4631      	mov	r1, r6
  4070cc:	4628      	mov	r0, r5
  4070ce:	4b1e      	ldr	r3, [pc, #120]	; (407148 <update_style_cache+0x370>)
  4070d0:	4798      	blx	r3
  4070d2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4070d4:	2800      	cmp	r0, #0
  4070d6:	d18d      	bne.n	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  4070d8:	2242      	movs	r2, #66	; 0x42
  4070da:	4631      	mov	r1, r6
  4070dc:	4628      	mov	r0, r5
  4070de:	4b1a      	ldr	r3, [pc, #104]	; (407148 <update_style_cache+0x370>)
  4070e0:	4798      	blx	r3
  4070e2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4070e4:	2800      	cmp	r0, #0
  4070e6:	d185      	bne.n	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  4070e8:	2272      	movs	r2, #114	; 0x72
  4070ea:	4631      	mov	r1, r6
  4070ec:	4628      	mov	r0, r5
  4070ee:	4b16      	ldr	r3, [pc, #88]	; (407148 <update_style_cache+0x370>)
  4070f0:	4798      	blx	r3
  4070f2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  4070f4:	2800      	cmp	r0, #0
  4070f6:	f47f af7d 	bne.w	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  4070fa:	f248 0283 	movw	r2, #32899	; 0x8083
  4070fe:	4631      	mov	r1, r6
  407100:	4628      	mov	r0, r5
  407102:	4b11      	ldr	r3, [pc, #68]	; (407148 <update_style_cache+0x370>)
  407104:	4798      	blx	r3
  407106:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407108:	2800      	cmp	r0, #0
  40710a:	f47f af73 	bne.w	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  40710e:	2291      	movs	r2, #145	; 0x91
  407110:	4631      	mov	r1, r6
  407112:	4628      	mov	r0, r5
  407114:	4b0c      	ldr	r3, [pc, #48]	; (407148 <update_style_cache+0x370>)
  407116:	4798      	blx	r3
  407118:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40711a:	2800      	cmp	r0, #0
  40711c:	f47f af6a 	bne.w	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  407120:	f248 02a0 	movw	r2, #32928	; 0x80a0
  407124:	4631      	mov	r1, r6
  407126:	4628      	mov	r0, r5
  407128:	4b07      	ldr	r3, [pc, #28]	; (407148 <update_style_cache+0x370>)
  40712a:	4798      	blx	r3
  40712c:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  40712e:	2800      	cmp	r0, #0
  407130:	f47f af60 	bne.w	406ff4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  407134:	2254      	movs	r2, #84	; 0x54
  407136:	4631      	mov	r1, r6
  407138:	4628      	mov	r0, r5
  40713a:	4b03      	ldr	r3, [pc, #12]	; (407148 <update_style_cache+0x370>)
  40713c:	4798      	blx	r3
  40713e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  407140:	2800      	cmp	r0, #0
  407142:	f43f af5b 	beq.w	406ffc <update_style_cache+0x224>
  407146:	e755      	b.n	406ff4 <update_style_cache+0x21c>
  407148:	00407255 	.word	0x00407255

0040714c <_lv_obj_get_style_ptr>:
{
  40714c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407150:	b083      	sub	sp, #12
  407152:	4607      	mov	r7, r0
  407154:	460e      	mov	r6, r1
  407156:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  407158:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  40715c:	4614      	mov	r4, r2
  40715e:	e02d      	b.n	4071bc <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407160:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407164:	4631      	mov	r1, r6
  407166:	4638      	mov	r0, r7
  407168:	4b33      	ldr	r3, [pc, #204]	; (407238 <_lv_obj_get_style_ptr+0xec>)
  40716a:	4798      	blx	r3
  40716c:	e037      	b.n	4071de <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  40716e:	79eb      	ldrb	r3, [r5, #7]
  407170:	f013 0f08 	tst.w	r3, #8
  407174:	d13f      	bne.n	4071f6 <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  407176:	2300      	movs	r3, #0
  407178:	e00a      	b.n	407190 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  40717a:	79eb      	ldrb	r3, [r5, #7]
  40717c:	f013 0f02 	tst.w	r3, #2
  407180:	d13b      	bne.n	4071fa <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  407182:	2300      	movs	r3, #0
  407184:	e004      	b.n	407190 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  407186:	f995 3007 	ldrsb.w	r3, [r5, #7]
  40718a:	2b00      	cmp	r3, #0
  40718c:	db37      	blt.n	4071fe <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  40718e:	2300      	movs	r3, #0
            if(def) {
  407190:	2b00      	cmp	r3, #0
  407192:	d13f      	bne.n	407214 <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  407194:	4631      	mov	r1, r6
  407196:	4638      	mov	r0, r7
  407198:	4b28      	ldr	r3, [pc, #160]	; (40723c <_lv_obj_get_style_ptr+0xf0>)
  40719a:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  40719c:	0204      	lsls	r4, r0, #8
  40719e:	b2a4      	uxth	r4, r4
  4071a0:	4444      	add	r4, r8
  4071a2:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  4071a4:	aa01      	add	r2, sp, #4
  4071a6:	4621      	mov	r1, r4
  4071a8:	4628      	mov	r0, r5
  4071aa:	4b25      	ldr	r3, [pc, #148]	; (407240 <_lv_obj_get_style_ptr+0xf4>)
  4071ac:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  4071ae:	2801      	cmp	r0, #1
  4071b0:	d027      	beq.n	407202 <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4071b2:	f019 0f80 	tst.w	r9, #128	; 0x80
  4071b6:	d02d      	beq.n	407214 <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  4071b8:	b33e      	cbz	r6, 40720a <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  4071ba:	2600      	movs	r6, #0
    while(parent) {
  4071bc:	b357      	cbz	r7, 407214 <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  4071be:	4631      	mov	r1, r6
  4071c0:	4638      	mov	r0, r7
  4071c2:	4b20      	ldr	r3, [pc, #128]	; (407244 <_lv_obj_get_style_ptr+0xf8>)
  4071c4:	4798      	blx	r3
  4071c6:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  4071c8:	7943      	ldrb	r3, [r0, #5]
  4071ca:	f013 0f08 	tst.w	r3, #8
  4071ce:	d1e1      	bne.n	407194 <_lv_obj_get_style_ptr+0x48>
  4071d0:	7902      	ldrb	r2, [r0, #4]
  4071d2:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  4071d6:	d0dd      	beq.n	407194 <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4071d8:	f013 0f04 	tst.w	r3, #4
  4071dc:	d0c0      	beq.n	407160 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4071de:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  4071e2:	2b7f      	cmp	r3, #127	; 0x7f
  4071e4:	d0c3      	beq.n	40716e <_lv_obj_get_style_ptr+0x22>
  4071e6:	f248 028e 	movw	r2, #32910	; 0x808e
  4071ea:	4293      	cmp	r3, r2
  4071ec:	d0cb      	beq.n	407186 <_lv_obj_get_style_ptr+0x3a>
  4071ee:	2b6e      	cmp	r3, #110	; 0x6e
  4071f0:	d0c3      	beq.n	40717a <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  4071f2:	2300      	movs	r3, #0
  4071f4:	e7cc      	b.n	407190 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  4071f6:	2301      	movs	r3, #1
  4071f8:	e7ca      	b.n	407190 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  4071fa:	2301      	movs	r3, #1
  4071fc:	e7c8      	b.n	407190 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  4071fe:	2301      	movs	r3, #1
  407200:	e7c6      	b.n	407190 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  407202:	9801      	ldr	r0, [sp, #4]
}
  407204:	b003      	add	sp, #12
  407206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  40720a:	4638      	mov	r0, r7
  40720c:	4b0e      	ldr	r3, [pc, #56]	; (407248 <_lv_obj_get_style_ptr+0xfc>)
  40720e:	4798      	blx	r3
  407210:	4607      	mov	r7, r0
  407212:	e7d3      	b.n	4071bc <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407214:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  407218:	b2a4      	uxth	r4, r4
    switch(prop) {
  40721a:	2cbe      	cmp	r4, #190	; 0xbe
  40721c:	d007      	beq.n	40722e <_lv_obj_get_style_ptr+0xe2>
  40721e:	f248 038e 	movw	r3, #32910	; 0x808e
  407222:	429c      	cmp	r4, r3
  407224:	d005      	beq.n	407232 <_lv_obj_get_style_ptr+0xe6>
  407226:	2c7e      	cmp	r4, #126	; 0x7e
  407228:	d003      	beq.n	407232 <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  40722a:	2000      	movs	r0, #0
  40722c:	e7ea      	b.n	407204 <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  40722e:	4807      	ldr	r0, [pc, #28]	; (40724c <_lv_obj_get_style_ptr+0x100>)
  407230:	e7e8      	b.n	407204 <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  407232:	4b07      	ldr	r3, [pc, #28]	; (407250 <_lv_obj_get_style_ptr+0x104>)
  407234:	4798      	blx	r3
  407236:	e7e5      	b.n	407204 <_lv_obj_get_style_ptr+0xb8>
  407238:	00406dd9 	.word	0x00406dd9
  40723c:	00406bf1 	.word	0x00406bf1
  407240:	0040ae85 	.word	0x0040ae85
  407244:	00405a1d 	.word	0x00405a1d
  407248:	004057bd 	.word	0x004057bd
  40724c:	0042c248 	.word	0x0042c248
  407250:	00417ee9 	.word	0x00417ee9

00407254 <_lv_obj_get_style_int>:
{
  407254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407258:	b083      	sub	sp, #12
  40725a:	4607      	mov	r7, r0
  40725c:	460e      	mov	r6, r1
  40725e:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  407260:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  407264:	4614      	mov	r4, r2
  407266:	e078      	b.n	40735a <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407268:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40726c:	4631      	mov	r1, r6
  40726e:	4638      	mov	r0, r7
  407270:	4b82      	ldr	r3, [pc, #520]	; (40747c <_lv_obj_get_style_int+0x228>)
  407272:	4798      	blx	r3
  407274:	e084      	b.n	407380 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407276:	3b04      	subs	r3, #4
  407278:	2b03      	cmp	r3, #3
  40727a:	d854      	bhi.n	407326 <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  40727c:	f995 3005 	ldrsb.w	r3, [r5, #5]
  407280:	2b00      	cmp	r3, #0
  407282:	f2c0 80c0 	blt.w	407406 <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  407286:	2300      	movs	r3, #0
  407288:	e04e      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40728a:	2b20      	cmp	r3, #32
  40728c:	d029      	beq.n	4072e2 <_lv_obj_get_style_int+0x8e>
  40728e:	dd0c      	ble.n	4072aa <_lv_obj_get_style_int+0x56>
  407290:	2b31      	cmp	r3, #49	; 0x31
  407292:	f000 809c 	beq.w	4073ce <_lv_obj_get_style_int+0x17a>
  407296:	dc24      	bgt.n	4072e2 <_lv_obj_get_style_int+0x8e>
  407298:	2b30      	cmp	r3, #48	; 0x30
  40729a:	d144      	bne.n	407326 <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  40729c:	79ab      	ldrb	r3, [r5, #6]
  40729e:	f013 0f20 	tst.w	r3, #32
  4072a2:	f040 80b2 	bne.w	40740a <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  4072a6:	2300      	movs	r3, #0
  4072a8:	e03e      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4072aa:	3b15      	subs	r3, #21
  4072ac:	2b03      	cmp	r3, #3
  4072ae:	d83a      	bhi.n	407326 <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  4072b0:	79ab      	ldrb	r3, [r5, #6]
  4072b2:	f013 0f02 	tst.w	r3, #2
  4072b6:	f040 80b6 	bne.w	407426 <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  4072ba:	2300      	movs	r3, #0
  4072bc:	e034      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4072be:	2b72      	cmp	r3, #114	; 0x72
  4072c0:	d00f      	beq.n	4072e2 <_lv_obj_get_style_int+0x8e>
  4072c2:	dc1a      	bgt.n	4072fa <_lv_obj_get_style_int+0xa6>
  4072c4:	2b50      	cmp	r3, #80	; 0x50
  4072c6:	f000 808e 	beq.w	4073e6 <_lv_obj_get_style_int+0x192>
  4072ca:	dc11      	bgt.n	4072f0 <_lv_obj_get_style_int+0x9c>
  4072cc:	2b40      	cmp	r3, #64	; 0x40
  4072ce:	d106      	bne.n	4072de <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  4072d0:	79eb      	ldrb	r3, [r5, #7]
  4072d2:	f013 0f01 	tst.w	r3, #1
  4072d6:	f040 809e 	bne.w	407416 <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  4072da:	2300      	movs	r3, #0
  4072dc:	e024      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4072de:	2b42      	cmp	r3, #66	; 0x42
  4072e0:	d121      	bne.n	407326 <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  4072e2:	79ab      	ldrb	r3, [r5, #6]
  4072e4:	f013 0f04 	tst.w	r3, #4
  4072e8:	f040 809f 	bne.w	40742a <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  4072ec:	2300      	movs	r3, #0
  4072ee:	e01b      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4072f0:	2b54      	cmp	r3, #84	; 0x54
  4072f2:	d0f6      	beq.n	4072e2 <_lv_obj_get_style_int+0x8e>
  4072f4:	2b60      	cmp	r3, #96	; 0x60
  4072f6:	d116      	bne.n	407326 <_lv_obj_get_style_int+0xd2>
  4072f8:	e7f3      	b.n	4072e2 <_lv_obj_get_style_int+0x8e>
  4072fa:	f248 0281 	movw	r2, #32897	; 0x8081
  4072fe:	4293      	cmp	r3, r2
  407300:	dd0b      	ble.n	40731a <_lv_obj_get_style_int+0xc6>
  407302:	f248 0283 	movw	r2, #32899	; 0x8083
  407306:	4293      	cmp	r3, r2
  407308:	d0eb      	beq.n	4072e2 <_lv_obj_get_style_int+0x8e>
  40730a:	da4f      	bge.n	4073ac <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  40730c:	79eb      	ldrb	r3, [r5, #7]
  40730e:	f013 0f40 	tst.w	r3, #64	; 0x40
  407312:	f040 808c 	bne.w	40742e <_lv_obj_get_style_int+0x1da>
            bool def = false;
  407316:	2300      	movs	r3, #0
  407318:	e006      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  40731a:	f248 0280 	movw	r2, #32896	; 0x8080
  40731e:	4293      	cmp	r3, r2
  407320:	da4f      	bge.n	4073c2 <_lv_obj_get_style_int+0x16e>
  407322:	2b91      	cmp	r3, #145	; 0x91
  407324:	d0dd      	beq.n	4072e2 <_lv_obj_get_style_int+0x8e>
            bool def = false;
  407326:	2300      	movs	r3, #0
            if(def) {
  407328:	2b00      	cmp	r3, #0
  40732a:	f040 808c 	bne.w	407446 <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  40732e:	4631      	mov	r1, r6
  407330:	4638      	mov	r0, r7
  407332:	4b53      	ldr	r3, [pc, #332]	; (407480 <_lv_obj_get_style_int+0x22c>)
  407334:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  407336:	0204      	lsls	r4, r0, #8
  407338:	b2a4      	uxth	r4, r4
  40733a:	4444      	add	r4, r8
  40733c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  40733e:	f10d 0206 	add.w	r2, sp, #6
  407342:	4621      	mov	r1, r4
  407344:	4628      	mov	r0, r5
  407346:	4b4f      	ldr	r3, [pc, #316]	; (407484 <_lv_obj_get_style_int+0x230>)
  407348:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  40734a:	2801      	cmp	r0, #1
  40734c:	d071      	beq.n	407432 <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  40734e:	f019 0f80 	tst.w	r9, #128	; 0x80
  407352:	d078      	beq.n	407446 <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  407354:	2e00      	cmp	r6, #0
  407356:	d071      	beq.n	40743c <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  407358:	2600      	movs	r6, #0
    while(parent) {
  40735a:	2f00      	cmp	r7, #0
  40735c:	d073      	beq.n	407446 <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  40735e:	4631      	mov	r1, r6
  407360:	4638      	mov	r0, r7
  407362:	4b49      	ldr	r3, [pc, #292]	; (407488 <_lv_obj_get_style_int+0x234>)
  407364:	4798      	blx	r3
  407366:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  407368:	7943      	ldrb	r3, [r0, #5]
  40736a:	f013 0f08 	tst.w	r3, #8
  40736e:	d1de      	bne.n	40732e <_lv_obj_get_style_int+0xda>
  407370:	7902      	ldrb	r2, [r0, #4]
  407372:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  407376:	d0da      	beq.n	40732e <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  407378:	f013 0f04 	tst.w	r3, #4
  40737c:	f43f af74 	beq.w	407268 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407380:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  407384:	2b33      	cmp	r3, #51	; 0x33
  407386:	d028      	beq.n	4073da <_lv_obj_get_style_int+0x186>
  407388:	dc99      	bgt.n	4072be <_lv_obj_get_style_int+0x6a>
  40738a:	2b13      	cmp	r3, #19
  40738c:	f73f af7d 	bgt.w	40728a <_lv_obj_get_style_int+0x36>
  407390:	2b10      	cmp	r3, #16
  407392:	da2e      	bge.n	4073f2 <_lv_obj_get_style_int+0x19e>
  407394:	2b02      	cmp	r3, #2
  407396:	d00e      	beq.n	4073b6 <_lv_obj_get_style_int+0x162>
  407398:	f73f af6d 	bgt.w	407276 <_lv_obj_get_style_int+0x22>
  40739c:	2b01      	cmp	r3, #1
  40739e:	d1c2      	bne.n	407326 <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  4073a0:	796b      	ldrb	r3, [r5, #5]
  4073a2:	f013 0f10 	tst.w	r3, #16
  4073a6:	d138      	bne.n	40741a <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  4073a8:	2300      	movs	r3, #0
  4073aa:	e7bd      	b.n	407328 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4073ac:	f248 02a0 	movw	r2, #32928	; 0x80a0
  4073b0:	4293      	cmp	r3, r2
  4073b2:	d1b8      	bne.n	407326 <_lv_obj_get_style_int+0xd2>
  4073b4:	e795      	b.n	4072e2 <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  4073b6:	796b      	ldrb	r3, [r5, #5]
  4073b8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4073bc:	d11f      	bne.n	4073fe <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  4073be:	2300      	movs	r3, #0
  4073c0:	e7b2      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  4073c2:	79eb      	ldrb	r3, [r5, #7]
  4073c4:	f013 0f20 	tst.w	r3, #32
  4073c8:	d11b      	bne.n	407402 <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  4073ca:	2300      	movs	r3, #0
  4073cc:	e7ac      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  4073ce:	79ab      	ldrb	r3, [r5, #6]
  4073d0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4073d4:	d11b      	bne.n	40740e <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  4073d6:	2300      	movs	r3, #0
  4073d8:	e7a6      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  4073da:	f995 3006 	ldrsb.w	r3, [r5, #6]
  4073de:	2b00      	cmp	r3, #0
  4073e0:	db17      	blt.n	407412 <_lv_obj_get_style_int+0x1be>
            bool def = false;
  4073e2:	2300      	movs	r3, #0
  4073e4:	e7a0      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  4073e6:	79eb      	ldrb	r3, [r5, #7]
  4073e8:	f013 0f04 	tst.w	r3, #4
  4073ec:	d117      	bne.n	40741e <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  4073ee:	2300      	movs	r3, #0
  4073f0:	e79a      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  4073f2:	79ab      	ldrb	r3, [r5, #6]
  4073f4:	f013 0f01 	tst.w	r3, #1
  4073f8:	d113      	bne.n	407422 <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  4073fa:	2300      	movs	r3, #0
  4073fc:	e794      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  4073fe:	2301      	movs	r3, #1
  407400:	e792      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  407402:	2301      	movs	r3, #1
  407404:	e790      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  407406:	2301      	movs	r3, #1
  407408:	e78e      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  40740a:	2301      	movs	r3, #1
  40740c:	e78c      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  40740e:	2301      	movs	r3, #1
  407410:	e78a      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  407412:	2301      	movs	r3, #1
  407414:	e788      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  407416:	2301      	movs	r3, #1
  407418:	e786      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  40741a:	2301      	movs	r3, #1
  40741c:	e784      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  40741e:	2301      	movs	r3, #1
  407420:	e782      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  407422:	2301      	movs	r3, #1
  407424:	e780      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  407426:	2301      	movs	r3, #1
  407428:	e77e      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  40742a:	2301      	movs	r3, #1
  40742c:	e77c      	b.n	407328 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  40742e:	2301      	movs	r3, #1
  407430:	e77a      	b.n	407328 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  407432:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  407436:	b003      	add	sp, #12
  407438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  40743c:	4638      	mov	r0, r7
  40743e:	4b13      	ldr	r3, [pc, #76]	; (40748c <_lv_obj_get_style_int+0x238>)
  407440:	4798      	blx	r3
  407442:	4607      	mov	r7, r0
  407444:	e789      	b.n	40735a <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407446:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  40744a:	b2a4      	uxth	r4, r4
    switch(prop) {
  40744c:	2c22      	cmp	r4, #34	; 0x22
  40744e:	d00f      	beq.n	407470 <_lv_obj_get_style_int+0x21c>
  407450:	d806      	bhi.n	407460 <_lv_obj_get_style_int+0x20c>
  407452:	2c03      	cmp	r4, #3
  407454:	d010      	beq.n	407478 <_lv_obj_get_style_int+0x224>
  407456:	2c07      	cmp	r4, #7
  407458:	d10c      	bne.n	407474 <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  40745a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40745e:	e7ea      	b.n	407436 <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  407460:	2c31      	cmp	r4, #49	; 0x31
  407462:	d003      	beq.n	40746c <_lv_obj_get_style_int+0x218>
  407464:	2cc0      	cmp	r4, #192	; 0xc0
  407466:	d105      	bne.n	407474 <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  407468:	2012      	movs	r0, #18
  40746a:	e7e4      	b.n	407436 <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  40746c:	200f      	movs	r0, #15
  40746e:	e7e2      	b.n	407436 <_lv_obj_get_style_int+0x1e2>
            return 255;
  407470:	20ff      	movs	r0, #255	; 0xff
  407472:	e7e0      	b.n	407436 <_lv_obj_get_style_int+0x1e2>
    return 0;
  407474:	2000      	movs	r0, #0
  407476:	e7de      	b.n	407436 <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  407478:	2007      	movs	r0, #7
  40747a:	e7dc      	b.n	407436 <_lv_obj_get_style_int+0x1e2>
  40747c:	00406dd9 	.word	0x00406dd9
  407480:	00406bf1 	.word	0x00406bf1
  407484:	0040ac0d 	.word	0x0040ac0d
  407488:	00405a1d 	.word	0x00405a1d
  40748c:	004057bd 	.word	0x004057bd

00407490 <lv_obj_get_width_fit>:
{
  407490:	b570      	push	{r4, r5, r6, lr}
  407492:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407494:	4b0e      	ldr	r3, [pc, #56]	; (4074d0 <lv_obj_get_width_fit+0x40>)
  407496:	4798      	blx	r3
  407498:	b928      	cbnz	r0, 4074a6 <lv_obj_get_width_fit+0x16>
  40749a:	4622      	mov	r2, r4
  40749c:	2300      	movs	r3, #0
  40749e:	480d      	ldr	r0, [pc, #52]	; (4074d4 <lv_obj_get_width_fit+0x44>)
  4074a0:	490d      	ldr	r1, [pc, #52]	; (4074d8 <lv_obj_get_width_fit+0x48>)
  4074a2:	4788      	blx	r1
  4074a4:	e7fe      	b.n	4074a4 <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4074a6:	2212      	movs	r2, #18
  4074a8:	2100      	movs	r1, #0
  4074aa:	4620      	mov	r0, r4
  4074ac:	4d0b      	ldr	r5, [pc, #44]	; (4074dc <lv_obj_get_width_fit+0x4c>)
  4074ae:	47a8      	blx	r5
  4074b0:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4074b2:	2213      	movs	r2, #19
  4074b4:	2100      	movs	r1, #0
  4074b6:	4620      	mov	r0, r4
  4074b8:	47a8      	blx	r5
  4074ba:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) - left - right;
  4074bc:	4620      	mov	r0, r4
  4074be:	4b08      	ldr	r3, [pc, #32]	; (4074e0 <lv_obj_get_width_fit+0x50>)
  4074c0:	4798      	blx	r3
  4074c2:	b280      	uxth	r0, r0
  4074c4:	1b80      	subs	r0, r0, r6
  4074c6:	b280      	uxth	r0, r0
  4074c8:	1b40      	subs	r0, r0, r5
}
  4074ca:	b200      	sxth	r0, r0
  4074cc:	bd70      	pop	{r4, r5, r6, pc}
  4074ce:	bf00      	nop
  4074d0:	00415a81 	.word	0x00415a81
  4074d4:	00428ca8 	.word	0x00428ca8
  4074d8:	00415a8d 	.word	0x00415a8d
  4074dc:	00407255 	.word	0x00407255
  4074e0:	00405991 	.word	0x00405991

004074e4 <update_style_cache_children>:
{
  4074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4074e8:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4074ea:	2500      	movs	r5, #0
  4074ec:	e009      	b.n	407502 <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  4074ee:	79e3      	ldrb	r3, [r4, #7]
  4074f0:	f36f 1345 	bfc	r3, #5, #1
  4074f4:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  4074f6:	7963      	ldrb	r3, [r4, #5]
  4074f8:	f368 03c3 	bfi	r3, r8, #3, #1
  4074fc:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4074fe:	3501      	adds	r5, #1
  407500:	b2ed      	uxtb	r5, r5
  407502:	2d40      	cmp	r5, #64	; 0x40
  407504:	d058      	beq.n	4075b8 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407506:	4629      	mov	r1, r5
  407508:	4630      	mov	r0, r6
  40750a:	4b34      	ldr	r3, [pc, #208]	; (4075dc <update_style_cache_children+0xf8>)
  40750c:	4798      	blx	r3
        if(list == NULL) break;
  40750e:	4604      	mov	r4, r0
  407510:	2800      	cmp	r0, #0
  407512:	d051      	beq.n	4075b8 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  407514:	7943      	ldrb	r3, [r0, #5]
  407516:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  40751a:	f043 0308 	orr.w	r3, r3, #8
  40751e:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407520:	f248 020c 	movw	r2, #32780	; 0x800c
  407524:	4629      	mov	r1, r5
  407526:	4630      	mov	r0, r6
  407528:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 4075f0 <update_style_cache_children+0x10c>
  40752c:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  40752e:	28ff      	cmp	r0, #255	; 0xff
  407530:	bf14      	ite	ne
  407532:	2000      	movne	r0, #0
  407534:	2001      	moveq	r0, #1
  407536:	7963      	ldrb	r3, [r4, #5]
  407538:	f360 1345 	bfi	r3, r0, #5, #1
  40753c:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40753e:	f248 0282 	movw	r2, #32898	; 0x8082
  407542:	4629      	mov	r1, r5
  407544:	4630      	mov	r0, r6
  407546:	4f26      	ldr	r7, [pc, #152]	; (4075e0 <update_style_cache_children+0xfc>)
  407548:	47b8      	blx	r7
  40754a:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  40754c:	fab0 f080 	clz	r0, r0
  407550:	0940      	lsrs	r0, r0, #5
  407552:	79e3      	ldrb	r3, [r4, #7]
  407554:	f360 1386 	bfi	r3, r0, #6, #1
  407558:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40755a:	f248 028e 	movw	r2, #32910	; 0x808e
  40755e:	4629      	mov	r1, r5
  407560:	4630      	mov	r0, r6
  407562:	4b20      	ldr	r3, [pc, #128]	; (4075e4 <update_style_cache_children+0x100>)
  407564:	4798      	blx	r3
  407566:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  407568:	4b1f      	ldr	r3, [pc, #124]	; (4075e8 <update_style_cache_children+0x104>)
  40756a:	4798      	blx	r3
  40756c:	4582      	cmp	sl, r0
  40756e:	bf14      	ite	ne
  407570:	2000      	movne	r0, #0
  407572:	2001      	moveq	r0, #1
  407574:	79e3      	ldrb	r3, [r4, #7]
  407576:	f360 13c7 	bfi	r3, r0, #7, #1
  40757a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  40757c:	f248 02ad 	movw	r2, #32941	; 0x80ad
  407580:	4629      	mov	r1, r5
  407582:	4630      	mov	r0, r6
  407584:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  407586:	fab0 f080 	clz	r0, r0
  40758a:	0940      	lsrs	r0, r0, #5
  40758c:	79e3      	ldrb	r3, [r4, #7]
  40758e:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  407592:	b2db      	uxtb	r3, r3
  407594:	f043 0320 	orr.w	r3, r3, #32
  407598:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  40759a:	f248 0280 	movw	r2, #32896	; 0x8080
  40759e:	4629      	mov	r1, r5
  4075a0:	4630      	mov	r0, r6
  4075a2:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  4075a4:	2800      	cmp	r0, #0
  4075a6:	d1a2      	bne.n	4074ee <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4075a8:	f248 0281 	movw	r2, #32897	; 0x8081
  4075ac:	4629      	mov	r1, r5
  4075ae:	4630      	mov	r0, r6
  4075b0:	47b8      	blx	r7
  4075b2:	2800      	cmp	r0, #0
  4075b4:	d09f      	beq.n	4074f6 <update_style_cache_children+0x12>
  4075b6:	e79a      	b.n	4074ee <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4075b8:	2100      	movs	r1, #0
  4075ba:	4630      	mov	r0, r6
  4075bc:	4b0b      	ldr	r3, [pc, #44]	; (4075ec <update_style_cache_children+0x108>)
  4075be:	4798      	blx	r3
  4075c0:	4604      	mov	r4, r0
    while(child) {
  4075c2:	e007      	b.n	4075d4 <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  4075c4:	4620      	mov	r0, r4
  4075c6:	f7ff ff8d 	bl	4074e4 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  4075ca:	4621      	mov	r1, r4
  4075cc:	4630      	mov	r0, r6
  4075ce:	4b07      	ldr	r3, [pc, #28]	; (4075ec <update_style_cache_children+0x108>)
  4075d0:	4798      	blx	r3
  4075d2:	4604      	mov	r4, r0
    while(child) {
  4075d4:	2c00      	cmp	r4, #0
  4075d6:	d1f5      	bne.n	4075c4 <update_style_cache_children+0xe0>
}
  4075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4075dc:	00405a1d 	.word	0x00405a1d
  4075e0:	00407255 	.word	0x00407255
  4075e4:	0040714d 	.word	0x0040714d
  4075e8:	00417ee9 	.word	0x00417ee9
  4075ec:	00405891 	.word	0x00405891
  4075f0:	00406cc9 	.word	0x00406cc9

004075f4 <invalidate_style_cache>:
{
  4075f4:	b538      	push	{r3, r4, r5, lr}
  4075f6:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  4075f8:	4610      	mov	r0, r2
  4075fa:	4b19      	ldr	r3, [pc, #100]	; (407660 <invalidate_style_cache+0x6c>)
  4075fc:	4798      	blx	r3
  4075fe:	b170      	cbz	r0, 40761e <invalidate_style_cache+0x2a>
  407600:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  407602:	2c3f      	cmp	r4, #63	; 0x3f
  407604:	d80c      	bhi.n	407620 <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407606:	4621      	mov	r1, r4
  407608:	4628      	mov	r0, r5
  40760a:	4b16      	ldr	r3, [pc, #88]	; (407664 <invalidate_style_cache+0x70>)
  40760c:	4798      	blx	r3
        if(list == NULL) break;
  40760e:	b138      	cbz	r0, 407620 <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  407610:	7942      	ldrb	r2, [r0, #5]
  407612:	f36f 0282 	bfc	r2, #2, #1
  407616:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  407618:	3401      	adds	r4, #1
  40761a:	b2e4      	uxtb	r4, r4
  40761c:	e7f1      	b.n	407602 <invalidate_style_cache+0xe>
  40761e:	bd38      	pop	{r3, r4, r5, pc}
  407620:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407622:	2cff      	cmp	r4, #255	; 0xff
  407624:	d00b      	beq.n	40763e <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407626:	4621      	mov	r1, r4
  407628:	4628      	mov	r0, r5
  40762a:	4b0e      	ldr	r3, [pc, #56]	; (407664 <invalidate_style_cache+0x70>)
  40762c:	4798      	blx	r3
        if(list == NULL) break;
  40762e:	b130      	cbz	r0, 40763e <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  407630:	7942      	ldrb	r2, [r0, #5]
  407632:	f36f 0282 	bfc	r2, #2, #1
  407636:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407638:	3401      	adds	r4, #1
  40763a:	b2e4      	uxtb	r4, r4
  40763c:	e7f1      	b.n	407622 <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  40763e:	2100      	movs	r1, #0
  407640:	4628      	mov	r0, r5
  407642:	4b09      	ldr	r3, [pc, #36]	; (407668 <invalidate_style_cache+0x74>)
  407644:	4798      	blx	r3
  407646:	4604      	mov	r4, r0
    while(child) {
  407648:	e007      	b.n	40765a <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  40764a:	4620      	mov	r0, r4
  40764c:	4b07      	ldr	r3, [pc, #28]	; (40766c <invalidate_style_cache+0x78>)
  40764e:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  407650:	4621      	mov	r1, r4
  407652:	4628      	mov	r0, r5
  407654:	4b04      	ldr	r3, [pc, #16]	; (407668 <invalidate_style_cache+0x74>)
  407656:	4798      	blx	r3
  407658:	4604      	mov	r4, r0
    while(child) {
  40765a:	2c00      	cmp	r4, #0
  40765c:	d1f5      	bne.n	40764a <invalidate_style_cache+0x56>
  40765e:	bd38      	pop	{r3, r4, r5, pc}
  407660:	004051c5 	.word	0x004051c5
  407664:	00405a1d 	.word	0x00405a1d
  407668:	00405891 	.word	0x00405891
  40766c:	004074e5 	.word	0x004074e5

00407670 <lv_obj_refresh_style>:
{
  407670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407672:	4605      	mov	r5, r0
  407674:	460f      	mov	r7, r1
  407676:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407678:	4b37      	ldr	r3, [pc, #220]	; (407758 <lv_obj_refresh_style+0xe8>)
  40767a:	4798      	blx	r3
  40767c:	b928      	cbnz	r0, 40768a <lv_obj_refresh_style+0x1a>
  40767e:	462a      	mov	r2, r5
  407680:	2300      	movs	r3, #0
  407682:	4836      	ldr	r0, [pc, #216]	; (40775c <lv_obj_refresh_style+0xec>)
  407684:	4936      	ldr	r1, [pc, #216]	; (407760 <lv_obj_refresh_style+0xf0>)
  407686:	4788      	blx	r1
  407688:	e7fe      	b.n	407688 <lv_obj_refresh_style+0x18>
  40768a:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  40768c:	4622      	mov	r2, r4
  40768e:	4639      	mov	r1, r7
  407690:	4628      	mov	r0, r5
  407692:	4b34      	ldr	r3, [pc, #208]	; (407764 <lv_obj_refresh_style+0xf4>)
  407694:	4798      	blx	r3
    switch(prop) {
  407696:	2c71      	cmp	r4, #113	; 0x71
  407698:	d83c      	bhi.n	407714 <lv_obj_refresh_style+0xa4>
  40769a:	2c70      	cmp	r4, #112	; 0x70
  40769c:	d20c      	bcs.n	4076b8 <lv_obj_refresh_style+0x48>
  40769e:	2c41      	cmp	r4, #65	; 0x41
  4076a0:	d82e      	bhi.n	407700 <lv_obj_refresh_style+0x90>
  4076a2:	2c40      	cmp	r4, #64	; 0x40
  4076a4:	d208      	bcs.n	4076b8 <lv_obj_refresh_style+0x48>
  4076a6:	2c02      	cmp	r4, #2
  4076a8:	d305      	bcc.n	4076b6 <lv_obj_refresh_style+0x46>
  4076aa:	2c07      	cmp	r4, #7
  4076ac:	d904      	bls.n	4076b8 <lv_obj_refresh_style+0x48>
  4076ae:	f1a4 0310 	sub.w	r3, r4, #16
  4076b2:	2b08      	cmp	r3, #8
  4076b4:	d900      	bls.n	4076b8 <lv_obj_refresh_style+0x48>
            real_refr = false;
  4076b6:	2600      	movs	r6, #0
    if(real_refr) {
  4076b8:	2e00      	cmp	r6, #0
  4076ba:	d048      	beq.n	40774e <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  4076bc:	4628      	mov	r0, r5
  4076be:	4b2a      	ldr	r3, [pc, #168]	; (407768 <lv_obj_refresh_style+0xf8>)
  4076c0:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  4076c2:	69eb      	ldr	r3, [r5, #28]
  4076c4:	2200      	movs	r2, #0
  4076c6:	2104      	movs	r1, #4
  4076c8:	4628      	mov	r0, r5
  4076ca:	4798      	blx	r3
        switch(prop) {
  4076cc:	2c15      	cmp	r4, #21
  4076ce:	d309      	bcc.n	4076e4 <lv_obj_refresh_style+0x74>
  4076d0:	2c18      	cmp	r4, #24
  4076d2:	d901      	bls.n	4076d8 <lv_obj_refresh_style+0x68>
  4076d4:	2cff      	cmp	r4, #255	; 0xff
  4076d6:	d105      	bne.n	4076e4 <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  4076d8:	6828      	ldr	r0, [r5, #0]
  4076da:	b118      	cbz	r0, 4076e4 <lv_obj_refresh_style+0x74>
  4076dc:	69c3      	ldr	r3, [r0, #28]
  4076de:	2200      	movs	r2, #0
  4076e0:	2101      	movs	r1, #1
  4076e2:	4798      	blx	r3
        lv_obj_invalidate(obj);
  4076e4:	4628      	mov	r0, r5
  4076e6:	4b20      	ldr	r3, [pc, #128]	; (407768 <lv_obj_refresh_style+0xf8>)
  4076e8:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  4076ea:	0be3      	lsrs	r3, r4, #15
  4076ec:	2cff      	cmp	r4, #255	; 0xff
  4076ee:	bf14      	ite	ne
  4076f0:	461c      	movne	r4, r3
  4076f2:	f043 0401 	orreq.w	r4, r3, #1
  4076f6:	b36c      	cbz	r4, 407754 <lv_obj_refresh_style+0xe4>
  4076f8:	4628      	mov	r0, r5
  4076fa:	4b1c      	ldr	r3, [pc, #112]	; (40776c <lv_obj_refresh_style+0xfc>)
  4076fc:	4798      	blx	r3
  4076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  407700:	2c53      	cmp	r4, #83	; 0x53
  407702:	d804      	bhi.n	40770e <lv_obj_refresh_style+0x9e>
  407704:	2c50      	cmp	r4, #80	; 0x50
  407706:	d2d7      	bcs.n	4076b8 <lv_obj_refresh_style+0x48>
  407708:	2c4c      	cmp	r4, #76	; 0x4c
  40770a:	d1d4      	bne.n	4076b6 <lv_obj_refresh_style+0x46>
  40770c:	e7d4      	b.n	4076b8 <lv_obj_refresh_style+0x48>
  40770e:	2c5c      	cmp	r4, #92	; 0x5c
  407710:	d1d1      	bne.n	4076b6 <lv_obj_refresh_style+0x46>
  407712:	e7d1      	b.n	4076b8 <lv_obj_refresh_style+0x48>
  407714:	2c7f      	cmp	r4, #127	; 0x7f
  407716:	d90c      	bls.n	407732 <lv_obj_refresh_style+0xc2>
  407718:	f248 0381 	movw	r3, #32897	; 0x8081
  40771c:	429c      	cmp	r4, r3
  40771e:	d811      	bhi.n	407744 <lv_obj_refresh_style+0xd4>
  407720:	f248 0380 	movw	r3, #32896	; 0x8080
  407724:	429c      	cmp	r4, r3
  407726:	d2c7      	bcs.n	4076b8 <lv_obj_refresh_style+0x48>
  407728:	2c90      	cmp	r4, #144	; 0x90
  40772a:	d0c5      	beq.n	4076b8 <lv_obj_refresh_style+0x48>
  40772c:	2cff      	cmp	r4, #255	; 0xff
  40772e:	d1c2      	bne.n	4076b6 <lv_obj_refresh_style+0x46>
  407730:	e7c2      	b.n	4076b8 <lv_obj_refresh_style+0x48>
  407732:	2c7e      	cmp	r4, #126	; 0x7e
  407734:	d2c0      	bcs.n	4076b8 <lv_obj_refresh_style+0x48>
  407736:	2c73      	cmp	r4, #115	; 0x73
  407738:	d3bd      	bcc.n	4076b6 <lv_obj_refresh_style+0x46>
  40773a:	2c75      	cmp	r4, #117	; 0x75
  40773c:	d9bc      	bls.n	4076b8 <lv_obj_refresh_style+0x48>
  40773e:	2c7c      	cmp	r4, #124	; 0x7c
  407740:	d1b9      	bne.n	4076b6 <lv_obj_refresh_style+0x46>
  407742:	e7b9      	b.n	4076b8 <lv_obj_refresh_style+0x48>
  407744:	f248 038e 	movw	r3, #32910	; 0x808e
  407748:	429c      	cmp	r4, r3
  40774a:	d1b4      	bne.n	4076b6 <lv_obj_refresh_style+0x46>
  40774c:	e7b4      	b.n	4076b8 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  40774e:	4628      	mov	r0, r5
  407750:	4b05      	ldr	r3, [pc, #20]	; (407768 <lv_obj_refresh_style+0xf8>)
  407752:	4798      	blx	r3
  407754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407756:	bf00      	nop
  407758:	00415a81 	.word	0x00415a81
  40775c:	00428ca8 	.word	0x00428ca8
  407760:	00415a8d 	.word	0x00415a8d
  407764:	004075f5 	.word	0x004075f5
  407768:	00405d69 	.word	0x00405d69
  40776c:	004064ed 	.word	0x004064ed

00407770 <lv_obj_reset_style_list>:
{
  407770:	b538      	push	{r3, r4, r5, lr}
  407772:	4604      	mov	r4, r0
  407774:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  407776:	4b04      	ldr	r3, [pc, #16]	; (407788 <lv_obj_reset_style_list+0x18>)
  407778:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  40777a:	22ff      	movs	r2, #255	; 0xff
  40777c:	4629      	mov	r1, r5
  40777e:	4620      	mov	r0, r4
  407780:	4b02      	ldr	r3, [pc, #8]	; (40778c <lv_obj_reset_style_list+0x1c>)
  407782:	4798      	blx	r3
  407784:	bd38      	pop	{r3, r4, r5, pc}
  407786:	bf00      	nop
  407788:	00405ae5 	.word	0x00405ae5
  40778c:	00407671 	.word	0x00407671

00407790 <_lv_obj_set_style_local_int>:
{
  407790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407792:	4605      	mov	r5, r0
  407794:	460e      	mov	r6, r1
  407796:	4614      	mov	r4, r2
  407798:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  40779a:	4b09      	ldr	r3, [pc, #36]	; (4077c0 <_lv_obj_set_style_local_int+0x30>)
  40779c:	4798      	blx	r3
    _lv_style_list_set_local_int(style_dsc, prop, value);
  40779e:	463a      	mov	r2, r7
  4077a0:	4621      	mov	r1, r4
  4077a2:	4b08      	ldr	r3, [pc, #32]	; (4077c4 <_lv_obj_set_style_local_int+0x34>)
  4077a4:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  4077a6:	2300      	movs	r3, #0
  4077a8:	4622      	mov	r2, r4
  4077aa:	4631      	mov	r1, r6
  4077ac:	4628      	mov	r0, r5
  4077ae:	4f06      	ldr	r7, [pc, #24]	; (4077c8 <_lv_obj_set_style_local_int+0x38>)
  4077b0:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  4077b2:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4077b6:	4631      	mov	r1, r6
  4077b8:	4628      	mov	r0, r5
  4077ba:	4b04      	ldr	r3, [pc, #16]	; (4077cc <_lv_obj_set_style_local_int+0x3c>)
  4077bc:	4798      	blx	r3
  4077be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4077c0:	00405a1d 	.word	0x00405a1d
  4077c4:	0040abd5 	.word	0x0040abd5
  4077c8:	00405a4d 	.word	0x00405a4d
  4077cc:	00407671 	.word	0x00407671

004077d0 <_lv_obj_set_style_local_color>:
{
  4077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4077d2:	4605      	mov	r5, r0
  4077d4:	460e      	mov	r6, r1
  4077d6:	4614      	mov	r4, r2
  4077d8:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4077da:	4b09      	ldr	r3, [pc, #36]	; (407800 <_lv_obj_set_style_local_color+0x30>)
  4077dc:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  4077de:	463a      	mov	r2, r7
  4077e0:	4621      	mov	r1, r4
  4077e2:	4b08      	ldr	r3, [pc, #32]	; (407804 <_lv_obj_set_style_local_color+0x34>)
  4077e4:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  4077e6:	2300      	movs	r3, #0
  4077e8:	4622      	mov	r2, r4
  4077ea:	4631      	mov	r1, r6
  4077ec:	4628      	mov	r0, r5
  4077ee:	4f06      	ldr	r7, [pc, #24]	; (407808 <_lv_obj_set_style_local_color+0x38>)
  4077f0:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  4077f2:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4077f6:	4631      	mov	r1, r6
  4077f8:	4628      	mov	r0, r5
  4077fa:	4b04      	ldr	r3, [pc, #16]	; (40780c <_lv_obj_set_style_local_color+0x3c>)
  4077fc:	4798      	blx	r3
  4077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407800:	00405a1d 	.word	0x00405a1d
  407804:	0040abf1 	.word	0x0040abf1
  407808:	00405a4d 	.word	0x00405a4d
  40780c:	00407671 	.word	0x00407671

00407810 <report_style_mod_core>:
{
  407810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407812:	4604      	mov	r4, r0
  407814:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407816:	2500      	movs	r5, #0
  407818:	e028      	b.n	40786c <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  40781a:	1c59      	adds	r1, r3, #1
  40781c:	b2c9      	uxtb	r1, r1
  40781e:	e012      	b.n	407846 <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407820:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  407822:	2c00      	cmp	r4, #0
  407824:	bf18      	it	ne
  407826:	4294      	cmpne	r4, r2
  407828:	d019      	beq.n	40785e <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  40782a:	3301      	adds	r3, #1
  40782c:	b2db      	uxtb	r3, r3
  40782e:	793a      	ldrb	r2, [r7, #4]
  407830:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  407834:	4293      	cmp	r3, r2
  407836:	da17      	bge.n	407868 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  407838:	88b9      	ldrh	r1, [r7, #4]
  40783a:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  40783e:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  407842:	d0ea      	beq.n	40781a <report_style_mod_core+0xa>
  407844:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407846:	7938      	ldrb	r0, [r7, #4]
  407848:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  40784c:	d0e8      	beq.n	407820 <report_style_mod_core+0x10>
  40784e:	428a      	cmp	r2, r1
  407850:	dd03      	ble.n	40785a <report_style_mod_core+0x4a>
    return list->style_list[id];
  407852:	683a      	ldr	r2, [r7, #0]
  407854:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  407858:	e7e3      	b.n	407822 <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40785a:	2200      	movs	r2, #0
  40785c:	e7e1      	b.n	407822 <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  40785e:	22ff      	movs	r2, #255	; 0xff
  407860:	4629      	mov	r1, r5
  407862:	4630      	mov	r0, r6
  407864:	4b0f      	ldr	r3, [pc, #60]	; (4078a4 <report_style_mod_core+0x94>)
  407866:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407868:	3501      	adds	r5, #1
  40786a:	b2ed      	uxtb	r5, r5
  40786c:	2d40      	cmp	r5, #64	; 0x40
  40786e:	d007      	beq.n	407880 <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407870:	4629      	mov	r1, r5
  407872:	4630      	mov	r0, r6
  407874:	4b0c      	ldr	r3, [pc, #48]	; (4078a8 <report_style_mod_core+0x98>)
  407876:	4798      	blx	r3
        if(list == NULL) break;
  407878:	4607      	mov	r7, r0
  40787a:	b108      	cbz	r0, 407880 <report_style_mod_core+0x70>
  40787c:	2300      	movs	r3, #0
  40787e:	e7d6      	b.n	40782e <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407880:	2100      	movs	r1, #0
  407882:	4630      	mov	r0, r6
  407884:	4b09      	ldr	r3, [pc, #36]	; (4078ac <report_style_mod_core+0x9c>)
  407886:	4798      	blx	r3
  407888:	4605      	mov	r5, r0
    while(child) {
  40788a:	e008      	b.n	40789e <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  40788c:	4629      	mov	r1, r5
  40788e:	4620      	mov	r0, r4
  407890:	f7ff ffbe 	bl	407810 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  407894:	4629      	mov	r1, r5
  407896:	4630      	mov	r0, r6
  407898:	4b04      	ldr	r3, [pc, #16]	; (4078ac <report_style_mod_core+0x9c>)
  40789a:	4798      	blx	r3
  40789c:	4605      	mov	r5, r0
    while(child) {
  40789e:	2d00      	cmp	r5, #0
  4078a0:	d1f4      	bne.n	40788c <report_style_mod_core+0x7c>
}
  4078a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4078a4:	00407671 	.word	0x00407671
  4078a8:	00405a1d 	.word	0x00405a1d
  4078ac:	00405891 	.word	0x00405891

004078b0 <lv_obj_report_style_mod>:
{
  4078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4078b2:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  4078b4:	2000      	movs	r0, #0
  4078b6:	4b0e      	ldr	r3, [pc, #56]	; (4078f0 <lv_obj_report_style_mod+0x40>)
  4078b8:	4798      	blx	r3
  4078ba:	4607      	mov	r7, r0
    while(d) {
  4078bc:	e00e      	b.n	4078dc <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  4078be:	4621      	mov	r1, r4
  4078c0:	4630      	mov	r0, r6
  4078c2:	4b0c      	ldr	r3, [pc, #48]	; (4078f4 <lv_obj_report_style_mod+0x44>)
  4078c4:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  4078c6:	4621      	mov	r1, r4
  4078c8:	4628      	mov	r0, r5
  4078ca:	4b0b      	ldr	r3, [pc, #44]	; (4078f8 <lv_obj_report_style_mod+0x48>)
  4078cc:	4798      	blx	r3
  4078ce:	4604      	mov	r4, r0
  4078d0:	2c00      	cmp	r4, #0
  4078d2:	d1f4      	bne.n	4078be <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  4078d4:	4638      	mov	r0, r7
  4078d6:	4b06      	ldr	r3, [pc, #24]	; (4078f0 <lv_obj_report_style_mod+0x40>)
  4078d8:	4798      	blx	r3
  4078da:	4607      	mov	r7, r0
    while(d) {
  4078dc:	b137      	cbz	r7, 4078ec <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  4078de:	f107 0538 	add.w	r5, r7, #56	; 0x38
  4078e2:	4628      	mov	r0, r5
  4078e4:	4b05      	ldr	r3, [pc, #20]	; (4078fc <lv_obj_report_style_mod+0x4c>)
  4078e6:	4798      	blx	r3
  4078e8:	4604      	mov	r4, r0
  4078ea:	e7f1      	b.n	4078d0 <lv_obj_report_style_mod+0x20>
}
  4078ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4078ee:	bf00      	nop
  4078f0:	004149d9 	.word	0x004149d9
  4078f4:	00407811 	.word	0x00407811
  4078f8:	00415da5 	.word	0x00415da5
  4078fc:	00415d91 	.word	0x00415d91

00407900 <trans_anim_cb>:
{
  407900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407904:	4604      	mov	r4, r0
  407906:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407908:	7981      	ldrb	r1, [r0, #6]
  40790a:	6800      	ldr	r0, [r0, #0]
  40790c:	4b4b      	ldr	r3, [pc, #300]	; (407a3c <trans_anim_cb+0x13c>)
  40790e:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  407910:	4b4b      	ldr	r3, [pc, #300]	; (407a40 <trans_anim_cb+0x140>)
  407912:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407914:	88a1      	ldrh	r1, [r4, #4]
  407916:	f001 030f 	and.w	r3, r1, #15
  40791a:	2b08      	cmp	r3, #8
  40791c:	dc1c      	bgt.n	407958 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  40791e:	b955      	cbnz	r5, 407936 <trans_anim_cb+0x36>
  407920:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  407924:	4b47      	ldr	r3, [pc, #284]	; (407a44 <trans_anim_cb+0x144>)
  407926:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407928:	88a2      	ldrh	r2, [r4, #4]
  40792a:	79a1      	ldrb	r1, [r4, #6]
  40792c:	6820      	ldr	r0, [r4, #0]
  40792e:	4b46      	ldr	r3, [pc, #280]	; (407a48 <trans_anim_cb+0x148>)
  407930:	4798      	blx	r3
  407932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  407936:	2dff      	cmp	r5, #255	; 0xff
  407938:	d00b      	beq.n	407952 <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  40793a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  40793e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407942:	1a9b      	subs	r3, r3, r2
  407944:	fb03 f505 	mul.w	r5, r3, r5
  407948:	122d      	asrs	r5, r5, #8
  40794a:	fa15 f282 	uxtah	r2, r5, r2
  40794e:	b212      	sxth	r2, r2
  407950:	e7e8      	b.n	407924 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  407952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407956:	e7e5      	b.n	407924 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407958:	2b0b      	cmp	r3, #11
  40795a:	dc50      	bgt.n	4079fe <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  40795c:	2d00      	cmp	r5, #0
  40795e:	dd05      	ble.n	40796c <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  407960:	2dfe      	cmp	r5, #254	; 0xfe
  407962:	dd05      	ble.n	407970 <trans_anim_cb+0x70>
  407964:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  407966:	4b39      	ldr	r3, [pc, #228]	; (407a4c <trans_anim_cb+0x14c>)
  407968:	4798      	blx	r3
  40796a:	e7dd      	b.n	407928 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  40796c:	8922      	ldrh	r2, [r4, #8]
  40796e:	e7fa      	b.n	407966 <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  407970:	b2ed      	uxtb	r5, r5
  407972:	89a7      	ldrh	r7, [r4, #12]
  407974:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  407976:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  40797a:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  40797e:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  407982:	fb0e f202 	mul.w	r2, lr, r2
  407986:	fb05 2303 	mla	r3, r5, r3, r2
  40798a:	3380      	adds	r3, #128	; 0x80
  40798c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  407990:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  407994:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  407998:	f04f 0200 	mov.w	r2, #0
  40799c:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4079a0:	f007 0c07 	and.w	ip, r7, #7
  4079a4:	f3c7 3342 	ubfx	r3, r7, #13, #3
  4079a8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4079ac:	f006 0807 	and.w	r8, r6, #7
  4079b0:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  4079b4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  4079b8:	fb0c fc0e 	mul.w	ip, ip, lr
  4079bc:	fb03 c305 	mla	r3, r3, r5, ip
  4079c0:	3380      	adds	r3, #128	; 0x80
  4079c2:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  4079c6:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  4079ca:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  4079ce:	f36c 0202 	bfi	r2, ip, #0, #3
  4079d2:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  4079d6:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4079da:	f3c7 2704 	ubfx	r7, r7, #8, #5
  4079de:	f3c6 2604 	ubfx	r6, r6, #8, #5
  4079e2:	fb06 fe0e 	mul.w	lr, r6, lr
  4079e6:	fb07 e505 	mla	r5, r7, r5, lr
  4079ea:	3580      	adds	r5, #128	; 0x80
  4079ec:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  4079f0:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  4079f4:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  4079f8:	f365 220c 	bfi	r2, r5, #8, #5
  4079fc:	e7b3      	b.n	407966 <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  4079fe:	2b0d      	cmp	r3, #13
  407a00:	dc13      	bgt.n	407a2a <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  407a02:	2d00      	cmp	r5, #0
  407a04:	dd05      	ble.n	407a12 <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  407a06:	2dfe      	cmp	r5, #254	; 0xfe
  407a08:	dd05      	ble.n	407a16 <trans_anim_cb+0x116>
  407a0a:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407a0c:	4b10      	ldr	r3, [pc, #64]	; (407a50 <trans_anim_cb+0x150>)
  407a0e:	4798      	blx	r3
  407a10:	e78a      	b.n	407928 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  407a12:	7a22      	ldrb	r2, [r4, #8]
  407a14:	e7fa      	b.n	407a0c <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407a16:	7a22      	ldrb	r2, [r4, #8]
  407a18:	7b23      	ldrb	r3, [r4, #12]
  407a1a:	1a9b      	subs	r3, r3, r2
  407a1c:	fb03 f505 	mul.w	r5, r3, r5
  407a20:	f3c5 2507 	ubfx	r5, r5, #8, #8
  407a24:	442a      	add	r2, r5
  407a26:	b2d2      	uxtb	r2, r2
  407a28:	e7f0      	b.n	407a0c <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  407a2a:	2d7f      	cmp	r5, #127	; 0x7f
  407a2c:	dc03      	bgt.n	407a36 <trans_anim_cb+0x136>
  407a2e:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  407a30:	4b08      	ldr	r3, [pc, #32]	; (407a54 <trans_anim_cb+0x154>)
  407a32:	4798      	blx	r3
  407a34:	e778      	b.n	407928 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  407a36:	68e2      	ldr	r2, [r4, #12]
  407a38:	e7fa      	b.n	407a30 <trans_anim_cb+0x130>
  407a3a:	bf00      	nop
  407a3c:	00405a1d 	.word	0x00405a1d
  407a40:	0040a9bd 	.word	0x0040a9bd
  407a44:	00409f49 	.word	0x00409f49
  407a48:	00407671 	.word	0x00407671
  407a4c:	0040a0d9 	.word	0x0040a0d9
  407a50:	0040a269 	.word	0x0040a269
  407a54:	0040a3f9 	.word	0x0040a3f9

00407a58 <trans_anim_start_cb>:
{
  407a58:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  407a5a:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  407a5c:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407a5e:	f005 030f 	and.w	r3, r5, #15
  407a62:	2b08      	cmp	r3, #8
  407a64:	dd13      	ble.n	407a8e <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407a66:	2b0b      	cmp	r3, #11
  407a68:	dd18      	ble.n	407a9c <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407a6a:	2b0d      	cmp	r3, #13
  407a6c:	dd1d      	ble.n	407aaa <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  407a6e:	462a      	mov	r2, r5
  407a70:	79a1      	ldrb	r1, [r4, #6]
  407a72:	6820      	ldr	r0, [r4, #0]
  407a74:	4b10      	ldr	r3, [pc, #64]	; (407ab8 <trans_anim_start_cb+0x60>)
  407a76:	4798      	blx	r3
  407a78:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  407a7a:	2300      	movs	r3, #0
  407a7c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  407a7e:	4623      	mov	r3, r4
  407a80:	462a      	mov	r2, r5
  407a82:	79a1      	ldrb	r1, [r4, #6]
  407a84:	6820      	ldr	r0, [r4, #0]
  407a86:	4e0d      	ldr	r6, [pc, #52]	; (407abc <trans_anim_start_cb+0x64>)
  407a88:	47b0      	blx	r6
    tr->prop = prop_tmp;
  407a8a:	80a5      	strh	r5, [r4, #4]
  407a8c:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  407a8e:	462a      	mov	r2, r5
  407a90:	79a1      	ldrb	r1, [r4, #6]
  407a92:	6820      	ldr	r0, [r4, #0]
  407a94:	4b0a      	ldr	r3, [pc, #40]	; (407ac0 <trans_anim_start_cb+0x68>)
  407a96:	4798      	blx	r3
  407a98:	8120      	strh	r0, [r4, #8]
  407a9a:	e7ee      	b.n	407a7a <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  407a9c:	462a      	mov	r2, r5
  407a9e:	79a1      	ldrb	r1, [r4, #6]
  407aa0:	6820      	ldr	r0, [r4, #0]
  407aa2:	4b08      	ldr	r3, [pc, #32]	; (407ac4 <trans_anim_start_cb+0x6c>)
  407aa4:	4798      	blx	r3
  407aa6:	8120      	strh	r0, [r4, #8]
  407aa8:	e7e7      	b.n	407a7a <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  407aaa:	462a      	mov	r2, r5
  407aac:	79a1      	ldrb	r1, [r4, #6]
  407aae:	6820      	ldr	r0, [r4, #0]
  407ab0:	4b05      	ldr	r3, [pc, #20]	; (407ac8 <trans_anim_start_cb+0x70>)
  407ab2:	4798      	blx	r3
  407ab4:	7220      	strb	r0, [r4, #8]
  407ab6:	e7e0      	b.n	407a7a <trans_anim_start_cb+0x22>
  407ab8:	0040714d 	.word	0x0040714d
  407abc:	00405a4d 	.word	0x00405a4d
  407ac0:	00407255 	.word	0x00407255
  407ac4:	00406c41 	.word	0x00406c41
  407ac8:	00406cc9 	.word	0x00406cc9

00407acc <trans_create>:
{
  407acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ad0:	b085      	sub	sp, #20
  407ad2:	4604      	mov	r4, r0
  407ad4:	460d      	mov	r5, r1
  407ad6:	4617      	mov	r7, r2
  407ad8:	4699      	mov	r9, r3
  407ada:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  407ade:	4611      	mov	r1, r2
  407ae0:	4bab      	ldr	r3, [pc, #684]	; (407d90 <trans_create+0x2c4>)
  407ae2:	4798      	blx	r3
  407ae4:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  407ae6:	4bab      	ldr	r3, [pc, #684]	; (407d94 <trans_create+0x2c8>)
  407ae8:	4798      	blx	r3
  407aea:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407aec:	f896 a005 	ldrb.w	sl, [r6, #5]
  407af0:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407af4:	f005 030f 	and.w	r3, r5, #15
  407af8:	2b08      	cmp	r3, #8
  407afa:	dd41      	ble.n	407b80 <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407afc:	2b0b      	cmp	r3, #11
  407afe:	f340 80b2 	ble.w	407c66 <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407b02:	2b0d      	cmp	r3, #13
  407b04:	f300 80fb 	bgt.w	407cfe <trans_create+0x232>
        style_list->skip_trans = 1;
  407b08:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407b0a:	f043 0309 	orr.w	r3, r3, #9
  407b0e:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407b10:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  407b14:	462a      	mov	r2, r5
  407b16:	4639      	mov	r1, r7
  407b18:	4620      	mov	r0, r4
  407b1a:	f8df b27c 	ldr.w	fp, [pc, #636]	; 407d98 <trans_create+0x2cc>
  407b1e:	47d8      	blx	fp
  407b20:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407b22:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  407b26:	462a      	mov	r2, r5
  407b28:	4639      	mov	r1, r7
  407b2a:	4620      	mov	r0, r4
  407b2c:	47d8      	blx	fp
  407b2e:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407b30:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407b32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407b36:	f36a 03c3 	bfi	r3, sl, #3, #1
  407b3a:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  407b3c:	9b01      	ldr	r3, [sp, #4]
  407b3e:	4283      	cmp	r3, r0
  407b40:	f000 8123 	beq.w	407d8a <trans_create+0x2be>
        obj->state = prev_state;
  407b44:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  407b48:	462a      	mov	r2, r5
  407b4a:	4639      	mov	r1, r7
  407b4c:	4620      	mov	r0, r4
  407b4e:	4b92      	ldr	r3, [pc, #584]	; (407d98 <trans_create+0x2cc>)
  407b50:	4798      	blx	r3
  407b52:	4606      	mov	r6, r0
        obj->state = new_state;
  407b54:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  407b58:	4602      	mov	r2, r0
  407b5a:	4629      	mov	r1, r5
  407b5c:	9800      	ldr	r0, [sp, #0]
  407b5e:	4b8f      	ldr	r3, [pc, #572]	; (407d9c <trans_create+0x2d0>)
  407b60:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407b62:	488f      	ldr	r0, [pc, #572]	; (407da0 <trans_create+0x2d4>)
  407b64:	4b8f      	ldr	r3, [pc, #572]	; (407da4 <trans_create+0x2d8>)
  407b66:	4798      	blx	r3
  407b68:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407b6a:	4b8f      	ldr	r3, [pc, #572]	; (407da8 <trans_create+0x2dc>)
  407b6c:	4798      	blx	r3
  407b6e:	2800      	cmp	r0, #0
  407b70:	f000 80bf 	beq.w	407cf2 <trans_create+0x226>
        if(tr == NULL) return NULL;
  407b74:	2c00      	cmp	r4, #0
  407b76:	d03d      	beq.n	407bf4 <trans_create+0x128>
        tr->start_value._opa = o1;
  407b78:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  407b7a:	f884 b00c 	strb.w	fp, [r4, #12]
  407b7e:	e039      	b.n	407bf4 <trans_create+0x128>
        style_list->skip_trans = 1;
  407b80:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407b82:	f043 0309 	orr.w	r3, r3, #9
  407b86:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407b88:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  407b8c:	462a      	mov	r2, r5
  407b8e:	4639      	mov	r1, r7
  407b90:	4620      	mov	r0, r4
  407b92:	f8df b218 	ldr.w	fp, [pc, #536]	; 407dac <trans_create+0x2e0>
  407b96:	47d8      	blx	fp
  407b98:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  407b9a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  407b9e:	462a      	mov	r2, r5
  407ba0:	4639      	mov	r1, r7
  407ba2:	4620      	mov	r0, r4
  407ba4:	47d8      	blx	fp
  407ba6:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407ba8:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407baa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407bae:	f36a 03c3 	bfi	r3, sl, #3, #1
  407bb2:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  407bb4:	9b01      	ldr	r3, [sp, #4]
  407bb6:	4283      	cmp	r3, r0
  407bb8:	f000 80e5 	beq.w	407d86 <trans_create+0x2ba>
        obj->state = prev_state;
  407bbc:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  407bc0:	462a      	mov	r2, r5
  407bc2:	4639      	mov	r1, r7
  407bc4:	4620      	mov	r0, r4
  407bc6:	4b79      	ldr	r3, [pc, #484]	; (407dac <trans_create+0x2e0>)
  407bc8:	4798      	blx	r3
  407bca:	4606      	mov	r6, r0
        obj->state = new_state;
  407bcc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  407bd0:	4602      	mov	r2, r0
  407bd2:	4629      	mov	r1, r5
  407bd4:	9800      	ldr	r0, [sp, #0]
  407bd6:	4b76      	ldr	r3, [pc, #472]	; (407db0 <trans_create+0x2e4>)
  407bd8:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407bda:	2d01      	cmp	r5, #1
  407bdc:	d00e      	beq.n	407bfc <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407bde:	4870      	ldr	r0, [pc, #448]	; (407da0 <trans_create+0x2d4>)
  407be0:	4b70      	ldr	r3, [pc, #448]	; (407da4 <trans_create+0x2d8>)
  407be2:	4798      	blx	r3
  407be4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407be6:	4b70      	ldr	r3, [pc, #448]	; (407da8 <trans_create+0x2dc>)
  407be8:	4798      	blx	r3
  407bea:	b3b0      	cbz	r0, 407c5a <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407bec:	b114      	cbz	r4, 407bf4 <trans_create+0x128>
        tr->start_value._int = int1;
  407bee:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  407bf0:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  407bf4:	4620      	mov	r0, r4
  407bf6:	b005      	add	sp, #20
  407bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407bfc:	f647 73ff 	movw	r3, #32767	; 0x7fff
  407c00:	459b      	cmp	fp, r3
  407c02:	bf18      	it	ne
  407c04:	429e      	cmpne	r6, r3
  407c06:	d1ea      	bne.n	407bde <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407c08:	4620      	mov	r0, r4
  407c0a:	4b6a      	ldr	r3, [pc, #424]	; (407db4 <trans_create+0x2e8>)
  407c0c:	4798      	blx	r3
  407c0e:	4605      	mov	r5, r0
  407c10:	2800      	cmp	r0, #0
  407c12:	da00      	bge.n	407c16 <trans_create+0x14a>
  407c14:	1c45      	adds	r5, r0, #1
  407c16:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407c1a:	4620      	mov	r0, r4
  407c1c:	4b65      	ldr	r3, [pc, #404]	; (407db4 <trans_create+0x2e8>)
  407c1e:	4798      	blx	r3
  407c20:	4603      	mov	r3, r0
  407c22:	2800      	cmp	r0, #0
  407c24:	da00      	bge.n	407c28 <trans_create+0x15c>
  407c26:	1c43      	adds	r3, r0, #1
  407c28:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407c2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407c30:	4296      	cmp	r6, r2
  407c32:	d105      	bne.n	407c40 <trans_create+0x174>
  407c34:	1c5e      	adds	r6, r3, #1
  407c36:	1c6a      	adds	r2, r5, #1
  407c38:	4296      	cmp	r6, r2
  407c3a:	bfa8      	it	ge
  407c3c:	4616      	movge	r6, r2
  407c3e:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407c40:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407c44:	4593      	cmp	fp, r2
  407c46:	d1ca      	bne.n	407bde <trans_create+0x112>
  407c48:	f103 0b01 	add.w	fp, r3, #1
  407c4c:	3501      	adds	r5, #1
  407c4e:	45ab      	cmp	fp, r5
  407c50:	bfa8      	it	ge
  407c52:	46ab      	movge	fp, r5
  407c54:	fa0f fb8b 	sxth.w	fp, fp
  407c58:	e7c1      	b.n	407bde <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  407c5a:	4622      	mov	r2, r4
  407c5c:	2300      	movs	r3, #0
  407c5e:	4856      	ldr	r0, [pc, #344]	; (407db8 <trans_create+0x2ec>)
  407c60:	4956      	ldr	r1, [pc, #344]	; (407dbc <trans_create+0x2f0>)
  407c62:	4788      	blx	r1
  407c64:	e7fe      	b.n	407c64 <trans_create+0x198>
        style_list->skip_trans = 1;
  407c66:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407c68:	f043 0309 	orr.w	r3, r3, #9
  407c6c:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407c6e:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  407c72:	462a      	mov	r2, r5
  407c74:	4639      	mov	r1, r7
  407c76:	4620      	mov	r0, r4
  407c78:	f8df b144 	ldr.w	fp, [pc, #324]	; 407dc0 <trans_create+0x2f4>
  407c7c:	47d8      	blx	fp
  407c7e:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407c82:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  407c86:	462a      	mov	r2, r5
  407c88:	4639      	mov	r1, r7
  407c8a:	4620      	mov	r0, r4
  407c8c:	47d8      	blx	fp
  407c8e:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407c90:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407c92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407c96:	f36a 03c3 	bfi	r3, sl, #3, #1
  407c9a:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  407c9c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  407ca0:	b283      	uxth	r3, r0
  407ca2:	429a      	cmp	r2, r3
  407ca4:	d023      	beq.n	407cee <trans_create+0x222>
        obj->state = prev_state;
  407ca6:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  407caa:	462a      	mov	r2, r5
  407cac:	4639      	mov	r1, r7
  407cae:	4620      	mov	r0, r4
  407cb0:	4b43      	ldr	r3, [pc, #268]	; (407dc0 <trans_create+0x2f4>)
  407cb2:	4798      	blx	r3
  407cb4:	4602      	mov	r2, r0
  407cb6:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407cba:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  407cbe:	4629      	mov	r1, r5
  407cc0:	9800      	ldr	r0, [sp, #0]
  407cc2:	4b40      	ldr	r3, [pc, #256]	; (407dc4 <trans_create+0x2f8>)
  407cc4:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407cc6:	4836      	ldr	r0, [pc, #216]	; (407da0 <trans_create+0x2d4>)
  407cc8:	4b36      	ldr	r3, [pc, #216]	; (407da4 <trans_create+0x2d8>)
  407cca:	4798      	blx	r3
  407ccc:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407cce:	4b36      	ldr	r3, [pc, #216]	; (407da8 <trans_create+0x2dc>)
  407cd0:	4798      	blx	r3
  407cd2:	b928      	cbnz	r0, 407ce0 <trans_create+0x214>
  407cd4:	4622      	mov	r2, r4
  407cd6:	2300      	movs	r3, #0
  407cd8:	4837      	ldr	r0, [pc, #220]	; (407db8 <trans_create+0x2ec>)
  407cda:	4938      	ldr	r1, [pc, #224]	; (407dbc <trans_create+0x2f0>)
  407cdc:	4788      	blx	r1
  407cde:	e7fe      	b.n	407cde <trans_create+0x212>
        if(tr == NULL) return NULL;
  407ce0:	b12c      	cbz	r4, 407cee <trans_create+0x222>
        tr->start_value._color = c1;
  407ce2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407ce6:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407ce8:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407cec:	e782      	b.n	407bf4 <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  407cee:	2400      	movs	r4, #0
  407cf0:	e780      	b.n	407bf4 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407cf2:	4622      	mov	r2, r4
  407cf4:	2300      	movs	r3, #0
  407cf6:	4830      	ldr	r0, [pc, #192]	; (407db8 <trans_create+0x2ec>)
  407cf8:	4930      	ldr	r1, [pc, #192]	; (407dbc <trans_create+0x2f0>)
  407cfa:	4788      	blx	r1
  407cfc:	e7fe      	b.n	407cfc <trans_create+0x230>
        obj->state = prev_state;
  407cfe:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  407d02:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407d04:	f043 0309 	orr.w	r3, r3, #9
  407d08:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407d0a:	462a      	mov	r2, r5
  407d0c:	4639      	mov	r1, r7
  407d0e:	4620      	mov	r0, r4
  407d10:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 407dd0 <trans_create+0x304>
  407d14:	47d8      	blx	fp
  407d16:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407d18:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  407d1c:	462a      	mov	r2, r5
  407d1e:	4639      	mov	r1, r7
  407d20:	4620      	mov	r0, r4
  407d22:	47d8      	blx	fp
  407d24:	a904      	add	r1, sp, #16
  407d26:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  407d2a:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407d2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407d30:	f36a 03c3 	bfi	r3, sl, #3, #1
  407d34:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407d36:	2204      	movs	r2, #4
  407d38:	a802      	add	r0, sp, #8
  407d3a:	4b23      	ldr	r3, [pc, #140]	; (407dc8 <trans_create+0x2fc>)
  407d3c:	4798      	blx	r3
  407d3e:	b300      	cbz	r0, 407d82 <trans_create+0x2b6>
        obj->state = prev_state;
  407d40:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407d44:	462a      	mov	r2, r5
  407d46:	4639      	mov	r1, r7
  407d48:	4620      	mov	r0, r4
  407d4a:	47d8      	blx	fp
  407d4c:	4602      	mov	r2, r0
  407d4e:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407d50:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  407d54:	4629      	mov	r1, r5
  407d56:	9800      	ldr	r0, [sp, #0]
  407d58:	4b1c      	ldr	r3, [pc, #112]	; (407dcc <trans_create+0x300>)
  407d5a:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407d5c:	4810      	ldr	r0, [pc, #64]	; (407da0 <trans_create+0x2d4>)
  407d5e:	4b11      	ldr	r3, [pc, #68]	; (407da4 <trans_create+0x2d8>)
  407d60:	4798      	blx	r3
  407d62:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407d64:	4b10      	ldr	r3, [pc, #64]	; (407da8 <trans_create+0x2dc>)
  407d66:	4798      	blx	r3
  407d68:	b128      	cbz	r0, 407d76 <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  407d6a:	b154      	cbz	r4, 407d82 <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  407d6c:	9b02      	ldr	r3, [sp, #8]
  407d6e:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  407d70:	9b03      	ldr	r3, [sp, #12]
  407d72:	60e3      	str	r3, [r4, #12]
  407d74:	e73e      	b.n	407bf4 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407d76:	4622      	mov	r2, r4
  407d78:	2300      	movs	r3, #0
  407d7a:	480f      	ldr	r0, [pc, #60]	; (407db8 <trans_create+0x2ec>)
  407d7c:	490f      	ldr	r1, [pc, #60]	; (407dbc <trans_create+0x2f0>)
  407d7e:	4788      	blx	r1
  407d80:	e7fe      	b.n	407d80 <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407d82:	2400      	movs	r4, #0
  407d84:	e736      	b.n	407bf4 <trans_create+0x128>
        if(int1 == int2)  return NULL;
  407d86:	2400      	movs	r4, #0
  407d88:	e734      	b.n	407bf4 <trans_create+0x128>
        if(o1 == o2) return NULL;
  407d8a:	2400      	movs	r4, #0
  407d8c:	e732      	b.n	407bf4 <trans_create+0x128>
  407d8e:	bf00      	nop
  407d90:	00405a1d 	.word	0x00405a1d
  407d94:	0040a9bd 	.word	0x0040a9bd
  407d98:	00406cc9 	.word	0x00406cc9
  407d9c:	0040a269 	.word	0x0040a269
  407da0:	2043a264 	.word	0x2043a264
  407da4:	00415cf9 	.word	0x00415cf9
  407da8:	00415a81 	.word	0x00415a81
  407dac:	00407255 	.word	0x00407255
  407db0:	00409f49 	.word	0x00409f49
  407db4:	00405991 	.word	0x00405991
  407db8:	00428c94 	.word	0x00428c94
  407dbc:	00415a8d 	.word	0x00415a8d
  407dc0:	00406c41 	.word	0x00406c41
  407dc4:	0040a0d9 	.word	0x0040a0d9
  407dc8:	0042336d 	.word	0x0042336d
  407dcc:	0040a3f9 	.word	0x0040a3f9
  407dd0:	0040714d 	.word	0x0040714d

00407dd4 <lv_obj_get_signal_cb>:
{
  407dd4:	b510      	push	{r4, lr}
  407dd6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407dd8:	4b05      	ldr	r3, [pc, #20]	; (407df0 <lv_obj_get_signal_cb+0x1c>)
  407dda:	4798      	blx	r3
  407ddc:	b108      	cbz	r0, 407de2 <lv_obj_get_signal_cb+0xe>
}
  407dde:	69e0      	ldr	r0, [r4, #28]
  407de0:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407de2:	4622      	mov	r2, r4
  407de4:	2300      	movs	r3, #0
  407de6:	4803      	ldr	r0, [pc, #12]	; (407df4 <lv_obj_get_signal_cb+0x20>)
  407de8:	4903      	ldr	r1, [pc, #12]	; (407df8 <lv_obj_get_signal_cb+0x24>)
  407dea:	4788      	blx	r1
  407dec:	e7fe      	b.n	407dec <lv_obj_get_signal_cb+0x18>
  407dee:	bf00      	nop
  407df0:	00415a81 	.word	0x00415a81
  407df4:	00428ca8 	.word	0x00428ca8
  407df8:	00415a8d 	.word	0x00415a8d

00407dfc <lv_obj_get_design_cb>:
{
  407dfc:	b510      	push	{r4, lr}
  407dfe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407e00:	4b05      	ldr	r3, [pc, #20]	; (407e18 <lv_obj_get_design_cb+0x1c>)
  407e02:	4798      	blx	r3
  407e04:	b108      	cbz	r0, 407e0a <lv_obj_get_design_cb+0xe>
}
  407e06:	6a20      	ldr	r0, [r4, #32]
  407e08:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407e0a:	4622      	mov	r2, r4
  407e0c:	2300      	movs	r3, #0
  407e0e:	4803      	ldr	r0, [pc, #12]	; (407e1c <lv_obj_get_design_cb+0x20>)
  407e10:	4903      	ldr	r1, [pc, #12]	; (407e20 <lv_obj_get_design_cb+0x24>)
  407e12:	4788      	blx	r1
  407e14:	e7fe      	b.n	407e14 <lv_obj_get_design_cb+0x18>
  407e16:	bf00      	nop
  407e18:	00415a81 	.word	0x00415a81
  407e1c:	00428ca8 	.word	0x00428ca8
  407e20:	00415a8d 	.word	0x00415a8d

00407e24 <lv_obj_get_ext_attr>:
{
  407e24:	b510      	push	{r4, lr}
  407e26:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407e28:	4b05      	ldr	r3, [pc, #20]	; (407e40 <lv_obj_get_ext_attr+0x1c>)
  407e2a:	4798      	blx	r3
  407e2c:	b108      	cbz	r0, 407e32 <lv_obj_get_ext_attr+0xe>
}
  407e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  407e30:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407e32:	4622      	mov	r2, r4
  407e34:	2300      	movs	r3, #0
  407e36:	4803      	ldr	r0, [pc, #12]	; (407e44 <lv_obj_get_ext_attr+0x20>)
  407e38:	4903      	ldr	r1, [pc, #12]	; (407e48 <lv_obj_get_ext_attr+0x24>)
  407e3a:	4788      	blx	r1
  407e3c:	e7fe      	b.n	407e3c <lv_obj_get_ext_attr+0x18>
  407e3e:	bf00      	nop
  407e40:	00415a81 	.word	0x00415a81
  407e44:	00428ca8 	.word	0x00428ca8
  407e48:	00415a8d 	.word	0x00415a8d

00407e4c <lv_obj_get_group>:
{
  407e4c:	b510      	push	{r4, lr}
  407e4e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407e50:	4b05      	ldr	r3, [pc, #20]	; (407e68 <lv_obj_get_group+0x1c>)
  407e52:	4798      	blx	r3
  407e54:	b108      	cbz	r0, 407e5a <lv_obj_get_group+0xe>
}
  407e56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  407e58:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407e5a:	4622      	mov	r2, r4
  407e5c:	2300      	movs	r3, #0
  407e5e:	4803      	ldr	r0, [pc, #12]	; (407e6c <lv_obj_get_group+0x20>)
  407e60:	4903      	ldr	r1, [pc, #12]	; (407e70 <lv_obj_get_group+0x24>)
  407e62:	4788      	blx	r1
  407e64:	e7fe      	b.n	407e64 <lv_obj_get_group+0x18>
  407e66:	bf00      	nop
  407e68:	00415a81 	.word	0x00415a81
  407e6c:	00428ca8 	.word	0x00428ca8
  407e70:	00415a8d 	.word	0x00415a8d

00407e74 <obj_del_core>:
{
  407e74:	b570      	push	{r4, r5, r6, lr}
  407e76:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  407e78:	2200      	movs	r2, #0
  407e7a:	2115      	movs	r1, #21
  407e7c:	4b33      	ldr	r3, [pc, #204]	; (407f4c <obj_del_core+0xd8>)
  407e7e:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  407e80:	4628      	mov	r0, r5
  407e82:	4b33      	ldr	r3, [pc, #204]	; (407f50 <obj_del_core+0xdc>)
  407e84:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  407e86:	4606      	mov	r6, r0
  407e88:	b110      	cbz	r0, 407e90 <obj_del_core+0x1c>
  407e8a:	4628      	mov	r0, r5
  407e8c:	4b31      	ldr	r3, [pc, #196]	; (407f54 <obj_del_core+0xe0>)
  407e8e:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  407e90:	2100      	movs	r1, #0
  407e92:	4628      	mov	r0, r5
  407e94:	4b30      	ldr	r3, [pc, #192]	; (407f58 <obj_del_core+0xe4>)
  407e96:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  407e98:	2300      	movs	r3, #0
  407e9a:	22ff      	movs	r2, #255	; 0xff
  407e9c:	4611      	mov	r1, r2
  407e9e:	4628      	mov	r0, r5
  407ea0:	4c2e      	ldr	r4, [pc, #184]	; (407f5c <obj_del_core+0xe8>)
  407ea2:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  407ea4:	1d2c      	adds	r4, r5, #4
  407ea6:	4620      	mov	r0, r4
  407ea8:	4b2d      	ldr	r3, [pc, #180]	; (407f60 <obj_del_core+0xec>)
  407eaa:	4798      	blx	r3
    while(i != NULL) {
  407eac:	e004      	b.n	407eb8 <obj_del_core+0x44>
        obj_del_core(i);
  407eae:	f7ff ffe1 	bl	407e74 <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  407eb2:	4620      	mov	r0, r4
  407eb4:	4b2a      	ldr	r3, [pc, #168]	; (407f60 <obj_del_core+0xec>)
  407eb6:	4798      	blx	r3
    while(i != NULL) {
  407eb8:	2800      	cmp	r0, #0
  407eba:	d1f8      	bne.n	407eae <obj_del_core+0x3a>
    lv_event_mark_deleted(obj);
  407ebc:	4628      	mov	r0, r5
  407ebe:	4b29      	ldr	r3, [pc, #164]	; (407f64 <obj_del_core+0xf0>)
  407ec0:	4798      	blx	r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
  407ec2:	2000      	movs	r0, #0
  407ec4:	4b28      	ldr	r3, [pc, #160]	; (407f68 <obj_del_core+0xf4>)
  407ec6:	4798      	blx	r3
  407ec8:	4604      	mov	r4, r0
    while(indev) {
  407eca:	e00d      	b.n	407ee8 <obj_del_core+0x74>
            lv_indev_reset(indev, obj);
  407ecc:	4629      	mov	r1, r5
  407ece:	4620      	mov	r0, r4
  407ed0:	4b26      	ldr	r3, [pc, #152]	; (407f6c <obj_del_core+0xf8>)
  407ed2:	4798      	blx	r3
        if(indev->proc.types.pointer.last_pressed == obj) {
  407ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  407ed6:	429d      	cmp	r5, r3
  407ed8:	d00e      	beq.n	407ef8 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
  407edc:	429e      	cmp	r6, r3
  407ede:	d00e      	beq.n	407efe <obj_del_core+0x8a>
        indev = lv_indev_get_next(indev);
  407ee0:	4620      	mov	r0, r4
  407ee2:	4b21      	ldr	r3, [pc, #132]	; (407f68 <obj_del_core+0xf4>)
  407ee4:	4798      	blx	r3
  407ee6:	4604      	mov	r4, r0
    while(indev) {
  407ee8:	b194      	cbz	r4, 407f10 <obj_del_core+0x9c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  407eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
  407eec:	429d      	cmp	r5, r3
  407eee:	d0ed      	beq.n	407ecc <obj_del_core+0x58>
  407ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  407ef2:	429d      	cmp	r5, r3
  407ef4:	d1ee      	bne.n	407ed4 <obj_del_core+0x60>
  407ef6:	e7e9      	b.n	407ecc <obj_del_core+0x58>
            indev->proc.types.pointer.last_pressed = NULL;
  407ef8:	2300      	movs	r3, #0
  407efa:	63e3      	str	r3, [r4, #60]	; 0x3c
  407efc:	e7ed      	b.n	407eda <obj_del_core+0x66>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407efe:	4b1c      	ldr	r3, [pc, #112]	; (407f70 <obj_del_core+0xfc>)
  407f00:	4798      	blx	r3
  407f02:	4285      	cmp	r5, r0
  407f04:	d1ec      	bne.n	407ee0 <obj_del_core+0x6c>
            lv_indev_reset(indev, obj);
  407f06:	4629      	mov	r1, r5
  407f08:	4620      	mov	r0, r4
  407f0a:	4b18      	ldr	r3, [pc, #96]	; (407f6c <obj_del_core+0xf8>)
  407f0c:	4798      	blx	r3
  407f0e:	e7e7      	b.n	407ee0 <obj_del_core+0x6c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  407f10:	69eb      	ldr	r3, [r5, #28]
  407f12:	2200      	movs	r2, #0
  407f14:	4611      	mov	r1, r2
  407f16:	4628      	mov	r0, r5
  407f18:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407f1a:	4628      	mov	r0, r5
  407f1c:	4b15      	ldr	r3, [pc, #84]	; (407f74 <obj_del_core+0x100>)
  407f1e:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  407f20:	b158      	cbz	r0, 407f3a <obj_del_core+0xc6>
        _lv_ll_remove(&(par->child_ll), obj);
  407f22:	4629      	mov	r1, r5
  407f24:	3004      	adds	r0, #4
  407f26:	4b14      	ldr	r3, [pc, #80]	; (407f78 <obj_del_core+0x104>)
  407f28:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  407f2a:	6a68      	ldr	r0, [r5, #36]	; 0x24
  407f2c:	b108      	cbz	r0, 407f32 <obj_del_core+0xbe>
  407f2e:	4b13      	ldr	r3, [pc, #76]	; (407f7c <obj_del_core+0x108>)
  407f30:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  407f32:	4628      	mov	r0, r5
  407f34:	4b11      	ldr	r3, [pc, #68]	; (407f7c <obj_del_core+0x108>)
  407f36:	4798      	blx	r3
  407f38:	bd70      	pop	{r4, r5, r6, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  407f3a:	4628      	mov	r0, r5
  407f3c:	4b10      	ldr	r3, [pc, #64]	; (407f80 <obj_del_core+0x10c>)
  407f3e:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  407f40:	4629      	mov	r1, r5
  407f42:	3038      	adds	r0, #56	; 0x38
  407f44:	4b0c      	ldr	r3, [pc, #48]	; (407f78 <obj_del_core+0x104>)
  407f46:	4798      	blx	r3
  407f48:	e7ef      	b.n	407f2a <obj_del_core+0xb6>
  407f4a:	bf00      	nop
  407f4c:	004056ad 	.word	0x004056ad
  407f50:	00407e4d 	.word	0x00407e4d
  407f54:	00403745 	.word	0x00403745
  407f58:	00414fe1 	.word	0x00414fe1
  407f5c:	00405a4d 	.word	0x00405a4d
  407f60:	00415d91 	.word	0x00415d91
  407f64:	004051a9 	.word	0x004051a9
  407f68:	00414c79 	.word	0x00414c79
  407f6c:	00404ac5 	.word	0x00404ac5
  407f70:	00404b71 	.word	0x00404b71
  407f74:	004057bd 	.word	0x004057bd
  407f78:	00415e4d 	.word	0x00415e4d
  407f7c:	0041624d 	.word	0x0041624d
  407f80:	0040581d 	.word	0x0040581d

00407f84 <lv_obj_del>:
{
  407f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f86:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407f88:	4b16      	ldr	r3, [pc, #88]	; (407fe4 <lv_obj_del+0x60>)
  407f8a:	4798      	blx	r3
  407f8c:	b928      	cbnz	r0, 407f9a <lv_obj_del+0x16>
  407f8e:	4622      	mov	r2, r4
  407f90:	2300      	movs	r3, #0
  407f92:	4815      	ldr	r0, [pc, #84]	; (407fe8 <lv_obj_del+0x64>)
  407f94:	4915      	ldr	r1, [pc, #84]	; (407fec <lv_obj_del+0x68>)
  407f96:	4788      	blx	r1
  407f98:	e7fe      	b.n	407f98 <lv_obj_del+0x14>
  407f9a:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
  407f9c:	4620      	mov	r0, r4
  407f9e:	4b14      	ldr	r3, [pc, #80]	; (407ff0 <lv_obj_del+0x6c>)
  407fa0:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407fa2:	4620      	mov	r0, r4
  407fa4:	4b13      	ldr	r3, [pc, #76]	; (407ff4 <lv_obj_del+0x70>)
  407fa6:	4798      	blx	r3
    if(par == NULL) {
  407fa8:	4607      	mov	r7, r0
  407faa:	b178      	cbz	r0, 407fcc <lv_obj_del+0x48>
    bool act_scr_del = false;
  407fac:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
  407fae:	462e      	mov	r6, r5
    obj_del_core(obj);
  407fb0:	4620      	mov	r0, r4
  407fb2:	4b11      	ldr	r3, [pc, #68]	; (407ff8 <lv_obj_del+0x74>)
  407fb4:	4798      	blx	r3
    if(par) {
  407fb6:	b127      	cbz	r7, 407fc2 <lv_obj_del+0x3e>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  407fb8:	69fb      	ldr	r3, [r7, #28]
  407fba:	2200      	movs	r2, #0
  407fbc:	2101      	movs	r1, #1
  407fbe:	4638      	mov	r0, r7
  407fc0:	4798      	blx	r3
    if(act_scr_del)  {
  407fc2:	b10d      	cbz	r5, 407fc8 <lv_obj_del+0x44>
        disp->act_scr = NULL;
  407fc4:	2300      	movs	r3, #0
  407fc6:	6473      	str	r3, [r6, #68]	; 0x44
}
  407fc8:	2000      	movs	r0, #0
  407fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
  407fcc:	4620      	mov	r0, r4
  407fce:	4b0b      	ldr	r3, [pc, #44]	; (407ffc <lv_obj_del+0x78>)
  407fd0:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  407fd2:	4606      	mov	r6, r0
  407fd4:	2800      	cmp	r0, #0
  407fd6:	d0f7      	beq.n	407fc8 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
  407fd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  407fda:	429c      	cmp	r4, r3
  407fdc:	d0e8      	beq.n	407fb0 <lv_obj_del+0x2c>
    bool act_scr_del = false;
  407fde:	2500      	movs	r5, #0
  407fe0:	e7e6      	b.n	407fb0 <lv_obj_del+0x2c>
  407fe2:	bf00      	nop
  407fe4:	00415a81 	.word	0x00415a81
  407fe8:	00428ca8 	.word	0x00428ca8
  407fec:	00415a8d 	.word	0x00415a8d
  407ff0:	00405d69 	.word	0x00405d69
  407ff4:	004057bd 	.word	0x004057bd
  407ff8:	00407e75 	.word	0x00407e75
  407ffc:	0040581d 	.word	0x0040581d

00408000 <lv_obj_is_focused>:
{
  408000:	b538      	push	{r3, r4, r5, lr}
  408002:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408004:	4b0a      	ldr	r3, [pc, #40]	; (408030 <lv_obj_is_focused+0x30>)
  408006:	4798      	blx	r3
  408008:	b148      	cbz	r0, 40801e <lv_obj_is_focused+0x1e>
  40800a:	4604      	mov	r4, r0
    if(obj->group_p) {
  40800c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  40800e:	b160      	cbz	r0, 40802a <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  408010:	4b08      	ldr	r3, [pc, #32]	; (408034 <lv_obj_is_focused+0x34>)
  408012:	4798      	blx	r3
  408014:	4285      	cmp	r5, r0
  408016:	d000      	beq.n	40801a <lv_obj_is_focused+0x1a>
    return false;
  408018:	2400      	movs	r4, #0
}
  40801a:	4620      	mov	r0, r4
  40801c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40801e:	462a      	mov	r2, r5
  408020:	2300      	movs	r3, #0
  408022:	4805      	ldr	r0, [pc, #20]	; (408038 <lv_obj_is_focused+0x38>)
  408024:	4905      	ldr	r1, [pc, #20]	; (40803c <lv_obj_is_focused+0x3c>)
  408026:	4788      	blx	r1
  408028:	e7fe      	b.n	408028 <lv_obj_is_focused+0x28>
    return false;
  40802a:	2400      	movs	r4, #0
  40802c:	e7f5      	b.n	40801a <lv_obj_is_focused+0x1a>
  40802e:	bf00      	nop
  408030:	00415a81 	.word	0x00415a81
  408034:	004037f1 	.word	0x004037f1
  408038:	00428ca8 	.word	0x00428ca8
  40803c:	00415a8d 	.word	0x00415a8d

00408040 <lv_obj_is_point_on_coords>:
{
  408040:	b500      	push	{lr}
  408042:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  408044:	8a02      	ldrh	r2, [r0, #16]
  408046:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  40804a:	1ad2      	subs	r2, r2, r3
  40804c:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  408050:	8a82      	ldrh	r2, [r0, #20]
  408052:	4413      	add	r3, r2
  408054:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  408058:	8a42      	ldrh	r2, [r0, #18]
  40805a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  40805e:	1ad2      	subs	r2, r2, r3
  408060:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  408064:	8ac2      	ldrh	r2, [r0, #22]
  408066:	4413      	add	r3, r2
  408068:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  40806c:	2200      	movs	r2, #0
  40806e:	4668      	mov	r0, sp
  408070:	4b02      	ldr	r3, [pc, #8]	; (40807c <lv_obj_is_point_on_coords+0x3c>)
  408072:	4798      	blx	r3
}
  408074:	b003      	add	sp, #12
  408076:	f85d fb04 	ldr.w	pc, [sp], #4
  40807a:	bf00      	nop
  40807c:	0041525d 	.word	0x0041525d

00408080 <lv_obj_hittest>:
{
  408080:	b500      	push	{lr}
  408082:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  408084:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  408088:	2b00      	cmp	r3, #0
  40808a:	db04      	blt.n	408096 <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  40808c:	4b07      	ldr	r3, [pc, #28]	; (4080ac <lv_obj_hittest+0x2c>)
  40808e:	4798      	blx	r3
}
  408090:	b003      	add	sp, #12
  408092:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  408096:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  408098:	2301      	movs	r3, #1
  40809a:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  40809e:	69c3      	ldr	r3, [r0, #28]
  4080a0:	466a      	mov	r2, sp
  4080a2:	210a      	movs	r1, #10
  4080a4:	4798      	blx	r3
        return hit_info.result;
  4080a6:	f89d 0004 	ldrb.w	r0, [sp, #4]
  4080aa:	e7f1      	b.n	408090 <lv_obj_hittest+0x10>
  4080ac:	00408041 	.word	0x00408041

004080b0 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  4080b0:	2300      	movs	r3, #0
  4080b2:	2b06      	cmp	r3, #6
  4080b4:	d805      	bhi.n	4080c2 <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  4080b6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  4080ba:	b112      	cbz	r2, 4080c2 <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  4080bc:	3301      	adds	r3, #1
  4080be:	b2db      	uxtb	r3, r3
  4080c0:	e7f7      	b.n	4080b2 <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  4080c2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  4080c6:	2001      	movs	r0, #1
  4080c8:	4770      	bx	lr
	...

004080cc <lv_obj_init_draw_rect_dsc>:
{
  4080cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4080d0:	4605      	mov	r5, r0
  4080d2:	460e      	mov	r6, r1
  4080d4:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4080d6:	2201      	movs	r2, #1
  4080d8:	4ba9      	ldr	r3, [pc, #676]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4080da:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  4080dc:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4080de:	f248 020c 	movw	r2, #32780	; 0x800c
  4080e2:	4631      	mov	r1, r6
  4080e4:	4628      	mov	r0, r5
  4080e6:	4ba7      	ldr	r3, [pc, #668]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4080e8:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  4080ea:	2802      	cmp	r0, #2
  4080ec:	d966      	bls.n	4081bc <lv_obj_init_draw_rect_dsc+0xf0>
  4080ee:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  4080f0:	7b23      	ldrb	r3, [r4, #12]
  4080f2:	2b00      	cmp	r3, #0
  4080f4:	d16d      	bne.n	4081d2 <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4080f6:	2230      	movs	r2, #48	; 0x30
  4080f8:	4631      	mov	r1, r6
  4080fa:	4628      	mov	r0, r5
  4080fc:	4ba0      	ldr	r3, [pc, #640]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4080fe:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  408100:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  408102:	b118      	cbz	r0, 40810c <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  408104:	7d23      	ldrb	r3, [r4, #20]
  408106:	2b00      	cmp	r3, #0
  408108:	f040 8093 	bne.w	408232 <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  40810c:	2240      	movs	r2, #64	; 0x40
  40810e:	4631      	mov	r1, r6
  408110:	4628      	mov	r0, r5
  408112:	4b9b      	ldr	r3, [pc, #620]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408114:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  408116:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  408118:	b118      	cbz	r0, 408122 <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  40811a:	7fa3      	ldrb	r3, [r4, #30]
  40811c:	2b00      	cmp	r3, #0
  40811e:	f040 80a5 	bne.w	40826c <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  408122:	226e      	movs	r2, #110	; 0x6e
  408124:	4631      	mov	r1, r6
  408126:	4628      	mov	r0, r5
  408128:	4b97      	ldr	r3, [pc, #604]	; (408388 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40812a:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  40812c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  40812e:	b120      	cbz	r0, 40813a <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  408130:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  408134:	2b00      	cmp	r3, #0
  408136:	f040 80b5 	bne.w	4082a4 <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  40813a:	2250      	movs	r2, #80	; 0x50
  40813c:	4631      	mov	r1, r6
  40813e:	4628      	mov	r0, r5
  408140:	4b8f      	ldr	r3, [pc, #572]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408142:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  408144:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  408146:	b120      	cbz	r0, 408152 <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  408148:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40814c:	2b02      	cmp	r3, #2
  40814e:	f200 80ee 	bhi.w	40832e <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  408152:	227f      	movs	r2, #127	; 0x7f
  408154:	4631      	mov	r1, r6
  408156:	4628      	mov	r0, r5
  408158:	4b8b      	ldr	r3, [pc, #556]	; (408388 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40815a:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  40815c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  40815e:	b120      	cbz	r0, 40816a <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  408160:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  408164:	2b02      	cmp	r3, #2
  408166:	f200 8115 	bhi.w	408394 <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  40816a:	2ffc      	cmp	r7, #252	; 0xfc
  40816c:	d824      	bhi.n	4081b8 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  40816e:	7b23      	ldrb	r3, [r4, #12]
  408170:	b2bf      	uxth	r7, r7
  408172:	fb13 f307 	smulbb	r3, r3, r7
  408176:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40817a:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  40817c:	7d23      	ldrb	r3, [r4, #20]
  40817e:	fb17 f303 	smulbb	r3, r7, r3
  408182:	f3c3 2307 	ubfx	r3, r3, #8, #8
  408186:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  408188:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40818c:	fb17 f303 	smulbb	r3, r7, r3
  408190:	f3c3 2307 	ubfx	r3, r3, #8, #8
  408194:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  408198:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  40819c:	fb17 f303 	smulbb	r3, r7, r3
  4081a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
  4081a4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  4081a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4081ac:	fb17 f703 	smulbb	r7, r7, r3
  4081b0:	f3c7 2707 	ubfx	r7, r7, #8, #8
  4081b4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  4081b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  4081bc:	2300      	movs	r3, #0
  4081be:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  4081c0:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  4081c2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  4081c6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  4081ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  4081ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4081d2:	222c      	movs	r2, #44	; 0x2c
  4081d4:	4631      	mov	r1, r6
  4081d6:	4628      	mov	r0, r5
  4081d8:	4b6a      	ldr	r3, [pc, #424]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4081da:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  4081dc:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  4081de:	2802      	cmp	r0, #2
  4081e0:	d989      	bls.n	4080f6 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4081e2:	2229      	movs	r2, #41	; 0x29
  4081e4:	4631      	mov	r1, r6
  4081e6:	4628      	mov	r0, r5
  4081e8:	4b68      	ldr	r3, [pc, #416]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  4081ea:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  4081ec:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  4081ee:	2223      	movs	r2, #35	; 0x23
  4081f0:	4631      	mov	r1, r6
  4081f2:	4628      	mov	r0, r5
  4081f4:	4b62      	ldr	r3, [pc, #392]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4081f6:	4798      	blx	r3
  4081f8:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  4081fa:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  4081fc:	b930      	cbnz	r0, 40820c <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  4081fe:	2220      	movs	r2, #32
  408200:	4631      	mov	r1, r6
  408202:	4628      	mov	r0, r5
  408204:	4b5e      	ldr	r3, [pc, #376]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408206:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  408208:	7360      	strb	r0, [r4, #13]
  40820a:	e774      	b.n	4080f6 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  40820c:	222a      	movs	r2, #42	; 0x2a
  40820e:	4631      	mov	r1, r6
  408210:	4628      	mov	r0, r5
  408212:	4b5e      	ldr	r3, [pc, #376]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  408214:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  408216:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  408218:	2221      	movs	r2, #33	; 0x21
  40821a:	4631      	mov	r1, r6
  40821c:	4628      	mov	r0, r5
  40821e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 408380 <lv_obj_init_draw_rect_dsc+0x2b4>
  408222:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  408224:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  408226:	2222      	movs	r2, #34	; 0x22
  408228:	4631      	mov	r1, r6
  40822a:	4628      	mov	r0, r5
  40822c:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  40822e:	8160      	strh	r0, [r4, #10]
  408230:	e7e5      	b.n	4081fe <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  408232:	223c      	movs	r2, #60	; 0x3c
  408234:	4631      	mov	r1, r6
  408236:	4628      	mov	r0, r5
  408238:	4b52      	ldr	r3, [pc, #328]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  40823a:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  40823c:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  40823e:	2802      	cmp	r0, #2
  408240:	d806      	bhi.n	408250 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  408242:	2232      	movs	r2, #50	; 0x32
  408244:	4631      	mov	r1, r6
  408246:	4628      	mov	r0, r5
  408248:	4b4d      	ldr	r3, [pc, #308]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  40824a:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  40824c:	7560      	strb	r0, [r4, #21]
  40824e:	e75d      	b.n	40810c <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  408250:	2231      	movs	r2, #49	; 0x31
  408252:	4631      	mov	r1, r6
  408254:	4628      	mov	r0, r5
  408256:	4b4a      	ldr	r3, [pc, #296]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408258:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  40825a:	b2c0      	uxtb	r0, r0
  40825c:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  40825e:	2239      	movs	r2, #57	; 0x39
  408260:	4631      	mov	r1, r6
  408262:	4628      	mov	r0, r5
  408264:	4b49      	ldr	r3, [pc, #292]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  408266:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  408268:	81e0      	strh	r0, [r4, #14]
  40826a:	e7ea      	b.n	408242 <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  40826c:	224c      	movs	r2, #76	; 0x4c
  40826e:	4631      	mov	r1, r6
  408270:	4628      	mov	r0, r5
  408272:	4b44      	ldr	r3, [pc, #272]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408274:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  408276:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  408278:	2802      	cmp	r0, #2
  40827a:	d806      	bhi.n	40828a <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  40827c:	2242      	movs	r2, #66	; 0x42
  40827e:	4631      	mov	r1, r6
  408280:	4628      	mov	r0, r5
  408282:	4b3f      	ldr	r3, [pc, #252]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408284:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  408286:	77e0      	strb	r0, [r4, #31]
  408288:	e74b      	b.n	408122 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  40828a:	2241      	movs	r2, #65	; 0x41
  40828c:	4631      	mov	r1, r6
  40828e:	4628      	mov	r0, r5
  408290:	4b3b      	ldr	r3, [pc, #236]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408292:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  408294:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  408296:	2249      	movs	r2, #73	; 0x49
  408298:	4631      	mov	r1, r6
  40829a:	4628      	mov	r0, r5
  40829c:	4b3b      	ldr	r3, [pc, #236]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  40829e:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  4082a0:	8320      	strh	r0, [r4, #24]
  4082a2:	e7eb      	b.n	40827c <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  4082a4:	226c      	movs	r2, #108	; 0x6c
  4082a6:	4631      	mov	r1, r6
  4082a8:	4628      	mov	r0, r5
  4082aa:	4b36      	ldr	r3, [pc, #216]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4082ac:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  4082ae:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  4082b2:	2802      	cmp	r0, #2
  4082b4:	f67f af41 	bls.w	40813a <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  4082b8:	226d      	movs	r2, #109	; 0x6d
  4082ba:	4631      	mov	r1, r6
  4082bc:	4628      	mov	r0, r5
  4082be:	4b31      	ldr	r3, [pc, #196]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  4082c0:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  4082c2:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  4082c6:	2261      	movs	r2, #97	; 0x61
  4082c8:	4631      	mov	r1, r6
  4082ca:	4628      	mov	r0, r5
  4082cc:	4b2c      	ldr	r3, [pc, #176]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4082ce:	4798      	blx	r3
  4082d0:	3000      	adds	r0, #0
  4082d2:	bf18      	it	ne
  4082d4:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  4082d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  4082da:	f360 0300 	bfi	r3, r0, #0, #1
  4082de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  4082e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4082e4:	4b2a      	ldr	r3, [pc, #168]	; (408390 <lv_obj_init_draw_rect_dsc+0x2c4>)
  4082e6:	4798      	blx	r3
  4082e8:	2802      	cmp	r0, #2
  4082ea:	d00b      	beq.n	408304 <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  4082ec:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4082f0:	2b02      	cmp	r3, #2
  4082f2:	d815      	bhi.n	408320 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  4082f4:	2260      	movs	r2, #96	; 0x60
  4082f6:	4631      	mov	r1, r6
  4082f8:	4628      	mov	r0, r5
  4082fa:	4b21      	ldr	r3, [pc, #132]	; (408380 <lv_obj_init_draw_rect_dsc+0x2b4>)
  4082fc:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  4082fe:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  408302:	e71a      	b.n	40813a <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408304:	2269      	movs	r2, #105	; 0x69
  408306:	4631      	mov	r1, r6
  408308:	4628      	mov	r0, r5
  40830a:	4b20      	ldr	r3, [pc, #128]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  40830c:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40830e:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  408310:	f248 028e 	movw	r2, #32910	; 0x808e
  408314:	4631      	mov	r1, r6
  408316:	4628      	mov	r0, r5
  408318:	4b1b      	ldr	r3, [pc, #108]	; (408388 <lv_obj_init_draw_rect_dsc+0x2bc>)
  40831a:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  40831c:	6320      	str	r0, [r4, #48]	; 0x30
  40831e:	e7e9      	b.n	4082f4 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408320:	2269      	movs	r2, #105	; 0x69
  408322:	4631      	mov	r1, r6
  408324:	4628      	mov	r0, r5
  408326:	4b19      	ldr	r3, [pc, #100]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  408328:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  40832a:	86a0      	strh	r0, [r4, #52]	; 0x34
  40832c:	e7e2      	b.n	4082f4 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  40832e:	225c      	movs	r2, #92	; 0x5c
  408330:	4631      	mov	r1, r6
  408332:	4628      	mov	r0, r5
  408334:	4b13      	ldr	r3, [pc, #76]	; (408384 <lv_obj_init_draw_rect_dsc+0x2b8>)
  408336:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  408338:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  40833c:	2802      	cmp	r0, #2
  40833e:	f67f af08 	bls.w	408152 <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  408342:	2251      	movs	r2, #81	; 0x51
  408344:	4631      	mov	r1, r6
  408346:	4628      	mov	r0, r5
  408348:	f8df 8034 	ldr.w	r8, [pc, #52]	; 408380 <lv_obj_init_draw_rect_dsc+0x2b4>
  40834c:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  40834e:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  408350:	2252      	movs	r2, #82	; 0x52
  408352:	4631      	mov	r1, r6
  408354:	4628      	mov	r0, r5
  408356:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  408358:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  40835a:	2253      	movs	r2, #83	; 0x53
  40835c:	4631      	mov	r1, r6
  40835e:	4628      	mov	r0, r5
  408360:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  408362:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  408364:	2259      	movs	r2, #89	; 0x59
  408366:	4631      	mov	r1, r6
  408368:	4628      	mov	r0, r5
  40836a:	4b08      	ldr	r3, [pc, #32]	; (40838c <lv_obj_init_draw_rect_dsc+0x2c0>)
  40836c:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  40836e:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  408370:	2254      	movs	r2, #84	; 0x54
  408372:	4631      	mov	r1, r6
  408374:	4628      	mov	r0, r5
  408376:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  408378:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  40837c:	e6e9      	b.n	408152 <lv_obj_init_draw_rect_dsc+0x86>
  40837e:	bf00      	nop
  408380:	00407255 	.word	0x00407255
  408384:	00406cc9 	.word	0x00406cc9
  408388:	0040714d 	.word	0x0040714d
  40838c:	00406c41 	.word	0x00406c41
  408390:	0040d385 	.word	0x0040d385
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408394:	227c      	movs	r2, #124	; 0x7c
  408396:	4631      	mov	r1, r6
  408398:	4628      	mov	r0, r5
  40839a:	4b1d      	ldr	r3, [pc, #116]	; (408410 <lv_obj_init_draw_rect_dsc+0x344>)
  40839c:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  40839e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  4083a2:	2802      	cmp	r0, #2
  4083a4:	f67f aee1 	bls.w	40816a <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  4083a8:	2273      	movs	r2, #115	; 0x73
  4083aa:	4631      	mov	r1, r6
  4083ac:	4628      	mov	r0, r5
  4083ae:	f8df 806c 	ldr.w	r8, [pc, #108]	; 40841c <lv_obj_init_draw_rect_dsc+0x350>
  4083b2:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  4083b4:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  4083b8:	2274      	movs	r2, #116	; 0x74
  4083ba:	4631      	mov	r1, r6
  4083bc:	4628      	mov	r0, r5
  4083be:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  4083c0:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4083c4:	2279      	movs	r2, #121	; 0x79
  4083c6:	4631      	mov	r1, r6
  4083c8:	4628      	mov	r0, r5
  4083ca:	4b12      	ldr	r3, [pc, #72]	; (408414 <lv_obj_init_draw_rect_dsc+0x348>)
  4083cc:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  4083ce:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  4083d2:	227e      	movs	r2, #126	; 0x7e
  4083d4:	4631      	mov	r1, r6
  4083d6:	4628      	mov	r0, r5
  4083d8:	4b0f      	ldr	r3, [pc, #60]	; (408418 <lv_obj_init_draw_rect_dsc+0x34c>)
  4083da:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  4083dc:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  4083de:	2270      	movs	r2, #112	; 0x70
  4083e0:	4631      	mov	r1, r6
  4083e2:	4628      	mov	r0, r5
  4083e4:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  4083e6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  4083ea:	2271      	movs	r2, #113	; 0x71
  4083ec:	4631      	mov	r1, r6
  4083ee:	4628      	mov	r0, r5
  4083f0:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  4083f2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  4083f6:	2275      	movs	r2, #117	; 0x75
  4083f8:	4631      	mov	r1, r6
  4083fa:	4628      	mov	r0, r5
  4083fc:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  4083fe:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  408402:	2272      	movs	r2, #114	; 0x72
  408404:	4631      	mov	r1, r6
  408406:	4628      	mov	r0, r5
  408408:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  40840a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  40840e:	e6ac      	b.n	40816a <lv_obj_init_draw_rect_dsc+0x9e>
  408410:	00406cc9 	.word	0x00406cc9
  408414:	00406c41 	.word	0x00406c41
  408418:	0040714d 	.word	0x0040714d
  40841c:	00407255 	.word	0x00407255

00408420 <lv_obj_design>:
{
  408420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408424:	b09a      	sub	sp, #104	; 0x68
  408426:	4604      	mov	r4, r0
  408428:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  40842a:	2a02      	cmp	r2, #2
  40842c:	d008      	beq.n	408440 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  40842e:	2a00      	cmp	r2, #0
  408430:	d06d      	beq.n	40850e <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  408432:	2a01      	cmp	r2, #1
  408434:	f000 80f4 	beq.w	408620 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  408438:	2000      	movs	r0, #0
}
  40843a:	b01a      	add	sp, #104	; 0x68
  40843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408440:	2100      	movs	r1, #0
  408442:	4ba3      	ldr	r3, [pc, #652]	; (4086d0 <lv_obj_design+0x2b0>)
  408444:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  408446:	b108      	cbz	r0, 40844c <lv_obj_design+0x2c>
  408448:	2003      	movs	r0, #3
  40844a:	e7f6      	b.n	40843a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  40844c:	2201      	movs	r2, #1
  40844e:	2100      	movs	r1, #0
  408450:	4620      	mov	r0, r4
  408452:	4d9f      	ldr	r5, [pc, #636]	; (4086d0 <lv_obj_design+0x2b0>)
  408454:	47a8      	blx	r5
  408456:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408458:	2204      	movs	r2, #4
  40845a:	2100      	movs	r1, #0
  40845c:	4620      	mov	r0, r4
  40845e:	47a8      	blx	r5
  408460:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408462:	2205      	movs	r2, #5
  408464:	2100      	movs	r1, #0
  408466:	4620      	mov	r0, r4
  408468:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  40846a:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  40846e:	aa05      	add	r2, sp, #20
  408470:	2308      	movs	r3, #8
    while(len) {
  408472:	b12b      	cbz	r3, 408480 <lv_obj_design+0x60>
        *d8 = *s8;
  408474:	f811 5b01 	ldrb.w	r5, [r1], #1
  408478:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  40847c:	3b01      	subs	r3, #1
  40847e:	e7f8      	b.n	408472 <lv_obj_design+0x52>
        coords.x1 -= w;
  408480:	fa1f f888 	uxth.w	r8, r8
  408484:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  408488:	eba3 0308 	sub.w	r3, r3, r8
  40848c:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  408490:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  408494:	4498      	add	r8, r3
  408496:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  40849a:	b280      	uxth	r0, r0
  40849c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4084a0:	1a1b      	subs	r3, r3, r0
  4084a2:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  4084a6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  4084aa:	4418      	add	r0, r3
  4084ac:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  4084b0:	463a      	mov	r2, r7
  4084b2:	a905      	add	r1, sp, #20
  4084b4:	4630      	mov	r0, r6
  4084b6:	4b87      	ldr	r3, [pc, #540]	; (4086d4 <lv_obj_design+0x2b4>)
  4084b8:	4798      	blx	r3
  4084ba:	b908      	cbnz	r0, 4084c0 <lv_obj_design+0xa0>
  4084bc:	2002      	movs	r0, #2
  4084be:	e7bc      	b.n	40843a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4084c0:	222c      	movs	r2, #44	; 0x2c
  4084c2:	2100      	movs	r1, #0
  4084c4:	4620      	mov	r0, r4
  4084c6:	4b84      	ldr	r3, [pc, #528]	; (4086d8 <lv_obj_design+0x2b8>)
  4084c8:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  4084ca:	28fc      	cmp	r0, #252	; 0xfc
  4084cc:	d801      	bhi.n	4084d2 <lv_obj_design+0xb2>
  4084ce:	2002      	movs	r0, #2
  4084d0:	e7b3      	b.n	40843a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  4084d2:	2220      	movs	r2, #32
  4084d4:	2100      	movs	r1, #0
  4084d6:	4620      	mov	r0, r4
  4084d8:	4b7d      	ldr	r3, [pc, #500]	; (4086d0 <lv_obj_design+0x2b0>)
  4084da:	4798      	blx	r3
  4084dc:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4084de:	b108      	cbz	r0, 4084e4 <lv_obj_design+0xc4>
  4084e0:	2002      	movs	r0, #2
  4084e2:	e7aa      	b.n	40843a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  4084e4:	2232      	movs	r2, #50	; 0x32
  4084e6:	2100      	movs	r1, #0
  4084e8:	4620      	mov	r0, r4
  4084ea:	4b79      	ldr	r3, [pc, #484]	; (4086d0 <lv_obj_design+0x2b0>)
  4084ec:	4798      	blx	r3
  4084ee:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  4084f0:	b108      	cbz	r0, 4084f6 <lv_obj_design+0xd6>
  4084f2:	2002      	movs	r0, #2
  4084f4:	e7a1      	b.n	40843a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4084f6:	f248 020c 	movw	r2, #32780	; 0x800c
  4084fa:	2100      	movs	r1, #0
  4084fc:	4620      	mov	r0, r4
  4084fe:	4b76      	ldr	r3, [pc, #472]	; (4086d8 <lv_obj_design+0x2b8>)
  408500:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  408502:	28fc      	cmp	r0, #252	; 0xfc
  408504:	d901      	bls.n	40850a <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  408506:	2001      	movs	r0, #1
  408508:	e797      	b.n	40843a <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40850a:	2002      	movs	r0, #2
  40850c:	e795      	b.n	40843a <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  40850e:	a805      	add	r0, sp, #20
  408510:	4b72      	ldr	r3, [pc, #456]	; (4086dc <lv_obj_design+0x2bc>)
  408512:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408514:	2233      	movs	r2, #51	; 0x33
  408516:	2100      	movs	r1, #0
  408518:	4620      	mov	r0, r4
  40851a:	4b6d      	ldr	r3, [pc, #436]	; (4086d0 <lv_obj_design+0x2b0>)
  40851c:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  40851e:	b128      	cbz	r0, 40852c <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  408520:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  408524:	f043 0301 	orr.w	r3, r3, #1
  408528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  40852c:	aa05      	add	r2, sp, #20
  40852e:	2100      	movs	r1, #0
  408530:	4620      	mov	r0, r4
  408532:	4b6b      	ldr	r3, [pc, #428]	; (4086e0 <lv_obj_design+0x2c0>)
  408534:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408536:	2204      	movs	r2, #4
  408538:	2100      	movs	r1, #0
  40853a:	4620      	mov	r0, r4
  40853c:	4d64      	ldr	r5, [pc, #400]	; (4086d0 <lv_obj_design+0x2b0>)
  40853e:	47a8      	blx	r5
  408540:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408542:	2205      	movs	r2, #5
  408544:	2100      	movs	r1, #0
  408546:	4620      	mov	r0, r4
  408548:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  40854a:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  40854e:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  408550:	aa01      	add	r2, sp, #4
  408552:	2308      	movs	r3, #8
  408554:	e004      	b.n	408560 <lv_obj_design+0x140>
        *d8 = *s8;
  408556:	f811 5b01 	ldrb.w	r5, [r1], #1
  40855a:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  40855e:	3b01      	subs	r3, #1
    while(len) {
  408560:	2b00      	cmp	r3, #0
  408562:	d1f8      	bne.n	408556 <lv_obj_design+0x136>
        coords.x1 -= w;
  408564:	fa1f f888 	uxth.w	r8, r8
  408568:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40856c:	eba3 0308 	sub.w	r3, r3, r8
  408570:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  408574:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  408578:	4498      	add	r8, r3
  40857a:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  40857e:	b280      	uxth	r0, r0
  408580:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  408584:	1a1b      	subs	r3, r3, r0
  408586:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  40858a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  40858e:	4418      	add	r0, r3
  408590:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  408594:	aa05      	add	r2, sp, #20
  408596:	4631      	mov	r1, r6
  408598:	a801      	add	r0, sp, #4
  40859a:	4b52      	ldr	r3, [pc, #328]	; (4086e4 <lv_obj_design+0x2c4>)
  40859c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  40859e:	2202      	movs	r2, #2
  4085a0:	2100      	movs	r1, #0
  4085a2:	4620      	mov	r0, r4
  4085a4:	4b4a      	ldr	r3, [pc, #296]	; (4086d0 <lv_obj_design+0x2b0>)
  4085a6:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  4085a8:	b908      	cbnz	r0, 4085ae <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  4085aa:	2000      	movs	r0, #0
  4085ac:	e745      	b.n	40843a <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  4085ae:	201c      	movs	r0, #28
  4085b0:	4b4d      	ldr	r3, [pc, #308]	; (4086e8 <lv_obj_design+0x2c8>)
  4085b2:	4798      	blx	r3
  4085b4:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4085b6:	2201      	movs	r2, #1
  4085b8:	2100      	movs	r1, #0
  4085ba:	4620      	mov	r0, r4
  4085bc:	4b44      	ldr	r3, [pc, #272]	; (4086d0 <lv_obj_design+0x2b0>)
  4085be:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  4085c0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  4085c4:	f013 0f01 	tst.w	r3, #1
  4085c8:	d01e      	beq.n	408608 <lv_obj_design+0x1e8>
  4085ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  4085ce:	2b01      	cmp	r3, #1
  4085d0:	d91a      	bls.n	408608 <lv_obj_design+0x1e8>
  4085d2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4085d6:	2b00      	cmp	r3, #0
  4085d8:	dd16      	ble.n	408608 <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  4085da:	8a23      	ldrh	r3, [r4, #16]
  4085dc:	3301      	adds	r3, #1
  4085de:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  4085e2:	8a63      	ldrh	r3, [r4, #18]
  4085e4:	3301      	adds	r3, #1
  4085e6:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  4085ea:	8aa3      	ldrh	r3, [r4, #20]
  4085ec:	3b01      	subs	r3, #1
  4085ee:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  4085f2:	8ae3      	ldrh	r3, [r4, #22]
  4085f4:	3b01      	subs	r3, #1
  4085f6:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  4085fa:	2300      	movs	r3, #0
  4085fc:	4602      	mov	r2, r0
  4085fe:	a903      	add	r1, sp, #12
  408600:	4628      	mov	r0, r5
  408602:	4e3a      	ldr	r6, [pc, #232]	; (4086ec <lv_obj_design+0x2cc>)
  408604:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  408606:	e005      	b.n	408614 <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  408608:	2300      	movs	r3, #0
  40860a:	4602      	mov	r2, r0
  40860c:	4639      	mov	r1, r7
  40860e:	4628      	mov	r0, r5
  408610:	4e36      	ldr	r6, [pc, #216]	; (4086ec <lv_obj_design+0x2cc>)
  408612:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  408614:	f504 7118 	add.w	r1, r4, #608	; 0x260
  408618:	4628      	mov	r0, r5
  40861a:	4b35      	ldr	r3, [pc, #212]	; (4086f0 <lv_obj_design+0x2d0>)
  40861c:	4798      	blx	r3
  40861e:	e7c4      	b.n	4085aa <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408620:	2202      	movs	r2, #2
  408622:	2100      	movs	r1, #0
  408624:	4b2a      	ldr	r3, [pc, #168]	; (4086d0 <lv_obj_design+0x2b0>)
  408626:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408628:	b938      	cbnz	r0, 40863a <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  40862a:	2233      	movs	r2, #51	; 0x33
  40862c:	2100      	movs	r1, #0
  40862e:	4620      	mov	r0, r4
  408630:	4b27      	ldr	r3, [pc, #156]	; (4086d0 <lv_obj_design+0x2b0>)
  408632:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  408634:	b940      	cbnz	r0, 408648 <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  408636:	2000      	movs	r0, #0
  408638:	e6ff      	b.n	40843a <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  40863a:	f504 7018 	add.w	r0, r4, #608	; 0x260
  40863e:	4b2d      	ldr	r3, [pc, #180]	; (4086f4 <lv_obj_design+0x2d4>)
  408640:	4798      	blx	r3
            _lv_mem_buf_release(param);
  408642:	4b2d      	ldr	r3, [pc, #180]	; (4086f8 <lv_obj_design+0x2d8>)
  408644:	4798      	blx	r3
  408646:	e7f0      	b.n	40862a <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  408648:	a805      	add	r0, sp, #20
  40864a:	4b24      	ldr	r3, [pc, #144]	; (4086dc <lv_obj_design+0x2bc>)
  40864c:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  40864e:	2500      	movs	r5, #0
  408650:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  408654:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  408658:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  40865c:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408660:	aa05      	add	r2, sp, #20
  408662:	4629      	mov	r1, r5
  408664:	4620      	mov	r0, r4
  408666:	4b1e      	ldr	r3, [pc, #120]	; (4086e0 <lv_obj_design+0x2c0>)
  408668:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40866a:	2204      	movs	r2, #4
  40866c:	4629      	mov	r1, r5
  40866e:	4620      	mov	r0, r4
  408670:	4f17      	ldr	r7, [pc, #92]	; (4086d0 <lv_obj_design+0x2b0>)
  408672:	47b8      	blx	r7
  408674:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408676:	2205      	movs	r2, #5
  408678:	4629      	mov	r1, r5
  40867a:	4620      	mov	r0, r4
  40867c:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  40867e:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  408680:	aa03      	add	r2, sp, #12
  408682:	2308      	movs	r3, #8
  408684:	e004      	b.n	408690 <lv_obj_design+0x270>
        *d8 = *s8;
  408686:	f814 1b01 	ldrb.w	r1, [r4], #1
  40868a:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40868e:	3b01      	subs	r3, #1
    while(len) {
  408690:	2b00      	cmp	r3, #0
  408692:	d1f8      	bne.n	408686 <lv_obj_design+0x266>
            coords.x1 -= w;
  408694:	fa1f f788 	uxth.w	r7, r8
  408698:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40869c:	1bdb      	subs	r3, r3, r7
  40869e:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  4086a2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4086a6:	441f      	add	r7, r3
  4086a8:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  4086ac:	b280      	uxth	r0, r0
  4086ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4086b2:	1a1b      	subs	r3, r3, r0
  4086b4:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  4086b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4086bc:	4418      	add	r0, r3
  4086be:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  4086c2:	aa05      	add	r2, sp, #20
  4086c4:	4631      	mov	r1, r6
  4086c6:	a803      	add	r0, sp, #12
  4086c8:	4b06      	ldr	r3, [pc, #24]	; (4086e4 <lv_obj_design+0x2c4>)
  4086ca:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  4086cc:	2000      	movs	r0, #0
  4086ce:	e6b4      	b.n	40843a <lv_obj_design+0x1a>
  4086d0:	00407255 	.word	0x00407255
  4086d4:	00415431 	.word	0x00415431
  4086d8:	00406cc9 	.word	0x00406cc9
  4086dc:	00412065 	.word	0x00412065
  4086e0:	004080cd 	.word	0x004080cd
  4086e4:	004120b1 	.word	0x004120b1
  4086e8:	00416531 	.word	0x00416531
  4086ec:	0040fa6d 	.word	0x0040fa6d
  4086f0:	0040f7f1 	.word	0x0040f7f1
  4086f4:	0040f899 	.word	0x0040f899
  4086f8:	004162e1 	.word	0x004162e1

004086fc <lv_obj_init_draw_label_dsc>:
{
  4086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4086fe:	4605      	mov	r5, r0
  408700:	460e      	mov	r6, r1
  408702:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  408704:	f248 028c 	movw	r2, #32908	; 0x808c
  408708:	4b2a      	ldr	r3, [pc, #168]	; (4087b4 <lv_obj_init_draw_label_dsc+0xb8>)
  40870a:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  40870c:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  40870e:	2802      	cmp	r0, #2
  408710:	d800      	bhi.n	408714 <lv_obj_init_draw_label_dsc+0x18>
  408712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408714:	f248 020c 	movw	r2, #32780	; 0x800c
  408718:	4631      	mov	r1, r6
  40871a:	4628      	mov	r0, r5
  40871c:	4b25      	ldr	r3, [pc, #148]	; (4087b4 <lv_obj_init_draw_label_dsc+0xb8>)
  40871e:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408720:	28fc      	cmp	r0, #252	; 0xfc
  408722:	d805      	bhi.n	408730 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408724:	7b23      	ldrb	r3, [r4, #12]
  408726:	fb10 f003 	smulbb	r0, r0, r3
  40872a:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40872e:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408730:	7b23      	ldrb	r3, [r4, #12]
  408732:	2b02      	cmp	r3, #2
  408734:	d9ed      	bls.n	408712 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  408736:	f248 0289 	movw	r2, #32905	; 0x8089
  40873a:	4631      	mov	r1, r6
  40873c:	4628      	mov	r0, r5
  40873e:	4b1e      	ldr	r3, [pc, #120]	; (4087b8 <lv_obj_init_draw_label_dsc+0xbc>)
  408740:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  408742:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  408744:	f248 0280 	movw	r2, #32896	; 0x8080
  408748:	4631      	mov	r1, r6
  40874a:	4628      	mov	r0, r5
  40874c:	4f1b      	ldr	r7, [pc, #108]	; (4087bc <lv_obj_init_draw_label_dsc+0xc0>)
  40874e:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  408750:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  408752:	f248 0281 	movw	r2, #32897	; 0x8081
  408756:	4631      	mov	r1, r6
  408758:	4628      	mov	r0, r5
  40875a:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  40875c:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  40875e:	f248 0282 	movw	r2, #32898	; 0x8082
  408762:	4631      	mov	r1, r6
  408764:	4628      	mov	r0, r5
  408766:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  408768:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  40876c:	f248 0283 	movw	r2, #32899	; 0x8083
  408770:	4631      	mov	r1, r6
  408772:	4628      	mov	r0, r5
  408774:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  408776:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40877a:	f248 028e 	movw	r2, #32910	; 0x808e
  40877e:	4631      	mov	r1, r6
  408780:	4628      	mov	r0, r5
  408782:	4b0f      	ldr	r3, [pc, #60]	; (4087c0 <lv_obj_init_draw_label_dsc+0xc4>)
  408784:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  408786:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  408788:	6962      	ldr	r2, [r4, #20]
  40878a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40878e:	429a      	cmp	r2, r3
  408790:	d0bf      	beq.n	408712 <lv_obj_init_draw_label_dsc+0x16>
  408792:	69a2      	ldr	r2, [r4, #24]
  408794:	429a      	cmp	r2, r3
  408796:	d0bc      	beq.n	408712 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  408798:	f248 028a 	movw	r2, #32906	; 0x808a
  40879c:	4631      	mov	r1, r6
  40879e:	4628      	mov	r0, r5
  4087a0:	4f05      	ldr	r7, [pc, #20]	; (4087b8 <lv_obj_init_draw_label_dsc+0xbc>)
  4087a2:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  4087a4:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  4087a6:	f248 028b 	movw	r2, #32907	; 0x808b
  4087aa:	4631      	mov	r1, r6
  4087ac:	4628      	mov	r0, r5
  4087ae:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  4087b0:	80a0      	strh	r0, [r4, #4]
  4087b2:	e7ae      	b.n	408712 <lv_obj_init_draw_label_dsc+0x16>
  4087b4:	00406cc9 	.word	0x00406cc9
  4087b8:	00406c41 	.word	0x00406c41
  4087bc:	00407255 	.word	0x00407255
  4087c0:	0040714d 	.word	0x0040714d

004087c4 <lv_obj_init_draw_img_dsc>:
{
  4087c4:	b570      	push	{r4, r5, r6, lr}
  4087c6:	4605      	mov	r5, r0
  4087c8:	460e      	mov	r6, r1
  4087ca:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  4087cc:	f248 02ac 	movw	r2, #32940	; 0x80ac
  4087d0:	4b25      	ldr	r3, [pc, #148]	; (408868 <lv_obj_init_draw_img_dsc+0xa4>)
  4087d2:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  4087d4:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4087d6:	2802      	cmp	r0, #2
  4087d8:	d800      	bhi.n	4087dc <lv_obj_init_draw_img_dsc+0x18>
  4087da:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4087dc:	f248 020c 	movw	r2, #32780	; 0x800c
  4087e0:	4631      	mov	r1, r6
  4087e2:	4628      	mov	r0, r5
  4087e4:	4b20      	ldr	r3, [pc, #128]	; (408868 <lv_obj_init_draw_img_dsc+0xa4>)
  4087e6:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  4087e8:	28fc      	cmp	r0, #252	; 0xfc
  4087ea:	d805      	bhi.n	4087f8 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  4087ec:	7823      	ldrb	r3, [r4, #0]
  4087ee:	fb10 f003 	smulbb	r0, r0, r3
  4087f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4087f6:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4087f8:	7823      	ldrb	r3, [r4, #0]
  4087fa:	2b02      	cmp	r3, #2
  4087fc:	d9ed      	bls.n	4087da <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  4087fe:	2300      	movs	r3, #0
  408800:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  408802:	f44f 7380 	mov.w	r3, #256	; 0x100
  408806:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  408808:	8aab      	ldrh	r3, [r5, #20]
  40880a:	8a2a      	ldrh	r2, [r5, #16]
  40880c:	1a9b      	subs	r3, r3, r2
  40880e:	b29b      	uxth	r3, r3
  408810:	3301      	adds	r3, #1
  408812:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408814:	2b00      	cmp	r3, #0
  408816:	db1b      	blt.n	408850 <lv_obj_init_draw_img_dsc+0x8c>
  408818:	105b      	asrs	r3, r3, #1
  40881a:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40881c:	8aeb      	ldrh	r3, [r5, #22]
  40881e:	8a6a      	ldrh	r2, [r5, #18]
  408820:	1a9b      	subs	r3, r3, r2
  408822:	b29b      	uxth	r3, r3
  408824:	3301      	adds	r3, #1
  408826:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408828:	2b00      	cmp	r3, #0
  40882a:	db13      	blt.n	408854 <lv_obj_init_draw_img_dsc+0x90>
  40882c:	105b      	asrs	r3, r3, #1
  40882e:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  408830:	f248 02ad 	movw	r2, #32941	; 0x80ad
  408834:	4631      	mov	r1, r6
  408836:	4628      	mov	r0, r5
  408838:	4b0b      	ldr	r3, [pc, #44]	; (408868 <lv_obj_init_draw_img_dsc+0xa4>)
  40883a:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  40883c:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  40883e:	b958      	cbnz	r0, 408858 <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  408840:	f248 02a0 	movw	r2, #32928	; 0x80a0
  408844:	4631      	mov	r1, r6
  408846:	4628      	mov	r0, r5
  408848:	4b08      	ldr	r3, [pc, #32]	; (40886c <lv_obj_init_draw_img_dsc+0xa8>)
  40884a:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  40884c:	73a0      	strb	r0, [r4, #14]
  40884e:	e7c4      	b.n	4087da <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408850:	3301      	adds	r3, #1
  408852:	e7e1      	b.n	408818 <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408854:	3301      	adds	r3, #1
  408856:	e7e9      	b.n	40882c <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  408858:	f248 02a9 	movw	r2, #32937	; 0x80a9
  40885c:	4631      	mov	r1, r6
  40885e:	4628      	mov	r0, r5
  408860:	4b03      	ldr	r3, [pc, #12]	; (408870 <lv_obj_init_draw_img_dsc+0xac>)
  408862:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  408864:	81a0      	strh	r0, [r4, #12]
  408866:	e7eb      	b.n	408840 <lv_obj_init_draw_img_dsc+0x7c>
  408868:	00406cc9 	.word	0x00406cc9
  40886c:	00407255 	.word	0x00407255
  408870:	00406c41 	.word	0x00406c41

00408874 <lv_obj_init_draw_line_dsc>:
{
  408874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408876:	4605      	mov	r5, r0
  408878:	460e      	mov	r6, r1
  40887a:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  40887c:	2290      	movs	r2, #144	; 0x90
  40887e:	4b24      	ldr	r3, [pc, #144]	; (408910 <lv_obj_init_draw_line_dsc+0x9c>)
  408880:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  408882:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  408884:	b900      	cbnz	r0, 408888 <lv_obj_init_draw_line_dsc+0x14>
  408886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  408888:	229c      	movs	r2, #156	; 0x9c
  40888a:	4631      	mov	r1, r6
  40888c:	4628      	mov	r0, r5
  40888e:	4b21      	ldr	r3, [pc, #132]	; (408914 <lv_obj_init_draw_line_dsc+0xa0>)
  408890:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  408892:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408894:	2802      	cmp	r0, #2
  408896:	d9f6      	bls.n	408886 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408898:	f248 020c 	movw	r2, #32780	; 0x800c
  40889c:	4631      	mov	r1, r6
  40889e:	4628      	mov	r0, r5
  4088a0:	4b1c      	ldr	r3, [pc, #112]	; (408914 <lv_obj_init_draw_line_dsc+0xa0>)
  4088a2:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  4088a4:	28fc      	cmp	r0, #252	; 0xfc
  4088a6:	d805      	bhi.n	4088b4 <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  4088a8:	7a23      	ldrb	r3, [r4, #8]
  4088aa:	fb10 f003 	smulbb	r0, r0, r3
  4088ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4088b2:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4088b4:	7a23      	ldrb	r3, [r4, #8]
  4088b6:	2b02      	cmp	r3, #2
  4088b8:	d9e5      	bls.n	408886 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4088ba:	2299      	movs	r2, #153	; 0x99
  4088bc:	4631      	mov	r1, r6
  4088be:	4628      	mov	r0, r5
  4088c0:	4b15      	ldr	r3, [pc, #84]	; (408918 <lv_obj_init_draw_line_dsc+0xa4>)
  4088c2:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  4088c4:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  4088c6:	2292      	movs	r2, #146	; 0x92
  4088c8:	4631      	mov	r1, r6
  4088ca:	4628      	mov	r0, r5
  4088cc:	4b10      	ldr	r3, [pc, #64]	; (408910 <lv_obj_init_draw_line_dsc+0x9c>)
  4088ce:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  4088d0:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  4088d2:	b9b0      	cbnz	r0, 408902 <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  4088d4:	2294      	movs	r2, #148	; 0x94
  4088d6:	4631      	mov	r1, r6
  4088d8:	4628      	mov	r0, r5
  4088da:	4f0d      	ldr	r7, [pc, #52]	; (408910 <lv_obj_init_draw_line_dsc+0x9c>)
  4088dc:	47b8      	blx	r7
  4088de:	3000      	adds	r0, #0
  4088e0:	bf18      	it	ne
  4088e2:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  4088e4:	7a63      	ldrb	r3, [r4, #9]
  4088e6:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  4088ea:	f360 03c3 	bfi	r3, r0, #3, #1
  4088ee:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  4088f0:	2291      	movs	r2, #145	; 0x91
  4088f2:	4631      	mov	r1, r6
  4088f4:	4628      	mov	r0, r5
  4088f6:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  4088f8:	7a63      	ldrb	r3, [r4, #9]
  4088fa:	f360 0301 	bfi	r3, r0, #0, #2
  4088fe:	7263      	strb	r3, [r4, #9]
  408900:	e7c1      	b.n	408886 <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  408902:	2293      	movs	r2, #147	; 0x93
  408904:	4631      	mov	r1, r6
  408906:	4628      	mov	r0, r5
  408908:	4b01      	ldr	r3, [pc, #4]	; (408910 <lv_obj_init_draw_line_dsc+0x9c>)
  40890a:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  40890c:	80e0      	strh	r0, [r4, #6]
  40890e:	e7e1      	b.n	4088d4 <lv_obj_init_draw_line_dsc+0x60>
  408910:	00407255 	.word	0x00407255
  408914:	00406cc9 	.word	0x00406cc9
  408918:	00406c41 	.word	0x00406c41

0040891c <style_snapshot>:
{
  40891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408920:	b083      	sub	sp, #12
  408922:	4605      	mov	r5, r0
  408924:	4689      	mov	r9, r1
  408926:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  408928:	2101      	movs	r1, #1
  40892a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408b1c <style_snapshot+0x200>
  40892e:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  408930:	21bc      	movs	r1, #188	; 0xbc
  408932:	4620      	mov	r0, r4
  408934:	4b6d      	ldr	r3, [pc, #436]	; (408aec <style_snapshot+0x1d0>)
  408936:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  408938:	4620      	mov	r0, r4
  40893a:	4b6d      	ldr	r3, [pc, #436]	; (408af0 <style_snapshot+0x1d4>)
  40893c:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  40893e:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  408942:	4650      	mov	r0, sl
  408944:	4b6b      	ldr	r3, [pc, #428]	; (408af4 <style_snapshot+0x1d8>)
  408946:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  408948:	f104 0382 	add.w	r3, r4, #130	; 0x82
  40894c:	9301      	str	r3, [sp, #4]
  40894e:	4618      	mov	r0, r3
  408950:	4b69      	ldr	r3, [pc, #420]	; (408af8 <style_snapshot+0x1dc>)
  408952:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  408954:	f104 0678 	add.w	r6, r4, #120	; 0x78
  408958:	4630      	mov	r0, r6
  40895a:	4b68      	ldr	r3, [pc, #416]	; (408afc <style_snapshot+0x1e0>)
  40895c:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40895e:	4649      	mov	r1, r9
  408960:	4628      	mov	r0, r5
  408962:	4b67      	ldr	r3, [pc, #412]	; (408b00 <style_snapshot+0x1e4>)
  408964:	4798      	blx	r3
  408966:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  408968:	7943      	ldrb	r3, [r0, #5]
  40896a:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  40896e:	f043 0301 	orr.w	r3, r3, #1
  408972:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  408974:	4622      	mov	r2, r4
  408976:	4649      	mov	r1, r9
  408978:	4628      	mov	r0, r5
  40897a:	4b62      	ldr	r3, [pc, #392]	; (408b04 <style_snapshot+0x1e8>)
  40897c:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  40897e:	4652      	mov	r2, sl
  408980:	4649      	mov	r1, r9
  408982:	4628      	mov	r0, r5
  408984:	4b60      	ldr	r3, [pc, #384]	; (408b08 <style_snapshot+0x1ec>)
  408986:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  408988:	9a01      	ldr	r2, [sp, #4]
  40898a:	4649      	mov	r1, r9
  40898c:	4628      	mov	r0, r5
  40898e:	4b5f      	ldr	r3, [pc, #380]	; (408b0c <style_snapshot+0x1f0>)
  408990:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  408992:	4632      	mov	r2, r6
  408994:	4649      	mov	r1, r9
  408996:	4628      	mov	r0, r5
  408998:	4b5d      	ldr	r3, [pc, #372]	; (408b10 <style_snapshot+0x1f4>)
  40899a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  40899c:	2210      	movs	r2, #16
  40899e:	4649      	mov	r1, r9
  4089a0:	4628      	mov	r0, r5
  4089a2:	4e5c      	ldr	r6, [pc, #368]	; (408b14 <style_snapshot+0x1f8>)
  4089a4:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  4089a6:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4089aa:	2211      	movs	r2, #17
  4089ac:	4649      	mov	r1, r9
  4089ae:	4628      	mov	r0, r5
  4089b0:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  4089b2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4089b6:	2213      	movs	r2, #19
  4089b8:	4649      	mov	r1, r9
  4089ba:	4628      	mov	r0, r5
  4089bc:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  4089be:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4089c2:	2212      	movs	r2, #18
  4089c4:	4649      	mov	r1, r9
  4089c6:	4628      	mov	r0, r5
  4089c8:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  4089ca:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4089ce:	2214      	movs	r2, #20
  4089d0:	4649      	mov	r1, r9
  4089d2:	4628      	mov	r0, r5
  4089d4:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  4089d6:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4089da:	2215      	movs	r2, #21
  4089dc:	4649      	mov	r1, r9
  4089de:	4628      	mov	r0, r5
  4089e0:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  4089e2:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4089e6:	2216      	movs	r2, #22
  4089e8:	4649      	mov	r1, r9
  4089ea:	4628      	mov	r0, r5
  4089ec:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  4089ee:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  4089f2:	2217      	movs	r2, #23
  4089f4:	4649      	mov	r1, r9
  4089f6:	4628      	mov	r0, r5
  4089f8:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  4089fa:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  4089fe:	2218      	movs	r2, #24
  408a00:	4649      	mov	r1, r9
  408a02:	4628      	mov	r0, r5
  408a04:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  408a06:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  408a0a:	2203      	movs	r2, #3
  408a0c:	4649      	mov	r1, r9
  408a0e:	4628      	mov	r0, r5
  408a10:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  408a12:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408a16:	2204      	movs	r2, #4
  408a18:	4649      	mov	r1, r9
  408a1a:	4628      	mov	r0, r5
  408a1c:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408a1e:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408a22:	2205      	movs	r2, #5
  408a24:	4649      	mov	r1, r9
  408a26:	4628      	mov	r0, r5
  408a28:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  408a2a:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  408a2e:	2206      	movs	r2, #6
  408a30:	4649      	mov	r1, r9
  408a32:	4628      	mov	r0, r5
  408a34:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  408a36:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  408a3a:	2207      	movs	r2, #7
  408a3c:	4649      	mov	r1, r9
  408a3e:	4628      	mov	r0, r5
  408a40:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  408a42:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  408a46:	22c0      	movs	r2, #192	; 0xc0
  408a48:	4649      	mov	r1, r9
  408a4a:	4628      	mov	r0, r5
  408a4c:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  408a4e:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  408a52:	22c1      	movs	r2, #193	; 0xc1
  408a54:	4649      	mov	r1, r9
  408a56:	4628      	mov	r0, r5
  408a58:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  408a5a:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  408a5e:	22c2      	movs	r2, #194	; 0xc2
  408a60:	4649      	mov	r1, r9
  408a62:	4628      	mov	r0, r5
  408a64:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  408a66:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  408a6a:	22c3      	movs	r2, #195	; 0xc3
  408a6c:	4649      	mov	r1, r9
  408a6e:	4628      	mov	r0, r5
  408a70:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  408a72:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  408a76:	22c9      	movs	r2, #201	; 0xc9
  408a78:	4649      	mov	r1, r9
  408a7a:	4628      	mov	r0, r5
  408a7c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408b20 <style_snapshot+0x204>
  408a80:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  408a82:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  408a86:	22ca      	movs	r2, #202	; 0xca
  408a88:	4649      	mov	r1, r9
  408a8a:	4628      	mov	r0, r5
  408a8c:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  408a8e:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408a92:	f248 020c 	movw	r2, #32780	; 0x800c
  408a96:	4649      	mov	r1, r9
  408a98:	4628      	mov	r0, r5
  408a9a:	4b1f      	ldr	r3, [pc, #124]	; (408b18 <style_snapshot+0x1fc>)
  408a9c:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  408a9e:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408aa2:	2202      	movs	r2, #2
  408aa4:	4649      	mov	r1, r9
  408aa6:	4628      	mov	r0, r5
  408aa8:	47b0      	blx	r6
  408aaa:	3000      	adds	r0, #0
  408aac:	bf18      	it	ne
  408aae:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  408ab0:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408ab4:	f360 0300 	bfi	r3, r0, #0, #1
  408ab8:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408abc:	2233      	movs	r2, #51	; 0x33
  408abe:	4649      	mov	r1, r9
  408ac0:	4628      	mov	r0, r5
  408ac2:	47b0      	blx	r6
  408ac4:	3000      	adds	r0, #0
  408ac6:	bf18      	it	ne
  408ac8:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  408aca:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408ace:	f360 0341 	bfi	r3, r0, #1, #1
  408ad2:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  408ad6:	2100      	movs	r1, #0
  408ad8:	4628      	mov	r0, r5
  408ada:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408adc:	797b      	ldrb	r3, [r7, #5]
  408ade:	f36b 0300 	bfi	r3, fp, #0, #1
  408ae2:	717b      	strb	r3, [r7, #5]
}
  408ae4:	b003      	add	sp, #12
  408ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408aea:	bf00      	nop
  408aec:	004166bd 	.word	0x004166bd
  408af0:	00412065 	.word	0x00412065
  408af4:	0040dc2d 	.word	0x0040dc2d
  408af8:	0040d099 	.word	0x0040d099
  408afc:	0040ea7d 	.word	0x0040ea7d
  408b00:	00405a1d 	.word	0x00405a1d
  408b04:	004080cd 	.word	0x004080cd
  408b08:	004086fd 	.word	0x004086fd
  408b0c:	004087c5 	.word	0x004087c5
  408b10:	00408875 	.word	0x00408875
  408b14:	00407255 	.word	0x00407255
  408b18:	00406cc9 	.word	0x00406cc9
  408b1c:	00405b11 	.word	0x00405b11
  408b20:	00406c41 	.word	0x00406c41

00408b24 <lv_obj_set_state>:
    if(obj->state == new_state) return;
  408b24:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  408b28:	428b      	cmp	r3, r1
  408b2a:	f000 80e4 	beq.w	408cf6 <lv_obj_set_state+0x1d2>
{
  408b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b32:	b0e5      	sub	sp, #404	; 0x194
  408b34:	4688      	mov	r8, r1
  408b36:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408b38:	4b6f      	ldr	r3, [pc, #444]	; (408cf8 <lv_obj_set_state+0x1d4>)
  408b3a:	4798      	blx	r3
  408b3c:	b120      	cbz	r0, 408b48 <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  408b3e:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408b42:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  408b44:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408b46:	e007      	b.n	408b58 <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408b48:	4622      	mov	r2, r4
  408b4a:	2300      	movs	r3, #0
  408b4c:	486b      	ldr	r0, [pc, #428]	; (408cfc <lv_obj_set_state+0x1d8>)
  408b4e:	496c      	ldr	r1, [pc, #432]	; (408d00 <lv_obj_set_state+0x1dc>)
  408b50:	4788      	blx	r1
  408b52:	e7fe      	b.n	408b52 <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408b54:	3501      	adds	r5, #1
  408b56:	b2ed      	uxtb	r5, r5
  408b58:	2d3f      	cmp	r5, #63	; 0x3f
  408b5a:	d81c      	bhi.n	408b96 <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408b5c:	4629      	mov	r1, r5
  408b5e:	4620      	mov	r0, r4
  408b60:	4b68      	ldr	r3, [pc, #416]	; (408d04 <lv_obj_set_state+0x1e0>)
  408b62:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408b64:	b1b8      	cbz	r0, 408b96 <lv_obj_set_state+0x72>
        obj->state = prev_state;
  408b66:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  408b6a:	aa06      	add	r2, sp, #24
  408b6c:	4629      	mov	r1, r5
  408b6e:	4620      	mov	r0, r4
  408b70:	4e65      	ldr	r6, [pc, #404]	; (408d08 <lv_obj_set_state+0x1e4>)
  408b72:	47b0      	blx	r6
        obj->state = new_state;
  408b74:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  408b78:	aa35      	add	r2, sp, #212	; 0xd4
  408b7a:	4629      	mov	r1, r5
  408b7c:	4620      	mov	r0, r4
  408b7e:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  408b80:	a935      	add	r1, sp, #212	; 0xd4
  408b82:	a806      	add	r0, sp, #24
  408b84:	4b61      	ldr	r3, [pc, #388]	; (408d0c <lv_obj_set_state+0x1e8>)
  408b86:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  408b88:	2802      	cmp	r0, #2
  408b8a:	d003      	beq.n	408b94 <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  408b8c:	2801      	cmp	r0, #1
  408b8e:	d1e1      	bne.n	408b54 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  408b90:	4683      	mov	fp, r0
  408b92:	e7df      	b.n	408b54 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  408b94:	4683      	mov	fp, r0
    obj->state = new_state;
  408b96:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  408b9a:	f1bb 0f00 	cmp.w	fp, #0
  408b9e:	f000 80a3 	beq.w	408ce8 <lv_obj_set_state+0x1c4>
  408ba2:	2500      	movs	r5, #0
  408ba4:	f8cd a014 	str.w	sl, [sp, #20]
  408ba8:	e04b      	b.n	408c42 <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  408baa:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  408bae:	f36f 0300 	bfc	r3, #0, #1
  408bb2:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  408bb6:	a835      	add	r0, sp, #212	; 0xd4
  408bb8:	4b55      	ldr	r3, [pc, #340]	; (408d10 <lv_obj_set_state+0x1ec>)
  408bba:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408bbc:	3601      	adds	r6, #1
  408bbe:	b2f6      	uxtb	r6, r6
  408bc0:	2e05      	cmp	r6, #5
  408bc2:	d836      	bhi.n	408c32 <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  408bc4:	ab06      	add	r3, sp, #24
  408bc6:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  408bca:	2f00      	cmp	r7, #0
  408bcc:	d0f6      	beq.n	408bbc <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  408bce:	4650      	mov	r0, sl
  408bd0:	4b50      	ldr	r3, [pc, #320]	; (408d14 <lv_obj_set_state+0x1f0>)
  408bd2:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  408bd4:	f8cd 8000 	str.w	r8, [sp]
  408bd8:	9b05      	ldr	r3, [sp, #20]
  408bda:	462a      	mov	r2, r5
  408bdc:	4639      	mov	r1, r7
  408bde:	4620      	mov	r0, r4
  408be0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408d3c <lv_obj_set_state+0x218>
  408be4:	47c8      	blx	r9
                if(tr) {
  408be6:	4681      	mov	r9, r0
  408be8:	2800      	cmp	r0, #0
  408bea:	d0e7      	beq.n	408bbc <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408bec:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408bee:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408bf0:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  408bf2:	a835      	add	r0, sp, #212	; 0xd4
  408bf4:	4b48      	ldr	r3, [pc, #288]	; (408d18 <lv_obj_set_state+0x1f4>)
  408bf6:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408bf8:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408bfc:	4b47      	ldr	r3, [pc, #284]	; (408d1c <lv_obj_set_state+0x1f8>)
  408bfe:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408c00:	4b47      	ldr	r3, [pc, #284]	; (408d20 <lv_obj_set_state+0x1fc>)
  408c02:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  408c04:	4b47      	ldr	r3, [pc, #284]	; (408d24 <lv_obj_set_state+0x200>)
  408c06:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  408c08:	2300      	movs	r3, #0
  408c0a:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408c0c:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408c0e:	23ff      	movs	r3, #255	; 0xff
  408c10:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  408c12:	9b04      	ldr	r3, [sp, #16]
  408c14:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  408c16:	9b03      	ldr	r3, [sp, #12]
  408c18:	425b      	negs	r3, r3
  408c1a:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408c1c:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408c1e:	aa39      	add	r2, sp, #228	; 0xe4
  408c20:	2308      	movs	r3, #8
    while(len) {
  408c22:	2b00      	cmp	r3, #0
  408c24:	d0c1      	beq.n	408baa <lv_obj_set_state+0x86>
        *d8 = *s8;
  408c26:	f811 0b01 	ldrb.w	r0, [r1], #1
  408c2a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408c2e:	3b01      	subs	r3, #1
  408c30:	e7f7      	b.n	408c22 <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408c32:	f1bb 0f02 	cmp.w	fp, #2
  408c36:	d048      	beq.n	408cca <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408c38:	f1bb 0f01 	cmp.w	fp, #1
  408c3c:	d04b      	beq.n	408cd6 <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  408c3e:	3501      	adds	r5, #1
  408c40:	b2ed      	uxtb	r5, r5
  408c42:	2d3f      	cmp	r5, #63	; 0x3f
  408c44:	d84d      	bhi.n	408ce2 <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408c46:	4629      	mov	r1, r5
  408c48:	4620      	mov	r0, r4
  408c4a:	4b2e      	ldr	r3, [pc, #184]	; (408d04 <lv_obj_set_state+0x1e0>)
  408c4c:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408c4e:	4682      	mov	sl, r0
  408c50:	2800      	cmp	r0, #0
  408c52:	d046      	beq.n	408ce2 <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  408c54:	7943      	ldrb	r3, [r0, #5]
  408c56:	f013 0f02 	tst.w	r3, #2
  408c5a:	d1f0      	bne.n	408c3e <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408c5c:	22b0      	movs	r2, #176	; 0xb0
  408c5e:	4629      	mov	r1, r5
  408c60:	4620      	mov	r0, r4
  408c62:	4e31      	ldr	r6, [pc, #196]	; (408d28 <lv_obj_set_state+0x204>)
  408c64:	47b0      	blx	r6
  408c66:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  408c68:	22b1      	movs	r2, #177	; 0xb1
  408c6a:	4629      	mov	r1, r5
  408c6c:	4620      	mov	r0, r4
  408c6e:	47b0      	blx	r6
  408c70:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  408c72:	22be      	movs	r2, #190	; 0xbe
  408c74:	4629      	mov	r1, r5
  408c76:	4620      	mov	r0, r4
  408c78:	4b2c      	ldr	r3, [pc, #176]	; (408d2c <lv_obj_set_state+0x208>)
  408c7a:	4798      	blx	r3
  408c7c:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  408c7e:	22b2      	movs	r2, #178	; 0xb2
  408c80:	4629      	mov	r1, r5
  408c82:	4620      	mov	r0, r4
  408c84:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  408c86:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  408c8a:	22b3      	movs	r2, #179	; 0xb3
  408c8c:	4629      	mov	r1, r5
  408c8e:	4620      	mov	r0, r4
  408c90:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  408c92:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  408c96:	22b4      	movs	r2, #180	; 0xb4
  408c98:	4629      	mov	r1, r5
  408c9a:	4620      	mov	r0, r4
  408c9c:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  408c9e:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  408ca2:	22b5      	movs	r2, #181	; 0xb5
  408ca4:	4629      	mov	r1, r5
  408ca6:	4620      	mov	r0, r4
  408ca8:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  408caa:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  408cae:	22b6      	movs	r2, #182	; 0xb6
  408cb0:	4629      	mov	r1, r5
  408cb2:	4620      	mov	r0, r4
  408cb4:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  408cb6:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  408cba:	22b7      	movs	r2, #183	; 0xb7
  408cbc:	4629      	mov	r1, r5
  408cbe:	4620      	mov	r0, r4
  408cc0:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  408cc2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  408cc6:	2600      	movs	r6, #0
  408cc8:	e77a      	b.n	408bc0 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408cca:	22ff      	movs	r2, #255	; 0xff
  408ccc:	4629      	mov	r1, r5
  408cce:	4620      	mov	r0, r4
  408cd0:	4b17      	ldr	r3, [pc, #92]	; (408d30 <lv_obj_set_state+0x20c>)
  408cd2:	4798      	blx	r3
  408cd4:	e7b0      	b.n	408c38 <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  408cd6:	22ff      	movs	r2, #255	; 0xff
  408cd8:	4629      	mov	r1, r5
  408cda:	4620      	mov	r0, r4
  408cdc:	4b15      	ldr	r3, [pc, #84]	; (408d34 <lv_obj_set_state+0x210>)
  408cde:	4798      	blx	r3
  408ce0:	e7ad      	b.n	408c3e <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408ce2:	f1bb 0f01 	cmp.w	fp, #1
  408ce6:	d002      	beq.n	408cee <lv_obj_set_state+0x1ca>
}
  408ce8:	b065      	add	sp, #404	; 0x194
  408cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408cee:	4620      	mov	r0, r4
  408cf0:	4b11      	ldr	r3, [pc, #68]	; (408d38 <lv_obj_set_state+0x214>)
  408cf2:	4798      	blx	r3
  408cf4:	e7f8      	b.n	408ce8 <lv_obj_set_state+0x1c4>
  408cf6:	4770      	bx	lr
  408cf8:	00415a81 	.word	0x00415a81
  408cfc:	00428ca8 	.word	0x00428ca8
  408d00:	00415a8d 	.word	0x00415a8d
  408d04:	00405a1d 	.word	0x00405a1d
  408d08:	0040891d 	.word	0x0040891d
  408d0c:	004052bd 	.word	0x004052bd
  408d10:	0041504d 	.word	0x0041504d
  408d14:	0040ab5d 	.word	0x0040ab5d
  408d18:	00414f95 	.word	0x00414f95
  408d1c:	00407901 	.word	0x00407901
  408d20:	00407a59 	.word	0x00407a59
  408d24:	00405b59 	.word	0x00405b59
  408d28:	00407255 	.word	0x00407255
  408d2c:	0040714d 	.word	0x0040714d
  408d30:	00407671 	.word	0x00407671
  408d34:	004075f5 	.word	0x004075f5
  408d38:	00405d69 	.word	0x00405d69
  408d3c:	00407acd 	.word	0x00407acd

00408d40 <lv_obj_add_state>:
{
  408d40:	b538      	push	{r3, r4, r5, lr}
  408d42:	4605      	mov	r5, r0
  408d44:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408d46:	4b09      	ldr	r3, [pc, #36]	; (408d6c <lv_obj_add_state+0x2c>)
  408d48:	4798      	blx	r3
  408d4a:	b148      	cbz	r0, 408d60 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  408d4c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408d50:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  408d54:	428b      	cmp	r3, r1
  408d56:	d002      	beq.n	408d5e <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  408d58:	4628      	mov	r0, r5
  408d5a:	4b05      	ldr	r3, [pc, #20]	; (408d70 <lv_obj_add_state+0x30>)
  408d5c:	4798      	blx	r3
  408d5e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408d60:	462a      	mov	r2, r5
  408d62:	2300      	movs	r3, #0
  408d64:	4803      	ldr	r0, [pc, #12]	; (408d74 <lv_obj_add_state+0x34>)
  408d66:	4904      	ldr	r1, [pc, #16]	; (408d78 <lv_obj_add_state+0x38>)
  408d68:	4788      	blx	r1
  408d6a:	e7fe      	b.n	408d6a <lv_obj_add_state+0x2a>
  408d6c:	00415a81 	.word	0x00415a81
  408d70:	00408b25 	.word	0x00408b25
  408d74:	00428ca8 	.word	0x00428ca8
  408d78:	00415a8d 	.word	0x00415a8d

00408d7c <lv_obj_clear_state>:
{
  408d7c:	b538      	push	{r3, r4, r5, lr}
  408d7e:	4604      	mov	r4, r0
  408d80:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408d82:	4b0a      	ldr	r3, [pc, #40]	; (408dac <lv_obj_clear_state+0x30>)
  408d84:	4798      	blx	r3
  408d86:	b158      	cbz	r0, 408da0 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  408d88:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  408d8c:	b259      	sxtb	r1, r3
  408d8e:	ea21 0105 	bic.w	r1, r1, r5
  408d92:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  408d94:	428b      	cmp	r3, r1
  408d96:	d002      	beq.n	408d9e <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  408d98:	4620      	mov	r0, r4
  408d9a:	4b05      	ldr	r3, [pc, #20]	; (408db0 <lv_obj_clear_state+0x34>)
  408d9c:	4798      	blx	r3
  408d9e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408da0:	4622      	mov	r2, r4
  408da2:	2300      	movs	r3, #0
  408da4:	4803      	ldr	r0, [pc, #12]	; (408db4 <lv_obj_clear_state+0x38>)
  408da6:	4904      	ldr	r1, [pc, #16]	; (408db8 <lv_obj_clear_state+0x3c>)
  408da8:	4788      	blx	r1
  408daa:	e7fe      	b.n	408daa <lv_obj_clear_state+0x2e>
  408dac:	00415a81 	.word	0x00415a81
  408db0:	00408b25 	.word	0x00408b25
  408db4:	00428ca8 	.word	0x00428ca8
  408db8:	00415a8d 	.word	0x00415a8d

00408dbc <lv_obj_get_draw_rect_ext_pad_size>:
{
  408dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408dc0:	b089      	sub	sp, #36	; 0x24
  408dc2:	4604      	mov	r4, r0
  408dc4:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  408dc6:	2250      	movs	r2, #80	; 0x50
  408dc8:	4b78      	ldr	r3, [pc, #480]	; (408fac <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408dca:	4798      	blx	r3
    if(sh_width) {
  408dcc:	4607      	mov	r7, r0
  408dce:	bb68      	cbnz	r0, 408e2c <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  408dd0:	227f      	movs	r2, #127	; 0x7f
  408dd2:	4631      	mov	r1, r6
  408dd4:	4620      	mov	r0, r4
  408dd6:	4b76      	ldr	r3, [pc, #472]	; (408fb0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408dd8:	4798      	blx	r3
    if(value_str) {
  408dda:	4605      	mov	r5, r0
  408ddc:	b130      	cbz	r0, 408dec <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408dde:	227c      	movs	r2, #124	; 0x7c
  408de0:	4631      	mov	r1, r6
  408de2:	4620      	mov	r0, r4
  408de4:	4b73      	ldr	r3, [pc, #460]	; (408fb4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408de6:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  408de8:	2802      	cmp	r0, #2
  408dea:	d851      	bhi.n	408e90 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  408dec:	2240      	movs	r2, #64	; 0x40
  408dee:	4631      	mov	r1, r6
  408df0:	4620      	mov	r0, r4
  408df2:	4b6e      	ldr	r3, [pc, #440]	; (408fac <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408df4:	4798      	blx	r3
    if(outline_width) {
  408df6:	4605      	mov	r5, r0
  408df8:	2800      	cmp	r0, #0
  408dfa:	f040 80c4 	bne.w	408f86 <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408dfe:	2204      	movs	r2, #4
  408e00:	4631      	mov	r1, r6
  408e02:	4620      	mov	r0, r4
  408e04:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 408fac <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408e08:	47c0      	blx	r8
  408e0a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408e0c:	2205      	movs	r2, #5
  408e0e:	4631      	mov	r1, r6
  408e10:	4620      	mov	r0, r4
  408e12:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  408e14:	42a8      	cmp	r0, r5
  408e16:	bfb8      	it	lt
  408e18:	4628      	movlt	r0, r5
  408e1a:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  408e1c:	2800      	cmp	r0, #0
  408e1e:	dd01      	ble.n	408e24 <lv_obj_get_draw_rect_ext_pad_size+0x68>
  408e20:	4438      	add	r0, r7
  408e22:	b207      	sxth	r7, r0
}
  408e24:	4638      	mov	r0, r7
  408e26:	b009      	add	sp, #36	; 0x24
  408e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  408e2c:	225c      	movs	r2, #92	; 0x5c
  408e2e:	4631      	mov	r1, r6
  408e30:	4620      	mov	r0, r4
  408e32:	4b60      	ldr	r3, [pc, #384]	; (408fb4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408e34:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  408e36:	2802      	cmp	r0, #2
  408e38:	d801      	bhi.n	408e3e <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  408e3a:	2700      	movs	r7, #0
  408e3c:	e7c8      	b.n	408dd0 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  408e3e:	463b      	mov	r3, r7
  408e40:	2f00      	cmp	r7, #0
  408e42:	db23      	blt.n	408e8c <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  408e44:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  408e48:	3701      	adds	r7, #1
  408e4a:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  408e4c:	2253      	movs	r2, #83	; 0x53
  408e4e:	4631      	mov	r1, r6
  408e50:	4620      	mov	r0, r4
  408e52:	f8df 8158 	ldr.w	r8, [pc, #344]	; 408fac <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408e56:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  408e58:	fa17 f780 	uxtah	r7, r7, r0
  408e5c:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  408e5e:	2251      	movs	r2, #81	; 0x51
  408e60:	4631      	mov	r1, r6
  408e62:	4620      	mov	r0, r4
  408e64:	47c0      	blx	r8
  408e66:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  408e68:	2252      	movs	r2, #82	; 0x52
  408e6a:	4631      	mov	r1, r6
  408e6c:	4620      	mov	r0, r4
  408e6e:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  408e70:	2800      	cmp	r0, #0
  408e72:	bfb8      	it	lt
  408e74:	4240      	neglt	r0, r0
  408e76:	2d00      	cmp	r5, #0
  408e78:	bfb8      	it	lt
  408e7a:	426d      	neglt	r5, r5
  408e7c:	42a8      	cmp	r0, r5
  408e7e:	bfac      	ite	ge
  408e80:	183f      	addge	r7, r7, r0
  408e82:	197f      	addlt	r7, r7, r5
  408e84:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  408e86:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  408e8a:	e7a1      	b.n	408dd0 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  408e8c:	1c7b      	adds	r3, r7, #1
  408e8e:	e7d9      	b.n	408e44 <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  408e90:	2270      	movs	r2, #112	; 0x70
  408e92:	4631      	mov	r1, r6
  408e94:	4620      	mov	r0, r4
  408e96:	f8df 8114 	ldr.w	r8, [pc, #276]	; 408fac <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408e9a:	47c0      	blx	r8
  408e9c:	4682      	mov	sl, r0
  408e9e:	2270      	movs	r2, #112	; 0x70
  408ea0:	4631      	mov	r1, r6
  408ea2:	4620      	mov	r0, r4
  408ea4:	47c0      	blx	r8
  408ea6:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  408ea8:	227e      	movs	r2, #126	; 0x7e
  408eaa:	4631      	mov	r1, r6
  408eac:	4620      	mov	r0, r4
  408eae:	4b40      	ldr	r3, [pc, #256]	; (408fb0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408eb0:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  408eb2:	f04f 0900 	mov.w	r9, #0
  408eb6:	f8cd 9008 	str.w	r9, [sp, #8]
  408eba:	f647 4318 	movw	r3, #31768	; 0x7c18
  408ebe:	9301      	str	r3, [sp, #4]
  408ec0:	f8cd b000 	str.w	fp, [sp]
  408ec4:	4653      	mov	r3, sl
  408ec6:	4602      	mov	r2, r0
  408ec8:	4629      	mov	r1, r5
  408eca:	a804      	add	r0, sp, #16
  408ecc:	4d3a      	ldr	r5, [pc, #232]	; (408fb8 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  408ece:	47a8      	blx	r5
            value_area.x1 = 0;
  408ed0:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  408ed4:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  408ed8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  408edc:	3b01      	subs	r3, #1
  408ede:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  408ee2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  408ee6:	3b01      	subs	r3, #1
  408ee8:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  408eec:	2275      	movs	r2, #117	; 0x75
  408eee:	4631      	mov	r1, r6
  408ef0:	4620      	mov	r0, r4
  408ef2:	47c0      	blx	r8
  408ef4:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  408ef8:	2273      	movs	r2, #115	; 0x73
  408efa:	4631      	mov	r1, r6
  408efc:	4620      	mov	r0, r4
  408efe:	47c0      	blx	r8
  408f00:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  408f02:	2274      	movs	r2, #116	; 0x74
  408f04:	4631      	mov	r1, r6
  408f06:	4620      	mov	r0, r4
  408f08:	47c0      	blx	r8
  408f0a:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  408f0c:	ab05      	add	r3, sp, #20
  408f0e:	464a      	mov	r2, r9
  408f10:	a906      	add	r1, sp, #24
  408f12:	f104 0010 	add.w	r0, r4, #16
  408f16:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408fbc <lv_obj_get_draw_rect_ext_pad_size+0x200>
  408f1a:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  408f1c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  408f20:	442a      	add	r2, r5
  408f22:	b292      	uxth	r2, r2
  408f24:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  408f28:	4410      	add	r0, r2
  408f2a:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  408f2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  408f30:	4443      	add	r3, r8
  408f32:	b29b      	uxth	r3, r3
  408f34:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  408f38:	4419      	add	r1, r3
  408f3a:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  408f3c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  408f40:	4402      	add	r2, r0
  408f42:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  408f44:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  408f48:	4403      	add	r3, r0
  408f4a:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  408f4c:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  408f50:	1b40      	subs	r0, r0, r5
  408f52:	42b8      	cmp	r0, r7
  408f54:	bfb8      	it	lt
  408f56:	4638      	movlt	r0, r7
  408f58:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  408f5a:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  408f5e:	1a69      	subs	r1, r5, r1
  408f60:	4288      	cmp	r0, r1
  408f62:	bfb8      	it	lt
  408f64:	4608      	movlt	r0, r1
  408f66:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  408f68:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  408f6c:	1a52      	subs	r2, r2, r1
  408f6e:	4290      	cmp	r0, r2
  408f70:	bfb8      	it	lt
  408f72:	4610      	movlt	r0, r2
  408f74:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  408f76:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  408f7a:	1bdf      	subs	r7, r3, r7
  408f7c:	42b8      	cmp	r0, r7
  408f7e:	bfb8      	it	lt
  408f80:	4638      	movlt	r0, r7
  408f82:	b207      	sxth	r7, r0
  408f84:	e732      	b.n	408dec <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  408f86:	224c      	movs	r2, #76	; 0x4c
  408f88:	4631      	mov	r1, r6
  408f8a:	4620      	mov	r0, r4
  408f8c:	4b09      	ldr	r3, [pc, #36]	; (408fb4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408f8e:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  408f90:	2802      	cmp	r0, #2
  408f92:	f67f af34 	bls.w	408dfe <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  408f96:	2241      	movs	r2, #65	; 0x41
  408f98:	4631      	mov	r1, r6
  408f9a:	4620      	mov	r0, r4
  408f9c:	4b03      	ldr	r3, [pc, #12]	; (408fac <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408f9e:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  408fa0:	4428      	add	r0, r5
  408fa2:	42b8      	cmp	r0, r7
  408fa4:	bfb8      	it	lt
  408fa6:	4638      	movlt	r0, r7
  408fa8:	b207      	sxth	r7, r0
  408faa:	e728      	b.n	408dfe <lv_obj_get_draw_rect_ext_pad_size+0x42>
  408fac:	00407255 	.word	0x00407255
  408fb0:	0040714d 	.word	0x0040714d
  408fb4:	00406cc9 	.word	0x00406cc9
  408fb8:	00417a51 	.word	0x00417a51
  408fbc:	004154f9 	.word	0x004154f9

00408fc0 <lv_obj_get_focused_obj>:
{
  408fc0:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  408fc2:	4604      	mov	r4, r0
  408fc4:	b928      	cbnz	r0, 408fd2 <lv_obj_get_focused_obj+0x12>
  408fc6:	2000      	movs	r0, #0
  408fc8:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  408fca:	4620      	mov	r0, r4
  408fcc:	4b06      	ldr	r3, [pc, #24]	; (408fe8 <lv_obj_get_focused_obj+0x28>)
  408fce:	4798      	blx	r3
  408fd0:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  408fd2:	4620      	mov	r0, r4
  408fd4:	4b05      	ldr	r3, [pc, #20]	; (408fec <lv_obj_get_focused_obj+0x2c>)
  408fd6:	4798      	blx	r3
  408fd8:	b118      	cbz	r0, 408fe2 <lv_obj_get_focused_obj+0x22>
  408fda:	2c00      	cmp	r4, #0
  408fdc:	d1f5      	bne.n	408fca <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  408fde:	4620      	mov	r0, r4
  408fe0:	bd10      	pop	{r4, pc}
  408fe2:	4620      	mov	r0, r4
}
  408fe4:	bd10      	pop	{r4, pc}
  408fe6:	bf00      	nop
  408fe8:	004057bd 	.word	0x004057bd
  408fec:	004065f1 	.word	0x004065f1

00408ff0 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  408ff0:	2908      	cmp	r1, #8
  408ff2:	d01a      	beq.n	40902a <lv_obj_signal+0x3a>
{
  408ff4:	b510      	push	{r4, lr}
  408ff6:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408ff8:	2907      	cmp	r1, #7
  408ffa:	d020      	beq.n	40903e <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  408ffc:	2901      	cmp	r1, #1
  408ffe:	d023      	beq.n	409048 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  409000:	2906      	cmp	r1, #6
  409002:	d027      	beq.n	409054 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  409004:	2903      	cmp	r1, #3
  409006:	d030      	beq.n	40906a <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  409008:	2904      	cmp	r1, #4
  40900a:	d039      	beq.n	409080 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  40900c:	290b      	cmp	r1, #11
  40900e:	d03b      	beq.n	409088 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  409010:	f1a1 030d 	sub.w	r3, r1, #13
  409014:	b2db      	uxtb	r3, r3
  409016:	2b01      	cmp	r3, #1
  409018:	d93b      	bls.n	409092 <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  40901a:	2916      	cmp	r1, #22
  40901c:	d03e      	beq.n	40909c <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  40901e:	2917      	cmp	r1, #23
  409020:	d056      	beq.n	4090d0 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  409022:	2900      	cmp	r1, #0
  409024:	d05b      	beq.n	4090de <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  409026:	2001      	movs	r0, #1
}
  409028:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  40902a:	7813      	ldrb	r3, [r2, #0]
  40902c:	b91b      	cbnz	r3, 409036 <lv_obj_signal+0x46>
  40902e:	3028      	adds	r0, #40	; 0x28
  409030:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  409032:	2001      	movs	r0, #1
  409034:	4770      	bx	lr
        else info->result = NULL;
  409036:	2300      	movs	r3, #0
  409038:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  40903a:	2001      	movs	r0, #1
  40903c:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  40903e:	492b      	ldr	r1, [pc, #172]	; (4090ec <lv_obj_signal+0xfc>)
  409040:	4610      	mov	r0, r2
  409042:	4b2b      	ldr	r3, [pc, #172]	; (4090f0 <lv_obj_signal+0x100>)
  409044:	4798      	blx	r3
  409046:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  409048:	4b2a      	ldr	r3, [pc, #168]	; (4090f4 <lv_obj_signal+0x104>)
  40904a:	4798      	blx	r3
  40904c:	2800      	cmp	r0, #0
  40904e:	d14a      	bne.n	4090e6 <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  409050:	2001      	movs	r0, #1
  409052:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  409054:	2100      	movs	r1, #0
  409056:	4b28      	ldr	r3, [pc, #160]	; (4090f8 <lv_obj_signal+0x108>)
  409058:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  40905a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  40905e:	4298      	cmp	r0, r3
  409060:	bfb8      	it	lt
  409062:	4618      	movlt	r0, r3
  409064:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  409066:	2001      	movs	r0, #1
  409068:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  40906a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  40906e:	f013 0f01 	tst.w	r3, #1
  409072:	d101      	bne.n	409078 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  409074:	2001      	movs	r0, #1
  409076:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  409078:	4b20      	ldr	r3, [pc, #128]	; (4090fc <lv_obj_signal+0x10c>)
  40907a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40907c:	2001      	movs	r0, #1
  40907e:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  409080:	4b1f      	ldr	r3, [pc, #124]	; (409100 <lv_obj_signal+0x110>)
  409082:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409084:	2001      	movs	r0, #1
  409086:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  409088:	2110      	movs	r1, #16
  40908a:	4b1e      	ldr	r3, [pc, #120]	; (409104 <lv_obj_signal+0x114>)
  40908c:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  40908e:	2001      	movs	r0, #1
  409090:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  409092:	2110      	movs	r1, #16
  409094:	4b1c      	ldr	r3, [pc, #112]	; (409108 <lv_obj_signal+0x118>)
  409096:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  409098:	2001      	movs	r0, #1
  40909a:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  40909c:	4b1b      	ldr	r3, [pc, #108]	; (40910c <lv_obj_signal+0x11c>)
  40909e:	4798      	blx	r3
  4090a0:	4b1b      	ldr	r3, [pc, #108]	; (409110 <lv_obj_signal+0x120>)
  4090a2:	4798      	blx	r3
        if(editing) {
  4090a4:	b138      	cbz	r0, 4090b6 <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  4090a6:	4620      	mov	r0, r4
  4090a8:	4b1a      	ldr	r3, [pc, #104]	; (409114 <lv_obj_signal+0x124>)
  4090aa:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  4090ac:	2106      	movs	r1, #6
  4090ae:	4b15      	ldr	r3, [pc, #84]	; (409104 <lv_obj_signal+0x114>)
  4090b0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4090b2:	2001      	movs	r0, #1
  4090b4:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  4090b6:	4620      	mov	r0, r4
  4090b8:	4b16      	ldr	r3, [pc, #88]	; (409114 <lv_obj_signal+0x124>)
  4090ba:	4798      	blx	r3
  4090bc:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  4090be:	2102      	movs	r1, #2
  4090c0:	4b10      	ldr	r3, [pc, #64]	; (409104 <lv_obj_signal+0x114>)
  4090c2:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  4090c4:	2104      	movs	r1, #4
  4090c6:	4620      	mov	r0, r4
  4090c8:	4b0f      	ldr	r3, [pc, #60]	; (409108 <lv_obj_signal+0x118>)
  4090ca:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4090cc:	2001      	movs	r0, #1
  4090ce:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  4090d0:	4b10      	ldr	r3, [pc, #64]	; (409114 <lv_obj_signal+0x124>)
  4090d2:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  4090d4:	2106      	movs	r1, #6
  4090d6:	4b0c      	ldr	r3, [pc, #48]	; (409108 <lv_obj_signal+0x118>)
  4090d8:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4090da:	2001      	movs	r0, #1
  4090dc:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  4090de:	4b0e      	ldr	r3, [pc, #56]	; (409118 <lv_obj_signal+0x128>)
  4090e0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  4090e2:	2001      	movs	r0, #1
  4090e4:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  4090e6:	2000      	movs	r0, #0
  4090e8:	bd10      	pop	{r4, pc}
  4090ea:	bf00      	nop
  4090ec:	00428cb8 	.word	0x00428cb8
  4090f0:	004080b1 	.word	0x004080b1
  4090f4:	00406bbd 	.word	0x00406bbd
  4090f8:	00408dbd 	.word	0x00408dbd
  4090fc:	00406485 	.word	0x00406485
  409100:	0040578d 	.word	0x0040578d
  409104:	00408d41 	.word	0x00408d41
  409108:	00408d7d 	.word	0x00408d7d
  40910c:	00407e4d 	.word	0x00407e4d
  409110:	00403949 	.word	0x00403949
  409114:	00408fc1 	.word	0x00408fc1
  409118:	00405ae5 	.word	0x00405ae5

0040911c <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  40911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409120:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  409122:	2500      	movs	r5, #0
  409124:	e057      	b.n	4091d6 <lv_refr_join_area+0xba>
        *d8 = *s8;
  409126:	f811 0b01 	ldrb.w	r0, [r1], #1
  40912a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40912e:	3b01      	subs	r3, #1
    while(len) {
  409130:	2b00      	cmp	r3, #0
  409132:	d1f8      	bne.n	409126 <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  409134:	4426      	add	r6, r4
  409136:	2301      	movs	r3, #1
  409138:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  40913c:	3401      	adds	r4, #1
  40913e:	4b2f      	ldr	r3, [pc, #188]	; (4091fc <lv_refr_join_area+0xe0>)
  409140:	6819      	ldr	r1, [r3, #0]
  409142:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  409146:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40914a:	429c      	cmp	r4, r3
  40914c:	d242      	bcs.n	4091d4 <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  40914e:	190b      	adds	r3, r1, r4
  409150:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409154:	2b00      	cmp	r3, #0
  409156:	d1f1      	bne.n	40913c <lv_refr_join_area+0x20>
  409158:	42ac      	cmp	r4, r5
  40915a:	d0ef      	beq.n	40913c <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  40915c:	f105 000c 	add.w	r0, r5, #12
  409160:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  409164:	f104 030c 	add.w	r3, r4, #12
  409168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40916c:	3102      	adds	r1, #2
  40916e:	3002      	adds	r0, #2
  409170:	4b23      	ldr	r3, [pc, #140]	; (409200 <lv_refr_join_area+0xe4>)
  409172:	4798      	blx	r3
  409174:	2800      	cmp	r0, #0
  409176:	d0e1      	beq.n	40913c <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  409178:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4091fc <lv_refr_join_area+0xe0>
  40917c:	f8d8 2000 	ldr.w	r2, [r8]
  409180:	f105 070c 	add.w	r7, r5, #12
  409184:	00ff      	lsls	r7, r7, #3
  409186:	19d1      	adds	r1, r2, r7
  409188:	f104 060c 	add.w	r6, r4, #12
  40918c:	00f6      	lsls	r6, r6, #3
  40918e:	4432      	add	r2, r6
  409190:	3202      	adds	r2, #2
  409192:	3102      	adds	r1, #2
  409194:	4668      	mov	r0, sp
  409196:	4b1b      	ldr	r3, [pc, #108]	; (409204 <lv_refr_join_area+0xe8>)
  409198:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  40919a:	4668      	mov	r0, sp
  40919c:	f8df a068 	ldr.w	sl, [pc, #104]	; 409208 <lv_refr_join_area+0xec>
  4091a0:	47d0      	blx	sl
  4091a2:	4681      	mov	r9, r0
  4091a4:	f8d8 0000 	ldr.w	r0, [r8]
  4091a8:	4438      	add	r0, r7
  4091aa:	3002      	adds	r0, #2
  4091ac:	47d0      	blx	sl
  4091ae:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  4091b0:	f8d8 0000 	ldr.w	r0, [r8]
  4091b4:	4430      	add	r0, r6
  4091b6:	3002      	adds	r0, #2
  4091b8:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  4091ba:	4438      	add	r0, r7
  4091bc:	4581      	cmp	r9, r0
  4091be:	d2bd      	bcs.n	40913c <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  4091c0:	f8d8 6000 	ldr.w	r6, [r8]
  4091c4:	f105 020c 	add.w	r2, r5, #12
  4091c8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  4091cc:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  4091ce:	4669      	mov	r1, sp
  4091d0:	2308      	movs	r3, #8
  4091d2:	e7ad      	b.n	409130 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  4091d4:	3501      	adds	r5, #1
  4091d6:	4b09      	ldr	r3, [pc, #36]	; (4091fc <lv_refr_join_area+0xe0>)
  4091d8:	681b      	ldr	r3, [r3, #0]
  4091da:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4091de:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4091e2:	4295      	cmp	r5, r2
  4091e4:	d206      	bcs.n	4091f4 <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  4091e6:	442b      	add	r3, r5
  4091e8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  4091ec:	2b00      	cmp	r3, #0
  4091ee:	d1f1      	bne.n	4091d4 <lv_refr_join_area+0xb8>
  4091f0:	2400      	movs	r4, #0
  4091f2:	e7a4      	b.n	40913e <lv_refr_join_area+0x22>
            }
        }
    }
}
  4091f4:	b002      	add	sp, #8
  4091f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4091fa:	bf00      	nop
  4091fc:	2040c3a0 	.word	0x2040c3a0
  409200:	004153ed 	.word	0x004153ed
  409204:	00415213 	.word	0x00415213
  409208:	0041519f 	.word	0x0041519f

0040920c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  40920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409210:	4606      	mov	r6, r0
  409212:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  409214:	2200      	movs	r2, #0
  409216:	3110      	adds	r1, #16
  409218:	4b20      	ldr	r3, [pc, #128]	; (40929c <lv_refr_get_top_obj+0x90>)
  40921a:	4798      	blx	r3
  40921c:	b3b8      	cbz	r0, 40928e <lv_refr_get_top_obj+0x82>
  40921e:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  409222:	f013 0f10 	tst.w	r3, #16
  409226:	d134      	bne.n	409292 <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  409228:	f8d8 3020 	ldr.w	r3, [r8, #32]
  40922c:	2202      	movs	r2, #2
  40922e:	4631      	mov	r1, r6
  409230:	4640      	mov	r0, r8
  409232:	4798      	blx	r3
  409234:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  409236:	2803      	cmp	r0, #3
  409238:	d02d      	beq.n	409296 <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  40923a:	2801      	cmp	r0, #1
  40923c:	d013      	beq.n	409266 <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  40923e:	f108 0704 	add.w	r7, r8, #4
  409242:	4638      	mov	r0, r7
  409244:	4b16      	ldr	r3, [pc, #88]	; (4092a0 <lv_refr_get_top_obj+0x94>)
  409246:	4798      	blx	r3
  409248:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  40924a:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  40924c:	b1b4      	cbz	r4, 40927c <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  40924e:	4621      	mov	r1, r4
  409250:	4630      	mov	r0, r6
  409252:	f7ff ffdb 	bl	40920c <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  409256:	4605      	mov	r5, r0
  409258:	b980      	cbnz	r0, 40927c <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  40925a:	4621      	mov	r1, r4
  40925c:	4638      	mov	r0, r7
  40925e:	4b11      	ldr	r3, [pc, #68]	; (4092a4 <lv_refr_get_top_obj+0x98>)
  409260:	4798      	blx	r3
  409262:	4604      	mov	r4, r0
  409264:	e7f2      	b.n	40924c <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  409266:	f248 020c 	movw	r2, #32780	; 0x800c
  40926a:	2100      	movs	r1, #0
  40926c:	4640      	mov	r0, r8
  40926e:	4b0e      	ldr	r3, [pc, #56]	; (4092a8 <lv_refr_get_top_obj+0x9c>)
  409270:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  409272:	28ff      	cmp	r0, #255	; 0xff
  409274:	d0e3      	beq.n	40923e <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  409276:	f04f 0902 	mov.w	r9, #2
  40927a:	e7e0      	b.n	40923e <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  40927c:	b115      	cbz	r5, 409284 <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  40927e:	4628      	mov	r0, r5
  409280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  409284:	f1b9 0f01 	cmp.w	r9, #1
  409288:	d1f9      	bne.n	40927e <lv_refr_get_top_obj+0x72>
                found_p = obj;
  40928a:	4645      	mov	r5, r8
  40928c:	e7f7      	b.n	40927e <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  40928e:	2500      	movs	r5, #0
  409290:	e7f5      	b.n	40927e <lv_refr_get_top_obj+0x72>
  409292:	2500      	movs	r5, #0
  409294:	e7f3      	b.n	40927e <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  409296:	2500      	movs	r5, #0
  409298:	e7f1      	b.n	40927e <lv_refr_get_top_obj+0x72>
  40929a:	bf00      	nop
  40929c:	00415431 	.word	0x00415431
  4092a0:	00415d91 	.word	0x00415d91
  4092a4:	00415da5 	.word	0x00415da5
  4092a8:	00406cc9 	.word	0x00406cc9

004092ac <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  4092ac:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  4092b0:	f013 0f10 	tst.w	r3, #16
  4092b4:	d000      	beq.n	4092b8 <lv_refr_obj+0xc>
  4092b6:	4770      	bx	lr
{
  4092b8:	b570      	push	{r4, r5, r6, lr}
  4092ba:	b08a      	sub	sp, #40	; 0x28
  4092bc:	460e      	mov	r6, r1
  4092be:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  4092c0:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  4092c4:	a904      	add	r1, sp, #16
  4092c6:	4b33      	ldr	r3, [pc, #204]	; (409394 <lv_refr_obj+0xe8>)
  4092c8:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  4092ca:	b2a3      	uxth	r3, r4
  4092cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4092d0:	1ad2      	subs	r2, r2, r3
  4092d2:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  4092d6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  4092da:	1ad2      	subs	r2, r2, r3
  4092dc:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  4092e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  4092e4:	441a      	add	r2, r3
  4092e6:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  4092ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4092ee:	4413      	add	r3, r2
  4092f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  4092f4:	aa04      	add	r2, sp, #16
  4092f6:	4631      	mov	r1, r6
  4092f8:	a806      	add	r0, sp, #24
  4092fa:	4b27      	ldr	r3, [pc, #156]	; (409398 <lv_refr_obj+0xec>)
  4092fc:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  4092fe:	b1a8      	cbz	r0, 40932c <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  409300:	6a2b      	ldr	r3, [r5, #32]
  409302:	b11b      	cbz	r3, 40930c <lv_refr_obj+0x60>
  409304:	2200      	movs	r2, #0
  409306:	a906      	add	r1, sp, #24
  409308:	4628      	mov	r0, r5
  40930a:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  40930c:	a904      	add	r1, sp, #16
  40930e:	4628      	mov	r0, r5
  409310:	4b20      	ldr	r3, [pc, #128]	; (409394 <lv_refr_obj+0xe8>)
  409312:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  409314:	aa04      	add	r2, sp, #16
  409316:	4631      	mov	r1, r6
  409318:	a808      	add	r0, sp, #32
  40931a:	4b1f      	ldr	r3, [pc, #124]	; (409398 <lv_refr_obj+0xec>)
  40931c:	4798      	blx	r3
        if(union_ok != false) {
  40931e:	b938      	cbnz	r0, 409330 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  409320:	6a2b      	ldr	r3, [r5, #32]
  409322:	b11b      	cbz	r3, 40932c <lv_refr_obj+0x80>
  409324:	2201      	movs	r2, #1
  409326:	a906      	add	r1, sp, #24
  409328:	4628      	mov	r0, r5
  40932a:	4798      	blx	r3
    }
}
  40932c:	b00a      	add	sp, #40	; 0x28
  40932e:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  409330:	1d2e      	adds	r6, r5, #4
  409332:	4630      	mov	r0, r6
  409334:	4b19      	ldr	r3, [pc, #100]	; (40939c <lv_refr_obj+0xf0>)
  409336:	4798      	blx	r3
  409338:	4604      	mov	r4, r0
  40933a:	e004      	b.n	409346 <lv_refr_obj+0x9a>
  40933c:	4621      	mov	r1, r4
  40933e:	4630      	mov	r0, r6
  409340:	4b17      	ldr	r3, [pc, #92]	; (4093a0 <lv_refr_obj+0xf4>)
  409342:	4798      	blx	r3
  409344:	4604      	mov	r4, r0
  409346:	2c00      	cmp	r4, #0
  409348:	d0ea      	beq.n	409320 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  40934a:	a902      	add	r1, sp, #8
  40934c:	4620      	mov	r0, r4
  40934e:	4b11      	ldr	r3, [pc, #68]	; (409394 <lv_refr_obj+0xe8>)
  409350:	4798      	blx	r3
                child_area.x1 -= ext_size;
  409352:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  409354:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409358:	1ad2      	subs	r2, r2, r3
  40935a:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  40935e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  409362:	1ad2      	subs	r2, r2, r3
  409364:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  409368:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40936c:	441a      	add	r2, r3
  40936e:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  409372:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  409376:	4413      	add	r3, r2
  409378:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  40937c:	aa02      	add	r2, sp, #8
  40937e:	a908      	add	r1, sp, #32
  409380:	4668      	mov	r0, sp
  409382:	4b05      	ldr	r3, [pc, #20]	; (409398 <lv_refr_obj+0xec>)
  409384:	4798      	blx	r3
                if(union_ok) {
  409386:	2800      	cmp	r0, #0
  409388:	d0d8      	beq.n	40933c <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  40938a:	4669      	mov	r1, sp
  40938c:	4620      	mov	r0, r4
  40938e:	f7ff ff8d 	bl	4092ac <lv_refr_obj>
  409392:	e7d3      	b.n	40933c <lv_refr_obj+0x90>
  409394:	004058d1 	.word	0x004058d1
  409398:	004151bb 	.word	0x004151bb
  40939c:	00415d9b 	.word	0x00415d9b
  4093a0:	00415db3 	.word	0x00415db3

004093a4 <lv_refr_obj_and_children>:
{
  4093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4093a6:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  4093a8:	4604      	mov	r4, r0
  4093aa:	b150      	cbz	r0, 4093c2 <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  4093ac:	2c00      	cmp	r4, #0
  4093ae:	d02c      	beq.n	40940a <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  4093b0:	4631      	mov	r1, r6
  4093b2:	4620      	mov	r0, r4
  4093b4:	4b15      	ldr	r3, [pc, #84]	; (40940c <lv_refr_obj_and_children+0x68>)
  4093b6:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  4093b8:	4620      	mov	r0, r4
  4093ba:	4b15      	ldr	r3, [pc, #84]	; (409410 <lv_refr_obj_and_children+0x6c>)
  4093bc:	4798      	blx	r3
  4093be:	4607      	mov	r7, r0
    while(par != NULL) {
  4093c0:	e01b      	b.n	4093fa <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  4093c2:	4b14      	ldr	r3, [pc, #80]	; (409414 <lv_refr_obj_and_children+0x70>)
  4093c4:	6818      	ldr	r0, [r3, #0]
  4093c6:	4b14      	ldr	r3, [pc, #80]	; (409418 <lv_refr_obj_and_children+0x74>)
  4093c8:	4798      	blx	r3
  4093ca:	4604      	mov	r4, r0
  4093cc:	e7ee      	b.n	4093ac <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  4093ce:	4631      	mov	r1, r6
  4093d0:	4620      	mov	r0, r4
  4093d2:	4b0e      	ldr	r3, [pc, #56]	; (40940c <lv_refr_obj_and_children+0x68>)
  4093d4:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  4093d6:	4621      	mov	r1, r4
  4093d8:	4628      	mov	r0, r5
  4093da:	4b10      	ldr	r3, [pc, #64]	; (40941c <lv_refr_obj_and_children+0x78>)
  4093dc:	4798      	blx	r3
  4093de:	4604      	mov	r4, r0
        while(i != NULL) {
  4093e0:	2c00      	cmp	r4, #0
  4093e2:	d1f4      	bne.n	4093ce <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  4093e4:	6a3b      	ldr	r3, [r7, #32]
  4093e6:	b11b      	cbz	r3, 4093f0 <lv_refr_obj_and_children+0x4c>
  4093e8:	2201      	movs	r2, #1
  4093ea:	4631      	mov	r1, r6
  4093ec:	4638      	mov	r0, r7
  4093ee:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  4093f0:	4638      	mov	r0, r7
  4093f2:	4b07      	ldr	r3, [pc, #28]	; (409410 <lv_refr_obj_and_children+0x6c>)
  4093f4:	4798      	blx	r3
        border_p = par;
  4093f6:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  4093f8:	4607      	mov	r7, r0
    while(par != NULL) {
  4093fa:	b137      	cbz	r7, 40940a <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  4093fc:	1d3d      	adds	r5, r7, #4
  4093fe:	4621      	mov	r1, r4
  409400:	4628      	mov	r0, r5
  409402:	4b06      	ldr	r3, [pc, #24]	; (40941c <lv_refr_obj_and_children+0x78>)
  409404:	4798      	blx	r3
  409406:	4604      	mov	r4, r0
        while(i != NULL) {
  409408:	e7ea      	b.n	4093e0 <lv_refr_obj_and_children+0x3c>
  40940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40940c:	004092ad 	.word	0x004092ad
  409410:	004057bd 	.word	0x004057bd
  409414:	2040c3a0 	.word	0x2040c3a0
  409418:	004034c1 	.word	0x004034c1
  40941c:	00415db3 	.word	0x00415db3

00409420 <_lv_refr_init>:
{
  409420:	4770      	bx	lr
	...

00409424 <_lv_inv_area>:
{
  409424:	b530      	push	{r4, r5, lr}
  409426:	b085      	sub	sp, #20
  409428:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  40942a:	4605      	mov	r5, r0
  40942c:	2800      	cmp	r0, #0
  40942e:	d035      	beq.n	40949c <_lv_inv_area+0x78>
    if(!disp) return;
  409430:	2d00      	cmp	r5, #0
  409432:	d03d      	beq.n	4094b0 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  409434:	2c00      	cmp	r4, #0
  409436:	d035      	beq.n	4094a4 <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  409438:	2300      	movs	r3, #0
  40943a:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  40943e:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  409442:	4628      	mov	r0, r5
  409444:	4b34      	ldr	r3, [pc, #208]	; (409518 <_lv_inv_area+0xf4>)
  409446:	4798      	blx	r3
  409448:	b280      	uxth	r0, r0
  40944a:	3801      	subs	r0, #1
  40944c:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  409450:	4628      	mov	r0, r5
  409452:	4b32      	ldr	r3, [pc, #200]	; (40951c <_lv_inv_area+0xf8>)
  409454:	4798      	blx	r3
  409456:	b280      	uxth	r0, r0
  409458:	3801      	subs	r0, #1
  40945a:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  40945e:	aa02      	add	r2, sp, #8
  409460:	4621      	mov	r1, r4
  409462:	4668      	mov	r0, sp
  409464:	4b2e      	ldr	r3, [pc, #184]	; (409520 <_lv_inv_area+0xfc>)
  409466:	4798      	blx	r3
    if(suc != false) {
  409468:	b310      	cbz	r0, 4094b0 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  40946a:	692b      	ldr	r3, [r5, #16]
  40946c:	b113      	cbz	r3, 409474 <_lv_inv_area+0x50>
  40946e:	4669      	mov	r1, sp
  409470:	4628      	mov	r0, r5
  409472:	4798      	blx	r3
{
  409474:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  409476:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  40947a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40947e:	429c      	cmp	r4, r3
  409480:	da18      	bge.n	4094b4 <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  409482:	f104 010c 	add.w	r1, r4, #12
  409486:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  40948a:	2200      	movs	r2, #0
  40948c:	3102      	adds	r1, #2
  40948e:	4668      	mov	r0, sp
  409490:	4b24      	ldr	r3, [pc, #144]	; (409524 <_lv_inv_area+0x100>)
  409492:	4798      	blx	r3
  409494:	b960      	cbnz	r0, 4094b0 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  409496:	3401      	adds	r4, #1
  409498:	b2a4      	uxth	r4, r4
  40949a:	e7ec      	b.n	409476 <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  40949c:	4b22      	ldr	r3, [pc, #136]	; (409528 <_lv_inv_area+0x104>)
  40949e:	4798      	blx	r3
  4094a0:	4605      	mov	r5, r0
  4094a2:	e7c5      	b.n	409430 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  4094a4:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4094a8:	f36f 0309 	bfc	r3, #0, #10
  4094ac:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  4094b0:	b005      	add	sp, #20
  4094b2:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  4094b4:	2b1f      	cmp	r3, #31
  4094b6:	dc1b      	bgt.n	4094f0 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  4094b8:	330c      	adds	r3, #12
  4094ba:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4094be:	3302      	adds	r3, #2
  4094c0:	4669      	mov	r1, sp
  4094c2:	2208      	movs	r2, #8
  4094c4:	e004      	b.n	4094d0 <_lv_inv_area+0xac>
        *d8 = *s8;
  4094c6:	f811 0b01 	ldrb.w	r0, [r1], #1
  4094ca:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  4094ce:	3a01      	subs	r2, #1
    while(len) {
  4094d0:	2a00      	cmp	r2, #0
  4094d2:	d1f8      	bne.n	4094c6 <_lv_inv_area+0xa2>
        disp->inv_p++;
  4094d4:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4094d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
  4094dc:	3201      	adds	r2, #1
  4094de:	f362 0309 	bfi	r3, r2, #0, #10
  4094e2:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  4094e6:	2103      	movs	r1, #3
  4094e8:	6b68      	ldr	r0, [r5, #52]	; 0x34
  4094ea:	4b10      	ldr	r3, [pc, #64]	; (40952c <_lv_inv_area+0x108>)
  4094ec:	4798      	blx	r3
  4094ee:	e7df      	b.n	4094b0 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  4094f0:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4094f4:	f36f 0309 	bfc	r3, #0, #10
  4094f8:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  4094fc:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  409500:	aa02      	add	r2, sp, #8
  409502:	2308      	movs	r3, #8
  409504:	e004      	b.n	409510 <_lv_inv_area+0xec>
        *d8 = *s8;
  409506:	f812 0b01 	ldrb.w	r0, [r2], #1
  40950a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  40950e:	3b01      	subs	r3, #1
    while(len) {
  409510:	2b00      	cmp	r3, #0
  409512:	d1f8      	bne.n	409506 <_lv_inv_area+0xe2>
  409514:	e7de      	b.n	4094d4 <_lv_inv_area+0xb0>
  409516:	bf00      	nop
  409518:	004148f9 	.word	0x004148f9
  40951c:	00414929 	.word	0x00414929
  409520:	004151bb 	.word	0x004151bb
  409524:	00415431 	.word	0x00415431
  409528:	004148ed 	.word	0x004148ed
  40952c:	00417449 	.word	0x00417449

00409530 <_lv_refr_get_disp_refreshing>:
}
  409530:	4b01      	ldr	r3, [pc, #4]	; (409538 <_lv_refr_get_disp_refreshing+0x8>)
  409532:	6818      	ldr	r0, [r3, #0]
  409534:	4770      	bx	lr
  409536:	bf00      	nop
  409538:	2040c3a0 	.word	0x2040c3a0

0040953c <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  40953c:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40953e:	4d1e      	ldr	r5, [pc, #120]	; (4095b8 <lv_refr_vdb_flush+0x7c>)
  409540:	6828      	ldr	r0, [r5, #0]
  409542:	4b1e      	ldr	r3, [pc, #120]	; (4095bc <lv_refr_vdb_flush+0x80>)
  409544:	4798      	blx	r3
  409546:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  409548:	6828      	ldr	r0, [r5, #0]
  40954a:	4b1d      	ldr	r3, [pc, #116]	; (4095c0 <lv_refr_vdb_flush+0x84>)
  40954c:	4798      	blx	r3
  40954e:	b978      	cbnz	r0, 409570 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  409550:	2301      	movs	r3, #1
  409552:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  409554:	4b18      	ldr	r3, [pc, #96]	; (4095b8 <lv_refr_vdb_flush+0x7c>)
  409556:	681b      	ldr	r3, [r3, #0]
  409558:	685b      	ldr	r3, [r3, #4]
  40955a:	6a1a      	ldr	r2, [r3, #32]
  40955c:	f012 0f01 	tst.w	r2, #1
  409560:	d010      	beq.n	409584 <lv_refr_vdb_flush+0x48>
  409562:	6a1b      	ldr	r3, [r3, #32]
  409564:	f013 0f02 	tst.w	r3, #2
  409568:	d00c      	beq.n	409584 <lv_refr_vdb_flush+0x48>
  40956a:	2301      	movs	r3, #1
  40956c:	61e3      	str	r3, [r4, #28]
  40956e:	e00b      	b.n	409588 <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  409570:	69a3      	ldr	r3, [r4, #24]
  409572:	2b00      	cmp	r3, #0
  409574:	d0ec      	beq.n	409550 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  409576:	4b10      	ldr	r3, [pc, #64]	; (4095b8 <lv_refr_vdb_flush+0x7c>)
  409578:	6818      	ldr	r0, [r3, #0]
  40957a:	69c3      	ldr	r3, [r0, #28]
  40957c:	2b00      	cmp	r3, #0
  40957e:	d0f7      	beq.n	409570 <lv_refr_vdb_flush+0x34>
  409580:	4798      	blx	r3
  409582:	e7f5      	b.n	409570 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  409584:	2300      	movs	r3, #0
  409586:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  409588:	4b0e      	ldr	r3, [pc, #56]	; (4095c4 <lv_refr_vdb_flush+0x88>)
  40958a:	4798      	blx	r3
  40958c:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40958e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  409590:	b103      	cbz	r3, 409594 <lv_refr_vdb_flush+0x58>
  409592:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  409594:	68eb      	ldr	r3, [r5, #12]
  409596:	b123      	cbz	r3, 4095a2 <lv_refr_vdb_flush+0x66>
  409598:	68a2      	ldr	r2, [r4, #8]
  40959a:	f104 0110 	add.w	r1, r4, #16
  40959e:	4628      	mov	r0, r5
  4095a0:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  4095a2:	6823      	ldr	r3, [r4, #0]
  4095a4:	b12b      	cbz	r3, 4095b2 <lv_refr_vdb_flush+0x76>
  4095a6:	6862      	ldr	r2, [r4, #4]
  4095a8:	b11a      	cbz	r2, 4095b2 <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  4095aa:	68a1      	ldr	r1, [r4, #8]
  4095ac:	428b      	cmp	r3, r1
  4095ae:	d001      	beq.n	4095b4 <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  4095b0:	60a3      	str	r3, [r4, #8]
  4095b2:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  4095b4:	60a2      	str	r2, [r4, #8]
  4095b6:	bd38      	pop	{r3, r4, r5, pc}
  4095b8:	2040c3a0 	.word	0x2040c3a0
  4095bc:	004149fd 	.word	0x004149fd
  4095c0:	00414a35 	.word	0x00414a35
  4095c4:	00409531 	.word	0x00409531

004095c8 <lv_refr_area_part>:
{
  4095c8:	b570      	push	{r4, r5, r6, lr}
  4095ca:	b09c      	sub	sp, #112	; 0x70
  4095cc:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4095ce:	4d4c      	ldr	r5, [pc, #304]	; (409700 <lv_refr_area_part+0x138>)
  4095d0:	6828      	ldr	r0, [r5, #0]
  4095d2:	4b4c      	ldr	r3, [pc, #304]	; (409704 <lv_refr_area_part+0x13c>)
  4095d4:	4798      	blx	r3
  4095d6:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  4095d8:	6828      	ldr	r0, [r5, #0]
  4095da:	4b4b      	ldr	r3, [pc, #300]	; (409708 <lv_refr_area_part+0x140>)
  4095dc:	4798      	blx	r3
  4095de:	b940      	cbnz	r0, 4095f2 <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  4095e0:	69a3      	ldr	r3, [r4, #24]
  4095e2:	b133      	cbz	r3, 4095f2 <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  4095e4:	4b46      	ldr	r3, [pc, #280]	; (409700 <lv_refr_area_part+0x138>)
  4095e6:	6818      	ldr	r0, [r3, #0]
  4095e8:	69c3      	ldr	r3, [r0, #28]
  4095ea:	2b00      	cmp	r3, #0
  4095ec:	d0f8      	beq.n	4095e0 <lv_refr_area_part+0x18>
  4095ee:	4798      	blx	r3
  4095f0:	e7f6      	b.n	4095e0 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  4095f2:	f104 0210 	add.w	r2, r4, #16
  4095f6:	4631      	mov	r1, r6
  4095f8:	a81a      	add	r0, sp, #104	; 0x68
  4095fa:	4b44      	ldr	r3, [pc, #272]	; (40970c <lv_refr_area_part+0x144>)
  4095fc:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  4095fe:	4d40      	ldr	r5, [pc, #256]	; (409700 <lv_refr_area_part+0x138>)
  409600:	6828      	ldr	r0, [r5, #0]
  409602:	4b43      	ldr	r3, [pc, #268]	; (409710 <lv_refr_area_part+0x148>)
  409604:	4798      	blx	r3
  409606:	4601      	mov	r1, r0
  409608:	a81a      	add	r0, sp, #104	; 0x68
  40960a:	4b42      	ldr	r3, [pc, #264]	; (409714 <lv_refr_area_part+0x14c>)
  40960c:	4798      	blx	r3
  40960e:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  409610:	682b      	ldr	r3, [r5, #0]
  409612:	6c99      	ldr	r1, [r3, #72]	; 0x48
  409614:	2900      	cmp	r1, #0
  409616:	d03d      	beq.n	409694 <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  409618:	a81a      	add	r0, sp, #104	; 0x68
  40961a:	4b3e      	ldr	r3, [pc, #248]	; (409714 <lv_refr_area_part+0x14c>)
  40961c:	4798      	blx	r3
  40961e:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  409620:	2c00      	cmp	r4, #0
  409622:	bf08      	it	eq
  409624:	2d00      	cmpeq	r5, #0
  409626:	d113      	bne.n	409650 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  409628:	4b35      	ldr	r3, [pc, #212]	; (409700 <lv_refr_area_part+0x138>)
  40962a:	681b      	ldr	r3, [r3, #0]
  40962c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  40962e:	2b00      	cmp	r3, #0
  409630:	d04a      	beq.n	4096c8 <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  409632:	a805      	add	r0, sp, #20
  409634:	4b38      	ldr	r3, [pc, #224]	; (409718 <lv_refr_area_part+0x150>)
  409636:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  409638:	4b31      	ldr	r3, [pc, #196]	; (409700 <lv_refr_area_part+0x138>)
  40963a:	681b      	ldr	r3, [r3, #0]
  40963c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  409640:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  409644:	a902      	add	r1, sp, #8
  409646:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  409648:	4b34      	ldr	r3, [pc, #208]	; (40971c <lv_refr_area_part+0x154>)
  40964a:	4798      	blx	r3
            if(res == LV_RES_OK) {
  40964c:	2801      	cmp	r0, #1
  40964e:	d023      	beq.n	409698 <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  409650:	4b2b      	ldr	r3, [pc, #172]	; (409700 <lv_refr_area_part+0x138>)
  409652:	681b      	ldr	r3, [r3, #0]
  409654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409656:	b12b      	cbz	r3, 409664 <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  409658:	2d00      	cmp	r5, #0
  40965a:	d048      	beq.n	4096ee <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  40965c:	a91a      	add	r1, sp, #104	; 0x68
  40965e:	4628      	mov	r0, r5
  409660:	4b2f      	ldr	r3, [pc, #188]	; (409720 <lv_refr_area_part+0x158>)
  409662:	4798      	blx	r3
    if(top_act_scr == NULL) {
  409664:	2c00      	cmp	r4, #0
  409666:	d044      	beq.n	4096f2 <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  409668:	a91a      	add	r1, sp, #104	; 0x68
  40966a:	4620      	mov	r0, r4
  40966c:	4d2c      	ldr	r5, [pc, #176]	; (409720 <lv_refr_area_part+0x158>)
  40966e:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  409670:	4c23      	ldr	r4, [pc, #140]	; (409700 <lv_refr_area_part+0x138>)
  409672:	6820      	ldr	r0, [r4, #0]
  409674:	4b2b      	ldr	r3, [pc, #172]	; (409724 <lv_refr_area_part+0x15c>)
  409676:	4798      	blx	r3
  409678:	a91a      	add	r1, sp, #104	; 0x68
  40967a:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  40967c:	6820      	ldr	r0, [r4, #0]
  40967e:	4b2a      	ldr	r3, [pc, #168]	; (409728 <lv_refr_area_part+0x160>)
  409680:	4798      	blx	r3
  409682:	a91a      	add	r1, sp, #104	; 0x68
  409684:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  409686:	6820      	ldr	r0, [r4, #0]
  409688:	4b28      	ldr	r3, [pc, #160]	; (40972c <lv_refr_area_part+0x164>)
  40968a:	4798      	blx	r3
  40968c:	2800      	cmp	r0, #0
  40968e:	d034      	beq.n	4096fa <lv_refr_area_part+0x132>
}
  409690:	b01c      	add	sp, #112	; 0x70
  409692:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  409694:	2500      	movs	r5, #0
  409696:	e7c3      	b.n	409620 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  409698:	9b02      	ldr	r3, [sp, #8]
  40969a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  40969e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4096a2:	f3c2 124a 	ubfx	r2, r2, #5, #11
  4096a6:	3a01      	subs	r2, #1
  4096a8:	9200      	str	r2, [sp, #0]
  4096aa:	3b01      	subs	r3, #1
  4096ac:	2200      	movs	r2, #0
  4096ae:	4611      	mov	r1, r2
  4096b0:	a803      	add	r0, sp, #12
  4096b2:	4e1f      	ldr	r6, [pc, #124]	; (409730 <lv_refr_area_part+0x168>)
  4096b4:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  4096b6:	4b12      	ldr	r3, [pc, #72]	; (409700 <lv_refr_area_part+0x138>)
  4096b8:	681a      	ldr	r2, [r3, #0]
  4096ba:	ab05      	add	r3, sp, #20
  4096bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  4096be:	a91a      	add	r1, sp, #104	; 0x68
  4096c0:	a803      	add	r0, sp, #12
  4096c2:	4e1c      	ldr	r6, [pc, #112]	; (409734 <lv_refr_area_part+0x16c>)
  4096c4:	47b0      	blx	r6
  4096c6:	e7c3      	b.n	409650 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  4096c8:	a805      	add	r0, sp, #20
  4096ca:	4b1b      	ldr	r3, [pc, #108]	; (409738 <lv_refr_area_part+0x170>)
  4096cc:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  4096ce:	4b0c      	ldr	r3, [pc, #48]	; (409700 <lv_refr_area_part+0x138>)
  4096d0:	681b      	ldr	r3, [r3, #0]
  4096d2:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  4096d6:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  4096da:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  4096de:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  4096e2:	aa05      	add	r2, sp, #20
  4096e4:	a91a      	add	r1, sp, #104	; 0x68
  4096e6:	4608      	mov	r0, r1
  4096e8:	4b14      	ldr	r3, [pc, #80]	; (40973c <lv_refr_area_part+0x174>)
  4096ea:	4798      	blx	r3
  4096ec:	e7b0      	b.n	409650 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  4096ee:	461d      	mov	r5, r3
  4096f0:	e7b4      	b.n	40965c <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  4096f2:	4b03      	ldr	r3, [pc, #12]	; (409700 <lv_refr_area_part+0x138>)
  4096f4:	681b      	ldr	r3, [r3, #0]
  4096f6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  4096f8:	e7b6      	b.n	409668 <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  4096fa:	4b11      	ldr	r3, [pc, #68]	; (409740 <lv_refr_area_part+0x178>)
  4096fc:	4798      	blx	r3
}
  4096fe:	e7c7      	b.n	409690 <lv_refr_area_part+0xc8>
  409700:	2040c3a0 	.word	0x2040c3a0
  409704:	004149fd 	.word	0x004149fd
  409708:	00414a35 	.word	0x00414a35
  40970c:	004151bb 	.word	0x004151bb
  409710:	004034c1 	.word	0x004034c1
  409714:	0040920d 	.word	0x0040920d
  409718:	0040d099 	.word	0x0040d099
  40971c:	00413511 	.word	0x00413511
  409720:	004093a5 	.word	0x004093a5
  409724:	004034f9 	.word	0x004034f9
  409728:	00403515 	.word	0x00403515
  40972c:	00414a4d 	.word	0x00414a4d
  409730:	00415185 	.word	0x00415185
  409734:	0040d345 	.word	0x0040d345
  409738:	00412065 	.word	0x00412065
  40973c:	004120b1 	.word	0x004120b1
  409740:	0040953d 	.word	0x0040953d

00409744 <lv_refr_area>:
{
  409744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409748:	b083      	sub	sp, #12
  40974a:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  40974c:	4b62      	ldr	r3, [pc, #392]	; (4098d8 <lv_refr_area+0x194>)
  40974e:	6818      	ldr	r0, [r3, #0]
  409750:	4b62      	ldr	r3, [pc, #392]	; (4098dc <lv_refr_area+0x198>)
  409752:	4798      	blx	r3
  409754:	2800      	cmp	r0, #0
  409756:	d157      	bne.n	409808 <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409758:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4098d8 <lv_refr_area+0x194>
  40975c:	f8d9 0000 	ldr.w	r0, [r9]
  409760:	4b5f      	ldr	r3, [pc, #380]	; (4098e0 <lv_refr_area+0x19c>)
  409762:	4798      	blx	r3
  409764:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409766:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  40976a:	8833      	ldrh	r3, [r6, #0]
  40976c:	eba8 0803 	sub.w	r8, r8, r3
  409770:	fa1f f888 	uxth.w	r8, r8
  409774:	f108 0801 	add.w	r8, r8, #1
  409778:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40977c:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  409780:	b2bc      	uxth	r4, r7
  409782:	8873      	ldrh	r3, [r6, #2]
  409784:	1ae4      	subs	r4, r4, r3
  409786:	b2a4      	uxth	r4, r4
  409788:	3401      	adds	r4, #1
  40978a:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  40978c:	f8d9 0000 	ldr.w	r0, [r9]
  409790:	4b54      	ldr	r3, [pc, #336]	; (4098e4 <lv_refr_area+0x1a0>)
  409792:	4798      	blx	r3
        lv_coord_t y2 =
  409794:	42b8      	cmp	r0, r7
  409796:	dd59      	ble.n	40984c <lv_refr_area+0x108>
  409798:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  40979c:	68eb      	ldr	r3, [r5, #12]
  40979e:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  4097a2:	46a0      	mov	r8, r4
  4097a4:	42a3      	cmp	r3, r4
  4097a6:	dc00      	bgt.n	4097aa <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  4097a8:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  4097aa:	4b4b      	ldr	r3, [pc, #300]	; (4098d8 <lv_refr_area+0x194>)
  4097ac:	681b      	ldr	r3, [r3, #0]
  4097ae:	691b      	ldr	r3, [r3, #16]
  4097b0:	b32b      	cbz	r3, 4097fe <lv_refr_area+0xba>
            tmp.x1 = 0;
  4097b2:	2300      	movs	r3, #0
  4097b4:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  4097b8:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  4097bc:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  4097c0:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  4097c4:	f109 34ff 	add.w	r4, r9, #4294967295
  4097c8:	b224      	sxth	r4, r4
  4097ca:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  4097ce:	4b42      	ldr	r3, [pc, #264]	; (4098d8 <lv_refr_area+0x194>)
  4097d0:	6818      	ldr	r0, [r3, #0]
  4097d2:	6903      	ldr	r3, [r0, #16]
  4097d4:	4669      	mov	r1, sp
  4097d6:	4798      	blx	r3
  4097d8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  4097dc:	b293      	uxth	r3, r2
  4097de:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  4097e2:	1a5b      	subs	r3, r3, r1
  4097e4:	b29b      	uxth	r3, r3
  4097e6:	3301      	adds	r3, #1
  4097e8:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  4097ea:	4598      	cmp	r8, r3
  4097ec:	da02      	bge.n	4097f4 <lv_refr_area+0xb0>
                h_tmp--;
  4097ee:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  4097f0:	2c00      	cmp	r4, #0
  4097f2:	dce7      	bgt.n	4097c4 <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  4097f4:	f1b9 0f00 	cmp.w	r9, #0
  4097f8:	dd25      	ble.n	409846 <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  4097fa:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  4097fe:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  409802:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409806:	e031      	b.n	40986c <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409808:	4c33      	ldr	r4, [pc, #204]	; (4098d8 <lv_refr_area+0x194>)
  40980a:	6820      	ldr	r0, [r4, #0]
  40980c:	4b34      	ldr	r3, [pc, #208]	; (4098e0 <lv_refr_area+0x19c>)
  40980e:	4798      	blx	r3
  409810:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  409812:	2700      	movs	r7, #0
  409814:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  409816:	6820      	ldr	r0, [r4, #0]
  409818:	4b33      	ldr	r3, [pc, #204]	; (4098e8 <lv_refr_area+0x1a4>)
  40981a:	4798      	blx	r3
  40981c:	b280      	uxth	r0, r0
  40981e:	3801      	subs	r0, #1
  409820:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  409822:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  409824:	6820      	ldr	r0, [r4, #0]
  409826:	4b2f      	ldr	r3, [pc, #188]	; (4098e4 <lv_refr_area+0x1a0>)
  409828:	4798      	blx	r3
  40982a:	b280      	uxth	r0, r0
  40982c:	3801      	subs	r0, #1
  40982e:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  409830:	6823      	ldr	r3, [r4, #0]
  409832:	685a      	ldr	r2, [r3, #4]
  409834:	f892 3020 	ldrb.w	r3, [r2, #32]
  409838:	f043 0302 	orr.w	r3, r3, #2
  40983c:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409840:	4630      	mov	r0, r6
  409842:	4b2a      	ldr	r3, [pc, #168]	; (4098ec <lv_refr_area+0x1a8>)
  409844:	4798      	blx	r3
}
  409846:	b003      	add	sp, #12
  409848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  40984c:	f8d9 0000 	ldr.w	r0, [r9]
  409850:	4b24      	ldr	r3, [pc, #144]	; (4098e4 <lv_refr_area+0x1a0>)
  409852:	4798      	blx	r3
  409854:	b287      	uxth	r7, r0
  409856:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  409858:	b23f      	sxth	r7, r7
  40985a:	e79f      	b.n	40979c <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  40985c:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409860:	454f      	cmp	r7, r9
  409862:	d018      	beq.n	409896 <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  409864:	4630      	mov	r0, r6
  409866:	4b21      	ldr	r3, [pc, #132]	; (4098ec <lv_refr_area+0x1a8>)
  409868:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  40986a:	b223      	sxth	r3, r4
  40986c:	eb03 0208 	add.w	r2, r3, r8
  409870:	3a01      	subs	r2, #1
  409872:	42ba      	cmp	r2, r7
  409874:	dc19      	bgt.n	4098aa <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  409876:	f9b6 2000 	ldrsh.w	r2, [r6]
  40987a:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  40987c:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  409880:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  409882:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  409884:	4443      	add	r3, r8
  409886:	b29c      	uxth	r4, r3
  409888:	1e63      	subs	r3, r4, #1
  40988a:	b21b      	sxth	r3, r3
  40988c:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  40988e:	429f      	cmp	r7, r3
  409890:	dae4      	bge.n	40985c <lv_refr_area+0x118>
  409892:	82ef      	strh	r7, [r5, #22]
  409894:	e7e2      	b.n	40985c <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409896:	4b10      	ldr	r3, [pc, #64]	; (4098d8 <lv_refr_area+0x194>)
  409898:	681b      	ldr	r3, [r3, #0]
  40989a:	685a      	ldr	r2, [r3, #4]
  40989c:	f892 3020 	ldrb.w	r3, [r2, #32]
  4098a0:	f043 0302 	orr.w	r3, r3, #2
  4098a4:	f882 3020 	strb.w	r3, [r2, #32]
  4098a8:	e7dc      	b.n	409864 <lv_refr_area+0x120>
        if(y2 != row_last) {
  4098aa:	45b9      	cmp	r9, r7
  4098ac:	d0cb      	beq.n	409846 <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  4098ae:	f9b6 2000 	ldrsh.w	r2, [r6]
  4098b2:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  4098b4:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  4098b8:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  4098ba:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  4098bc:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  4098be:	4b06      	ldr	r3, [pc, #24]	; (4098d8 <lv_refr_area+0x194>)
  4098c0:	681b      	ldr	r3, [r3, #0]
  4098c2:	685a      	ldr	r2, [r3, #4]
  4098c4:	f892 3020 	ldrb.w	r3, [r2, #32]
  4098c8:	f043 0302 	orr.w	r3, r3, #2
  4098cc:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  4098d0:	4630      	mov	r0, r6
  4098d2:	4b06      	ldr	r3, [pc, #24]	; (4098ec <lv_refr_area+0x1a8>)
  4098d4:	4798      	blx	r3
  4098d6:	e7b6      	b.n	409846 <lv_refr_area+0x102>
  4098d8:	2040c3a0 	.word	0x2040c3a0
  4098dc:	00414a4d 	.word	0x00414a4d
  4098e0:	004149fd 	.word	0x004149fd
  4098e4:	00414929 	.word	0x00414929
  4098e8:	004148f9 	.word	0x004148f9
  4098ec:	004095c9 	.word	0x004095c9

004098f0 <lv_refr_areas>:
    px_num = 0;
  4098f0:	2200      	movs	r2, #0
  4098f2:	4b2b      	ldr	r3, [pc, #172]	; (4099a0 <lv_refr_areas+0xb0>)
  4098f4:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  4098f6:	4b2b      	ldr	r3, [pc, #172]	; (4099a4 <lv_refr_areas+0xb4>)
  4098f8:	681a      	ldr	r2, [r3, #0]
  4098fa:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  4098fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409902:	2b00      	cmp	r3, #0
  409904:	d04b      	beq.n	40999e <lv_refr_areas+0xae>
{
  409906:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409908:	1e5e      	subs	r6, r3, #1
  40990a:	2e00      	cmp	r6, #0
  40990c:	db05      	blt.n	40991a <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  40990e:	1993      	adds	r3, r2, r6
  409910:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409914:	b113      	cbz	r3, 40991c <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409916:	3e01      	subs	r6, #1
  409918:	e7f7      	b.n	40990a <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  40991a:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  40991c:	6851      	ldr	r1, [r2, #4]
  40991e:	f891 3020 	ldrb.w	r3, [r1, #32]
  409922:	f36f 0300 	bfc	r3, #0, #1
  409926:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  40992a:	6852      	ldr	r2, [r2, #4]
  40992c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409930:	f36f 0341 	bfc	r3, #1, #1
  409934:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409938:	2400      	movs	r4, #0
  40993a:	e01f      	b.n	40997c <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  40993c:	6842      	ldr	r2, [r0, #4]
  40993e:	f892 3020 	ldrb.w	r3, [r2, #32]
  409942:	f043 0301 	orr.w	r3, r3, #1
  409946:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  40994a:	6842      	ldr	r2, [r0, #4]
  40994c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409950:	f36f 0341 	bfc	r3, #1, #1
  409954:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  409958:	f104 050c 	add.w	r5, r4, #12
  40995c:	00ed      	lsls	r5, r5, #3
  40995e:	4428      	add	r0, r5
  409960:	3002      	adds	r0, #2
  409962:	4b11      	ldr	r3, [pc, #68]	; (4099a8 <lv_refr_areas+0xb8>)
  409964:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  409966:	4b0f      	ldr	r3, [pc, #60]	; (4099a4 <lv_refr_areas+0xb4>)
  409968:	6818      	ldr	r0, [r3, #0]
  40996a:	4428      	add	r0, r5
  40996c:	3002      	adds	r0, #2
  40996e:	4b0f      	ldr	r3, [pc, #60]	; (4099ac <lv_refr_areas+0xbc>)
  409970:	4798      	blx	r3
  409972:	4a0b      	ldr	r2, [pc, #44]	; (4099a0 <lv_refr_areas+0xb0>)
  409974:	6813      	ldr	r3, [r2, #0]
  409976:	4418      	add	r0, r3
  409978:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  40997a:	3401      	adds	r4, #1
  40997c:	4b09      	ldr	r3, [pc, #36]	; (4099a4 <lv_refr_areas+0xb4>)
  40997e:	6818      	ldr	r0, [r3, #0]
  409980:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409984:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409988:	429c      	cmp	r4, r3
  40998a:	da07      	bge.n	40999c <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  40998c:	1903      	adds	r3, r0, r4
  40998e:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409992:	2b00      	cmp	r3, #0
  409994:	d1f1      	bne.n	40997a <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409996:	42b4      	cmp	r4, r6
  409998:	d1d7      	bne.n	40994a <lv_refr_areas+0x5a>
  40999a:	e7cf      	b.n	40993c <lv_refr_areas+0x4c>
  40999c:	bd70      	pop	{r4, r5, r6, pc}
  40999e:	4770      	bx	lr
  4099a0:	2040c3a4 	.word	0x2040c3a4
  4099a4:	2040c3a0 	.word	0x2040c3a0
  4099a8:	00409745 	.word	0x00409745
  4099ac:	0041519f 	.word	0x0041519f

004099b0 <_lv_disp_refr_task>:
{
  4099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4099b4:	b085      	sub	sp, #20
  4099b6:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  4099b8:	4b58      	ldr	r3, [pc, #352]	; (409b1c <_lv_disp_refr_task+0x16c>)
  4099ba:	4798      	blx	r3
  4099bc:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  4099be:	68eb      	ldr	r3, [r5, #12]
  4099c0:	4c57      	ldr	r4, [pc, #348]	; (409b20 <_lv_disp_refr_task+0x170>)
  4099c2:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  4099c4:	2100      	movs	r1, #0
  4099c6:	4628      	mov	r0, r5
  4099c8:	4b56      	ldr	r3, [pc, #344]	; (409b24 <_lv_disp_refr_task+0x174>)
  4099ca:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  4099cc:	6823      	ldr	r3, [r4, #0]
  4099ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  4099d0:	b18a      	cbz	r2, 4099f6 <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  4099d2:	4b55      	ldr	r3, [pc, #340]	; (409b28 <_lv_disp_refr_task+0x178>)
  4099d4:	4798      	blx	r3
    lv_refr_areas();
  4099d6:	4b55      	ldr	r3, [pc, #340]	; (409b2c <_lv_disp_refr_task+0x17c>)
  4099d8:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  4099da:	4b51      	ldr	r3, [pc, #324]	; (409b20 <_lv_disp_refr_task+0x170>)
  4099dc:	6818      	ldr	r0, [r3, #0]
  4099de:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  4099e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4099e6:	b96b      	cbnz	r3, 409a04 <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  4099e8:	4b51      	ldr	r3, [pc, #324]	; (409b30 <_lv_disp_refr_task+0x180>)
  4099ea:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  4099ec:	4b51      	ldr	r3, [pc, #324]	; (409b34 <_lv_disp_refr_task+0x184>)
  4099ee:	4798      	blx	r3
}
  4099f0:	b005      	add	sp, #20
  4099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  4099f6:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4099fa:	f36f 0209 	bfc	r2, #0, #10
  4099fe:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  409a02:	e7f5      	b.n	4099f0 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  409a04:	4b4c      	ldr	r3, [pc, #304]	; (409b38 <_lv_disp_refr_task+0x188>)
  409a06:	4798      	blx	r3
  409a08:	b118      	cbz	r0, 409a12 <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  409a0a:	4b45      	ldr	r3, [pc, #276]	; (409b20 <_lv_disp_refr_task+0x170>)
  409a0c:	6818      	ldr	r0, [r3, #0]
  409a0e:	6943      	ldr	r3, [r0, #20]
  409a10:	b1fb      	cbz	r3, 409a52 <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  409a12:	4c43      	ldr	r4, [pc, #268]	; (409b20 <_lv_disp_refr_task+0x170>)
  409a14:	6820      	ldr	r0, [r4, #0]
  409a16:	f44f 7180 	mov.w	r1, #256	; 0x100
  409a1a:	3062      	adds	r0, #98	; 0x62
  409a1c:	4d47      	ldr	r5, [pc, #284]	; (409b3c <_lv_disp_refr_task+0x18c>)
  409a1e:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409a20:	6820      	ldr	r0, [r4, #0]
  409a22:	2120      	movs	r1, #32
  409a24:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  409a28:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  409a2a:	6823      	ldr	r3, [r4, #0]
  409a2c:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409a30:	f36f 0209 	bfc	r2, #0, #10
  409a34:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  409a38:	9801      	ldr	r0, [sp, #4]
  409a3a:	4b41      	ldr	r3, [pc, #260]	; (409b40 <_lv_disp_refr_task+0x190>)
  409a3c:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  409a3e:	6824      	ldr	r4, [r4, #0]
  409a40:	69a3      	ldr	r3, [r4, #24]
  409a42:	2b00      	cmp	r3, #0
  409a44:	d0d0      	beq.n	4099e8 <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  409a46:	4a3f      	ldr	r2, [pc, #252]	; (409b44 <_lv_disp_refr_task+0x194>)
  409a48:	6812      	ldr	r2, [r2, #0]
  409a4a:	4601      	mov	r1, r0
  409a4c:	4620      	mov	r0, r4
  409a4e:	4798      	blx	r3
  409a50:	e7ca      	b.n	4099e8 <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409a52:	4b3d      	ldr	r3, [pc, #244]	; (409b48 <_lv_disp_refr_task+0x198>)
  409a54:	4798      	blx	r3
  409a56:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  409a58:	4b3c      	ldr	r3, [pc, #240]	; (409b4c <_lv_disp_refr_task+0x19c>)
  409a5a:	4798      	blx	r3
                while(vdb->flushing);
  409a5c:	69a3      	ldr	r3, [r4, #24]
  409a5e:	2b00      	cmp	r3, #0
  409a60:	d1fc      	bne.n	409a5c <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  409a62:	4b2f      	ldr	r3, [pc, #188]	; (409b20 <_lv_disp_refr_task+0x170>)
  409a64:	681b      	ldr	r3, [r3, #0]
  409a66:	f9b3 0000 	ldrsh.w	r0, [r3]
  409a6a:	0040      	lsls	r0, r0, #1
  409a6c:	4b38      	ldr	r3, [pc, #224]	; (409b50 <_lv_disp_refr_task+0x1a0>)
  409a6e:	4798      	blx	r3
  409a70:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  409a72:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409a76:	f8d4 a000 	ldr.w	sl, [r4]
  409a7a:	45d3      	cmp	fp, sl
  409a7c:	d006      	beq.n	409a8c <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  409a7e:	4b28      	ldr	r3, [pc, #160]	; (409b20 <_lv_disp_refr_task+0x170>)
  409a80:	6818      	ldr	r0, [r3, #0]
  409a82:	4b34      	ldr	r3, [pc, #208]	; (409b54 <_lv_disp_refr_task+0x1a4>)
  409a84:	4798      	blx	r3
  409a86:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  409a88:	2600      	movs	r6, #0
  409a8a:	e01d      	b.n	409ac8 <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  409a8c:	f8d4 a004 	ldr.w	sl, [r4, #4]
  409a90:	e7f5      	b.n	409a7e <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  409a92:	9a02      	ldr	r2, [sp, #8]
  409a94:	eb0a 0105 	add.w	r1, sl, r5
  409a98:	9803      	ldr	r0, [sp, #12]
  409a9a:	4f2f      	ldr	r7, [pc, #188]	; (409b58 <_lv_disp_refr_task+0x1a8>)
  409a9c:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  409a9e:	9a02      	ldr	r2, [sp, #8]
  409aa0:	9903      	ldr	r1, [sp, #12]
  409aa2:	eb0b 0005 	add.w	r0, fp, r5
  409aa6:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  409aa8:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409aac:	3401      	adds	r4, #1
  409aae:	b224      	sxth	r4, r4
  409ab0:	4b1b      	ldr	r3, [pc, #108]	; (409b20 <_lv_disp_refr_task+0x170>)
  409ab2:	681b      	ldr	r3, [r3, #0]
  409ab4:	f108 020c 	add.w	r2, r8, #12
  409ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409abc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  409ac0:	429c      	cmp	r4, r3
  409ac2:	dde6      	ble.n	409a92 <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  409ac4:	3601      	adds	r6, #1
  409ac6:	b2b6      	uxth	r6, r6
  409ac8:	46b0      	mov	r8, r6
  409aca:	4b15      	ldr	r3, [pc, #84]	; (409b20 <_lv_disp_refr_task+0x170>)
  409acc:	681b      	ldr	r3, [r3, #0]
  409ace:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409ad2:	f3c2 0209 	ubfx	r2, r2, #0, #10
  409ad6:	4296      	cmp	r6, r2
  409ad8:	da18      	bge.n	409b0c <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  409ada:	199a      	adds	r2, r3, r6
  409adc:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409ae0:	2a00      	cmp	r2, #0
  409ae2:	d1ef      	bne.n	409ac4 <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  409ae4:	f108 020c 	add.w	r2, r8, #12
  409ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409aec:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409af0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  409af4:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  409af8:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409afa:	88db      	ldrh	r3, [r3, #6]
  409afc:	b292      	uxth	r2, r2
  409afe:	1a9b      	subs	r3, r3, r2
  409b00:	b29b      	uxth	r3, r3
  409b02:	3301      	adds	r3, #1
  409b04:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  409b06:	005b      	lsls	r3, r3, #1
  409b08:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409b0a:	e7d1      	b.n	409ab0 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409b0c:	9b03      	ldr	r3, [sp, #12]
  409b0e:	2b00      	cmp	r3, #0
  409b10:	f43f af7f 	beq.w	409a12 <_lv_disp_refr_task+0x62>
  409b14:	4618      	mov	r0, r3
  409b16:	4b11      	ldr	r3, [pc, #68]	; (409b5c <_lv_disp_refr_task+0x1ac>)
  409b18:	4798      	blx	r3
  409b1a:	e77a      	b.n	409a12 <_lv_disp_refr_task+0x62>
  409b1c:	00414d05 	.word	0x00414d05
  409b20:	2040c3a0 	.word	0x2040c3a0
  409b24:	00417449 	.word	0x00417449
  409b28:	0040911d 	.word	0x0040911d
  409b2c:	004098f1 	.word	0x004098f1
  409b30:	0041633d 	.word	0x0041633d
  409b34:	00414859 	.word	0x00414859
  409b38:	00414a4d 	.word	0x00414a4d
  409b3c:	004166bd 	.word	0x004166bd
  409b40:	00414d21 	.word	0x00414d21
  409b44:	2040c3a4 	.word	0x2040c3a4
  409b48:	004149fd 	.word	0x004149fd
  409b4c:	0040953d 	.word	0x0040953d
  409b50:	00416531 	.word	0x00416531
  409b54:	004148f9 	.word	0x004148f9
  409b58:	00416399 	.word	0x00416399
  409b5c:	004162e1 	.word	0x004162e1

00409b60 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409b60:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  409b62:	2104      	movs	r1, #4
  409b64:	4b01      	ldr	r3, [pc, #4]	; (409b6c <lv_style_init+0xc>)
  409b66:	4798      	blx	r3
  409b68:	bd08      	pop	{r3, pc}
  409b6a:	bf00      	nop
  409b6c:	004166bd 	.word	0x004166bd

00409b70 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  409b70:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  409b72:	2108      	movs	r1, #8
  409b74:	4b01      	ldr	r3, [pc, #4]	; (409b7c <lv_style_list_init+0xc>)
  409b76:	4798      	blx	r3
  409b78:	bd08      	pop	{r3, pc}
  409b7a:	bf00      	nop
  409b7c:	004166bd 	.word	0x004166bd

00409b80 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  409b80:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  409b82:	7903      	ldrb	r3, [r0, #4]
  409b84:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  409b88:	d051      	beq.n	409c2e <_lv_style_list_remove_style+0xae>
  409b8a:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  409b8c:	7902      	ldrb	r2, [r0, #4]
  409b8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409b92:	4293      	cmp	r3, r2
  409b94:	da07      	bge.n	409ba6 <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  409b96:	6804      	ldr	r4, [r0, #0]
  409b98:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  409b9c:	428c      	cmp	r4, r1
  409b9e:	d016      	beq.n	409bce <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  409ba0:	3301      	adds	r3, #1
  409ba2:	b2db      	uxtb	r3, r3
  409ba4:	e7f2      	b.n	409b8c <_lv_style_list_remove_style+0xc>
    bool found = false;
  409ba6:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  409ba8:	2b00      	cmp	r3, #0
  409baa:	d040      	beq.n	409c2e <_lv_style_list_remove_style+0xae>
  409bac:	460d      	mov	r5, r1
  409bae:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  409bb0:	2e01      	cmp	r6, #1
  409bb2:	d00e      	beq.n	409bd2 <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  409bb4:	3a01      	subs	r2, #1
  409bb6:	0090      	lsls	r0, r2, #2
  409bb8:	4b1d      	ldr	r3, [pc, #116]	; (409c30 <_lv_style_list_remove_style+0xb0>)
  409bba:	4798      	blx	r3
  409bbc:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  409bbe:	4b1d      	ldr	r3, [pc, #116]	; (409c34 <_lv_style_list_remove_style+0xb4>)
  409bc0:	4798      	blx	r3
  409bc2:	b190      	cbz	r0, 409bea <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  409bc4:	2e00      	cmp	r6, #0
  409bc6:	d032      	beq.n	409c2e <_lv_style_list_remove_style+0xae>
  409bc8:	2100      	movs	r1, #0
  409bca:	460b      	mov	r3, r1
  409bcc:	e015      	b.n	409bfa <_lv_style_list_remove_style+0x7a>
            found = true;
  409bce:	2301      	movs	r3, #1
  409bd0:	e7ea      	b.n	409ba8 <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  409bd2:	6800      	ldr	r0, [r0, #0]
  409bd4:	4b18      	ldr	r3, [pc, #96]	; (409c38 <_lv_style_list_remove_style+0xb8>)
  409bd6:	4798      	blx	r3
        list->style_list = NULL;
  409bd8:	2200      	movs	r2, #0
  409bda:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409bdc:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409bde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  409be2:	f362 1386 	bfi	r3, r2, #6, #1
  409be6:	7123      	strb	r3, [r4, #4]
        return;
  409be8:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  409bea:	4632      	mov	r2, r6
  409bec:	2300      	movs	r3, #0
  409bee:	4813      	ldr	r0, [pc, #76]	; (409c3c <_lv_style_list_remove_style+0xbc>)
  409bf0:	4913      	ldr	r1, [pc, #76]	; (409c40 <_lv_style_list_remove_style+0xc0>)
  409bf2:	4788      	blx	r1
  409bf4:	e7fe      	b.n	409bf4 <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  409bf6:	3301      	adds	r3, #1
  409bf8:	b2db      	uxtb	r3, r3
  409bfa:	7922      	ldrb	r2, [r4, #4]
  409bfc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409c00:	4293      	cmp	r3, r2
  409c02:	da09      	bge.n	409c18 <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  409c04:	6822      	ldr	r2, [r4, #0]
  409c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  409c0a:	4295      	cmp	r5, r2
  409c0c:	d0f3      	beq.n	409bf6 <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409c0e:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  409c12:	3101      	adds	r1, #1
  409c14:	b2c9      	uxtb	r1, r1
  409c16:	e7ee      	b.n	409bf6 <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  409c18:	6820      	ldr	r0, [r4, #0]
  409c1a:	4b07      	ldr	r3, [pc, #28]	; (409c38 <_lv_style_list_remove_style+0xb8>)
  409c1c:	4798      	blx	r3

    list->style_cnt--;
  409c1e:	7923      	ldrb	r3, [r4, #4]
  409c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409c24:	323f      	adds	r2, #63	; 0x3f
  409c26:	f362 0305 	bfi	r3, r2, #0, #6
  409c2a:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409c2c:	6026      	str	r6, [r4, #0]
  409c2e:	bd70      	pop	{r4, r5, r6, pc}
  409c30:	00416189 	.word	0x00416189
  409c34:	00415a81 	.word	0x00415a81
  409c38:	0041624d 	.word	0x0041624d
  409c3c:	00428c94 	.word	0x00428c94
  409c40:	00415a8d 	.word	0x00415a8d

00409c44 <_lv_style_list_add_style>:
    if(list == NULL) return;
  409c44:	2800      	cmp	r0, #0
  409c46:	d048      	beq.n	409cda <_lv_style_list_add_style+0x96>
{
  409c48:	b570      	push	{r4, r5, r6, lr}
  409c4a:	4604      	mov	r4, r0
  409c4c:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  409c4e:	4b23      	ldr	r3, [pc, #140]	; (409cdc <_lv_style_list_add_style+0x98>)
  409c50:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  409c52:	7923      	ldrb	r3, [r4, #4]
  409c54:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  409c58:	d117      	bne.n	409c8a <_lv_style_list_add_style+0x46>
  409c5a:	2004      	movs	r0, #4
  409c5c:	4b20      	ldr	r3, [pc, #128]	; (409ce0 <_lv_style_list_add_style+0x9c>)
  409c5e:	4798      	blx	r3
  409c60:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  409c62:	4628      	mov	r0, r5
  409c64:	4b1f      	ldr	r3, [pc, #124]	; (409ce4 <_lv_style_list_add_style+0xa0>)
  409c66:	4798      	blx	r3
  409c68:	b1c8      	cbz	r0, 409c9e <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  409c6a:	2d00      	cmp	r5, #0
  409c6c:	d034      	beq.n	409cd8 <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  409c6e:	7923      	ldrb	r3, [r4, #4]
  409c70:	f013 0f80 	tst.w	r3, #128	; 0x80
  409c74:	d119      	bne.n	409caa <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  409c76:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  409c78:	f013 0f40 	tst.w	r3, #64	; 0x40
  409c7c:	d001      	beq.n	409c82 <_lv_style_list_add_style+0x3e>
  409c7e:	3201      	adds	r2, #1
  409c80:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  409c82:	7923      	ldrb	r3, [r4, #4]
  409c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  409c88:	e01a      	b.n	409cc0 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  409c8a:	7921      	ldrb	r1, [r4, #4]
  409c8c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  409c90:	3101      	adds	r1, #1
  409c92:	0089      	lsls	r1, r1, #2
  409c94:	6820      	ldr	r0, [r4, #0]
  409c96:	4b14      	ldr	r3, [pc, #80]	; (409ce8 <_lv_style_list_add_style+0xa4>)
  409c98:	4798      	blx	r3
  409c9a:	4605      	mov	r5, r0
  409c9c:	e7e1      	b.n	409c62 <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  409c9e:	462a      	mov	r2, r5
  409ca0:	2300      	movs	r3, #0
  409ca2:	4812      	ldr	r0, [pc, #72]	; (409cec <_lv_style_list_add_style+0xa8>)
  409ca4:	4912      	ldr	r1, [pc, #72]	; (409cf0 <_lv_style_list_add_style+0xac>)
  409ca6:	4788      	blx	r1
  409ca8:	e7fe      	b.n	409ca8 <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  409caa:	2201      	movs	r2, #1
  409cac:	e7e4      	b.n	409c78 <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  409cae:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  409cb2:	4419      	add	r1, r3
  409cb4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  409cb8:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  409cbc:	3b01      	subs	r3, #1
  409cbe:	b2db      	uxtb	r3, r3
  409cc0:	4293      	cmp	r3, r2
  409cc2:	d8f4      	bhi.n	409cae <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  409cc4:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  409cc8:	7923      	ldrb	r3, [r4, #4]
  409cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409cce:	3201      	adds	r2, #1
  409cd0:	f362 0305 	bfi	r3, r2, #0, #6
  409cd4:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409cd6:	6025      	str	r5, [r4, #0]
  409cd8:	bd70      	pop	{r4, r5, r6, pc}
  409cda:	4770      	bx	lr
  409cdc:	00409b81 	.word	0x00409b81
  409ce0:	00416189 	.word	0x00416189
  409ce4:	00415a81 	.word	0x00415a81
  409ce8:	004164b9 	.word	0x004164b9
  409cec:	00428c94 	.word	0x00428c94
  409cf0:	00415a8d 	.word	0x00415a8d

00409cf4 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  409cf4:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  409cf6:	7902      	ldrb	r2, [r0, #4]
  409cf8:	f012 0f40 	tst.w	r2, #64	; 0x40
  409cfc:	d015      	beq.n	409d2a <get_alloc_local_style+0x36>
  409cfe:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409d00:	8881      	ldrh	r1, [r0, #4]
  409d02:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  409d06:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  409d0a:	d00c      	beq.n	409d26 <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409d0c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  409d10:	d027      	beq.n	409d62 <get_alloc_local_style+0x6e>
  409d12:	7902      	ldrb	r2, [r0, #4]
  409d14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409d18:	4293      	cmp	r3, r2
  409d1a:	da24      	bge.n	409d66 <get_alloc_local_style+0x72>
    return list->style_list[id];
  409d1c:	6802      	ldr	r2, [r0, #0]
  409d1e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  409d22:	4628      	mov	r0, r5
  409d24:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  409d26:	3301      	adds	r3, #1
  409d28:	e7f0      	b.n	409d0c <get_alloc_local_style+0x18>
  409d2a:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  409d2c:	2004      	movs	r0, #4
  409d2e:	4b0f      	ldr	r3, [pc, #60]	; (409d6c <get_alloc_local_style+0x78>)
  409d30:	4798      	blx	r3
  409d32:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  409d34:	4b0e      	ldr	r3, [pc, #56]	; (409d70 <get_alloc_local_style+0x7c>)
  409d36:	4798      	blx	r3
  409d38:	b168      	cbz	r0, 409d56 <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  409d3a:	2d00      	cmp	r5, #0
  409d3c:	d0f1      	beq.n	409d22 <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  409d3e:	4628      	mov	r0, r5
  409d40:	4b0c      	ldr	r3, [pc, #48]	; (409d74 <get_alloc_local_style+0x80>)
  409d42:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  409d44:	4629      	mov	r1, r5
  409d46:	4620      	mov	r0, r4
  409d48:	4b0b      	ldr	r3, [pc, #44]	; (409d78 <get_alloc_local_style+0x84>)
  409d4a:	4798      	blx	r3
    list->has_local = 1;
  409d4c:	7923      	ldrb	r3, [r4, #4]
  409d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409d52:	7123      	strb	r3, [r4, #4]
    return local_style;
  409d54:	e7e5      	b.n	409d22 <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  409d56:	462a      	mov	r2, r5
  409d58:	2300      	movs	r3, #0
  409d5a:	4808      	ldr	r0, [pc, #32]	; (409d7c <get_alloc_local_style+0x88>)
  409d5c:	4908      	ldr	r1, [pc, #32]	; (409d80 <get_alloc_local_style+0x8c>)
  409d5e:	4788      	blx	r1
  409d60:	e7fe      	b.n	409d60 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409d62:	2500      	movs	r5, #0
  409d64:	e7dd      	b.n	409d22 <get_alloc_local_style+0x2e>
  409d66:	2500      	movs	r5, #0
  409d68:	e7db      	b.n	409d22 <get_alloc_local_style+0x2e>
  409d6a:	bf00      	nop
  409d6c:	00416189 	.word	0x00416189
  409d70:	00415a81 	.word	0x00415a81
  409d74:	00409b61 	.word	0x00409b61
  409d78:	00409c45 	.word	0x00409c45
  409d7c:	00428c94 	.word	0x00428c94
  409d80:	00415a8d 	.word	0x00415a8d

00409d84 <lv_style_reset>:
{
  409d84:	b510      	push	{r4, lr}
  409d86:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  409d88:	6800      	ldr	r0, [r0, #0]
  409d8a:	4b02      	ldr	r3, [pc, #8]	; (409d94 <lv_style_reset+0x10>)
  409d8c:	4798      	blx	r3
    style->map = NULL;
  409d8e:	2300      	movs	r3, #0
  409d90:	6023      	str	r3, [r4, #0]
  409d92:	bd10      	pop	{r4, pc}
  409d94:	0041624d 	.word	0x0041624d

00409d98 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  409d98:	6803      	ldr	r3, [r0, #0]
  409d9a:	b30b      	cbz	r3, 409de0 <_lv_style_get_mem_size+0x48>
{
  409d9c:	b082      	sub	sp, #8
  409d9e:	2200      	movs	r2, #0
  409da0:	e001      	b.n	409da6 <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409da2:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  409da4:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409da6:	6803      	ldr	r3, [r0, #0]
  409da8:	5c99      	ldrb	r1, [r3, r2]
  409daa:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409dae:	4413      	add	r3, r2
  409db0:	785b      	ldrb	r3, [r3, #1]
  409db2:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409db6:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409db8:	2bff      	cmp	r3, #255	; 0xff
  409dba:	d00d      	beq.n	409dd8 <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  409dbc:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409dc0:	2b08      	cmp	r3, #8
  409dc2:	d9ee      	bls.n	409da2 <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409dc4:	2b0b      	cmp	r3, #11
  409dc6:	d903      	bls.n	409dd0 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409dc8:	2b0d      	cmp	r3, #13
  409dca:	d803      	bhi.n	409dd4 <_lv_style_get_mem_size+0x3c>
  409dcc:	2303      	movs	r3, #3
  409dce:	e7e9      	b.n	409da4 <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409dd0:	2304      	movs	r3, #4
  409dd2:	e7e7      	b.n	409da4 <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  409dd4:	2306      	movs	r3, #6
  409dd6:	e7e5      	b.n	409da4 <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  409dd8:	1c90      	adds	r0, r2, #2
  409dda:	b280      	uxth	r0, r0
}
  409ddc:	b002      	add	sp, #8
  409dde:	4770      	bx	lr
    if(style->map == NULL) return 0;
  409de0:	2000      	movs	r0, #0
  409de2:	4770      	bx	lr

00409de4 <lv_style_copy>:
    if(style_src == NULL) return;
  409de4:	b181      	cbz	r1, 409e08 <lv_style_copy+0x24>
{
  409de6:	b570      	push	{r4, r5, r6, lr}
  409de8:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  409dea:	680a      	ldr	r2, [r1, #0]
  409dec:	b15a      	cbz	r2, 409e06 <lv_style_copy+0x22>
  409dee:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  409df0:	4608      	mov	r0, r1
  409df2:	4b06      	ldr	r3, [pc, #24]	; (409e0c <lv_style_copy+0x28>)
  409df4:	4798      	blx	r3
  409df6:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  409df8:	4b05      	ldr	r3, [pc, #20]	; (409e10 <lv_style_copy+0x2c>)
  409dfa:	4798      	blx	r3
  409dfc:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  409dfe:	4632      	mov	r2, r6
  409e00:	6821      	ldr	r1, [r4, #0]
  409e02:	4b04      	ldr	r3, [pc, #16]	; (409e14 <lv_style_copy+0x30>)
  409e04:	4798      	blx	r3
  409e06:	bd70      	pop	{r4, r5, r6, pc}
  409e08:	4770      	bx	lr
  409e0a:	bf00      	nop
  409e0c:	00409d99 	.word	0x00409d99
  409e10:	00416189 	.word	0x00416189
  409e14:	00416399 	.word	0x00416399

00409e18 <lv_style_remove_prop>:
    if(style == NULL) return false;
  409e18:	2800      	cmp	r0, #0
  409e1a:	f000 808d 	beq.w	409f38 <lv_style_remove_prop+0x120>
{
  409e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409e22:	b082      	sub	sp, #8
  409e24:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  409e26:	6803      	ldr	r3, [r0, #0]
  409e28:	2b00      	cmp	r3, #0
  409e2a:	d05e      	beq.n	409eea <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  409e2c:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  409e2e:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  409e30:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409e32:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  409e36:	46be      	mov	lr, r7
  409e38:	e03b      	b.n	409eb2 <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  409e3a:	f8d4 c000 	ldr.w	ip, [r4]
  409e3e:	f81c 8002 	ldrb.w	r8, [ip, r2]
  409e42:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409e46:	f81c 0000 	ldrb.w	r0, [ip, r0]
  409e4a:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  409e4e:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409e52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  409e56:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409e5a:	ea86 0800 	eor.w	r8, r6, r0
  409e5e:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  409e62:	d00c      	beq.n	409e7e <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409e64:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  409e68:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  409e6c:	ea30 0808 	bics.w	r8, r0, r8
  409e70:	d12d      	bne.n	409ece <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409e72:	4570      	cmp	r0, lr
  409e74:	dd2b      	ble.n	409ece <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409e76:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  409e7a:	b217      	sxth	r7, r2
  409e7c:	e027      	b.n	409ece <lv_style_remove_prop+0xb6>
                return i;
  409e7e:	4617      	mov	r7, r2
    if(id >= 0) {
  409e80:	2f00      	cmp	r7, #0
  409e82:	db5b      	blt.n	409f3c <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  409e84:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  409e86:	6823      	ldr	r3, [r4, #0]
  409e88:	5dda      	ldrb	r2, [r3, r7]
  409e8a:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409e8e:	441f      	add	r7, r3
  409e90:	787b      	ldrb	r3, [r7, #1]
  409e92:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409e96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  409e9a:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409e9c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  409ea0:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409ea4:	d024      	beq.n	409ef0 <lv_style_remove_prop+0xd8>
    return false;
  409ea6:	2000      	movs	r0, #0
}
  409ea8:	b002      	add	sp, #8
  409eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409eae:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409eb0:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409eb2:	6823      	ldr	r3, [r4, #0]
  409eb4:	5c98      	ldrb	r0, [r3, r2]
  409eb6:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409eba:	1c50      	adds	r0, r2, #1
  409ebc:	5c1b      	ldrb	r3, [r3, r0]
  409ebe:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409ec2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409ec6:	2bff      	cmp	r3, #255	; 0xff
  409ec8:	d0da      	beq.n	409e80 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  409eca:	429d      	cmp	r5, r3
  409ecc:	d0b5      	beq.n	409e3a <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  409ece:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409ed2:	2b08      	cmp	r3, #8
  409ed4:	d9eb      	bls.n	409eae <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ed6:	2b0b      	cmp	r3, #11
  409ed8:	d903      	bls.n	409ee2 <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409eda:	2b0d      	cmp	r3, #13
  409edc:	d803      	bhi.n	409ee6 <lv_style_remove_prop+0xce>
  409ede:	2303      	movs	r3, #3
  409ee0:	e7e6      	b.n	409eb0 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ee2:	2304      	movs	r3, #4
  409ee4:	e7e4      	b.n	409eb0 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  409ee6:	2306      	movs	r3, #6
  409ee8:	e7e2      	b.n	409eb0 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  409eea:	f04f 37ff 	mov.w	r7, #4294967295
  409eee:	e7c7      	b.n	409e80 <lv_style_remove_prop+0x68>
  409ef0:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  409ef2:	4620      	mov	r0, r4
  409ef4:	4b12      	ldr	r3, [pc, #72]	; (409f40 <lv_style_remove_prop+0x128>)
  409ef6:	4798      	blx	r3
    prop_id &= 0xF;
  409ef8:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409efc:	2908      	cmp	r1, #8
  409efe:	d905      	bls.n	409f0c <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409f00:	290b      	cmp	r1, #11
  409f02:	d90f      	bls.n	409f24 <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409f04:	290d      	cmp	r1, #13
  409f06:	d80f      	bhi.n	409f28 <lv_style_remove_prop+0x110>
  409f08:	2603      	movs	r6, #3
  409f0a:	e000      	b.n	409f0e <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409f0c:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  409f0e:	462b      	mov	r3, r5
  409f10:	b2f2      	uxtb	r2, r6
  409f12:	1a81      	subs	r1, r0, r2
  409f14:	428b      	cmp	r3, r1
  409f16:	d209      	bcs.n	409f2c <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  409f18:	6821      	ldr	r1, [r4, #0]
  409f1a:	441a      	add	r2, r3
  409f1c:	5c8a      	ldrb	r2, [r1, r2]
  409f1e:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  409f20:	3301      	adds	r3, #1
  409f22:	e7f5      	b.n	409f10 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409f24:	2604      	movs	r6, #4
  409f26:	e7f2      	b.n	409f0e <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  409f28:	2606      	movs	r6, #6
  409f2a:	e7f0      	b.n	409f0e <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  409f2c:	6820      	ldr	r0, [r4, #0]
  409f2e:	4b05      	ldr	r3, [pc, #20]	; (409f44 <lv_style_remove_prop+0x12c>)
  409f30:	4798      	blx	r3
  409f32:	6020      	str	r0, [r4, #0]
            return true;
  409f34:	2001      	movs	r0, #1
  409f36:	e7b7      	b.n	409ea8 <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  409f38:	2000      	movs	r0, #0
  409f3a:	4770      	bx	lr
    return false;
  409f3c:	2000      	movs	r0, #0
  409f3e:	e7b3      	b.n	409ea8 <lv_style_remove_prop+0x90>
  409f40:	00409d99 	.word	0x00409d99
  409f44:	004164b9 	.word	0x004164b9

00409f48 <_lv_style_set_int>:
{
  409f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  409f4a:	b085      	sub	sp, #20
  409f4c:	f8ad 1006 	strh.w	r1, [sp, #6]
  409f50:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  409f54:	6803      	ldr	r3, [r0, #0]
  409f56:	2b00      	cmp	r3, #0
  409f58:	d061      	beq.n	40a01e <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  409f5a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409f5c:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409f5e:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409f60:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409f64:	4627      	mov	r7, r4
  409f66:	e023      	b.n	409fb0 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  409f68:	f8d0 e000 	ldr.w	lr, [r0]
  409f6c:	f81e c002 	ldrb.w	ip, [lr, r2]
  409f70:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409f74:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409f78:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409f7c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409f80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409f84:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409f88:	ea85 0c01 	eor.w	ip, r5, r1
  409f8c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409f90:	d02b      	beq.n	409fea <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409f92:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409f96:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409f9a:	ea31 0c0c 	bics.w	ip, r1, ip
  409f9e:	d115      	bne.n	409fcc <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409fa0:	42b9      	cmp	r1, r7
  409fa2:	dd13      	ble.n	409fcc <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409fa4:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409fa8:	b214      	sxth	r4, r2
  409faa:	e00f      	b.n	409fcc <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409fac:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409fae:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409fb0:	6803      	ldr	r3, [r0, #0]
  409fb2:	5c99      	ldrb	r1, [r3, r2]
  409fb4:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409fb8:	1c51      	adds	r1, r2, #1
  409fba:	5c5b      	ldrb	r3, [r3, r1]
  409fbc:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409fc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409fc4:	2bff      	cmp	r3, #255	; 0xff
  409fc6:	d00f      	beq.n	409fe8 <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  409fc8:	429e      	cmp	r6, r3
  409fca:	d0cd      	beq.n	409f68 <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  409fcc:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409fd0:	2b08      	cmp	r3, #8
  409fd2:	d9eb      	bls.n	409fac <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fd4:	2b0b      	cmp	r3, #11
  409fd6:	d903      	bls.n	409fe0 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409fd8:	2b0d      	cmp	r3, #13
  409fda:	d803      	bhi.n	409fe4 <_lv_style_set_int+0x9c>
  409fdc:	2303      	movs	r3, #3
  409fde:	e7e6      	b.n	409fae <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fe0:	2304      	movs	r3, #4
  409fe2:	e7e4      	b.n	409fae <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  409fe4:	2306      	movs	r3, #6
  409fe6:	e7e2      	b.n	409fae <_lv_style_set_int+0x66>
    return id_guess;
  409fe8:	4622      	mov	r2, r4
    if(id >= 0) {
  409fea:	2a00      	cmp	r2, #0
  409fec:	db23      	blt.n	40a036 <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  409fee:	6803      	ldr	r3, [r0, #0]
  409ff0:	5c99      	ldrb	r1, [r3, r2]
  409ff2:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409ff6:	4413      	add	r3, r2
  409ff8:	785b      	ldrb	r3, [r3, #1]
  409ffa:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409ffe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a002:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a006:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a008:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a00c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a010:	d111      	bne.n	40a036 <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  40a012:	6803      	ldr	r3, [r0, #0]
  40a014:	3202      	adds	r2, #2
  40a016:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a018:	a901      	add	r1, sp, #4
  40a01a:	2302      	movs	r3, #2
  40a01c:	e007      	b.n	40a02e <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  40a01e:	f04f 32ff 	mov.w	r2, #4294967295
  40a022:	e7e2      	b.n	409fea <_lv_style_set_int+0xa2>
        *d8 = *s8;
  40a024:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a028:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a02c:	3b01      	subs	r3, #1
    while(len) {
  40a02e:	2b00      	cmp	r3, #0
  40a030:	d1f8      	bne.n	40a024 <_lv_style_set_int+0xdc>
}
  40a032:	b005      	add	sp, #20
  40a034:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a036:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a038:	23ff      	movs	r3, #255	; 0xff
  40a03a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a03e:	4b21      	ldr	r3, [pc, #132]	; (40a0c4 <_lv_style_set_int+0x17c>)
  40a040:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a042:	4603      	mov	r3, r0
  40a044:	b908      	cbnz	r0, 40a04a <_lv_style_set_int+0x102>
  40a046:	3302      	adds	r3, #2
  40a048:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  40a04a:	3304      	adds	r3, #4
  40a04c:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a04e:	4621      	mov	r1, r4
  40a050:	6828      	ldr	r0, [r5, #0]
  40a052:	4b1d      	ldr	r3, [pc, #116]	; (40a0c8 <_lv_style_set_int+0x180>)
  40a054:	4798      	blx	r3
  40a056:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a058:	4b1c      	ldr	r3, [pc, #112]	; (40a0cc <_lv_style_set_int+0x184>)
  40a05a:	4798      	blx	r3
  40a05c:	b148      	cbz	r0, 40a072 <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  40a05e:	2d00      	cmp	r5, #0
  40a060:	d0e7      	beq.n	40a032 <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a062:	682b      	ldr	r3, [r5, #0]
  40a064:	1f20      	subs	r0, r4, #4
  40a066:	1fa2      	subs	r2, r4, #6
  40a068:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a06a:	f10d 0106 	add.w	r1, sp, #6
  40a06e:	2202      	movs	r2, #2
  40a070:	e00a      	b.n	40a088 <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  40a072:	682a      	ldr	r2, [r5, #0]
  40a074:	2300      	movs	r3, #0
  40a076:	4816      	ldr	r0, [pc, #88]	; (40a0d0 <_lv_style_set_int+0x188>)
  40a078:	4916      	ldr	r1, [pc, #88]	; (40a0d4 <_lv_style_set_int+0x18c>)
  40a07a:	4788      	blx	r1
  40a07c:	e7fe      	b.n	40a07c <_lv_style_set_int+0x134>
        *d8 = *s8;
  40a07e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a082:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a086:	3a01      	subs	r2, #1
    while(len) {
  40a088:	2a00      	cmp	r2, #0
  40a08a:	d1f8      	bne.n	40a07e <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  40a08c:	682b      	ldr	r3, [r5, #0]
  40a08e:	3c02      	subs	r4, #2
  40a090:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a092:	a901      	add	r1, sp, #4
  40a094:	2202      	movs	r2, #2
  40a096:	e004      	b.n	40a0a2 <_lv_style_set_int+0x15a>
        *d8 = *s8;
  40a098:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a09c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a0a0:	3a01      	subs	r2, #1
    while(len) {
  40a0a2:	2a00      	cmp	r2, #0
  40a0a4:	d1f8      	bne.n	40a098 <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a0a6:	682b      	ldr	r3, [r5, #0]
  40a0a8:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a0aa:	f10d 020e 	add.w	r2, sp, #14
  40a0ae:	2302      	movs	r3, #2
  40a0b0:	e004      	b.n	40a0bc <_lv_style_set_int+0x174>
        *d8 = *s8;
  40a0b2:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a0b6:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a0ba:	3b01      	subs	r3, #1
    while(len) {
  40a0bc:	2b00      	cmp	r3, #0
  40a0be:	d1f8      	bne.n	40a0b2 <_lv_style_set_int+0x16a>
  40a0c0:	e7b7      	b.n	40a032 <_lv_style_set_int+0xea>
  40a0c2:	bf00      	nop
  40a0c4:	00409d99 	.word	0x00409d99
  40a0c8:	004164b9 	.word	0x004164b9
  40a0cc:	00415a81 	.word	0x00415a81
  40a0d0:	00428c94 	.word	0x00428c94
  40a0d4:	00415a8d 	.word	0x00415a8d

0040a0d8 <_lv_style_set_color>:
{
  40a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a0da:	b085      	sub	sp, #20
  40a0dc:	f8ad 2004 	strh.w	r2, [sp, #4]
  40a0e0:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a0e4:	6803      	ldr	r3, [r0, #0]
  40a0e6:	2b00      	cmp	r3, #0
  40a0e8:	d061      	beq.n	40a1ae <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  40a0ea:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a0ec:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a0ee:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a0f0:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a0f4:	4627      	mov	r7, r4
  40a0f6:	e023      	b.n	40a140 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  40a0f8:	f8d0 e000 	ldr.w	lr, [r0]
  40a0fc:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a100:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a104:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a108:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a10c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a110:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a114:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a118:	ea85 0c01 	eor.w	ip, r5, r1
  40a11c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a120:	d02b      	beq.n	40a17a <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a122:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a126:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a12a:	ea31 0c0c 	bics.w	ip, r1, ip
  40a12e:	d115      	bne.n	40a15c <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a130:	42b9      	cmp	r1, r7
  40a132:	dd13      	ble.n	40a15c <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a134:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a138:	b214      	sxth	r4, r2
  40a13a:	e00f      	b.n	40a15c <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a13c:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a13e:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a140:	6803      	ldr	r3, [r0, #0]
  40a142:	5c99      	ldrb	r1, [r3, r2]
  40a144:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a148:	1c51      	adds	r1, r2, #1
  40a14a:	5c5b      	ldrb	r3, [r3, r1]
  40a14c:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a150:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a154:	2bff      	cmp	r3, #255	; 0xff
  40a156:	d00f      	beq.n	40a178 <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  40a158:	429e      	cmp	r6, r3
  40a15a:	d0cd      	beq.n	40a0f8 <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  40a15c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a160:	2b08      	cmp	r3, #8
  40a162:	d9eb      	bls.n	40a13c <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a164:	2b0b      	cmp	r3, #11
  40a166:	d903      	bls.n	40a170 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a168:	2b0d      	cmp	r3, #13
  40a16a:	d803      	bhi.n	40a174 <_lv_style_set_color+0x9c>
  40a16c:	2303      	movs	r3, #3
  40a16e:	e7e6      	b.n	40a13e <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a170:	2304      	movs	r3, #4
  40a172:	e7e4      	b.n	40a13e <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  40a174:	2306      	movs	r3, #6
  40a176:	e7e2      	b.n	40a13e <_lv_style_set_color+0x66>
    return id_guess;
  40a178:	4622      	mov	r2, r4
    if(id >= 0) {
  40a17a:	2a00      	cmp	r2, #0
  40a17c:	db23      	blt.n	40a1c6 <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  40a17e:	6803      	ldr	r3, [r0, #0]
  40a180:	5c99      	ldrb	r1, [r3, r2]
  40a182:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a186:	4413      	add	r3, r2
  40a188:	785b      	ldrb	r3, [r3, #1]
  40a18a:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a18e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a192:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a196:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a198:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a19c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a1a0:	d111      	bne.n	40a1c6 <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  40a1a2:	6803      	ldr	r3, [r0, #0]
  40a1a4:	3202      	adds	r2, #2
  40a1a6:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a1a8:	a901      	add	r1, sp, #4
  40a1aa:	2302      	movs	r3, #2
  40a1ac:	e007      	b.n	40a1be <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  40a1ae:	f04f 32ff 	mov.w	r2, #4294967295
  40a1b2:	e7e2      	b.n	40a17a <_lv_style_set_color+0xa2>
        *d8 = *s8;
  40a1b4:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a1b8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a1bc:	3b01      	subs	r3, #1
    while(len) {
  40a1be:	2b00      	cmp	r3, #0
  40a1c0:	d1f8      	bne.n	40a1b4 <_lv_style_set_color+0xdc>
}
  40a1c2:	b005      	add	sp, #20
  40a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a1c6:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a1c8:	23ff      	movs	r3, #255	; 0xff
  40a1ca:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a1ce:	4b21      	ldr	r3, [pc, #132]	; (40a254 <_lv_style_set_color+0x17c>)
  40a1d0:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a1d2:	4603      	mov	r3, r0
  40a1d4:	b908      	cbnz	r0, 40a1da <_lv_style_set_color+0x102>
  40a1d6:	3302      	adds	r3, #2
  40a1d8:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  40a1da:	3304      	adds	r3, #4
  40a1dc:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a1de:	4621      	mov	r1, r4
  40a1e0:	6828      	ldr	r0, [r5, #0]
  40a1e2:	4b1d      	ldr	r3, [pc, #116]	; (40a258 <_lv_style_set_color+0x180>)
  40a1e4:	4798      	blx	r3
  40a1e6:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a1e8:	4b1c      	ldr	r3, [pc, #112]	; (40a25c <_lv_style_set_color+0x184>)
  40a1ea:	4798      	blx	r3
  40a1ec:	b148      	cbz	r0, 40a202 <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  40a1ee:	2d00      	cmp	r5, #0
  40a1f0:	d0e7      	beq.n	40a1c2 <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a1f2:	682b      	ldr	r3, [r5, #0]
  40a1f4:	1f20      	subs	r0, r4, #4
  40a1f6:	1fa2      	subs	r2, r4, #6
  40a1f8:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a1fa:	f10d 0106 	add.w	r1, sp, #6
  40a1fe:	2202      	movs	r2, #2
  40a200:	e00a      	b.n	40a218 <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  40a202:	682a      	ldr	r2, [r5, #0]
  40a204:	2300      	movs	r3, #0
  40a206:	4816      	ldr	r0, [pc, #88]	; (40a260 <_lv_style_set_color+0x188>)
  40a208:	4916      	ldr	r1, [pc, #88]	; (40a264 <_lv_style_set_color+0x18c>)
  40a20a:	4788      	blx	r1
  40a20c:	e7fe      	b.n	40a20c <_lv_style_set_color+0x134>
        *d8 = *s8;
  40a20e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a212:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a216:	3a01      	subs	r2, #1
    while(len) {
  40a218:	2a00      	cmp	r2, #0
  40a21a:	d1f8      	bne.n	40a20e <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  40a21c:	682b      	ldr	r3, [r5, #0]
  40a21e:	3c02      	subs	r4, #2
  40a220:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a222:	a901      	add	r1, sp, #4
  40a224:	2202      	movs	r2, #2
  40a226:	e004      	b.n	40a232 <_lv_style_set_color+0x15a>
        *d8 = *s8;
  40a228:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a22c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a230:	3a01      	subs	r2, #1
    while(len) {
  40a232:	2a00      	cmp	r2, #0
  40a234:	d1f8      	bne.n	40a228 <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a236:	682b      	ldr	r3, [r5, #0]
  40a238:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a23a:	f10d 020e 	add.w	r2, sp, #14
  40a23e:	2302      	movs	r3, #2
  40a240:	e004      	b.n	40a24c <_lv_style_set_color+0x174>
        *d8 = *s8;
  40a242:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a246:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a24a:	3b01      	subs	r3, #1
    while(len) {
  40a24c:	2b00      	cmp	r3, #0
  40a24e:	d1f8      	bne.n	40a242 <_lv_style_set_color+0x16a>
  40a250:	e7b7      	b.n	40a1c2 <_lv_style_set_color+0xea>
  40a252:	bf00      	nop
  40a254:	00409d99 	.word	0x00409d99
  40a258:	004164b9 	.word	0x004164b9
  40a25c:	00415a81 	.word	0x00415a81
  40a260:	00428c94 	.word	0x00428c94
  40a264:	00415a8d 	.word	0x00415a8d

0040a268 <_lv_style_set_opa>:
{
  40a268:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a26a:	b085      	sub	sp, #20
  40a26c:	f8ad 1006 	strh.w	r1, [sp, #6]
  40a270:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  40a274:	6803      	ldr	r3, [r0, #0]
  40a276:	2b00      	cmp	r3, #0
  40a278:	d064      	beq.n	40a344 <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  40a27a:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a27c:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a27e:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a280:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a284:	4627      	mov	r7, r4
  40a286:	e023      	b.n	40a2d0 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  40a288:	f8d0 e000 	ldr.w	lr, [r0]
  40a28c:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a290:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a294:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a298:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a29c:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a2a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a2a4:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a2a8:	ea85 0c01 	eor.w	ip, r5, r1
  40a2ac:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a2b0:	d02b      	beq.n	40a30a <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a2b2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a2b6:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a2ba:	ea31 0c0c 	bics.w	ip, r1, ip
  40a2be:	d115      	bne.n	40a2ec <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a2c0:	42b9      	cmp	r1, r7
  40a2c2:	dd13      	ble.n	40a2ec <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a2c4:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a2c8:	b214      	sxth	r4, r2
  40a2ca:	e00f      	b.n	40a2ec <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a2cc:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a2ce:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a2d0:	6803      	ldr	r3, [r0, #0]
  40a2d2:	5c99      	ldrb	r1, [r3, r2]
  40a2d4:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a2d8:	1c51      	adds	r1, r2, #1
  40a2da:	5c5b      	ldrb	r3, [r3, r1]
  40a2dc:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a2e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a2e4:	2bff      	cmp	r3, #255	; 0xff
  40a2e6:	d00f      	beq.n	40a308 <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  40a2e8:	429e      	cmp	r6, r3
  40a2ea:	d0cd      	beq.n	40a288 <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  40a2ec:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a2f0:	2b08      	cmp	r3, #8
  40a2f2:	d9eb      	bls.n	40a2cc <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a2f4:	2b0b      	cmp	r3, #11
  40a2f6:	d903      	bls.n	40a300 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a2f8:	2b0d      	cmp	r3, #13
  40a2fa:	d803      	bhi.n	40a304 <_lv_style_set_opa+0x9c>
  40a2fc:	2303      	movs	r3, #3
  40a2fe:	e7e6      	b.n	40a2ce <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a300:	2304      	movs	r3, #4
  40a302:	e7e4      	b.n	40a2ce <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  40a304:	2306      	movs	r3, #6
  40a306:	e7e2      	b.n	40a2ce <_lv_style_set_opa+0x66>
    return id_guess;
  40a308:	4622      	mov	r2, r4
    if(id >= 0) {
  40a30a:	2a00      	cmp	r2, #0
  40a30c:	db23      	blt.n	40a356 <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  40a30e:	6803      	ldr	r3, [r0, #0]
  40a310:	5c99      	ldrb	r1, [r3, r2]
  40a312:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a316:	4413      	add	r3, r2
  40a318:	785b      	ldrb	r3, [r3, #1]
  40a31a:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a31e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a322:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a326:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a328:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a32c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a330:	d111      	bne.n	40a356 <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  40a332:	6803      	ldr	r3, [r0, #0]
  40a334:	3202      	adds	r2, #2
  40a336:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a338:	f10d 0105 	add.w	r1, sp, #5
  40a33c:	2301      	movs	r3, #1
    while(len) {
  40a33e:	b923      	cbnz	r3, 40a34a <_lv_style_set_opa+0xe2>
}
  40a340:	b005      	add	sp, #20
  40a342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  40a344:	f04f 32ff 	mov.w	r2, #4294967295
  40a348:	e7df      	b.n	40a30a <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  40a34a:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a34e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a352:	3b01      	subs	r3, #1
  40a354:	e7f3      	b.n	40a33e <_lv_style_set_opa+0xd6>
  40a356:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a358:	23ff      	movs	r3, #255	; 0xff
  40a35a:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a35e:	4b21      	ldr	r3, [pc, #132]	; (40a3e4 <_lv_style_set_opa+0x17c>)
  40a360:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a362:	4603      	mov	r3, r0
  40a364:	b908      	cbnz	r0, 40a36a <_lv_style_set_opa+0x102>
  40a366:	3302      	adds	r3, #2
  40a368:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  40a36a:	3303      	adds	r3, #3
  40a36c:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a36e:	4621      	mov	r1, r4
  40a370:	6828      	ldr	r0, [r5, #0]
  40a372:	4b1d      	ldr	r3, [pc, #116]	; (40a3e8 <_lv_style_set_opa+0x180>)
  40a374:	4798      	blx	r3
  40a376:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a378:	4b1c      	ldr	r3, [pc, #112]	; (40a3ec <_lv_style_set_opa+0x184>)
  40a37a:	4798      	blx	r3
  40a37c:	b148      	cbz	r0, 40a392 <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  40a37e:	2d00      	cmp	r5, #0
  40a380:	d0de      	beq.n	40a340 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a382:	682b      	ldr	r3, [r5, #0]
  40a384:	1ee0      	subs	r0, r4, #3
  40a386:	1f62      	subs	r2, r4, #5
  40a388:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a38a:	f10d 0106 	add.w	r1, sp, #6
  40a38e:	2202      	movs	r2, #2
  40a390:	e00a      	b.n	40a3a8 <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  40a392:	682a      	ldr	r2, [r5, #0]
  40a394:	2300      	movs	r3, #0
  40a396:	4816      	ldr	r0, [pc, #88]	; (40a3f0 <_lv_style_set_opa+0x188>)
  40a398:	4916      	ldr	r1, [pc, #88]	; (40a3f4 <_lv_style_set_opa+0x18c>)
  40a39a:	4788      	blx	r1
  40a39c:	e7fe      	b.n	40a39c <_lv_style_set_opa+0x134>
        *d8 = *s8;
  40a39e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a3a2:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a3a6:	3a01      	subs	r2, #1
    while(len) {
  40a3a8:	2a00      	cmp	r2, #0
  40a3aa:	d1f8      	bne.n	40a39e <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  40a3ac:	682b      	ldr	r3, [r5, #0]
  40a3ae:	3c02      	subs	r4, #2
  40a3b0:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a3b2:	f10d 0105 	add.w	r1, sp, #5
  40a3b6:	2201      	movs	r2, #1
    while(len) {
  40a3b8:	b92a      	cbnz	r2, 40a3c6 <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a3ba:	682b      	ldr	r3, [r5, #0]
  40a3bc:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a3be:	f10d 020e 	add.w	r2, sp, #14
  40a3c2:	2302      	movs	r3, #2
  40a3c4:	e00a      	b.n	40a3dc <_lv_style_set_opa+0x174>
        *d8 = *s8;
  40a3c6:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a3ca:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a3ce:	3a01      	subs	r2, #1
  40a3d0:	e7f2      	b.n	40a3b8 <_lv_style_set_opa+0x150>
        *d8 = *s8;
  40a3d2:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a3d6:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a3da:	3b01      	subs	r3, #1
    while(len) {
  40a3dc:	2b00      	cmp	r3, #0
  40a3de:	d1f8      	bne.n	40a3d2 <_lv_style_set_opa+0x16a>
  40a3e0:	e7ae      	b.n	40a340 <_lv_style_set_opa+0xd8>
  40a3e2:	bf00      	nop
  40a3e4:	00409d99 	.word	0x00409d99
  40a3e8:	004164b9 	.word	0x004164b9
  40a3ec:	00415a81 	.word	0x00415a81
  40a3f0:	00428c94 	.word	0x00428c94
  40a3f4:	00415a8d 	.word	0x00415a8d

0040a3f8 <_lv_style_set_ptr>:
{
  40a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a3fa:	b085      	sub	sp, #20
  40a3fc:	9200      	str	r2, [sp, #0]
  40a3fe:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a402:	6803      	ldr	r3, [r0, #0]
  40a404:	2b00      	cmp	r3, #0
  40a406:	d061      	beq.n	40a4cc <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  40a408:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a40a:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a40c:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a40e:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a412:	4627      	mov	r7, r4
  40a414:	e023      	b.n	40a45e <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  40a416:	f8d0 e000 	ldr.w	lr, [r0]
  40a41a:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a41e:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a422:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a426:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a42a:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a42e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a432:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a436:	ea85 0c01 	eor.w	ip, r5, r1
  40a43a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a43e:	d02b      	beq.n	40a498 <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a440:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a444:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a448:	ea31 0c0c 	bics.w	ip, r1, ip
  40a44c:	d115      	bne.n	40a47a <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a44e:	42b9      	cmp	r1, r7
  40a450:	dd13      	ble.n	40a47a <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a452:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a456:	b214      	sxth	r4, r2
  40a458:	e00f      	b.n	40a47a <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a45a:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a45c:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a45e:	6803      	ldr	r3, [r0, #0]
  40a460:	5c99      	ldrb	r1, [r3, r2]
  40a462:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a466:	1c51      	adds	r1, r2, #1
  40a468:	5c5b      	ldrb	r3, [r3, r1]
  40a46a:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a46e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a472:	2bff      	cmp	r3, #255	; 0xff
  40a474:	d00f      	beq.n	40a496 <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  40a476:	429e      	cmp	r6, r3
  40a478:	d0cd      	beq.n	40a416 <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  40a47a:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a47e:	2b08      	cmp	r3, #8
  40a480:	d9eb      	bls.n	40a45a <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a482:	2b0b      	cmp	r3, #11
  40a484:	d903      	bls.n	40a48e <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a486:	2b0d      	cmp	r3, #13
  40a488:	d803      	bhi.n	40a492 <_lv_style_set_ptr+0x9a>
  40a48a:	2303      	movs	r3, #3
  40a48c:	e7e6      	b.n	40a45c <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a48e:	2304      	movs	r3, #4
  40a490:	e7e4      	b.n	40a45c <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  40a492:	2306      	movs	r3, #6
  40a494:	e7e2      	b.n	40a45c <_lv_style_set_ptr+0x64>
    return id_guess;
  40a496:	4622      	mov	r2, r4
    if(id >= 0) {
  40a498:	2a00      	cmp	r2, #0
  40a49a:	db23      	blt.n	40a4e4 <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  40a49c:	6803      	ldr	r3, [r0, #0]
  40a49e:	5c99      	ldrb	r1, [r3, r2]
  40a4a0:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a4a4:	4413      	add	r3, r2
  40a4a6:	785b      	ldrb	r3, [r3, #1]
  40a4a8:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a4ac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a4b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a4b4:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a4b6:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a4ba:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a4be:	d111      	bne.n	40a4e4 <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  40a4c0:	6803      	ldr	r3, [r0, #0]
  40a4c2:	3202      	adds	r2, #2
  40a4c4:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a4c6:	4669      	mov	r1, sp
  40a4c8:	2304      	movs	r3, #4
  40a4ca:	e007      	b.n	40a4dc <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  40a4cc:	f04f 32ff 	mov.w	r2, #4294967295
  40a4d0:	e7e2      	b.n	40a498 <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  40a4d2:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a4d6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a4da:	3b01      	subs	r3, #1
    while(len) {
  40a4dc:	2b00      	cmp	r3, #0
  40a4de:	d1f8      	bne.n	40a4d2 <_lv_style_set_ptr+0xda>
}
  40a4e0:	b005      	add	sp, #20
  40a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a4e4:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a4e6:	23ff      	movs	r3, #255	; 0xff
  40a4e8:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a4ec:	4b21      	ldr	r3, [pc, #132]	; (40a574 <_lv_style_set_ptr+0x17c>)
  40a4ee:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a4f0:	4603      	mov	r3, r0
  40a4f2:	b908      	cbnz	r0, 40a4f8 <_lv_style_set_ptr+0x100>
  40a4f4:	3302      	adds	r3, #2
  40a4f6:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  40a4f8:	3306      	adds	r3, #6
  40a4fa:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a4fc:	4621      	mov	r1, r4
  40a4fe:	6828      	ldr	r0, [r5, #0]
  40a500:	4b1d      	ldr	r3, [pc, #116]	; (40a578 <_lv_style_set_ptr+0x180>)
  40a502:	4798      	blx	r3
  40a504:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a506:	4b1d      	ldr	r3, [pc, #116]	; (40a57c <_lv_style_set_ptr+0x184>)
  40a508:	4798      	blx	r3
  40a50a:	b150      	cbz	r0, 40a522 <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  40a50c:	2d00      	cmp	r5, #0
  40a50e:	d0e7      	beq.n	40a4e0 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a510:	682b      	ldr	r3, [r5, #0]
  40a512:	1fa0      	subs	r0, r4, #6
  40a514:	f1a4 0208 	sub.w	r2, r4, #8
  40a518:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a51a:	f10d 0106 	add.w	r1, sp, #6
  40a51e:	2202      	movs	r2, #2
  40a520:	e00a      	b.n	40a538 <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  40a522:	682a      	ldr	r2, [r5, #0]
  40a524:	2300      	movs	r3, #0
  40a526:	4816      	ldr	r0, [pc, #88]	; (40a580 <_lv_style_set_ptr+0x188>)
  40a528:	4916      	ldr	r1, [pc, #88]	; (40a584 <_lv_style_set_ptr+0x18c>)
  40a52a:	4788      	blx	r1
  40a52c:	e7fe      	b.n	40a52c <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  40a52e:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a532:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a536:	3a01      	subs	r2, #1
    while(len) {
  40a538:	2a00      	cmp	r2, #0
  40a53a:	d1f8      	bne.n	40a52e <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  40a53c:	682b      	ldr	r3, [r5, #0]
  40a53e:	3c02      	subs	r4, #2
  40a540:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a542:	4669      	mov	r1, sp
  40a544:	2204      	movs	r2, #4
  40a546:	e004      	b.n	40a552 <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  40a548:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a54c:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a550:	3a01      	subs	r2, #1
    while(len) {
  40a552:	2a00      	cmp	r2, #0
  40a554:	d1f8      	bne.n	40a548 <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a556:	682b      	ldr	r3, [r5, #0]
  40a558:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a55a:	f10d 020e 	add.w	r2, sp, #14
  40a55e:	2302      	movs	r3, #2
  40a560:	e004      	b.n	40a56c <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  40a562:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a566:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a56a:	3b01      	subs	r3, #1
    while(len) {
  40a56c:	2b00      	cmp	r3, #0
  40a56e:	d1f8      	bne.n	40a562 <_lv_style_set_ptr+0x16a>
  40a570:	e7b6      	b.n	40a4e0 <_lv_style_set_ptr+0xe8>
  40a572:	bf00      	nop
  40a574:	00409d99 	.word	0x00409d99
  40a578:	004164b9 	.word	0x004164b9
  40a57c:	00415a81 	.word	0x00415a81
  40a580:	00428c94 	.word	0x00428c94
  40a584:	00415a8d 	.word	0x00415a8d

0040a588 <_lv_style_get_int>:
    if(style == NULL) return -1;
  40a588:	2800      	cmp	r0, #0
  40a58a:	d077      	beq.n	40a67c <_lv_style_get_int+0xf4>
{
  40a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a590:	b082      	sub	sp, #8
  40a592:	4692      	mov	sl, r2
  40a594:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a596:	6803      	ldr	r3, [r0, #0]
  40a598:	2b00      	cmp	r3, #0
  40a59a:	d072      	beq.n	40a682 <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  40a59c:	2b00      	cmp	r3, #0
  40a59e:	d051      	beq.n	40a644 <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a5a0:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a5a2:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a5a4:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a5a6:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a5aa:	46f4      	mov	ip, lr
  40a5ac:	e02e      	b.n	40a60c <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  40a5ae:	682a      	ldr	r2, [r5, #0]
  40a5b0:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a5b4:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a5b8:	5d14      	ldrb	r4, [r2, r4]
  40a5ba:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a5be:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a5c2:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a5c6:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a5ca:	ea87 0904 	eor.w	r9, r7, r4
  40a5ce:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a5d2:	d00d      	beq.n	40a5f0 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a5d4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a5d8:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a5dc:	ea34 0209 	bics.w	r2, r4, r9
  40a5e0:	d122      	bne.n	40a628 <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a5e2:	4564      	cmp	r4, ip
  40a5e4:	dd20      	ble.n	40a628 <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a5e6:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a5ea:	fa0f fe80 	sxth.w	lr, r0
  40a5ee:	e01b      	b.n	40a628 <_lv_style_get_int+0xa0>
                return i;
  40a5f0:	4686      	mov	lr, r0
    if(id < 0) {
  40a5f2:	f1be 0f00 	cmp.w	lr, #0
  40a5f6:	db47      	blt.n	40a688 <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  40a5f8:	682b      	ldr	r3, [r5, #0]
  40a5fa:	4674      	mov	r4, lr
  40a5fc:	f10e 0e02 	add.w	lr, lr, #2
  40a600:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a602:	4652      	mov	r2, sl
  40a604:	2302      	movs	r3, #2
  40a606:	e025      	b.n	40a654 <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a608:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a60a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a60c:	682b      	ldr	r3, [r5, #0]
  40a60e:	5c1c      	ldrb	r4, [r3, r0]
  40a610:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a614:	1c44      	adds	r4, r0, #1
  40a616:	5d1b      	ldrb	r3, [r3, r4]
  40a618:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a61c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a620:	2bff      	cmp	r3, #255	; 0xff
  40a622:	d0e6      	beq.n	40a5f2 <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  40a624:	429e      	cmp	r6, r3
  40a626:	d0c2      	beq.n	40a5ae <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  40a628:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a62c:	2b08      	cmp	r3, #8
  40a62e:	d9eb      	bls.n	40a608 <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a630:	2b0b      	cmp	r3, #11
  40a632:	d903      	bls.n	40a63c <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a634:	2b0d      	cmp	r3, #13
  40a636:	d803      	bhi.n	40a640 <_lv_style_get_int+0xb8>
  40a638:	2303      	movs	r3, #3
  40a63a:	e7e6      	b.n	40a60a <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a63c:	2304      	movs	r3, #4
  40a63e:	e7e4      	b.n	40a60a <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  40a640:	2306      	movs	r3, #6
  40a642:	e7e2      	b.n	40a60a <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  40a644:	f04f 3eff 	mov.w	lr, #4294967295
  40a648:	e7d3      	b.n	40a5f2 <_lv_style_get_int+0x6a>
        *d8 = *s8;
  40a64a:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a64e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a652:	3b01      	subs	r3, #1
    while(len) {
  40a654:	2b00      	cmp	r3, #0
  40a656:	d1f8      	bne.n	40a64a <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  40a658:	682b      	ldr	r3, [r5, #0]
  40a65a:	5d1a      	ldrb	r2, [r3, r4]
  40a65c:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a660:	4423      	add	r3, r4
  40a662:	785b      	ldrb	r3, [r3, #1]
  40a664:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a668:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a66c:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a66e:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a672:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a676:	b002      	add	sp, #8
  40a678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a67c:	f04f 30ff 	mov.w	r0, #4294967295
  40a680:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a682:	f04f 30ff 	mov.w	r0, #4294967295
  40a686:	e7f6      	b.n	40a676 <_lv_style_get_int+0xee>
        return -1;
  40a688:	f04f 30ff 	mov.w	r0, #4294967295
  40a68c:	e7f3      	b.n	40a676 <_lv_style_get_int+0xee>

0040a68e <_lv_style_get_opa>:
    if(style == NULL) return -1;
  40a68e:	2800      	cmp	r0, #0
  40a690:	d076      	beq.n	40a780 <_lv_style_get_opa+0xf2>
{
  40a692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a696:	b082      	sub	sp, #8
  40a698:	4692      	mov	sl, r2
  40a69a:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a69c:	6803      	ldr	r3, [r0, #0]
  40a69e:	2b00      	cmp	r3, #0
  40a6a0:	d071      	beq.n	40a786 <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  40a6a2:	2b00      	cmp	r3, #0
  40a6a4:	d063      	beq.n	40a76e <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  40a6a6:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a6a8:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a6aa:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a6ac:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a6b0:	46f4      	mov	ip, lr
  40a6b2:	e040      	b.n	40a736 <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  40a6b4:	682a      	ldr	r2, [r5, #0]
  40a6b6:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a6ba:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a6be:	5d14      	ldrb	r4, [r2, r4]
  40a6c0:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a6c4:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a6c8:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a6cc:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a6d0:	ea87 0904 	eor.w	r9, r7, r4
  40a6d4:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a6d8:	d00d      	beq.n	40a6f6 <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a6da:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a6de:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a6e2:	ea34 0209 	bics.w	r2, r4, r9
  40a6e6:	d134      	bne.n	40a752 <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a6e8:	4564      	cmp	r4, ip
  40a6ea:	dd32      	ble.n	40a752 <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a6ec:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a6f0:	fa0f fe80 	sxth.w	lr, r0
  40a6f4:	e02d      	b.n	40a752 <_lv_style_get_opa+0xc4>
                return i;
  40a6f6:	4686      	mov	lr, r0
    if(id < 0) {
  40a6f8:	f1be 0f00 	cmp.w	lr, #0
  40a6fc:	db46      	blt.n	40a78c <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  40a6fe:	6828      	ldr	r0, [r5, #0]
  40a700:	4674      	mov	r4, lr
  40a702:	f10e 0e02 	add.w	lr, lr, #2
  40a706:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  40a708:	4652      	mov	r2, sl
  40a70a:	2301      	movs	r3, #1
    while(len) {
  40a70c:	bb93      	cbnz	r3, 40a774 <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  40a70e:	682b      	ldr	r3, [r5, #0]
  40a710:	5d1a      	ldrb	r2, [r3, r4]
  40a712:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a716:	4423      	add	r3, r4
  40a718:	785b      	ldrb	r3, [r3, #1]
  40a71a:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a71e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a722:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a724:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a728:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a72c:	b002      	add	sp, #8
  40a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a732:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a734:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a736:	682b      	ldr	r3, [r5, #0]
  40a738:	5c1c      	ldrb	r4, [r3, r0]
  40a73a:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a73e:	1c44      	adds	r4, r0, #1
  40a740:	5d1b      	ldrb	r3, [r3, r4]
  40a742:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a746:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a74a:	2bff      	cmp	r3, #255	; 0xff
  40a74c:	d0d4      	beq.n	40a6f8 <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  40a74e:	429e      	cmp	r6, r3
  40a750:	d0b0      	beq.n	40a6b4 <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  40a752:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a756:	2b08      	cmp	r3, #8
  40a758:	d9eb      	bls.n	40a732 <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a75a:	2b0b      	cmp	r3, #11
  40a75c:	d903      	bls.n	40a766 <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a75e:	2b0d      	cmp	r3, #13
  40a760:	d803      	bhi.n	40a76a <_lv_style_get_opa+0xdc>
  40a762:	2303      	movs	r3, #3
  40a764:	e7e6      	b.n	40a734 <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a766:	2304      	movs	r3, #4
  40a768:	e7e4      	b.n	40a734 <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40a76a:	2306      	movs	r3, #6
  40a76c:	e7e2      	b.n	40a734 <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  40a76e:	f04f 3eff 	mov.w	lr, #4294967295
  40a772:	e7c1      	b.n	40a6f8 <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  40a774:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a778:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a77c:	3b01      	subs	r3, #1
  40a77e:	e7c5      	b.n	40a70c <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  40a780:	f04f 30ff 	mov.w	r0, #4294967295
  40a784:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a786:	f04f 30ff 	mov.w	r0, #4294967295
  40a78a:	e7cf      	b.n	40a72c <_lv_style_get_opa+0x9e>
        return -1;
  40a78c:	f04f 30ff 	mov.w	r0, #4294967295
  40a790:	e7cc      	b.n	40a72c <_lv_style_get_opa+0x9e>

0040a792 <_lv_style_get_color>:
    if(style == NULL) return -1;
  40a792:	2800      	cmp	r0, #0
  40a794:	d077      	beq.n	40a886 <_lv_style_get_color+0xf4>
{
  40a796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a79a:	b082      	sub	sp, #8
  40a79c:	4692      	mov	sl, r2
  40a79e:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a7a0:	6803      	ldr	r3, [r0, #0]
  40a7a2:	2b00      	cmp	r3, #0
  40a7a4:	d072      	beq.n	40a88c <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  40a7a6:	2b00      	cmp	r3, #0
  40a7a8:	d051      	beq.n	40a84e <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a7aa:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a7ac:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a7ae:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a7b0:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a7b4:	46f4      	mov	ip, lr
  40a7b6:	e02e      	b.n	40a816 <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  40a7b8:	682a      	ldr	r2, [r5, #0]
  40a7ba:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a7be:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a7c2:	5d14      	ldrb	r4, [r2, r4]
  40a7c4:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a7c8:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a7cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a7d0:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a7d4:	ea87 0904 	eor.w	r9, r7, r4
  40a7d8:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a7dc:	d00d      	beq.n	40a7fa <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a7de:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a7e2:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a7e6:	ea34 0209 	bics.w	r2, r4, r9
  40a7ea:	d122      	bne.n	40a832 <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a7ec:	4564      	cmp	r4, ip
  40a7ee:	dd20      	ble.n	40a832 <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a7f0:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a7f4:	fa0f fe80 	sxth.w	lr, r0
  40a7f8:	e01b      	b.n	40a832 <_lv_style_get_color+0xa0>
                return i;
  40a7fa:	4686      	mov	lr, r0
    if(id < 0) {
  40a7fc:	f1be 0f00 	cmp.w	lr, #0
  40a800:	db47      	blt.n	40a892 <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40a802:	682b      	ldr	r3, [r5, #0]
  40a804:	4674      	mov	r4, lr
  40a806:	f10e 0e02 	add.w	lr, lr, #2
  40a80a:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a80c:	4652      	mov	r2, sl
  40a80e:	2302      	movs	r3, #2
  40a810:	e025      	b.n	40a85e <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a812:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a814:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a816:	682b      	ldr	r3, [r5, #0]
  40a818:	5c1c      	ldrb	r4, [r3, r0]
  40a81a:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a81e:	1c44      	adds	r4, r0, #1
  40a820:	5d1b      	ldrb	r3, [r3, r4]
  40a822:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a826:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a82a:	2bff      	cmp	r3, #255	; 0xff
  40a82c:	d0e6      	beq.n	40a7fc <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  40a82e:	429e      	cmp	r6, r3
  40a830:	d0c2      	beq.n	40a7b8 <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  40a832:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a836:	2b08      	cmp	r3, #8
  40a838:	d9eb      	bls.n	40a812 <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a83a:	2b0b      	cmp	r3, #11
  40a83c:	d903      	bls.n	40a846 <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a83e:	2b0d      	cmp	r3, #13
  40a840:	d803      	bhi.n	40a84a <_lv_style_get_color+0xb8>
  40a842:	2303      	movs	r3, #3
  40a844:	e7e6      	b.n	40a814 <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a846:	2304      	movs	r3, #4
  40a848:	e7e4      	b.n	40a814 <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  40a84a:	2306      	movs	r3, #6
  40a84c:	e7e2      	b.n	40a814 <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  40a84e:	f04f 3eff 	mov.w	lr, #4294967295
  40a852:	e7d3      	b.n	40a7fc <_lv_style_get_color+0x6a>
        *d8 = *s8;
  40a854:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a858:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a85c:	3b01      	subs	r3, #1
    while(len) {
  40a85e:	2b00      	cmp	r3, #0
  40a860:	d1f8      	bne.n	40a854 <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  40a862:	682b      	ldr	r3, [r5, #0]
  40a864:	5d1a      	ldrb	r2, [r3, r4]
  40a866:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a86a:	4423      	add	r3, r4
  40a86c:	785b      	ldrb	r3, [r3, #1]
  40a86e:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a872:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a876:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a878:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a87c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a880:	b002      	add	sp, #8
  40a882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a886:	f04f 30ff 	mov.w	r0, #4294967295
  40a88a:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a88c:	f04f 30ff 	mov.w	r0, #4294967295
  40a890:	e7f6      	b.n	40a880 <_lv_style_get_color+0xee>
        return -1;
  40a892:	f04f 30ff 	mov.w	r0, #4294967295
  40a896:	e7f3      	b.n	40a880 <_lv_style_get_color+0xee>

0040a898 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40a898:	2800      	cmp	r0, #0
  40a89a:	d077      	beq.n	40a98c <_lv_style_get_ptr+0xf4>
{
  40a89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a8a0:	b082      	sub	sp, #8
  40a8a2:	4692      	mov	sl, r2
  40a8a4:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a8a6:	6803      	ldr	r3, [r0, #0]
  40a8a8:	2b00      	cmp	r3, #0
  40a8aa:	d072      	beq.n	40a992 <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  40a8ac:	2b00      	cmp	r3, #0
  40a8ae:	d051      	beq.n	40a954 <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a8b0:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a8b2:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a8b4:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a8b6:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a8ba:	46f4      	mov	ip, lr
  40a8bc:	e02e      	b.n	40a91c <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  40a8be:	682a      	ldr	r2, [r5, #0]
  40a8c0:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a8c4:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a8c8:	5d14      	ldrb	r4, [r2, r4]
  40a8ca:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a8ce:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a8d2:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a8d6:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a8da:	ea87 0904 	eor.w	r9, r7, r4
  40a8de:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a8e2:	d00d      	beq.n	40a900 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a8e4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a8e8:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a8ec:	ea34 0209 	bics.w	r2, r4, r9
  40a8f0:	d122      	bne.n	40a938 <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a8f2:	4564      	cmp	r4, ip
  40a8f4:	dd20      	ble.n	40a938 <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a8f6:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a8fa:	fa0f fe80 	sxth.w	lr, r0
  40a8fe:	e01b      	b.n	40a938 <_lv_style_get_ptr+0xa0>
                return i;
  40a900:	4686      	mov	lr, r0
    if(id < 0) {
  40a902:	f1be 0f00 	cmp.w	lr, #0
  40a906:	db47      	blt.n	40a998 <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40a908:	682b      	ldr	r3, [r5, #0]
  40a90a:	4676      	mov	r6, lr
  40a90c:	f10e 0002 	add.w	r0, lr, #2
  40a910:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a912:	4652      	mov	r2, sl
  40a914:	2304      	movs	r3, #4
  40a916:	e025      	b.n	40a964 <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a918:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a91a:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a91c:	682b      	ldr	r3, [r5, #0]
  40a91e:	5c1c      	ldrb	r4, [r3, r0]
  40a920:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a924:	1c44      	adds	r4, r0, #1
  40a926:	5d1b      	ldrb	r3, [r3, r4]
  40a928:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a92c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a930:	2bff      	cmp	r3, #255	; 0xff
  40a932:	d0e6      	beq.n	40a902 <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  40a934:	429e      	cmp	r6, r3
  40a936:	d0c2      	beq.n	40a8be <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  40a938:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a93c:	2b08      	cmp	r3, #8
  40a93e:	d9eb      	bls.n	40a918 <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a940:	2b0b      	cmp	r3, #11
  40a942:	d903      	bls.n	40a94c <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a944:	2b0d      	cmp	r3, #13
  40a946:	d803      	bhi.n	40a950 <_lv_style_get_ptr+0xb8>
  40a948:	2303      	movs	r3, #3
  40a94a:	e7e6      	b.n	40a91a <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a94c:	2304      	movs	r3, #4
  40a94e:	e7e4      	b.n	40a91a <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  40a950:	2306      	movs	r3, #6
  40a952:	e7e2      	b.n	40a91a <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  40a954:	f04f 3eff 	mov.w	lr, #4294967295
  40a958:	e7d3      	b.n	40a902 <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  40a95a:	f810 4b01 	ldrb.w	r4, [r0], #1
  40a95e:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  40a962:	3b01      	subs	r3, #1
    while(len) {
  40a964:	2b00      	cmp	r3, #0
  40a966:	d1f8      	bne.n	40a95a <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  40a968:	682b      	ldr	r3, [r5, #0]
  40a96a:	5d9a      	ldrb	r2, [r3, r6]
  40a96c:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a970:	4433      	add	r3, r6
  40a972:	785b      	ldrb	r3, [r3, #1]
  40a974:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a978:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a97c:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a97e:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a982:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a986:	b002      	add	sp, #8
  40a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a98c:	f04f 30ff 	mov.w	r0, #4294967295
  40a990:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a992:	f04f 30ff 	mov.w	r0, #4294967295
  40a996:	e7f6      	b.n	40a986 <_lv_style_get_ptr+0xee>
        return -1;
  40a998:	f04f 30ff 	mov.w	r0, #4294967295
  40a99c:	e7f3      	b.n	40a986 <_lv_style_get_ptr+0xee>

0040a99e <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40a99e:	7903      	ldrb	r3, [r0, #4]
  40a9a0:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a9a4:	d008      	beq.n	40a9b8 <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40a9a6:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a9aa:	d102      	bne.n	40a9b2 <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40a9ac:	6803      	ldr	r3, [r0, #0]
  40a9ae:	6818      	ldr	r0, [r3, #0]
  40a9b0:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40a9b2:	6803      	ldr	r3, [r0, #0]
  40a9b4:	6858      	ldr	r0, [r3, #4]
  40a9b6:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40a9b8:	2000      	movs	r0, #0
}
  40a9ba:	4770      	bx	lr

0040a9bc <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40a9bc:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a9c0:	2b00      	cmp	r3, #0
  40a9c2:	da02      	bge.n	40a9ca <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40a9c4:	6803      	ldr	r3, [r0, #0]
  40a9c6:	6818      	ldr	r0, [r3, #0]
  40a9c8:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40a9ca:	2000      	movs	r0, #0
}
  40a9cc:	4770      	bx	lr
	...

0040a9d0 <_lv_style_list_reset>:
    if(list == NULL) return;
  40a9d0:	2800      	cmp	r0, #0
  40a9d2:	d032      	beq.n	40aa3a <_lv_style_list_reset+0x6a>
{
  40a9d4:	b538      	push	{r3, r4, r5, lr}
  40a9d6:	4604      	mov	r4, r0
    if(list->has_local) {
  40a9d8:	7903      	ldrb	r3, [r0, #4]
  40a9da:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a9de:	d008      	beq.n	40a9f2 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40a9e0:	4b16      	ldr	r3, [pc, #88]	; (40aa3c <_lv_style_list_reset+0x6c>)
  40a9e2:	4798      	blx	r3
        if(local) {
  40a9e4:	4605      	mov	r5, r0
  40a9e6:	b120      	cbz	r0, 40a9f2 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40a9e8:	4b15      	ldr	r3, [pc, #84]	; (40aa40 <_lv_style_list_reset+0x70>)
  40a9ea:	4798      	blx	r3
            lv_mem_free(local);
  40a9ec:	4628      	mov	r0, r5
  40a9ee:	4b15      	ldr	r3, [pc, #84]	; (40aa44 <_lv_style_list_reset+0x74>)
  40a9f0:	4798      	blx	r3
    if(list->has_trans) {
  40a9f2:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40a9f6:	2b00      	cmp	r3, #0
  40a9f8:	db13      	blt.n	40aa22 <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40a9fa:	7923      	ldrb	r3, [r4, #4]
  40a9fc:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40aa00:	d002      	beq.n	40aa08 <_lv_style_list_reset+0x38>
  40aa02:	6820      	ldr	r0, [r4, #0]
  40aa04:	4b0f      	ldr	r3, [pc, #60]	; (40aa44 <_lv_style_list_reset+0x74>)
  40aa06:	4798      	blx	r3
    list->style_list = NULL;
  40aa08:	2200      	movs	r2, #0
  40aa0a:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40aa0c:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40aa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40aa12:	f362 13c7 	bfi	r3, r2, #7, #1
  40aa16:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40aa18:	7963      	ldrb	r3, [r4, #5]
  40aa1a:	f362 0300 	bfi	r3, r2, #0, #1
  40aa1e:	7163      	strb	r3, [r4, #5]
  40aa20:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40aa22:	4620      	mov	r0, r4
  40aa24:	4b08      	ldr	r3, [pc, #32]	; (40aa48 <_lv_style_list_reset+0x78>)
  40aa26:	4798      	blx	r3
        if(trans) {
  40aa28:	4605      	mov	r5, r0
  40aa2a:	2800      	cmp	r0, #0
  40aa2c:	d0e5      	beq.n	40a9fa <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40aa2e:	4b04      	ldr	r3, [pc, #16]	; (40aa40 <_lv_style_list_reset+0x70>)
  40aa30:	4798      	blx	r3
            lv_mem_free(trans);
  40aa32:	4628      	mov	r0, r5
  40aa34:	4b03      	ldr	r3, [pc, #12]	; (40aa44 <_lv_style_list_reset+0x74>)
  40aa36:	4798      	blx	r3
  40aa38:	e7df      	b.n	40a9fa <_lv_style_list_reset+0x2a>
  40aa3a:	4770      	bx	lr
  40aa3c:	0040a99f 	.word	0x0040a99f
  40aa40:	00409d85 	.word	0x00409d85
  40aa44:	0041624d 	.word	0x0041624d
  40aa48:	0040a9bd 	.word	0x0040a9bd

0040aa4c <lv_style_list_copy>:
{
  40aa4c:	b570      	push	{r4, r5, r6, lr}
  40aa4e:	4605      	mov	r5, r0
  40aa50:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40aa52:	4b3d      	ldr	r3, [pc, #244]	; (40ab48 <lv_style_list_copy+0xfc>)
  40aa54:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40aa56:	6823      	ldr	r3, [r4, #0]
  40aa58:	2b00      	cmp	r3, #0
  40aa5a:	d059      	beq.n	40ab10 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40aa5c:	7923      	ldrb	r3, [r4, #4]
  40aa5e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40aa62:	d12f      	bne.n	40aac4 <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40aa64:	f013 0f80 	tst.w	r3, #128	; 0x80
  40aa68:	d113      	bne.n	40aa92 <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40aa6a:	7920      	ldrb	r0, [r4, #4]
  40aa6c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40aa70:	0080      	lsls	r0, r0, #2
  40aa72:	4b36      	ldr	r3, [pc, #216]	; (40ab4c <lv_style_list_copy+0x100>)
  40aa74:	4798      	blx	r3
  40aa76:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40aa78:	7922      	ldrb	r2, [r4, #4]
  40aa7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40aa7e:	0092      	lsls	r2, r2, #2
  40aa80:	6821      	ldr	r1, [r4, #0]
  40aa82:	4b33      	ldr	r3, [pc, #204]	; (40ab50 <lv_style_list_copy+0x104>)
  40aa84:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40aa86:	7922      	ldrb	r2, [r4, #4]
  40aa88:	792b      	ldrb	r3, [r5, #4]
  40aa8a:	f362 0305 	bfi	r3, r2, #0, #6
  40aa8e:	712b      	strb	r3, [r5, #4]
  40aa90:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40aa92:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40aa96:	3801      	subs	r0, #1
  40aa98:	0080      	lsls	r0, r0, #2
  40aa9a:	4b2c      	ldr	r3, [pc, #176]	; (40ab4c <lv_style_list_copy+0x100>)
  40aa9c:	4798      	blx	r3
  40aa9e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40aaa0:	6821      	ldr	r1, [r4, #0]
  40aaa2:	7922      	ldrb	r2, [r4, #4]
  40aaa4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40aaa8:	3a01      	subs	r2, #1
  40aaaa:	0092      	lsls	r2, r2, #2
  40aaac:	3104      	adds	r1, #4
  40aaae:	4b28      	ldr	r3, [pc, #160]	; (40ab50 <lv_style_list_copy+0x104>)
  40aab0:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40aab2:	7923      	ldrb	r3, [r4, #4]
  40aab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40aab8:	3b01      	subs	r3, #1
  40aaba:	792a      	ldrb	r2, [r5, #4]
  40aabc:	f363 0205 	bfi	r2, r3, #0, #6
  40aac0:	712a      	strb	r2, [r5, #4]
  40aac2:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40aac4:	f013 0f80 	tst.w	r3, #128	; 0x80
  40aac8:	d123      	bne.n	40ab12 <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40aaca:	7920      	ldrb	r0, [r4, #4]
  40aacc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40aad0:	3801      	subs	r0, #1
  40aad2:	0080      	lsls	r0, r0, #2
  40aad4:	4b1d      	ldr	r3, [pc, #116]	; (40ab4c <lv_style_list_copy+0x100>)
  40aad6:	4798      	blx	r3
  40aad8:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40aada:	6821      	ldr	r1, [r4, #0]
  40aadc:	7922      	ldrb	r2, [r4, #4]
  40aade:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40aae2:	3a01      	subs	r2, #1
  40aae4:	0092      	lsls	r2, r2, #2
  40aae6:	3104      	adds	r1, #4
  40aae8:	4b19      	ldr	r3, [pc, #100]	; (40ab50 <lv_style_list_copy+0x104>)
  40aaea:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40aaec:	7923      	ldrb	r3, [r4, #4]
  40aaee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40aaf2:	3b01      	subs	r3, #1
  40aaf4:	792a      	ldrb	r2, [r5, #4]
  40aaf6:	f363 0205 	bfi	r2, r3, #0, #6
  40aafa:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40aafc:	4628      	mov	r0, r5
  40aafe:	4d15      	ldr	r5, [pc, #84]	; (40ab54 <lv_style_list_copy+0x108>)
  40ab00:	47a8      	blx	r5
  40ab02:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40ab04:	4620      	mov	r0, r4
  40ab06:	47a8      	blx	r5
  40ab08:	4601      	mov	r1, r0
  40ab0a:	4630      	mov	r0, r6
  40ab0c:	4b12      	ldr	r3, [pc, #72]	; (40ab58 <lv_style_list_copy+0x10c>)
  40ab0e:	4798      	blx	r3
  40ab10:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40ab12:	7920      	ldrb	r0, [r4, #4]
  40ab14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40ab18:	3802      	subs	r0, #2
  40ab1a:	0080      	lsls	r0, r0, #2
  40ab1c:	4b0b      	ldr	r3, [pc, #44]	; (40ab4c <lv_style_list_copy+0x100>)
  40ab1e:	4798      	blx	r3
  40ab20:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40ab22:	6821      	ldr	r1, [r4, #0]
  40ab24:	7922      	ldrb	r2, [r4, #4]
  40ab26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40ab2a:	3a02      	subs	r2, #2
  40ab2c:	0092      	lsls	r2, r2, #2
  40ab2e:	3108      	adds	r1, #8
  40ab30:	4b07      	ldr	r3, [pc, #28]	; (40ab50 <lv_style_list_copy+0x104>)
  40ab32:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40ab34:	7923      	ldrb	r3, [r4, #4]
  40ab36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ab3a:	3b02      	subs	r3, #2
  40ab3c:	792a      	ldrb	r2, [r5, #4]
  40ab3e:	f363 0205 	bfi	r2, r3, #0, #6
  40ab42:	712a      	strb	r2, [r5, #4]
  40ab44:	e7da      	b.n	40aafc <lv_style_list_copy+0xb0>
  40ab46:	bf00      	nop
  40ab48:	0040a9d1 	.word	0x0040a9d1
  40ab4c:	00416189 	.word	0x00416189
  40ab50:	00416399 	.word	0x00416399
  40ab54:	00409cf5 	.word	0x00409cf5
  40ab58:	00409de5 	.word	0x00409de5

0040ab5c <_lv_style_list_add_trans_style>:
{
  40ab5c:	b538      	push	{r3, r4, r5, lr}
  40ab5e:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40ab60:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40ab64:	2b00      	cmp	r3, #0
  40ab66:	db1c      	blt.n	40aba2 <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40ab68:	2004      	movs	r0, #4
  40ab6a:	4b13      	ldr	r3, [pc, #76]	; (40abb8 <_lv_style_list_add_trans_style+0x5c>)
  40ab6c:	4798      	blx	r3
  40ab6e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40ab70:	4b12      	ldr	r3, [pc, #72]	; (40abbc <_lv_style_list_add_trans_style+0x60>)
  40ab72:	4798      	blx	r3
  40ab74:	b1d0      	cbz	r0, 40abac <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40ab76:	b1bd      	cbz	r5, 40aba8 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40ab78:	4628      	mov	r0, r5
  40ab7a:	4b11      	ldr	r3, [pc, #68]	; (40abc0 <_lv_style_list_add_trans_style+0x64>)
  40ab7c:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40ab7e:	4629      	mov	r1, r5
  40ab80:	4620      	mov	r0, r4
  40ab82:	4b10      	ldr	r3, [pc, #64]	; (40abc4 <_lv_style_list_add_trans_style+0x68>)
  40ab84:	4798      	blx	r3
    list->has_trans = 1;
  40ab86:	7923      	ldrb	r3, [r4, #4]
  40ab88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ab8c:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40ab8e:	f013 0f40 	tst.w	r3, #64	; 0x40
  40ab92:	d009      	beq.n	40aba8 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40ab94:	6823      	ldr	r3, [r4, #0]
  40ab96:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40ab98:	6859      	ldr	r1, [r3, #4]
  40ab9a:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40ab9c:	6823      	ldr	r3, [r4, #0]
  40ab9e:	605a      	str	r2, [r3, #4]
  40aba0:	e002      	b.n	40aba8 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40aba2:	4b09      	ldr	r3, [pc, #36]	; (40abc8 <_lv_style_list_add_trans_style+0x6c>)
  40aba4:	4798      	blx	r3
  40aba6:	4605      	mov	r5, r0
}
  40aba8:	4628      	mov	r0, r5
  40abaa:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40abac:	462a      	mov	r2, r5
  40abae:	2300      	movs	r3, #0
  40abb0:	4806      	ldr	r0, [pc, #24]	; (40abcc <_lv_style_list_add_trans_style+0x70>)
  40abb2:	4907      	ldr	r1, [pc, #28]	; (40abd0 <_lv_style_list_add_trans_style+0x74>)
  40abb4:	4788      	blx	r1
  40abb6:	e7fe      	b.n	40abb6 <_lv_style_list_add_trans_style+0x5a>
  40abb8:	00416189 	.word	0x00416189
  40abbc:	00415a81 	.word	0x00415a81
  40abc0:	00409b61 	.word	0x00409b61
  40abc4:	00409c45 	.word	0x00409c45
  40abc8:	0040a9bd 	.word	0x0040a9bd
  40abcc:	00428c94 	.word	0x00428c94
  40abd0:	00415a8d 	.word	0x00415a8d

0040abd4 <_lv_style_list_set_local_int>:
{
  40abd4:	b538      	push	{r3, r4, r5, lr}
  40abd6:	460c      	mov	r4, r1
  40abd8:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40abda:	4b03      	ldr	r3, [pc, #12]	; (40abe8 <_lv_style_list_set_local_int+0x14>)
  40abdc:	4798      	blx	r3
    _lv_style_set_int(local, prop, value);
  40abde:	462a      	mov	r2, r5
  40abe0:	4621      	mov	r1, r4
  40abe2:	4b02      	ldr	r3, [pc, #8]	; (40abec <_lv_style_list_set_local_int+0x18>)
  40abe4:	4798      	blx	r3
  40abe6:	bd38      	pop	{r3, r4, r5, pc}
  40abe8:	00409cf5 	.word	0x00409cf5
  40abec:	00409f49 	.word	0x00409f49

0040abf0 <_lv_style_list_set_local_color>:
{
  40abf0:	b538      	push	{r3, r4, r5, lr}
  40abf2:	460c      	mov	r4, r1
  40abf4:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40abf6:	4b03      	ldr	r3, [pc, #12]	; (40ac04 <_lv_style_list_set_local_color+0x14>)
  40abf8:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40abfa:	462a      	mov	r2, r5
  40abfc:	4621      	mov	r1, r4
  40abfe:	4b02      	ldr	r3, [pc, #8]	; (40ac08 <_lv_style_list_set_local_color+0x18>)
  40ac00:	4798      	blx	r3
  40ac02:	bd38      	pop	{r3, r4, r5, pc}
  40ac04:	00409cf5 	.word	0x00409cf5
  40ac08:	0040a0d9 	.word	0x0040a0d9

0040ac0c <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40ac0c:	2800      	cmp	r0, #0
  40ac0e:	d05e      	beq.n	40acce <_lv_style_list_get_int+0xc2>
{
  40ac10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ac14:	b083      	sub	sp, #12
  40ac16:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40ac18:	6803      	ldr	r3, [r0, #0]
  40ac1a:	2b00      	cmp	r3, #0
  40ac1c:	d059      	beq.n	40acd2 <_lv_style_list_get_int+0xc6>
  40ac1e:	4691      	mov	r9, r2
  40ac20:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40ac22:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40ac26:	2400      	movs	r4, #0
  40ac28:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40ac2c:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ac30:	e017      	b.n	40ac62 <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40ac32:	3101      	adds	r1, #1
  40ac34:	b2c9      	uxtb	r1, r1
  40ac36:	e020      	b.n	40ac7a <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ac38:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40ac3a:	f10d 0206 	add.w	r2, sp, #6
  40ac3e:	4639      	mov	r1, r7
  40ac40:	4b26      	ldr	r3, [pc, #152]	; (40acdc <_lv_style_list_get_int+0xd0>)
  40ac42:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40ac44:	4580      	cmp	r8, r0
  40ac46:	d024      	beq.n	40ac92 <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ac48:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40ac4c:	2b00      	cmp	r3, #0
  40ac4e:	db28      	blt.n	40aca2 <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40ac50:	4286      	cmp	r6, r0
  40ac52:	da04      	bge.n	40ac5e <_lv_style_list_get_int+0x52>
            *res = value_act;
  40ac54:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40ac58:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40ac5c:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ac5e:	3401      	adds	r4, #1
  40ac60:	b224      	sxth	r4, r4
  40ac62:	792b      	ldrb	r3, [r5, #4]
  40ac64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ac68:	429c      	cmp	r4, r3
  40ac6a:	da2c      	bge.n	40acc6 <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40ac6c:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40ac6e:	88aa      	ldrh	r2, [r5, #4]
  40ac70:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40ac74:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40ac78:	d0db      	beq.n	40ac32 <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ac7a:	792a      	ldrb	r2, [r5, #4]
  40ac7c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40ac80:	d0da      	beq.n	40ac38 <_lv_style_list_get_int+0x2c>
  40ac82:	428b      	cmp	r3, r1
  40ac84:	dd03      	ble.n	40ac8e <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40ac86:	682b      	ldr	r3, [r5, #0]
  40ac88:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40ac8c:	e7d5      	b.n	40ac3a <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ac8e:	2000      	movs	r0, #0
  40ac90:	e7d3      	b.n	40ac3a <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40ac92:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40ac96:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40ac9a:	2001      	movs	r0, #1
}
  40ac9c:	b003      	add	sp, #12
  40ac9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40aca2:	fab4 f384 	clz	r3, r4
  40aca6:	095b      	lsrs	r3, r3, #5
  40aca8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40acac:	d1d0      	bne.n	40ac50 <_lv_style_list_get_int+0x44>
  40acae:	2b00      	cmp	r3, #0
  40acb0:	d0ce      	beq.n	40ac50 <_lv_style_list_get_int+0x44>
  40acb2:	796b      	ldrb	r3, [r5, #5]
  40acb4:	f013 0f01 	tst.w	r3, #1
  40acb8:	d1ca      	bne.n	40ac50 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40acba:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40acbe:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40acc2:	2001      	movs	r0, #1
  40acc4:	e7ea      	b.n	40ac9c <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40acc6:	2e00      	cmp	r6, #0
  40acc8:	db05      	blt.n	40acd6 <_lv_style_list_get_int+0xca>
  40acca:	2001      	movs	r0, #1
  40accc:	e7e6      	b.n	40ac9c <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40acce:	2000      	movs	r0, #0
  40acd0:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40acd2:	2000      	movs	r0, #0
  40acd4:	e7e2      	b.n	40ac9c <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40acd6:	2000      	movs	r0, #0
  40acd8:	e7e0      	b.n	40ac9c <_lv_style_list_get_int+0x90>
  40acda:	bf00      	nop
  40acdc:	0040a589 	.word	0x0040a589

0040ace0 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40ace0:	2800      	cmp	r0, #0
  40ace2:	d05d      	beq.n	40ada0 <_lv_style_list_get_color+0xc0>
{
  40ace4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ace8:	b083      	sub	sp, #12
  40acea:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40acec:	6803      	ldr	r3, [r0, #0]
  40acee:	2b00      	cmp	r3, #0
  40acf0:	d058      	beq.n	40ada4 <_lv_style_list_get_color+0xc4>
  40acf2:	4691      	mov	r9, r2
  40acf4:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40acf6:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40acfa:	2400      	movs	r4, #0
  40acfc:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40ad00:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ad04:	e016      	b.n	40ad34 <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40ad06:	3101      	adds	r1, #1
  40ad08:	b2c9      	uxtb	r1, r1
  40ad0a:	e01f      	b.n	40ad4c <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ad0c:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40ad0e:	aa01      	add	r2, sp, #4
  40ad10:	4639      	mov	r1, r7
  40ad12:	4b26      	ldr	r3, [pc, #152]	; (40adac <_lv_style_list_get_color+0xcc>)
  40ad14:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40ad16:	4580      	cmp	r8, r0
  40ad18:	d024      	beq.n	40ad64 <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ad1a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40ad1e:	2b00      	cmp	r3, #0
  40ad20:	db28      	blt.n	40ad74 <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40ad22:	4286      	cmp	r6, r0
  40ad24:	da04      	bge.n	40ad30 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40ad26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40ad2a:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40ad2e:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ad30:	3401      	adds	r4, #1
  40ad32:	b224      	sxth	r4, r4
  40ad34:	792b      	ldrb	r3, [r5, #4]
  40ad36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ad3a:	429c      	cmp	r4, r3
  40ad3c:	da2c      	bge.n	40ad98 <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40ad3e:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40ad40:	88aa      	ldrh	r2, [r5, #4]
  40ad42:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40ad46:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40ad4a:	d0dc      	beq.n	40ad06 <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ad4c:	792a      	ldrb	r2, [r5, #4]
  40ad4e:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40ad52:	d0db      	beq.n	40ad0c <_lv_style_list_get_color+0x2c>
  40ad54:	428b      	cmp	r3, r1
  40ad56:	dd03      	ble.n	40ad60 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40ad58:	682b      	ldr	r3, [r5, #0]
  40ad5a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40ad5e:	e7d6      	b.n	40ad0e <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ad60:	2000      	movs	r0, #0
  40ad62:	e7d4      	b.n	40ad0e <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40ad64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40ad68:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40ad6c:	2001      	movs	r0, #1
}
  40ad6e:	b003      	add	sp, #12
  40ad70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ad74:	fab4 f384 	clz	r3, r4
  40ad78:	095b      	lsrs	r3, r3, #5
  40ad7a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40ad7e:	d1d0      	bne.n	40ad22 <_lv_style_list_get_color+0x42>
  40ad80:	2b00      	cmp	r3, #0
  40ad82:	d0ce      	beq.n	40ad22 <_lv_style_list_get_color+0x42>
  40ad84:	796b      	ldrb	r3, [r5, #5]
  40ad86:	f013 0f01 	tst.w	r3, #1
  40ad8a:	d1ca      	bne.n	40ad22 <_lv_style_list_get_color+0x42>
            *res = value_act;
  40ad8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40ad90:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40ad94:	2001      	movs	r0, #1
  40ad96:	e7ea      	b.n	40ad6e <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40ad98:	2e00      	cmp	r6, #0
  40ad9a:	db05      	blt.n	40ada8 <_lv_style_list_get_color+0xc8>
  40ad9c:	2001      	movs	r0, #1
  40ad9e:	e7e6      	b.n	40ad6e <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40ada0:	2000      	movs	r0, #0
  40ada2:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40ada4:	2000      	movs	r0, #0
  40ada6:	e7e2      	b.n	40ad6e <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40ada8:	2000      	movs	r0, #0
  40adaa:	e7e0      	b.n	40ad6e <_lv_style_list_get_color+0x8e>
  40adac:	0040a793 	.word	0x0040a793

0040adb0 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40adb0:	2800      	cmp	r0, #0
  40adb2:	d05e      	beq.n	40ae72 <_lv_style_list_get_opa+0xc2>
{
  40adb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40adb8:	b083      	sub	sp, #12
  40adba:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40adbc:	6803      	ldr	r3, [r0, #0]
  40adbe:	2b00      	cmp	r3, #0
  40adc0:	d059      	beq.n	40ae76 <_lv_style_list_get_opa+0xc6>
  40adc2:	4691      	mov	r9, r2
  40adc4:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40adc6:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40adca:	2400      	movs	r4, #0
  40adcc:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40add0:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40add4:	e017      	b.n	40ae06 <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40add6:	3101      	adds	r1, #1
  40add8:	b2c9      	uxtb	r1, r1
  40adda:	e020      	b.n	40ae1e <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40addc:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40adde:	f10d 0207 	add.w	r2, sp, #7
  40ade2:	4639      	mov	r1, r7
  40ade4:	4b26      	ldr	r3, [pc, #152]	; (40ae80 <_lv_style_list_get_opa+0xd0>)
  40ade6:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40ade8:	4580      	cmp	r8, r0
  40adea:	d024      	beq.n	40ae36 <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40adec:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40adf0:	2b00      	cmp	r3, #0
  40adf2:	db28      	blt.n	40ae46 <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40adf4:	4286      	cmp	r6, r0
  40adf6:	da04      	bge.n	40ae02 <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40adf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40adfc:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40ae00:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ae02:	3401      	adds	r4, #1
  40ae04:	b224      	sxth	r4, r4
  40ae06:	792b      	ldrb	r3, [r5, #4]
  40ae08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ae0c:	429c      	cmp	r4, r3
  40ae0e:	da2c      	bge.n	40ae6a <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40ae10:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40ae12:	88aa      	ldrh	r2, [r5, #4]
  40ae14:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40ae18:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40ae1c:	d0db      	beq.n	40add6 <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ae1e:	792a      	ldrb	r2, [r5, #4]
  40ae20:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40ae24:	d0da      	beq.n	40addc <_lv_style_list_get_opa+0x2c>
  40ae26:	428b      	cmp	r3, r1
  40ae28:	dd03      	ble.n	40ae32 <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40ae2a:	682b      	ldr	r3, [r5, #0]
  40ae2c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40ae30:	e7d5      	b.n	40adde <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ae32:	2000      	movs	r0, #0
  40ae34:	e7d3      	b.n	40adde <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40ae36:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40ae3a:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40ae3e:	2001      	movs	r0, #1
}
  40ae40:	b003      	add	sp, #12
  40ae42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ae46:	fab4 f384 	clz	r3, r4
  40ae4a:	095b      	lsrs	r3, r3, #5
  40ae4c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40ae50:	d1d0      	bne.n	40adf4 <_lv_style_list_get_opa+0x44>
  40ae52:	2b00      	cmp	r3, #0
  40ae54:	d0ce      	beq.n	40adf4 <_lv_style_list_get_opa+0x44>
  40ae56:	796b      	ldrb	r3, [r5, #5]
  40ae58:	f013 0f01 	tst.w	r3, #1
  40ae5c:	d1ca      	bne.n	40adf4 <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40ae5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40ae62:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40ae66:	2001      	movs	r0, #1
  40ae68:	e7ea      	b.n	40ae40 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40ae6a:	2e00      	cmp	r6, #0
  40ae6c:	db05      	blt.n	40ae7a <_lv_style_list_get_opa+0xca>
  40ae6e:	2001      	movs	r0, #1
  40ae70:	e7e6      	b.n	40ae40 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40ae72:	2000      	movs	r0, #0
  40ae74:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40ae76:	2000      	movs	r0, #0
  40ae78:	e7e2      	b.n	40ae40 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40ae7a:	2000      	movs	r0, #0
  40ae7c:	e7e0      	b.n	40ae40 <_lv_style_list_get_opa+0x90>
  40ae7e:	bf00      	nop
  40ae80:	0040a68f 	.word	0x0040a68f

0040ae84 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40ae84:	2800      	cmp	r0, #0
  40ae86:	d058      	beq.n	40af3a <_lv_style_list_get_ptr+0xb6>
{
  40ae88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ae8c:	b083      	sub	sp, #12
  40ae8e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40ae90:	6803      	ldr	r3, [r0, #0]
  40ae92:	2b00      	cmp	r3, #0
  40ae94:	d053      	beq.n	40af3e <_lv_style_list_get_ptr+0xba>
  40ae96:	4691      	mov	r9, r2
  40ae98:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40ae9a:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ae9e:	2400      	movs	r4, #0
    int16_t weight = -1;
  40aea0:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aea4:	e015      	b.n	40aed2 <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40aea6:	3101      	adds	r1, #1
  40aea8:	b2c9      	uxtb	r1, r1
  40aeaa:	e01e      	b.n	40aeea <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aeac:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40aeae:	aa01      	add	r2, sp, #4
  40aeb0:	4639      	mov	r1, r7
  40aeb2:	4b25      	ldr	r3, [pc, #148]	; (40af48 <_lv_style_list_get_ptr+0xc4>)
  40aeb4:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40aeb6:	4580      	cmp	r8, r0
  40aeb8:	d023      	beq.n	40af02 <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40aeba:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40aebe:	2b00      	cmp	r3, #0
  40aec0:	db26      	blt.n	40af10 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40aec2:	4286      	cmp	r6, r0
  40aec4:	da03      	bge.n	40aece <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40aec6:	9b01      	ldr	r3, [sp, #4]
  40aec8:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40aecc:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aece:	3401      	adds	r4, #1
  40aed0:	b224      	sxth	r4, r4
  40aed2:	792b      	ldrb	r3, [r5, #4]
  40aed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40aed8:	429c      	cmp	r4, r3
  40aeda:	da2a      	bge.n	40af32 <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40aedc:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40aede:	88aa      	ldrh	r2, [r5, #4]
  40aee0:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40aee4:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40aee8:	d0dd      	beq.n	40aea6 <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aeea:	792a      	ldrb	r2, [r5, #4]
  40aeec:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40aef0:	d0dc      	beq.n	40aeac <_lv_style_list_get_ptr+0x28>
  40aef2:	428b      	cmp	r3, r1
  40aef4:	dd03      	ble.n	40aefe <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40aef6:	682b      	ldr	r3, [r5, #0]
  40aef8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40aefc:	e7d7      	b.n	40aeae <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aefe:	2000      	movs	r0, #0
  40af00:	e7d5      	b.n	40aeae <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40af02:	9b01      	ldr	r3, [sp, #4]
  40af04:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40af08:	2001      	movs	r0, #1
}
  40af0a:	b003      	add	sp, #12
  40af0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40af10:	fab4 f384 	clz	r3, r4
  40af14:	095b      	lsrs	r3, r3, #5
  40af16:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40af1a:	d1d2      	bne.n	40aec2 <_lv_style_list_get_ptr+0x3e>
  40af1c:	2b00      	cmp	r3, #0
  40af1e:	d0d0      	beq.n	40aec2 <_lv_style_list_get_ptr+0x3e>
  40af20:	796b      	ldrb	r3, [r5, #5]
  40af22:	f013 0f01 	tst.w	r3, #1
  40af26:	d1cc      	bne.n	40aec2 <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40af28:	9b01      	ldr	r3, [sp, #4]
  40af2a:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40af2e:	2001      	movs	r0, #1
  40af30:	e7eb      	b.n	40af0a <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40af32:	2e00      	cmp	r6, #0
  40af34:	db05      	blt.n	40af42 <_lv_style_list_get_ptr+0xbe>
  40af36:	2001      	movs	r0, #1
  40af38:	e7e7      	b.n	40af0a <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40af3a:	2000      	movs	r0, #0
  40af3c:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40af3e:	2000      	movs	r0, #0
  40af40:	e7e3      	b.n	40af0a <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40af42:	2000      	movs	r0, #0
  40af44:	e7e1      	b.n	40af0a <_lv_style_list_get_ptr+0x86>
  40af46:	bf00      	nop
  40af48:	0040a899 	.word	0x0040a899

0040af4c <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40af50:	b085      	sub	sp, #20
  40af52:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40af56:	9400      	str	r4, [sp, #0]
  40af58:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40af5c:	8884      	ldrh	r4, [r0, #4]
  40af5e:	f9b0 c000 	ldrsh.w	ip, [r0]
  40af62:	fa1f f58c 	uxth.w	r5, ip
  40af66:	1b64      	subs	r4, r4, r5
  40af68:	b2a4      	uxth	r4, r4
  40af6a:	3401      	adds	r4, #1
  40af6c:	b224      	sxth	r4, r4
  40af6e:	9402      	str	r4, [sp, #8]
  40af70:	8895      	ldrh	r5, [r2, #4]
  40af72:	f9b2 4000 	ldrsh.w	r4, [r2]
  40af76:	b2a6      	uxth	r6, r4
  40af78:	1bad      	subs	r5, r5, r6
  40af7a:	b2ad      	uxth	r5, r5
  40af7c:	3501      	adds	r5, #1
  40af7e:	b22e      	sxth	r6, r5
  40af80:	9603      	str	r6, [sp, #12]
  40af82:	889d      	ldrh	r5, [r3, #4]
  40af84:	f9b3 e000 	ldrsh.w	lr, [r3]
  40af88:	fa1f f68e 	uxth.w	r6, lr
  40af8c:	1bad      	subs	r5, r5, r6
  40af8e:	b2ad      	uxth	r5, r5
  40af90:	3501      	adds	r5, #1
  40af92:	b22e      	sxth	r6, r5
  40af94:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40af96:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40af9a:	9d02      	ldr	r5, [sp, #8]
  40af9c:	fb0b f605 	mul.w	r6, fp, r5
  40afa0:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40afa4:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40afa8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40afac:	1aed      	subs	r5, r5, r3
  40afae:	ebab 0505 	sub.w	r5, fp, r5
  40afb2:	9b01      	ldr	r3, [sp, #4]
  40afb4:	fb05 f503 	mul.w	r5, r5, r3
  40afb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40afba:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40afbe:	2f01      	cmp	r7, #1
  40afc0:	d004      	beq.n	40afcc <map_blended+0x80>
  40afc2:	2f02      	cmp	r7, #2
  40afc4:	d00f      	beq.n	40afe6 <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40afc6:	b005      	add	sp, #20
  40afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40afcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40b090 <map_blended+0x144>
  40afd0:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40afd2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40afd6:	2b01      	cmp	r3, #1
  40afd8:	d008      	beq.n	40afec <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40afda:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40afdc:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40afe0:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40afe4:	e04d      	b.n	40b082 <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40afe6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40b094 <map_blended+0x148>
  40afea:	e7f1      	b.n	40afd0 <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40afec:	ebae 030c 	sub.w	r3, lr, ip
  40aff0:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40aff2:	0064      	lsls	r4, r4, #1
  40aff4:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40aff8:	441d      	add	r5, r3
  40affa:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40affe:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b002:	e013      	b.n	40b02c <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40b004:	4642      	mov	r2, r8
  40b006:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40b00a:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40b00e:	47d0      	blx	sl
  40b010:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b014:	3401      	adds	r4, #1
  40b016:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40b01a:	429c      	cmp	r4, r3
  40b01c:	ddf2      	ble.n	40b004 <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40b01e:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40b022:	9b01      	ldr	r3, [sp, #4]
  40b024:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b028:	f10b 0b01 	add.w	fp, fp, #1
  40b02c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40b030:	459b      	cmp	fp, r3
  40b032:	dcc8      	bgt.n	40afc6 <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b034:	f9b7 4000 	ldrsh.w	r4, [r7]
  40b038:	e7ed      	b.n	40b016 <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40b03a:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40b03c:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40b040:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40b044:	47d0      	blx	sl
  40b046:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b04a:	3401      	adds	r4, #1
  40b04c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40b050:	429c      	cmp	r4, r3
  40b052:	dc0c      	bgt.n	40b06e <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40b054:	4625      	mov	r5, r4
  40b056:	f819 2004 	ldrb.w	r2, [r9, r4]
  40b05a:	2a00      	cmp	r2, #0
  40b05c:	d0f5      	beq.n	40b04a <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40b05e:	2afc      	cmp	r2, #252	; 0xfc
  40b060:	d8eb      	bhi.n	40b03a <map_blended+0xee>
  40b062:	9b00      	ldr	r3, [sp, #0]
  40b064:	fb02 f203 	mul.w	r2, r2, r3
  40b068:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40b06c:	e7e6      	b.n	40b03c <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40b06e:	9b02      	ldr	r3, [sp, #8]
  40b070:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40b074:	9b03      	ldr	r3, [sp, #12]
  40b076:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40b078:	9b01      	ldr	r3, [sp, #4]
  40b07a:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b07e:	f10b 0b01 	add.w	fp, fp, #1
  40b082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40b086:	459b      	cmp	fp, r3
  40b088:	dc9d      	bgt.n	40afc6 <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b08a:	f9b7 4000 	ldrsh.w	r4, [r7]
  40b08e:	e7dd      	b.n	40b04c <map_blended+0x100>
  40b090:	0040c259 	.word	0x0040c259
  40b094:	0040c347 	.word	0x0040c347

0040b098 <fill_set_px>:
{
  40b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b09c:	b089      	sub	sp, #36	; 0x24
  40b09e:	4604      	mov	r4, r0
  40b0a0:	9106      	str	r1, [sp, #24]
  40b0a2:	4615      	mov	r5, r2
  40b0a4:	4698      	mov	r8, r3
  40b0a6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b0aa:	4b33      	ldr	r3, [pc, #204]	; (40b178 <fill_set_px+0xe0>)
  40b0ac:	4798      	blx	r3
  40b0ae:	4606      	mov	r6, r0
  40b0b0:	88a3      	ldrh	r3, [r4, #4]
  40b0b2:	8822      	ldrh	r2, [r4, #0]
  40b0b4:	1a9b      	subs	r3, r3, r2
  40b0b6:	b29b      	uxth	r3, r3
  40b0b8:	3301      	adds	r3, #1
  40b0ba:	b21b      	sxth	r3, r3
  40b0bc:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b0be:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40b0c2:	2b01      	cmp	r3, #1
  40b0c4:	d00d      	beq.n	40b0e2 <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b0c6:	f9b5 2000 	ldrsh.w	r2, [r5]
  40b0ca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40b0cc:	1abf      	subs	r7, r7, r2
  40b0ce:	88ab      	ldrh	r3, [r5, #4]
  40b0d0:	b292      	uxth	r2, r2
  40b0d2:	1a9b      	subs	r3, r3, r2
  40b0d4:	b29b      	uxth	r3, r3
  40b0d6:	3301      	adds	r3, #1
  40b0d8:	b21b      	sxth	r3, r3
  40b0da:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b0dc:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40b0e0:	e03f      	b.n	40b162 <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b0e2:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40b0e6:	f8dd b018 	ldr.w	fp, [sp, #24]
  40b0ea:	e014      	b.n	40b116 <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40b0ec:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40b0f0:	9702      	str	r7, [sp, #8]
  40b0f2:	f8ad 8004 	strh.w	r8, [sp, #4]
  40b0f6:	fa0f f38a 	sxth.w	r3, sl
  40b0fa:	9300      	str	r3, [sp, #0]
  40b0fc:	b223      	sxth	r3, r4
  40b0fe:	9a05      	ldr	r2, [sp, #20]
  40b100:	4659      	mov	r1, fp
  40b102:	4630      	mov	r0, r6
  40b104:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b106:	3401      	adds	r4, #1
  40b108:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b10c:	429c      	cmp	r4, r3
  40b10e:	dded      	ble.n	40b0ec <fill_set_px+0x54>
  40b110:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b112:	f10a 0a01 	add.w	sl, sl, #1
  40b116:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b11a:	459a      	cmp	sl, r3
  40b11c:	dc28      	bgt.n	40b170 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b11e:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b122:	464f      	mov	r7, r9
  40b124:	e7f0      	b.n	40b108 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b126:	3401      	adds	r4, #1
  40b128:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b12c:	429c      	cmp	r4, r3
  40b12e:	dc14      	bgt.n	40b15a <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40b130:	5d3b      	ldrb	r3, [r7, r4]
  40b132:	2b00      	cmp	r3, #0
  40b134:	d0f7      	beq.n	40b126 <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40b136:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b13a:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40b13e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b142:	9302      	str	r3, [sp, #8]
  40b144:	f8ad 8004 	strh.w	r8, [sp, #4]
  40b148:	fa0f f38a 	sxth.w	r3, sl
  40b14c:	9300      	str	r3, [sp, #0]
  40b14e:	b223      	sxth	r3, r4
  40b150:	9a05      	ldr	r2, [sp, #20]
  40b152:	9906      	ldr	r1, [sp, #24]
  40b154:	4630      	mov	r0, r6
  40b156:	47d8      	blx	fp
  40b158:	e7e5      	b.n	40b126 <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40b15a:	9b07      	ldr	r3, [sp, #28]
  40b15c:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b15e:	f10a 0a01 	add.w	sl, sl, #1
  40b162:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b166:	459a      	cmp	sl, r3
  40b168:	dc02      	bgt.n	40b170 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b16a:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b16e:	e7db      	b.n	40b128 <fill_set_px+0x90>
}
  40b170:	b009      	add	sp, #36	; 0x24
  40b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b176:	bf00      	nop
  40b178:	00409531 	.word	0x00409531

0040b17c <map_set_px>:
{
  40b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b180:	b089      	sub	sp, #36	; 0x24
  40b182:	4604      	mov	r4, r0
  40b184:	9105      	str	r1, [sp, #20]
  40b186:	4615      	mov	r5, r2
  40b188:	461f      	mov	r7, r3
  40b18a:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b18e:	4b48      	ldr	r3, [pc, #288]	; (40b2b0 <map_set_px+0x134>)
  40b190:	4798      	blx	r3
  40b192:	4606      	mov	r6, r0
  40b194:	88a3      	ldrh	r3, [r4, #4]
  40b196:	f9b4 9000 	ldrsh.w	r9, [r4]
  40b19a:	fa1f f289 	uxth.w	r2, r9
  40b19e:	1a9b      	subs	r3, r3, r2
  40b1a0:	b29b      	uxth	r3, r3
  40b1a2:	3301      	adds	r3, #1
  40b1a4:	b21b      	sxth	r3, r3
  40b1a6:	9304      	str	r3, [sp, #16]
  40b1a8:	88ab      	ldrh	r3, [r5, #4]
  40b1aa:	f9b5 2000 	ldrsh.w	r2, [r5]
  40b1ae:	b291      	uxth	r1, r2
  40b1b0:	1a5b      	subs	r3, r3, r1
  40b1b2:	b29b      	uxth	r3, r3
  40b1b4:	3301      	adds	r3, #1
  40b1b6:	b21b      	sxth	r3, r3
  40b1b8:	9307      	str	r3, [sp, #28]
  40b1ba:	88b9      	ldrh	r1, [r7, #4]
  40b1bc:	f9b7 3000 	ldrsh.w	r3, [r7]
  40b1c0:	b298      	uxth	r0, r3
  40b1c2:	1a09      	subs	r1, r1, r0
  40b1c4:	b289      	uxth	r1, r1
  40b1c6:	3101      	adds	r1, #1
  40b1c8:	b209      	sxth	r1, r1
  40b1ca:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b1cc:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40b1d0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40b1d4:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40b1d8:	1a09      	subs	r1, r1, r0
  40b1da:	eba8 0101 	sub.w	r1, r8, r1
  40b1de:	9806      	ldr	r0, [sp, #24]
  40b1e0:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b1e4:	eba3 0909 	sub.w	r9, r3, r9
  40b1e8:	eba2 0909 	sub.w	r9, r2, r9
  40b1ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40b1f0:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40b1f4:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40b1f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b1fa:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b1fc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40b200:	2b01      	cmp	r3, #1
  40b202:	d024      	beq.n	40b24e <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40b204:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40b206:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b208:	e047      	b.n	40b29a <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40b20a:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40b20e:	9702      	str	r7, [sp, #8]
  40b210:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40b214:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b218:	fa0f f388 	sxth.w	r3, r8
  40b21c:	9300      	str	r3, [sp, #0]
  40b21e:	b223      	sxth	r3, r4
  40b220:	9a04      	ldr	r2, [sp, #16]
  40b222:	4659      	mov	r1, fp
  40b224:	4630      	mov	r0, r6
  40b226:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b228:	3401      	adds	r4, #1
  40b22a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b22e:	429c      	cmp	r4, r3
  40b230:	ddeb      	ble.n	40b20a <map_set_px+0x8e>
  40b232:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40b234:	9b06      	ldr	r3, [sp, #24]
  40b236:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b23a:	f108 0801 	add.w	r8, r8, #1
  40b23e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b242:	4598      	cmp	r8, r3
  40b244:	dc30      	bgt.n	40b2a8 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b246:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b24a:	4657      	mov	r7, sl
  40b24c:	e7ed      	b.n	40b22a <map_set_px+0xae>
  40b24e:	f8dd b014 	ldr.w	fp, [sp, #20]
  40b252:	e7f4      	b.n	40b23e <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b254:	3401      	adds	r4, #1
  40b256:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40b25a:	429c      	cmp	r4, r3
  40b25c:	dc16      	bgt.n	40b28c <map_set_px+0x110>
                if(mask_tmp[x]) {
  40b25e:	5d3b      	ldrb	r3, [r7, r4]
  40b260:	2b00      	cmp	r3, #0
  40b262:	d0f7      	beq.n	40b254 <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b264:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40b268:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40b26c:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b270:	9302      	str	r3, [sp, #8]
  40b272:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40b276:	f8ad 3004 	strh.w	r3, [sp, #4]
  40b27a:	fa0f f388 	sxth.w	r3, r8
  40b27e:	9300      	str	r3, [sp, #0]
  40b280:	b223      	sxth	r3, r4
  40b282:	9a04      	ldr	r2, [sp, #16]
  40b284:	9905      	ldr	r1, [sp, #20]
  40b286:	4630      	mov	r0, r6
  40b288:	47d8      	blx	fp
  40b28a:	e7e3      	b.n	40b254 <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40b28c:	9b07      	ldr	r3, [sp, #28]
  40b28e:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40b290:	9b06      	ldr	r3, [sp, #24]
  40b292:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b296:	f108 0801 	add.w	r8, r8, #1
  40b29a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40b29e:	4598      	cmp	r8, r3
  40b2a0:	dc02      	bgt.n	40b2a8 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40b2a2:	f9b5 4000 	ldrsh.w	r4, [r5]
  40b2a6:	e7d6      	b.n	40b256 <map_set_px+0xda>
}
  40b2a8:	b009      	add	sp, #36	; 0x24
  40b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b2ae:	bf00      	nop
  40b2b0:	00409531 	.word	0x00409531

0040b2b4 <map_normal>:
{
  40b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b2b8:	b08f      	sub	sp, #60	; 0x3c
  40b2ba:	4686      	mov	lr, r0
  40b2bc:	4614      	mov	r4, r2
  40b2be:	9206      	str	r2, [sp, #24]
  40b2c0:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40b2c4:	8882      	ldrh	r2, [r0, #4]
  40b2c6:	f9b0 0000 	ldrsh.w	r0, [r0]
  40b2ca:	9003      	str	r0, [sp, #12]
  40b2cc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40b2d0:	1a12      	subs	r2, r2, r0
  40b2d2:	b292      	uxth	r2, r2
  40b2d4:	3201      	adds	r2, #1
  40b2d6:	b212      	sxth	r2, r2
  40b2d8:	9208      	str	r2, [sp, #32]
  40b2da:	88a2      	ldrh	r2, [r4, #4]
  40b2dc:	f9b4 c000 	ldrsh.w	ip, [r4]
  40b2e0:	fa1f f08c 	uxth.w	r0, ip
  40b2e4:	1a12      	subs	r2, r2, r0
  40b2e6:	b292      	uxth	r2, r2
  40b2e8:	3201      	adds	r2, #1
  40b2ea:	b212      	sxth	r2, r2
  40b2ec:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b2ee:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b2f0:	88e0      	ldrh	r0, [r4, #6]
  40b2f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40b2f6:	b294      	uxth	r4, r2
  40b2f8:	1b00      	subs	r0, r0, r4
  40b2fa:	b280      	uxth	r0, r0
  40b2fc:	3001      	adds	r0, #1
  40b2fe:	b204      	sxth	r4, r0
  40b300:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b302:	8898      	ldrh	r0, [r3, #4]
  40b304:	f9b3 5000 	ldrsh.w	r5, [r3]
  40b308:	b2ac      	uxth	r4, r5
  40b30a:	1b00      	subs	r0, r0, r4
  40b30c:	b280      	uxth	r0, r0
  40b30e:	3001      	adds	r0, #1
  40b310:	b204      	sxth	r4, r0
  40b312:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b314:	9808      	ldr	r0, [sp, #32]
  40b316:	fb02 c400 	mla	r4, r2, r0, ip
  40b31a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b31e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40b322:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40b326:	1a5b      	subs	r3, r3, r1
  40b328:	1ad3      	subs	r3, r2, r3
  40b32a:	9a07      	ldr	r2, [sp, #28]
  40b32c:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b330:	9803      	ldr	r0, [sp, #12]
  40b332:	1a2d      	subs	r5, r5, r0
  40b334:	ebac 0505 	sub.w	r5, ip, r5
  40b338:	006d      	lsls	r5, r5, #1
  40b33a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40b33e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b340:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b342:	4b8a      	ldr	r3, [pc, #552]	; (40b56c <map_normal+0x2b8>)
  40b344:	4798      	blx	r3
  40b346:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b348:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40b34c:	2b01      	cmp	r3, #1
  40b34e:	d008      	beq.n	40b362 <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40b350:	2ffd      	cmp	r7, #253	; 0xfd
  40b352:	f240 8383 	bls.w	40ba5c <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b358:	3b04      	subs	r3, #4
  40b35a:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40b35c:	2300      	movs	r3, #0
  40b35e:	9306      	str	r3, [sp, #24]
  40b360:	e308      	b.n	40b974 <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40b362:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b364:	b32b      	cbz	r3, 40b3b2 <map_normal+0xfe>
  40b366:	9e06      	ldr	r6, [sp, #24]
  40b368:	4630      	mov	r0, r6
  40b36a:	4b81      	ldr	r3, [pc, #516]	; (40b570 <map_normal+0x2bc>)
  40b36c:	4798      	blx	r3
  40b36e:	28f0      	cmp	r0, #240	; 0xf0
  40b370:	d91f      	bls.n	40b3b2 <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b372:	4631      	mov	r1, r6
  40b374:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40b378:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40b37c:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b380:	4689      	mov	r9, r1
  40b382:	46bb      	mov	fp, r7
  40b384:	e00e      	b.n	40b3a4 <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40b386:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40b38a:	f8cd b000 	str.w	fp, [sp]
  40b38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b390:	462a      	mov	r2, r5
  40b392:	4621      	mov	r1, r4
  40b394:	4640      	mov	r0, r8
  40b396:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40b398:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b39c:	9b07      	ldr	r3, [sp, #28]
  40b39e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b3a2:	3601      	adds	r6, #1
  40b3a4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40b3a8:	429e      	cmp	r6, r3
  40b3aa:	ddec      	ble.n	40b386 <map_normal+0xd2>
}
  40b3ac:	b00f      	add	sp, #60	; 0x3c
  40b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40b3b2:	2ffd      	cmp	r7, #253	; 0xfd
  40b3b4:	d812      	bhi.n	40b3dc <map_normal+0x128>
  40b3b6:	f04f 0800 	mov.w	r8, #0
  40b3ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40b3be:	e069      	b.n	40b494 <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40b3c0:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40b3c4:	4629      	mov	r1, r5
  40b3c6:	4620      	mov	r0, r4
  40b3c8:	4b6a      	ldr	r3, [pc, #424]	; (40b574 <map_normal+0x2c0>)
  40b3ca:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b3cc:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b3d0:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b3d4:	3601      	adds	r6, #1
  40b3d6:	42be      	cmp	r6, r7
  40b3d8:	dbf2      	blt.n	40b3c0 <map_normal+0x10c>
  40b3da:	e7e7      	b.n	40b3ac <map_normal+0xf8>
  40b3dc:	2600      	movs	r6, #0
  40b3de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b3e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40b3e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40b3e8:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b3ec:	e7f3      	b.n	40b3d6 <map_normal+0x122>
  40b3ee:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40b3f2:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b3f6:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40b3fa:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40b3fe:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40b402:	fb00 f606 	mul.w	r6, r0, r6
  40b406:	fb07 6202 	mla	r2, r7, r2, r6
  40b40a:	3280      	adds	r2, #128	; 0x80
  40b40c:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b410:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b414:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b418:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b41c:	f003 0607 	and.w	r6, r3, #7
  40b420:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40b424:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40b428:	f001 0e07 	and.w	lr, r1, #7
  40b42c:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40b430:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40b434:	fb06 f600 	mul.w	r6, r6, r0
  40b438:	fb02 6207 	mla	r2, r2, r7, r6
  40b43c:	3280      	adds	r2, #128	; 0x80
  40b43e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b442:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b446:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40b44a:	f366 0a02 	bfi	sl, r6, #0, #3
  40b44e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b452:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b456:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40b45a:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b45e:	fb01 f000 	mul.w	r0, r1, r0
  40b462:	fb03 0307 	mla	r3, r3, r7, r0
  40b466:	3380      	adds	r3, #128	; 0x80
  40b468:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b46c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b470:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b474:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40b478:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b47c:	f10c 0c01 	add.w	ip, ip, #1
  40b480:	45dc      	cmp	ip, fp
  40b482:	dbb4      	blt.n	40b3ee <map_normal+0x13a>
                disp_buf_first += disp_w;
  40b484:	9b08      	ldr	r3, [sp, #32]
  40b486:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40b48a:	9b07      	ldr	r3, [sp, #28]
  40b48c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b490:	f108 0801 	add.w	r8, r8, #1
  40b494:	45c8      	cmp	r8, r9
  40b496:	da89      	bge.n	40b3ac <map_normal+0xf8>
  40b498:	f04f 0c00 	mov.w	ip, #0
  40b49c:	e7f0      	b.n	40b480 <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40b49e:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b4a2:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b4a6:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b4a8:	3301      	adds	r3, #1
  40b4aa:	455b      	cmp	r3, fp
  40b4ac:	f280 81e6 	bge.w	40b87c <map_normal+0x5c8>
  40b4b0:	f012 0f03 	tst.w	r2, #3
  40b4b4:	d04c      	beq.n	40b550 <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40b4b6:	7811      	ldrb	r1, [r2, #0]
  40b4b8:	2900      	cmp	r1, #0
  40b4ba:	d0f4      	beq.n	40b4a6 <map_normal+0x1f2>
  40b4bc:	29ff      	cmp	r1, #255	; 0xff
  40b4be:	d0ee      	beq.n	40b49e <map_normal+0x1ea>
  40b4c0:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b4c4:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b4c8:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b4cc:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b4d0:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b4d4:	fb0e fc0c 	mul.w	ip, lr, ip
  40b4d8:	fb01 c000 	mla	r0, r1, r0, ip
  40b4dc:	3080      	adds	r0, #128	; 0x80
  40b4de:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b4e2:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b4e6:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b4ea:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b4ee:	f007 0c07 	and.w	ip, r7, #7
  40b4f2:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b4f6:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b4fa:	f006 0a07 	and.w	sl, r6, #7
  40b4fe:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b502:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b506:	fb0c fc0e 	mul.w	ip, ip, lr
  40b50a:	fb00 c001 	mla	r0, r0, r1, ip
  40b50e:	3080      	adds	r0, #128	; 0x80
  40b510:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b514:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b518:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b51c:	f36c 0802 	bfi	r8, ip, #0, #3
  40b520:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b524:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b528:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b52c:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b530:	fb06 fe0e 	mul.w	lr, r6, lr
  40b534:	fb07 e101 	mla	r1, r7, r1, lr
  40b538:	3180      	adds	r1, #128	; 0x80
  40b53a:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b53e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b542:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b546:	f361 280c 	bfi	r8, r1, #8, #5
  40b54a:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40b54e:	e7aa      	b.n	40b4a6 <map_normal+0x1f2>
  40b550:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b554:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b558:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b55c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b560:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b564:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b568:	e01b      	b.n	40b5a2 <map_normal+0x2ee>
  40b56a:	bf00      	nop
  40b56c:	00409531 	.word	0x00409531
  40b570:	0041519f 	.word	0x0041519f
  40b574:	00416399 	.word	0x00416399
                            disp_buf_first[x] = map_buf_first[x];
  40b578:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b57c:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40b580:	1c59      	adds	r1, r3, #1
  40b582:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b586:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40b58a:	1c99      	adds	r1, r3, #2
  40b58c:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b590:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40b594:	1cd9      	adds	r1, r3, #3
  40b596:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b59a:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40b59e:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40b5a0:	3304      	adds	r3, #4
  40b5a2:	9903      	ldr	r1, [sp, #12]
  40b5a4:	428b      	cmp	r3, r1
  40b5a6:	f280 8176 	bge.w	40b896 <map_normal+0x5e2>
                    if(*mask32) {
  40b5aa:	6811      	ldr	r1, [r2, #0]
  40b5ac:	2900      	cmp	r1, #0
  40b5ae:	d0f6      	beq.n	40b59e <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40b5b0:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b5b4:	d0e0      	beq.n	40b578 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40b5b6:	7811      	ldrb	r1, [r2, #0]
  40b5b8:	2900      	cmp	r1, #0
  40b5ba:	d049      	beq.n	40b650 <map_normal+0x39c>
  40b5bc:	29ff      	cmp	r1, #255	; 0xff
  40b5be:	f000 8146 	beq.w	40b84e <map_normal+0x59a>
  40b5c2:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40b5c6:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b5ca:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b5ce:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b5d2:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40b5d6:	fb09 f808 	mul.w	r8, r9, r8
  40b5da:	fb01 8000 	mla	r0, r1, r0, r8
  40b5de:	3080      	adds	r0, #128	; 0x80
  40b5e0:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b5e4:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b5e8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b5ec:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b5f0:	f00c 0807 	and.w	r8, ip, #7
  40b5f4:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b5f8:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b5fc:	f006 0707 	and.w	r7, r6, #7
  40b600:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b604:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b608:	fb08 f809 	mul.w	r8, r8, r9
  40b60c:	fb00 8001 	mla	r0, r0, r1, r8
  40b610:	3080      	adds	r0, #128	; 0x80
  40b612:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b616:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b61a:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b61e:	f368 0e02 	bfi	lr, r8, #0, #3
  40b622:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b626:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b62a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b62e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b632:	fb06 f609 	mul.w	r6, r6, r9
  40b636:	fb0c 6601 	mla	r6, ip, r1, r6
  40b63a:	3680      	adds	r6, #128	; 0x80
  40b63c:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b640:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b644:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b648:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b64c:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40b650:	7851      	ldrb	r1, [r2, #1]
  40b652:	2900      	cmp	r1, #0
  40b654:	d056      	beq.n	40b704 <map_normal+0x450>
  40b656:	29ff      	cmp	r1, #255	; 0xff
  40b658:	f000 80fe 	beq.w	40b858 <map_normal+0x5a4>
  40b65c:	f103 0901 	add.w	r9, r3, #1
  40b660:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b664:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b668:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b66c:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b670:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b674:	9705      	str	r7, [sp, #20]
  40b676:	fb07 f808 	mul.w	r8, r7, r8
  40b67a:	fb01 8000 	mla	r0, r1, r0, r8
  40b67e:	3080      	adds	r0, #128	; 0x80
  40b680:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b684:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b688:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b68c:	9f04      	ldr	r7, [sp, #16]
  40b68e:	f360 07c7 	bfi	r7, r0, #3, #5
  40b692:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b694:	f00c 0807 	and.w	r8, ip, #7
  40b698:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b69c:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b6a0:	f006 0807 	and.w	r8, r6, #7
  40b6a4:	4647      	mov	r7, r8
  40b6a6:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b6aa:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b6ae:	9f05      	ldr	r7, [sp, #20]
  40b6b0:	fb08 f807 	mul.w	r8, r8, r7
  40b6b4:	fb00 8001 	mla	r0, r0, r1, r8
  40b6b8:	3080      	adds	r0, #128	; 0x80
  40b6ba:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b6be:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b6c2:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b6c6:	9f04      	ldr	r7, [sp, #16]
  40b6c8:	f368 0702 	bfi	r7, r8, #0, #3
  40b6cc:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b6d0:	f360 374f 	bfi	r7, r0, #13, #3
  40b6d4:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b6d6:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b6da:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b6de:	9f05      	ldr	r7, [sp, #20]
  40b6e0:	fb06 f607 	mul.w	r6, r6, r7
  40b6e4:	fb0c 6601 	mla	r6, ip, r1, r6
  40b6e8:	3680      	adds	r6, #128	; 0x80
  40b6ea:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b6ee:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b6f2:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b6f6:	4601      	mov	r1, r0
  40b6f8:	f366 210c 	bfi	r1, r6, #8, #5
  40b6fc:	f8ad 1010 	strh.w	r1, [sp, #16]
  40b700:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40b704:	7891      	ldrb	r1, [r2, #2]
  40b706:	2900      	cmp	r1, #0
  40b708:	d04e      	beq.n	40b7a8 <map_normal+0x4f4>
  40b70a:	29ff      	cmp	r1, #255	; 0xff
  40b70c:	f000 80aa 	beq.w	40b864 <map_normal+0x5b0>
  40b710:	f103 0902 	add.w	r9, r3, #2
  40b714:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b718:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b71c:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b720:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b724:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b728:	9705      	str	r7, [sp, #20]
  40b72a:	fb07 f808 	mul.w	r8, r7, r8
  40b72e:	fb01 8000 	mla	r0, r1, r0, r8
  40b732:	3080      	adds	r0, #128	; 0x80
  40b734:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b738:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b73c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b740:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b744:	f00c 0807 	and.w	r8, ip, #7
  40b748:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b74c:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b750:	f006 0807 	and.w	r8, r6, #7
  40b754:	4647      	mov	r7, r8
  40b756:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b75a:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b75e:	9f05      	ldr	r7, [sp, #20]
  40b760:	fb08 f807 	mul.w	r8, r8, r7
  40b764:	fb00 8001 	mla	r0, r0, r1, r8
  40b768:	3080      	adds	r0, #128	; 0x80
  40b76a:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b76e:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b772:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b776:	f368 0a02 	bfi	sl, r8, #0, #3
  40b77a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b77e:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b782:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b786:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b78a:	fb06 f607 	mul.w	r6, r6, r7
  40b78e:	fb0c 6601 	mla	r6, ip, r1, r6
  40b792:	3680      	adds	r6, #128	; 0x80
  40b794:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b798:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b79c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b7a0:	f366 2a0c 	bfi	sl, r6, #8, #5
  40b7a4:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40b7a8:	78d1      	ldrb	r1, [r2, #3]
  40b7aa:	2900      	cmp	r1, #0
  40b7ac:	f43f aef7 	beq.w	40b59e <map_normal+0x2ea>
  40b7b0:	29ff      	cmp	r1, #255	; 0xff
  40b7b2:	d05d      	beq.n	40b870 <map_normal+0x5bc>
  40b7b4:	f103 0903 	add.w	r9, r3, #3
  40b7b8:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b7bc:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b7c0:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b7c4:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b7c8:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b7cc:	9705      	str	r7, [sp, #20]
  40b7ce:	fb07 f808 	mul.w	r8, r7, r8
  40b7d2:	fb01 8000 	mla	r0, r1, r0, r8
  40b7d6:	3080      	adds	r0, #128	; 0x80
  40b7d8:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b7dc:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b7e0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b7e4:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b7e8:	f00c 0807 	and.w	r8, ip, #7
  40b7ec:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b7f0:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b7f4:	f006 0807 	and.w	r8, r6, #7
  40b7f8:	4647      	mov	r7, r8
  40b7fa:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b7fe:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b802:	9f05      	ldr	r7, [sp, #20]
  40b804:	fb08 f807 	mul.w	r8, r8, r7
  40b808:	fb00 8001 	mla	r0, r0, r1, r8
  40b80c:	3080      	adds	r0, #128	; 0x80
  40b80e:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b812:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b816:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b81a:	f368 0b02 	bfi	fp, r8, #0, #3
  40b81e:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b822:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b826:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b82a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b82e:	fb06 f607 	mul.w	r6, r6, r7
  40b832:	fb0c 6601 	mla	r6, ip, r1, r6
  40b836:	3680      	adds	r6, #128	; 0x80
  40b838:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b83c:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b840:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b844:	f366 2b0c 	bfi	fp, r6, #8, #5
  40b848:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40b84c:	e6a7      	b.n	40b59e <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40b84e:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b852:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b856:	e6fb      	b.n	40b650 <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40b858:	1c59      	adds	r1, r3, #1
  40b85a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b85e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b862:	e74f      	b.n	40b704 <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40b864:	1c99      	adds	r1, r3, #2
  40b866:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b86a:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b86e:	e79b      	b.n	40b7a8 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40b870:	1cd9      	adds	r1, r3, #3
  40b872:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b876:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b87a:	e690      	b.n	40b59e <map_normal+0x2ea>
  40b87c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b880:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b884:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b888:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b88c:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b890:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b894:	e685      	b.n	40b5a2 <map_normal+0x2ee>
  40b896:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40b89a:	f8ad b014 	strh.w	fp, [sp, #20]
  40b89e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b8a2:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40b8a6:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40b8aa:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40b8ae:	e005      	b.n	40b8bc <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40b8b0:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b8b4:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b8b8:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40b8ba:	3301      	adds	r3, #1
  40b8bc:	455b      	cmp	r3, fp
  40b8be:	da4c      	bge.n	40b95a <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40b8c0:	7811      	ldrb	r1, [r2, #0]
  40b8c2:	2900      	cmp	r1, #0
  40b8c4:	d0f8      	beq.n	40b8b8 <map_normal+0x604>
  40b8c6:	29ff      	cmp	r1, #255	; 0xff
  40b8c8:	d0f2      	beq.n	40b8b0 <map_normal+0x5fc>
  40b8ca:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b8ce:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b8d2:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b8d6:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b8da:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b8de:	fb0e fc0c 	mul.w	ip, lr, ip
  40b8e2:	fb01 c000 	mla	r0, r1, r0, ip
  40b8e6:	3080      	adds	r0, #128	; 0x80
  40b8e8:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b8ec:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b8f0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b8f4:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b8f8:	f007 0c07 	and.w	ip, r7, #7
  40b8fc:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b900:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b904:	f006 0a07 	and.w	sl, r6, #7
  40b908:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b90c:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b910:	fb0c fc0e 	mul.w	ip, ip, lr
  40b914:	fb00 c001 	mla	r0, r0, r1, ip
  40b918:	3080      	adds	r0, #128	; 0x80
  40b91a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b91e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b922:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b926:	f36c 0902 	bfi	r9, ip, #0, #3
  40b92a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b92e:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b932:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b936:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b93a:	fb06 fe0e 	mul.w	lr, r6, lr
  40b93e:	fb07 e101 	mla	r1, r7, r1, lr
  40b942:	3180      	adds	r1, #128	; 0x80
  40b944:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b948:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b94c:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b950:	f361 290c 	bfi	r9, r1, #8, #5
  40b954:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40b958:	e7ae      	b.n	40b8b8 <map_normal+0x604>
                disp_buf_first += disp_w;
  40b95a:	9b08      	ldr	r3, [sp, #32]
  40b95c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40b960:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40b962:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b964:	4413      	add	r3, r2
  40b966:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40b968:	9b07      	ldr	r3, [sp, #28]
  40b96a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b96e:	9b06      	ldr	r3, [sp, #24]
  40b970:	3301      	adds	r3, #1
  40b972:	9306      	str	r3, [sp, #24]
  40b974:	9b06      	ldr	r3, [sp, #24]
  40b976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b978:	4293      	cmp	r3, r2
  40b97a:	f6bf ad17 	bge.w	40b3ac <map_normal+0xf8>
  40b97e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40b980:	2300      	movs	r3, #0
  40b982:	e592      	b.n	40b4aa <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b984:	9b03      	ldr	r3, [sp, #12]
  40b986:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40b98a:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b98e:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40b992:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40b996:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40b99a:	fb0c f707 	mul.w	r7, ip, r7
  40b99e:	fb03 7202 	mla	r2, r3, r2, r7
  40b9a2:	3280      	adds	r2, #128	; 0x80
  40b9a4:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b9a8:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b9ac:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b9b0:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b9b4:	f000 0707 	and.w	r7, r0, #7
  40b9b8:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40b9bc:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40b9c0:	f001 0907 	and.w	r9, r1, #7
  40b9c4:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40b9c8:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40b9cc:	fb07 f70c 	mul.w	r7, r7, ip
  40b9d0:	fb02 7203 	mla	r2, r2, r3, r7
  40b9d4:	3280      	adds	r2, #128	; 0x80
  40b9d6:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b9da:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b9de:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40b9e2:	f367 0602 	bfi	r6, r7, #0, #3
  40b9e6:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b9ea:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b9ee:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40b9f2:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b9f6:	fb01 fc0c 	mul.w	ip, r1, ip
  40b9fa:	fb00 c303 	mla	r3, r0, r3, ip
  40b9fe:	3380      	adds	r3, #128	; 0x80
  40ba00:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40ba04:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40ba08:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40ba0c:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40ba10:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40ba14:	f108 0801 	add.w	r8, r8, #1
  40ba18:	45d8      	cmp	r8, fp
  40ba1a:	da0c      	bge.n	40ba36 <map_normal+0x782>
                    if(mask[x]) {
  40ba1c:	46c6      	mov	lr, r8
  40ba1e:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40ba22:	2b00      	cmp	r3, #0
  40ba24:	d0f6      	beq.n	40ba14 <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40ba26:	2bfc      	cmp	r3, #252	; 0xfc
  40ba28:	d8ac      	bhi.n	40b984 <map_normal+0x6d0>
  40ba2a:	9a03      	ldr	r2, [sp, #12]
  40ba2c:	fb03 f302 	mul.w	r3, r3, r2
  40ba30:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40ba34:	e7a7      	b.n	40b986 <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40ba36:	9b08      	ldr	r3, [sp, #32]
  40ba38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40ba3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ba3e:	449a      	add	sl, r3
                map_buf_first += map_w;
  40ba40:	9b07      	ldr	r3, [sp, #28]
  40ba42:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40ba46:	9b04      	ldr	r3, [sp, #16]
  40ba48:	3301      	adds	r3, #1
  40ba4a:	9304      	str	r3, [sp, #16]
  40ba4c:	9b04      	ldr	r3, [sp, #16]
  40ba4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ba50:	4293      	cmp	r3, r2
  40ba52:	f6bf acab 	bge.w	40b3ac <map_normal+0xf8>
  40ba56:	f04f 0800 	mov.w	r8, #0
  40ba5a:	e7dd      	b.n	40ba18 <map_normal+0x764>
  40ba5c:	2300      	movs	r3, #0
  40ba5e:	9304      	str	r3, [sp, #16]
  40ba60:	9703      	str	r7, [sp, #12]
  40ba62:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40ba66:	e7f1      	b.n	40ba4c <map_normal+0x798>

0040ba68 <fill_normal>:
{
  40ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ba6c:	b091      	sub	sp, #68	; 0x44
  40ba6e:	4605      	mov	r5, r0
  40ba70:	9103      	str	r1, [sp, #12]
  40ba72:	4616      	mov	r6, r2
  40ba74:	920a      	str	r2, [sp, #40]	; 0x28
  40ba76:	461c      	mov	r4, r3
  40ba78:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40ba7c:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40ba7e:	4bc5      	ldr	r3, [pc, #788]	; (40bd94 <fill_normal+0x32c>)
  40ba80:	4798      	blx	r3
  40ba82:	900b      	str	r0, [sp, #44]	; 0x2c
  40ba84:	88ab      	ldrh	r3, [r5, #4]
  40ba86:	882a      	ldrh	r2, [r5, #0]
  40ba88:	1a9b      	subs	r3, r3, r2
  40ba8a:	b29b      	uxth	r3, r3
  40ba8c:	3301      	adds	r3, #1
  40ba8e:	b218      	sxth	r0, r3
  40ba90:	4605      	mov	r5, r0
  40ba92:	9008      	str	r0, [sp, #32]
  40ba94:	88b3      	ldrh	r3, [r6, #4]
  40ba96:	4630      	mov	r0, r6
  40ba98:	f9b6 1000 	ldrsh.w	r1, [r6]
  40ba9c:	b28a      	uxth	r2, r1
  40ba9e:	1a9b      	subs	r3, r3, r2
  40baa0:	b29b      	uxth	r3, r3
  40baa2:	3301      	adds	r3, #1
  40baa4:	b21b      	sxth	r3, r3
  40baa6:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40baa8:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40baaa:	88c3      	ldrh	r3, [r0, #6]
  40baac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40bab0:	b290      	uxth	r0, r2
  40bab2:	1a1b      	subs	r3, r3, r0
  40bab4:	b29b      	uxth	r3, r3
  40bab6:	3301      	adds	r3, #1
  40bab8:	b21b      	sxth	r3, r3
  40baba:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40babc:	4696      	mov	lr, r2
  40babe:	fb02 1205 	mla	r2, r2, r5, r1
  40bac2:	9b03      	ldr	r3, [sp, #12]
  40bac4:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bac8:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40bacc:	2b01      	cmp	r3, #1
  40bace:	d00f      	beq.n	40baf0 <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40bad0:	9b03      	ldr	r3, [sp, #12]
  40bad2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40bad6:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40bad8:	9907      	ldr	r1, [sp, #28]
  40bada:	3904      	subs	r1, #4
  40badc:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40bade:	9906      	ldr	r1, [sp, #24]
  40bae0:	29fd      	cmp	r1, #253	; 0xfd
  40bae2:	f200 8335 	bhi.w	40c150 <fill_normal+0x6e8>
  40bae6:	f04f 0800 	mov.w	r8, #0
  40baea:	4641      	mov	r1, r8
  40baec:	46a3      	mov	fp, r4
  40baee:	e3a7      	b.n	40c240 <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40baf0:	9b06      	ldr	r3, [sp, #24]
  40baf2:	2bfd      	cmp	r3, #253	; 0xfd
  40baf4:	d922      	bls.n	40bb3c <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40baf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40baf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40bafa:	b123      	cbz	r3, 40bb06 <fill_normal+0x9e>
  40bafc:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bafe:	4ba6      	ldr	r3, [pc, #664]	; (40bd98 <fill_normal+0x330>)
  40bb00:	4798      	blx	r3
  40bb02:	28f0      	cmp	r0, #240	; 0xf0
  40bb04:	d804      	bhi.n	40bb10 <fill_normal+0xa8>
{
  40bb06:	2600      	movs	r6, #0
  40bb08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40bb0a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40bb0e:	e010      	b.n	40bb32 <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40bb10:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40bb12:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40bb14:	f8ad 4000 	strh.w	r4, [sp]
  40bb18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bb1a:	9a08      	ldr	r2, [sp, #32]
  40bb1c:	9903      	ldr	r1, [sp, #12]
  40bb1e:	47a8      	blx	r5
                return;
  40bb20:	e009      	b.n	40bb36 <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40bb22:	9a07      	ldr	r2, [sp, #28]
  40bb24:	4621      	mov	r1, r4
  40bb26:	4628      	mov	r0, r5
  40bb28:	4b9c      	ldr	r3, [pc, #624]	; (40bd9c <fill_normal+0x334>)
  40bb2a:	4798      	blx	r3
                disp_buf_first += disp_w;
  40bb2c:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bb30:	3601      	adds	r6, #1
  40bb32:	42be      	cmp	r6, r7
  40bb34:	dbf5      	blt.n	40bb22 <fill_normal+0xba>
}
  40bb36:	b011      	add	sp, #68	; 0x44
  40bb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40bb3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40bb40:	b123      	cbz	r3, 40bb4c <fill_normal+0xe4>
  40bb42:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bb44:	4b94      	ldr	r3, [pc, #592]	; (40bd98 <fill_normal+0x330>)
  40bb46:	4798      	blx	r3
  40bb48:	28f0      	cmp	r0, #240	; 0xf0
  40bb4a:	d864      	bhi.n	40bc16 <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40bb4c:	f04f 0e00 	mov.w	lr, #0
  40bb50:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bb52:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40bb56:	9f06      	ldr	r7, [sp, #24]
  40bb58:	fb07 f303 	mul.w	r3, r7, r3
  40bb5c:	3380      	adds	r3, #128	; 0x80
  40bb5e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bb62:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bb66:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bb6a:	f04f 0200 	mov.w	r2, #0
  40bb6e:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bb72:	f004 0107 	and.w	r1, r4, #7
  40bb76:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40bb7a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40bb7e:	fb03 f307 	mul.w	r3, r3, r7
  40bb82:	3380      	adds	r3, #128	; 0x80
  40bb84:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bb88:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bb8c:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40bb90:	f361 0202 	bfi	r2, r1, #0, #3
  40bb94:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bb98:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bb9c:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40bba0:	fb03 f307 	mul.w	r3, r3, r7
  40bba4:	3380      	adds	r3, #128	; 0x80
  40bba6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bbaa:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bbae:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bbb2:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40bbb6:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40bbba:	46bc      	mov	ip, r7
  40bbbc:	b2bb      	uxth	r3, r7
  40bbbe:	fb01 f103 	mul.w	r1, r1, r3
  40bbc2:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40bbc6:	f004 0707 	and.w	r7, r4, #7
  40bbca:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40bbce:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40bbd2:	fb13 f101 	smulbb	r1, r3, r1
  40bbd6:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40bbda:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40bbde:	fb03 f304 	mul.w	r3, r3, r4
  40bbe2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40bbe6:	4661      	mov	r1, ip
  40bbe8:	43cc      	mvns	r4, r1
  40bbea:	b2e4      	uxtb	r4, r4
  40bbec:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40bbf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40bbf4:	e069      	b.n	40bcca <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40bbf6:	4a6a      	ldr	r2, [pc, #424]	; (40bda0 <fill_normal+0x338>)
  40bbf8:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40bbfc:	3301      	adds	r3, #1
  40bbfe:	42b3      	cmp	r3, r6
  40bc00:	dbf9      	blt.n	40bbf6 <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bc02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bc04:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40bc08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40bc0a:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40bc0e:	4690      	mov	r8, r2
  40bc10:	f8dd a018 	ldr.w	sl, [sp, #24]
  40bc14:	e00c      	b.n	40bc30 <fill_normal+0x1c8>
  40bc16:	2300      	movs	r3, #0
  40bc18:	e7f1      	b.n	40bbfe <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40bc1a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40bc1c:	f8cd a000 	str.w	sl, [sp]
  40bc20:	9b07      	ldr	r3, [sp, #28]
  40bc22:	4a5f      	ldr	r2, [pc, #380]	; (40bda0 <fill_normal+0x338>)
  40bc24:	4629      	mov	r1, r5
  40bc26:	4630      	mov	r0, r6
  40bc28:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40bc2a:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bc2e:	3401      	adds	r4, #1
  40bc30:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40bc34:	429c      	cmp	r4, r3
  40bc36:	ddf0      	ble.n	40bc1a <fill_normal+0x1b2>
  40bc38:	e77d      	b.n	40bb36 <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40bc3a:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40bc3c:	3101      	adds	r1, #1
  40bc3e:	42b1      	cmp	r1, r6
  40bc40:	da3f      	bge.n	40bcc2 <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40bc42:	b283      	uxth	r3, r0
  40bc44:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40bc48:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40bc4c:	454b      	cmp	r3, r9
  40bc4e:	d0f4      	beq.n	40bc3a <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40bc50:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bc54:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40bc58:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40bc5c:	fb04 2303 	mla	r3, r4, r3, r2
  40bc60:	3380      	adds	r3, #128	; 0x80
  40bc62:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bc66:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bc6a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bc6e:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bc72:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40bc76:	f000 0907 	and.w	r9, r0, #7
  40bc7a:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40bc7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40bc82:	fb03 2304 	mla	r3, r3, r4, r2
  40bc86:	3380      	adds	r3, #128	; 0x80
  40bc88:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bc8c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bc90:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40bc94:	f362 0a02 	bfi	sl, r2, #0, #3
  40bc98:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bc9c:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40bca0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40bca4:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40bca8:	fb03 2304 	mla	r3, r3, r4, r2
  40bcac:	3380      	adds	r3, #128	; 0x80
  40bcae:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bcb2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bcb6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bcba:	f363 2a0c 	bfi	sl, r3, #8, #5
  40bcbe:	4652      	mov	r2, sl
  40bcc0:	e7bb      	b.n	40bc3a <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40bcc2:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40bcc6:	f10e 0e01 	add.w	lr, lr, #1
  40bcca:	45e6      	cmp	lr, ip
  40bccc:	f6bf af33 	bge.w	40bb36 <fill_normal+0xce>
  40bcd0:	2100      	movs	r1, #0
  40bcd2:	e7b4      	b.n	40bc3e <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40bcd4:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40bcd8:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40bcda:	3301      	adds	r3, #1
  40bcdc:	42b3      	cmp	r3, r6
  40bcde:	f280 81c0 	bge.w	40c062 <fill_normal+0x5fa>
  40bce2:	f012 0f03 	tst.w	r2, #3
  40bce6:	d04a      	beq.n	40bd7e <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40bce8:	7811      	ldrb	r1, [r2, #0]
  40bcea:	2900      	cmp	r1, #0
  40bcec:	d0f4      	beq.n	40bcd8 <fill_normal+0x270>
  40bcee:	29ff      	cmp	r1, #255	; 0xff
  40bcf0:	d0f0      	beq.n	40bcd4 <fill_normal+0x26c>
  40bcf2:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bcf6:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bcfa:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40bcfe:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40bd02:	fb0c f909 	mul.w	r9, ip, r9
  40bd06:	fb01 9000 	mla	r0, r1, r0, r9
  40bd0a:	3080      	adds	r0, #128	; 0x80
  40bd0c:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bd10:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bd14:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bd18:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bd1c:	f004 0007 	and.w	r0, r4, #7
  40bd20:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40bd24:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40bd28:	f00e 0a07 	and.w	sl, lr, #7
  40bd2c:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40bd30:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40bd34:	fb09 f90c 	mul.w	r9, r9, ip
  40bd38:	fb00 9001 	mla	r0, r0, r1, r9
  40bd3c:	3080      	adds	r0, #128	; 0x80
  40bd3e:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bd42:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bd46:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40bd4a:	f369 0702 	bfi	r7, r9, #0, #3
  40bd4e:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bd52:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bd56:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bd5a:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40bd5e:	fb0e fc0c 	mul.w	ip, lr, ip
  40bd62:	fb00 c101 	mla	r1, r0, r1, ip
  40bd66:	3180      	adds	r1, #128	; 0x80
  40bd68:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40bd6c:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40bd70:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40bd74:	f361 270c 	bfi	r7, r1, #8, #5
  40bd78:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40bd7c:	e7ac      	b.n	40bcd8 <fill_normal+0x270>
  40bd7e:	960a      	str	r6, [sp, #40]	; 0x28
  40bd80:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40bd84:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40bd88:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40bd8c:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40bd90:	e015      	b.n	40bdbe <fill_normal+0x356>
  40bd92:	bf00      	nop
  40bd94:	00409531 	.word	0x00409531
  40bd98:	0041519f 	.word	0x0041519f
  40bd9c:	0041593f 	.word	0x0041593f
  40bda0:	2040c3a8 	.word	0x2040c3a8
                            disp_buf_first[x] = color;
  40bda4:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40bda8:	1c59      	adds	r1, r3, #1
  40bdaa:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40bdae:	1c99      	adds	r1, r3, #2
  40bdb0:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40bdb4:	1cd9      	adds	r1, r3, #3
  40bdb6:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40bdba:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40bdbc:	3304      	adds	r3, #4
  40bdbe:	9903      	ldr	r1, [sp, #12]
  40bdc0:	428b      	cmp	r3, r1
  40bdc2:	f300 8158 	bgt.w	40c076 <fill_normal+0x60e>
                    if(*mask32) {
  40bdc6:	6811      	ldr	r1, [r2, #0]
  40bdc8:	2900      	cmp	r1, #0
  40bdca:	d0f6      	beq.n	40bdba <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40bdcc:	f1b1 3fff 	cmp.w	r1, #4294967295
  40bdd0:	d0e8      	beq.n	40bda4 <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40bdd2:	7811      	ldrb	r1, [r2, #0]
  40bdd4:	2900      	cmp	r1, #0
  40bdd6:	d047      	beq.n	40be68 <fill_normal+0x400>
  40bdd8:	29ff      	cmp	r1, #255	; 0xff
  40bdda:	f000 8133 	beq.w	40c044 <fill_normal+0x5dc>
  40bdde:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bde2:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bde6:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bdea:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bdee:	fb08 fc0c 	mul.w	ip, r8, ip
  40bdf2:	fb01 c000 	mla	r0, r1, r0, ip
  40bdf6:	3080      	adds	r0, #128	; 0x80
  40bdf8:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bdfc:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40be00:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40be04:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40be08:	f004 0007 	and.w	r0, r4, #7
  40be0c:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40be10:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40be14:	f006 0907 	and.w	r9, r6, #7
  40be18:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40be1c:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40be20:	fb0c fc08 	mul.w	ip, ip, r8
  40be24:	fb00 c001 	mla	r0, r0, r1, ip
  40be28:	3080      	adds	r0, #128	; 0x80
  40be2a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40be2e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40be32:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40be36:	f36c 0e02 	bfi	lr, ip, #0, #3
  40be3a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40be3e:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40be42:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40be46:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40be4a:	fb06 f608 	mul.w	r6, r6, r8
  40be4e:	fb00 6601 	mla	r6, r0, r1, r6
  40be52:	3680      	adds	r6, #128	; 0x80
  40be54:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40be58:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40be5c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40be60:	f366 2e0c 	bfi	lr, r6, #8, #5
  40be64:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40be68:	7851      	ldrb	r1, [r2, #1]
  40be6a:	2900      	cmp	r1, #0
  40be6c:	d04f      	beq.n	40bf0e <fill_normal+0x4a6>
  40be6e:	29ff      	cmp	r1, #255	; 0xff
  40be70:	f000 80eb 	beq.w	40c04a <fill_normal+0x5e2>
  40be74:	f103 0901 	add.w	r9, r3, #1
  40be78:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40be7c:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40be80:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40be84:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40be88:	fb08 fc0c 	mul.w	ip, r8, ip
  40be8c:	fb01 c000 	mla	r0, r1, r0, ip
  40be90:	3080      	adds	r0, #128	; 0x80
  40be92:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40be96:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40be9a:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40be9e:	9f04      	ldr	r7, [sp, #16]
  40bea0:	f360 07c7 	bfi	r7, r0, #3, #5
  40bea4:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bea6:	f004 0007 	and.w	r0, r4, #7
  40beaa:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40beae:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40beb2:	f006 0707 	and.w	r7, r6, #7
  40beb6:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40beba:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bebe:	fb0c fc08 	mul.w	ip, ip, r8
  40bec2:	fb00 c001 	mla	r0, r0, r1, ip
  40bec6:	3080      	adds	r0, #128	; 0x80
  40bec8:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40becc:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bed0:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bed4:	9f04      	ldr	r7, [sp, #16]
  40bed6:	f36c 0702 	bfi	r7, ip, #0, #3
  40beda:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bede:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bee2:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bee6:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40beea:	fb06 f608 	mul.w	r6, r6, r8
  40beee:	fb00 6601 	mla	r6, r0, r1, r6
  40bef2:	3680      	adds	r6, #128	; 0x80
  40bef4:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bef8:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40befc:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bf00:	4639      	mov	r1, r7
  40bf02:	f360 210c 	bfi	r1, r0, #8, #5
  40bf06:	f8ad 1010 	strh.w	r1, [sp, #16]
  40bf0a:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40bf0e:	7891      	ldrb	r1, [r2, #2]
  40bf10:	2900      	cmp	r1, #0
  40bf12:	d049      	beq.n	40bfa8 <fill_normal+0x540>
  40bf14:	29ff      	cmp	r1, #255	; 0xff
  40bf16:	f000 809c 	beq.w	40c052 <fill_normal+0x5ea>
  40bf1a:	f103 0902 	add.w	r9, r3, #2
  40bf1e:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bf22:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bf26:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bf2a:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bf2e:	fb08 fc0c 	mul.w	ip, r8, ip
  40bf32:	fb01 c000 	mla	r0, r1, r0, ip
  40bf36:	3080      	adds	r0, #128	; 0x80
  40bf38:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bf3c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bf40:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bf44:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bf48:	f004 0007 	and.w	r0, r4, #7
  40bf4c:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40bf50:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40bf54:	f006 0707 	and.w	r7, r6, #7
  40bf58:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bf5c:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bf60:	fb0c fc08 	mul.w	ip, ip, r8
  40bf64:	fb00 c001 	mla	r0, r0, r1, ip
  40bf68:	3080      	adds	r0, #128	; 0x80
  40bf6a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bf6e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bf72:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bf76:	f36c 0a02 	bfi	sl, ip, #0, #3
  40bf7a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bf7e:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bf82:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bf86:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bf8a:	fb06 f608 	mul.w	r6, r6, r8
  40bf8e:	fb00 6601 	mla	r6, r0, r1, r6
  40bf92:	3680      	adds	r6, #128	; 0x80
  40bf94:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bf98:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40bf9c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bfa0:	f360 2a0c 	bfi	sl, r0, #8, #5
  40bfa4:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40bfa8:	78d1      	ldrb	r1, [r2, #3]
  40bfaa:	2900      	cmp	r1, #0
  40bfac:	f43f af05 	beq.w	40bdba <fill_normal+0x352>
  40bfb0:	29ff      	cmp	r1, #255	; 0xff
  40bfb2:	d052      	beq.n	40c05a <fill_normal+0x5f2>
  40bfb4:	f103 0903 	add.w	r9, r3, #3
  40bfb8:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bfbc:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bfc0:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bfc4:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bfc8:	fb08 fc0c 	mul.w	ip, r8, ip
  40bfcc:	fb01 c000 	mla	r0, r1, r0, ip
  40bfd0:	3080      	adds	r0, #128	; 0x80
  40bfd2:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bfd6:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bfda:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bfde:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bfe2:	f004 0007 	and.w	r0, r4, #7
  40bfe6:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40bfea:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40bfee:	f006 0707 	and.w	r7, r6, #7
  40bff2:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bff6:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bffa:	fb0c fc08 	mul.w	ip, ip, r8
  40bffe:	fb00 c001 	mla	r0, r0, r1, ip
  40c002:	3080      	adds	r0, #128	; 0x80
  40c004:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40c008:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40c00c:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40c010:	f36c 0b02 	bfi	fp, ip, #0, #3
  40c014:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c018:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c01c:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c020:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40c024:	fb06 f608 	mul.w	r6, r6, r8
  40c028:	fb00 6601 	mla	r6, r0, r1, r6
  40c02c:	3680      	adds	r6, #128	; 0x80
  40c02e:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40c032:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40c036:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c03a:	f360 2b0c 	bfi	fp, r0, #8, #5
  40c03e:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40c042:	e6ba      	b.n	40bdba <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40c044:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c048:	e70e      	b.n	40be68 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40c04a:	1c59      	adds	r1, r3, #1
  40c04c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c050:	e75d      	b.n	40bf0e <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40c052:	1c99      	adds	r1, r3, #2
  40c054:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c058:	e7a6      	b.n	40bfa8 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40c05a:	1cd9      	adds	r1, r3, #3
  40c05c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40c060:	e6ab      	b.n	40bdba <fill_normal+0x352>
  40c062:	960a      	str	r6, [sp, #40]	; 0x28
  40c064:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40c068:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40c06c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40c070:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40c074:	e6a3      	b.n	40bdbe <fill_normal+0x356>
  40c076:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40c078:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40c07c:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40c080:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40c084:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40c088:	e003      	b.n	40c092 <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40c08a:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40c08e:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40c090:	3301      	adds	r3, #1
  40c092:	42b3      	cmp	r3, r6
  40c094:	da4a      	bge.n	40c12c <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40c096:	7811      	ldrb	r1, [r2, #0]
  40c098:	2900      	cmp	r1, #0
  40c09a:	d0f8      	beq.n	40c08e <fill_normal+0x626>
  40c09c:	29ff      	cmp	r1, #255	; 0xff
  40c09e:	d0f4      	beq.n	40c08a <fill_normal+0x622>
  40c0a0:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c0a4:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40c0a8:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40c0ac:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40c0b0:	fb0c f909 	mul.w	r9, ip, r9
  40c0b4:	fb01 9000 	mla	r0, r1, r0, r9
  40c0b8:	3080      	adds	r0, #128	; 0x80
  40c0ba:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c0be:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c0c2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40c0c6:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c0ca:	f004 0007 	and.w	r0, r4, #7
  40c0ce:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40c0d2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40c0d6:	f00e 0a07 	and.w	sl, lr, #7
  40c0da:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40c0de:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40c0e2:	fb09 f90c 	mul.w	r9, r9, ip
  40c0e6:	fb00 9001 	mla	r0, r0, r1, r9
  40c0ea:	3080      	adds	r0, #128	; 0x80
  40c0ec:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40c0f0:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40c0f4:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40c0f8:	f369 0802 	bfi	r8, r9, #0, #3
  40c0fc:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40c100:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c104:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40c108:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40c10c:	fb0e fc0c 	mul.w	ip, lr, ip
  40c110:	fb00 c101 	mla	r1, r0, r1, ip
  40c114:	3180      	adds	r1, #128	; 0x80
  40c116:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40c11a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40c11e:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40c122:	f361 280c 	bfi	r8, r1, #8, #5
  40c126:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40c12a:	e7b0      	b.n	40c08e <fill_normal+0x626>
                disp_buf_first += disp_w;
  40c12c:	9b08      	ldr	r3, [sp, #32]
  40c12e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40c132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40c134:	9a07      	ldr	r2, [sp, #28]
  40c136:	4413      	add	r3, r2
  40c138:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40c13a:	9b06      	ldr	r3, [sp, #24]
  40c13c:	3301      	adds	r3, #1
  40c13e:	9306      	str	r3, [sp, #24]
  40c140:	9b06      	ldr	r3, [sp, #24]
  40c142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c144:	4293      	cmp	r3, r2
  40c146:	f6bf acf6 	bge.w	40bb36 <fill_normal+0xce>
  40c14a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40c14c:	2300      	movs	r3, #0
  40c14e:	e5c5      	b.n	40bcdc <fill_normal+0x274>
  40c150:	2300      	movs	r3, #0
  40c152:	9306      	str	r3, [sp, #24]
  40c154:	e7f4      	b.n	40c140 <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40c156:	9c06      	ldr	r4, [sp, #24]
  40c158:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40c15c:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40c160:	4281      	cmp	r1, r0
  40c162:	d05c      	beq.n	40c21e <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40c164:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40c168:	d05f      	beq.n	40c22a <fill_normal+0x7c2>
  40c16a:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c16e:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40c172:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40c176:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40c17a:	fb04 f101 	mul.w	r1, r4, r1
  40c17e:	fb08 1303 	mla	r3, r8, r3, r1
  40c182:	3380      	adds	r3, #128	; 0x80
  40c184:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c188:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c18c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c190:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c194:	f00b 0307 	and.w	r3, fp, #7
  40c198:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40c19c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40c1a0:	f002 0707 	and.w	r7, r2, #7
  40c1a4:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40c1a8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40c1ac:	fb01 f104 	mul.w	r1, r1, r4
  40c1b0:	fb03 1308 	mla	r3, r3, r8, r1
  40c1b4:	3380      	adds	r3, #128	; 0x80
  40c1b6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40c1ba:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40c1be:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40c1c2:	f361 0902 	bfi	r9, r1, #0, #3
  40c1c6:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c1ca:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c1ce:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40c1d2:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40c1d6:	fb02 f204 	mul.w	r2, r2, r4
  40c1da:	fb03 2408 	mla	r4, r3, r8, r2
  40c1de:	3480      	adds	r4, #128	; 0x80
  40c1e0:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40c1e4:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40c1e8:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40c1ec:	f364 290c 	bfi	r9, r4, #8, #5
  40c1f0:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40c1f2:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40c1f6:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40c1f8:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40c1fc:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40c200:	f10c 0c01 	add.w	ip, ip, #1
  40c204:	45b4      	cmp	ip, r6
  40c206:	da12      	bge.n	40c22e <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40c208:	f89a 0000 	ldrb.w	r0, [sl]
  40c20c:	2800      	cmp	r0, #0
  40c20e:	d0f5      	beq.n	40c1fc <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40c210:	4281      	cmp	r1, r0
  40c212:	d0a5      	beq.n	40c160 <fill_normal+0x6f8>
  40c214:	28ff      	cmp	r0, #255	; 0xff
  40c216:	d19e      	bne.n	40c156 <fill_normal+0x6ee>
  40c218:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40c21c:	e7a0      	b.n	40c160 <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40c21e:	b294      	uxth	r4, r2
  40c220:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40c224:	42bc      	cmp	r4, r7
  40c226:	d19d      	bne.n	40c164 <fill_normal+0x6fc>
  40c228:	e7e6      	b.n	40c1f8 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40c22a:	465b      	mov	r3, fp
  40c22c:	e7e1      	b.n	40c1f2 <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40c22e:	9808      	ldr	r0, [sp, #32]
  40c230:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40c234:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40c236:	9c07      	ldr	r4, [sp, #28]
  40c238:	4420      	add	r0, r4
  40c23a:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c23c:	f10e 0e01 	add.w	lr, lr, #1
  40c240:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c242:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40c246:	4586      	cmp	lr, r0
  40c248:	f73f ac75 	bgt.w	40bb36 <fill_normal+0xce>
  40c24c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40c250:	f04f 0c00 	mov.w	ip, #0
  40c254:	e7d6      	b.n	40c204 <fill_normal+0x79c>
  40c256:	bf00      	nop

0040c258 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c258:	2a02      	cmp	r2, #2
  40c25a:	d972      	bls.n	40c342 <color_blend_true_color_additive+0xea>
{
  40c25c:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40c25e:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c262:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c266:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40c268:	2b1f      	cmp	r3, #31
  40c26a:	bf28      	it	cs
  40c26c:	231f      	movcs	r3, #31
  40c26e:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c272:	f001 0307 	and.w	r3, r1, #7
  40c276:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c27a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c27e:	f000 0407 	and.w	r4, r0, #7
  40c282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c286:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c28a:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40c28c:	2b3f      	cmp	r3, #63	; 0x3f
  40c28e:	bf28      	it	cs
  40c290:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40c292:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c296:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c29a:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40c29e:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c2a2:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c2a6:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40c2a8:	2b1f      	cmp	r3, #31
  40c2aa:	bf28      	it	cs
  40c2ac:	231f      	movcs	r3, #31
  40c2ae:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40c2b2:	2aff      	cmp	r2, #255	; 0xff
  40c2b4:	d043      	beq.n	40c33e <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c2b6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c2ba:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c2be:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c2c2:	fb06 f404 	mul.w	r4, r6, r4
  40c2c6:	fb02 4303 	mla	r3, r2, r3, r4
  40c2ca:	3380      	adds	r3, #128	; 0x80
  40c2cc:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c2d0:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c2d4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c2d8:	f04f 0500 	mov.w	r5, #0
  40c2dc:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c2e0:	f000 0407 	and.w	r4, r0, #7
  40c2e4:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c2e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c2ec:	f001 0707 	and.w	r7, r1, #7
  40c2f0:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c2f4:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c2f8:	fb04 f406 	mul.w	r4, r4, r6
  40c2fc:	fb03 4302 	mla	r3, r3, r2, r4
  40c300:	3380      	adds	r3, #128	; 0x80
  40c302:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c306:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c30a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c30e:	f364 0502 	bfi	r5, r4, #0, #3
  40c312:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c316:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c31a:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c31e:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c322:	fb04 f406 	mul.w	r4, r4, r6
  40c326:	fb03 4202 	mla	r2, r3, r2, r4
  40c32a:	3280      	adds	r2, #128	; 0x80
  40c32c:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c330:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c334:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c338:	f362 250c 	bfi	r5, r2, #8, #5
  40c33c:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c33e:	bcf0      	pop	{r4, r5, r6, r7}
  40c340:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c342:	4608      	mov	r0, r1
  40c344:	4770      	bx	lr

0040c346 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c346:	2a02      	cmp	r2, #2
  40c348:	d96f      	bls.n	40c42a <color_blend_true_color_subtractive+0xe4>
{
  40c34a:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40c34c:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c350:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c354:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40c356:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c35a:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c35e:	f001 0307 	and.w	r3, r1, #7
  40c362:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c366:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c36a:	f000 0407 	and.w	r4, r0, #7
  40c36e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c372:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c376:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40c378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40c37c:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c380:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c384:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40c388:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c38c:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c390:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40c392:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c396:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40c39a:	2aff      	cmp	r2, #255	; 0xff
  40c39c:	d043      	beq.n	40c426 <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c39e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c3a2:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c3a6:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c3aa:	fb06 f404 	mul.w	r4, r6, r4
  40c3ae:	fb02 4303 	mla	r3, r2, r3, r4
  40c3b2:	3380      	adds	r3, #128	; 0x80
  40c3b4:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c3b8:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c3bc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c3c0:	f04f 0500 	mov.w	r5, #0
  40c3c4:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c3c8:	f000 0407 	and.w	r4, r0, #7
  40c3cc:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c3d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c3d4:	f001 0707 	and.w	r7, r1, #7
  40c3d8:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c3dc:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c3e0:	fb04 f406 	mul.w	r4, r4, r6
  40c3e4:	fb03 4302 	mla	r3, r3, r2, r4
  40c3e8:	3380      	adds	r3, #128	; 0x80
  40c3ea:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c3ee:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c3f2:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c3f6:	f364 0502 	bfi	r5, r4, #0, #3
  40c3fa:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c3fe:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c402:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c406:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c40a:	fb04 f406 	mul.w	r4, r4, r6
  40c40e:	fb03 4202 	mla	r2, r3, r2, r4
  40c412:	3280      	adds	r2, #128	; 0x80
  40c414:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c418:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c41c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c420:	f362 250c 	bfi	r5, r2, #8, #5
  40c424:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c426:	bcf0      	pop	{r4, r5, r6, r7}
  40c428:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c42a:	4608      	mov	r0, r1
  40c42c:	4770      	bx	lr
	...

0040c430 <fill_blended>:
{
  40c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c434:	b085      	sub	sp, #20
  40c436:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40c43a:	9400      	str	r4, [sp, #0]
  40c43c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c440:	8884      	ldrh	r4, [r0, #4]
  40c442:	8800      	ldrh	r0, [r0, #0]
  40c444:	1a20      	subs	r0, r4, r0
  40c446:	b280      	uxth	r0, r0
  40c448:	3001      	adds	r0, #1
  40c44a:	b200      	sxth	r0, r0
  40c44c:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40c44e:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40c452:	fb0b f000 	mul.w	r0, fp, r0
  40c456:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40c45a:	2e01      	cmp	r6, #1
  40c45c:	d004      	beq.n	40c468 <fill_blended+0x38>
  40c45e:	2e02      	cmp	r6, #2
  40c460:	d01b      	beq.n	40c49a <fill_blended+0x6a>
}
  40c462:	b005      	add	sp, #20
  40c464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40c468:	f8df a154 	ldr.w	sl, [pc, #340]	; 40c5c0 <fill_blended+0x190>
  40c46c:	f8ad 3006 	strh.w	r3, [sp, #6]
  40c470:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c472:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40c476:	2b01      	cmp	r3, #1
  40c478:	d012      	beq.n	40c4a0 <fill_blended+0x70>
  40c47a:	8893      	ldrh	r3, [r2, #4]
  40c47c:	f9b2 2000 	ldrsh.w	r2, [r2]
  40c480:	b294      	uxth	r4, r2
  40c482:	1b1b      	subs	r3, r3, r4
  40c484:	b29b      	uxth	r3, r3
  40c486:	3301      	adds	r3, #1
  40c488:	b21b      	sxth	r3, r3
  40c48a:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40c48c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40c48e:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40c490:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40c494:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40c496:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c498:	e089      	b.n	40c5ae <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40c49a:	f8df a128 	ldr.w	sl, [pc, #296]	; 40c5c4 <fill_blended+0x194>
  40c49e:	e7e5      	b.n	40c46c <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40c4a0:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c4a4:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40c4a8:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40c4ac:	9900      	ldr	r1, [sp, #0]
  40c4ae:	fb01 f303 	mul.w	r3, r1, r3
  40c4b2:	3380      	adds	r3, #128	; 0x80
  40c4b4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c4b8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c4bc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c4c0:	4630      	mov	r0, r6
  40c4c2:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c4c6:	f004 0207 	and.w	r2, r4, #7
  40c4ca:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40c4ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c4d2:	fb03 f301 	mul.w	r3, r3, r1
  40c4d6:	3380      	adds	r3, #128	; 0x80
  40c4d8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c4dc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c4e0:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40c4e4:	f362 0002 	bfi	r0, r2, #0, #3
  40c4e8:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c4ec:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c4f0:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40c4f4:	fb03 f301 	mul.w	r3, r3, r1
  40c4f8:	3380      	adds	r3, #128	; 0x80
  40c4fa:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c4fe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c502:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c506:	f363 200c 	bfi	r0, r3, #8, #5
  40c50a:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40c50e:	e018      	b.n	40c542 <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40c510:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c512:	3401      	adds	r4, #1
  40c514:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c518:	429c      	cmp	r4, r3
  40c51a:	dc0e      	bgt.n	40c53a <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40c51c:	b2b3      	uxth	r3, r6
  40c51e:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40c522:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40c526:	4293      	cmp	r3, r2
  40c528:	d0f2      	beq.n	40c510 <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40c52a:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40c52e:	9a00      	ldr	r2, [sp, #0]
  40c530:	4631      	mov	r1, r6
  40c532:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c536:	47d0      	blx	sl
  40c538:	e7ea      	b.n	40c510 <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40c53a:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c53e:	f10b 0b01 	add.w	fp, fp, #1
  40c542:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c546:	459b      	cmp	fp, r3
  40c548:	dc8b      	bgt.n	40c462 <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c54a:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c54e:	e7e1      	b.n	40c514 <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c550:	fa1f f38e 	uxth.w	r3, lr
  40c554:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40c558:	4563      	cmp	r3, ip
  40c55a:	d119      	bne.n	40c590 <fill_blended+0x160>
  40c55c:	e009      	b.n	40c572 <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c55e:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40c560:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40c564:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c568:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40c56a:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40c56e:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40c572:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c576:	3401      	adds	r4, #1
  40c578:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c57c:	429c      	cmp	r4, r3
  40c57e:	dc0f      	bgt.n	40c5a0 <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40c580:	4626      	mov	r6, r4
  40c582:	eb07 0904 	add.w	r9, r7, r4
  40c586:	5d3a      	ldrb	r2, [r7, r4]
  40c588:	2a00      	cmp	r2, #0
  40c58a:	d0f4      	beq.n	40c576 <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c58c:	4291      	cmp	r1, r2
  40c58e:	d0df      	beq.n	40c550 <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c590:	2afc      	cmp	r2, #252	; 0xfc
  40c592:	d8e4      	bhi.n	40c55e <fill_blended+0x12e>
  40c594:	9b00      	ldr	r3, [sp, #0]
  40c596:	fb02 f203 	mul.w	r2, r2, r3
  40c59a:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40c59e:	e7df      	b.n	40c560 <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40c5a0:	9b02      	ldr	r3, [sp, #8]
  40c5a2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40c5a6:	9b03      	ldr	r3, [sp, #12]
  40c5a8:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c5aa:	f10b 0b01 	add.w	fp, fp, #1
  40c5ae:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c5b2:	459b      	cmp	fp, r3
  40c5b4:	f73f af55 	bgt.w	40c462 <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c5b8:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c5bc:	e7dc      	b.n	40c578 <fill_blended+0x148>
  40c5be:	bf00      	nop
  40c5c0:	0040c259 	.word	0x0040c259
  40c5c4:	0040c347 	.word	0x0040c347

0040c5c8 <_lv_blend_fill>:
{
  40c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c5cc:	b08b      	sub	sp, #44	; 0x2c
  40c5ce:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c5d2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c5d6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c5da:	2d01      	cmp	r5, #1
  40c5dc:	d900      	bls.n	40c5e0 <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c5de:	b916      	cbnz	r6, 40c5e6 <_lv_blend_fill+0x1e>
}
  40c5e0:	b00b      	add	sp, #44	; 0x2c
  40c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c5e6:	461c      	mov	r4, r3
  40c5e8:	f8ad 201e 	strh.w	r2, [sp, #30]
  40c5ec:	9106      	str	r1, [sp, #24]
  40c5ee:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c5f0:	4b37      	ldr	r3, [pc, #220]	; (40c6d0 <_lv_blend_fill+0x108>)
  40c5f2:	4798      	blx	r3
  40c5f4:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c5f6:	4b37      	ldr	r3, [pc, #220]	; (40c6d4 <_lv_blend_fill+0x10c>)
  40c5f8:	4798      	blx	r3
  40c5fa:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40c5fc:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c600:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c604:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40c608:	b10b      	cbz	r3, 40c60e <_lv_blend_fill+0x46>
  40c60a:	4648      	mov	r0, r9
  40c60c:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40c60e:	9a06      	ldr	r2, [sp, #24]
  40c610:	9905      	ldr	r1, [sp, #20]
  40c612:	a808      	add	r0, sp, #32
  40c614:	4b30      	ldr	r3, [pc, #192]	; (40c6d8 <_lv_blend_fill+0x110>)
  40c616:	4798      	blx	r3
    if(!is_common) return;
  40c618:	2800      	cmp	r0, #0
  40c61a:	d0e1      	beq.n	40c5e0 <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40c61c:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40c620:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c624:	eba2 020e 	sub.w	r2, r2, lr
  40c628:	b292      	uxth	r2, r2
  40c62a:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c62e:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40c632:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c636:	1a09      	subs	r1, r1, r0
  40c638:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c63c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c640:	eba3 030e 	sub.w	r3, r3, lr
  40c644:	b29b      	uxth	r3, r3
  40c646:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c64a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c64e:	1a09      	subs	r1, r1, r0
  40c650:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c654:	b1ac      	cbz	r4, 40c682 <_lv_blend_fill+0xba>
  40c656:	f899 1008 	ldrb.w	r1, [r9, #8]
  40c65a:	f011 0f01 	tst.w	r1, #1
  40c65e:	d110      	bne.n	40c682 <_lv_blend_fill+0xba>
  40c660:	1a9a      	subs	r2, r3, r2
  40c662:	b292      	uxth	r2, r2
  40c664:	3201      	adds	r2, #1
  40c666:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c668:	2300      	movs	r3, #0
  40c66a:	e002      	b.n	40c672 <_lv_blend_fill+0xaa>
  40c66c:	2000      	movs	r0, #0
  40c66e:	7008      	strb	r0, [r1, #0]
  40c670:	3301      	adds	r3, #1
  40c672:	4293      	cmp	r3, r2
  40c674:	da05      	bge.n	40c682 <_lv_blend_fill+0xba>
  40c676:	18e1      	adds	r1, r4, r3
  40c678:	5ce0      	ldrb	r0, [r4, r3]
  40c67a:	2880      	cmp	r0, #128	; 0x80
  40c67c:	d9f6      	bls.n	40c66c <_lv_blend_fill+0xa4>
  40c67e:	20ff      	movs	r0, #255	; 0xff
  40c680:	e7f5      	b.n	40c66e <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40c682:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40c686:	b153      	cbz	r3, 40c69e <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c688:	9602      	str	r6, [sp, #8]
  40c68a:	9401      	str	r4, [sp, #4]
  40c68c:	9500      	str	r5, [sp, #0]
  40c68e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c692:	aa08      	add	r2, sp, #32
  40c694:	4659      	mov	r1, fp
  40c696:	4650      	mov	r0, sl
  40c698:	4c10      	ldr	r4, [pc, #64]	; (40c6dc <_lv_blend_fill+0x114>)
  40c69a:	47a0      	blx	r4
  40c69c:	e7a0      	b.n	40c5e0 <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c69e:	b957      	cbnz	r7, 40c6b6 <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c6a0:	9602      	str	r6, [sp, #8]
  40c6a2:	9401      	str	r4, [sp, #4]
  40c6a4:	9500      	str	r5, [sp, #0]
  40c6a6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c6aa:	aa08      	add	r2, sp, #32
  40c6ac:	4659      	mov	r1, fp
  40c6ae:	4650      	mov	r0, sl
  40c6b0:	4c0b      	ldr	r4, [pc, #44]	; (40c6e0 <_lv_blend_fill+0x118>)
  40c6b2:	47a0      	blx	r4
  40c6b4:	e794      	b.n	40c5e0 <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40c6b6:	9703      	str	r7, [sp, #12]
  40c6b8:	9602      	str	r6, [sp, #8]
  40c6ba:	9401      	str	r4, [sp, #4]
  40c6bc:	9500      	str	r5, [sp, #0]
  40c6be:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c6c2:	aa08      	add	r2, sp, #32
  40c6c4:	4659      	mov	r1, fp
  40c6c6:	4650      	mov	r0, sl
  40c6c8:	4c06      	ldr	r4, [pc, #24]	; (40c6e4 <_lv_blend_fill+0x11c>)
  40c6ca:	47a0      	blx	r4
  40c6cc:	e788      	b.n	40c5e0 <_lv_blend_fill+0x18>
  40c6ce:	bf00      	nop
  40c6d0:	00409531 	.word	0x00409531
  40c6d4:	004149fd 	.word	0x004149fd
  40c6d8:	004151bb 	.word	0x004151bb
  40c6dc:	0040b099 	.word	0x0040b099
  40c6e0:	0040ba69 	.word	0x0040ba69
  40c6e4:	0040c431 	.word	0x0040c431

0040c6e8 <_lv_blend_map>:
{
  40c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c6ec:	b08b      	sub	sp, #44	; 0x2c
  40c6ee:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c6f2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c6f6:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c6fa:	2d01      	cmp	r5, #1
  40c6fc:	d900      	bls.n	40c700 <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c6fe:	b916      	cbnz	r6, 40c706 <_lv_blend_map+0x1e>
}
  40c700:	b00b      	add	sp, #44	; 0x2c
  40c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c706:	461c      	mov	r4, r3
  40c708:	4617      	mov	r7, r2
  40c70a:	460a      	mov	r2, r1
  40c70c:	9106      	str	r1, [sp, #24]
  40c70e:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40c710:	a808      	add	r0, sp, #32
  40c712:	4b37      	ldr	r3, [pc, #220]	; (40c7f0 <_lv_blend_map+0x108>)
  40c714:	4798      	blx	r3
    if(!is_common) return;
  40c716:	2800      	cmp	r0, #0
  40c718:	d0f2      	beq.n	40c700 <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c71a:	4b36      	ldr	r3, [pc, #216]	; (40c7f4 <_lv_blend_map+0x10c>)
  40c71c:	4798      	blx	r3
  40c71e:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c720:	4b35      	ldr	r3, [pc, #212]	; (40c7f8 <_lv_blend_map+0x110>)
  40c722:	4798      	blx	r3
  40c724:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40c726:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c72a:	6883      	ldr	r3, [r0, #8]
  40c72c:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c72e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40c732:	b10b      	cbz	r3, 40c738 <_lv_blend_map+0x50>
  40c734:	4650      	mov	r0, sl
  40c736:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40c738:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40c73c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c740:	eba2 020e 	sub.w	r2, r2, lr
  40c744:	b292      	uxth	r2, r2
  40c746:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c74a:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40c74e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c752:	1a09      	subs	r1, r1, r0
  40c754:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c758:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c75c:	eba3 030e 	sub.w	r3, r3, lr
  40c760:	b29b      	uxth	r3, r3
  40c762:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c766:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c76a:	1a09      	subs	r1, r1, r0
  40c76c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c770:	b1ac      	cbz	r4, 40c79e <_lv_blend_map+0xb6>
  40c772:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40c776:	f011 0f01 	tst.w	r1, #1
  40c77a:	d110      	bne.n	40c79e <_lv_blend_map+0xb6>
  40c77c:	1a9a      	subs	r2, r3, r2
  40c77e:	b292      	uxth	r2, r2
  40c780:	3201      	adds	r2, #1
  40c782:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c784:	2300      	movs	r3, #0
  40c786:	e002      	b.n	40c78e <_lv_blend_map+0xa6>
  40c788:	2000      	movs	r0, #0
  40c78a:	7008      	strb	r0, [r1, #0]
  40c78c:	3301      	adds	r3, #1
  40c78e:	4293      	cmp	r3, r2
  40c790:	da05      	bge.n	40c79e <_lv_blend_map+0xb6>
  40c792:	18e1      	adds	r1, r4, r3
  40c794:	5ce0      	ldrb	r0, [r4, r3]
  40c796:	2880      	cmp	r0, #128	; 0x80
  40c798:	d9f6      	bls.n	40c788 <_lv_blend_map+0xa0>
  40c79a:	20ff      	movs	r0, #255	; 0xff
  40c79c:	e7f5      	b.n	40c78a <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40c79e:	f8da 3014 	ldr.w	r3, [sl, #20]
  40c7a2:	b153      	cbz	r3, 40c7ba <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40c7a4:	9603      	str	r6, [sp, #12]
  40c7a6:	9402      	str	r4, [sp, #8]
  40c7a8:	9501      	str	r5, [sp, #4]
  40c7aa:	9700      	str	r7, [sp, #0]
  40c7ac:	9b06      	ldr	r3, [sp, #24]
  40c7ae:	aa08      	add	r2, sp, #32
  40c7b0:	9907      	ldr	r1, [sp, #28]
  40c7b2:	4658      	mov	r0, fp
  40c7b4:	4c11      	ldr	r4, [pc, #68]	; (40c7fc <_lv_blend_map+0x114>)
  40c7b6:	47a0      	blx	r4
  40c7b8:	e7a2      	b.n	40c700 <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c7ba:	f1b8 0f00 	cmp.w	r8, #0
  40c7be:	d10a      	bne.n	40c7d6 <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40c7c0:	9603      	str	r6, [sp, #12]
  40c7c2:	9402      	str	r4, [sp, #8]
  40c7c4:	9501      	str	r5, [sp, #4]
  40c7c6:	9700      	str	r7, [sp, #0]
  40c7c8:	9b06      	ldr	r3, [sp, #24]
  40c7ca:	aa08      	add	r2, sp, #32
  40c7cc:	9907      	ldr	r1, [sp, #28]
  40c7ce:	4658      	mov	r0, fp
  40c7d0:	4c0b      	ldr	r4, [pc, #44]	; (40c800 <_lv_blend_map+0x118>)
  40c7d2:	47a0      	blx	r4
  40c7d4:	e794      	b.n	40c700 <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40c7d6:	f8cd 8010 	str.w	r8, [sp, #16]
  40c7da:	9603      	str	r6, [sp, #12]
  40c7dc:	9402      	str	r4, [sp, #8]
  40c7de:	9501      	str	r5, [sp, #4]
  40c7e0:	9700      	str	r7, [sp, #0]
  40c7e2:	9b06      	ldr	r3, [sp, #24]
  40c7e4:	aa08      	add	r2, sp, #32
  40c7e6:	9907      	ldr	r1, [sp, #28]
  40c7e8:	4658      	mov	r0, fp
  40c7ea:	4c06      	ldr	r4, [pc, #24]	; (40c804 <_lv_blend_map+0x11c>)
  40c7ec:	47a0      	blx	r4
  40c7ee:	e787      	b.n	40c700 <_lv_blend_map+0x18>
  40c7f0:	004151bb 	.word	0x004151bb
  40c7f4:	00409531 	.word	0x00409531
  40c7f8:	004149fd 	.word	0x004149fd
  40c7fc:	0040b17d 	.word	0x0040b17d
  40c800:	0040b2b5 	.word	0x0040b2b5
  40c804:	0040af4d 	.word	0x0040af4d

0040c808 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c80c:	b0bd      	sub	sp, #244	; 0xf4
  40c80e:	9016      	str	r0, [sp, #88]	; 0x58
  40c810:	911f      	str	r1, [sp, #124]	; 0x7c
  40c812:	4616      	mov	r6, r2
  40c814:	930a      	str	r3, [sp, #40]	; 0x28
  40c816:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40c81a:	930d      	str	r3, [sp, #52]	; 0x34
  40c81c:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40c820:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40c822:	aa3a      	add	r2, sp, #232	; 0xe8
  40c824:	2308      	movs	r3, #8
  40c826:	e004      	b.n	40c832 <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40c828:	f811 0b01 	ldrb.w	r0, [r1], #1
  40c82c:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40c830:	3b01      	subs	r3, #1
    while(len) {
  40c832:	2b00      	cmp	r3, #0
  40c834:	d1f8      	bne.n	40c828 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40c836:	4ba6      	ldr	r3, [pc, #664]	; (40cad0 <lv_draw_map+0x2c8>)
  40c838:	4798      	blx	r3
  40c83a:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c83c:	4ba5      	ldr	r3, [pc, #660]	; (40cad4 <lv_draw_map+0x2cc>)
  40c83e:	4798      	blx	r3
  40c840:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40c842:	8a01      	ldrh	r1, [r0, #16]
  40c844:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40c848:	1a5b      	subs	r3, r3, r1
  40c84a:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40c84e:	8a42      	ldrh	r2, [r0, #18]
  40c850:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40c854:	1a9b      	subs	r3, r3, r2
  40c856:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40c85a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c85e:	1a5b      	subs	r3, r3, r1
  40c860:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40c864:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40c868:	1a9b      	subs	r3, r3, r2
  40c86a:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40c86e:	4b9a      	ldr	r3, [pc, #616]	; (40cad8 <lv_draw_map+0x2d0>)
  40c870:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40c872:	9015      	str	r0, [sp, #84]	; 0x54
  40c874:	b930      	cbnz	r0, 40c884 <lv_draw_map+0x7c>
  40c876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c878:	8853      	ldrh	r3, [r2, #2]
  40c87a:	b91b      	cbnz	r3, 40c884 <lv_draw_map+0x7c>
  40c87c:	8913      	ldrh	r3, [r2, #8]
  40c87e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c882:	d055      	beq.n	40c930 <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c884:	9b08      	ldr	r3, [sp, #32]
  40c886:	2b00      	cmp	r3, #0
  40c888:	d068      	beq.n	40c95c <lv_draw_map+0x154>
  40c88a:	2303      	movs	r3, #3
  40c88c:	9307      	str	r3, [sp, #28]
  40c88e:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c890:	888d      	ldrh	r5, [r1, #4]
  40c892:	f9b1 2000 	ldrsh.w	r2, [r1]
  40c896:	b293      	uxth	r3, r2
  40c898:	1aed      	subs	r5, r5, r3
  40c89a:	b2ad      	uxth	r5, r5
  40c89c:	3501      	adds	r5, #1
  40c89e:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40c8a0:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40c8a2:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40c8a6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40c8aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c8ac:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40c8b0:	1a5b      	subs	r3, r3, r1
  40c8b2:	1ac3      	subs	r3, r0, r3
  40c8b4:	fb03 f305 	mul.w	r3, r3, r5
  40c8b8:	9f07      	ldr	r7, [sp, #28]
  40c8ba:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40c8bc:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40c8c0:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40c8c4:	eba2 020e 	sub.w	r2, r2, lr
  40c8c8:	ebac 0202 	sub.w	r2, ip, r2
  40c8cc:	fb02 f207 	mul.w	r2, r2, r7
  40c8d0:	fb07 2303 	mla	r3, r7, r3, r2
  40c8d4:	18f3      	adds	r3, r6, r3
  40c8d6:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40c8d8:	fa1f f78c 	uxth.w	r7, ip
  40c8dc:	fa17 f38e 	uxtah	r3, r7, lr
  40c8e0:	b29b      	uxth	r3, r3
  40c8e2:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40c8e6:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40c8ea:	1bd2      	subs	r2, r2, r7
  40c8ec:	b292      	uxth	r2, r2
  40c8ee:	3201      	adds	r2, #1
  40c8f0:	b292      	uxth	r2, r2
  40c8f2:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40c8f6:	4413      	add	r3, r2
  40c8f8:	b29b      	uxth	r3, r3
  40c8fa:	3b01      	subs	r3, #1
  40c8fc:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40c900:	b280      	uxth	r0, r0
  40c902:	fa10 f381 	uxtah	r3, r0, r1
  40c906:	b21b      	sxth	r3, r3
  40c908:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40c90c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c910:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40c914:	1a1b      	subs	r3, r3, r0
  40c916:	b29b      	uxth	r3, r3
  40c918:	3301      	adds	r3, #1
  40c91a:	b21b      	sxth	r3, r3
  40c91c:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c91e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c920:	8853      	ldrh	r3, [r2, #2]
  40c922:	b9f3      	cbnz	r3, 40c962 <lv_draw_map+0x15a>
  40c924:	8913      	ldrh	r3, [r2, #8]
  40c926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c92a:	d051      	beq.n	40c9d0 <lv_draw_map+0x1c8>
  40c92c:	2301      	movs	r3, #1
  40c92e:	e019      	b.n	40c964 <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40c930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c932:	2b00      	cmp	r3, #0
  40c934:	d1a6      	bne.n	40c884 <lv_draw_map+0x7c>
  40c936:	9b08      	ldr	r3, [sp, #32]
  40c938:	2b00      	cmp	r3, #0
  40c93a:	d1a3      	bne.n	40c884 <lv_draw_map+0x7c>
  40c93c:	7a93      	ldrb	r3, [r2, #10]
  40c93e:	2b00      	cmp	r3, #0
  40c940:	d1a0      	bne.n	40c884 <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40c942:	7b93      	ldrb	r3, [r2, #14]
  40c944:	9302      	str	r3, [sp, #8]
  40c946:	7813      	ldrb	r3, [r2, #0]
  40c948:	9301      	str	r3, [sp, #4]
  40c94a:	2301      	movs	r3, #1
  40c94c:	9300      	str	r3, [sp, #0]
  40c94e:	2300      	movs	r3, #0
  40c950:	4632      	mov	r2, r6
  40c952:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c954:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c956:	4c61      	ldr	r4, [pc, #388]	; (40cadc <lv_draw_map+0x2d4>)
  40c958:	47a0      	blx	r4
  40c95a:	e368      	b.n	40d02e <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c95c:	2302      	movs	r3, #2
  40c95e:	9307      	str	r3, [sp, #28]
  40c960:	e795      	b.n	40c88e <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c962:	2301      	movs	r3, #1
  40c964:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c966:	f083 0301 	eor.w	r3, r3, #1
  40c96a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c96c:	2a00      	cmp	r2, #0
  40c96e:	bf14      	ite	ne
  40c970:	2300      	movne	r3, #0
  40c972:	f003 0301 	andeq.w	r3, r3, #1
  40c976:	b133      	cbz	r3, 40c986 <lv_draw_map+0x17e>
  40c978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c97a:	b923      	cbnz	r3, 40c986 <lv_draw_map+0x17e>
  40c97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c97e:	7a9b      	ldrb	r3, [r3, #10]
  40c980:	b90b      	cbnz	r3, 40c986 <lv_draw_map+0x17e>
  40c982:	9b08      	ldr	r3, [sp, #32]
  40c984:	bb33      	cbnz	r3, 40c9d4 <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c986:	4640      	mov	r0, r8
  40c988:	4b55      	ldr	r3, [pc, #340]	; (40cae0 <lv_draw_map+0x2d8>)
  40c98a:	4798      	blx	r3
  40c98c:	4604      	mov	r4, r0
  40c98e:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c990:	a83a      	add	r0, sp, #232	; 0xe8
  40c992:	4b54      	ldr	r3, [pc, #336]	; (40cae4 <lv_draw_map+0x2dc>)
  40c994:	4798      	blx	r3
  40c996:	4284      	cmp	r4, r0
  40c998:	f080 80ac 	bcs.w	40caf4 <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c99c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40c99e:	0078      	lsls	r0, r7, #1
  40c9a0:	4c51      	ldr	r4, [pc, #324]	; (40cae8 <lv_draw_map+0x2e0>)
  40c9a2:	47a0      	blx	r4
  40c9a4:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c9a6:	4638      	mov	r0, r7
  40c9a8:	47a0      	blx	r4
  40c9aa:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40c9ac:	214c      	movs	r1, #76	; 0x4c
  40c9ae:	a827      	add	r0, sp, #156	; 0x9c
  40c9b0:	4b4e      	ldr	r3, [pc, #312]	; (40caec <lv_draw_map+0x2e4>)
  40c9b2:	4798      	blx	r3
            if(transform) {
  40c9b4:	9b06      	ldr	r3, [sp, #24]
  40c9b6:	2b00      	cmp	r3, #0
  40c9b8:	f000 80ca 	beq.w	40cb50 <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c9bc:	9b08      	ldr	r3, [sp, #32]
  40c9be:	2b00      	cmp	r3, #0
  40c9c0:	f040 809d 	bne.w	40cafe <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c9c6:	2b00      	cmp	r3, #0
  40c9c8:	f040 80f3 	bne.w	40cbb2 <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40c9cc:	2204      	movs	r2, #4
  40c9ce:	e097      	b.n	40cb00 <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c9d0:	2300      	movs	r3, #0
  40c9d2:	e7c7      	b.n	40c964 <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c9d4:	4640      	mov	r0, r8
  40c9d6:	4b42      	ldr	r3, [pc, #264]	; (40cae0 <lv_draw_map+0x2d8>)
  40c9d8:	4798      	blx	r3
  40c9da:	4604      	mov	r4, r0
  40c9dc:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c9de:	a83a      	add	r0, sp, #232	; 0xe8
  40c9e0:	4b40      	ldr	r3, [pc, #256]	; (40cae4 <lv_draw_map+0x2dc>)
  40c9e2:	4798      	blx	r3
  40c9e4:	4284      	cmp	r4, r0
  40c9e6:	d20e      	bcs.n	40ca06 <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c9e8:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40c9ec:	4c3e      	ldr	r4, [pc, #248]	; (40cae8 <lv_draw_map+0x2e0>)
  40c9ee:	47a0      	blx	r4
  40c9f0:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c9f2:	4640      	mov	r0, r8
  40c9f4:	47a0      	blx	r4
  40c9f6:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40c9f8:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40c9fa:	4632      	mov	r2, r6
  40c9fc:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40ca00:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40ca04:	e02b      	b.n	40ca5e <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40ca06:	a83a      	add	r0, sp, #232	; 0xe8
  40ca08:	4b36      	ldr	r3, [pc, #216]	; (40cae4 <lv_draw_map+0x2dc>)
  40ca0a:	4798      	blx	r3
  40ca0c:	4680      	mov	r8, r0
  40ca0e:	e7eb      	b.n	40c9e8 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40ca10:	3101      	adds	r1, #1
  40ca12:	443b      	add	r3, r7
  40ca14:	3201      	adds	r2, #1
  40ca16:	4549      	cmp	r1, r9
  40ca18:	da0b      	bge.n	40ca32 <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40ca1a:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40ca1c:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40ca1e:	2800      	cmp	r0, #0
  40ca20:	d0f6      	beq.n	40ca10 <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40ca22:	7818      	ldrb	r0, [r3, #0]
  40ca24:	f893 e001 	ldrb.w	lr, [r3, #1]
  40ca28:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40ca2c:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40ca30:	e7ee      	b.n	40ca10 <lv_draw_map+0x208>
  40ca32:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40ca34:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40ca36:	991a      	ldr	r1, [sp, #104]	; 0x68
  40ca38:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ca3c:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40ca40:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40ca44:	1a5b      	subs	r3, r3, r1
  40ca46:	b29b      	uxth	r3, r3
  40ca48:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40ca4a:	fa02 f383 	sxtah	r3, r2, r3
  40ca4e:	4598      	cmp	r8, r3
  40ca50:	d90b      	bls.n	40ca6a <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40ca52:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40ca56:	3301      	adds	r3, #1
  40ca58:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40ca5c:	3601      	adds	r6, #1
  40ca5e:	455e      	cmp	r6, fp
  40ca60:	da1a      	bge.n	40ca98 <lv_draw_map+0x290>
  40ca62:	4653      	mov	r3, sl
  40ca64:	2100      	movs	r1, #0
  40ca66:	9f07      	ldr	r7, [sp, #28]
  40ca68:	e7d5      	b.n	40ca16 <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40ca6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ca6c:	7b93      	ldrb	r3, [r2, #14]
  40ca6e:	9302      	str	r3, [sp, #8]
  40ca70:	7813      	ldrb	r3, [r2, #0]
  40ca72:	9301      	str	r3, [sp, #4]
  40ca74:	2302      	movs	r3, #2
  40ca76:	9300      	str	r3, [sp, #0]
  40ca78:	4623      	mov	r3, r4
  40ca7a:	462a      	mov	r2, r5
  40ca7c:	a925      	add	r1, sp, #148	; 0x94
  40ca7e:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40ca80:	4f16      	ldr	r7, [pc, #88]	; (40cadc <lv_draw_map+0x2d4>)
  40ca82:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40ca84:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40ca88:	3301      	adds	r3, #1
  40ca8a:	b21b      	sxth	r3, r3
  40ca8c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40ca90:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40ca94:	2200      	movs	r2, #0
  40ca96:	e7e1      	b.n	40ca5c <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40ca98:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40ca9c:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40caa0:	429a      	cmp	r2, r3
  40caa2:	d00f      	beq.n	40cac4 <lv_draw_map+0x2bc>
                blend_area.y2--;
  40caa4:	3b01      	subs	r3, #1
  40caa6:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40caaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40caac:	7b93      	ldrb	r3, [r2, #14]
  40caae:	9302      	str	r3, [sp, #8]
  40cab0:	7813      	ldrb	r3, [r2, #0]
  40cab2:	9301      	str	r3, [sp, #4]
  40cab4:	2302      	movs	r3, #2
  40cab6:	9300      	str	r3, [sp, #0]
  40cab8:	4623      	mov	r3, r4
  40caba:	462a      	mov	r2, r5
  40cabc:	a925      	add	r1, sp, #148	; 0x94
  40cabe:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cac0:	4e06      	ldr	r6, [pc, #24]	; (40cadc <lv_draw_map+0x2d4>)
  40cac2:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40cac4:	4620      	mov	r0, r4
  40cac6:	4c0a      	ldr	r4, [pc, #40]	; (40caf0 <lv_draw_map+0x2e8>)
  40cac8:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40caca:	4628      	mov	r0, r5
  40cacc:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40cace:	e2ae      	b.n	40d02e <lv_draw_map+0x826>
  40cad0:	00409531 	.word	0x00409531
  40cad4:	004149fd 	.word	0x004149fd
  40cad8:	0040f8ed 	.word	0x0040f8ed
  40cadc:	0040c6e9 	.word	0x0040c6e9
  40cae0:	004148f9 	.word	0x004148f9
  40cae4:	0041519f 	.word	0x0041519f
  40cae8:	00416531 	.word	0x00416531
  40caec:	004166bd 	.word	0x004166bd
  40caf0:	004162e1 	.word	0x004162e1
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40caf4:	a83a      	add	r0, sp, #232	; 0xe8
  40caf6:	4bb6      	ldr	r3, [pc, #728]	; (40cdd0 <lv_draw_map+0x5c8>)
  40caf8:	4798      	blx	r3
  40cafa:	9017      	str	r0, [sp, #92]	; 0x5c
  40cafc:	e74e      	b.n	40c99c <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40cafe:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40cb00:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cb02:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40cb06:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40cb0a:	8903      	ldrh	r3, [r0, #8]
  40cb0c:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40cb10:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40cb12:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cb16:	9916      	ldr	r1, [sp, #88]	; 0x58
  40cb18:	88cb      	ldrh	r3, [r1, #6]
  40cb1a:	8849      	ldrh	r1, [r1, #2]
  40cb1c:	1a5b      	subs	r3, r3, r1
  40cb1e:	b29b      	uxth	r3, r3
  40cb20:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40cb22:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40cb26:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40cb2a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40cb2e:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40cb32:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40cb36:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40cb3a:	8983      	ldrh	r3, [r0, #12]
  40cb3c:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40cb40:	7bc3      	ldrb	r3, [r0, #15]
  40cb42:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40cb46:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40cb4a:	a827      	add	r0, sp, #156	; 0x9c
  40cb4c:	4ba1      	ldr	r3, [pc, #644]	; (40cdd4 <lv_draw_map+0x5cc>)
  40cb4e:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40cb50:	2300      	movs	r3, #0
  40cb52:	9323      	str	r3, [sp, #140]	; 0x8c
  40cb54:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40cb58:	990a      	ldr	r1, [sp, #40]	; 0x28
  40cb5a:	7a8a      	ldrb	r2, [r1, #10]
  40cb5c:	43d3      	mvns	r3, r2
  40cb5e:	b2db      	uxtb	r3, r3
  40cb60:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40cb62:	b1ba      	cbz	r2, 40cb94 <lv_draw_map+0x38c>
  40cb64:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40cb66:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40cb6a:	b292      	uxth	r2, r2
  40cb6c:	fb01 f102 	mul.w	r1, r1, r2
  40cb70:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40cb74:	f003 0007 	and.w	r0, r3, #7
  40cb78:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40cb7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40cb80:	fb12 f101 	smulbb	r1, r2, r1
  40cb84:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40cb88:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40cb8c:	fb02 f203 	mul.w	r2, r2, r3
  40cb90:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cb94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cb96:	9a08      	ldr	r2, [sp, #32]
  40cb98:	4313      	orrs	r3, r2
  40cb9a:	9321      	str	r3, [sp, #132]	; 0x84
  40cb9c:	d10b      	bne.n	40cbb6 <lv_draw_map+0x3ae>
  40cb9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cba0:	8853      	ldrh	r3, [r2, #2]
  40cba2:	b9f3      	cbnz	r3, 40cbe2 <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40cba4:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cbaa:	d01d      	beq.n	40cbe8 <lv_draw_map+0x3e0>
  40cbac:	2302      	movs	r3, #2
  40cbae:	931b      	str	r3, [sp, #108]	; 0x6c
  40cbb0:	e003      	b.n	40cbba <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40cbb2:	2206      	movs	r2, #6
  40cbb4:	e7a4      	b.n	40cb00 <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cbb6:	2302      	movs	r3, #2
  40cbb8:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40cbba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cbbc:	b9bb      	cbnz	r3, 40cbee <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40cbbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cbc0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40cbc4:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40cbc8:	4413      	add	r3, r2
  40cbca:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40cbcc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40cbd0:	1a9b      	subs	r3, r3, r2
  40cbd2:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40cbd4:	2300      	movs	r3, #0
  40cbd6:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40cbd8:	9313      	str	r3, [sp, #76]	; 0x4c
  40cbda:	4657      	mov	r7, sl
  40cbdc:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40cbe0:	e192      	b.n	40cf08 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cbe2:	2302      	movs	r3, #2
  40cbe4:	931b      	str	r3, [sp, #108]	; 0x6c
  40cbe6:	e7e8      	b.n	40cbba <lv_draw_map+0x3b2>
  40cbe8:	2301      	movs	r3, #1
  40cbea:	931b      	str	r3, [sp, #108]	; 0x6c
  40cbec:	e7e5      	b.n	40cbba <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40cbee:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40cbf0:	4650      	mov	r0, sl
  40cbf2:	4b79      	ldr	r3, [pc, #484]	; (40cdd8 <lv_draw_map+0x5d0>)
  40cbf4:	4798      	blx	r3
  40cbf6:	e7e2      	b.n	40cbbe <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40cbf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cbfa:	4443      	add	r3, r8
  40cbfc:	b21b      	sxth	r3, r3
  40cbfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40cc00:	990c      	ldr	r1, [sp, #48]	; 0x30
  40cc02:	440a      	add	r2, r1
  40cc04:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40cc06:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40cc08:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40cc0c:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40cc0e:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40cc12:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40cc14:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40cc18:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40cc1c:	d035      	beq.n	40cc8a <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40cc1e:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40cc22:	2800      	cmp	r0, #0
  40cc24:	d143      	bne.n	40ccae <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cc26:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40cc28:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40cc2c:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40cc30:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40cc32:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40cc36:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40cc38:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40cc3c:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40cc3e:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40cc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cc42:	121b      	asrs	r3, r3, #8
  40cc44:	461c      	mov	r4, r3
  40cc46:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40cc48:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40cc4c:	429d      	cmp	r5, r3
  40cc4e:	f280 80b3 	bge.w	40cdb8 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40cc52:	2d00      	cmp	r5, #0
  40cc54:	f2c0 80b6 	blt.w	40cdc4 <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40cc58:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40cc5c:	4294      	cmp	r4, r2
  40cc5e:	f280 80b3 	bge.w	40cdc8 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40cc62:	2c00      	cmp	r4, #0
  40cc64:	f2c0 80b2 	blt.w	40cdcc <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40cc68:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40cc6c:	f012 0f04 	tst.w	r2, #4
  40cc70:	d075      	beq.n	40cd5e <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40cc72:	f012 0f02 	tst.w	r2, #2
  40cc76:	d157      	bne.n	40cd28 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40cc78:	fb03 5304 	mla	r3, r3, r4, r5
  40cc7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40cc80:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40cc82:	aa2c      	add	r2, sp, #176	; 0xb0
  40cc84:	2302      	movs	r3, #2
  40cc86:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cc88:	e02f      	b.n	40ccea <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40cc8a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40cc8c:	fb05 f603 	mul.w	r6, r5, r3
  40cc90:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40cc92:	fb04 6612 	mls	r6, r4, r2, r6
  40cc96:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40cc98:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40cc9c:	fb05 f202 	mul.w	r2, r5, r2
  40cca0:	fb04 2403 	mla	r4, r4, r3, r2
  40cca4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40cca6:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40ccaa:	9309      	str	r3, [sp, #36]	; 0x24
  40ccac:	e7c7      	b.n	40cc3e <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40ccae:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40ccb0:	fb03 f304 	mul.w	r3, r3, r4
  40ccb4:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40ccb6:	fb02 f204 	mul.w	r2, r2, r4
  40ccba:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40ccbc:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40ccbe:	fb04 f603 	mul.w	r6, r4, r3
  40ccc2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40ccc4:	fb05 6612 	mls	r6, r5, r2, r6
  40ccc8:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40ccca:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40ccce:	fb04 f402 	mul.w	r4, r4, r2
  40ccd2:	fb05 4303 	mla	r3, r5, r3, r4
  40ccd6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40ccd8:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40ccdc:	9309      	str	r3, [sp, #36]	; 0x24
  40ccde:	e7ae      	b.n	40cc3e <lv_draw_map+0x436>
        *d8 = *s8;
  40cce0:	f811 0b01 	ldrb.w	r0, [r1], #1
  40cce4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40cce8:	3b01      	subs	r3, #1
    while(len) {
  40ccea:	2b00      	cmp	r3, #0
  40ccec:	d1f8      	bne.n	40cce0 <lv_draw_map+0x4d8>
  40ccee:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40ccf0:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40ccf2:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40ccf6:	f013 0f01 	tst.w	r3, #1
  40ccfa:	d00f      	beq.n	40cd1c <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40ccfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40ccfe:	f043 0307 	orr.w	r3, r3, #7
  40cd02:	f36f 03c7 	bfc	r3, #3, #5
  40cd06:	f36f 230c 	bfc	r3, #8, #5
  40cd0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40cd0e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40cd12:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40cd16:	b29b      	uxth	r3, r3
  40cd18:	4299      	cmp	r1, r3
  40cd1a:	d037      	beq.n	40cd8c <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40cd1c:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40cd20:	2b00      	cmp	r3, #0
  40cd22:	d135      	bne.n	40cd90 <lv_draw_map+0x588>
  40cd24:	9806      	ldr	r0, [sp, #24]
  40cd26:	e048      	b.n	40cdba <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40cd28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cd2a:	fb03 5302 	mla	r3, r3, r2, r5
  40cd2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40cd32:	931e      	str	r3, [sp, #120]	; 0x78
  40cd34:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40cd36:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40cd38:	a82c      	add	r0, sp, #176	; 0xb0
  40cd3a:	2202      	movs	r2, #2
  40cd3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cd3e:	e004      	b.n	40cd4a <lv_draw_map+0x542>
        *d8 = *s8;
  40cd40:	f813 eb01 	ldrb.w	lr, [r3], #1
  40cd44:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40cd48:	3a01      	subs	r2, #1
    while(len) {
  40cd4a:	2a00      	cmp	r2, #0
  40cd4c:	d1f8      	bne.n	40cd40 <lv_draw_map+0x538>
  40cd4e:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40cd50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40cd52:	4419      	add	r1, r3
  40cd54:	788b      	ldrb	r3, [r1, #2]
  40cd56:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40cd5a:	2203      	movs	r2, #3
  40cd5c:	e7c9      	b.n	40ccf2 <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40cd5e:	b229      	sxth	r1, r5
  40cd60:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40cd64:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40cd68:	9220      	str	r2, [sp, #128]	; 0x80
  40cd6a:	911e      	str	r1, [sp, #120]	; 0x78
  40cd6c:	a82d      	add	r0, sp, #180	; 0xb4
  40cd6e:	4c1b      	ldr	r4, [pc, #108]	; (40cddc <lv_draw_map+0x5d4>)
  40cd70:	47a0      	blx	r4
  40cd72:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40cd76:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40cd78:	991e      	ldr	r1, [sp, #120]	; 0x78
  40cd7a:	a82d      	add	r0, sp, #180	; 0xb4
  40cd7c:	4b18      	ldr	r3, [pc, #96]	; (40cde0 <lv_draw_map+0x5d8>)
  40cd7e:	4798      	blx	r3
  40cd80:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40cd84:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40cd88:	4662      	mov	r2, ip
  40cd8a:	e7b2      	b.n	40ccf2 <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40cd8c:	2000      	movs	r0, #0
  40cd8e:	e014      	b.n	40cdba <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40cd90:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40cd94:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40cd98:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40cd9c:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40cda0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40cda4:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40cda8:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40cdac:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40cdb0:	a827      	add	r0, sp, #156	; 0x9c
  40cdb2:	4b0c      	ldr	r3, [pc, #48]	; (40cde4 <lv_draw_map+0x5dc>)
  40cdb4:	4798      	blx	r3
  40cdb6:	e000      	b.n	40cdba <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40cdb8:	2000      	movs	r0, #0
                        if(ret == false) {
  40cdba:	b9b8      	cbnz	r0, 40cdec <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40cdbc:	2300      	movs	r3, #0
  40cdbe:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40cdc2:	e068      	b.n	40ce96 <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40cdc4:	2000      	movs	r0, #0
  40cdc6:	e7f8      	b.n	40cdba <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40cdc8:	2000      	movs	r0, #0
  40cdca:	e7f6      	b.n	40cdba <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40cdcc:	2000      	movs	r0, #0
  40cdce:	e7f4      	b.n	40cdba <lv_draw_map+0x5b2>
  40cdd0:	0041519f 	.word	0x0041519f
  40cdd4:	00412349 	.word	0x00412349
  40cdd8:	00416715 	.word	0x00416715
  40cddc:	00412129 	.word	0x00412129
  40cde0:	0041224d 	.word	0x0041224d
  40cde4:	0041265d 	.word	0x0041265d
  40cde8:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40cdec:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40cdf0:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40cdf4:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40cdf8:	e010      	b.n	40ce1c <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40cdfa:	23ff      	movs	r3, #255	; 0xff
  40cdfc:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40ce00:	f89a 2000 	ldrb.w	r2, [sl]
  40ce04:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40ce08:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40ce0c:	b292      	uxth	r2, r2
  40ce0e:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40ce10:	990d      	ldr	r1, [sp, #52]	; 0x34
  40ce12:	b119      	cbz	r1, 40ce1c <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40ce14:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40cde8 <lv_draw_map+0x5e0>
  40ce18:	428a      	cmp	r2, r1
  40ce1a:	d053      	beq.n	40cec4 <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40ce1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ce1e:	7a92      	ldrb	r2, [r2, #10]
  40ce20:	b3b2      	cbz	r2, 40ce90 <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40ce22:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40ce26:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40ce2a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40ce2c:	fb04 1202 	mla	r2, r4, r2, r1
  40ce30:	3280      	adds	r2, #128	; 0x80
  40ce32:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40ce36:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40ce3a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40ce3e:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40ce42:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40ce46:	f003 0007 	and.w	r0, r3, #7
  40ce4a:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40ce4e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40ce52:	fb02 1204 	mla	r2, r2, r4, r1
  40ce56:	3280      	adds	r2, #128	; 0x80
  40ce58:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40ce5c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40ce60:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40ce64:	f361 0b02 	bfi	fp, r1, #0, #3
  40ce68:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40ce6c:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40ce70:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40ce74:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40ce78:	fb03 2304 	mla	r3, r3, r4, r2
  40ce7c:	3380      	adds	r3, #128	; 0x80
  40ce7e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40ce82:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40ce86:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40ce8a:	f363 2b0c 	bfi	fp, r3, #8, #5
  40ce8e:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40ce90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ce92:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40ce96:	f108 0801 	add.w	r8, r8, #1
  40ce9a:	9b07      	ldr	r3, [sp, #28]
  40ce9c:	449a      	add	sl, r3
  40ce9e:	f109 0901 	add.w	r9, r9, #1
  40cea2:	9b05      	ldr	r3, [sp, #20]
  40cea4:	4598      	cmp	r8, r3
  40cea6:	da11      	bge.n	40cecc <lv_draw_map+0x6c4>
                    if(transform) {
  40cea8:	9b06      	ldr	r3, [sp, #24]
  40ceaa:	2b00      	cmp	r3, #0
  40ceac:	f47f aea4 	bne.w	40cbf8 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40ceb0:	9b08      	ldr	r3, [sp, #32]
  40ceb2:	2b00      	cmp	r3, #0
  40ceb4:	d0a1      	beq.n	40cdfa <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40ceb6:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40ceba:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40cebe:	2b00      	cmp	r3, #0
  40cec0:	d0e9      	beq.n	40ce96 <lv_draw_map+0x68e>
  40cec2:	e79d      	b.n	40ce00 <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40cec4:	2300      	movs	r3, #0
  40cec6:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40ceca:	e7e4      	b.n	40ce96 <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40cecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cece:	bb8b      	cbnz	r3, 40cf34 <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40ced0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40ced2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40ced4:	9911      	ldr	r1, [sp, #68]	; 0x44
  40ced6:	fb02 1303 	mla	r3, r2, r3, r1
  40ceda:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cedc:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cee0:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40cee4:	1a9b      	subs	r3, r3, r2
  40cee6:	b29b      	uxth	r3, r3
  40cee8:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40ceea:	fa09 f383 	sxtah	r3, r9, r3
  40ceee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40cef0:	429a      	cmp	r2, r3
  40cef2:	d94c      	bls.n	40cf8e <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40cef4:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cef8:	3301      	adds	r3, #1
  40cefa:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40cefe:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40cf02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cf04:	3301      	adds	r3, #1
  40cf06:	930c      	str	r3, [sp, #48]	; 0x30
  40cf08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cf0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40cf0c:	4293      	cmp	r3, r2
  40cf0e:	da72      	bge.n	40cff6 <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40cf10:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cf12:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40cf16:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40cf1a:	4413      	add	r3, r2
  40cf1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40cf1e:	f9b2 2000 	ldrsh.w	r2, [r2]
  40cf22:	1a9b      	subs	r3, r3, r2
  40cf24:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40cf26:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40cf2a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40cf2e:	f04f 0800 	mov.w	r8, #0
  40cf32:	e7b6      	b.n	40cea2 <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40cf34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40cf36:	443b      	add	r3, r7
  40cf38:	461d      	mov	r5, r3
  40cf3a:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40cf3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40cf40:	8a21      	ldrh	r1, [r4, #16]
  40cf42:	4401      	add	r1, r0
  40cf44:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40cf48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cf4a:	441a      	add	r2, r3
  40cf4c:	8a63      	ldrh	r3, [r4, #18]
  40cf4e:	fa13 f282 	uxtah	r2, r3, r2
  40cf52:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cf56:	1a1b      	subs	r3, r3, r0
  40cf58:	b29b      	uxth	r3, r3
  40cf5a:	3301      	adds	r3, #1
  40cf5c:	b21b      	sxth	r3, r3
  40cf5e:	b212      	sxth	r2, r2
  40cf60:	b209      	sxth	r1, r1
  40cf62:	4628      	mov	r0, r5
  40cf64:	4c33      	ldr	r4, [pc, #204]	; (40d034 <lv_draw_map+0x82c>)
  40cf66:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40cf68:	b118      	cbz	r0, 40cf72 <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40cf6a:	2802      	cmp	r0, #2
  40cf6c:	d1b0      	bne.n	40ced0 <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40cf6e:	901b      	str	r0, [sp, #108]	; 0x6c
  40cf70:	e7ae      	b.n	40ced0 <lv_draw_map+0x6c8>
  40cf72:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40cf76:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40cf7a:	1ac9      	subs	r1, r1, r3
  40cf7c:	b289      	uxth	r1, r1
  40cf7e:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40cf80:	b209      	sxth	r1, r1
  40cf82:	4628      	mov	r0, r5
  40cf84:	4b2c      	ldr	r3, [pc, #176]	; (40d038 <lv_draw_map+0x830>)
  40cf86:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40cf88:	2302      	movs	r3, #2
  40cf8a:	931b      	str	r3, [sp, #108]	; 0x6c
  40cf8c:	e7a0      	b.n	40ced0 <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40cf8e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40cf90:	7bab      	ldrb	r3, [r5, #14]
  40cf92:	9302      	str	r3, [sp, #8]
  40cf94:	782b      	ldrb	r3, [r5, #0]
  40cf96:	9301      	str	r3, [sp, #4]
  40cf98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cf9a:	9300      	str	r3, [sp, #0]
  40cf9c:	463b      	mov	r3, r7
  40cf9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cfa0:	a925      	add	r1, sp, #148	; 0x94
  40cfa2:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cfa4:	4c25      	ldr	r4, [pc, #148]	; (40d03c <lv_draw_map+0x834>)
  40cfa6:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40cfa8:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40cfac:	3301      	adds	r3, #1
  40cfae:	b21b      	sxth	r3, r3
  40cfb0:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40cfb4:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cfb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40cfba:	b943      	cbnz	r3, 40cfce <lv_draw_map+0x7c6>
  40cfbc:	886b      	ldrh	r3, [r5, #2]
  40cfbe:	b96b      	cbnz	r3, 40cfdc <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40cfc0:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cfc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cfc6:	d00c      	beq.n	40cfe2 <lv_draw_map+0x7da>
  40cfc8:	2302      	movs	r3, #2
  40cfca:	931b      	str	r3, [sp, #108]	; 0x6c
  40cfcc:	e001      	b.n	40cfd2 <lv_draw_map+0x7ca>
  40cfce:	2302      	movs	r3, #2
  40cfd0:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40cfd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cfd4:	b943      	cbnz	r3, 40cfe8 <lv_draw_map+0x7e0>
                    px_i = 0;
  40cfd6:	2300      	movs	r3, #0
  40cfd8:	9313      	str	r3, [sp, #76]	; 0x4c
  40cfda:	e792      	b.n	40cf02 <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cfdc:	2302      	movs	r3, #2
  40cfde:	931b      	str	r3, [sp, #108]	; 0x6c
  40cfe0:	e7f7      	b.n	40cfd2 <lv_draw_map+0x7ca>
  40cfe2:	2301      	movs	r3, #1
  40cfe4:	931b      	str	r3, [sp, #108]	; 0x6c
  40cfe6:	e7f4      	b.n	40cfd2 <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40cfe8:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40cfea:	4638      	mov	r0, r7
  40cfec:	4b14      	ldr	r3, [pc, #80]	; (40d040 <lv_draw_map+0x838>)
  40cfee:	4798      	blx	r3
                    px_i = 0;
  40cff0:	2300      	movs	r3, #0
  40cff2:	9313      	str	r3, [sp, #76]	; 0x4c
  40cff4:	e785      	b.n	40cf02 <lv_draw_map+0x6fa>
  40cff6:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40cff8:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40cffc:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40d000:	429a      	cmp	r2, r3
  40d002:	d00f      	beq.n	40d024 <lv_draw_map+0x81c>
                blend_area.y2--;
  40d004:	3b01      	subs	r3, #1
  40d006:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40d00a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d00c:	7b93      	ldrb	r3, [r2, #14]
  40d00e:	9302      	str	r3, [sp, #8]
  40d010:	7813      	ldrb	r3, [r2, #0]
  40d012:	9301      	str	r3, [sp, #4]
  40d014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40d016:	9300      	str	r3, [sp, #0]
  40d018:	463b      	mov	r3, r7
  40d01a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d01c:	a925      	add	r1, sp, #148	; 0x94
  40d01e:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40d020:	4c06      	ldr	r4, [pc, #24]	; (40d03c <lv_draw_map+0x834>)
  40d022:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40d024:	4650      	mov	r0, sl
  40d026:	4c07      	ldr	r4, [pc, #28]	; (40d044 <lv_draw_map+0x83c>)
  40d028:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40d02a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d02c:	47a0      	blx	r4
        }
    }
}
  40d02e:	b03d      	add	sp, #244	; 0xf4
  40d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d034:	0040f825 	.word	0x0040f825
  40d038:	004166bd 	.word	0x004166bd
  40d03c:	0040c6e9 	.word	0x0040c6e9
  40d040:	00416715 	.word	0x00416715
  40d044:	004162e1 	.word	0x004162e1

0040d048 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40d048:	b570      	push	{r4, r5, r6, lr}
  40d04a:	b0a0      	sub	sp, #128	; 0x80
  40d04c:	4604      	mov	r4, r0
  40d04e:	460d      	mov	r5, r1
  40d050:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40d052:	a80b      	add	r0, sp, #44	; 0x2c
  40d054:	4b0b      	ldr	r3, [pc, #44]	; (40d084 <show_error+0x3c>)
  40d056:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40d058:	4b0b      	ldr	r3, [pc, #44]	; (40d088 <show_error+0x40>)
  40d05a:	881b      	ldrh	r3, [r3, #0]
  40d05c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40d060:	aa0b      	add	r2, sp, #44	; 0x2c
  40d062:	4629      	mov	r1, r5
  40d064:	4620      	mov	r0, r4
  40d066:	4b09      	ldr	r3, [pc, #36]	; (40d08c <show_error+0x44>)
  40d068:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40d06a:	a802      	add	r0, sp, #8
  40d06c:	4b08      	ldr	r3, [pc, #32]	; (40d090 <show_error+0x48>)
  40d06e:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40d070:	2300      	movs	r3, #0
  40d072:	9300      	str	r3, [sp, #0]
  40d074:	4633      	mov	r3, r6
  40d076:	aa02      	add	r2, sp, #8
  40d078:	4629      	mov	r1, r5
  40d07a:	4620      	mov	r0, r4
  40d07c:	4c05      	ldr	r4, [pc, #20]	; (40d094 <show_error+0x4c>)
  40d07e:	47a0      	blx	r4
}
  40d080:	b020      	add	sp, #128	; 0x80
  40d082:	bd70      	pop	{r4, r5, r6, pc}
  40d084:	00412065 	.word	0x00412065
  40d088:	00428cc0 	.word	0x00428cc0
  40d08c:	004120b1 	.word	0x004120b1
  40d090:	0040dc2d 	.word	0x0040dc2d
  40d094:	0040dc75 	.word	0x0040dc75

0040d098 <lv_draw_img_dsc_init>:
{
  40d098:	b510      	push	{r4, lr}
  40d09a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40d09c:	2110      	movs	r1, #16
  40d09e:	4b07      	ldr	r3, [pc, #28]	; (40d0bc <lv_draw_img_dsc_init+0x24>)
  40d0a0:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40d0a2:	2300      	movs	r3, #0
  40d0a4:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40d0a6:	23ff      	movs	r3, #255	; 0xff
  40d0a8:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40d0aa:	f44f 7380 	mov.w	r3, #256	; 0x100
  40d0ae:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40d0b0:	7be3      	ldrb	r3, [r4, #15]
  40d0b2:	f043 0301 	orr.w	r3, r3, #1
  40d0b6:	73e3      	strb	r3, [r4, #15]
  40d0b8:	bd10      	pop	{r4, pc}
  40d0ba:	bf00      	nop
  40d0bc:	004166bd 	.word	0x004166bd

0040d0c0 <lv_img_cf_get_px_size>:
    switch(cf) {
  40d0c0:	3804      	subs	r0, #4
  40d0c2:	280a      	cmp	r0, #10
  40d0c4:	d807      	bhi.n	40d0d6 <lv_img_cf_get_px_size+0x16>
  40d0c6:	e8df f000 	tbb	[pc, r0]
  40d0ca:	0812      	.short	0x0812
  40d0cc:	0e0c0a12 	.word	0x0e0c0a12
  40d0d0:	0e0c0a10 	.word	0x0e0c0a10
  40d0d4:	10          	.byte	0x10
  40d0d5:	00          	.byte	0x00
            px_size = 0;
  40d0d6:	2000      	movs	r0, #0
  40d0d8:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40d0da:	2018      	movs	r0, #24
            break;
  40d0dc:	4770      	bx	lr
            px_size = 1;
  40d0de:	2001      	movs	r0, #1
            break;
  40d0e0:	4770      	bx	lr
            px_size = 2;
  40d0e2:	2002      	movs	r0, #2
            break;
  40d0e4:	4770      	bx	lr
            px_size = 4;
  40d0e6:	2004      	movs	r0, #4
            break;
  40d0e8:	4770      	bx	lr
            px_size = 8;
  40d0ea:	2008      	movs	r0, #8
            break;
  40d0ec:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40d0ee:	2010      	movs	r0, #16
}
  40d0f0:	4770      	bx	lr

0040d0f2 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40d0f2:	2803      	cmp	r0, #3
  40d0f4:	d005      	beq.n	40d102 <lv_img_cf_is_chroma_keyed+0x10>
  40d0f6:	d302      	bcc.n	40d0fe <lv_img_cf_is_chroma_keyed+0xc>
  40d0f8:	3806      	subs	r0, #6
  40d0fa:	2804      	cmp	r0, #4
  40d0fc:	d901      	bls.n	40d102 <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40d0fe:	2000      	movs	r0, #0
}
  40d100:	4770      	bx	lr
            is_chroma_keyed = true;
  40d102:	2001      	movs	r0, #1
  40d104:	4770      	bx	lr

0040d106 <lv_img_cf_has_alpha>:
    switch(cf) {
  40d106:	3802      	subs	r0, #2
  40d108:	280c      	cmp	r0, #12
  40d10a:	d80a      	bhi.n	40d122 <lv_img_cf_has_alpha+0x1c>
  40d10c:	e8df f000 	tbb	[pc, r0]
  40d110:	07090907 	.word	0x07090907
  40d114:	07070709 	.word	0x07070709
  40d118:	07070707 	.word	0x07070707
  40d11c:	07          	.byte	0x07
  40d11d:	00          	.byte	0x00
            has_alpha = true;
  40d11e:	2001      	movs	r0, #1
  40d120:	4770      	bx	lr
            has_alpha = false;
  40d122:	2000      	movs	r0, #0
}
  40d124:	4770      	bx	lr
	...

0040d128 <lv_img_draw_core>:
{
  40d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d12c:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40d12e:	781c      	ldrb	r4, [r3, #0]
  40d130:	2c02      	cmp	r4, #2
  40d132:	d803      	bhi.n	40d13c <lv_img_draw_core+0x14>
  40d134:	2001      	movs	r0, #1
}
  40d136:	b00f      	add	sp, #60	; 0x3c
  40d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d13c:	461c      	mov	r4, r3
  40d13e:	460d      	mov	r5, r1
  40d140:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40d142:	8999      	ldrh	r1, [r3, #12]
  40d144:	4610      	mov	r0, r2
  40d146:	4b73      	ldr	r3, [pc, #460]	; (40d314 <lv_img_draw_core+0x1ec>)
  40d148:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40d14a:	4606      	mov	r6, r0
  40d14c:	2800      	cmp	r0, #0
  40d14e:	f000 80de 	beq.w	40d30e <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40d152:	f890 800c 	ldrb.w	r8, [r0, #12]
  40d156:	f008 081f 	and.w	r8, r8, #31
  40d15a:	4640      	mov	r0, r8
  40d15c:	4b6e      	ldr	r3, [pc, #440]	; (40d318 <lv_img_draw_core+0x1f0>)
  40d15e:	4798      	blx	r3
  40d160:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40d162:	4640      	mov	r0, r8
  40d164:	4b6d      	ldr	r3, [pc, #436]	; (40d31c <lv_img_draw_core+0x1f4>)
  40d166:	4798      	blx	r3
  40d168:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40d16a:	69b2      	ldr	r2, [r6, #24]
  40d16c:	b12a      	cbz	r2, 40d17a <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40d16e:	4629      	mov	r1, r5
  40d170:	4650      	mov	r0, sl
  40d172:	4b6b      	ldr	r3, [pc, #428]	; (40d320 <lv_img_draw_core+0x1f8>)
  40d174:	4798      	blx	r3
    return LV_RES_OK;
  40d176:	2001      	movs	r0, #1
  40d178:	e7dd      	b.n	40d136 <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40d17a:	6933      	ldr	r3, [r6, #16]
  40d17c:	2b00      	cmp	r3, #0
  40d17e:	d053      	beq.n	40d228 <lv_img_draw_core+0x100>
  40d180:	4651      	mov	r1, sl
  40d182:	aa0a      	add	r2, sp, #40	; 0x28
  40d184:	2308      	movs	r3, #8
  40d186:	e004      	b.n	40d192 <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40d188:	f811 0b01 	ldrb.w	r0, [r1], #1
  40d18c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40d190:	3b01      	subs	r3, #1
    while(len) {
  40d192:	2b00      	cmp	r3, #0
  40d194:	d1f8      	bne.n	40d188 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40d196:	8863      	ldrh	r3, [r4, #2]
  40d198:	b91b      	cbnz	r3, 40d1a2 <lv_img_draw_core+0x7a>
  40d19a:	8922      	ldrh	r2, [r4, #8]
  40d19c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40d1a0:	d030      	beq.n	40d204 <lv_img_draw_core+0xdc>
  40d1a2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40d1a6:	f8ba 2000 	ldrh.w	r2, [sl]
  40d1aa:	1a89      	subs	r1, r1, r2
  40d1ac:	b289      	uxth	r1, r1
  40d1ae:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40d1b0:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40d1b4:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40d1b8:	1a12      	subs	r2, r2, r0
  40d1ba:	b292      	uxth	r2, r2
  40d1bc:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40d1be:	1d20      	adds	r0, r4, #4
  40d1c0:	9001      	str	r0, [sp, #4]
  40d1c2:	8920      	ldrh	r0, [r4, #8]
  40d1c4:	9000      	str	r0, [sp, #0]
  40d1c6:	b21b      	sxth	r3, r3
  40d1c8:	b212      	sxth	r2, r2
  40d1ca:	b209      	sxth	r1, r1
  40d1cc:	a80a      	add	r0, sp, #40	; 0x28
  40d1ce:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40d340 <lv_img_draw_core+0x218>
  40d1d2:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40d1d4:	f8ba 2000 	ldrh.w	r2, [sl]
  40d1d8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40d1dc:	4413      	add	r3, r2
  40d1de:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40d1e2:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40d1e6:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40d1ea:	4419      	add	r1, r3
  40d1ec:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40d1f0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40d1f4:	440a      	add	r2, r1
  40d1f6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40d1fa:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40d1fe:	4413      	add	r3, r2
  40d200:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40d204:	aa0a      	add	r2, sp, #40	; 0x28
  40d206:	4629      	mov	r1, r5
  40d208:	a80c      	add	r0, sp, #48	; 0x30
  40d20a:	4b46      	ldr	r3, [pc, #280]	; (40d324 <lv_img_draw_core+0x1fc>)
  40d20c:	4798      	blx	r3
        if(union_ok == false) {
  40d20e:	b908      	cbnz	r0, 40d214 <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40d210:	2001      	movs	r0, #1
  40d212:	e790      	b.n	40d136 <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40d214:	6932      	ldr	r2, [r6, #16]
  40d216:	f8cd 8004 	str.w	r8, [sp, #4]
  40d21a:	9700      	str	r7, [sp, #0]
  40d21c:	4623      	mov	r3, r4
  40d21e:	a90c      	add	r1, sp, #48	; 0x30
  40d220:	4650      	mov	r0, sl
  40d222:	4c41      	ldr	r4, [pc, #260]	; (40d328 <lv_img_draw_core+0x200>)
  40d224:	47a0      	blx	r4
  40d226:	e7a6      	b.n	40d176 <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40d228:	4652      	mov	r2, sl
  40d22a:	4629      	mov	r1, r5
  40d22c:	a808      	add	r0, sp, #32
  40d22e:	4b3d      	ldr	r3, [pc, #244]	; (40d324 <lv_img_draw_core+0x1fc>)
  40d230:	4798      	blx	r3
        if(union_ok == false) {
  40d232:	b908      	cbnz	r0, 40d238 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40d234:	2001      	movs	r0, #1
  40d236:	e77e      	b.n	40d136 <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40d238:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40d23c:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40d240:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40d244:	1a9b      	subs	r3, r3, r2
  40d246:	b29b      	uxth	r3, r3
  40d248:	3301      	adds	r3, #1
  40d24a:	b21b      	sxth	r3, r3
  40d24c:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40d24e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40d252:	4b36      	ldr	r3, [pc, #216]	; (40d32c <lv_img_draw_core+0x204>)
  40d254:	4798      	blx	r3
  40d256:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40d258:	aa0a      	add	r2, sp, #40	; 0x28
  40d25a:	2308      	movs	r3, #8
  40d25c:	e004      	b.n	40d268 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40d25e:	f819 1b01 	ldrb.w	r1, [r9], #1
  40d262:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40d266:	3b01      	subs	r3, #1
    while(len) {
  40d268:	2b00      	cmp	r3, #0
  40d26a:	d1f8      	bne.n	40d25e <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40d26c:	2101      	movs	r1, #1
  40d26e:	a80a      	add	r0, sp, #40	; 0x28
  40d270:	4b2f      	ldr	r3, [pc, #188]	; (40d330 <lv_img_draw_core+0x208>)
  40d272:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40d274:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40d278:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40d27c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40d280:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40d284:	eba9 0a0a 	sub.w	sl, r9, sl
  40d288:	9604      	str	r6, [sp, #16]
  40d28a:	9e07      	ldr	r6, [sp, #28]
  40d28c:	469b      	mov	fp, r3
  40d28e:	9502      	str	r5, [sp, #8]
  40d290:	4615      	mov	r5, r2
  40d292:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40d294:	e009      	b.n	40d2aa <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40d296:	9805      	ldr	r0, [sp, #20]
  40d298:	4b26      	ldr	r3, [pc, #152]	; (40d334 <lv_img_draw_core+0x20c>)
  40d29a:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40d29c:	9807      	ldr	r0, [sp, #28]
  40d29e:	4b26      	ldr	r3, [pc, #152]	; (40d338 <lv_img_draw_core+0x210>)
  40d2a0:	4798      	blx	r3
                return LV_RES_INV;
  40d2a2:	2000      	movs	r0, #0
  40d2a4:	e747      	b.n	40d136 <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40d2a6:	f109 0901 	add.w	r9, r9, #1
  40d2aa:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40d2ae:	4599      	cmp	r9, r3
  40d2b0:	dc29      	bgt.n	40d306 <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40d2b2:	aa0a      	add	r2, sp, #40	; 0x28
  40d2b4:	9902      	ldr	r1, [sp, #8]
  40d2b6:	a80c      	add	r0, sp, #48	; 0x30
  40d2b8:	4b1a      	ldr	r3, [pc, #104]	; (40d324 <lv_img_draw_core+0x1fc>)
  40d2ba:	4798      	blx	r3
            if(union_ok == false) continue;
  40d2bc:	2800      	cmp	r0, #0
  40d2be:	d0f2      	beq.n	40d2a6 <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40d2c0:	9804      	ldr	r0, [sp, #16]
  40d2c2:	9005      	str	r0, [sp, #20]
  40d2c4:	ebab 0105 	sub.w	r1, fp, r5
  40d2c8:	9600      	str	r6, [sp, #0]
  40d2ca:	9b03      	ldr	r3, [sp, #12]
  40d2cc:	fa0f f28a 	sxth.w	r2, sl
  40d2d0:	b209      	sxth	r1, r1
  40d2d2:	4c1a      	ldr	r4, [pc, #104]	; (40d33c <lv_img_draw_core+0x214>)
  40d2d4:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40d2d6:	2801      	cmp	r0, #1
  40d2d8:	d1dd      	bne.n	40d296 <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40d2da:	f8cd 8004 	str.w	r8, [sp, #4]
  40d2de:	9700      	str	r7, [sp, #0]
  40d2e0:	9b06      	ldr	r3, [sp, #24]
  40d2e2:	4632      	mov	r2, r6
  40d2e4:	a90c      	add	r1, sp, #48	; 0x30
  40d2e6:	a80a      	add	r0, sp, #40	; 0x28
  40d2e8:	4c0f      	ldr	r4, [pc, #60]	; (40d328 <lv_img_draw_core+0x200>)
  40d2ea:	47a0      	blx	r4
            line.y1++;
  40d2ec:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40d2f0:	3301      	adds	r3, #1
  40d2f2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40d2f6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40d2fa:	3301      	adds	r3, #1
  40d2fc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40d300:	f10a 0a01 	add.w	sl, sl, #1
  40d304:	e7cf      	b.n	40d2a6 <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40d306:	9807      	ldr	r0, [sp, #28]
  40d308:	4b0b      	ldr	r3, [pc, #44]	; (40d338 <lv_img_draw_core+0x210>)
  40d30a:	4798      	blx	r3
  40d30c:	e733      	b.n	40d176 <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40d30e:	2000      	movs	r0, #0
  40d310:	e711      	b.n	40d136 <lv_img_draw_core+0xe>
  40d312:	bf00      	nop
  40d314:	00412ae9 	.word	0x00412ae9
  40d318:	0040d0f3 	.word	0x0040d0f3
  40d31c:	0040d107 	.word	0x0040d107
  40d320:	0040d049 	.word	0x0040d049
  40d324:	004151bb 	.word	0x004151bb
  40d328:	0040c809 	.word	0x0040c809
  40d32c:	00416531 	.word	0x00416531
  40d330:	00415193 	.word	0x00415193
  40d334:	00413635 	.word	0x00413635
  40d338:	004162e1 	.word	0x004162e1
  40d33c:	00413611 	.word	0x00413611
  40d340:	00412471 	.word	0x00412471

0040d344 <lv_draw_img>:
{
  40d344:	b570      	push	{r4, r5, r6, lr}
  40d346:	4604      	mov	r4, r0
  40d348:	460d      	mov	r5, r1
    if(src == NULL) {
  40d34a:	b122      	cbz	r2, 40d356 <lv_draw_img+0x12>
  40d34c:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40d34e:	781a      	ldrb	r2, [r3, #0]
  40d350:	2a02      	cmp	r2, #2
  40d352:	d804      	bhi.n	40d35e <lv_draw_img+0x1a>
  40d354:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40d356:	4a08      	ldr	r2, [pc, #32]	; (40d378 <lv_draw_img+0x34>)
  40d358:	4b08      	ldr	r3, [pc, #32]	; (40d37c <lv_draw_img+0x38>)
  40d35a:	4798      	blx	r3
        return;
  40d35c:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40d35e:	460a      	mov	r2, r1
  40d360:	4629      	mov	r1, r5
  40d362:	4e07      	ldr	r6, [pc, #28]	; (40d380 <lv_draw_img+0x3c>)
  40d364:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40d366:	2800      	cmp	r0, #0
  40d368:	d1f4      	bne.n	40d354 <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40d36a:	4a03      	ldr	r2, [pc, #12]	; (40d378 <lv_draw_img+0x34>)
  40d36c:	4629      	mov	r1, r5
  40d36e:	4620      	mov	r0, r4
  40d370:	4b02      	ldr	r3, [pc, #8]	; (40d37c <lv_draw_img+0x38>)
  40d372:	4798      	blx	r3
        return;
  40d374:	e7ee      	b.n	40d354 <lv_draw_img+0x10>
  40d376:	bf00      	nop
  40d378:	00428cc4 	.word	0x00428cc4
  40d37c:	0040d049 	.word	0x0040d049
  40d380:	0040d129 	.word	0x0040d129

0040d384 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40d384:	b160      	cbz	r0, 40d3a0 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40d386:	7802      	ldrb	r2, [r0, #0]
  40d388:	f1a2 0320 	sub.w	r3, r2, #32
  40d38c:	b2db      	uxtb	r3, r3
  40d38e:	2b5f      	cmp	r3, #95	; 0x5f
  40d390:	d908      	bls.n	40d3a4 <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40d392:	f012 0f80 	tst.w	r2, #128	; 0x80
  40d396:	d101      	bne.n	40d39c <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40d398:	2000      	movs	r0, #0
}
  40d39a:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40d39c:	2002      	movs	r0, #2
  40d39e:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40d3a0:	2003      	movs	r0, #3
  40d3a2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40d3a4:	2001      	movs	r0, #1
  40d3a6:	4770      	bx	lr

0040d3a8 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40d3a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40d3ac:	b2db      	uxtb	r3, r3
  40d3ae:	2b09      	cmp	r3, #9
  40d3b0:	d917      	bls.n	40d3e2 <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40d3b2:	2860      	cmp	r0, #96	; 0x60
  40d3b4:	d901      	bls.n	40d3ba <hex_char_to_num+0x12>
  40d3b6:	3820      	subs	r0, #32
  40d3b8:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40d3ba:	3841      	subs	r0, #65	; 0x41
  40d3bc:	2805      	cmp	r0, #5
  40d3be:	d80e      	bhi.n	40d3de <hex_char_to_num+0x36>
  40d3c0:	e8df f000 	tbb	[pc, r0]
  40d3c4:	07051103 	.word	0x07051103
  40d3c8:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40d3ca:	200a      	movs	r0, #10
  40d3cc:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40d3ce:	200c      	movs	r0, #12
                break;
  40d3d0:	4770      	bx	lr
            case 'D':
                result = 13;
  40d3d2:	200d      	movs	r0, #13
                break;
  40d3d4:	4770      	bx	lr
            case 'E':
                result = 14;
  40d3d6:	200e      	movs	r0, #14
                break;
  40d3d8:	4770      	bx	lr
            case 'F':
                result = 15;
  40d3da:	200f      	movs	r0, #15
                break;
  40d3dc:	4770      	bx	lr
            default:
                result = 0;
  40d3de:	2000      	movs	r0, #0
                break;
  40d3e0:	4770      	bx	lr
        result = hex - '0';
  40d3e2:	4618      	mov	r0, r3
  40d3e4:	4770      	bx	lr
                result = 11;
  40d3e6:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40d3e8:	4770      	bx	lr
	...

0040d3ec <draw_letter_subpx>:
{
  40d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d3f0:	b09d      	sub	sp, #116	; 0x74
  40d3f2:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40d3f6:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40d3fa:	9409      	str	r4, [sp, #36]	; 0x24
  40d3fc:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40d400:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40d402:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d404:	2d03      	cmp	r5, #3
  40d406:	d00d      	beq.n	40d424 <draw_letter_subpx+0x38>
    switch(bpp) {
  40d408:	1e6c      	subs	r4, r5, #1
  40d40a:	2c07      	cmp	r4, #7
  40d40c:	f200 820e 	bhi.w	40d82c <draw_letter_subpx+0x440>
  40d410:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d414:	0019000a 	.word	0x0019000a
  40d418:	000f020c 	.word	0x000f020c
  40d41c:	020c020c 	.word	0x020c020c
  40d420:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40d424:	2504      	movs	r5, #4
  40d426:	e7ef      	b.n	40d408 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40d428:	2480      	movs	r4, #128	; 0x80
  40d42a:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40d42c:	4caf      	ldr	r4, [pc, #700]	; (40d6ec <draw_letter_subpx+0x300>)
  40d42e:	940b      	str	r4, [sp, #44]	; 0x2c
  40d430:	e00d      	b.n	40d44e <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40d432:	24f0      	movs	r4, #240	; 0xf0
  40d434:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40d436:	4cae      	ldr	r4, [pc, #696]	; (40d6f0 <draw_letter_subpx+0x304>)
  40d438:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40d43a:	e008      	b.n	40d44e <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40d43c:	24ff      	movs	r4, #255	; 0xff
  40d43e:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40d440:	4cac      	ldr	r4, [pc, #688]	; (40d6f4 <draw_letter_subpx+0x308>)
  40d442:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40d444:	e003      	b.n	40d44e <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40d446:	24c0      	movs	r4, #192	; 0xc0
  40d448:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40d44a:	4cab      	ldr	r4, [pc, #684]	; (40d6f8 <draw_letter_subpx+0x30c>)
  40d44c:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40d44e:	8854      	ldrh	r4, [r2, #2]
  40d450:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40d452:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d456:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d45a:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d45e:	4282      	cmp	r2, r0
  40d460:	f340 8097 	ble.w	40d592 <draw_letter_subpx+0x1a6>
  40d464:	1a12      	subs	r2, r2, r0
  40d466:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d46a:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d46c:	4aa3      	ldr	r2, [pc, #652]	; (40d6fc <draw_letter_subpx+0x310>)
  40d46e:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d470:	fb82 4204 	smull	r4, r2, r2, r4
  40d474:	4402      	add	r2, r0
  40d476:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40d47a:	42a2      	cmp	r2, r4
  40d47c:	f340 808c 	ble.w	40d598 <draw_letter_subpx+0x1ac>
  40d480:	1a22      	subs	r2, r4, r0
  40d482:	3201      	adds	r2, #1
  40d484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d488:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d48a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d48e:	428a      	cmp	r2, r1
  40d490:	f340 8085 	ble.w	40d59e <draw_letter_subpx+0x1b2>
  40d494:	1a52      	subs	r2, r2, r1
  40d496:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d498:	eb0e 0201 	add.w	r2, lr, r1
  40d49c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40d4a0:	42a2      	cmp	r2, r4
  40d4a2:	dd7f      	ble.n	40d5a4 <draw_letter_subpx+0x1b8>
  40d4a4:	1a64      	subs	r4, r4, r1
  40d4a6:	1c62      	adds	r2, r4, #1
  40d4a8:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d4aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d4ac:	fb05 f402 	mul.w	r4, r5, r2
  40d4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d4b2:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40d4b6:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40d4b8:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d4bc:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40d4c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d4c2:	fb0e f202 	mul.w	r2, lr, r2
  40d4c6:	9212      	str	r2, [sp, #72]	; 0x48
  40d4c8:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40d4cc:	dd02      	ble.n	40d4d4 <draw_letter_subpx+0xe8>
  40d4ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40d4d2:	9212      	str	r2, [sp, #72]	; 0x48
  40d4d4:	9317      	str	r3, [sp, #92]	; 0x5c
  40d4d6:	468a      	mov	sl, r1
  40d4d8:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d4da:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40d4dc:	4638      	mov	r0, r7
  40d4de:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40d70c <draw_letter_subpx+0x320>
  40d4e2:	47c0      	blx	r8
  40d4e4:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d4e6:	0078      	lsls	r0, r7, #1
  40d4e8:	47c0      	blx	r8
  40d4ea:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d4ec:	4b84      	ldr	r3, [pc, #528]	; (40d700 <draw_letter_subpx+0x314>)
  40d4ee:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d4f0:	4b84      	ldr	r3, [pc, #528]	; (40d704 <draw_letter_subpx+0x318>)
  40d4f2:	4798      	blx	r3
  40d4f4:	8a83      	ldrh	r3, [r0, #20]
  40d4f6:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40d4fa:	b291      	uxth	r1, r2
  40d4fc:	1a5b      	subs	r3, r3, r1
  40d4fe:	b29b      	uxth	r3, r3
  40d500:	3301      	adds	r3, #1
  40d502:	b21b      	sxth	r3, r3
  40d504:	4619      	mov	r1, r3
  40d506:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40d508:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40d50c:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40d510:	ebaa 0303 	sub.w	r3, sl, r3
  40d514:	4608      	mov	r0, r1
  40d516:	fb03 b301 	mla	r3, r3, r1, fp
  40d51a:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d51c:	4a77      	ldr	r2, [pc, #476]	; (40d6fc <draw_letter_subpx+0x310>)
  40d51e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40d520:	fb82 e107 	smull	lr, r1, r2, r7
  40d524:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40d528:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40d52a:	fb00 1007 	mla	r0, r0, r7, r1
  40d52e:	0040      	lsls	r0, r0, #1
  40d530:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40d534:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40d536:	fa1f f08b 	uxth.w	r0, fp
  40d53a:	4401      	add	r1, r0
  40d53c:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40d540:	9908      	ldr	r1, [sp, #32]
  40d542:	fb82 2301 	smull	r2, r3, r2, r1
  40d546:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40d54a:	4403      	add	r3, r0
  40d54c:	b29b      	uxth	r3, r3
  40d54e:	3b01      	subs	r3, #1
  40d550:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40d554:	eb07 030a 	add.w	r3, r7, sl
  40d558:	b21b      	sxth	r3, r3
  40d55a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40d55e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d562:	4b69      	ldr	r3, [pc, #420]	; (40d708 <draw_letter_subpx+0x31c>)
  40d564:	4798      	blx	r3
  40d566:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40d568:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40d56c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40d570:	f009 0207 	and.w	r2, r9, #7
  40d574:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40d578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d57c:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40d580:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40d584:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40d588:	2300      	movs	r3, #0
  40d58a:	9310      	str	r3, [sp, #64]	; 0x40
  40d58c:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40d590:	e0eb      	b.n	40d76a <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d592:	2200      	movs	r2, #0
  40d594:	920f      	str	r2, [sp, #60]	; 0x3c
  40d596:	e769      	b.n	40d46c <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d598:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d59a:	9208      	str	r2, [sp, #32]
  40d59c:	e775      	b.n	40d48a <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d59e:	2200      	movs	r2, #0
  40d5a0:	920d      	str	r2, [sp, #52]	; 0x34
  40d5a2:	e779      	b.n	40d498 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d5a4:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40d5a8:	e77f      	b.n	40d4aa <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40d5aa:	2d08      	cmp	r5, #8
  40d5ac:	d00b      	beq.n	40d5c6 <draw_letter_subpx+0x1da>
  40d5ae:	b2db      	uxtb	r3, r3
  40d5b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d5b2:	5cd2      	ldrb	r2, [r2, r3]
  40d5b4:	e007      	b.n	40d5c6 <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d5b6:	b2da      	uxtb	r2, r3
  40d5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d5ba:	fb03 f202 	mul.w	r2, r3, r2
  40d5be:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d5c2:	e000      	b.n	40d5c6 <draw_letter_subpx+0x1da>
                px_opa = 0;
  40d5c4:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40d5c6:	ab1c      	add	r3, sp, #112	; 0x70
  40d5c8:	440b      	add	r3, r1
  40d5ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40d5ce:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40d5d0:	2903      	cmp	r1, #3
  40d5d2:	d028      	beq.n	40d626 <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40d5d4:	f1c5 0308 	rsb	r3, r5, #8
  40d5d8:	429c      	cmp	r4, r3
  40d5da:	f280 8081 	bge.w	40d6e0 <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40d5de:	9b05      	ldr	r3, [sp, #20]
  40d5e0:	442b      	add	r3, r5
  40d5e2:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40d5e4:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40d5e8:	3001      	adds	r0, #1
  40d5ea:	9b08      	ldr	r3, [sp, #32]
  40d5ec:	4298      	cmp	r0, r3
  40d5ee:	f280 808f 	bge.w	40d710 <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40d5f2:	7833      	ldrb	r3, [r6, #0]
  40d5f4:	ea0e 0203 	and.w	r2, lr, r3
  40d5f8:	9405      	str	r4, [sp, #20]
  40d5fa:	426b      	negs	r3, r5
  40d5fc:	1b1b      	subs	r3, r3, r4
  40d5fe:	3308      	adds	r3, #8
  40d600:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40d604:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40d608:	d0dc      	beq.n	40d5c4 <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40d60a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d60c:	2fff      	cmp	r7, #255	; 0xff
  40d60e:	d0cc      	beq.n	40d5aa <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d610:	2d08      	cmp	r5, #8
  40d612:	d0d0      	beq.n	40d5b6 <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40d614:	b2db      	uxtb	r3, r3
  40d616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d618:	5cd2      	ldrb	r2, [r2, r3]
  40d61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d61c:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d620:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d624:	e7cf      	b.n	40d5c6 <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40d626:	f898 9000 	ldrb.w	r9, [r8]
  40d62a:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40d62e:	f009 0107 	and.w	r1, r9, #7
  40d632:	f898 2001 	ldrb.w	r2, [r8, #1]
  40d636:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40d63a:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40d63e:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d642:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40d646:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40d64a:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40d64e:	fb0a fa0b 	mul.w	sl, sl, fp
  40d652:	fb01 aa03 	mla	sl, r1, r3, sl
  40d656:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40d65a:	9b06      	ldr	r3, [sp, #24]
  40d65c:	f36a 03c7 	bfi	r3, sl, #3, #5
  40d660:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d662:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40d666:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40d66a:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40d66e:	fb0b f202 	mul.w	r2, fp, r2
  40d672:	fb0a 2203 	mla	r2, sl, r3, r2
  40d676:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40d67a:	463b      	mov	r3, r7
  40d67c:	f362 230c 	bfi	r3, r2, #8, #5
  40d680:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d682:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40d686:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40d68a:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40d68e:	fb02 f909 	mul.w	r9, r2, r9
  40d692:	fb0b 9303 	mla	r3, fp, r3, r9
  40d696:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40d69a:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40d69e:	f362 0702 	bfi	r7, r2, #0, #3
  40d6a2:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40d6a4:	f363 324f 	bfi	r2, r3, #13, #3
  40d6a8:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40d6aa:	b951      	cbnz	r1, 40d6c2 <draw_letter_subpx+0x2d6>
  40d6ac:	f1bb 0f00 	cmp.w	fp, #0
  40d6b0:	d107      	bne.n	40d6c2 <draw_letter_subpx+0x2d6>
  40d6b2:	f1ba 0f00 	cmp.w	sl, #0
  40d6b6:	d104      	bne.n	40d6c2 <draw_letter_subpx+0x2d6>
  40d6b8:	2300      	movs	r3, #0
  40d6ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d6bc:	f802 300c 	strb.w	r3, [r2, ip]
  40d6c0:	e003      	b.n	40d6ca <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40d6c2:	23ff      	movs	r3, #255	; 0xff
  40d6c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d6c6:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40d6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d6cc:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40d6d0:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40d6d4:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40d6d8:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40d6dc:	2100      	movs	r1, #0
  40d6de:	e779      	b.n	40d5d4 <draw_letter_subpx+0x1e8>
                map_p++;
  40d6e0:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d6e2:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40d6e6:	2400      	movs	r4, #0
  40d6e8:	e77e      	b.n	40d5e8 <draw_letter_subpx+0x1fc>
  40d6ea:	bf00      	nop
  40d6ec:	00428ccc 	.word	0x00428ccc
  40d6f0:	00428cd4 	.word	0x00428cd4
  40d6f4:	00428ce4 	.word	0x00428ce4
  40d6f8:	00428cd0 	.word	0x00428cd0
  40d6fc:	55555556 	.word	0x55555556
  40d700:	00409531 	.word	0x00409531
  40d704:	004149fd 	.word	0x004149fd
  40d708:	0040f8ed 	.word	0x0040f8ed
  40d70c:	00416531 	.word	0x00416531
  40d710:	46e3      	mov	fp, ip
  40d712:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40d716:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d718:	2b00      	cmp	r3, #0
  40d71a:	d134      	bne.n	40d786 <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d71c:	9b08      	ldr	r3, [sp, #32]
  40d71e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d720:	eba3 0902 	sub.w	r9, r3, r2
  40d724:	465b      	mov	r3, fp
  40d726:	444b      	add	r3, r9
  40d728:	9912      	ldr	r1, [sp, #72]	; 0x48
  40d72a:	4299      	cmp	r1, r3
  40d72c:	dd4c      	ble.n	40d7c8 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40d72e:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d732:	3301      	adds	r3, #1
  40d734:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40d738:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40d73c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d73e:	9a08      	ldr	r2, [sp, #32]
  40d740:	1a9b      	subs	r3, r3, r2
  40d742:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d744:	4413      	add	r3, r2
  40d746:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40d74a:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40d74e:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40d752:	4b38      	ldr	r3, [pc, #224]	; (40d834 <draw_letter_subpx+0x448>)
  40d754:	fb83 2309 	smull	r2, r3, r3, r9
  40d758:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40d75c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d75e:	4499      	add	r9, r3
  40d760:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40d764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d766:	3301      	adds	r3, #1
  40d768:	930d      	str	r3, [sp, #52]	; 0x34
  40d76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d76c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d76e:	4293      	cmp	r3, r2
  40d770:	da42      	bge.n	40d7f8 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40d772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d774:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d778:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d77a:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40d77c:	2100      	movs	r1, #0
  40d77e:	469c      	mov	ip, r3
  40d780:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40d784:	e731      	b.n	40d5ea <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40d786:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d788:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d78a:	4413      	add	r3, r2
  40d78c:	469a      	mov	sl, r3
  40d78e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40d792:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40d796:	b28a      	uxth	r2, r1
  40d798:	1a9b      	subs	r3, r3, r2
  40d79a:	b29b      	uxth	r3, r3
  40d79c:	3301      	adds	r3, #1
  40d79e:	b21b      	sxth	r3, r3
  40d7a0:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40d7a4:	4650      	mov	r0, sl
  40d7a6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40d844 <draw_letter_subpx+0x458>
  40d7aa:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d7ac:	2800      	cmp	r0, #0
  40d7ae:	d1b5      	bne.n	40d71c <draw_letter_subpx+0x330>
  40d7b0:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40d7b4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40d7b8:	1ac9      	subs	r1, r1, r3
  40d7ba:	b289      	uxth	r1, r1
  40d7bc:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40d7be:	b209      	sxth	r1, r1
  40d7c0:	4650      	mov	r0, sl
  40d7c2:	4b1d      	ldr	r3, [pc, #116]	; (40d838 <draw_letter_subpx+0x44c>)
  40d7c4:	4798      	blx	r3
  40d7c6:	e7a9      	b.n	40d71c <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d7c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d7ca:	9302      	str	r3, [sp, #8]
  40d7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d7ce:	9301      	str	r3, [sp, #4]
  40d7d0:	2302      	movs	r3, #2
  40d7d2:	9300      	str	r3, [sp, #0]
  40d7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d7d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d7d8:	a91a      	add	r1, sp, #104	; 0x68
  40d7da:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d7dc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40d83c <draw_letter_subpx+0x450>
  40d7e0:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40d7e2:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40d7e6:	3301      	adds	r3, #1
  40d7e8:	b21b      	sxth	r3, r3
  40d7ea:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40d7ee:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40d7f2:	2300      	movs	r3, #0
  40d7f4:	9310      	str	r3, [sp, #64]	; 0x40
  40d7f6:	e7a1      	b.n	40d73c <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40d7f8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40d7fc:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d800:	429a      	cmp	r2, r3
  40d802:	d00e      	beq.n	40d822 <draw_letter_subpx+0x436>
        map_area.y2--;
  40d804:	3b01      	subs	r3, #1
  40d806:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d80a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d80c:	9302      	str	r3, [sp, #8]
  40d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d810:	9301      	str	r3, [sp, #4]
  40d812:	2302      	movs	r3, #2
  40d814:	9300      	str	r3, [sp, #0]
  40d816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d81a:	a91a      	add	r1, sp, #104	; 0x68
  40d81c:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d81e:	4c07      	ldr	r4, [pc, #28]	; (40d83c <draw_letter_subpx+0x450>)
  40d820:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d822:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d824:	4c06      	ldr	r4, [pc, #24]	; (40d840 <draw_letter_subpx+0x454>)
  40d826:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40d828:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d82a:	47a0      	blx	r4
}
  40d82c:	b01d      	add	sp, #116	; 0x74
  40d82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d832:	bf00      	nop
  40d834:	55555556 	.word	0x55555556
  40d838:	004166bd 	.word	0x004166bd
  40d83c:	0040c6e9 	.word	0x0040c6e9
  40d840:	004162e1 	.word	0x004162e1
  40d844:	0040f825 	.word	0x0040f825

0040d848 <draw_letter_normal>:
{
  40d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d84c:	b093      	sub	sp, #76	; 0x4c
  40d84e:	468e      	mov	lr, r1
  40d850:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40d854:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40d858:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40d85a:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d85e:	f1ba 0f03 	cmp.w	sl, #3
  40d862:	d00e      	beq.n	40d882 <draw_letter_normal+0x3a>
    switch(bpp) {
  40d864:	f10a 34ff 	add.w	r4, sl, #4294967295
  40d868:	2c07      	cmp	r4, #7
  40d86a:	f200 8147 	bhi.w	40dafc <draw_letter_normal+0x2b4>
  40d86e:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d872:	000b      	.short	0x000b
  40d874:	0145001e 	.word	0x0145001e
  40d878:	01450011 	.word	0x01450011
  40d87c:	01450145 	.word	0x01450145
  40d880:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40d882:	f04f 0a04 	mov.w	sl, #4
  40d886:	e7ed      	b.n	40d864 <draw_letter_normal+0x1c>
            shades = 2;
  40d888:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40d88a:	2180      	movs	r1, #128	; 0x80
  40d88c:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40d88e:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40db30 <draw_letter_normal+0x2e8>
  40d892:	e011      	b.n	40d8b8 <draw_letter_normal+0x70>
            shades = 16;
  40d894:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40d896:	21f0      	movs	r1, #240	; 0xf0
  40d898:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40d89a:	f8df b298 	ldr.w	fp, [pc, #664]	; 40db34 <draw_letter_normal+0x2ec>
            break;
  40d89e:	e00b      	b.n	40d8b8 <draw_letter_normal+0x70>
            shades = 256;
  40d8a0:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40d8a4:	21ff      	movs	r1, #255	; 0xff
  40d8a6:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40d8a8:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40db38 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40d8ac:	e004      	b.n	40d8b8 <draw_letter_normal+0x70>
            shades = 4;
  40d8ae:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40d8b0:	21c0      	movs	r1, #192	; 0xc0
  40d8b2:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40d8b4:	f8df b284 	ldr.w	fp, [pc, #644]	; 40db3c <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40d8b8:	2efc      	cmp	r6, #252	; 0xfc
  40d8ba:	d821      	bhi.n	40d900 <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40d8bc:	4c91      	ldr	r4, [pc, #580]	; (40db04 <draw_letter_normal+0x2bc>)
  40d8be:	7824      	ldrb	r4, [r4, #0]
  40d8c0:	42a6      	cmp	r6, r4
  40d8c2:	d001      	beq.n	40d8c8 <draw_letter_normal+0x80>
  40d8c4:	2500      	movs	r5, #0
  40d8c6:	e009      	b.n	40d8dc <draw_letter_normal+0x94>
  40d8c8:	4c8f      	ldr	r4, [pc, #572]	; (40db08 <draw_letter_normal+0x2c0>)
  40d8ca:	6824      	ldr	r4, [r4, #0]
  40d8cc:	45a2      	cmp	sl, r4
  40d8ce:	d010      	beq.n	40d8f2 <draw_letter_normal+0xaa>
  40d8d0:	2500      	movs	r5, #0
  40d8d2:	e003      	b.n	40d8dc <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d8d4:	4631      	mov	r1, r6
  40d8d6:	4c8d      	ldr	r4, [pc, #564]	; (40db0c <draw_letter_normal+0x2c4>)
  40d8d8:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40d8da:	3501      	adds	r5, #1
  40d8dc:	42af      	cmp	r7, r5
  40d8de:	d908      	bls.n	40d8f2 <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d8e0:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40d8e4:	29ff      	cmp	r1, #255	; 0xff
  40d8e6:	d0f5      	beq.n	40d8d4 <draw_letter_normal+0x8c>
  40d8e8:	fb01 f106 	mul.w	r1, r1, r6
  40d8ec:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40d8f0:	e7f1      	b.n	40d8d6 <draw_letter_normal+0x8e>
        prev_opa = opa;
  40d8f2:	4c84      	ldr	r4, [pc, #528]	; (40db04 <draw_letter_normal+0x2bc>)
  40d8f4:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40d8f6:	4c84      	ldr	r4, [pc, #528]	; (40db08 <draw_letter_normal+0x2c0>)
  40d8f8:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40d8fc:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40db0c <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40d900:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40d902:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d904:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d908:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d90c:	4282      	cmp	r2, r0
  40d90e:	dd5a      	ble.n	40d9c6 <draw_letter_normal+0x17e>
  40d910:	1a12      	subs	r2, r2, r0
  40d912:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d914:	182a      	adds	r2, r5, r0
  40d916:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40d91a:	42b2      	cmp	r2, r6
  40d91c:	dd56      	ble.n	40d9cc <draw_letter_normal+0x184>
  40d91e:	1a36      	subs	r6, r6, r0
  40d920:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d924:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d928:	4572      	cmp	r2, lr
  40d92a:	dd51      	ble.n	40d9d0 <draw_letter_normal+0x188>
  40d92c:	eba2 020e 	sub.w	r2, r2, lr
  40d930:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d932:	eb07 020e 	add.w	r2, r7, lr
  40d936:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40d93a:	42b2      	cmp	r2, r6
  40d93c:	dd4b      	ble.n	40d9d6 <draw_letter_normal+0x18e>
  40d93e:	eba6 060e 	sub.w	r6, r6, lr
  40d942:	1c72      	adds	r2, r6, #1
  40d944:	9209      	str	r2, [sp, #36]	; 0x24
  40d946:	930e      	str	r3, [sp, #56]	; 0x38
  40d948:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40d94c:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d94e:	9b07      	ldr	r3, [sp, #28]
  40d950:	fb0a f303 	mul.w	r3, sl, r3
  40d954:	9a06      	ldr	r2, [sp, #24]
  40d956:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40d95a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40d95c:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d960:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40d964:	4b6a      	ldr	r3, [pc, #424]	; (40db10 <draw_letter_normal+0x2c8>)
  40d966:	4798      	blx	r3
  40d968:	4b6a      	ldr	r3, [pc, #424]	; (40db14 <draw_letter_normal+0x2cc>)
  40d96a:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40d96c:	fb07 f705 	mul.w	r7, r7, r5
  40d970:	42b8      	cmp	r0, r7
  40d972:	bfa8      	it	ge
  40d974:	4638      	movge	r0, r7
  40d976:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d978:	4b67      	ldr	r3, [pc, #412]	; (40db18 <draw_letter_normal+0x2d0>)
  40d97a:	4798      	blx	r3
  40d97c:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40d97e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40d982:	9b07      	ldr	r3, [sp, #28]
  40d984:	18d3      	adds	r3, r2, r3
  40d986:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40d98a:	eb02 0308 	add.w	r3, r2, r8
  40d98e:	b29b      	uxth	r3, r3
  40d990:	3b01      	subs	r3, #1
  40d992:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40d996:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d998:	9a06      	ldr	r2, [sp, #24]
  40d99a:	4411      	add	r1, r2
  40d99c:	b20b      	sxth	r3, r1
  40d99e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40d9a2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d9a6:	4b5d      	ldr	r3, [pc, #372]	; (40db1c <draw_letter_normal+0x2d4>)
  40d9a8:	4798      	blx	r3
  40d9aa:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40d9ac:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40d9b0:	9b07      	ldr	r3, [sp, #28]
  40d9b2:	442b      	add	r3, r5
  40d9b4:	eba3 0308 	sub.w	r3, r3, r8
  40d9b8:	fb03 f30a 	mul.w	r3, r3, sl
  40d9bc:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40d9be:	f04f 0e00 	mov.w	lr, #0
  40d9c2:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40d9c4:	e03f      	b.n	40da46 <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d9c6:	2200      	movs	r2, #0
  40d9c8:	9207      	str	r2, [sp, #28]
  40d9ca:	e7a3      	b.n	40d914 <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d9cc:	46a8      	mov	r8, r5
  40d9ce:	e7a9      	b.n	40d924 <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d9d0:	2200      	movs	r2, #0
  40d9d2:	9206      	str	r2, [sp, #24]
  40d9d4:	e7ad      	b.n	40d932 <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d9d6:	9709      	str	r7, [sp, #36]	; 0x24
  40d9d8:	e7b5      	b.n	40d946 <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40d9da:	2300      	movs	r3, #0
  40d9dc:	f809 3005 	strb.w	r3, [r9, r5]
  40d9e0:	e012      	b.n	40da08 <draw_letter_normal+0x1c0>
                map_p++;
  40d9e2:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d9e4:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40d9e6:	2400      	movs	r4, #0
            mask_p++;
  40d9e8:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40d9ea:	3101      	adds	r1, #1
  40d9ec:	4541      	cmp	r1, r8
  40d9ee:	da11      	bge.n	40da14 <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40d9f0:	7833      	ldrb	r3, [r6, #0]
  40d9f2:	4003      	ands	r3, r0
  40d9f4:	1b3a      	subs	r2, r7, r4
  40d9f6:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40d9f8:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d9fc:	d0ed      	beq.n	40d9da <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40d9fe:	b2db      	uxtb	r3, r3
  40da00:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40da04:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40da08:	42bc      	cmp	r4, r7
  40da0a:	d2ea      	bcs.n	40d9e2 <draw_letter_normal+0x19a>
                col_bit += bpp;
  40da0c:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40da0e:	fa20 f00a 	lsr.w	r0, r0, sl
  40da12:	e7e9      	b.n	40d9e8 <draw_letter_normal+0x1a0>
  40da14:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40da16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40da18:	bb03      	cbnz	r3, 40da5c <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40da1a:	9b07      	ldr	r3, [sp, #28]
  40da1c:	eba8 0303 	sub.w	r3, r8, r3
  40da20:	442b      	add	r3, r5
  40da22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40da24:	429a      	cmp	r2, r3
  40da26:	d938      	bls.n	40da9a <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40da28:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40da2c:	3301      	adds	r3, #1
  40da2e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40da32:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40da34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40da36:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40da38:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40da3c:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40da40:	9b06      	ldr	r3, [sp, #24]
  40da42:	3301      	adds	r3, #1
  40da44:	9306      	str	r3, [sp, #24]
  40da46:	9b06      	ldr	r3, [sp, #24]
  40da48:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40da4a:	4293      	cmp	r3, r2
  40da4c:	da3d      	bge.n	40daca <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40da4e:	9b05      	ldr	r3, [sp, #20]
  40da50:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40da54:	4675      	mov	r5, lr
  40da56:	9907      	ldr	r1, [sp, #28]
  40da58:	9f08      	ldr	r7, [sp, #32]
  40da5a:	e7c7      	b.n	40d9ec <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40da5c:	eb09 030e 	add.w	r3, r9, lr
  40da60:	4618      	mov	r0, r3
  40da62:	930f      	str	r3, [sp, #60]	; 0x3c
  40da64:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40da68:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40da6c:	b28a      	uxth	r2, r1
  40da6e:	1a9b      	subs	r3, r3, r2
  40da70:	b29b      	uxth	r3, r3
  40da72:	3301      	adds	r3, #1
  40da74:	b21b      	sxth	r3, r3
  40da76:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40da7a:	4f29      	ldr	r7, [pc, #164]	; (40db20 <draw_letter_normal+0x2d8>)
  40da7c:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40da7e:	2800      	cmp	r0, #0
  40da80:	d1cb      	bne.n	40da1a <draw_letter_normal+0x1d2>
  40da82:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40da86:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40da8a:	1ac9      	subs	r1, r1, r3
  40da8c:	b289      	uxth	r1, r1
  40da8e:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40da90:	b209      	sxth	r1, r1
  40da92:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40da94:	4b23      	ldr	r3, [pc, #140]	; (40db24 <draw_letter_normal+0x2dc>)
  40da96:	4798      	blx	r3
  40da98:	e7bf      	b.n	40da1a <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40da9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40da9c:	9302      	str	r3, [sp, #8]
  40da9e:	23ff      	movs	r3, #255	; 0xff
  40daa0:	9301      	str	r3, [sp, #4]
  40daa2:	2302      	movs	r3, #2
  40daa4:	9300      	str	r3, [sp, #0]
  40daa6:	464b      	mov	r3, r9
  40daa8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40daac:	a910      	add	r1, sp, #64	; 0x40
  40daae:	980e      	ldr	r0, [sp, #56]	; 0x38
  40dab0:	4d1d      	ldr	r5, [pc, #116]	; (40db28 <draw_letter_normal+0x2e0>)
  40dab2:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40dab4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40dab8:	3301      	adds	r3, #1
  40daba:	b21b      	sxth	r3, r3
  40dabc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40dac0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40dac4:	f04f 0e00 	mov.w	lr, #0
  40dac8:	e7b4      	b.n	40da34 <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40daca:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40dace:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40dad2:	429a      	cmp	r2, r3
  40dad4:	d00f      	beq.n	40daf6 <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40dad6:	3b01      	subs	r3, #1
  40dad8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40dadc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dade:	9302      	str	r3, [sp, #8]
  40dae0:	23ff      	movs	r3, #255	; 0xff
  40dae2:	9301      	str	r3, [sp, #4]
  40dae4:	2302      	movs	r3, #2
  40dae6:	9300      	str	r3, [sp, #0]
  40dae8:	464b      	mov	r3, r9
  40daea:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40daee:	a910      	add	r1, sp, #64	; 0x40
  40daf0:	980e      	ldr	r0, [sp, #56]	; 0x38
  40daf2:	4c0d      	ldr	r4, [pc, #52]	; (40db28 <draw_letter_normal+0x2e0>)
  40daf4:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40daf6:	4648      	mov	r0, r9
  40daf8:	4b0c      	ldr	r3, [pc, #48]	; (40db2c <draw_letter_normal+0x2e4>)
  40dafa:	4798      	blx	r3
}
  40dafc:	b013      	add	sp, #76	; 0x4c
  40dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db02:	bf00      	nop
  40db04:	2040c72c 	.word	0x2040c72c
  40db08:	2040c728 	.word	0x2040c728
  40db0c:	2040c628 	.word	0x2040c628
  40db10:	00409531 	.word	0x00409531
  40db14:	004148f9 	.word	0x004148f9
  40db18:	00416531 	.word	0x00416531
  40db1c:	0040f8ed 	.word	0x0040f8ed
  40db20:	0040f825 	.word	0x0040f825
  40db24:	004166bd 	.word	0x004166bd
  40db28:	0040c5c9 	.word	0x0040c5c9
  40db2c:	004162e1 	.word	0x004162e1
  40db30:	00428ccc 	.word	0x00428ccc
  40db34:	00428cd4 	.word	0x00428cd4
  40db38:	00428ce4 	.word	0x00428ce4
  40db3c:	00428cd0 	.word	0x00428cd0

0040db40 <lv_draw_letter>:
{
  40db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40db44:	b089      	sub	sp, #36	; 0x24
  40db46:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40db4a:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40db4e:	2d01      	cmp	r5, #1
  40db50:	d937      	bls.n	40dbc2 <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40db52:	2dfd      	cmp	r5, #253	; 0xfd
  40db54:	d900      	bls.n	40db58 <lv_draw_letter+0x18>
  40db56:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40db58:	b39a      	cbz	r2, 40dbc2 <lv_draw_letter+0x82>
  40db5a:	469b      	mov	fp, r3
  40db5c:	4614      	mov	r4, r2
  40db5e:	4689      	mov	r9, r1
  40db60:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40db62:	2300      	movs	r3, #0
  40db64:	465a      	mov	r2, fp
  40db66:	a905      	add	r1, sp, #20
  40db68:	4620      	mov	r0, r4
  40db6a:	4e2c      	ldr	r6, [pc, #176]	; (40dc1c <lv_draw_letter+0xdc>)
  40db6c:	47b0      	blx	r6
    if(g_ret == false)  {
  40db6e:	b340      	cbz	r0, 40dbc2 <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40db70:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40db74:	b32b      	cbz	r3, 40dbc2 <lv_draw_letter+0x82>
  40db76:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40db7a:	b312      	cbz	r2, 40dbc2 <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40db7c:	f9b7 a000 	ldrsh.w	sl, [r7]
  40db80:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40db84:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40db86:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40db8a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40db8e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40db92:	1a09      	subs	r1, r1, r0
  40db94:	440f      	add	r7, r1
  40db96:	1aff      	subs	r7, r7, r3
  40db98:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40db9c:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40db9e:	4452      	add	r2, sl
  40dba0:	f9b9 1000 	ldrsh.w	r1, [r9]
  40dba4:	428a      	cmp	r2, r1
  40dba6:	db0c      	blt.n	40dbc2 <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40dba8:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40dbac:	4592      	cmp	sl, r2
  40dbae:	dc08      	bgt.n	40dbc2 <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40dbb0:	443b      	add	r3, r7
  40dbb2:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40dbb6:	4293      	cmp	r3, r2
  40dbb8:	db03      	blt.n	40dbc2 <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40dbba:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40dbbe:	429f      	cmp	r7, r3
  40dbc0:	dd02      	ble.n	40dbc8 <lv_draw_letter+0x88>
}
  40dbc2:	b009      	add	sp, #36	; 0x24
  40dbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40dbc8:	4659      	mov	r1, fp
  40dbca:	4620      	mov	r0, r4
  40dbcc:	4b14      	ldr	r3, [pc, #80]	; (40dc20 <lv_draw_letter+0xe0>)
  40dbce:	4798      	blx	r3
    if(map_p == NULL) {
  40dbd0:	2800      	cmp	r0, #0
  40dbd2:	d0f6      	beq.n	40dbc2 <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40dbd4:	7b22      	ldrb	r2, [r4, #12]
  40dbd6:	f012 0f03 	tst.w	r2, #3
  40dbda:	d00f      	beq.n	40dbfc <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40dbdc:	f8cd 800c 	str.w	r8, [sp, #12]
  40dbe0:	9502      	str	r5, [sp, #8]
  40dbe2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40dbe6:	f8ad 2004 	strh.w	r2, [sp, #4]
  40dbea:	9000      	str	r0, [sp, #0]
  40dbec:	464b      	mov	r3, r9
  40dbee:	aa05      	add	r2, sp, #20
  40dbf0:	b239      	sxth	r1, r7
  40dbf2:	fa0f f08a 	sxth.w	r0, sl
  40dbf6:	4c0b      	ldr	r4, [pc, #44]	; (40dc24 <lv_draw_letter+0xe4>)
  40dbf8:	47a0      	blx	r4
  40dbfa:	e7e2      	b.n	40dbc2 <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40dbfc:	f8cd 800c 	str.w	r8, [sp, #12]
  40dc00:	9502      	str	r5, [sp, #8]
  40dc02:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40dc06:	f8ad 2004 	strh.w	r2, [sp, #4]
  40dc0a:	9000      	str	r0, [sp, #0]
  40dc0c:	464b      	mov	r3, r9
  40dc0e:	aa05      	add	r2, sp, #20
  40dc10:	b239      	sxth	r1, r7
  40dc12:	fa0f f08a 	sxth.w	r0, sl
  40dc16:	4c04      	ldr	r4, [pc, #16]	; (40dc28 <lv_draw_letter+0xe8>)
  40dc18:	47a0      	blx	r4
  40dc1a:	e7d2      	b.n	40dbc2 <lv_draw_letter+0x82>
  40dc1c:	0041373d 	.word	0x0041373d
  40dc20:	00413735 	.word	0x00413735
  40dc24:	0040d3ed 	.word	0x0040d3ed
  40dc28:	0040d849 	.word	0x0040d849

0040dc2c <lv_draw_label_dsc_init>:
{
  40dc2c:	b510      	push	{r4, lr}
  40dc2e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40dc30:	2124      	movs	r1, #36	; 0x24
  40dc32:	4b0e      	ldr	r3, [pc, #56]	; (40dc6c <lv_draw_label_dsc_init+0x40>)
  40dc34:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40dc36:	23ff      	movs	r3, #255	; 0xff
  40dc38:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40dc3a:	2300      	movs	r3, #0
  40dc3c:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40dc3e:	4a0c      	ldr	r2, [pc, #48]	; (40dc70 <lv_draw_label_dsc_init+0x44>)
  40dc40:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40dc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40dc46:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40dc48:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40dc4a:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40dc4c:	7922      	ldrb	r2, [r4, #4]
  40dc4e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40dc52:	f363 02c7 	bfi	r2, r3, #3, #5
  40dc56:	7122      	strb	r2, [r4, #4]
  40dc58:	7962      	ldrb	r2, [r4, #5]
  40dc5a:	f042 021f 	orr.w	r2, r2, #31
  40dc5e:	f363 1247 	bfi	r2, r3, #5, #3
  40dc62:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40dc64:	f884 3020 	strb.w	r3, [r4, #32]
  40dc68:	bd10      	pop	{r4, pc}
  40dc6a:	bf00      	nop
  40dc6c:	004166bd 	.word	0x004166bd
  40dc70:	2040002c 	.word	0x2040002c

0040dc74 <lv_draw_label>:
{
  40dc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dc78:	b0b7      	sub	sp, #220	; 0xdc
  40dc7a:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40dc7c:	7b15      	ldrb	r5, [r2, #12]
  40dc7e:	2d02      	cmp	r5, #2
  40dc80:	d903      	bls.n	40dc8a <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40dc82:	6895      	ldr	r5, [r2, #8]
  40dc84:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40dc86:	781d      	ldrb	r5, [r3, #0]
  40dc88:	b915      	cbnz	r5, 40dc90 <lv_draw_label+0x1c>
}
  40dc8a:	b037      	add	sp, #220	; 0xdc
  40dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dc90:	930c      	str	r3, [sp, #48]	; 0x30
  40dc92:	4616      	mov	r6, r2
  40dc94:	460a      	mov	r2, r1
  40dc96:	9109      	str	r1, [sp, #36]	; 0x24
  40dc98:	4605      	mov	r5, r0
  40dc9a:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40dc9c:	4601      	mov	r1, r0
  40dc9e:	a834      	add	r0, sp, #208	; 0xd0
  40dca0:	4ba8      	ldr	r3, [pc, #672]	; (40df44 <lv_draw_label+0x2d0>)
  40dca2:	4798      	blx	r3
    if(!clip_ok) return;
  40dca4:	2800      	cmp	r0, #0
  40dca6:	d0f0      	beq.n	40dc8a <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40dca8:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40dcac:	f012 0f02 	tst.w	r2, #2
  40dcb0:	d12b      	bne.n	40dd0a <lv_draw_label+0x96>
  40dcb2:	88ab      	ldrh	r3, [r5, #4]
  40dcb4:	882a      	ldrh	r2, [r5, #0]
  40dcb6:	1a9b      	subs	r3, r3, r2
  40dcb8:	b29b      	uxth	r3, r3
  40dcba:	3301      	adds	r3, #1
  40dcbc:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40dcbe:	9a06      	ldr	r2, [sp, #24]
  40dcc0:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40dcc4:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40dcc8:	4442      	add	r2, r8
  40dcca:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40dccc:	9810      	ldr	r0, [sp, #64]	; 0x40
  40dcce:	f9b0 2000 	ldrsh.w	r2, [r0]
  40dcd2:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40dcd6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40dcda:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40dcde:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40dce0:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40dce4:	440a      	add	r2, r1
  40dce6:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40dcea:	1c22      	adds	r2, r4, #0
  40dcec:	bf18      	it	ne
  40dcee:	2201      	movne	r2, #1
  40dcf0:	2900      	cmp	r1, #0
  40dcf2:	bf14      	ite	ne
  40dcf4:	2100      	movne	r1, #0
  40dcf6:	f002 0101 	andeq.w	r1, r2, #1
  40dcfa:	b341      	cbz	r1, 40dd4e <lv_draw_label+0xda>
  40dcfc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40dd00:	2900      	cmp	r1, #0
  40dd02:	db13      	blt.n	40dd2c <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40dd04:	f04f 37ff 	mov.w	r7, #4294967295
  40dd08:	e023      	b.n	40dd52 <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40dd0a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40dd0e:	9202      	str	r2, [sp, #8]
  40dd10:	f647 4218 	movw	r2, #31768	; 0x7c18
  40dd14:	9201      	str	r2, [sp, #4]
  40dd16:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40dd1a:	9200      	str	r2, [sp, #0]
  40dd1c:	68b2      	ldr	r2, [r6, #8]
  40dd1e:	990c      	ldr	r1, [sp, #48]	; 0x30
  40dd20:	a818      	add	r0, sp, #96	; 0x60
  40dd22:	4d89      	ldr	r5, [pc, #548]	; (40df48 <lv_draw_label+0x2d4>)
  40dd24:	47a8      	blx	r5
        w = p.x;
  40dd26:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40dd2a:	e7c8      	b.n	40dcbe <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40dd2c:	68a0      	ldr	r0, [r4, #8]
  40dd2e:	1a40      	subs	r0, r0, r1
  40dd30:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40dd34:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40dd38:	980d      	ldr	r0, [sp, #52]	; 0x34
  40dd3a:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40dd3e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40dd42:	dd02      	ble.n	40dd4a <lv_draw_label+0xd6>
            hint->line_start = -1;
  40dd44:	f04f 31ff 	mov.w	r1, #4294967295
  40dd48:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40dd4a:	6827      	ldr	r7, [r4, #0]
  40dd4c:	e001      	b.n	40dd52 <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40dd4e:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40dd52:	2f00      	cmp	r7, #0
  40dd54:	bfb4      	ite	lt
  40dd56:	2200      	movlt	r2, #0
  40dd58:	f002 0201 	andge.w	r2, r2, #1
  40dd5c:	b1d2      	cbz	r2, 40dd94 <lv_draw_label+0x120>
        pos.y += hint->y;
  40dd5e:	6862      	ldr	r2, [r4, #4]
  40dd60:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40dd64:	440a      	add	r2, r1
  40dd66:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40dd6a:	b21b      	sxth	r3, r3
  40dd6c:	4619      	mov	r1, r3
  40dd6e:	930e      	str	r3, [sp, #56]	; 0x38
  40dd70:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40dd74:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40dd78:	9300      	str	r3, [sp, #0]
  40dd7a:	460b      	mov	r3, r1
  40dd7c:	9906      	ldr	r1, [sp, #24]
  40dd7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dd80:	4438      	add	r0, r7
  40dd82:	4d72      	ldr	r5, [pc, #456]	; (40df4c <lv_draw_label+0x2d8>)
  40dd84:	47a8      	blx	r5
  40dd86:	eb07 0b00 	add.w	fp, r7, r0
  40dd8a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40dd8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40dd92:	e007      	b.n	40dda4 <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40dd94:	2700      	movs	r7, #0
  40dd96:	e7e8      	b.n	40dd6a <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40dd98:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40dd9a:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40dd9c:	2b00      	cmp	r3, #0
  40dd9e:	f43f af74 	beq.w	40dc8a <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40dda2:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40dda4:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40dda8:	4443      	add	r3, r8
  40ddaa:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40ddae:	4293      	cmp	r3, r2
  40ddb0:	da28      	bge.n	40de04 <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40ddb2:	eb0a 050b 	add.w	r5, sl, fp
  40ddb6:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40ddba:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40ddbe:	9300      	str	r3, [sp, #0]
  40ddc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ddc2:	9906      	ldr	r1, [sp, #24]
  40ddc4:	4628      	mov	r0, r5
  40ddc6:	4f61      	ldr	r7, [pc, #388]	; (40df4c <lv_draw_label+0x2d8>)
  40ddc8:	47b8      	blx	r7
  40ddca:	4458      	add	r0, fp
        pos.y += line_height;
  40ddcc:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40ddd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40ddd2:	4413      	add	r3, r2
  40ddd4:	b21b      	sxth	r3, r3
  40ddd6:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40ddda:	2c00      	cmp	r4, #0
  40dddc:	d0dc      	beq.n	40dd98 <lv_draw_label+0x124>
  40ddde:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40dde2:	dbd9      	blt.n	40dd98 <lv_draw_label+0x124>
  40dde4:	6823      	ldr	r3, [r4, #0]
  40dde6:	2b00      	cmp	r3, #0
  40dde8:	dad6      	bge.n	40dd98 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40ddea:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40ddee:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40ddf2:	9910      	ldr	r1, [sp, #64]	; 0x40
  40ddf4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40ddf8:	1a9b      	subs	r3, r3, r2
  40ddfa:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40ddfc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40de00:	60a3      	str	r3, [r4, #8]
  40de02:	e7c9      	b.n	40dd98 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40de04:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40de08:	f012 0f04 	tst.w	r2, #4
  40de0c:	d124      	bne.n	40de58 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40de0e:	f012 0f08 	tst.w	r2, #8
  40de12:	d13d      	bne.n	40de90 <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40de14:	7b33      	ldrb	r3, [r6, #12]
  40de16:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40de18:	6973      	ldr	r3, [r6, #20]
  40de1a:	4619      	mov	r1, r3
  40de1c:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40de1e:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40de22:	4543      	cmp	r3, r8
  40de24:	d802      	bhi.n	40de2c <lv_draw_label+0x1b8>
  40de26:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40de28:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40de2a:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40de2c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40de30:	f013 0f03 	tst.w	r3, #3
  40de34:	d144      	bne.n	40dec0 <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40de36:	a81a      	add	r0, sp, #104	; 0x68
  40de38:	4b45      	ldr	r3, [pc, #276]	; (40df50 <lv_draw_label+0x2dc>)
  40de3a:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40de3c:	88b3      	ldrh	r3, [r6, #4]
  40de3e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40de42:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40de46:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40de48:	2300      	movs	r3, #0
  40de4a:	9311      	str	r3, [sp, #68]	; 0x44
  40de4c:	f8cd b01c 	str.w	fp, [sp, #28]
  40de50:	46bb      	mov	fp, r7
  40de52:	46c2      	mov	sl, r8
  40de54:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40de56:	e170      	b.n	40e13a <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40de58:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40de5c:	9200      	str	r2, [sp, #0]
  40de5e:	9a06      	ldr	r2, [sp, #24]
  40de60:	ebab 0107 	sub.w	r1, fp, r7
  40de64:	980c      	ldr	r0, [sp, #48]	; 0x30
  40de66:	4438      	add	r0, r7
  40de68:	4c3a      	ldr	r4, [pc, #232]	; (40df54 <lv_draw_label+0x2e0>)
  40de6a:	47a0      	blx	r4
  40de6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40de6e:	8893      	ldrh	r3, [r2, #4]
  40de70:	8812      	ldrh	r2, [r2, #0]
  40de72:	1a9b      	subs	r3, r3, r2
  40de74:	b29b      	uxth	r3, r3
  40de76:	3301      	adds	r3, #1
  40de78:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40de7a:	1a1b      	subs	r3, r3, r0
  40de7c:	d406      	bmi.n	40de8c <lv_draw_label+0x218>
  40de7e:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40de82:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40de86:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40de8a:	e7c3      	b.n	40de14 <lv_draw_label+0x1a0>
  40de8c:	3301      	adds	r3, #1
  40de8e:	e7f6      	b.n	40de7e <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40de90:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40de94:	9200      	str	r2, [sp, #0]
  40de96:	9a06      	ldr	r2, [sp, #24]
  40de98:	ebab 0107 	sub.w	r1, fp, r7
  40de9c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40de9e:	4438      	add	r0, r7
  40dea0:	4c2c      	ldr	r4, [pc, #176]	; (40df54 <lv_draw_label+0x2e0>)
  40dea2:	47a0      	blx	r4
  40dea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dea6:	8893      	ldrh	r3, [r2, #4]
  40dea8:	8812      	ldrh	r2, [r2, #0]
  40deaa:	1a9b      	subs	r3, r3, r2
  40deac:	b29b      	uxth	r3, r3
  40deae:	3301      	adds	r3, #1
  40deb0:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40deb2:	1a1b      	subs	r3, r3, r0
  40deb4:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40deb8:	4413      	add	r3, r2
  40deba:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40debe:	e7a9      	b.n	40de14 <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40dec0:	a830      	add	r0, sp, #192	; 0xc0
  40dec2:	4b25      	ldr	r3, [pc, #148]	; (40df58 <lv_draw_label+0x2e4>)
  40dec4:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40dec6:	8833      	ldrh	r3, [r6, #0]
  40dec8:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40decc:	9b06      	ldr	r3, [sp, #24]
  40dece:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40ded2:	b173      	cbz	r3, 40def2 <lv_draw_label+0x27e>
  40ded4:	b21b      	sxth	r3, r3
  40ded6:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40deda:	7b33      	ldrb	r3, [r6, #12]
  40dedc:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40dee0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40dee4:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40dee8:	f362 0301 	bfi	r3, r2, #0, #2
  40deec:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40def0:	e7a1      	b.n	40de36 <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40def2:	2301      	movs	r3, #1
  40def4:	e7ef      	b.n	40ded6 <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40def6:	4b19      	ldr	r3, [pc, #100]	; (40df5c <lv_draw_label+0x2e8>)
  40def8:	681b      	ldr	r3, [r3, #0]
  40defa:	4459      	add	r1, fp
  40defc:	980c      	ldr	r0, [sp, #48]	; 0x30
  40defe:	4798      	blx	r3
  40df00:	9008      	str	r0, [sp, #32]
  40df02:	e093      	b.n	40e02c <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40df04:	b91f      	cbnz	r7, 40df0e <lv_draw_label+0x29a>
                        par_start = i;
  40df06:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40df08:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40df0a:	2701      	movs	r7, #1
                        continue;
  40df0c:	e07c      	b.n	40e008 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40df0e:	2f01      	cmp	r7, #1
  40df10:	d004      	beq.n	40df1c <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40df12:	2f02      	cmp	r7, #2
  40df14:	f040 80a0 	bne.w	40e058 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40df18:	2700      	movs	r7, #0
  40df1a:	e075      	b.n	40e008 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40df1c:	2700      	movs	r7, #0
  40df1e:	e09b      	b.n	40e058 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40df20:	9b05      	ldr	r3, [sp, #20]
  40df22:	2b20      	cmp	r3, #32
  40df24:	d170      	bne.n	40e008 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40df26:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40df28:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40df2a:	1a9b      	subs	r3, r3, r2
  40df2c:	2b07      	cmp	r3, #7
  40df2e:	d004      	beq.n	40df3a <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40df30:	8833      	ldrh	r3, [r6, #0]
  40df32:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40df36:	2702      	movs	r7, #2
                    continue;
  40df38:	e066      	b.n	40e008 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40df3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40df3c:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40df3e:	aa18      	add	r2, sp, #96	; 0x60
  40df40:	2306      	movs	r3, #6
  40df42:	e012      	b.n	40df6a <lv_draw_label+0x2f6>
  40df44:	004151bb 	.word	0x004151bb
  40df48:	00417a51 	.word	0x00417a51
  40df4c:	004178c5 	.word	0x004178c5
  40df50:	00412065 	.word	0x00412065
  40df54:	004179a5 	.word	0x004179a5
  40df58:	0040ea7d 	.word	0x0040ea7d
  40df5c:	20400054 	.word	0x20400054
        *d8 = *s8;
  40df60:	f811 0b01 	ldrb.w	r0, [r1], #1
  40df64:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40df68:	3b01      	subs	r3, #1
    while(len) {
  40df6a:	2b00      	cmp	r3, #0
  40df6c:	d1f8      	bne.n	40df60 <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40df6e:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40df72:	4db8      	ldr	r5, [pc, #736]	; (40e254 <lv_draw_label+0x5e0>)
  40df74:	47a8      	blx	r5
  40df76:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40df7a:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40df7e:	47a8      	blx	r5
  40df80:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40df82:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40df86:	47a8      	blx	r5
  40df88:	0104      	lsls	r4, r0, #4
  40df8a:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40df8e:	47a8      	blx	r5
  40df90:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40df92:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40df96:	47a8      	blx	r5
  40df98:	0107      	lsls	r7, r0, #4
  40df9a:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40df9e:	47a8      	blx	r5
  40dfa0:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40dfa2:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40dfa4:	0962      	lsrs	r2, r4, #5
  40dfa6:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40dfaa:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40dfae:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40dfb2:	9914      	ldr	r1, [sp, #80]	; 0x50
  40dfb4:	f362 0102 	bfi	r1, r2, #0, #3
  40dfb8:	460a      	mov	r2, r1
  40dfba:	f368 02c7 	bfi	r2, r8, #3, #5
  40dfbe:	f363 220c 	bfi	r2, r3, #8, #5
  40dfc2:	4613      	mov	r3, r2
  40dfc4:	f364 334f 	bfi	r3, r4, #13, #3
  40dfc8:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40dfcc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40dfd0:	2702      	movs	r7, #2
  40dfd2:	e019      	b.n	40e008 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40dfd4:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40dfd8:	e045      	b.n	40e066 <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40dfda:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40dfde:	9302      	str	r3, [sp, #8]
  40dfe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40dfe2:	9301      	str	r3, [sp, #4]
  40dfe4:	f8ad 8000 	strh.w	r8, [sp]
  40dfe8:	9b05      	ldr	r3, [sp, #20]
  40dfea:	9a06      	ldr	r2, [sp, #24]
  40dfec:	9909      	ldr	r1, [sp, #36]	; 0x24
  40dfee:	a833      	add	r0, sp, #204	; 0xcc
  40dff0:	4c99      	ldr	r4, [pc, #612]	; (40e258 <lv_draw_label+0x5e4>)
  40dff2:	47a0      	blx	r4
            if(letter_w > 0) {
  40dff4:	2d00      	cmp	r5, #0
  40dff6:	dd07      	ble.n	40e008 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40dff8:	8a33      	ldrh	r3, [r6, #16]
  40dffa:	441d      	add	r5, r3
  40dffc:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e000:	fa13 f585 	uxtah	r5, r3, r5
  40e004:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40e008:	9b07      	ldr	r3, [sp, #28]
  40e00a:	eba3 030b 	sub.w	r3, r3, fp
  40e00e:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40e010:	428b      	cmp	r3, r1
  40e012:	d95b      	bls.n	40e0cc <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40e014:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40e018:	45a2      	cmp	sl, r4
  40e01a:	bf18      	it	ne
  40e01c:	45a1      	cmpne	r9, r4
  40e01e:	bf14      	ite	ne
  40e020:	2401      	movne	r4, #1
  40e022:	2400      	moveq	r4, #0
  40e024:	f47f af67 	bne.w	40def6 <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40e028:	2300      	movs	r3, #0
  40e02a:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40e02c:	4d8b      	ldr	r5, [pc, #556]	; (40e25c <lv_draw_label+0x5e8>)
  40e02e:	682b      	ldr	r3, [r5, #0]
  40e030:	a92f      	add	r1, sp, #188	; 0xbc
  40e032:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40e036:	4640      	mov	r0, r8
  40e038:	4798      	blx	r3
  40e03a:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40e03c:	682b      	ldr	r3, [r5, #0]
  40e03e:	2100      	movs	r1, #0
  40e040:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40e042:	4440      	add	r0, r8
  40e044:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40e046:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e04a:	f013 0f01 	tst.w	r3, #1
  40e04e:	d006      	beq.n	40e05e <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40e050:	9b05      	ldr	r3, [sp, #20]
  40e052:	2b23      	cmp	r3, #35	; 0x23
  40e054:	f43f af56 	beq.w	40df04 <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40e058:	2f01      	cmp	r7, #1
  40e05a:	f43f af61 	beq.w	40df20 <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40e05e:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40e062:	2f02      	cmp	r7, #2
  40e064:	d0b6      	beq.n	40dfd4 <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40e066:	4602      	mov	r2, r0
  40e068:	9905      	ldr	r1, [sp, #20]
  40e06a:	9806      	ldr	r0, [sp, #24]
  40e06c:	4b7c      	ldr	r3, [pc, #496]	; (40e260 <lv_draw_label+0x5ec>)
  40e06e:	4798      	blx	r3
  40e070:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40e072:	2c00      	cmp	r4, #0
  40e074:	d0b1      	beq.n	40dfda <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40e076:	9a08      	ldr	r2, [sp, #32]
  40e078:	4613      	mov	r3, r2
  40e07a:	4592      	cmp	sl, r2
  40e07c:	bf8c      	ite	hi
  40e07e:	2300      	movhi	r3, #0
  40e080:	2301      	movls	r3, #1
  40e082:	4591      	cmp	r9, r2
  40e084:	bf98      	it	ls
  40e086:	2300      	movls	r3, #0
  40e088:	2b00      	cmp	r3, #0
  40e08a:	d0a6      	beq.n	40dfda <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40e08c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40e090:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40e094:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40e098:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40e09c:	fa10 f383 	uxtah	r3, r0, r3
  40e0a0:	8a31      	ldrh	r1, [r6, #16]
  40e0a2:	fa11 f383 	uxtah	r3, r1, r3
  40e0a6:	b29b      	uxth	r3, r3
  40e0a8:	3b01      	subs	r3, #1
  40e0aa:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40e0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40e0b0:	fa13 f282 	uxtah	r2, r3, r2
  40e0b4:	b292      	uxth	r2, r2
  40e0b6:	3a01      	subs	r2, #1
  40e0b8:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40e0bc:	aa1a      	add	r2, sp, #104	; 0x68
  40e0be:	9909      	ldr	r1, [sp, #36]	; 0x24
  40e0c0:	a818      	add	r0, sp, #96	; 0x60
  40e0c2:	4b68      	ldr	r3, [pc, #416]	; (40e264 <lv_draw_label+0x5f0>)
  40e0c4:	4798      	blx	r3
                    color = dsc->sel_color;
  40e0c6:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40e0ca:	e786      	b.n	40dfda <lv_draw_label+0x366>
  40e0cc:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40e0ce:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e0d2:	f013 0f02 	tst.w	r3, #2
  40e0d6:	d143      	bne.n	40e160 <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40e0d8:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40e0dc:	f013 0f01 	tst.w	r3, #1
  40e0e0:	d166      	bne.n	40e1b0 <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e0e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e0e4:	9f07      	ldr	r7, [sp, #28]
  40e0e6:	19d5      	adds	r5, r2, r7
  40e0e8:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40e0ec:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40e0f0:	9300      	str	r3, [sp, #0]
  40e0f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40e0f4:	9906      	ldr	r1, [sp, #24]
  40e0f6:	4628      	mov	r0, r5
  40e0f8:	4c5b      	ldr	r4, [pc, #364]	; (40e268 <lv_draw_label+0x5f4>)
  40e0fa:	47a0      	blx	r4
  40e0fc:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40e0fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40e100:	f9b3 3000 	ldrsh.w	r3, [r3]
  40e104:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40e108:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40e10c:	f012 0f04 	tst.w	r2, #4
  40e110:	d170      	bne.n	40e1f4 <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40e112:	f012 0f08 	tst.w	r2, #8
  40e116:	f040 8087 	bne.w	40e228 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40e11a:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e11e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40e120:	4413      	add	r3, r2
  40e122:	b21b      	sxth	r3, r3
  40e124:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40e128:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e12a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40e12e:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40e132:	4293      	cmp	r3, r2
  40e134:	f73f ada9 	bgt.w	40dc8a <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40e138:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40e13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40e13c:	4613      	mov	r3, r2
  40e13e:	445b      	add	r3, fp
  40e140:	930a      	str	r3, [sp, #40]	; 0x28
  40e142:	f812 300b 	ldrb.w	r3, [r2, fp]
  40e146:	2b00      	cmp	r3, #0
  40e148:	f43f ad9f 	beq.w	40dc8a <lv_draw_label+0x16>
        pos.x += x_ofs;
  40e14c:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e150:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40e152:	4413      	add	r3, r2
  40e154:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40e158:	2700      	movs	r7, #0
  40e15a:	972f      	str	r7, [sp, #188]	; 0xbc
  40e15c:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40e15e:	e753      	b.n	40e008 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40e160:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40e164:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40e168:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e16c:	68b2      	ldr	r2, [r6, #8]
  40e16e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40e172:	2a00      	cmp	r2, #0
  40e174:	db18      	blt.n	40e1a8 <lv_draw_label+0x534>
  40e176:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e17a:	b29b      	uxth	r3, r3
  40e17c:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40e180:	2a00      	cmp	r2, #0
  40e182:	db13      	blt.n	40e1ac <lv_draw_label+0x538>
  40e184:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40e188:	b21b      	sxth	r3, r3
  40e18a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40e18e:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40e192:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40e196:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40e19a:	ab30      	add	r3, sp, #192	; 0xc0
  40e19c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e19e:	a918      	add	r1, sp, #96	; 0x60
  40e1a0:	a817      	add	r0, sp, #92	; 0x5c
  40e1a2:	4c32      	ldr	r4, [pc, #200]	; (40e26c <lv_draw_label+0x5f8>)
  40e1a4:	47a0      	blx	r4
  40e1a6:	e797      	b.n	40e0d8 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40e1a8:	3201      	adds	r2, #1
  40e1aa:	e7e4      	b.n	40e176 <lv_draw_label+0x502>
  40e1ac:	3201      	adds	r2, #1
  40e1ae:	e7e9      	b.n	40e184 <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40e1b0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40e1b4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40e1b8:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40e1bc:	68b2      	ldr	r2, [r6, #8]
  40e1be:	8911      	ldrh	r1, [r2, #8]
  40e1c0:	440b      	add	r3, r1
  40e1c2:	b29b      	uxth	r3, r3
  40e1c4:	8952      	ldrh	r2, [r2, #10]
  40e1c6:	1a9b      	subs	r3, r3, r2
  40e1c8:	b29b      	uxth	r3, r3
  40e1ca:	9a06      	ldr	r2, [sp, #24]
  40e1cc:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40e1d0:	b292      	uxth	r2, r2
  40e1d2:	1a9b      	subs	r3, r3, r2
  40e1d4:	b21b      	sxth	r3, r3
  40e1d6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40e1da:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40e1de:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40e1e2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40e1e6:	ab30      	add	r3, sp, #192	; 0xc0
  40e1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40e1ea:	a918      	add	r1, sp, #96	; 0x60
  40e1ec:	a817      	add	r0, sp, #92	; 0x5c
  40e1ee:	4c1f      	ldr	r4, [pc, #124]	; (40e26c <lv_draw_label+0x5f8>)
  40e1f0:	47a0      	blx	r4
  40e1f2:	e776      	b.n	40e0e2 <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e1f4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e1f8:	9200      	str	r2, [sp, #0]
  40e1fa:	9a06      	ldr	r2, [sp, #24]
  40e1fc:	4601      	mov	r1, r0
  40e1fe:	4628      	mov	r0, r5
  40e200:	4d1b      	ldr	r5, [pc, #108]	; (40e270 <lv_draw_label+0x5fc>)
  40e202:	47a8      	blx	r5
  40e204:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e206:	8893      	ldrh	r3, [r2, #4]
  40e208:	8812      	ldrh	r2, [r2, #0]
  40e20a:	1a9b      	subs	r3, r3, r2
  40e20c:	b29b      	uxth	r3, r3
  40e20e:	3301      	adds	r3, #1
  40e210:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40e212:	1a18      	subs	r0, r3, r0
  40e214:	d406      	bmi.n	40e224 <lv_draw_label+0x5b0>
  40e216:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40e21a:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40e21e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e222:	e77a      	b.n	40e11a <lv_draw_label+0x4a6>
  40e224:	3001      	adds	r0, #1
  40e226:	e7f6      	b.n	40e216 <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40e228:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40e22c:	9200      	str	r2, [sp, #0]
  40e22e:	9a06      	ldr	r2, [sp, #24]
  40e230:	4601      	mov	r1, r0
  40e232:	4628      	mov	r0, r5
  40e234:	4d0e      	ldr	r5, [pc, #56]	; (40e270 <lv_draw_label+0x5fc>)
  40e236:	47a8      	blx	r5
  40e238:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40e23a:	8893      	ldrh	r3, [r2, #4]
  40e23c:	8812      	ldrh	r2, [r2, #0]
  40e23e:	1a9b      	subs	r3, r3, r2
  40e240:	b29b      	uxth	r3, r3
  40e242:	3301      	adds	r3, #1
  40e244:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40e246:	1a1b      	subs	r3, r3, r0
  40e248:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40e24c:	4403      	add	r3, r0
  40e24e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40e252:	e762      	b.n	40e11a <lv_draw_label+0x4a6>
  40e254:	0040d3a9 	.word	0x0040d3a9
  40e258:	0040db41 	.word	0x0040db41
  40e25c:	20400058 	.word	0x20400058
  40e260:	00413745 	.word	0x00413745
  40e264:	004120b1 	.word	0x004120b1
  40e268:	004178c5 	.word	0x004178c5
  40e26c:	0040ea99 	.word	0x0040ea99
  40e270:	004179a5 	.word	0x004179a5

0040e274 <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e278:	b08b      	sub	sp, #44	; 0x2c
  40e27a:	4681      	mov	r9, r0
  40e27c:	468a      	mov	sl, r1
  40e27e:	9204      	str	r2, [sp, #16]
  40e280:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40e282:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e286:	4b76      	ldr	r3, [pc, #472]	; (40e460 <draw_line_hor+0x1ec>)
  40e288:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e28a:	4b76      	ldr	r3, [pc, #472]	; (40e464 <draw_line_hor+0x1f0>)
  40e28c:	4798      	blx	r3
  40e28e:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e290:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40e294:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40e296:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e29a:	f005 0501 	and.w	r5, r5, #1
  40e29e:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e2a0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e2a4:	b123      	cbz	r3, 40e2b0 <draw_line_hor+0x3c>
  40e2a6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e2aa:	b943      	cbnz	r3, 40e2be <draw_line_hor+0x4a>
  40e2ac:	2700      	movs	r7, #0
  40e2ae:	e000      	b.n	40e2b2 <draw_line_hor+0x3e>
  40e2b0:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e2b2:	4b6d      	ldr	r3, [pc, #436]	; (40e468 <draw_line_hor+0x1f4>)
  40e2b4:	4798      	blx	r3
  40e2b6:	b920      	cbnz	r0, 40e2c2 <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40e2b8:	bb7f      	cbnz	r7, 40e31a <draw_line_hor+0xa6>
    bool simple_mode = true;
  40e2ba:	2201      	movs	r2, #1
  40e2bc:	e002      	b.n	40e2c4 <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e2be:	2701      	movs	r7, #1
  40e2c0:	e7f7      	b.n	40e2b2 <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e2c2:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40e2c4:	f9ba 3000 	ldrsh.w	r3, [sl]
  40e2c8:	f9b9 1000 	ldrsh.w	r1, [r9]
  40e2cc:	4618      	mov	r0, r3
  40e2ce:	428b      	cmp	r3, r1
  40e2d0:	bfa8      	it	ge
  40e2d2:	4608      	movge	r0, r1
  40e2d4:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40e2d8:	428b      	cmp	r3, r1
  40e2da:	bfb8      	it	lt
  40e2dc:	460b      	movlt	r3, r1
  40e2de:	b29b      	uxth	r3, r3
  40e2e0:	3b01      	subs	r3, #1
  40e2e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40e2e6:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40e2ea:	1b5d      	subs	r5, r3, r5
  40e2ec:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40e2f0:	4498      	add	r8, r3
  40e2f2:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e2f6:	b192      	cbz	r2, 40e31e <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e2f8:	7a63      	ldrb	r3, [r4, #9]
  40e2fa:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e2fe:	8822      	ldrh	r2, [r4, #0]
  40e300:	9302      	str	r3, [sp, #8]
  40e302:	f8cd b004 	str.w	fp, [sp, #4]
  40e306:	2301      	movs	r3, #1
  40e308:	9300      	str	r3, [sp, #0]
  40e30a:	2300      	movs	r3, #0
  40e30c:	a908      	add	r1, sp, #32
  40e30e:	9804      	ldr	r0, [sp, #16]
  40e310:	4c56      	ldr	r4, [pc, #344]	; (40e46c <draw_line_hor+0x1f8>)
  40e312:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e314:	b00b      	add	sp, #44	; 0x2c
  40e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e31a:	2200      	movs	r2, #0
  40e31c:	e7d2      	b.n	40e2c4 <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e31e:	aa08      	add	r2, sp, #32
  40e320:	9904      	ldr	r1, [sp, #16]
  40e322:	4610      	mov	r0, r2
  40e324:	4b52      	ldr	r3, [pc, #328]	; (40e470 <draw_line_hor+0x1fc>)
  40e326:	4798      	blx	r3
        if(!is_common) return;
  40e328:	2800      	cmp	r0, #0
  40e32a:	d0f3      	beq.n	40e314 <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40e32c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40e330:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40e334:	b28b      	uxth	r3, r1
  40e336:	ebae 0503 	sub.w	r5, lr, r3
  40e33a:	b2ad      	uxth	r5, r5
  40e33c:	fa0f fc85 	sxth.w	ip, r5
  40e340:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40e344:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e348:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40e34c:	eba2 0008 	sub.w	r0, r2, r8
  40e350:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40e354:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40e358:	1ac3      	subs	r3, r0, r3
  40e35a:	b29b      	uxth	r3, r3
  40e35c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40e360:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40e364:	eba9 0808 	sub.w	r8, r9, r8
  40e368:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40e36c:	1b5d      	subs	r5, r3, r5
  40e36e:	b2ad      	uxth	r5, r5
  40e370:	3501      	adds	r5, #1
  40e372:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e374:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e378:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e37c:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e380:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40e384:	b1a7      	cbz	r7, 40e3b0 <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40e386:	4461      	add	r1, ip
  40e388:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e38c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40e390:	4413      	add	r3, r2
  40e392:	fb91 fcf3 	sdiv	ip, r1, r3
  40e396:	fb03 111c 	mls	r1, r3, ip, r1
  40e39a:	b20b      	sxth	r3, r1
  40e39c:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e39e:	46ab      	mov	fp, r5
  40e3a0:	4628      	mov	r0, r5
  40e3a2:	4b34      	ldr	r3, [pc, #208]	; (40e474 <draw_line_hor+0x200>)
  40e3a4:	4798      	blx	r3
  40e3a6:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e3a8:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40e3ac:	46ba      	mov	sl, r7
  40e3ae:	e037      	b.n	40e420 <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40e3b0:	2300      	movs	r3, #0
  40e3b2:	9305      	str	r3, [sp, #20]
  40e3b4:	e7f3      	b.n	40e39e <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e3b6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40e3ba:	440b      	add	r3, r1
  40e3bc:	429a      	cmp	r2, r3
  40e3be:	da13      	bge.n	40e3e8 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40e3c0:	2300      	movs	r3, #0
  40e3c2:	f809 3000 	strb.w	r3, [r9, r0]
  40e3c6:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40e3c8:	3001      	adds	r0, #1
  40e3ca:	b200      	sxth	r0, r0
  40e3cc:	3301      	adds	r3, #1
  40e3ce:	b21a      	sxth	r2, r3
  40e3d0:	42a8      	cmp	r0, r5
  40e3d2:	da0b      	bge.n	40e3ec <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40e3d4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e3d8:	429a      	cmp	r2, r3
  40e3da:	dcec      	bgt.n	40e3b6 <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40e3dc:	b299      	uxth	r1, r3
  40e3de:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40e3e0:	fa10 f082 	uxtah	r0, r0, r2
  40e3e4:	b200      	sxth	r0, r0
  40e3e6:	e7ef      	b.n	40e3c8 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40e3e8:	2300      	movs	r3, #0
  40e3ea:	e7ed      	b.n	40e3c8 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40e3ec:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40e3ee:	7a63      	ldrb	r3, [r4, #9]
  40e3f0:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40e3f4:	9302      	str	r3, [sp, #8]
  40e3f6:	7a23      	ldrb	r3, [r4, #8]
  40e3f8:	9301      	str	r3, [sp, #4]
  40e3fa:	9000      	str	r0, [sp, #0]
  40e3fc:	464b      	mov	r3, r9
  40e3fe:	8822      	ldrh	r2, [r4, #0]
  40e400:	a906      	add	r1, sp, #24
  40e402:	9804      	ldr	r0, [sp, #16]
  40e404:	4f19      	ldr	r7, [pc, #100]	; (40e46c <draw_line_hor+0x1f8>)
  40e406:	47b8      	blx	r7
            fill_area.y1++;
  40e408:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e40c:	3301      	adds	r3, #1
  40e40e:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e412:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e416:	3301      	adds	r3, #1
  40e418:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e41c:	f108 0801 	add.w	r8, r8, #1
  40e420:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e424:	4598      	cmp	r8, r3
  40e426:	dc17      	bgt.n	40e458 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e428:	4659      	mov	r1, fp
  40e42a:	4648      	mov	r0, r9
  40e42c:	4b12      	ldr	r3, [pc, #72]	; (40e478 <draw_line_hor+0x204>)
  40e42e:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e430:	8a31      	ldrh	r1, [r6, #16]
  40e432:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e436:	4419      	add	r1, r3
  40e438:	8a72      	ldrh	r2, [r6, #18]
  40e43a:	4442      	add	r2, r8
  40e43c:	462b      	mov	r3, r5
  40e43e:	b212      	sxth	r2, r2
  40e440:	b209      	sxth	r1, r1
  40e442:	4648      	mov	r0, r9
  40e444:	4f0d      	ldr	r7, [pc, #52]	; (40e47c <draw_line_hor+0x208>)
  40e446:	47b8      	blx	r7
            if(dashed) {
  40e448:	f1ba 0f00 	cmp.w	sl, #0
  40e44c:	d0cf      	beq.n	40e3ee <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e44e:	2800      	cmp	r0, #0
  40e450:	d0cd      	beq.n	40e3ee <draw_line_hor+0x17a>
  40e452:	9a05      	ldr	r2, [sp, #20]
  40e454:	2000      	movs	r0, #0
  40e456:	e7bb      	b.n	40e3d0 <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40e458:	4648      	mov	r0, r9
  40e45a:	4b09      	ldr	r3, [pc, #36]	; (40e480 <draw_line_hor+0x20c>)
  40e45c:	4798      	blx	r3
  40e45e:	e759      	b.n	40e314 <draw_line_hor+0xa0>
  40e460:	00409531 	.word	0x00409531
  40e464:	004149fd 	.word	0x004149fd
  40e468:	0040f8ed 	.word	0x0040f8ed
  40e46c:	0040c5c9 	.word	0x0040c5c9
  40e470:	004151bb 	.word	0x004151bb
  40e474:	00416531 	.word	0x00416531
  40e478:	00416715 	.word	0x00416715
  40e47c:	0040f825 	.word	0x0040f825
  40e480:	004162e1 	.word	0x004162e1

0040e484 <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e488:	b08b      	sub	sp, #44	; 0x2c
  40e48a:	4680      	mov	r8, r0
  40e48c:	468a      	mov	sl, r1
  40e48e:	9204      	str	r2, [sp, #16]
  40e490:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40e492:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e496:	4b71      	ldr	r3, [pc, #452]	; (40e65c <draw_line_ver+0x1d8>)
  40e498:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e49a:	4b71      	ldr	r3, [pc, #452]	; (40e660 <draw_line_ver+0x1dc>)
  40e49c:	4798      	blx	r3
  40e49e:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e4a0:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40e4a4:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40e4a6:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e4aa:	f004 0401 	and.w	r4, r4, #1
  40e4ae:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e4b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e4b4:	b123      	cbz	r3, 40e4c0 <draw_line_ver+0x3c>
  40e4b6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40e4ba:	b943      	cbnz	r3, 40e4ce <draw_line_ver+0x4a>
  40e4bc:	2600      	movs	r6, #0
  40e4be:	e000      	b.n	40e4c2 <draw_line_ver+0x3e>
  40e4c0:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e4c2:	4b68      	ldr	r3, [pc, #416]	; (40e664 <draw_line_ver+0x1e0>)
  40e4c4:	4798      	blx	r3
  40e4c6:	b920      	cbnz	r0, 40e4d2 <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40e4c8:	bb7e      	cbnz	r6, 40e52a <draw_line_ver+0xa6>
    bool simple_mode = true;
  40e4ca:	2201      	movs	r2, #1
  40e4cc:	e002      	b.n	40e4d4 <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e4ce:	2601      	movs	r6, #1
  40e4d0:	e7f7      	b.n	40e4c2 <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e4d2:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40e4d4:	f8b8 3000 	ldrh.w	r3, [r8]
  40e4d8:	1b1c      	subs	r4, r3, r4
  40e4da:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40e4de:	4499      	add	r9, r3
  40e4e0:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40e4e4:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40e4e8:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40e4ec:	4618      	mov	r0, r3
  40e4ee:	428b      	cmp	r3, r1
  40e4f0:	bfa8      	it	ge
  40e4f2:	4608      	movge	r0, r1
  40e4f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40e4f8:	428b      	cmp	r3, r1
  40e4fa:	bfb8      	it	lt
  40e4fc:	460b      	movlt	r3, r1
  40e4fe:	b29b      	uxth	r3, r3
  40e500:	3b01      	subs	r3, #1
  40e502:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e506:	b192      	cbz	r2, 40e52e <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e508:	7a6b      	ldrb	r3, [r5, #9]
  40e50a:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e50e:	882a      	ldrh	r2, [r5, #0]
  40e510:	9302      	str	r3, [sp, #8]
  40e512:	f8cd b004 	str.w	fp, [sp, #4]
  40e516:	2301      	movs	r3, #1
  40e518:	9300      	str	r3, [sp, #0]
  40e51a:	2300      	movs	r3, #0
  40e51c:	a908      	add	r1, sp, #32
  40e51e:	9804      	ldr	r0, [sp, #16]
  40e520:	4c51      	ldr	r4, [pc, #324]	; (40e668 <draw_line_ver+0x1e4>)
  40e522:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e524:	b00b      	add	sp, #44	; 0x2c
  40e526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e52a:	2200      	movs	r2, #0
  40e52c:	e7d2      	b.n	40e4d4 <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e52e:	aa08      	add	r2, sp, #32
  40e530:	9904      	ldr	r1, [sp, #16]
  40e532:	4610      	mov	r0, r2
  40e534:	4b4d      	ldr	r3, [pc, #308]	; (40e66c <draw_line_ver+0x1e8>)
  40e536:	4798      	blx	r3
        if(!is_common) return;
  40e538:	2800      	cmp	r0, #0
  40e53a:	d0f3      	beq.n	40e524 <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40e53c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40e540:	8a3b      	ldrh	r3, [r7, #16]
  40e542:	eba0 0b03 	sub.w	fp, r0, r3
  40e546:	fa1f fb8b 	uxth.w	fp, fp
  40e54a:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40e54e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e552:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40e556:	eba2 010e 	sub.w	r1, r2, lr
  40e55a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40e55e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e562:	1acb      	subs	r3, r1, r3
  40e564:	b29b      	uxth	r3, r3
  40e566:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40e56a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40e56e:	eba4 040e 	sub.w	r4, r4, lr
  40e572:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40e576:	eba3 0b0b 	sub.w	fp, r3, fp
  40e57a:	fa1f fb8b 	uxth.w	fp, fp
  40e57e:	f10b 0b01 	add.w	fp, fp, #1
  40e582:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e586:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e58a:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e58e:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e592:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e596:	f8cd b014 	str.w	fp, [sp, #20]
  40e59a:	4658      	mov	r0, fp
  40e59c:	4b34      	ldr	r3, [pc, #208]	; (40e670 <draw_line_ver+0x1ec>)
  40e59e:	4798      	blx	r3
  40e5a0:	4680      	mov	r8, r0
        if(dashed) {
  40e5a2:	b19e      	cbz	r6, 40e5cc <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40e5a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40e5a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40e5ac:	441a      	add	r2, r3
  40e5ae:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e5b2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40e5b6:	444b      	add	r3, r9
  40e5b8:	fb92 f9f3 	sdiv	r9, r2, r3
  40e5bc:	fb03 2919 	mls	r9, r3, r9, r2
  40e5c0:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e5c4:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e5c8:	46b2      	mov	sl, r6
  40e5ca:	e01c      	b.n	40e606 <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40e5cc:	f04f 0900 	mov.w	r9, #0
  40e5d0:	e7f8      	b.n	40e5c4 <draw_line_ver+0x140>
                dash_cnt ++;
  40e5d2:	f109 0901 	add.w	r9, r9, #1
  40e5d6:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40e5da:	2300      	movs	r3, #0
  40e5dc:	9302      	str	r3, [sp, #8]
  40e5de:	7a2b      	ldrb	r3, [r5, #8]
  40e5e0:	9301      	str	r3, [sp, #4]
  40e5e2:	9000      	str	r0, [sp, #0]
  40e5e4:	4643      	mov	r3, r8
  40e5e6:	882a      	ldrh	r2, [r5, #0]
  40e5e8:	a906      	add	r1, sp, #24
  40e5ea:	9804      	ldr	r0, [sp, #16]
  40e5ec:	4e1e      	ldr	r6, [pc, #120]	; (40e668 <draw_line_ver+0x1e4>)
  40e5ee:	47b0      	blx	r6
            fill_area.y1++;
  40e5f0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e5f4:	3301      	adds	r3, #1
  40e5f6:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e5fa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e5fe:	3301      	adds	r3, #1
  40e600:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e604:	3401      	adds	r4, #1
  40e606:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e60a:	429c      	cmp	r4, r3
  40e60c:	dc21      	bgt.n	40e652 <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e60e:	9905      	ldr	r1, [sp, #20]
  40e610:	4640      	mov	r0, r8
  40e612:	4b18      	ldr	r3, [pc, #96]	; (40e674 <draw_line_ver+0x1f0>)
  40e614:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e616:	8a39      	ldrh	r1, [r7, #16]
  40e618:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e61c:	4419      	add	r1, r3
  40e61e:	8a7a      	ldrh	r2, [r7, #18]
  40e620:	4422      	add	r2, r4
  40e622:	465b      	mov	r3, fp
  40e624:	b212      	sxth	r2, r2
  40e626:	b209      	sxth	r1, r1
  40e628:	4640      	mov	r0, r8
  40e62a:	4e13      	ldr	r6, [pc, #76]	; (40e678 <draw_line_ver+0x1f4>)
  40e62c:	47b0      	blx	r6
            if(dashed) {
  40e62e:	f1ba 0f00 	cmp.w	sl, #0
  40e632:	d0d2      	beq.n	40e5da <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e634:	2800      	cmp	r0, #0
  40e636:	d0cc      	beq.n	40e5d2 <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40e638:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40e63c:	4591      	cmp	r9, r2
  40e63e:	dd00      	ble.n	40e642 <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40e640:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e642:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e646:	4413      	add	r3, r2
  40e648:	4599      	cmp	r9, r3
  40e64a:	dbc2      	blt.n	40e5d2 <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40e64c:	f04f 0900 	mov.w	r9, #0
  40e650:	e7bf      	b.n	40e5d2 <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40e652:	4640      	mov	r0, r8
  40e654:	4b09      	ldr	r3, [pc, #36]	; (40e67c <draw_line_ver+0x1f8>)
  40e656:	4798      	blx	r3
  40e658:	e764      	b.n	40e524 <draw_line_ver+0xa0>
  40e65a:	bf00      	nop
  40e65c:	00409531 	.word	0x00409531
  40e660:	004149fd 	.word	0x004149fd
  40e664:	0040f8ed 	.word	0x0040f8ed
  40e668:	0040c5c9 	.word	0x0040c5c9
  40e66c:	004151bb 	.word	0x004151bb
  40e670:	00416531 	.word	0x00416531
  40e674:	00416715 	.word	0x00416715
  40e678:	0040f825 	.word	0x0040f825
  40e67c:	004162e1 	.word	0x004162e1

0040e680 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e684:	b0bf      	sub	sp, #252	; 0xfc
  40e686:	9206      	str	r2, [sp, #24]
  40e688:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40e68a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40e68e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e692:	4293      	cmp	r3, r2
  40e694:	f280 80e7 	bge.w	40e866 <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40e698:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40e69c:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40e6a0:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e6a4:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40e6a8:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e6ac:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40e6b0:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40e6b4:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40e6b8:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40e6bc:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40e6c0:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40e6c4:	1bab      	subs	r3, r5, r6
  40e6c6:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40e6c8:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40e6cc:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40e6d0:	2b00      	cmp	r3, #0
  40e6d2:	bfb8      	it	lt
  40e6d4:	425b      	neglt	r3, r3
  40e6d6:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40e6d8:	9b05      	ldr	r3, [sp, #20]
  40e6da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40e6de:	45d3      	cmp	fp, sl
  40e6e0:	f340 80ce 	ble.w	40e880 <draw_line_skew+0x200>
  40e6e4:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40e6e8:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40e6ec:	49a1      	ldr	r1, [pc, #644]	; (40e974 <draw_line_skew+0x2f4>)
  40e6ee:	5ccc      	ldrb	r4, [r1, r3]
  40e6f0:	fb04 f402 	mul.w	r4, r4, r2
  40e6f4:	343f      	adds	r4, #63	; 0x3f
  40e6f6:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40e6f8:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e6fa:	f003 0201 	and.w	r2, r3, #1
  40e6fe:	18a2      	adds	r2, r4, r2
  40e700:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40e702:	4642      	mov	r2, r8
  40e704:	45b8      	cmp	r8, r7
  40e706:	bfa8      	it	ge
  40e708:	463a      	movge	r2, r7
  40e70a:	b292      	uxth	r2, r2
  40e70c:	b29b      	uxth	r3, r3
  40e70e:	1ad2      	subs	r2, r2, r3
  40e710:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40e714:	4642      	mov	r2, r8
  40e716:	45b8      	cmp	r8, r7
  40e718:	bfb8      	it	lt
  40e71a:	463a      	movlt	r2, r7
  40e71c:	fa13 f282 	uxtah	r2, r3, r2
  40e720:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40e724:	462a      	mov	r2, r5
  40e726:	42b5      	cmp	r5, r6
  40e728:	bfa8      	it	ge
  40e72a:	4632      	movge	r2, r6
  40e72c:	b292      	uxth	r2, r2
  40e72e:	1ad2      	subs	r2, r2, r3
  40e730:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40e734:	462a      	mov	r2, r5
  40e736:	42b5      	cmp	r5, r6
  40e738:	bfb8      	it	lt
  40e73a:	4632      	movlt	r2, r6
  40e73c:	fa13 f382 	uxtah	r3, r3, r2
  40e740:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40e744:	9a06      	ldr	r2, [sp, #24]
  40e746:	a93a      	add	r1, sp, #232	; 0xe8
  40e748:	4608      	mov	r0, r1
  40e74a:	4b8b      	ldr	r3, [pc, #556]	; (40e978 <draw_line_skew+0x2f8>)
  40e74c:	4798      	blx	r3
    if(is_common == false) return;
  40e74e:	2800      	cmp	r0, #0
  40e750:	f000 8187 	beq.w	40ea62 <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40e754:	45d3      	cmp	fp, sl
  40e756:	f340 80b6 	ble.w	40e8c6 <draw_line_skew+0x246>
        if(xdiff > 0) {
  40e75a:	f1b9 0f00 	cmp.w	r9, #0
  40e75e:	f340 8094 	ble.w	40e88a <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e762:	b2b6      	uxth	r6, r6
  40e764:	b2a4      	uxth	r4, r4
  40e766:	1b32      	subs	r2, r6, r4
  40e768:	b2ad      	uxth	r5, r5
  40e76a:	1b2c      	subs	r4, r5, r4
  40e76c:	2300      	movs	r3, #0
  40e76e:	9301      	str	r3, [sp, #4]
  40e770:	b224      	sxth	r4, r4
  40e772:	9400      	str	r4, [sp, #0]
  40e774:	4643      	mov	r3, r8
  40e776:	b212      	sxth	r2, r2
  40e778:	4639      	mov	r1, r7
  40e77a:	a82f      	add	r0, sp, #188	; 0xbc
  40e77c:	4c7f      	ldr	r4, [pc, #508]	; (40e97c <draw_line_skew+0x2fc>)
  40e77e:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e780:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e784:	441e      	add	r6, r3
  40e786:	441d      	add	r5, r3
  40e788:	2301      	movs	r3, #1
  40e78a:	9301      	str	r3, [sp, #4]
  40e78c:	b22d      	sxth	r5, r5
  40e78e:	9500      	str	r5, [sp, #0]
  40e790:	4643      	mov	r3, r8
  40e792:	b232      	sxth	r2, r6
  40e794:	4639      	mov	r1, r7
  40e796:	a824      	add	r0, sp, #144	; 0x90
  40e798:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40e79a:	2100      	movs	r1, #0
  40e79c:	a82f      	add	r0, sp, #188	; 0xbc
  40e79e:	4c78      	ldr	r4, [pc, #480]	; (40e980 <draw_line_skew+0x300>)
  40e7a0:	47a0      	blx	r4
  40e7a2:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40e7a4:	2100      	movs	r1, #0
  40e7a6:	a824      	add	r0, sp, #144	; 0x90
  40e7a8:	47a0      	blx	r4
  40e7aa:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40e7ac:	9b05      	ldr	r3, [sp, #20]
  40e7ae:	7a5b      	ldrb	r3, [r3, #9]
  40e7b0:	f013 0f10 	tst.w	r3, #16
  40e7b4:	f000 80a6 	beq.w	40e904 <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40e7b8:	f04f 33ff 	mov.w	r3, #4294967295
  40e7bc:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40e7be:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e7c0:	4b70      	ldr	r3, [pc, #448]	; (40e984 <draw_line_skew+0x304>)
  40e7c2:	4798      	blx	r3
  40e7c4:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e7c6:	4b70      	ldr	r3, [pc, #448]	; (40e988 <draw_line_skew+0x308>)
  40e7c8:	4798      	blx	r3
  40e7ca:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40e7cc:	8a00      	ldrh	r0, [r0, #16]
  40e7ce:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40e7d2:	1a24      	subs	r4, r4, r0
  40e7d4:	b2a4      	uxth	r4, r4
  40e7d6:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40e7da:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40e7de:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40e7e2:	1a52      	subs	r2, r2, r1
  40e7e4:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40e7e8:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40e7ec:	1a1b      	subs	r3, r3, r0
  40e7ee:	b29b      	uxth	r3, r3
  40e7f0:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40e7f4:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40e7f8:	1a52      	subs	r2, r2, r1
  40e7fa:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40e7fe:	1b1c      	subs	r4, r3, r4
  40e800:	b2a4      	uxth	r4, r4
  40e802:	3401      	adds	r4, #1
  40e804:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40e806:	4628      	mov	r0, r5
  40e808:	4b60      	ldr	r3, [pc, #384]	; (40e98c <draw_line_skew+0x30c>)
  40e80a:	4798      	blx	r3
  40e80c:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e80e:	a83a      	add	r0, sp, #232	; 0xe8
  40e810:	4b5f      	ldr	r3, [pc, #380]	; (40e990 <draw_line_skew+0x310>)
  40e812:	4798      	blx	r3
  40e814:	4583      	cmp	fp, r0
  40e816:	f200 80a3 	bhi.w	40e960 <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40e81a:	4658      	mov	r0, fp
  40e81c:	4b5d      	ldr	r3, [pc, #372]	; (40e994 <draw_line_skew+0x314>)
  40e81e:	4798      	blx	r3
  40e820:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e822:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40e826:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40e82a:	441a      	add	r2, r3
  40e82c:	b212      	sxth	r2, r2
  40e82e:	9204      	str	r2, [sp, #16]
  40e830:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e834:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40e838:	4413      	add	r3, r2
  40e83a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e83e:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40e842:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40e846:	4413      	add	r3, r2
  40e848:	b21b      	sxth	r3, r3
  40e84a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40e84e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40e852:	4659      	mov	r1, fp
  40e854:	4b50      	ldr	r3, [pc, #320]	; (40e998 <draw_line_skew+0x318>)
  40e856:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e858:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40e85c:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40e860:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40e862:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e864:	e0bd      	b.n	40e9e2 <draw_line_skew+0x362>
        p1.y = point2->y;
  40e866:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40e86a:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40e86e:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e872:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40e876:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e87a:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40e87e:	e717      	b.n	40e6b0 <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40e880:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40e884:	fb93 f3fa 	sdiv	r3, r3, sl
  40e888:	e730      	b.n	40e6ec <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e88a:	b2b6      	uxth	r6, r6
  40e88c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e890:	18f2      	adds	r2, r6, r3
  40e892:	b2ad      	uxth	r5, r5
  40e894:	442b      	add	r3, r5
  40e896:	2100      	movs	r1, #0
  40e898:	9101      	str	r1, [sp, #4]
  40e89a:	b21b      	sxth	r3, r3
  40e89c:	9300      	str	r3, [sp, #0]
  40e89e:	4643      	mov	r3, r8
  40e8a0:	b212      	sxth	r2, r2
  40e8a2:	4639      	mov	r1, r7
  40e8a4:	a82f      	add	r0, sp, #188	; 0xbc
  40e8a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40e97c <draw_line_skew+0x2fc>
  40e8aa:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e8ac:	b2a4      	uxth	r4, r4
  40e8ae:	1b36      	subs	r6, r6, r4
  40e8b0:	1b2d      	subs	r5, r5, r4
  40e8b2:	2301      	movs	r3, #1
  40e8b4:	9301      	str	r3, [sp, #4]
  40e8b6:	b22d      	sxth	r5, r5
  40e8b8:	9500      	str	r5, [sp, #0]
  40e8ba:	4643      	mov	r3, r8
  40e8bc:	b232      	sxth	r2, r6
  40e8be:	4639      	mov	r1, r7
  40e8c0:	a824      	add	r0, sp, #144	; 0x90
  40e8c2:	47d0      	blx	sl
  40e8c4:	e769      	b.n	40e79a <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40e8c6:	b2bf      	uxth	r7, r7
  40e8c8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e8cc:	18f9      	adds	r1, r7, r3
  40e8ce:	fa1f f888 	uxth.w	r8, r8
  40e8d2:	4443      	add	r3, r8
  40e8d4:	2200      	movs	r2, #0
  40e8d6:	9201      	str	r2, [sp, #4]
  40e8d8:	9500      	str	r5, [sp, #0]
  40e8da:	b21b      	sxth	r3, r3
  40e8dc:	4632      	mov	r2, r6
  40e8de:	b209      	sxth	r1, r1
  40e8e0:	a82f      	add	r0, sp, #188	; 0xbc
  40e8e2:	f8df a098 	ldr.w	sl, [pc, #152]	; 40e97c <draw_line_skew+0x2fc>
  40e8e6:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40e8e8:	b2a4      	uxth	r4, r4
  40e8ea:	1b3f      	subs	r7, r7, r4
  40e8ec:	eba8 0804 	sub.w	r8, r8, r4
  40e8f0:	2301      	movs	r3, #1
  40e8f2:	9301      	str	r3, [sp, #4]
  40e8f4:	9500      	str	r5, [sp, #0]
  40e8f6:	fa0f f388 	sxth.w	r3, r8
  40e8fa:	4632      	mov	r2, r6
  40e8fc:	b239      	sxth	r1, r7
  40e8fe:	a824      	add	r0, sp, #144	; 0x90
  40e900:	47d0      	blx	sl
  40e902:	e74a      	b.n	40e79a <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40e904:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40e908:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40e90c:	b28b      	uxth	r3, r1
  40e90e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40e912:	1b5b      	subs	r3, r3, r5
  40e914:	fa1f f989 	uxth.w	r9, r9
  40e918:	fa19 f082 	uxtah	r0, r9, r2
  40e91c:	2403      	movs	r4, #3
  40e91e:	9401      	str	r4, [sp, #4]
  40e920:	b200      	sxth	r0, r0
  40e922:	9000      	str	r0, [sp, #0]
  40e924:	b21b      	sxth	r3, r3
  40e926:	a819      	add	r0, sp, #100	; 0x64
  40e928:	4c14      	ldr	r4, [pc, #80]	; (40e97c <draw_line_skew+0x2fc>)
  40e92a:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40e92c:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40e930:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40e934:	b28b      	uxth	r3, r1
  40e936:	1b5b      	subs	r3, r3, r5
  40e938:	fa19 f982 	uxtah	r9, r9, r2
  40e93c:	2002      	movs	r0, #2
  40e93e:	9001      	str	r0, [sp, #4]
  40e940:	fa0f f089 	sxth.w	r0, r9
  40e944:	9000      	str	r0, [sp, #0]
  40e946:	b21b      	sxth	r3, r3
  40e948:	a80e      	add	r0, sp, #56	; 0x38
  40e94a:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40e94c:	2100      	movs	r1, #0
  40e94e:	a819      	add	r0, sp, #100	; 0x64
  40e950:	4c0b      	ldr	r4, [pc, #44]	; (40e980 <draw_line_skew+0x300>)
  40e952:	47a0      	blx	r4
  40e954:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40e956:	2100      	movs	r1, #0
  40e958:	a80e      	add	r0, sp, #56	; 0x38
  40e95a:	47a0      	blx	r4
  40e95c:	900b      	str	r0, [sp, #44]	; 0x2c
  40e95e:	e72f      	b.n	40e7c0 <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e960:	a83a      	add	r0, sp, #232	; 0xe8
  40e962:	4b0b      	ldr	r3, [pc, #44]	; (40e990 <draw_line_skew+0x310>)
  40e964:	4798      	blx	r3
  40e966:	4683      	mov	fp, r0
  40e968:	e757      	b.n	40e81a <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40e96a:	4621      	mov	r1, r4
  40e96c:	4638      	mov	r0, r7
  40e96e:	4b0b      	ldr	r3, [pc, #44]	; (40e99c <draw_line_skew+0x31c>)
  40e970:	4798      	blx	r3
  40e972:	e048      	b.n	40ea06 <draw_line_skew+0x386>
  40e974:	00428de4 	.word	0x00428de4
  40e978:	004151bb 	.word	0x004151bb
  40e97c:	0040f911 	.word	0x0040f911
  40e980:	0040f7f1 	.word	0x0040f7f1
  40e984:	00409531 	.word	0x00409531
  40e988:	004149fd 	.word	0x004149fd
  40e98c:	004148f9 	.word	0x004148f9
  40e990:	0041519f 	.word	0x0041519f
  40e994:	00416531 	.word	0x00416531
  40e998:	00416715 	.word	0x00416715
  40e99c:	004166bd 	.word	0x004166bd
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40e9a0:	9905      	ldr	r1, [sp, #20]
  40e9a2:	7a4b      	ldrb	r3, [r1, #9]
  40e9a4:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40e9a8:	880a      	ldrh	r2, [r1, #0]
  40e9aa:	f8ad 201c 	strh.w	r2, [sp, #28]
  40e9ae:	9302      	str	r3, [sp, #8]
  40e9b0:	7a0b      	ldrb	r3, [r1, #8]
  40e9b2:	9301      	str	r3, [sp, #4]
  40e9b4:	2302      	movs	r3, #2
  40e9b6:	9300      	str	r3, [sp, #0]
  40e9b8:	464b      	mov	r3, r9
  40e9ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40e9be:	9906      	ldr	r1, [sp, #24]
  40e9c0:	a80c      	add	r0, sp, #48	; 0x30
  40e9c2:	4e29      	ldr	r6, [pc, #164]	; (40ea68 <draw_line_skew+0x3e8>)
  40e9c4:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40e9c6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40e9ca:	3301      	adds	r3, #1
  40e9cc:	b21b      	sxth	r3, r3
  40e9ce:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40e9d2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40e9d6:	4659      	mov	r1, fp
  40e9d8:	4648      	mov	r0, r9
  40e9da:	4b24      	ldr	r3, [pc, #144]	; (40ea6c <draw_line_skew+0x3ec>)
  40e9dc:	4798      	blx	r3
            mask_p = 0;
  40e9de:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e9e0:	3501      	adds	r5, #1
  40e9e2:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40e9e6:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40e9ea:	4413      	add	r3, r2
  40e9ec:	429d      	cmp	r5, r3
  40e9ee:	dc14      	bgt.n	40ea1a <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40e9f0:	eb09 0706 	add.w	r7, r9, r6
  40e9f4:	4623      	mov	r3, r4
  40e9f6:	b22a      	sxth	r2, r5
  40e9f8:	9904      	ldr	r1, [sp, #16]
  40e9fa:	4638      	mov	r0, r7
  40e9fc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40ea78 <draw_line_skew+0x3f8>
  40ea00:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40ea02:	2800      	cmp	r0, #0
  40ea04:	d0b1      	beq.n	40e96a <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40ea06:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40ea08:	19a3      	adds	r3, r4, r6
  40ea0a:	459b      	cmp	fp, r3
  40ea0c:	d9c8      	bls.n	40e9a0 <draw_line_skew+0x320>
            fill_area.y2 ++;
  40ea0e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40ea12:	3301      	adds	r3, #1
  40ea14:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40ea18:	e7e2      	b.n	40e9e0 <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40ea1a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40ea1e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40ea22:	429a      	cmp	r2, r3
  40ea24:	d011      	beq.n	40ea4a <draw_line_skew+0x3ca>
        fill_area.y2--;
  40ea26:	3b01      	subs	r3, #1
  40ea28:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40ea2c:	9905      	ldr	r1, [sp, #20]
  40ea2e:	7a4b      	ldrb	r3, [r1, #9]
  40ea30:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40ea34:	880a      	ldrh	r2, [r1, #0]
  40ea36:	9302      	str	r3, [sp, #8]
  40ea38:	7a0b      	ldrb	r3, [r1, #8]
  40ea3a:	9301      	str	r3, [sp, #4]
  40ea3c:	2302      	movs	r3, #2
  40ea3e:	9300      	str	r3, [sp, #0]
  40ea40:	464b      	mov	r3, r9
  40ea42:	9906      	ldr	r1, [sp, #24]
  40ea44:	a80c      	add	r0, sp, #48	; 0x30
  40ea46:	4c08      	ldr	r4, [pc, #32]	; (40ea68 <draw_line_skew+0x3e8>)
  40ea48:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40ea4a:	4648      	mov	r0, r9
  40ea4c:	4b08      	ldr	r3, [pc, #32]	; (40ea70 <draw_line_skew+0x3f0>)
  40ea4e:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40ea50:	9808      	ldr	r0, [sp, #32]
  40ea52:	4c08      	ldr	r4, [pc, #32]	; (40ea74 <draw_line_skew+0x3f4>)
  40ea54:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40ea56:	9809      	ldr	r0, [sp, #36]	; 0x24
  40ea58:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40ea5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40ea5c:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40ea5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40ea60:	47a0      	blx	r4
}
  40ea62:	b03f      	add	sp, #252	; 0xfc
  40ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ea68:	0040c5c9 	.word	0x0040c5c9
  40ea6c:	00416715 	.word	0x00416715
  40ea70:	004162e1 	.word	0x004162e1
  40ea74:	0040f875 	.word	0x0040f875
  40ea78:	0040f825 	.word	0x0040f825

0040ea7c <lv_draw_line_dsc_init>:
{
  40ea7c:	b510      	push	{r4, lr}
  40ea7e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40ea80:	210a      	movs	r1, #10
  40ea82:	4b04      	ldr	r3, [pc, #16]	; (40ea94 <lv_draw_line_dsc_init+0x18>)
  40ea84:	4798      	blx	r3
    dsc->width = 1;
  40ea86:	2301      	movs	r3, #1
  40ea88:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40ea8a:	23ff      	movs	r3, #255	; 0xff
  40ea8c:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40ea8e:	2300      	movs	r3, #0
  40ea90:	8023      	strh	r3, [r4, #0]
  40ea92:	bd10      	pop	{r4, pc}
  40ea94:	004166bd 	.word	0x004166bd

0040ea98 <lv_draw_line>:
{
  40ea98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ea9c:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40ea9e:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40eaa2:	2c00      	cmp	r4, #0
  40eaa4:	d05e      	beq.n	40eb64 <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40eaa6:	7a1d      	ldrb	r5, [r3, #8]
  40eaa8:	2d02      	cmp	r5, #2
  40eaaa:	d95b      	bls.n	40eb64 <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40eaac:	f9b0 5000 	ldrsh.w	r5, [r0]
  40eab0:	f9b1 6000 	ldrsh.w	r6, [r1]
  40eab4:	42b5      	cmp	r5, r6
  40eab6:	d058      	beq.n	40eb6a <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40eab8:	42b5      	cmp	r5, r6
  40eaba:	bfa8      	it	ge
  40eabc:	4635      	movge	r5, r6
  40eabe:	b2ad      	uxth	r5, r5
  40eac0:	4626      	mov	r6, r4
  40eac2:	2c00      	cmp	r4, #0
  40eac4:	db58      	blt.n	40eb78 <lv_draw_line+0xe0>
  40eac6:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40eaca:	1bad      	subs	r5, r5, r6
  40eacc:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40ead0:	f9b1 4000 	ldrsh.w	r4, [r1]
  40ead4:	f9b0 5000 	ldrsh.w	r5, [r0]
  40ead8:	42ac      	cmp	r4, r5
  40eada:	bfb8      	it	lt
  40eadc:	462c      	movlt	r4, r5
  40eade:	fa16 f484 	uxtah	r4, r6, r4
  40eae2:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40eae6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40eaea:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40eaee:	42ac      	cmp	r4, r5
  40eaf0:	bfa8      	it	ge
  40eaf2:	462c      	movge	r4, r5
  40eaf4:	b2a4      	uxth	r4, r4
  40eaf6:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40eafa:	2d00      	cmp	r5, #0
  40eafc:	db3e      	blt.n	40eb7c <lv_draw_line+0xe4>
  40eafe:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40eb02:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40eb06:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40eb0a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40eb0e:	42ac      	cmp	r4, r5
  40eb10:	bfb8      	it	lt
  40eb12:	462c      	movlt	r4, r5
  40eb14:	b2a4      	uxth	r4, r4
  40eb16:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40eb1a:	2d00      	cmp	r5, #0
  40eb1c:	db30      	blt.n	40eb80 <lv_draw_line+0xe8>
  40eb1e:	461e      	mov	r6, r3
  40eb20:	4690      	mov	r8, r2
  40eb22:	460f      	mov	r7, r1
  40eb24:	4681      	mov	r9, r0
  40eb26:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40eb2a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40eb2e:	a918      	add	r1, sp, #96	; 0x60
  40eb30:	4608      	mov	r0, r1
  40eb32:	4b45      	ldr	r3, [pc, #276]	; (40ec48 <lv_draw_line+0x1b0>)
  40eb34:	4798      	blx	r3
    if(!is_common) return;
  40eb36:	b1a8      	cbz	r0, 40eb64 <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40eb38:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40eb3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40eb40:	429a      	cmp	r2, r3
  40eb42:	d01f      	beq.n	40eb84 <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40eb44:	f9b9 2000 	ldrsh.w	r2, [r9]
  40eb48:	f9b7 3000 	ldrsh.w	r3, [r7]
  40eb4c:	429a      	cmp	r2, r3
  40eb4e:	d020      	beq.n	40eb92 <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40eb50:	4633      	mov	r3, r6
  40eb52:	aa18      	add	r2, sp, #96	; 0x60
  40eb54:	4639      	mov	r1, r7
  40eb56:	4648      	mov	r0, r9
  40eb58:	4c3c      	ldr	r4, [pc, #240]	; (40ec4c <lv_draw_line+0x1b4>)
  40eb5a:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40eb5c:	7a73      	ldrb	r3, [r6, #9]
  40eb5e:	f013 0f0c 	tst.w	r3, #12
  40eb62:	d11d      	bne.n	40eba0 <lv_draw_line+0x108>
}
  40eb64:	b01b      	add	sp, #108	; 0x6c
  40eb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40eb6a:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40eb6e:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40eb72:	45be      	cmp	lr, r7
  40eb74:	d1a0      	bne.n	40eab8 <lv_draw_line+0x20>
  40eb76:	e7f5      	b.n	40eb64 <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40eb78:	1c66      	adds	r6, r4, #1
  40eb7a:	e7a4      	b.n	40eac6 <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40eb7c:	3501      	adds	r5, #1
  40eb7e:	e7be      	b.n	40eafe <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40eb80:	3501      	adds	r5, #1
  40eb82:	e7cc      	b.n	40eb1e <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40eb84:	4633      	mov	r3, r6
  40eb86:	aa18      	add	r2, sp, #96	; 0x60
  40eb88:	4639      	mov	r1, r7
  40eb8a:	4648      	mov	r0, r9
  40eb8c:	4c30      	ldr	r4, [pc, #192]	; (40ec50 <lv_draw_line+0x1b8>)
  40eb8e:	47a0      	blx	r4
  40eb90:	e7e4      	b.n	40eb5c <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40eb92:	4633      	mov	r3, r6
  40eb94:	aa18      	add	r2, sp, #96	; 0x60
  40eb96:	4639      	mov	r1, r7
  40eb98:	4648      	mov	r0, r9
  40eb9a:	4c2e      	ldr	r4, [pc, #184]	; (40ec54 <lv_draw_line+0x1bc>)
  40eb9c:	47a0      	blx	r4
  40eb9e:	e7dd      	b.n	40eb5c <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40eba0:	a803      	add	r0, sp, #12
  40eba2:	4b2d      	ldr	r3, [pc, #180]	; (40ec58 <lv_draw_line+0x1c0>)
  40eba4:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40eba6:	8833      	ldrh	r3, [r6, #0]
  40eba8:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40ebac:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40ebb0:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40ebb4:	7a33      	ldrb	r3, [r6, #8]
  40ebb6:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40ebba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40ebbe:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40ebc0:	b29b      	uxth	r3, r3
  40ebc2:	f083 0301 	eor.w	r3, r3, #1
  40ebc6:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40ebca:	7a73      	ldrb	r3, [r6, #9]
  40ebcc:	f013 0f04 	tst.w	r3, #4
  40ebd0:	d11d      	bne.n	40ec0e <lv_draw_line+0x176>
        if(dsc->round_end) {
  40ebd2:	7a73      	ldrb	r3, [r6, #9]
  40ebd4:	f013 0f08 	tst.w	r3, #8
  40ebd8:	d0c4      	beq.n	40eb64 <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40ebda:	883b      	ldrh	r3, [r7, #0]
  40ebdc:	b2a4      	uxth	r4, r4
  40ebde:	1b1a      	subs	r2, r3, r4
  40ebe0:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40ebe4:	8879      	ldrh	r1, [r7, #2]
  40ebe6:	1b0a      	subs	r2, r1, r4
  40ebe8:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40ebec:	18e2      	adds	r2, r4, r3
  40ebee:	b292      	uxth	r2, r2
  40ebf0:	b2ad      	uxth	r5, r5
  40ebf2:	1b52      	subs	r2, r2, r5
  40ebf4:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40ebf8:	440c      	add	r4, r1
  40ebfa:	b2a3      	uxth	r3, r4
  40ebfc:	1b5b      	subs	r3, r3, r5
  40ebfe:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40ec02:	aa03      	add	r2, sp, #12
  40ec04:	4641      	mov	r1, r8
  40ec06:	a801      	add	r0, sp, #4
  40ec08:	4b14      	ldr	r3, [pc, #80]	; (40ec5c <lv_draw_line+0x1c4>)
  40ec0a:	4798      	blx	r3
  40ec0c:	e7aa      	b.n	40eb64 <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40ec0e:	f8b9 2000 	ldrh.w	r2, [r9]
  40ec12:	b2a3      	uxth	r3, r4
  40ec14:	1ad1      	subs	r1, r2, r3
  40ec16:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40ec1a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40ec1e:	1ac1      	subs	r1, r0, r3
  40ec20:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40ec24:	441a      	add	r2, r3
  40ec26:	b292      	uxth	r2, r2
  40ec28:	b2a9      	uxth	r1, r5
  40ec2a:	1a52      	subs	r2, r2, r1
  40ec2c:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40ec30:	4403      	add	r3, r0
  40ec32:	b29b      	uxth	r3, r3
  40ec34:	1a5b      	subs	r3, r3, r1
  40ec36:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40ec3a:	aa03      	add	r2, sp, #12
  40ec3c:	4641      	mov	r1, r8
  40ec3e:	a801      	add	r0, sp, #4
  40ec40:	4b06      	ldr	r3, [pc, #24]	; (40ec5c <lv_draw_line+0x1c4>)
  40ec42:	4798      	blx	r3
  40ec44:	e7c5      	b.n	40ebd2 <lv_draw_line+0x13a>
  40ec46:	bf00      	nop
  40ec48:	004151bb 	.word	0x004151bb
  40ec4c:	0040e681 	.word	0x0040e681
  40ec50:	0040e275 	.word	0x0040e275
  40ec54:	0040e485 	.word	0x0040e485
  40ec58:	00412065 	.word	0x00412065
  40ec5c:	004120b1 	.word	0x004120b1

0040ec60 <line_mask_flat>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
  40ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ec62:	9e06      	ldr	r6, [sp, #24]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40ec64:	69f4      	ldr	r4, [r6, #28]
  40ec66:	fb01 f504 	mul.w	r5, r1, r4
  40ec6a:	12ad      	asrs	r5, r5, #10

    if(p->yx_steep > 0) {
  40ec6c:	2c00      	cmp	r4, #0
  40ec6e:	dd09      	ble.n	40ec84 <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40ec70:	4295      	cmp	r5, r2
  40ec72:	dd11      	ble.n	40ec98 <line_mask_flat+0x38>
            if(p->inv) {
  40ec74:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ec78:	f013 0f02 	tst.w	r3, #2
  40ec7c:	f000 80e2 	beq.w	40ee44 <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40ec80:	2001      	movs	r0, #1
  40ec82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
  40ec84:	4295      	cmp	r5, r2
  40ec86:	da07      	bge.n	40ec98 <line_mask_flat+0x38>
            if(p->inv) {
  40ec88:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ec8c:	f013 0f02 	tst.w	r3, #2
  40ec90:	f000 80da 	beq.w	40ee48 <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40ec94:	2001      	movs	r0, #1
  40ec96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40ec98:	461f      	mov	r7, r3
  40ec9a:	18cd      	adds	r5, r1, r3
  40ec9c:	fb05 f504 	mul.w	r5, r5, r4
  40eca0:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40eca2:	2c00      	cmp	r4, #0
  40eca4:	dd09      	ble.n	40ecba <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40eca6:	4295      	cmp	r5, r2
  40eca8:	da11      	bge.n	40ecce <line_mask_flat+0x6e>
            if(p->inv) {
  40ecaa:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ecae:	f013 0f02 	tst.w	r3, #2
  40ecb2:	f000 80cb 	beq.w	40ee4c <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40ecb6:	2000      	movs	r0, #0
  40ecb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
  40ecba:	4295      	cmp	r5, r2
  40ecbc:	dd07      	ble.n	40ecce <line_mask_flat+0x6e>
            if(p->inv) {
  40ecbe:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ecc2:	f013 0f02 	tst.w	r3, #2
  40ecc6:	f000 80c3 	beq.w	40ee50 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40ecca:	2000      	movs	r0, #0
  40eccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40ecce:	2c00      	cmp	r4, #0
  40ecd0:	dd39      	ble.n	40ed46 <line_mask_flat+0xe6>
  40ecd2:	0212      	lsls	r2, r2, #8
  40ecd4:	69b4      	ldr	r4, [r6, #24]
  40ecd6:	fb04 f202 	mul.w	r2, r4, r2
  40ecda:	1292      	asrs	r2, r2, #10
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;

    int32_t xei = xe >> 8;
  40ecdc:	ea4f 2e22 	mov.w	lr, r2, asr #8
    int32_t xef = xe & 0xFF;

    int32_t px_h;
    if(xef == 0) px_h = 255;
  40ece0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40ece4:	d036      	beq.n	40ed54 <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40ece6:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40ecea:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40ecec:	fb04 f505 	mul.w	r5, r4, r5
  40ecf0:	122d      	asrs	r5, r5, #8
  40ecf2:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40ecf6:	ebae 0101 	sub.w	r1, lr, r1
    lv_opa_t m;

    if(xef) {
  40ecfa:	2a00      	cmp	r2, #0
  40ecfc:	d05d      	beq.n	40edba <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40ecfe:	2900      	cmp	r1, #0
  40ed00:	db1f      	blt.n	40ed42 <line_mask_flat+0xe2>
  40ed02:	428b      	cmp	r3, r1
  40ed04:	dd1d      	ble.n	40ed42 <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40ed06:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40ed0a:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40ed0e:	fb04 f202 	mul.w	r2, r4, r2
  40ed12:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40ed16:	43d4      	mvns	r4, r2
  40ed18:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40ed1a:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40ed1e:	f01e 0f02 	tst.w	lr, #2
  40ed22:	d100      	bne.n	40ed26 <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40ed24:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed26:	5c44      	ldrb	r4, [r0, r1]
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed28:	2afc      	cmp	r2, #252	; 0xfc
  40ed2a:	d809      	bhi.n	40ed40 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed2c:	2a02      	cmp	r2, #2
  40ed2e:	d913      	bls.n	40ed58 <line_mask_flat+0xf8>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ed30:	fb04 f202 	mul.w	r2, r4, r2
  40ed34:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40ed38:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40ed3c:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed40:	5444      	strb	r4, [r0, r1]
        k++;
  40ed42:	1c4a      	adds	r2, r1, #1
  40ed44:	e013      	b.n	40ed6e <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40ed46:	3201      	adds	r2, #1
  40ed48:	0212      	lsls	r2, r2, #8
  40ed4a:	69b4      	ldr	r4, [r6, #24]
  40ed4c:	fb04 f202 	mul.w	r2, r4, r2
  40ed50:	1292      	asrs	r2, r2, #10
  40ed52:	e7c3      	b.n	40ecdc <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40ed54:	25ff      	movs	r5, #255	; 0xff
  40ed56:	e7ce      	b.n	40ecf6 <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed58:	2400      	movs	r4, #0
  40ed5a:	e7f1      	b.n	40ed40 <line_mask_flat+0xe0>
  40ed5c:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed60:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40ed64:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40ed66:	1b2d      	subs	r5, r5, r4
        k++;
  40ed68:	3201      	adds	r2, #1
        if(k >= len) break;
  40ed6a:	4297      	cmp	r7, r2
  40ed6c:	dd27      	ble.n	40edbe <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40ed6e:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40ed72:	4575      	cmp	r5, lr
  40ed74:	dd23      	ble.n	40edbe <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40ed76:	2a00      	cmp	r2, #0
  40ed78:	dbf4      	blt.n	40ed64 <line_mask_flat+0x104>
  40ed7a:	42ba      	cmp	r2, r7
  40ed7c:	daf2      	bge.n	40ed64 <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40ed7e:	b2ec      	uxtb	r4, r5
  40ed80:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40ed84:	eba4 040e 	sub.w	r4, r4, lr
  40ed88:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40ed8a:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40ed8e:	f01e 0f02 	tst.w	lr, #2
  40ed92:	d001      	beq.n	40ed98 <line_mask_flat+0x138>
  40ed94:	43e4      	mvns	r4, r4
  40ed96:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed98:	eb00 0c02 	add.w	ip, r0, r2
  40ed9c:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eda0:	2cfc      	cmp	r4, #252	; 0xfc
  40eda2:	d8dd      	bhi.n	40ed60 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eda4:	2c02      	cmp	r4, #2
  40eda6:	d9d9      	bls.n	40ed5c <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eda8:	fb04 f40e 	mul.w	r4, r4, lr
  40edac:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40edb0:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40edb4:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40edb8:	e7d2      	b.n	40ed60 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40edba:	460a      	mov	r2, r1
  40edbc:	e7d7      	b.n	40ed6e <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40edbe:	429a      	cmp	r2, r3
  40edc0:	da27      	bge.n	40ee12 <line_mask_flat+0x1b2>
  40edc2:	2a00      	cmp	r2, #0
  40edc4:	db25      	blt.n	40ee12 <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40edc6:	69b4      	ldr	r4, [r6, #24]
  40edc8:	fb04 f405 	mul.w	r4, r4, r5
  40edcc:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40edce:	fb04 f505 	mul.w	r5, r4, r5
  40edd2:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40edd6:	69f4      	ldr	r4, [r6, #28]
  40edd8:	2c00      	cmp	r4, #0
  40edda:	db15      	blt.n	40ee08 <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40eddc:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40ede0:	f014 0f02 	tst.w	r4, #2
  40ede4:	d001      	beq.n	40edea <line_mask_flat+0x18a>
  40ede6:	43ed      	mvns	r5, r5
  40ede8:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40edea:	1887      	adds	r7, r0, r2
  40edec:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40edee:	2dfc      	cmp	r5, #252	; 0xfc
  40edf0:	d80e      	bhi.n	40ee10 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edf2:	2d02      	cmp	r5, #2
  40edf4:	d90b      	bls.n	40ee0e <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40edf6:	fb05 f504 	mul.w	r5, r5, r4
  40edfa:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40edfe:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40ee02:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40ee06:	e003      	b.n	40ee10 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40ee08:	43ed      	mvns	r5, r5
  40ee0a:	b2ed      	uxtb	r5, r5
  40ee0c:	e7e6      	b.n	40eddc <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ee0e:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40ee10:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40ee12:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40ee16:	f014 0f02 	tst.w	r4, #2
  40ee1a:	d007      	beq.n	40ee2c <line_mask_flat+0x1cc>
        if(k > len) {
  40ee1c:	428b      	cmp	r3, r1
  40ee1e:	db19      	blt.n	40ee54 <line_mask_flat+0x1f4>
        if(k >= 0) {
  40ee20:	2900      	cmp	r1, #0
  40ee22:	db19      	blt.n	40ee58 <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40ee24:	4b0e      	ldr	r3, [pc, #56]	; (40ee60 <line_mask_flat+0x200>)
  40ee26:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ee28:	2002      	movs	r0, #2
  40ee2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40ee2c:	3201      	adds	r2, #1
  40ee2e:	d415      	bmi.n	40ee5c <line_mask_flat+0x1fc>
        if(k <= len) {
  40ee30:	4293      	cmp	r3, r2
  40ee32:	da01      	bge.n	40ee38 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40ee34:	2002      	movs	r0, #2
}
  40ee36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40ee38:	1a99      	subs	r1, r3, r2
  40ee3a:	4410      	add	r0, r2
  40ee3c:	4b08      	ldr	r3, [pc, #32]	; (40ee60 <line_mask_flat+0x200>)
  40ee3e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ee40:	2002      	movs	r0, #2
  40ee42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40ee44:	2000      	movs	r0, #0
  40ee46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40ee48:	2000      	movs	r0, #0
  40ee4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40ee4c:	2001      	movs	r0, #1
  40ee4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40ee50:	2001      	movs	r0, #1
  40ee52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ee54:	2000      	movs	r0, #0
  40ee56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ee58:	2002      	movs	r0, #2
  40ee5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ee5c:	2000      	movs	r0, #0
  40ee5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ee60:	004166bd 	.word	0x004166bd

0040ee64 <line_mask_steep>:
{
  40ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ee66:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40ee68:	69b5      	ldr	r5, [r6, #24]
  40ee6a:	fb02 f405 	mul.w	r4, r2, r5
  40ee6e:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40ee70:	2d00      	cmp	r5, #0
  40ee72:	dd0a      	ble.n	40ee8a <line_mask_steep+0x26>
  40ee74:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40ee76:	428f      	cmp	r7, r1
  40ee78:	da09      	bge.n	40ee8e <line_mask_steep+0x2a>
        if(p->inv) {
  40ee7a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ee7e:	f013 0f02 	tst.w	r3, #2
  40ee82:	f000 8156 	beq.w	40f132 <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ee86:	2001      	movs	r0, #1
  40ee88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40ee8a:	4627      	mov	r7, r4
  40ee8c:	e7f3      	b.n	40ee76 <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40ee8e:	18cf      	adds	r7, r1, r3
  40ee90:	42bc      	cmp	r4, r7
  40ee92:	dd07      	ble.n	40eea4 <line_mask_steep+0x40>
        if(p->inv) {
  40ee94:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ee98:	f013 0f02 	tst.w	r3, #2
  40ee9c:	f000 814b 	beq.w	40f136 <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40eea0:	2000      	movs	r0, #0
  40eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40eea4:	0217      	lsls	r7, r2, #8
  40eea6:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40eeaa:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40eeac:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40eeb0:	3201      	adds	r2, #1
  40eeb2:	0212      	lsls	r2, r2, #8
  40eeb4:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40eeb8:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40eebc:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40eec0:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40eec2:	4564      	cmp	r4, ip
  40eec4:	d001      	beq.n	40eeca <line_mask_steep+0x66>
  40eec6:	2d00      	cmp	r5, #0
  40eec8:	db68      	blt.n	40ef9c <line_mask_steep+0x138>
    if(xsi == xei) {
  40eeca:	4564      	cmp	r4, ip
  40eecc:	d06e      	beq.n	40efac <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40eece:	2d00      	cmp	r5, #0
  40eed0:	f2c0 80ad 	blt.w	40f02e <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40eed4:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40eed8:	69f5      	ldr	r5, [r6, #28]
  40eeda:	fb05 f502 	mul.w	r5, r5, r2
  40eede:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40eee0:	2f00      	cmp	r7, #0
  40eee2:	db22      	blt.n	40ef2a <line_mask_steep+0xc6>
  40eee4:	429f      	cmp	r7, r3
  40eee6:	da20      	bge.n	40ef2a <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40eee8:	fb05 f202 	mul.w	r2, r5, r2
  40eeec:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40eef0:	ea6f 0e02 	mvn.w	lr, r2
  40eef4:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40eef8:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40eefc:	f01c 0f02 	tst.w	ip, #2
  40ef00:	d100      	bne.n	40ef04 <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40ef02:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ef04:	eb00 0c07 	add.w	ip, r0, r7
  40ef08:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ef0c:	2afc      	cmp	r2, #252	; 0xfc
  40ef0e:	d80a      	bhi.n	40ef26 <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ef10:	2a02      	cmp	r2, #2
  40ef12:	f240 80fd 	bls.w	40f110 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ef16:	fb02 f20e 	mul.w	r2, r2, lr
  40ef1a:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40ef1e:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40ef22:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ef26:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40ef2a:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40ef2e:	69b2      	ldr	r2, [r6, #24]
  40ef30:	fb02 f205 	mul.w	r2, r2, r5
  40ef34:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40ef36:	f117 0e01 	adds.w	lr, r7, #1
  40ef3a:	d41d      	bmi.n	40ef78 <line_mask_steep+0x114>
  40ef3c:	4573      	cmp	r3, lr
  40ef3e:	dd1b      	ble.n	40ef78 <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40ef40:	fb02 f205 	mul.w	r2, r2, r5
  40ef44:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40ef48:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40ef4c:	f015 0f02 	tst.w	r5, #2
  40ef50:	d001      	beq.n	40ef56 <line_mask_steep+0xf2>
  40ef52:	43d2      	mvns	r2, r2
  40ef54:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ef56:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ef5a:	2afc      	cmp	r2, #252	; 0xfc
  40ef5c:	d80a      	bhi.n	40ef74 <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ef5e:	2a02      	cmp	r2, #2
  40ef60:	f240 80d9 	bls.w	40f116 <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ef64:	fb02 f205 	mul.w	r2, r2, r5
  40ef68:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40ef6c:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40ef70:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ef74:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40ef78:	3702      	adds	r7, #2
            if(p->inv) {
  40ef7a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40ef7e:	f012 0f02 	tst.w	r2, #2
  40ef82:	f000 80ca 	beq.w	40f11a <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40ef86:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ef88:	428b      	cmp	r3, r1
  40ef8a:	f2c0 80e4 	blt.w	40f156 <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40ef8e:	2900      	cmp	r1, #0
  40ef90:	f2c0 80e3 	blt.w	40f15a <line_mask_steep+0x2f6>
  40ef94:	4b74      	ldr	r3, [pc, #464]	; (40f168 <line_mask_steep+0x304>)
  40ef96:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ef98:	2002      	movs	r0, #2
  40ef9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40ef9c:	f1be 0f00 	cmp.w	lr, #0
  40efa0:	d193      	bne.n	40eeca <line_mask_steep+0x66>
        k--;
  40efa2:	3f01      	subs	r7, #1
        xsi = xei;
  40efa4:	4664      	mov	r4, ip
        xsf = 0xFF;
  40efa6:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40efaa:	e78e      	b.n	40eeca <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40efac:	2f00      	cmp	r7, #0
  40efae:	db1c      	blt.n	40efea <line_mask_steep+0x186>
  40efb0:	429f      	cmp	r7, r3
  40efb2:	da1a      	bge.n	40efea <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40efb4:	4472      	add	r2, lr
  40efb6:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40efba:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40efbe:	f015 0f02 	tst.w	r5, #2
  40efc2:	d001      	beq.n	40efc8 <line_mask_steep+0x164>
  40efc4:	43d2      	mvns	r2, r2
  40efc6:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40efc8:	eb00 0e07 	add.w	lr, r0, r7
  40efcc:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40efce:	2afc      	cmp	r2, #252	; 0xfc
  40efd0:	d809      	bhi.n	40efe6 <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40efd2:	2a02      	cmp	r2, #2
  40efd4:	d91a      	bls.n	40f00c <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40efd6:	fb05 f202 	mul.w	r2, r5, r2
  40efda:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40efde:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40efe2:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40efe6:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40efea:	3701      	adds	r7, #1
        if(p->inv) {
  40efec:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40eff0:	f012 0f02 	tst.w	r2, #2
  40eff4:	d00c      	beq.n	40f010 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40eff6:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40eff8:	428b      	cmp	r3, r1
  40effa:	f340 809e 	ble.w	40f13a <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40effe:	2900      	cmp	r1, #0
  40f000:	f2c0 809d 	blt.w	40f13e <line_mask_steep+0x2da>
  40f004:	4b58      	ldr	r3, [pc, #352]	; (40f168 <line_mask_steep+0x304>)
  40f006:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f008:	2002      	movs	r0, #2
  40f00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40f00c:	2500      	movs	r5, #0
  40f00e:	e7ea      	b.n	40efe6 <line_mask_steep+0x182>
            if(k > len) k = len;
  40f010:	42bb      	cmp	r3, r7
  40f012:	da00      	bge.n	40f016 <line_mask_steep+0x1b2>
  40f014:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f016:	2f00      	cmp	r7, #0
  40f018:	f000 8093 	beq.w	40f142 <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f01c:	2f00      	cmp	r7, #0
  40f01e:	f340 8092 	ble.w	40f146 <line_mask_steep+0x2e2>
  40f022:	1bd9      	subs	r1, r3, r7
  40f024:	4438      	add	r0, r7
  40f026:	4b50      	ldr	r3, [pc, #320]	; (40f168 <line_mask_steep+0x304>)
  40f028:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f02a:	2002      	movs	r0, #2
  40f02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40f02e:	69f2      	ldr	r2, [r6, #28]
  40f030:	4252      	negs	r2, r2
  40f032:	fb02 f20e 	mul.w	r2, r2, lr
  40f036:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f038:	2f00      	cmp	r7, #0
  40f03a:	db23      	blt.n	40f084 <line_mask_steep+0x220>
  40f03c:	429f      	cmp	r7, r3
  40f03e:	da21      	bge.n	40f084 <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40f040:	fb02 fe0e 	mul.w	lr, r2, lr
  40f044:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40f048:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40f04c:	f015 0f02 	tst.w	r5, #2
  40f050:	d003      	beq.n	40f05a <line_mask_steep+0x1f6>
  40f052:	ea6f 0e0e 	mvn.w	lr, lr
  40f056:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f05a:	eb00 0c07 	add.w	ip, r0, r7
  40f05e:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f060:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40f064:	d80c      	bhi.n	40f080 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f066:	f1be 0f02 	cmp.w	lr, #2
  40f06a:	d908      	bls.n	40f07e <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f06c:	fb0e fe05 	mul.w	lr, lr, r5
  40f070:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40f074:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40f078:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40f07c:	e000      	b.n	40f080 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f07e:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f080:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40f084:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40f088:	69b2      	ldr	r2, [r6, #24]
  40f08a:	4252      	negs	r2, r2
  40f08c:	fb02 f205 	mul.w	r2, r2, r5
  40f090:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40f092:	f1b7 0e01 	subs.w	lr, r7, #1
  40f096:	d41f      	bmi.n	40f0d8 <line_mask_steep+0x274>
  40f098:	4573      	cmp	r3, lr
  40f09a:	dd1d      	ble.n	40f0d8 <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40f09c:	fb02 f205 	mul.w	r2, r2, r5
  40f0a0:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40f0a4:	43d5      	mvns	r5, r2
  40f0a6:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40f0a8:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40f0ac:	f01c 0f02 	tst.w	ip, #2
  40f0b0:	d100      	bne.n	40f0b4 <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40f0b2:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f0b4:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f0b8:	2afc      	cmp	r2, #252	; 0xfc
  40f0ba:	d80b      	bhi.n	40f0d4 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0bc:	2a02      	cmp	r2, #2
  40f0be:	d908      	bls.n	40f0d2 <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f0c0:	fb02 f205 	mul.w	r2, r2, r5
  40f0c4:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40f0c8:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40f0cc:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40f0d0:	e000      	b.n	40f0d4 <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0d2:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40f0d4:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40f0d8:	3701      	adds	r7, #1
            if(p->inv) {
  40f0da:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40f0de:	f012 0f02 	tst.w	r2, #2
  40f0e2:	d00b      	beq.n	40f0fc <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40f0e4:	1a61      	subs	r1, r4, r1
  40f0e6:	3901      	subs	r1, #1
                if(k > len) k = len;
  40f0e8:	428b      	cmp	r3, r1
  40f0ea:	da01      	bge.n	40f0f0 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40f0ec:	2002      	movs	r0, #2
  40f0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40f0f0:	2900      	cmp	r1, #0
  40f0f2:	dd2a      	ble.n	40f14a <line_mask_steep+0x2e6>
  40f0f4:	4b1c      	ldr	r3, [pc, #112]	; (40f168 <line_mask_steep+0x304>)
  40f0f6:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f0f8:	2002      	movs	r0, #2
  40f0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f0fc:	42bb      	cmp	r3, r7
  40f0fe:	db26      	blt.n	40f14e <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f100:	2f00      	cmp	r7, #0
  40f102:	db26      	blt.n	40f152 <line_mask_steep+0x2ee>
  40f104:	1bd9      	subs	r1, r3, r7
  40f106:	4438      	add	r0, r7
  40f108:	4b17      	ldr	r3, [pc, #92]	; (40f168 <line_mask_steep+0x304>)
  40f10a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f10c:	2002      	movs	r0, #2
  40f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40f110:	f04f 0e00 	mov.w	lr, #0
  40f114:	e707      	b.n	40ef26 <line_mask_steep+0xc2>
  40f116:	2500      	movs	r5, #0
  40f118:	e72c      	b.n	40ef74 <line_mask_steep+0x110>
                if(k > len) k = len;
  40f11a:	42bb      	cmp	r3, r7
  40f11c:	da00      	bge.n	40f120 <line_mask_steep+0x2bc>
  40f11e:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f120:	b1ef      	cbz	r7, 40f15e <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40f122:	2f00      	cmp	r7, #0
  40f124:	dd1d      	ble.n	40f162 <line_mask_steep+0x2fe>
  40f126:	1bd9      	subs	r1, r3, r7
  40f128:	4438      	add	r0, r7
  40f12a:	4b0f      	ldr	r3, [pc, #60]	; (40f168 <line_mask_steep+0x304>)
  40f12c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40f12e:	2002      	movs	r0, #2
  40f130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f132:	2000      	movs	r0, #0
  40f134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f136:	2001      	movs	r0, #1
  40f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40f13a:	2000      	movs	r0, #0
  40f13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f13e:	2002      	movs	r0, #2
  40f140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f142:	2000      	movs	r0, #0
  40f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f146:	2002      	movs	r0, #2
  40f148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f14a:	2002      	movs	r0, #2
  40f14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f14e:	2001      	movs	r0, #1
  40f150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f152:	2002      	movs	r0, #2
  40f154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40f156:	2000      	movs	r0, #0
  40f158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f15a:	2002      	movs	r0, #2
  40f15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40f15e:	2000      	movs	r0, #0
  40f160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40f162:	2002      	movs	r0, #2
}
  40f164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f166:	bf00      	nop
  40f168:	004166bd 	.word	0x004166bd

0040f16c <lv_draw_mask_line>:
{
  40f16c:	b570      	push	{r4, r5, r6, lr}
  40f16e:	b082      	sub	sp, #8
  40f170:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40f172:	8aa5      	ldrh	r5, [r4, #20]
  40f174:	1b52      	subs	r2, r2, r5
  40f176:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40f178:	8a65      	ldrh	r5, [r4, #18]
  40f17a:	1b49      	subs	r1, r1, r5
  40f17c:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40f17e:	6a26      	ldr	r6, [r4, #32]
  40f180:	2e00      	cmp	r6, #0
  40f182:	d146      	bne.n	40f212 <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40f184:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40f188:	f015 0f01 	tst.w	r5, #1
  40f18c:	d015      	beq.n	40f1ba <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40f18e:	7c23      	ldrb	r3, [r4, #16]
  40f190:	f003 0303 	and.w	r3, r3, #3
  40f194:	2b01      	cmp	r3, #1
  40f196:	d94a      	bls.n	40f22e <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f198:	2b02      	cmp	r3, #2
  40f19a:	d003      	beq.n	40f1a4 <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f19c:	2b03      	cmp	r3, #3
  40f19e:	d006      	beq.n	40f1ae <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40f1a0:	2000      	movs	r0, #0
  40f1a2:	e03e      	b.n	40f222 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f1a4:	f112 0f01 	cmn.w	r2, #1
  40f1a8:	d5f8      	bpl.n	40f19c <lv_draw_mask_line+0x30>
  40f1aa:	2001      	movs	r0, #1
  40f1ac:	e039      	b.n	40f222 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f1ae:	2a00      	cmp	r2, #0
  40f1b0:	dd01      	ble.n	40f1b6 <lv_draw_mask_line+0x4a>
  40f1b2:	2001      	movs	r0, #1
  40f1b4:	e035      	b.n	40f222 <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40f1b6:	2000      	movs	r0, #0
  40f1b8:	e033      	b.n	40f222 <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40f1ba:	7c22      	ldrb	r2, [r4, #16]
  40f1bc:	f002 0203 	and.w	r2, r2, #3
  40f1c0:	1e94      	subs	r4, r2, #2
  40f1c2:	b2e4      	uxtb	r4, r4
  40f1c4:	2c01      	cmp	r4, #1
  40f1c6:	d934      	bls.n	40f232 <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f1c8:	2a01      	cmp	r2, #1
  40f1ca:	d009      	beq.n	40f1e0 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40f1cc:	b992      	cbnz	r2, 40f1f4 <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f1ce:	18ca      	adds	r2, r1, r3
  40f1d0:	d431      	bmi.n	40f236 <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40f1d2:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f1d4:	2d00      	cmp	r5, #0
  40f1d6:	db30      	blt.n	40f23a <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40f1d8:	42ab      	cmp	r3, r5
  40f1da:	dc05      	bgt.n	40f1e8 <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40f1dc:	2002      	movs	r0, #2
  40f1de:	e020      	b.n	40f222 <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f1e0:	2900      	cmp	r1, #0
  40f1e2:	ddf3      	ble.n	40f1cc <lv_draw_mask_line+0x60>
  40f1e4:	2001      	movs	r0, #1
  40f1e6:	e01c      	b.n	40f222 <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40f1e8:	4611      	mov	r1, r2
  40f1ea:	4428      	add	r0, r5
  40f1ec:	4b17      	ldr	r3, [pc, #92]	; (40f24c <lv_draw_mask_line+0xe0>)
  40f1ee:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40f1f0:	2002      	movs	r0, #2
  40f1f2:	e016      	b.n	40f222 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f1f4:	42d9      	cmn	r1, r3
  40f1f6:	d422      	bmi.n	40f23e <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40f1f8:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40f1fa:	2900      	cmp	r1, #0
  40f1fc:	db07      	blt.n	40f20e <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40f1fe:	4299      	cmp	r1, r3
  40f200:	da1f      	bge.n	40f242 <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40f202:	2900      	cmp	r1, #0
  40f204:	db1f      	blt.n	40f246 <lv_draw_mask_line+0xda>
  40f206:	4b11      	ldr	r3, [pc, #68]	; (40f24c <lv_draw_mask_line+0xe0>)
  40f208:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40f20a:	2002      	movs	r0, #2
  40f20c:	e009      	b.n	40f222 <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  40f20e:	4631      	mov	r1, r6
  40f210:	e7f5      	b.n	40f1fe <lv_draw_mask_line+0x92>
    if(p->flat) {
  40f212:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40f216:	f015 0f01 	tst.w	r5, #1
  40f21a:	d104      	bne.n	40f226 <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  40f21c:	9400      	str	r4, [sp, #0]
  40f21e:	4c0c      	ldr	r4, [pc, #48]	; (40f250 <lv_draw_mask_line+0xe4>)
  40f220:	47a0      	blx	r4
}
  40f222:	b002      	add	sp, #8
  40f224:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  40f226:	9400      	str	r4, [sp, #0]
  40f228:	4c0a      	ldr	r4, [pc, #40]	; (40f254 <lv_draw_mask_line+0xe8>)
  40f22a:	47a0      	blx	r4
  40f22c:	e7f9      	b.n	40f222 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40f22e:	2001      	movs	r0, #1
  40f230:	e7f7      	b.n	40f222 <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40f232:	2001      	movs	r0, #1
  40f234:	e7f5      	b.n	40f222 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40f236:	2001      	movs	r0, #1
  40f238:	e7f3      	b.n	40f222 <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f23a:	2000      	movs	r0, #0
  40f23c:	e7f1      	b.n	40f222 <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40f23e:	2000      	movs	r0, #0
  40f240:	e7ef      	b.n	40f222 <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40f242:	2000      	movs	r0, #0
  40f244:	e7ed      	b.n	40f222 <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  40f246:	2002      	movs	r0, #2
  40f248:	e7eb      	b.n	40f222 <lv_draw_mask_line+0xb6>
  40f24a:	bf00      	nop
  40f24c:	004166bd 	.word	0x004166bd
  40f250:	0040ee65 	.word	0x0040ee65
  40f254:	0040ec61 	.word	0x0040ec61

0040f258 <lv_draw_mask_radius>:
{
  40f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f25c:	b08b      	sub	sp, #44	; 0x2c
  40f25e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  40f260:	7cb5      	ldrb	r5, [r6, #18]
  40f262:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  40f266:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  40f26a:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  40f26e:	f10d 0e20 	add.w	lr, sp, #32
  40f272:	2408      	movs	r4, #8
  40f274:	e004      	b.n	40f280 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  40f276:	f81c 7b01 	ldrb.w	r7, [ip], #1
  40f27a:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  40f27e:	3c01      	subs	r4, #1
    while(len) {
  40f280:	2c00      	cmp	r4, #0
  40f282:	d1f8      	bne.n	40f276 <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  40f284:	2d00      	cmp	r5, #0
  40f286:	d13f      	bne.n	40f308 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f288:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f28c:	4294      	cmp	r4, r2
  40f28e:	f300 829d 	bgt.w	40f7cc <lv_draw_mask_radius+0x574>
  40f292:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f296:	42a2      	cmp	r2, r4
  40f298:	f300 829c 	bgt.w	40f7d4 <lv_draw_mask_radius+0x57c>
  40f29c:	461f      	mov	r7, r3
  40f29e:	468b      	mov	fp, r1
  40f2a0:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40f2a2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40f2a6:	eb09 0103 	add.w	r1, r9, r3
  40f2aa:	458b      	cmp	fp, r1
  40f2ac:	db07      	blt.n	40f2be <lv_draw_mask_radius+0x66>
  40f2ae:	eb07 000b 	add.w	r0, r7, fp
  40f2b2:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f2b6:	eba1 0109 	sub.w	r1, r1, r9
  40f2ba:	4288      	cmp	r0, r1
  40f2bc:	dd0b      	ble.n	40f2d6 <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f2be:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  40f2c2:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40f2c6:	4282      	cmp	r2, r0
  40f2c8:	db50      	blt.n	40f36c <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f2ca:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  40f2ce:	eba0 0009 	sub.w	r0, r0, r9
  40f2d2:	4282      	cmp	r2, r0
  40f2d4:	dc4a      	bgt.n	40f36c <lv_draw_mask_radius+0x114>
        if(outer == false) {
  40f2d6:	bb6d      	cbnz	r5, 40f334 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  40f2d8:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f2dc:	42bd      	cmp	r5, r7
  40f2de:	f300 827d 	bgt.w	40f7dc <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  40f2e2:	2d00      	cmp	r5, #0
  40f2e4:	db03      	blt.n	40f2ee <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  40f2e6:	4629      	mov	r1, r5
  40f2e8:	4640      	mov	r0, r8
  40f2ea:	4ba7      	ldr	r3, [pc, #668]	; (40f588 <lv_draw_mask_radius+0x330>)
  40f2ec:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40f2ee:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40f2f2:	eba3 040b 	sub.w	r4, r3, fp
  40f2f6:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f2f8:	2c00      	cmp	r4, #0
  40f2fa:	f340 8271 	ble.w	40f7e0 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  40f2fe:	42a7      	cmp	r7, r4
  40f300:	dc0d      	bgt.n	40f31e <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f302:	b195      	cbz	r5, 40f32a <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f304:	2002      	movs	r0, #2
  40f306:	e262      	b.n	40f7ce <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f308:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f30c:	42a2      	cmp	r2, r4
  40f30e:	f2c0 8263 	blt.w	40f7d8 <lv_draw_mask_radius+0x580>
  40f312:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f316:	42a2      	cmp	r2, r4
  40f318:	ddc0      	ble.n	40f29c <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f31a:	2001      	movs	r0, #1
  40f31c:	e257      	b.n	40f7ce <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  40f31e:	1b39      	subs	r1, r7, r4
  40f320:	eb08 0004 	add.w	r0, r8, r4
  40f324:	4b98      	ldr	r3, [pc, #608]	; (40f588 <lv_draw_mask_radius+0x330>)
  40f326:	4798      	blx	r3
  40f328:	e7eb      	b.n	40f302 <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f32a:	42a7      	cmp	r7, r4
  40f32c:	f000 825a 	beq.w	40f7e4 <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f330:	2002      	movs	r0, #2
  40f332:	e24c      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f334:	ebb3 030b 	subs.w	r3, r3, fp
  40f338:	d403      	bmi.n	40f342 <lv_draw_mask_radius+0xea>
            if(first <= len) {
  40f33a:	42bb      	cmp	r3, r7
  40f33c:	dd03      	ble.n	40f346 <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  40f33e:	2002      	movs	r0, #2
  40f340:	e245      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f342:	2300      	movs	r3, #0
  40f344:	e7f9      	b.n	40f33a <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40f346:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f34a:	eba1 010b 	sub.w	r1, r1, fp
  40f34e:	1ac9      	subs	r1, r1, r3
  40f350:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40f352:	185a      	adds	r2, r3, r1
  40f354:	4297      	cmp	r7, r2
  40f356:	da00      	bge.n	40f35a <lv_draw_mask_radius+0x102>
  40f358:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  40f35a:	2900      	cmp	r1, #0
  40f35c:	f2c0 8244 	blt.w	40f7e8 <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  40f360:	eb08 0003 	add.w	r0, r8, r3
  40f364:	4b88      	ldr	r3, [pc, #544]	; (40f588 <lv_draw_mask_radius+0x330>)
  40f366:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40f368:	2002      	movs	r0, #2
  40f36a:	e230      	b.n	40f7ce <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40f36c:	eba3 0b0b 	sub.w	fp, r3, fp
  40f370:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  40f374:	b29b      	uxth	r3, r3
  40f376:	1ac3      	subs	r3, r0, r3
  40f378:	b29b      	uxth	r3, r3
  40f37a:	3301      	adds	r3, #1
  40f37c:	b21b      	sxth	r3, r3
  40f37e:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f380:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  40f384:	b28c      	uxth	r4, r1
  40f386:	1b1b      	subs	r3, r3, r4
  40f388:	b29b      	uxth	r3, r3
  40f38a:	3301      	adds	r3, #1
  40f38c:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  40f38e:	1b14      	subs	r4, r2, r4
  40f390:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40f392:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  40f396:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  40f39a:	45a1      	cmp	r9, r4
  40f39c:	dc06      	bgt.n	40f3ac <lv_draw_mask_radius+0x154>
  40f39e:	eba3 0209 	sub.w	r2, r3, r9
  40f3a2:	3a01      	subs	r2, #1
  40f3a4:	4294      	cmp	r4, r2
  40f3a6:	dc01      	bgt.n	40f3ac <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  40f3a8:	2002      	movs	r0, #2
  40f3aa:	e210      	b.n	40f7ce <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  40f3ac:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  40f3b0:	f300 80b1 	bgt.w	40f516 <lv_draw_mask_radius+0x2be>
  40f3b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40f3b8:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  40f3ba:	45a1      	cmp	r9, r4
  40f3bc:	f340 80b6 	ble.w	40f52c <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  40f3c0:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  40f3c4:	6973      	ldr	r3, [r6, #20]
  40f3c6:	429c      	cmp	r4, r3
  40f3c8:	f000 80a9 	beq.w	40f51e <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f3cc:	9a01      	ldr	r2, [sp, #4]
  40f3ce:	a904      	add	r1, sp, #16
  40f3d0:	fb04 a014 	mls	r0, r4, r4, sl
  40f3d4:	4b6d      	ldr	r3, [pc, #436]	; (40f58c <lv_draw_mask_radius+0x334>)
  40f3d6:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f3d8:	1e63      	subs	r3, r4, #1
  40f3da:	9a01      	ldr	r2, [sp, #4]
  40f3dc:	a905      	add	r1, sp, #20
  40f3de:	9303      	str	r3, [sp, #12]
  40f3e0:	fb03 a013 	mls	r0, r3, r3, sl
  40f3e4:	4b69      	ldr	r3, [pc, #420]	; (40f58c <lv_draw_mask_radius+0x334>)
  40f3e6:	4798      	blx	r3
            p->y_prev = y - 1;
  40f3e8:	9b03      	ldr	r3, [sp, #12]
  40f3ea:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  40f3ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f3f0:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  40f3f2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f3f6:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f3f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f3fc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f400:	1e51      	subs	r1, r2, #1
  40f402:	428b      	cmp	r3, r1
  40f404:	f000 80b4 	beq.w	40f570 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  40f408:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f40c:	4293      	cmp	r3, r2
  40f40e:	f000 80bf 	beq.w	40f590 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  40f412:	3301      	adds	r3, #1
  40f414:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  40f418:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  40f41c:	9b02      	ldr	r3, [sp, #8]
  40f41e:	eba3 0909 	sub.w	r9, r3, r9
  40f422:	f109 39ff 	add.w	r9, r9, #4294967295
  40f426:	44d9      	add	r9, fp
            if(outer) {
  40f428:	b175      	cbz	r5, 40f448 <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  40f42a:	1c70      	adds	r0, r6, #1
  40f42c:	f100 8116 	bmi.w	40f65c <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  40f430:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f434:	45b9      	cmp	r9, r7
  40f436:	dd00      	ble.n	40f43a <lv_draw_mask_radius+0x1e2>
  40f438:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f43a:	42b8      	cmp	r0, r7
  40f43c:	da04      	bge.n	40f448 <lv_draw_mask_radius+0x1f0>
  40f43e:	2900      	cmp	r1, #0
  40f440:	db02      	blt.n	40f448 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f442:	4440      	add	r0, r8
  40f444:	4b50      	ldr	r3, [pc, #320]	; (40f588 <lv_draw_mask_radius+0x330>)
  40f446:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40f448:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40f44c:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40f450:	9a01      	ldr	r2, [sp, #4]
  40f452:	a906      	add	r1, sp, #24
  40f454:	fb00 a010 	mls	r0, r0, r0, sl
  40f458:	4b4c      	ldr	r3, [pc, #304]	; (40f58c <lv_draw_mask_radius+0x334>)
  40f45a:	4798      	blx	r3
            if(y_prev.f == 0) {
  40f45c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40f460:	b93b      	cbnz	r3, 40f472 <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  40f462:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f466:	3b01      	subs	r3, #1
  40f468:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  40f46c:	23ff      	movs	r3, #255	; 0xff
  40f46e:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  40f472:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f476:	429c      	cmp	r4, r3
  40f478:	f300 8103 	bgt.w	40f682 <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40f47c:	9a01      	ldr	r2, [sp, #4]
  40f47e:	a907      	add	r1, sp, #28
  40f480:	fb0b a01b 	mls	r0, fp, fp, sl
  40f484:	4b41      	ldr	r3, [pc, #260]	; (40f58c <lv_draw_mask_radius+0x334>)
  40f486:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f488:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f48c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40f490:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f494:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40f498:	fb03 f302 	mul.w	r3, r3, r2
  40f49c:	f3c3 2347 	ubfx	r3, r3, #9, #8
  40f4a0:	43da      	mvns	r2, r3
  40f4a2:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  40f4a4:	b905      	cbnz	r5, 40f4a8 <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f4a6:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f4a8:	2e00      	cmp	r6, #0
  40f4aa:	db13      	blt.n	40f4d4 <lv_draw_mask_radius+0x27c>
  40f4ac:	42be      	cmp	r6, r7
  40f4ae:	da11      	bge.n	40f4d4 <lv_draw_mask_radius+0x27c>
  40f4b0:	eb08 0106 	add.w	r1, r8, r6
  40f4b4:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f4b8:	2bfc      	cmp	r3, #252	; 0xfc
  40f4ba:	d80a      	bhi.n	40f4d2 <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4bc:	2b02      	cmp	r3, #2
  40f4be:	f240 80cf 	bls.w	40f660 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f4c2:	fb03 f202 	mul.w	r2, r3, r2
  40f4c6:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f4ca:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f4ce:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f4d2:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f4d4:	f1b9 0f00 	cmp.w	r9, #0
  40f4d8:	db13      	blt.n	40f502 <lv_draw_mask_radius+0x2aa>
  40f4da:	45b9      	cmp	r9, r7
  40f4dc:	da11      	bge.n	40f502 <lv_draw_mask_radius+0x2aa>
  40f4de:	eb08 0109 	add.w	r1, r8, r9
  40f4e2:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f4e6:	2bfc      	cmp	r3, #252	; 0xfc
  40f4e8:	d80a      	bhi.n	40f500 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4ea:	2b02      	cmp	r3, #2
  40f4ec:	f240 80ba 	bls.w	40f664 <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f4f0:	fb03 f302 	mul.w	r3, r3, r2
  40f4f4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f4f8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f4fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f500:	700a      	strb	r2, [r1, #0]
                kl--;
  40f502:	3e01      	subs	r6, #1
                kr++;
  40f504:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f508:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f50c:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  40f510:	f10b 0b01 	add.w	fp, fp, #1
  40f514:	e0b5      	b.n	40f682 <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  40f516:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40f51a:	9201      	str	r2, [sp, #4]
  40f51c:	e74d      	b.n	40f3ba <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  40f51e:	8b73      	ldrh	r3, [r6, #26]
  40f520:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  40f524:	8b33      	ldrh	r3, [r6, #24]
  40f526:	f8ad 3010 	strh.w	r3, [sp, #16]
  40f52a:	e755      	b.n	40f3d8 <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  40f52c:	1b1b      	subs	r3, r3, r4
  40f52e:	eba9 0003 	sub.w	r0, r9, r3
  40f532:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40f534:	6973      	ldr	r3, [r6, #20]
  40f536:	4298      	cmp	r0, r3
  40f538:	d013      	beq.n	40f562 <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f53a:	9a01      	ldr	r2, [sp, #4]
  40f53c:	a905      	add	r1, sp, #20
  40f53e:	fb00 a010 	mls	r0, r0, r0, sl
  40f542:	4b12      	ldr	r3, [pc, #72]	; (40f58c <lv_draw_mask_radius+0x334>)
  40f544:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f546:	9a01      	ldr	r2, [sp, #4]
  40f548:	a904      	add	r1, sp, #16
  40f54a:	fb04 a014 	mls	r0, r4, r4, sl
  40f54e:	4b0f      	ldr	r3, [pc, #60]	; (40f58c <lv_draw_mask_radius+0x334>)
  40f550:	4798      	blx	r3
            p->y_prev = y;
  40f552:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  40f554:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f558:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  40f55a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f55e:	8333      	strh	r3, [r6, #24]
  40f560:	e74a      	b.n	40f3f8 <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  40f562:	8b73      	ldrh	r3, [r6, #26]
  40f564:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  40f568:	8b33      	ldrh	r3, [r6, #24]
  40f56a:	f8ad 3014 	strh.w	r3, [sp, #20]
  40f56e:	e7ea      	b.n	40f546 <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f570:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f574:	2900      	cmp	r1, #0
  40f576:	f47f af47 	bne.w	40f408 <lv_draw_mask_radius+0x1b0>
            x1.i--;
  40f57a:	3a01      	subs	r2, #1
  40f57c:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  40f580:	22ff      	movs	r2, #255	; 0xff
  40f582:	f8ad 2016 	strh.w	r2, [sp, #22]
  40f586:	e73f      	b.n	40f408 <lv_draw_mask_radius+0x1b0>
  40f588:	004166bd 	.word	0x004166bd
  40f58c:	00416095 	.word	0x00416095
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40f590:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40f594:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f598:	440a      	add	r2, r1
  40f59a:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40f59e:	b10d      	cbz	r5, 40f5a4 <lv_draw_mask_radius+0x34c>
  40f5a0:	43d2      	mvns	r2, r2
  40f5a2:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40f5a4:	eba9 0303 	sub.w	r3, r9, r3
  40f5a8:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40f5aa:	eb1b 0103 	adds.w	r1, fp, r3
  40f5ae:	d411      	bmi.n	40f5d4 <lv_draw_mask_radius+0x37c>
  40f5b0:	42b9      	cmp	r1, r7
  40f5b2:	da0f      	bge.n	40f5d4 <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f5b4:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f5b8:	2afc      	cmp	r2, #252	; 0xfc
  40f5ba:	d809      	bhi.n	40f5d0 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f5bc:	2a02      	cmp	r2, #2
  40f5be:	d932      	bls.n	40f626 <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f5c0:	fb02 f000 	mul.w	r0, r2, r0
  40f5c4:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40f5c8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40f5cc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f5d0:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  40f5d4:	9802      	ldr	r0, [sp, #8]
  40f5d6:	1ac3      	subs	r3, r0, r3
  40f5d8:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40f5da:	eb1b 0303 	adds.w	r3, fp, r3
  40f5de:	d411      	bmi.n	40f604 <lv_draw_mask_radius+0x3ac>
  40f5e0:	42bb      	cmp	r3, r7
  40f5e2:	da0f      	bge.n	40f604 <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f5e4:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f5e8:	2afc      	cmp	r2, #252	; 0xfc
  40f5ea:	d809      	bhi.n	40f600 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f5ec:	2a02      	cmp	r2, #2
  40f5ee:	d91c      	bls.n	40f62a <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f5f0:	fb02 f200 	mul.w	r2, r2, r0
  40f5f4:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f5f8:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f5fc:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f600:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  40f604:	b19d      	cbz	r5, 40f62e <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  40f606:	1c48      	adds	r0, r1, #1
  40f608:	d426      	bmi.n	40f658 <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  40f60a:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f60c:	42bb      	cmp	r3, r7
  40f60e:	dd00      	ble.n	40f612 <lv_draw_mask_radius+0x3ba>
  40f610:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f612:	42b8      	cmp	r0, r7
  40f614:	f280 80be 	bge.w	40f794 <lv_draw_mask_radius+0x53c>
  40f618:	2900      	cmp	r1, #0
  40f61a:	f2c0 80bb 	blt.w	40f794 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f61e:	4440      	add	r0, r8
  40f620:	4b72      	ldr	r3, [pc, #456]	; (40f7ec <lv_draw_mask_radius+0x594>)
  40f622:	4798      	blx	r3
  40f624:	e0b6      	b.n	40f794 <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f626:	2000      	movs	r0, #0
  40f628:	e7d2      	b.n	40f5d0 <lv_draw_mask_radius+0x378>
  40f62a:	2000      	movs	r0, #0
  40f62c:	e7e8      	b.n	40f600 <lv_draw_mask_radius+0x3a8>
                kr++;
  40f62e:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  40f630:	42b9      	cmp	r1, r7
  40f632:	f300 80c9 	bgt.w	40f7c8 <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  40f636:	2900      	cmp	r1, #0
  40f638:	db02      	blt.n	40f640 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  40f63a:	4640      	mov	r0, r8
  40f63c:	4b6b      	ldr	r3, [pc, #428]	; (40f7ec <lv_draw_mask_radius+0x594>)
  40f63e:	4798      	blx	r3
                if(kr < 0) {
  40f640:	2c00      	cmp	r4, #0
  40f642:	f2c0 80c1 	blt.w	40f7c8 <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  40f646:	42bc      	cmp	r4, r7
  40f648:	f300 80a4 	bgt.w	40f794 <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40f64c:	1b39      	subs	r1, r7, r4
  40f64e:	eb08 0004 	add.w	r0, r8, r4
  40f652:	4b66      	ldr	r3, [pc, #408]	; (40f7ec <lv_draw_mask_radius+0x594>)
  40f654:	4798      	blx	r3
  40f656:	e09d      	b.n	40f794 <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  40f658:	2000      	movs	r0, #0
  40f65a:	e7d6      	b.n	40f60a <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  40f65c:	2000      	movs	r0, #0
  40f65e:	e6e7      	b.n	40f430 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f660:	2200      	movs	r2, #0
  40f662:	e736      	b.n	40f4d2 <lv_draw_mask_radius+0x27a>
  40f664:	2200      	movs	r2, #0
  40f666:	e74b      	b.n	40f500 <lv_draw_mask_radius+0x2a8>
  40f668:	2200      	movs	r2, #0
  40f66a:	e041      	b.n	40f6f0 <lv_draw_mask_radius+0x498>
  40f66c:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f66e:	700a      	strb	r2, [r1, #0]
                kl--;
  40f670:	3e01      	subs	r6, #1
                kr++;
  40f672:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f676:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f67a:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  40f67e:	f10b 0b01 	add.w	fp, fp, #1
  40f682:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f686:	459b      	cmp	fp, r3
  40f688:	d849      	bhi.n	40f71e <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40f68a:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40f68e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40f692:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40f696:	0913      	lsrs	r3, r2, #4
  40f698:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  40f69c:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  40f6a0:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40f6a4:	0058      	lsls	r0, r3, #1
  40f6a6:	fb91 f1f0 	sdiv	r1, r1, r0
  40f6aa:	440b      	add	r3, r1

    q->i = d >> 4;
  40f6ac:	1119      	asrs	r1, r3, #4
  40f6ae:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  40f6b2:	011b      	lsls	r3, r3, #4
  40f6b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40f6b8:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  40f6bc:	4413      	add	r3, r2
  40f6be:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  40f6c2:	b10d      	cbz	r5, 40f6c8 <lv_draw_mask_radius+0x470>
  40f6c4:	43db      	mvns	r3, r3
  40f6c6:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f6c8:	2e00      	cmp	r6, #0
  40f6ca:	db12      	blt.n	40f6f2 <lv_draw_mask_radius+0x49a>
  40f6cc:	42be      	cmp	r6, r7
  40f6ce:	da10      	bge.n	40f6f2 <lv_draw_mask_radius+0x49a>
  40f6d0:	eb08 0106 	add.w	r1, r8, r6
  40f6d4:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f6d8:	2bfc      	cmp	r3, #252	; 0xfc
  40f6da:	d809      	bhi.n	40f6f0 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f6dc:	2b02      	cmp	r3, #2
  40f6de:	d9c3      	bls.n	40f668 <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f6e0:	fb03 f202 	mul.w	r2, r3, r2
  40f6e4:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f6e8:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f6ec:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f6f0:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f6f2:	f1b9 0f00 	cmp.w	r9, #0
  40f6f6:	dbbb      	blt.n	40f670 <lv_draw_mask_radius+0x418>
  40f6f8:	45b9      	cmp	r9, r7
  40f6fa:	dab9      	bge.n	40f670 <lv_draw_mask_radius+0x418>
  40f6fc:	eb08 0109 	add.w	r1, r8, r9
  40f700:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f704:	2bfc      	cmp	r3, #252	; 0xfc
  40f706:	d8b2      	bhi.n	40f66e <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f708:	2b02      	cmp	r3, #2
  40f70a:	d9af      	bls.n	40f66c <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f70c:	fb03 f302 	mul.w	r3, r3, r2
  40f710:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f714:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f718:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  40f71c:	e7a7      	b.n	40f66e <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  40f71e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40f722:	b3b2      	cbz	r2, 40f792 <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  40f724:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f728:	fb03 f302 	mul.w	r3, r3, r2
  40f72c:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40f730:	b10d      	cbz	r5, 40f736 <lv_draw_mask_radius+0x4de>
  40f732:	43db      	mvns	r3, r3
  40f734:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f736:	2e00      	cmp	r6, #0
  40f738:	db12      	blt.n	40f760 <lv_draw_mask_radius+0x508>
  40f73a:	42be      	cmp	r6, r7
  40f73c:	da10      	bge.n	40f760 <lv_draw_mask_radius+0x508>
  40f73e:	eb08 0106 	add.w	r1, r8, r6
  40f742:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f746:	2bfc      	cmp	r3, #252	; 0xfc
  40f748:	d809      	bhi.n	40f75e <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f74a:	2b02      	cmp	r3, #2
  40f74c:	d924      	bls.n	40f798 <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f74e:	fb03 f202 	mul.w	r2, r3, r2
  40f752:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f756:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f75a:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f75e:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f760:	f1b9 0f00 	cmp.w	r9, #0
  40f764:	db12      	blt.n	40f78c <lv_draw_mask_radius+0x534>
  40f766:	45b9      	cmp	r9, r7
  40f768:	da10      	bge.n	40f78c <lv_draw_mask_radius+0x534>
  40f76a:	eb08 0109 	add.w	r1, r8, r9
  40f76e:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f772:	2bfc      	cmp	r3, #252	; 0xfc
  40f774:	d809      	bhi.n	40f78a <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f776:	2b02      	cmp	r3, #2
  40f778:	d910      	bls.n	40f79c <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f77a:	fb03 f302 	mul.w	r3, r3, r2
  40f77e:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f782:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f786:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f78a:	700a      	strb	r2, [r1, #0]
                kl--;
  40f78c:	3e01      	subs	r6, #1
                kr++;
  40f78e:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  40f792:	b12d      	cbz	r5, 40f7a0 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  40f794:	2002      	movs	r0, #2
  40f796:	e01a      	b.n	40f7ce <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f798:	2200      	movs	r2, #0
  40f79a:	e7e0      	b.n	40f75e <lv_draw_mask_radius+0x506>
  40f79c:	2200      	movs	r2, #0
  40f79e:	e7f4      	b.n	40f78a <lv_draw_mask_radius+0x532>
                kl++;
  40f7a0:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  40f7a2:	42b9      	cmp	r1, r7
  40f7a4:	dc10      	bgt.n	40f7c8 <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40f7a6:	2900      	cmp	r1, #0
  40f7a8:	db02      	blt.n	40f7b0 <lv_draw_mask_radius+0x558>
  40f7aa:	4640      	mov	r0, r8
  40f7ac:	4b0f      	ldr	r3, [pc, #60]	; (40f7ec <lv_draw_mask_radius+0x594>)
  40f7ae:	4798      	blx	r3
                if(kr < 0) {
  40f7b0:	f1b9 0f00 	cmp.w	r9, #0
  40f7b4:	db08      	blt.n	40f7c8 <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40f7b6:	45b9      	cmp	r9, r7
  40f7b8:	daec      	bge.n	40f794 <lv_draw_mask_radius+0x53c>
  40f7ba:	eba7 0109 	sub.w	r1, r7, r9
  40f7be:	eb08 0009 	add.w	r0, r8, r9
  40f7c2:	4b0a      	ldr	r3, [pc, #40]	; (40f7ec <lv_draw_mask_radius+0x594>)
  40f7c4:	4798      	blx	r3
  40f7c6:	e7e5      	b.n	40f794 <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40f7c8:	2000      	movs	r0, #0
  40f7ca:	e000      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  40f7cc:	2000      	movs	r0, #0
}
  40f7ce:	b00b      	add	sp, #44	; 0x2c
  40f7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f7d4:	2000      	movs	r0, #0
  40f7d6:	e7fa      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f7d8:	2001      	movs	r0, #1
  40f7da:	e7f8      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f7dc:	2000      	movs	r0, #0
  40f7de:	e7f6      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f7e0:	2000      	movs	r0, #0
  40f7e2:	e7f4      	b.n	40f7ce <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f7e4:	2001      	movs	r0, #1
  40f7e6:	e7f2      	b.n	40f7ce <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  40f7e8:	2002      	movs	r0, #2
  40f7ea:	e7f0      	b.n	40f7ce <lv_draw_mask_radius+0x576>
  40f7ec:	004166bd 	.word	0x004166bd

0040f7f0 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f7f0:	2300      	movs	r3, #0
  40f7f2:	2b0f      	cmp	r3, #15
  40f7f4:	d806      	bhi.n	40f804 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40f7f6:	4a0a      	ldr	r2, [pc, #40]	; (40f820 <lv_draw_mask_add+0x30>)
  40f7f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40f7fc:	b112      	cbz	r2, 40f804 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f7fe:	3301      	adds	r3, #1
  40f800:	b2db      	uxtb	r3, r3
  40f802:	e7f6      	b.n	40f7f2 <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  40f804:	2b0f      	cmp	r3, #15
  40f806:	d807      	bhi.n	40f818 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40f808:	4a05      	ldr	r2, [pc, #20]	; (40f820 <lv_draw_mask_add+0x30>)
  40f80a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40f80e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f812:	6051      	str	r1, [r2, #4]
    return i;
  40f814:	b218      	sxth	r0, r3
  40f816:	4770      	bx	lr
        return LV_MASK_ID_INV;
  40f818:	f04f 30ff 	mov.w	r0, #4294967295
}
  40f81c:	4770      	bx	lr
  40f81e:	bf00      	nop
  40f820:	2043a294 	.word	0x2043a294

0040f824 <lv_draw_mask_apply>:
{
  40f824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f828:	b082      	sub	sp, #8
  40f82a:	4680      	mov	r8, r0
  40f82c:	460f      	mov	r7, r1
  40f82e:	4616      	mov	r6, r2
  40f830:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  40f832:	4c0f      	ldr	r4, [pc, #60]	; (40f870 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  40f834:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  40f838:	e000      	b.n	40f83c <lv_draw_mask_apply+0x18>
        m++;
  40f83a:	3408      	adds	r4, #8
    while(m->param) {
  40f83c:	6823      	ldr	r3, [r4, #0]
  40f83e:	b16b      	cbz	r3, 40f85c <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40f840:	681d      	ldr	r5, [r3, #0]
  40f842:	9300      	str	r3, [sp, #0]
  40f844:	4653      	mov	r3, sl
  40f846:	4632      	mov	r2, r6
  40f848:	4639      	mov	r1, r7
  40f84a:	4640      	mov	r0, r8
  40f84c:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40f84e:	4603      	mov	r3, r0
  40f850:	b140      	cbz	r0, 40f864 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40f852:	2802      	cmp	r0, #2
  40f854:	d1f1      	bne.n	40f83a <lv_draw_mask_apply+0x16>
  40f856:	f04f 0901 	mov.w	r9, #1
  40f85a:	e7ee      	b.n	40f83a <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f85c:	f1b9 0f00 	cmp.w	r9, #0
  40f860:	d004      	beq.n	40f86c <lv_draw_mask_apply+0x48>
  40f862:	2302      	movs	r3, #2
}
  40f864:	4618      	mov	r0, r3
  40f866:	b002      	add	sp, #8
  40f868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f86c:	2301      	movs	r3, #1
  40f86e:	e7f9      	b.n	40f864 <lv_draw_mask_apply+0x40>
  40f870:	2043a294 	.word	0x2043a294

0040f874 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40f874:	f1b0 3fff 	cmp.w	r0, #4294967295
  40f878:	d00a      	beq.n	40f890 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40f87a:	4b06      	ldr	r3, [pc, #24]	; (40f894 <lv_draw_mask_remove_id+0x20>)
  40f87c:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40f880:	2200      	movs	r2, #0
  40f882:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40f886:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40f88a:	605a      	str	r2, [r3, #4]
}
  40f88c:	4608      	mov	r0, r1
  40f88e:	4770      	bx	lr
    void * p = NULL;
  40f890:	2100      	movs	r1, #0
    return p;
  40f892:	e7fb      	b.n	40f88c <lv_draw_mask_remove_id+0x18>
  40f894:	2043a294 	.word	0x2043a294

0040f898 <lv_draw_mask_remove_custom>:
{
  40f898:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f89a:	2300      	movs	r3, #0
    void * p = NULL;
  40f89c:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f89e:	e004      	b.n	40f8aa <lv_draw_mask_remove_custom+0x12>
}
  40f8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  40f8a4:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f8a6:	3301      	adds	r3, #1
  40f8a8:	b2db      	uxtb	r3, r3
  40f8aa:	2b0f      	cmp	r3, #15
  40f8ac:	d81a      	bhi.n	40f8e4 <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f8ae:	4a0e      	ldr	r2, [pc, #56]	; (40f8e8 <lv_draw_mask_remove_custom+0x50>)
  40f8b0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f8b4:	6852      	ldr	r2, [r2, #4]
  40f8b6:	428a      	cmp	r2, r1
  40f8b8:	d1f5      	bne.n	40f8a6 <lv_draw_mask_remove_custom+0xe>
{
  40f8ba:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40f8bc:	4a0a      	ldr	r2, [pc, #40]	; (40f8e8 <lv_draw_mask_remove_custom+0x50>)
  40f8be:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40f8c2:	2400      	movs	r4, #0
  40f8c4:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40f8c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f8cc:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f8ce:	3301      	adds	r3, #1
  40f8d0:	b2db      	uxtb	r3, r3
  40f8d2:	2b0f      	cmp	r3, #15
  40f8d4:	d8e4      	bhi.n	40f8a0 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f8d6:	4a04      	ldr	r2, [pc, #16]	; (40f8e8 <lv_draw_mask_remove_custom+0x50>)
  40f8d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f8dc:	6852      	ldr	r2, [r2, #4]
  40f8de:	428a      	cmp	r2, r1
  40f8e0:	d1f5      	bne.n	40f8ce <lv_draw_mask_remove_custom+0x36>
  40f8e2:	e7eb      	b.n	40f8bc <lv_draw_mask_remove_custom+0x24>
  40f8e4:	4770      	bx	lr
  40f8e6:	bf00      	nop
  40f8e8:	2043a294 	.word	0x2043a294

0040f8ec <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f8ec:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40f8ee:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f8f0:	e001      	b.n	40f8f6 <lv_draw_mask_get_cnt+0xa>
  40f8f2:	3301      	adds	r3, #1
  40f8f4:	b2db      	uxtb	r3, r3
  40f8f6:	2b0f      	cmp	r3, #15
  40f8f8:	d807      	bhi.n	40f90a <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40f8fa:	4a04      	ldr	r2, [pc, #16]	; (40f90c <lv_draw_mask_get_cnt+0x20>)
  40f8fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40f900:	2a00      	cmp	r2, #0
  40f902:	d0f6      	beq.n	40f8f2 <lv_draw_mask_get_cnt+0x6>
  40f904:	3001      	adds	r0, #1
  40f906:	b2c0      	uxtb	r0, r0
  40f908:	e7f3      	b.n	40f8f2 <lv_draw_mask_get_cnt+0x6>
}
  40f90a:	4770      	bx	lr
  40f90c:	2043a294 	.word	0x2043a294

0040f910 <lv_draw_mask_line_points_init>:
{
  40f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f914:	4604      	mov	r4, r0
  40f916:	4688      	mov	r8, r1
  40f918:	4616      	mov	r6, r2
  40f91a:	461f      	mov	r7, r3
  40f91c:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40f920:	212c      	movs	r1, #44	; 0x2c
  40f922:	4b50      	ldr	r3, [pc, #320]	; (40fa64 <lv_draw_mask_line_points_init+0x154>)
  40f924:	4798      	blx	r3
    if(p1y > p2y) {
  40f926:	42ae      	cmp	r6, r5
  40f928:	dc05      	bgt.n	40f936 <lv_draw_mask_line_points_init+0x26>
  40f92a:	462b      	mov	r3, r5
  40f92c:	4635      	mov	r5, r6
  40f92e:	461e      	mov	r6, r3
  40f930:	463b      	mov	r3, r7
  40f932:	4647      	mov	r7, r8
  40f934:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40f936:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40f938:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40f93a:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40f93e:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40f940:	7c23      	ldrb	r3, [r4, #16]
  40f942:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40f946:	f362 0301 	bfi	r3, r2, #0, #2
  40f94a:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40f94c:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40f94e:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40f950:	eba8 0707 	sub.w	r7, r8, r7
  40f954:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  40f958:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  40f95c:	1b75      	subs	r5, r6, r5
  40f95e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40f962:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40f966:	429a      	cmp	r2, r3
  40f968:	bfd4      	ite	le
  40f96a:	2200      	movle	r2, #0
  40f96c:	2201      	movgt	r2, #1
  40f96e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f972:	f362 0300 	bfi	r3, r2, #0, #1
  40f976:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40f97a:	2200      	movs	r2, #0
  40f97c:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  40f97e:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40f980:	4939      	ldr	r1, [pc, #228]	; (40fa68 <lv_draw_mask_line_points_init+0x158>)
  40f982:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40f984:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  40f986:	f013 0f01 	tst.w	r3, #1
  40f98a:	d024      	beq.n	40f9d6 <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  40f98c:	b13f      	cbz	r7, 40f99e <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40f98e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f992:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40f996:	fb03 f305 	mul.w	r3, r3, r5
  40f99a:	129b      	asrs	r3, r3, #10
  40f99c:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40f99e:	b13d      	cbz	r5, 40f9b0 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f9a0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40f9a4:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40f9a8:	fb05 f707 	mul.w	r7, r5, r7
  40f9ac:	12bf      	asrs	r7, r7, #10
  40f9ae:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40f9b0:	69e3      	ldr	r3, [r4, #28]
  40f9b2:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40f9b4:	7c23      	ldrb	r3, [r4, #16]
  40f9b6:	f013 0303 	ands.w	r3, r3, #3
  40f9ba:	d121      	bne.n	40fa00 <lv_draw_mask_line_points_init+0xf0>
  40f9bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f9c0:	f36f 0341 	bfc	r3, #1, #1
  40f9c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40f9c8:	6a22      	ldr	r2, [r4, #32]
  40f9ca:	1093      	asrs	r3, r2, #2
  40f9cc:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  40f9ce:	2a00      	cmp	r2, #0
  40f9d0:	db45      	blt.n	40fa5e <lv_draw_mask_line_points_init+0x14e>
  40f9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40f9d6:	b13d      	cbz	r5, 40f9e8 <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f9d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f9dc:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40f9e0:	fb03 f307 	mul.w	r3, r3, r7
  40f9e4:	129b      	asrs	r3, r3, #10
  40f9e6:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40f9e8:	b13f      	cbz	r7, 40f9fa <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f9ea:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40f9ee:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40f9f2:	fb07 f505 	mul.w	r5, r7, r5
  40f9f6:	12ad      	asrs	r5, r5, #10
  40f9f8:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40f9fa:	69a3      	ldr	r3, [r4, #24]
  40f9fc:	6223      	str	r3, [r4, #32]
  40f9fe:	e7d9      	b.n	40f9b4 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40fa00:	2b01      	cmp	r3, #1
  40fa02:	d00d      	beq.n	40fa20 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40fa04:	2b02      	cmp	r3, #2
  40fa06:	d012      	beq.n	40fa2e <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40fa08:	2b03      	cmp	r3, #3
  40fa0a:	d1dd      	bne.n	40f9c8 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40fa0c:	6a23      	ldr	r3, [r4, #32]
  40fa0e:	2b00      	cmp	r3, #0
  40fa10:	dd1e      	ble.n	40fa50 <lv_draw_mask_line_points_init+0x140>
  40fa12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fa16:	f36f 0341 	bfc	r3, #1, #1
  40fa1a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fa1e:	e7d3      	b.n	40f9c8 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40fa20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fa24:	f043 0302 	orr.w	r3, r3, #2
  40fa28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fa2c:	e7cc      	b.n	40f9c8 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40fa2e:	6a23      	ldr	r3, [r4, #32]
  40fa30:	2b00      	cmp	r3, #0
  40fa32:	dd06      	ble.n	40fa42 <lv_draw_mask_line_points_init+0x132>
  40fa34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fa38:	f043 0302 	orr.w	r3, r3, #2
  40fa3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fa40:	e7c2      	b.n	40f9c8 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  40fa42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fa46:	f36f 0341 	bfc	r3, #1, #1
  40fa4a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fa4e:	e7bb      	b.n	40f9c8 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  40fa50:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40fa54:	f043 0302 	orr.w	r3, r3, #2
  40fa58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40fa5c:	e7b4      	b.n	40f9c8 <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  40fa5e:	425b      	negs	r3, r3
  40fa60:	6263      	str	r3, [r4, #36]	; 0x24
}
  40fa62:	e7b6      	b.n	40f9d2 <lv_draw_mask_line_points_init+0xc2>
  40fa64:	004166bd 	.word	0x004166bd
  40fa68:	0040f16d 	.word	0x0040f16d

0040fa6c <lv_draw_mask_radius_init>:
{
  40fa6c:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fa6e:	888c      	ldrh	r4, [r1, #4]
  40fa70:	880e      	ldrh	r6, [r1, #0]
  40fa72:	1ba4      	subs	r4, r4, r6
  40fa74:	b2a4      	uxth	r4, r4
  40fa76:	3401      	adds	r4, #1
  40fa78:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fa7a:	88cd      	ldrh	r5, [r1, #6]
  40fa7c:	884c      	ldrh	r4, [r1, #2]
  40fa7e:	1b2d      	subs	r5, r5, r4
  40fa80:	b2ad      	uxth	r5, r5
  40fa82:	3501      	adds	r5, #1
  40fa84:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  40fa86:	42b4      	cmp	r4, r6
  40fa88:	bfa8      	it	ge
  40fa8a:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  40fa8c:	1064      	asrs	r4, r4, #1
  40fa8e:	42a2      	cmp	r2, r4
  40fa90:	dd00      	ble.n	40fa94 <lv_draw_mask_radius_init+0x28>
  40fa92:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  40fa94:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  40fa98:	2408      	movs	r4, #8
  40fa9a:	e004      	b.n	40faa6 <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  40fa9c:	f811 6b01 	ldrb.w	r6, [r1], #1
  40faa0:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40faa4:	3c01      	subs	r4, #1
    while(len) {
  40faa6:	2c00      	cmp	r4, #0
  40faa8:	d1f8      	bne.n	40fa9c <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  40faaa:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40faac:	7c82      	ldrb	r2, [r0, #18]
  40faae:	f363 0200 	bfi	r2, r3, #0, #1
  40fab2:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40fab4:	4b05      	ldr	r3, [pc, #20]	; (40facc <lv_draw_mask_radius_init+0x60>)
  40fab6:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40fab8:	2302      	movs	r3, #2
  40faba:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40fabc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40fac0:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40fac2:	2300      	movs	r3, #0
  40fac4:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40fac6:	8303      	strh	r3, [r0, #24]
}
  40fac8:	bc70      	pop	{r4, r5, r6}
  40faca:	4770      	bx	lr
  40facc:	0040f259 	.word	0x0040f259

0040fad0 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fad4:	b085      	sub	sp, #20
  40fad6:	9002      	str	r0, [sp, #8]
  40fad8:	9101      	str	r1, [sp, #4]
  40fada:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  40fadc:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40fade:	f011 0f01 	tst.w	r1, #1
  40fae2:	d10e      	bne.n	40fb02 <shadow_blur_corner+0x32>
  40fae4:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40fae8:	9b02      	ldr	r3, [sp, #8]
  40faea:	469a      	mov	sl, r3
  40faec:	005e      	lsls	r6, r3, #1
  40faee:	4630      	mov	r0, r6
  40faf0:	4b50      	ldr	r3, [pc, #320]	; (40fc34 <shadow_blur_corner+0x164>)
  40faf2:	4798      	blx	r3
  40faf4:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  40faf6:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  40faf8:	f04f 0b00 	mov.w	fp, #0
  40fafc:	9503      	str	r5, [sp, #12]
  40fafe:	9d02      	ldr	r5, [sp, #8]
  40fb00:	e024      	b.n	40fb4c <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  40fb02:	46b8      	mov	r8, r7
  40fb04:	e7f0      	b.n	40fae8 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  40fb06:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  40fb08:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40fb0a:	eba0 0e08 	sub.w	lr, r0, r8
  40fb0e:	f1be 0f01 	cmp.w	lr, #1
  40fb12:	d410      	bmi.n	40fb36 <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40fb14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40fb18:	4472      	add	r2, lr
  40fb1a:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  40fb1e:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  40fb20:	3801      	subs	r0, #1
  40fb22:	2800      	cmp	r0, #0
  40fb24:	db0a      	blt.n	40fb3c <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  40fb26:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40fb2a:	19c2      	adds	r2, r0, r7
  40fb2c:	4291      	cmp	r1, r2
  40fb2e:	ddea      	ble.n	40fb06 <shadow_blur_corner+0x36>
  40fb30:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  40fb34:	e7e8      	b.n	40fb08 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40fb36:	f8b9 2000 	ldrh.w	r2, [r9]
  40fb3a:	e7f0      	b.n	40fb1e <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40fb3c:	4632      	mov	r2, r6
  40fb3e:	4621      	mov	r1, r4
  40fb40:	4648      	mov	r0, r9
  40fb42:	4b3d      	ldr	r3, [pc, #244]	; (40fc38 <shadow_blur_corner+0x168>)
  40fb44:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40fb46:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  40fb48:	f10b 0b01 	add.w	fp, fp, #1
  40fb4c:	4629      	mov	r1, r5
  40fb4e:	45ab      	cmp	fp, r5
  40fb50:	da09      	bge.n	40fb66 <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40fb52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40fb56:	4453      	add	r3, sl
  40fb58:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  40fb5c:	9a01      	ldr	r2, [sp, #4]
  40fb5e:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  40fb62:	1e68      	subs	r0, r5, #1
  40fb64:	e7dd      	b.n	40fb22 <shadow_blur_corner+0x52>
  40fb66:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40fb68:	882b      	ldrh	r3, [r5, #0]
  40fb6a:	9a01      	ldr	r2, [sp, #4]
  40fb6c:	4694      	mov	ip, r2
  40fb6e:	fb93 f3f2 	sdiv	r3, r3, r2
  40fb72:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40fb74:	2301      	movs	r3, #1
  40fb76:	e002      	b.n	40fb7e <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40fb78:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40fb7c:	3301      	adds	r3, #1
  40fb7e:	fb0a f20a 	mul.w	r2, sl, sl
  40fb82:	4293      	cmp	r3, r2
  40fb84:	d20d      	bcs.n	40fba2 <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40fb86:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  40fb8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40fb8e:	4418      	add	r0, r3
  40fb90:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40fb94:	4282      	cmp	r2, r0
  40fb96:	d0ef      	beq.n	40fb78 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40fb98:	fb92 f2fc 	sdiv	r2, r2, ip
  40fb9c:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  40fba0:	e7ec      	b.n	40fb7c <shadow_blur_corner+0xac>
  40fba2:	f04f 0a00 	mov.w	sl, #0
  40fba6:	e034      	b.n	40fc12 <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40fba8:	f04f 0b00 	mov.w	fp, #0
  40fbac:	e011      	b.n	40fbd2 <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40fbae:	f8b9 0000 	ldrh.w	r0, [r9]
  40fbb2:	e017      	b.n	40fbe4 <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40fbb4:	1e48      	subs	r0, r1, #1
  40fbb6:	fb00 a001 	mla	r0, r0, r1, sl
  40fbba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  40fbbe:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40fbc0:	3301      	adds	r3, #1
  40fbc2:	44b1      	add	r9, r6
  40fbc4:	428b      	cmp	r3, r1
  40fbc6:	da18      	bge.n	40fbfa <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40fbc8:	0058      	lsls	r0, r3, #1
  40fbca:	2a00      	cmp	r2, #0
  40fbcc:	dbec      	blt.n	40fba8 <shadow_blur_corner+0xd8>
  40fbce:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  40fbd2:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40fbd6:	1bd8      	subs	r0, r3, r7
  40fbd8:	2800      	cmp	r0, #0
  40fbda:	dde8      	ble.n	40fbae <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40fbdc:	fb00 a001 	mla	r0, r0, r1, sl
  40fbe0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  40fbe4:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40fbe6:	eb08 0003 	add.w	r0, r8, r3
  40fbea:	3001      	adds	r0, #1
  40fbec:	4281      	cmp	r1, r0
  40fbee:	dde1      	ble.n	40fbb4 <shadow_blur_corner+0xe4>
  40fbf0:	fb00 a001 	mla	r0, r0, r1, sl
  40fbf4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40fbf8:	e7e1      	b.n	40fbbe <shadow_blur_corner+0xee>
  40fbfa:	2300      	movs	r3, #0
  40fbfc:	e005      	b.n	40fc0a <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40fbfe:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  40fc02:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40fc06:	3301      	adds	r3, #1
  40fc08:	44b6      	add	lr, r6
  40fc0a:	428b      	cmp	r3, r1
  40fc0c:	dbf7      	blt.n	40fbfe <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  40fc0e:	f10a 0a01 	add.w	sl, sl, #1
  40fc12:	458a      	cmp	sl, r1
  40fc14:	da08      	bge.n	40fc28 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40fc16:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  40fc1a:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  40fc1e:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40fc22:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40fc24:	2300      	movs	r3, #0
  40fc26:	e7cd      	b.n	40fbc4 <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  40fc28:	4620      	mov	r0, r4
  40fc2a:	4b04      	ldr	r3, [pc, #16]	; (40fc3c <shadow_blur_corner+0x16c>)
  40fc2c:	4798      	blx	r3
}
  40fc2e:	b005      	add	sp, #20
  40fc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fc34:	00416531 	.word	0x00416531
  40fc38:	00416399 	.word	0x00416399
  40fc3c:	004162e1 	.word	0x004162e1

0040fc40 <shadow_draw_corner_buf>:
{
  40fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fc44:	b08f      	sub	sp, #60	; 0x3c
  40fc46:	4688      	mov	r8, r1
  40fc48:	4692      	mov	sl, r2
  40fc4a:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  40fc4c:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  40fc50:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  40fc52:	a90c      	add	r1, sp, #48	; 0x30
  40fc54:	2308      	movs	r3, #8
  40fc56:	e004      	b.n	40fc62 <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  40fc58:	f814 6b01 	ldrb.w	r6, [r4], #1
  40fc5c:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  40fc60:	3b01      	subs	r3, #1
    while(len) {
  40fc62:	2b00      	cmp	r3, #0
  40fc64:	d1f8      	bne.n	40fc58 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40fc66:	4651      	mov	r1, sl
  40fc68:	f1ba 0f00 	cmp.w	sl, #0
  40fc6c:	db36      	blt.n	40fcdc <shadow_draw_corner_buf+0x9c>
  40fc6e:	f3c1 014f 	ubfx	r1, r1, #1, #16
  40fc72:	188b      	adds	r3, r1, r2
  40fc74:	b29b      	uxth	r3, r3
  40fc76:	f01a 0401 	ands.w	r4, sl, #1
  40fc7a:	9403      	str	r4, [sp, #12]
  40fc7c:	bf0c      	ite	eq
  40fc7e:	2401      	moveq	r4, #1
  40fc80:	2400      	movne	r4, #0
  40fc82:	1b1b      	subs	r3, r3, r4
  40fc84:	3b01      	subs	r3, #1
  40fc86:	b29b      	uxth	r3, r3
  40fc88:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  40fc8c:	3101      	adds	r1, #1
  40fc8e:	b289      	uxth	r1, r1
  40fc90:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fc94:	8884      	ldrh	r4, [r0, #4]
  40fc96:	8806      	ldrh	r6, [r0, #0]
  40fc98:	1ba4      	subs	r4, r4, r6
  40fc9a:	b2a4      	uxth	r4, r4
  40fc9c:	3401      	adds	r4, #1
  40fc9e:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  40fca0:	1b1b      	subs	r3, r3, r4
  40fca2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fca6:	88c3      	ldrh	r3, [r0, #6]
  40fca8:	8840      	ldrh	r0, [r0, #2]
  40fcaa:	1a1b      	subs	r3, r3, r0
  40fcac:	b29b      	uxth	r3, r3
  40fcae:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  40fcb0:	fa11 f183 	uxtah	r1, r1, r3
  40fcb4:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  40fcb8:	2300      	movs	r3, #0
  40fcba:	a90c      	add	r1, sp, #48	; 0x30
  40fcbc:	a805      	add	r0, sp, #20
  40fcbe:	4c4d      	ldr	r4, [pc, #308]	; (40fdf4 <shadow_draw_corner_buf+0x1b4>)
  40fcc0:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  40fcc2:	f1ba 0f01 	cmp.w	sl, #1
  40fcc6:	d00c      	beq.n	40fce2 <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  40fcc8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  40fccc:	46a9      	mov	r9, r5
  40fcce:	4628      	mov	r0, r5
  40fcd0:	4b49      	ldr	r3, [pc, #292]	; (40fdf8 <shadow_draw_corner_buf+0x1b8>)
  40fcd2:	4798      	blx	r3
  40fcd4:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  40fcd6:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  40fcd8:	2700      	movs	r7, #0
  40fcda:	e00d      	b.n	40fcf8 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40fcdc:	f10a 0101 	add.w	r1, sl, #1
  40fce0:	e7c5      	b.n	40fc6e <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  40fce2:	f04f 0a01 	mov.w	sl, #1
  40fce6:	e7f1      	b.n	40fccc <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40fce8:	ea4f 0149 	mov.w	r1, r9, lsl #1
  40fcec:	4630      	mov	r0, r6
  40fcee:	4b43      	ldr	r3, [pc, #268]	; (40fdfc <shadow_draw_corner_buf+0x1bc>)
  40fcf0:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40fcf2:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  40fcf6:	3701      	adds	r7, #1
  40fcf8:	42af      	cmp	r7, r5
  40fcfa:	da2c      	bge.n	40fd56 <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  40fcfc:	4649      	mov	r1, r9
  40fcfe:	4620      	mov	r0, r4
  40fd00:	4b3f      	ldr	r3, [pc, #252]	; (40fe00 <shadow_draw_corner_buf+0x1c0>)
  40fd02:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40fd04:	ab0e      	add	r3, sp, #56	; 0x38
  40fd06:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  40fd0a:	9300      	str	r3, [sp, #0]
  40fd0c:	b22b      	sxth	r3, r5
  40fd0e:	b23a      	sxth	r2, r7
  40fd10:	2100      	movs	r1, #0
  40fd12:	4620      	mov	r0, r4
  40fd14:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40fd16:	2800      	cmp	r0, #0
  40fd18:	d0e6      	beq.n	40fce8 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40fd1a:	7823      	ldrb	r3, [r4, #0]
  40fd1c:	019b      	lsls	r3, r3, #6
  40fd1e:	4650      	mov	r0, sl
  40fd20:	fb93 f3fa 	sdiv	r3, r3, sl
  40fd24:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  40fd26:	2301      	movs	r3, #1
  40fd28:	e007      	b.n	40fd3a <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40fd2a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40fd2e:	441a      	add	r2, r3
  40fd30:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  40fd34:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  40fd38:	3301      	adds	r3, #1
  40fd3a:	42ab      	cmp	r3, r5
  40fd3c:	dad9      	bge.n	40fcf2 <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40fd3e:	5ce2      	ldrb	r2, [r4, r3]
  40fd40:	18e1      	adds	r1, r4, r3
  40fd42:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  40fd46:	428a      	cmp	r2, r1
  40fd48:	d0ef      	beq.n	40fd2a <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40fd4a:	0192      	lsls	r2, r2, #6
  40fd4c:	fb92 f2f0 	sdiv	r2, r2, r0
  40fd50:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  40fd54:	e7f0      	b.n	40fd38 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  40fd56:	4620      	mov	r0, r4
  40fd58:	4b2a      	ldr	r3, [pc, #168]	; (40fe04 <shadow_draw_corner_buf+0x1c4>)
  40fd5a:	4798      	blx	r3
    if(sw == 1) {
  40fd5c:	f1ba 0f01 	cmp.w	sl, #1
  40fd60:	d021      	beq.n	40fda6 <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  40fd62:	b22c      	sxth	r4, r5
  40fd64:	4642      	mov	r2, r8
  40fd66:	4651      	mov	r1, sl
  40fd68:	4620      	mov	r0, r4
  40fd6a:	4b27      	ldr	r3, [pc, #156]	; (40fe08 <shadow_draw_corner_buf+0x1c8>)
  40fd6c:	4798      	blx	r3
    sw += sw_ori & 1;
  40fd6e:	9b03      	ldr	r3, [sp, #12]
  40fd70:	4453      	add	r3, sl
  40fd72:	b219      	sxth	r1, r3
    if(sw > 1) {
  40fd74:	2901      	cmp	r1, #1
  40fd76:	dd32      	ble.n	40fdde <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40fd78:	f8b8 3000 	ldrh.w	r3, [r8]
  40fd7c:	019b      	lsls	r3, r3, #6
  40fd7e:	460e      	mov	r6, r1
  40fd80:	fb93 f3f1 	sdiv	r3, r3, r1
  40fd84:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fd88:	2301      	movs	r3, #1
  40fd8a:	e011      	b.n	40fdb0 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  40fd8c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40fd90:	0992      	lsrs	r2, r2, #6
  40fd92:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  40fd96:	3301      	adds	r3, #1
  40fd98:	fb05 f205 	mul.w	r2, r5, r5
  40fd9c:	4293      	cmp	r3, r2
  40fd9e:	dbf5      	blt.n	40fd8c <shadow_draw_corner_buf+0x14c>
}
  40fda0:	b00f      	add	sp, #60	; 0x3c
  40fda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fda6:	2300      	movs	r3, #0
  40fda8:	e7f6      	b.n	40fd98 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40fdaa:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fdae:	3301      	adds	r3, #1
  40fdb0:	fb09 f209 	mul.w	r2, r9, r9
  40fdb4:	4293      	cmp	r3, r2
  40fdb6:	d20e      	bcs.n	40fdd6 <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40fdb8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40fdbc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40fdc0:	4418      	add	r0, r3
  40fdc2:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  40fdc6:	4282      	cmp	r2, r0
  40fdc8:	d0ef      	beq.n	40fdaa <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40fdca:	0192      	lsls	r2, r2, #6
  40fdcc:	fb92 f2f6 	sdiv	r2, r2, r6
  40fdd0:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  40fdd4:	e7eb      	b.n	40fdae <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  40fdd6:	4642      	mov	r2, r8
  40fdd8:	4620      	mov	r0, r4
  40fdda:	4b0b      	ldr	r3, [pc, #44]	; (40fe08 <shadow_draw_corner_buf+0x1c8>)
  40fddc:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fdde:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  40fde0:	fb05 f205 	mul.w	r2, r5, r5
  40fde4:	4293      	cmp	r3, r2
  40fde6:	dadb      	bge.n	40fda0 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  40fde8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40fdec:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  40fdf0:	3301      	adds	r3, #1
  40fdf2:	e7f5      	b.n	40fde0 <shadow_draw_corner_buf+0x1a0>
  40fdf4:	0040fa6d 	.word	0x0040fa6d
  40fdf8:	00416531 	.word	0x00416531
  40fdfc:	004166bd 	.word	0x004166bd
  40fe00:	00416715 	.word	0x00416715
  40fe04:	004162e1 	.word	0x004162e1
  40fe08:	0040fad1 	.word	0x0040fad1

0040fe0c <draw_shadow>:
{
  40fe0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fe10:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  40fe12:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  40fe16:	2c00      	cmp	r4, #0
  40fe18:	f000 83f0 	beq.w	4105fc <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  40fe1c:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  40fe20:	2f02      	cmp	r7, #2
  40fe22:	f240 83eb 	bls.w	4105fc <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40fe26:	2c01      	cmp	r4, #1
  40fe28:	d07b      	beq.n	40ff22 <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  40fe2a:	8806      	ldrh	r6, [r0, #0]
  40fe2c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  40fe2e:	441e      	add	r6, r3
  40fe30:	b2b6      	uxth	r6, r6
  40fe32:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  40fe36:	eba6 060e 	sub.w	r6, r6, lr
  40fe3a:	b2b6      	uxth	r6, r6
  40fe3c:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  40fe40:	8885      	ldrh	r5, [r0, #4]
  40fe42:	441d      	add	r5, r3
  40fe44:	fa1e f585 	uxtah	r5, lr, r5
  40fe48:	b2ad      	uxth	r5, r5
  40fe4a:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  40fe4e:	8843      	ldrh	r3, [r0, #2]
  40fe50:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  40fe54:	4463      	add	r3, ip
  40fe56:	b29b      	uxth	r3, r3
  40fe58:	eba3 030e 	sub.w	r3, r3, lr
  40fe5c:	b29b      	uxth	r3, r3
  40fe5e:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  40fe62:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  40fe66:	44c4      	add	ip, r8
  40fe68:	fa1e fe8c 	uxtah	lr, lr, ip
  40fe6c:	fa1f fe8e 	uxth.w	lr, lr
  40fe70:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40fe74:	46a0      	mov	r8, r4
  40fe76:	2c00      	cmp	r4, #0
  40fe78:	db5c      	blt.n	40ff34 <draw_shadow+0x128>
  40fe7a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40fe7e:	f1c8 0800 	rsb	r8, r8, #0
  40fe82:	fa1f f888 	uxth.w	r8, r8
  40fe86:	eb06 0c08 	add.w	ip, r6, r8
  40fe8a:	fa1f fc8c 	uxth.w	ip, ip
  40fe8e:	f10c 3cff 	add.w	ip, ip, #4294967295
  40fe92:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40fe96:	46a4      	mov	ip, r4
  40fe98:	2c00      	cmp	r4, #0
  40fe9a:	db4e      	blt.n	40ff3a <draw_shadow+0x12e>
  40fe9c:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  40fea0:	4465      	add	r5, ip
  40fea2:	b2ad      	uxth	r5, r5
  40fea4:	3501      	adds	r5, #1
  40fea6:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  40feaa:	eb03 0608 	add.w	r6, r3, r8
  40feae:	b2b6      	uxth	r6, r6
  40feb0:	3e01      	subs	r6, #1
  40feb2:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  40feb6:	eb0e 030c 	add.w	r3, lr, ip
  40feba:	b29b      	uxth	r3, r3
  40febc:	3301      	adds	r3, #1
  40febe:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40fec2:	2ffd      	cmp	r7, #253	; 0xfd
  40fec4:	d900      	bls.n	40fec8 <draw_shadow+0xbc>
  40fec6:	27ff      	movs	r7, #255	; 0xff
  40fec8:	4615      	mov	r5, r2
  40feca:	4688      	mov	r8, r1
  40fecc:	9104      	str	r1, [sp, #16]
  40fece:	4681      	mov	r9, r0
  40fed0:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40fed2:	4b9a      	ldr	r3, [pc, #616]	; (41013c <draw_shadow+0x330>)
  40fed4:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40fed6:	4b9a      	ldr	r3, [pc, #616]	; (410140 <draw_shadow+0x334>)
  40fed8:	4798      	blx	r3
  40feda:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  40fedc:	4642      	mov	r2, r8
  40fede:	a922      	add	r1, sp, #136	; 0x88
  40fee0:	a820      	add	r0, sp, #128	; 0x80
  40fee2:	4b98      	ldr	r3, [pc, #608]	; (410144 <draw_shadow+0x338>)
  40fee4:	4798      	blx	r3
    if(is_common == false) return;
  40fee6:	9006      	str	r0, [sp, #24]
  40fee8:	2800      	cmp	r0, #0
  40feea:	f000 8387 	beq.w	4105fc <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  40feee:	8a31      	ldrh	r1, [r6, #16]
  40fef0:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  40fef4:	1a5b      	subs	r3, r3, r1
  40fef6:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  40fefa:	8a72      	ldrh	r2, [r6, #18]
  40fefc:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  40ff00:	1a9b      	subs	r3, r3, r2
  40ff02:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  40ff06:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40ff0a:	1a5b      	subs	r3, r3, r1
  40ff0c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  40ff10:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  40ff14:	1a9b      	subs	r3, r3, r2
  40ff16:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  40ff1a:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  40ff1c:	aa1e      	add	r2, sp, #120	; 0x78
  40ff1e:	2308      	movs	r3, #8
  40ff20:	e013      	b.n	40ff4a <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40ff22:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40ff24:	2b00      	cmp	r3, #0
  40ff26:	d180      	bne.n	40fe2a <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  40ff28:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  40ff2c:	2b00      	cmp	r3, #0
  40ff2e:	f73f af7c 	bgt.w	40fe2a <draw_shadow+0x1e>
  40ff32:	e363      	b.n	4105fc <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40ff34:	f104 0801 	add.w	r8, r4, #1
  40ff38:	e79f      	b.n	40fe7a <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40ff3a:	f104 0c01 	add.w	ip, r4, #1
  40ff3e:	e7ad      	b.n	40fe9c <draw_shadow+0x90>
        *d8 = *s8;
  40ff40:	f811 0b01 	ldrb.w	r0, [r1], #1
  40ff44:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40ff48:	3b01      	subs	r3, #1
    while(len) {
  40ff4a:	2b00      	cmp	r3, #0
  40ff4c:	d1f8      	bne.n	40ff40 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  40ff4e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  40ff52:	3201      	adds	r2, #1
  40ff54:	b296      	uxth	r6, r2
  40ff56:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  40ff5a:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  40ff5e:	3001      	adds	r0, #1
  40ff60:	b280      	uxth	r0, r0
  40ff62:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  40ff66:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  40ff6a:	3a01      	subs	r2, #1
  40ff6c:	b292      	uxth	r2, r2
  40ff6e:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  40ff72:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  40ff76:	3b01      	subs	r3, #1
  40ff78:	b29b      	uxth	r3, r3
  40ff7a:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  40ff7e:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ff82:	1b92      	subs	r2, r2, r6
  40ff84:	b292      	uxth	r2, r2
  40ff86:	3201      	adds	r2, #1
  40ff88:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ff8a:	1a1e      	subs	r6, r3, r0
  40ff8c:	b2b6      	uxth	r6, r6
  40ff8e:	3601      	adds	r6, #1
  40ff90:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  40ff92:	42b2      	cmp	r2, r6
  40ff94:	da00      	bge.n	40ff98 <draw_shadow+0x18c>
  40ff96:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  40ff98:	1076      	asrs	r6, r6, #1
  40ff9a:	42b1      	cmp	r1, r6
  40ff9c:	dc00      	bgt.n	40ffa0 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  40ff9e:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ffa0:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  40ffa4:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  40ffa8:	1ad2      	subs	r2, r2, r3
  40ffaa:	b292      	uxth	r2, r2
  40ffac:	3201      	adds	r2, #1
  40ffae:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ffb0:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  40ffb4:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  40ffb8:	1a1b      	subs	r3, r3, r0
  40ffba:	b29b      	uxth	r3, r3
  40ffbc:	3301      	adds	r3, #1
  40ffbe:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  40ffc2:	4590      	cmp	r8, r2
  40ffc4:	dd00      	ble.n	40ffc8 <draw_shadow+0x1bc>
  40ffc6:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  40ffc8:	ea4f 0868 	mov.w	r8, r8, asr #1
  40ffcc:	4541      	cmp	r1, r8
  40ffce:	dc00      	bgt.n	40ffd2 <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  40ffd0:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  40ffd2:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  40ffd4:	fb04 f004 	mul.w	r0, r4, r4
  40ffd8:	0040      	lsls	r0, r0, #1
  40ffda:	4b5b      	ldr	r3, [pc, #364]	; (410148 <draw_shadow+0x33c>)
  40ffdc:	4798      	blx	r3
  40ffde:	4601      	mov	r1, r0
  40ffe0:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  40ffe2:	fa0f f388 	sxth.w	r3, r8
  40ffe6:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  40ffea:	a824      	add	r0, sp, #144	; 0x90
  40ffec:	f8df 8168 	ldr.w	r8, [pc, #360]	; 410158 <draw_shadow+0x34c>
  40fff0:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40fff2:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  40fff6:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fffa:	1a9b      	subs	r3, r3, r2
  40fffc:	b29b      	uxth	r3, r3
  40fffe:	3301      	adds	r3, #1
  410000:	b21b      	sxth	r3, r3
  410002:	2b00      	cmp	r3, #0
  410004:	db21      	blt.n	41004a <draw_shadow+0x23e>
  410006:	eb02 0363 	add.w	r3, r2, r3, asr #1
  41000a:	b29b      	uxth	r3, r3
  41000c:	930d      	str	r3, [sp, #52]	; 0x34
  41000e:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  410012:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410016:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41001a:	1a9b      	subs	r3, r3, r2
  41001c:	b29b      	uxth	r3, r3
  41001e:	3301      	adds	r3, #1
  410020:	b21b      	sxth	r3, r3
  410022:	2b00      	cmp	r3, #0
  410024:	db13      	blt.n	41004e <draw_shadow+0x242>
  410026:	eb02 0363 	add.w	r3, r2, r3, asr #1
  41002a:	b29b      	uxth	r3, r3
  41002c:	930e      	str	r3, [sp, #56]	; 0x38
  41002e:	b21b      	sxth	r3, r3
  410030:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  410032:	4b46      	ldr	r3, [pc, #280]	; (41014c <draw_shadow+0x340>)
  410034:	4798      	blx	r3
  410036:	b960      	cbnz	r0, 410052 <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  410038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  41003a:	2b00      	cmp	r3, #0
  41003c:	d17a      	bne.n	410134 <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  41003e:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  410042:	b143      	cbz	r3, 410056 <draw_shadow+0x24a>
  410044:	2300      	movs	r3, #0
  410046:	9306      	str	r3, [sp, #24]
  410048:	e005      	b.n	410056 <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  41004a:	3301      	adds	r3, #1
  41004c:	e7db      	b.n	410006 <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  41004e:	3301      	adds	r3, #1
  410050:	e7e9      	b.n	410026 <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  410052:	2300      	movs	r3, #0
  410054:	9306      	str	r3, [sp, #24]
  410056:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  41005a:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41005e:	1ac0      	subs	r0, r0, r3
  410060:	b280      	uxth	r0, r0
  410062:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  410064:	b200      	sxth	r0, r0
  410066:	4b38      	ldr	r3, [pc, #224]	; (410148 <draw_shadow+0x33c>)
  410068:	4798      	blx	r3
  41006a:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  41006c:	b233      	sxth	r3, r6
  41006e:	461a      	mov	r2, r3
  410070:	9308      	str	r3, [sp, #32]
  410072:	2301      	movs	r3, #1
  410074:	a91e      	add	r1, sp, #120	; 0x78
  410076:	a817      	add	r0, sp, #92	; 0x5c
  410078:	4e35      	ldr	r6, [pc, #212]	; (410150 <draw_shadow+0x344>)
  41007a:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  41007c:	2100      	movs	r1, #0
  41007e:	a817      	add	r0, sp, #92	; 0x5c
  410080:	4b34      	ldr	r3, [pc, #208]	; (410154 <draw_shadow+0x348>)
  410082:	4798      	blx	r3
  410084:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  410086:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41008a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  41008e:	b29b      	uxth	r3, r3
  410090:	b2a6      	uxth	r6, r4
  410092:	1b9b      	subs	r3, r3, r6
  410094:	b29b      	uxth	r3, r3
  410096:	3301      	adds	r3, #1
  410098:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  41009c:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4100a0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  4100a4:	fa16 f383 	uxtah	r3, r6, r3
  4100a8:	b29b      	uxth	r3, r3
  4100aa:	3b01      	subs	r3, #1
  4100ac:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  4100b0:	9a04      	ldr	r2, [sp, #16]
  4100b2:	a915      	add	r1, sp, #84	; 0x54
  4100b4:	a813      	add	r0, sp, #76	; 0x4c
  4100b6:	4b23      	ldr	r3, [pc, #140]	; (410144 <draw_shadow+0x338>)
  4100b8:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4100ba:	2800      	cmp	r0, #0
  4100bc:	d14e      	bne.n	41015c <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  4100be:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4100c2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4100c6:	b29b      	uxth	r3, r3
  4100c8:	1b9b      	subs	r3, r3, r6
  4100ca:	b29b      	uxth	r3, r3
  4100cc:	3301      	adds	r3, #1
  4100ce:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  4100d2:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4100d6:	b293      	uxth	r3, r2
  4100d8:	1b9b      	subs	r3, r3, r6
  4100da:	b29b      	uxth	r3, r3
  4100dc:	3301      	adds	r3, #1
  4100de:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4100e2:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4100e6:	9a04      	ldr	r2, [sp, #16]
  4100e8:	a915      	add	r1, sp, #84	; 0x54
  4100ea:	a813      	add	r0, sp, #76	; 0x4c
  4100ec:	4b15      	ldr	r3, [pc, #84]	; (410144 <draw_shadow+0x338>)
  4100ee:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4100f0:	2800      	cmp	r0, #0
  4100f2:	f040 80b0 	bne.w	410256 <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  4100f6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  4100fa:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  4100fe:	b29b      	uxth	r3, r3
  410100:	1b9b      	subs	r3, r3, r6
  410102:	b29b      	uxth	r3, r3
  410104:	3301      	adds	r3, #1
  410106:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  41010a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41010e:	4433      	add	r3, r6
  410110:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  410114:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  410118:	1b9b      	subs	r3, r3, r6
  41011a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41011e:	9a04      	ldr	r2, [sp, #16]
  410120:	a915      	add	r1, sp, #84	; 0x54
  410122:	a813      	add	r0, sp, #76	; 0x4c
  410124:	4b07      	ldr	r3, [pc, #28]	; (410144 <draw_shadow+0x338>)
  410126:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410128:	2800      	cmp	r0, #0
  41012a:	f040 8115 	bne.w	410358 <draw_shadow+0x54c>
  41012e:	9907      	ldr	r1, [sp, #28]
  410130:	2000      	movs	r0, #0
  410132:	e1ab      	b.n	41048c <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  410134:	2300      	movs	r3, #0
  410136:	9306      	str	r3, [sp, #24]
  410138:	e78d      	b.n	410056 <draw_shadow+0x24a>
  41013a:	bf00      	nop
  41013c:	00409531 	.word	0x00409531
  410140:	004149fd 	.word	0x004149fd
  410144:	004151bb 	.word	0x004151bb
  410148:	00416531 	.word	0x00416531
  41014c:	0040f8ed 	.word	0x0040f8ed
  410150:	0040fa6d 	.word	0x0040fa6d
  410154:	0040f7f1 	.word	0x0040f7f1
  410158:	0040fc41 	.word	0x0040fc41
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41015c:	9a08      	ldr	r2, [sp, #32]
  41015e:	a91e      	add	r1, sp, #120	; 0x78
  410160:	a815      	add	r0, sp, #84	; 0x54
  410162:	4ba2      	ldr	r3, [pc, #648]	; (4103ec <draw_shadow+0x5e0>)
  410164:	4798      	blx	r3
  410166:	2800      	cmp	r0, #0
  410168:	d1a9      	bne.n	4100be <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  41016a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  41016e:	459b      	cmp	fp, r3
  410170:	da01      	bge.n	410176 <draw_shadow+0x36a>
  410172:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  410176:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  41017a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41017c:	429a      	cmp	r2, r3
  41017e:	db03      	blt.n	410188 <draw_shadow+0x37c>
  410180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410182:	3301      	adds	r3, #1
  410184:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410188:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  41018c:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410190:	b291      	uxth	r1, r2
  410192:	1a5b      	subs	r3, r3, r1
  410194:	b29b      	uxth	r3, r3
  410196:	3301      	adds	r3, #1
  410198:	b21b      	sxth	r3, r3
  41019a:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41019c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4101a0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  4101a4:	b288      	uxth	r0, r1
  4101a6:	1a1b      	subs	r3, r3, r0
  4101a8:	b29b      	uxth	r3, r3
  4101aa:	3301      	adds	r3, #1
  4101ac:	b21b      	sxth	r3, r3
  4101ae:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4101b0:	2b00      	cmp	r3, #0
  4101b2:	dd84      	ble.n	4100be <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4101b4:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4101b8:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  4101bc:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  4101c0:	eba2 0808 	sub.w	r8, r2, r8
  4101c4:	fb08 1804 	mla	r8, r8, r4, r1
  4101c8:	9b07      	ldr	r3, [sp, #28]
  4101ca:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4101cc:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4101ce:	aa11      	add	r2, sp, #68	; 0x44
  4101d0:	2308      	movs	r3, #8
    while(len) {
  4101d2:	b12b      	cbz	r3, 4101e0 <draw_shadow+0x3d4>
        *d8 = *s8;
  4101d4:	f811 0b01 	ldrb.w	r0, [r1], #1
  4101d8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4101dc:	3b01      	subs	r3, #1
  4101de:	e7f8      	b.n	4101d2 <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  4101e0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4101e4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4101e8:	f04f 0900 	mov.w	r9, #0
  4101ec:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  4101f0:	46a3      	mov	fp, r4
  4101f2:	46f2      	mov	sl, lr
  4101f4:	e017      	b.n	410226 <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4101f6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4101fa:	9302      	str	r3, [sp, #8]
  4101fc:	9701      	str	r7, [sp, #4]
  4101fe:	9000      	str	r0, [sp, #0]
  410200:	9b05      	ldr	r3, [sp, #20]
  410202:	8c2a      	ldrh	r2, [r5, #32]
  410204:	a911      	add	r1, sp, #68	; 0x44
  410206:	9804      	ldr	r0, [sp, #16]
  410208:	4c79      	ldr	r4, [pc, #484]	; (4103f0 <draw_shadow+0x5e4>)
  41020a:	47a0      	blx	r4
                fa.y1++;
  41020c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410210:	3301      	adds	r3, #1
  410212:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410216:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41021a:	3301      	adds	r3, #1
  41021c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410220:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  410222:	f109 0901 	add.w	r9, r9, #1
  410226:	45d1      	cmp	r9, sl
  410228:	da11      	bge.n	41024e <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  41022a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41022c:	4641      	mov	r1, r8
  41022e:	9c05      	ldr	r4, [sp, #20]
  410230:	4620      	mov	r0, r4
  410232:	4b70      	ldr	r3, [pc, #448]	; (4103f4 <draw_shadow+0x5e8>)
  410234:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410238:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41023c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410240:	4620      	mov	r0, r4
  410242:	4c6d      	ldr	r4, [pc, #436]	; (4103f8 <draw_shadow+0x5ec>)
  410244:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410246:	2801      	cmp	r0, #1
  410248:	d1d5      	bne.n	4101f6 <draw_shadow+0x3ea>
  41024a:	2002      	movs	r0, #2
  41024c:	e7d3      	b.n	4101f6 <draw_shadow+0x3ea>
  41024e:	465c      	mov	r4, fp
  410250:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  410254:	e733      	b.n	4100be <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410256:	9a08      	ldr	r2, [sp, #32]
  410258:	a91e      	add	r1, sp, #120	; 0x78
  41025a:	a815      	add	r0, sp, #84	; 0x54
  41025c:	4b63      	ldr	r3, [pc, #396]	; (4103ec <draw_shadow+0x5e0>)
  41025e:	4798      	blx	r3
  410260:	2800      	cmp	r0, #0
  410262:	f47f af48 	bne.w	4100f6 <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410266:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41026a:	459b      	cmp	fp, r3
  41026c:	db03      	blt.n	410276 <draw_shadow+0x46a>
  41026e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410270:	3301      	adds	r3, #1
  410272:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  410276:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  41027a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41027c:	429a      	cmp	r2, r3
  41027e:	db03      	blt.n	410288 <draw_shadow+0x47c>
  410280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410282:	3301      	adds	r3, #1
  410284:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410288:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  41028c:	b293      	uxth	r3, r2
  41028e:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  410292:	1a5b      	subs	r3, r3, r1
  410294:	b29b      	uxth	r3, r3
  410296:	3301      	adds	r3, #1
  410298:	b21b      	sxth	r3, r3
  41029a:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41029c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4102a0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  4102a4:	b288      	uxth	r0, r1
  4102a6:	1a1b      	subs	r3, r3, r0
  4102a8:	b29b      	uxth	r3, r3
  4102aa:	3301      	adds	r3, #1
  4102ac:	b21b      	sxth	r3, r3
  4102ae:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4102b0:	2b00      	cmp	r3, #0
  4102b2:	f77f af20 	ble.w	4100f6 <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4102b6:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4102ba:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4102be:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  4102c2:	eba8 0802 	sub.w	r8, r8, r2
  4102c6:	fb08 1804 	mla	r8, r8, r4, r1
  4102ca:	9b07      	ldr	r3, [sp, #28]
  4102cc:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4102ce:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4102d0:	aa11      	add	r2, sp, #68	; 0x44
  4102d2:	2308      	movs	r3, #8
    while(len) {
  4102d4:	b12b      	cbz	r3, 4102e2 <draw_shadow+0x4d6>
        *d8 = *s8;
  4102d6:	f811 0b01 	ldrb.w	r0, [r1], #1
  4102da:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4102de:	3b01      	subs	r3, #1
  4102e0:	e7f8      	b.n	4102d4 <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  4102e2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4102e6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  4102ea:	f04f 0900 	mov.w	r9, #0
  4102ee:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  4102f2:	46a3      	mov	fp, r4
  4102f4:	46f2      	mov	sl, lr
  4102f6:	e017      	b.n	410328 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4102f8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4102fc:	9302      	str	r3, [sp, #8]
  4102fe:	9701      	str	r7, [sp, #4]
  410300:	9000      	str	r0, [sp, #0]
  410302:	9b05      	ldr	r3, [sp, #20]
  410304:	8c2a      	ldrh	r2, [r5, #32]
  410306:	a911      	add	r1, sp, #68	; 0x44
  410308:	9804      	ldr	r0, [sp, #16]
  41030a:	4c39      	ldr	r4, [pc, #228]	; (4103f0 <draw_shadow+0x5e4>)
  41030c:	47a0      	blx	r4
                fa.y1--;
  41030e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410312:	3b01      	subs	r3, #1
  410314:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  410318:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41031c:	3b01      	subs	r3, #1
  41031e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  410322:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  410324:	f109 0901 	add.w	r9, r9, #1
  410328:	45d1      	cmp	r9, sl
  41032a:	da11      	bge.n	410350 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  41032c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41032e:	4641      	mov	r1, r8
  410330:	9c05      	ldr	r4, [sp, #20]
  410332:	4620      	mov	r0, r4
  410334:	4b2f      	ldr	r3, [pc, #188]	; (4103f4 <draw_shadow+0x5e8>)
  410336:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41033a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41033e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410342:	4620      	mov	r0, r4
  410344:	4c2c      	ldr	r4, [pc, #176]	; (4103f8 <draw_shadow+0x5ec>)
  410346:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410348:	2801      	cmp	r0, #1
  41034a:	d1d5      	bne.n	4102f8 <draw_shadow+0x4ec>
  41034c:	2002      	movs	r0, #2
  41034e:	e7d3      	b.n	4102f8 <draw_shadow+0x4ec>
  410350:	465c      	mov	r4, fp
  410352:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  410356:	e6ce      	b.n	4100f6 <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410358:	9a08      	ldr	r2, [sp, #32]
  41035a:	a91e      	add	r1, sp, #120	; 0x78
  41035c:	a815      	add	r0, sp, #84	; 0x54
  41035e:	4b23      	ldr	r3, [pc, #140]	; (4103ec <draw_shadow+0x5e0>)
  410360:	4798      	blx	r3
  410362:	2800      	cmp	r0, #0
  410364:	f47f aee3 	bne.w	41012e <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  410368:	9b06      	ldr	r3, [sp, #24]
  41036a:	b14b      	cbz	r3, 410380 <draw_shadow+0x574>
  41036c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41036e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  410372:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  410376:	4293      	cmp	r3, r2
  410378:	bfb8      	it	lt
  41037a:	4613      	movlt	r3, r2
  41037c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  410380:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410384:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  410388:	b291      	uxth	r1, r2
  41038a:	1a5b      	subs	r3, r3, r1
  41038c:	b29b      	uxth	r3, r3
  41038e:	3301      	adds	r3, #1
  410390:	b21b      	sxth	r3, r3
  410392:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410394:	2b00      	cmp	r3, #0
  410396:	f77f aeca 	ble.w	41012e <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41039a:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  41039e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  4103a2:	ebaa 0a03 	sub.w	sl, sl, r3
  4103a6:	fa1f fa8a 	uxth.w	sl, sl
  4103aa:	f10a 0a01 	add.w	sl, sl, #1
  4103ae:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  4103b2:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  4103b4:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  4103b8:	1a52      	subs	r2, r2, r1
  4103ba:	fb03 2304 	mla	r3, r3, r4, r2
  4103be:	9a07      	ldr	r2, [sp, #28]
  4103c0:	18d3      	adds	r3, r2, r3
  4103c2:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  4103c4:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4103c6:	aa11      	add	r2, sp, #68	; 0x44
  4103c8:	2308      	movs	r3, #8
    while(len) {
  4103ca:	b12b      	cbz	r3, 4103d8 <draw_shadow+0x5cc>
        *d8 = *s8;
  4103cc:	f811 0b01 	ldrb.w	r0, [r1], #1
  4103d0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4103d4:	3b01      	subs	r3, #1
  4103d6:	e7f8      	b.n	4103ca <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  4103d8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4103dc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4103e0:	f04f 0800 	mov.w	r8, #0
  4103e4:	970f      	str	r7, [sp, #60]	; 0x3c
  4103e6:	46a1      	mov	r9, r4
  4103e8:	9c06      	ldr	r4, [sp, #24]
  4103ea:	e02a      	b.n	410442 <draw_shadow+0x636>
  4103ec:	00415431 	.word	0x00415431
  4103f0:	0040c5c9 	.word	0x0040c5c9
  4103f4:	00416399 	.word	0x00416399
  4103f8:	0040f825 	.word	0x0040f825
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4103fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4103fe:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410402:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410406:	9805      	ldr	r0, [sp, #20]
  410408:	4fbc      	ldr	r7, [pc, #752]	; (4106fc <draw_shadow+0x8f0>)
  41040a:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41040c:	2801      	cmp	r0, #1
  41040e:	d023      	beq.n	410458 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  410410:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410414:	9302      	str	r3, [sp, #8]
  410416:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  41041a:	9301      	str	r3, [sp, #4]
  41041c:	9000      	str	r0, [sp, #0]
  41041e:	9b05      	ldr	r3, [sp, #20]
  410420:	8c2a      	ldrh	r2, [r5, #32]
  410422:	a911      	add	r1, sp, #68	; 0x44
  410424:	9804      	ldr	r0, [sp, #16]
  410426:	4fb6      	ldr	r7, [pc, #728]	; (410700 <draw_shadow+0x8f4>)
  410428:	47b8      	blx	r7
                fa.y1++;
  41042a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41042e:	3301      	adds	r3, #1
  410430:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410434:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410438:	3301      	adds	r3, #1
  41043a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  41043e:	f108 0801 	add.w	r8, r8, #1
  410442:	45d0      	cmp	r8, sl
  410444:	da0a      	bge.n	41045c <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410448:	990e      	ldr	r1, [sp, #56]	; 0x38
  41044a:	9805      	ldr	r0, [sp, #20]
  41044c:	4bad      	ldr	r3, [pc, #692]	; (410704 <draw_shadow+0x8f8>)
  41044e:	4798      	blx	r3
                if(simple_mode) {
  410450:	2c00      	cmp	r4, #0
  410452:	d0d3      	beq.n	4103fc <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410454:	2002      	movs	r0, #2
  410456:	e7db      	b.n	410410 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410458:	2002      	movs	r0, #2
  41045a:	e7d9      	b.n	410410 <draw_shadow+0x604>
  41045c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  41045e:	464c      	mov	r4, r9
  410460:	e665      	b.n	41012e <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  410462:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  410466:	da0f      	bge.n	410488 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  410468:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  41046c:	1ae2      	subs	r2, r4, r3
  41046e:	3a01      	subs	r2, #1
  410470:	f811 c002 	ldrb.w	ip, [r1, r2]
  410474:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  410478:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  41047c:	3301      	adds	r3, #1
  41047e:	4622      	mov	r2, r4
  410480:	2c00      	cmp	r4, #0
  410482:	daee      	bge.n	410462 <draw_shadow+0x656>
  410484:	1c62      	adds	r2, r4, #1
  410486:	e7ec      	b.n	410462 <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  410488:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  41048a:	3001      	adds	r0, #1
  41048c:	42a0      	cmp	r0, r4
  41048e:	da01      	bge.n	410494 <draw_shadow+0x688>
  410490:	2300      	movs	r3, #0
  410492:	e7f4      	b.n	41047e <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  410494:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410498:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  41049c:	fa16 f383 	uxtah	r3, r6, r3
  4104a0:	b29b      	uxth	r3, r3
  4104a2:	3b01      	subs	r3, #1
  4104a4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  4104a8:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4104ac:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  4104b0:	fa16 f383 	uxtah	r3, r6, r3
  4104b4:	b29b      	uxth	r3, r3
  4104b6:	3b01      	subs	r3, #1
  4104b8:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4104bc:	9a04      	ldr	r2, [sp, #16]
  4104be:	a915      	add	r1, sp, #84	; 0x54
  4104c0:	a813      	add	r0, sp, #76	; 0x4c
  4104c2:	4b91      	ldr	r3, [pc, #580]	; (410708 <draw_shadow+0x8fc>)
  4104c4:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4104c6:	2800      	cmp	r0, #0
  4104c8:	f040 809b 	bne.w	410602 <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  4104cc:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4104d0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  4104d4:	fa16 f383 	uxtah	r3, r6, r3
  4104d8:	b29b      	uxth	r3, r3
  4104da:	3b01      	subs	r3, #1
  4104dc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  4104e0:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4104e4:	b293      	uxth	r3, r2
  4104e6:	1b9b      	subs	r3, r3, r6
  4104e8:	b29b      	uxth	r3, r3
  4104ea:	3301      	adds	r3, #1
  4104ec:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4104f0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4104f4:	9a04      	ldr	r2, [sp, #16]
  4104f6:	a915      	add	r1, sp, #84	; 0x54
  4104f8:	a813      	add	r0, sp, #76	; 0x4c
  4104fa:	4b83      	ldr	r3, [pc, #524]	; (410708 <draw_shadow+0x8fc>)
  4104fc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4104fe:	2800      	cmp	r0, #0
  410500:	f040 810a 	bne.w	410718 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  410504:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410508:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  41050c:	fa16 f383 	uxtah	r3, r6, r3
  410510:	b29b      	uxth	r3, r3
  410512:	3b01      	subs	r3, #1
  410514:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  410518:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41051c:	4433      	add	r3, r6
  41051e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  410522:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  410526:	1b9b      	subs	r3, r3, r6
  410528:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41052c:	9a04      	ldr	r2, [sp, #16]
  41052e:	a915      	add	r1, sp, #84	; 0x54
  410530:	a813      	add	r0, sp, #76	; 0x4c
  410532:	4b75      	ldr	r3, [pc, #468]	; (410708 <draw_shadow+0x8fc>)
  410534:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410536:	2800      	cmp	r0, #0
  410538:	f040 816c 	bne.w	410814 <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  41053c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410540:	4433      	add	r3, r6
  410542:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  410546:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41054a:	1b9b      	subs	r3, r3, r6
  41054c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  410550:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  410554:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  410558:	fa16 f383 	uxtah	r3, r6, r3
  41055c:	b29b      	uxth	r3, r3
  41055e:	3b01      	subs	r3, #1
  410560:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410564:	9a04      	ldr	r2, [sp, #16]
  410566:	a915      	add	r1, sp, #84	; 0x54
  410568:	a813      	add	r0, sp, #76	; 0x4c
  41056a:	4b67      	ldr	r3, [pc, #412]	; (410708 <draw_shadow+0x8fc>)
  41056c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41056e:	2800      	cmp	r0, #0
  410570:	f040 81d1 	bne.w	410916 <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  410574:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410578:	4433      	add	r3, r6
  41057a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  41057e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410582:	1b9b      	subs	r3, r3, r6
  410584:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  410588:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  41058c:	b293      	uxth	r3, r2
  41058e:	1b9b      	subs	r3, r3, r6
  410590:	b29b      	uxth	r3, r3
  410592:	3301      	adds	r3, #1
  410594:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  410598:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41059c:	9a04      	ldr	r2, [sp, #16]
  41059e:	a915      	add	r1, sp, #84	; 0x54
  4105a0:	a813      	add	r0, sp, #76	; 0x4c
  4105a2:	4b59      	ldr	r3, [pc, #356]	; (410708 <draw_shadow+0x8fc>)
  4105a4:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4105a6:	2800      	cmp	r0, #0
  4105a8:	f040 8245 	bne.w	410a36 <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  4105ac:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4105b0:	4433      	add	r3, r6
  4105b2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4105b6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4105ba:	1b9b      	subs	r3, r3, r6
  4105bc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  4105c0:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4105c4:	4433      	add	r3, r6
  4105c6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  4105ca:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4105ce:	1b9e      	subs	r6, r3, r6
  4105d0:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4105d4:	9a04      	ldr	r2, [sp, #16]
  4105d6:	a915      	add	r1, sp, #84	; 0x54
  4105d8:	a813      	add	r0, sp, #76	; 0x4c
  4105da:	4b4b      	ldr	r3, [pc, #300]	; (410708 <draw_shadow+0x8fc>)
  4105dc:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4105de:	9b06      	ldr	r3, [sp, #24]
  4105e0:	f083 0301 	eor.w	r3, r3, #1
  4105e4:	b2db      	uxtb	r3, r3
  4105e6:	4218      	tst	r0, r3
  4105e8:	f040 82a9 	bne.w	410b3e <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  4105ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4105ee:	4b47      	ldr	r3, [pc, #284]	; (41070c <draw_shadow+0x900>)
  4105f0:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  4105f2:	9805      	ldr	r0, [sp, #20]
  4105f4:	4c46      	ldr	r4, [pc, #280]	; (410710 <draw_shadow+0x904>)
  4105f6:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  4105f8:	9807      	ldr	r0, [sp, #28]
  4105fa:	47a0      	blx	r4
}
  4105fc:	b027      	add	sp, #156	; 0x9c
  4105fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410602:	9a08      	ldr	r2, [sp, #32]
  410604:	a91e      	add	r1, sp, #120	; 0x78
  410606:	a815      	add	r0, sp, #84	; 0x54
  410608:	4b42      	ldr	r3, [pc, #264]	; (410714 <draw_shadow+0x908>)
  41060a:	4798      	blx	r3
  41060c:	2800      	cmp	r0, #0
  41060e:	f47f af5d 	bne.w	4104cc <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  410612:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  410616:	459b      	cmp	fp, r3
  410618:	da01      	bge.n	41061e <draw_shadow+0x812>
  41061a:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  41061e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410622:	990c      	ldr	r1, [sp, #48]	; 0x30
  410624:	4299      	cmp	r1, r3
  410626:	da01      	bge.n	41062c <draw_shadow+0x820>
  410628:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  41062c:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410630:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410634:	b291      	uxth	r1, r2
  410636:	1a5b      	subs	r3, r3, r1
  410638:	b29b      	uxth	r3, r3
  41063a:	3301      	adds	r3, #1
  41063c:	b21b      	sxth	r3, r3
  41063e:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410640:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410644:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410648:	b288      	uxth	r0, r1
  41064a:	1a1b      	subs	r3, r3, r0
  41064c:	b29b      	uxth	r3, r3
  41064e:	3301      	adds	r3, #1
  410650:	b21b      	sxth	r3, r3
  410652:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410654:	2b00      	cmp	r3, #0
  410656:	f77f af39 	ble.w	4104cc <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  41065a:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  41065e:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410662:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410666:	eba2 0808 	sub.w	r8, r2, r8
  41066a:	fb08 1804 	mla	r8, r8, r4, r1
  41066e:	9b07      	ldr	r3, [sp, #28]
  410670:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410672:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410674:	aa11      	add	r2, sp, #68	; 0x44
  410676:	2308      	movs	r3, #8
    while(len) {
  410678:	b12b      	cbz	r3, 410686 <draw_shadow+0x87a>
        *d8 = *s8;
  41067a:	f811 0b01 	ldrb.w	r0, [r1], #1
  41067e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410682:	3b01      	subs	r3, #1
  410684:	e7f8      	b.n	410678 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  410686:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41068a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  41068e:	f04f 0900 	mov.w	r9, #0
  410692:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  410696:	46a3      	mov	fp, r4
  410698:	46f2      	mov	sl, lr
  41069a:	e017      	b.n	4106cc <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  41069c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4106a0:	9302      	str	r3, [sp, #8]
  4106a2:	9701      	str	r7, [sp, #4]
  4106a4:	9000      	str	r0, [sp, #0]
  4106a6:	9b05      	ldr	r3, [sp, #20]
  4106a8:	8c2a      	ldrh	r2, [r5, #32]
  4106aa:	a911      	add	r1, sp, #68	; 0x44
  4106ac:	9804      	ldr	r0, [sp, #16]
  4106ae:	4c14      	ldr	r4, [pc, #80]	; (410700 <draw_shadow+0x8f4>)
  4106b0:	47a0      	blx	r4
                fa.y1++;
  4106b2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4106b6:	3301      	adds	r3, #1
  4106b8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4106bc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4106c0:	3301      	adds	r3, #1
  4106c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4106c6:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  4106c8:	f109 0901 	add.w	r9, r9, #1
  4106cc:	45d1      	cmp	r9, sl
  4106ce:	da11      	bge.n	4106f4 <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4106d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4106d2:	4641      	mov	r1, r8
  4106d4:	9c05      	ldr	r4, [sp, #20]
  4106d6:	4620      	mov	r0, r4
  4106d8:	4b0a      	ldr	r3, [pc, #40]	; (410704 <draw_shadow+0x8f8>)
  4106da:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4106dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4106de:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4106e2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4106e6:	4620      	mov	r0, r4
  4106e8:	4c04      	ldr	r4, [pc, #16]	; (4106fc <draw_shadow+0x8f0>)
  4106ea:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4106ec:	2801      	cmp	r0, #1
  4106ee:	d1d5      	bne.n	41069c <draw_shadow+0x890>
  4106f0:	2002      	movs	r0, #2
  4106f2:	e7d3      	b.n	41069c <draw_shadow+0x890>
  4106f4:	465c      	mov	r4, fp
  4106f6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  4106fa:	e6e7      	b.n	4104cc <draw_shadow+0x6c0>
  4106fc:	0040f825 	.word	0x0040f825
  410700:	0040c5c9 	.word	0x0040c5c9
  410704:	00416399 	.word	0x00416399
  410708:	004151bb 	.word	0x004151bb
  41070c:	0040f875 	.word	0x0040f875
  410710:	004162e1 	.word	0x004162e1
  410714:	00415431 	.word	0x00415431
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410718:	9a08      	ldr	r2, [sp, #32]
  41071a:	a91e      	add	r1, sp, #120	; 0x78
  41071c:	a815      	add	r0, sp, #84	; 0x54
  41071e:	4bb9      	ldr	r3, [pc, #740]	; (410a04 <draw_shadow+0xbf8>)
  410720:	4798      	blx	r3
  410722:	2800      	cmp	r0, #0
  410724:	f47f aeee 	bne.w	410504 <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410728:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41072c:	459b      	cmp	fp, r3
  41072e:	db03      	blt.n	410738 <draw_shadow+0x92c>
  410730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410732:	3301      	adds	r3, #1
  410734:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  410738:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  41073c:	990c      	ldr	r1, [sp, #48]	; 0x30
  41073e:	4299      	cmp	r1, r3
  410740:	da01      	bge.n	410746 <draw_shadow+0x93a>
  410742:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410746:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  41074a:	fa1f fb82 	uxth.w	fp, r2
  41074e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410752:	ebab 0b03 	sub.w	fp, fp, r3
  410756:	fa1f fb8b 	uxth.w	fp, fp
  41075a:	f10b 0b01 	add.w	fp, fp, #1
  41075e:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410762:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410766:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  41076a:	b288      	uxth	r0, r1
  41076c:	1a1b      	subs	r3, r3, r0
  41076e:	b29b      	uxth	r3, r3
  410770:	3301      	adds	r3, #1
  410772:	b21b      	sxth	r3, r3
  410774:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  410776:	2b00      	cmp	r3, #0
  410778:	f77f aec4 	ble.w	410504 <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  41077c:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410780:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410784:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  410788:	eba8 0802 	sub.w	r8, r8, r2
  41078c:	fb08 1804 	mla	r8, r8, r4, r1
  410790:	9b07      	ldr	r3, [sp, #28]
  410792:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410794:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410796:	aa11      	add	r2, sp, #68	; 0x44
  410798:	2308      	movs	r3, #8
    while(len) {
  41079a:	b12b      	cbz	r3, 4107a8 <draw_shadow+0x99c>
        *d8 = *s8;
  41079c:	f811 0b01 	ldrb.w	r0, [r1], #1
  4107a0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4107a4:	3b01      	subs	r3, #1
  4107a6:	e7f8      	b.n	41079a <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  4107a8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4107ac:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  4107b0:	f04f 0900 	mov.w	r9, #0
  4107b4:	46a2      	mov	sl, r4
  4107b6:	e017      	b.n	4107e8 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4107b8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4107bc:	9302      	str	r3, [sp, #8]
  4107be:	9701      	str	r7, [sp, #4]
  4107c0:	9000      	str	r0, [sp, #0]
  4107c2:	9b05      	ldr	r3, [sp, #20]
  4107c4:	8c2a      	ldrh	r2, [r5, #32]
  4107c6:	a911      	add	r1, sp, #68	; 0x44
  4107c8:	9804      	ldr	r0, [sp, #16]
  4107ca:	4c8f      	ldr	r4, [pc, #572]	; (410a08 <draw_shadow+0xbfc>)
  4107cc:	47a0      	blx	r4
                fa.y1--;
  4107ce:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4107d2:	3b01      	subs	r3, #1
  4107d4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  4107d8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4107dc:	3b01      	subs	r3, #1
  4107de:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4107e2:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  4107e4:	f109 0901 	add.w	r9, r9, #1
  4107e8:	45d9      	cmp	r9, fp
  4107ea:	da11      	bge.n	410810 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4107ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4107ee:	4641      	mov	r1, r8
  4107f0:	9c05      	ldr	r4, [sp, #20]
  4107f2:	4620      	mov	r0, r4
  4107f4:	4b85      	ldr	r3, [pc, #532]	; (410a0c <draw_shadow+0xc00>)
  4107f6:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4107f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4107fa:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4107fe:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410802:	4620      	mov	r0, r4
  410804:	4c82      	ldr	r4, [pc, #520]	; (410a10 <draw_shadow+0xc04>)
  410806:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410808:	2801      	cmp	r0, #1
  41080a:	d1d5      	bne.n	4107b8 <draw_shadow+0x9ac>
  41080c:	2002      	movs	r0, #2
  41080e:	e7d3      	b.n	4107b8 <draw_shadow+0x9ac>
  410810:	4654      	mov	r4, sl
  410812:	e677      	b.n	410504 <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410814:	9a08      	ldr	r2, [sp, #32]
  410816:	a91e      	add	r1, sp, #120	; 0x78
  410818:	a815      	add	r0, sp, #84	; 0x54
  41081a:	4b7a      	ldr	r3, [pc, #488]	; (410a04 <draw_shadow+0xbf8>)
  41081c:	4798      	blx	r3
  41081e:	2800      	cmp	r0, #0
  410820:	f47f ae8c 	bne.w	41053c <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  410824:	9b06      	ldr	r3, [sp, #24]
  410826:	b14b      	cbz	r3, 41083c <draw_shadow+0xa30>
  410828:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  41082c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41082e:	f9b2 2000 	ldrsh.w	r2, [r2]
  410832:	4293      	cmp	r3, r2
  410834:	bfa8      	it	ge
  410836:	4613      	movge	r3, r2
  410838:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  41083c:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  410840:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  410844:	b29a      	uxth	r2, r3
  410846:	ebab 0b02 	sub.w	fp, fp, r2
  41084a:	fa1f fb8b 	uxth.w	fp, fp
  41084e:	f10b 0b01 	add.w	fp, fp, #1
  410852:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  410856:	f1bb 0f00 	cmp.w	fp, #0
  41085a:	f77f ae6f 	ble.w	41053c <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41085e:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  410862:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  410866:	ebaa 0a02 	sub.w	sl, sl, r2
  41086a:	fa1f fa8a 	uxth.w	sl, sl
  41086e:	f10a 0a01 	add.w	sl, sl, #1
  410872:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  410876:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  410878:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  41087c:	1a59      	subs	r1, r3, r1
  41087e:	fb02 1304 	mla	r3, r2, r4, r1
  410882:	9a07      	ldr	r2, [sp, #28]
  410884:	18d3      	adds	r3, r2, r3
  410886:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  410888:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  41088a:	aa11      	add	r2, sp, #68	; 0x44
  41088c:	2308      	movs	r3, #8
    while(len) {
  41088e:	b12b      	cbz	r3, 41089c <draw_shadow+0xa90>
        *d8 = *s8;
  410890:	f811 0b01 	ldrb.w	r0, [r1], #1
  410894:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410898:	3b01      	subs	r3, #1
  41089a:	e7f8      	b.n	41088e <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  41089c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4108a0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4108a4:	f04f 0800 	mov.w	r8, #0
  4108a8:	970c      	str	r7, [sp, #48]	; 0x30
  4108aa:	46a1      	mov	r9, r4
  4108ac:	9c06      	ldr	r4, [sp, #24]
  4108ae:	e022      	b.n	4108f6 <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4108b0:	465b      	mov	r3, fp
  4108b2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4108b6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4108ba:	9805      	ldr	r0, [sp, #20]
  4108bc:	4f54      	ldr	r7, [pc, #336]	; (410a10 <draw_shadow+0xc04>)
  4108be:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4108c0:	2801      	cmp	r0, #1
  4108c2:	d023      	beq.n	41090c <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  4108c4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4108c8:	9302      	str	r3, [sp, #8]
  4108ca:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  4108ce:	9301      	str	r3, [sp, #4]
  4108d0:	9000      	str	r0, [sp, #0]
  4108d2:	9b05      	ldr	r3, [sp, #20]
  4108d4:	8c2a      	ldrh	r2, [r5, #32]
  4108d6:	a911      	add	r1, sp, #68	; 0x44
  4108d8:	9804      	ldr	r0, [sp, #16]
  4108da:	4f4b      	ldr	r7, [pc, #300]	; (410a08 <draw_shadow+0xbfc>)
  4108dc:	47b8      	blx	r7
                fa.y1++;
  4108de:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4108e2:	3301      	adds	r3, #1
  4108e4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4108e8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4108ec:	3301      	adds	r3, #1
  4108ee:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4108f2:	f108 0801 	add.w	r8, r8, #1
  4108f6:	45d0      	cmp	r8, sl
  4108f8:	da0a      	bge.n	410910 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4108fa:	465a      	mov	r2, fp
  4108fc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4108fe:	9805      	ldr	r0, [sp, #20]
  410900:	4b42      	ldr	r3, [pc, #264]	; (410a0c <draw_shadow+0xc00>)
  410902:	4798      	blx	r3
                if(simple_mode) {
  410904:	2c00      	cmp	r4, #0
  410906:	d0d3      	beq.n	4108b0 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410908:	2002      	movs	r0, #2
  41090a:	e7db      	b.n	4108c4 <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41090c:	2002      	movs	r0, #2
  41090e:	e7d9      	b.n	4108c4 <draw_shadow+0xab8>
  410910:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  410912:	464c      	mov	r4, r9
  410914:	e612      	b.n	41053c <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410916:	9a08      	ldr	r2, [sp, #32]
  410918:	a91e      	add	r1, sp, #120	; 0x78
  41091a:	a815      	add	r0, sp, #84	; 0x54
  41091c:	4b39      	ldr	r3, [pc, #228]	; (410a04 <draw_shadow+0xbf8>)
  41091e:	4798      	blx	r3
  410920:	2800      	cmp	r0, #0
  410922:	f47f ae27 	bne.w	410574 <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  410926:	9b06      	ldr	r3, [sp, #24]
  410928:	b14b      	cbz	r3, 41093e <draw_shadow+0xb32>
  41092a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41092c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  410930:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410934:	4293      	cmp	r3, r2
  410936:	bfa8      	it	ge
  410938:	4613      	movge	r3, r2
  41093a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41093e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410942:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  410946:	1a9b      	subs	r3, r3, r2
  410948:	b29b      	uxth	r3, r3
  41094a:	3301      	adds	r3, #1
  41094c:	b21b      	sxth	r3, r3
  41094e:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410950:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  410954:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410958:	b29a      	uxth	r2, r3
  41095a:	ebab 0b02 	sub.w	fp, fp, r2
  41095e:	fa1f fb8b 	uxth.w	fp, fp
  410962:	f10b 0b01 	add.w	fp, fp, #1
  410966:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  41096a:	46a6      	mov	lr, r4
  41096c:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  41096e:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  410972:	eba3 0808 	sub.w	r8, r3, r8
  410976:	fb08 2804 	mla	r8, r8, r4, r2
  41097a:	9b07      	ldr	r3, [sp, #28]
  41097c:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  41097e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410980:	aa11      	add	r2, sp, #68	; 0x44
  410982:	2308      	movs	r3, #8
  410984:	e004      	b.n	410990 <draw_shadow+0xb84>
        *d8 = *s8;
  410986:	f811 0b01 	ldrb.w	r0, [r1], #1
  41098a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41098e:	3b01      	subs	r3, #1
    while(len) {
  410990:	2b00      	cmp	r3, #0
  410992:	d1f8      	bne.n	410986 <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  410994:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410998:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  41099c:	f04f 0900 	mov.w	r9, #0
  4109a0:	940c      	str	r4, [sp, #48]	; 0x30
  4109a2:	960d      	str	r6, [sp, #52]	; 0x34
  4109a4:	9e06      	ldr	r6, [sp, #24]
  4109a6:	46f2      	mov	sl, lr
  4109a8:	e01e      	b.n	4109e8 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  4109aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4109ac:	9805      	ldr	r0, [sp, #20]
  4109ae:	4b19      	ldr	r3, [pc, #100]	; (410a14 <draw_shadow+0xc08>)
  4109b0:	4798      	blx	r3
            if(simple_mode) {
  4109b2:	b38e      	cbz	r6, 410a18 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  4109b4:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4109b6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4109ba:	9302      	str	r3, [sp, #8]
  4109bc:	23ff      	movs	r3, #255	; 0xff
  4109be:	9301      	str	r3, [sp, #4]
  4109c0:	9000      	str	r0, [sp, #0]
  4109c2:	9b05      	ldr	r3, [sp, #20]
  4109c4:	8c2a      	ldrh	r2, [r5, #32]
  4109c6:	a911      	add	r1, sp, #68	; 0x44
  4109c8:	9804      	ldr	r0, [sp, #16]
  4109ca:	4c0f      	ldr	r4, [pc, #60]	; (410a08 <draw_shadow+0xbfc>)
  4109cc:	47a0      	blx	r4
            fa.y1++;
  4109ce:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4109d2:	3301      	adds	r3, #1
  4109d4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  4109d8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4109dc:	3301      	adds	r3, #1
  4109de:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  4109e2:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  4109e4:	f109 0901 	add.w	r9, r9, #1
  4109e8:	45d9      	cmp	r9, fp
  4109ea:	da21      	bge.n	410a30 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  4109ec:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  4109f0:	2fff      	cmp	r7, #255	; 0xff
  4109f2:	bf08      	it	eq
  4109f4:	29ff      	cmpeq	r1, #255	; 0xff
  4109f6:	d0d8      	beq.n	4109aa <draw_shadow+0xb9e>
  4109f8:	fb01 f107 	mul.w	r1, r1, r7
  4109fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410a00:	e7d3      	b.n	4109aa <draw_shadow+0xb9e>
  410a02:	bf00      	nop
  410a04:	00415431 	.word	0x00415431
  410a08:	0040c5c9 	.word	0x0040c5c9
  410a0c:	00416399 	.word	0x00416399
  410a10:	0040f825 	.word	0x0040f825
  410a14:	00416661 	.word	0x00416661
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410a1a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410a1e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410a22:	9805      	ldr	r0, [sp, #20]
  410a24:	4c73      	ldr	r4, [pc, #460]	; (410bf4 <draw_shadow+0xde8>)
  410a26:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410a28:	2801      	cmp	r0, #1
  410a2a:	d1c4      	bne.n	4109b6 <draw_shadow+0xbaa>
  410a2c:	2002      	movs	r0, #2
  410a2e:	e7c2      	b.n	4109b6 <draw_shadow+0xbaa>
  410a30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  410a32:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  410a34:	e59e      	b.n	410574 <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410a36:	9a08      	ldr	r2, [sp, #32]
  410a38:	a91e      	add	r1, sp, #120	; 0x78
  410a3a:	a815      	add	r0, sp, #84	; 0x54
  410a3c:	4b6e      	ldr	r3, [pc, #440]	; (410bf8 <draw_shadow+0xdec>)
  410a3e:	4798      	blx	r3
  410a40:	2800      	cmp	r0, #0
  410a42:	f47f adb3 	bne.w	4105ac <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  410a46:	9b06      	ldr	r3, [sp, #24]
  410a48:	b14b      	cbz	r3, 410a5e <draw_shadow+0xc52>
  410a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410a4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410a50:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  410a54:	4293      	cmp	r3, r2
  410a56:	bfb8      	it	lt
  410a58:	4613      	movlt	r3, r2
  410a5a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410a5e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  410a62:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  410a66:	1a9b      	subs	r3, r3, r2
  410a68:	b29b      	uxth	r3, r3
  410a6a:	3301      	adds	r3, #1
  410a6c:	b21b      	sxth	r3, r3
  410a6e:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410a70:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410a74:	fa1f f982 	uxth.w	r9, r2
  410a78:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410a7c:	eba9 0903 	sub.w	r9, r9, r3
  410a80:	fa1f f989 	uxth.w	r9, r9
  410a84:	f109 0901 	add.w	r9, r9, #1
  410a88:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  410a8c:	46a2      	mov	sl, r4
  410a8e:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410a90:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  410a94:	1a9b      	subs	r3, r3, r2
  410a96:	fb03 1404 	mla	r4, r3, r4, r1
  410a9a:	9b07      	ldr	r3, [sp, #28]
  410a9c:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410a9e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410aa0:	aa11      	add	r2, sp, #68	; 0x44
  410aa2:	2308      	movs	r3, #8
  410aa4:	e004      	b.n	410ab0 <draw_shadow+0xca4>
        *d8 = *s8;
  410aa6:	f811 0b01 	ldrb.w	r0, [r1], #1
  410aaa:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410aae:	3b01      	subs	r3, #1
    while(len) {
  410ab0:	2b00      	cmp	r3, #0
  410ab2:	d1f8      	bne.n	410aa6 <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  410ab4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410ab8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  410abc:	f04f 0800 	mov.w	r8, #0
  410ac0:	f8dd b018 	ldr.w	fp, [sp, #24]
  410ac4:	960a      	str	r6, [sp, #40]	; 0x28
  410ac6:	e020      	b.n	410b0a <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  410ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410aca:	9805      	ldr	r0, [sp, #20]
  410acc:	4b4b      	ldr	r3, [pc, #300]	; (410bfc <draw_shadow+0xdf0>)
  410ace:	4798      	blx	r3
            if(simple_mode) {
  410ad0:	f1bb 0f00 	cmp.w	fp, #0
  410ad4:	d025      	beq.n	410b22 <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  410ad6:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410ad8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410adc:	9302      	str	r3, [sp, #8]
  410ade:	23ff      	movs	r3, #255	; 0xff
  410ae0:	9301      	str	r3, [sp, #4]
  410ae2:	9000      	str	r0, [sp, #0]
  410ae4:	9b05      	ldr	r3, [sp, #20]
  410ae6:	8c2a      	ldrh	r2, [r5, #32]
  410ae8:	a911      	add	r1, sp, #68	; 0x44
  410aea:	9804      	ldr	r0, [sp, #16]
  410aec:	4e44      	ldr	r6, [pc, #272]	; (410c00 <draw_shadow+0xdf4>)
  410aee:	47b0      	blx	r6
            fa.y1--;
  410af0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410af4:	3b01      	subs	r3, #1
  410af6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  410afa:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410afe:	3b01      	subs	r3, #1
  410b00:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  410b04:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  410b06:	f108 0801 	add.w	r8, r8, #1
  410b0a:	45c8      	cmp	r8, r9
  410b0c:	da15      	bge.n	410b3a <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410b0e:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410b10:	2fff      	cmp	r7, #255	; 0xff
  410b12:	bf08      	it	eq
  410b14:	29ff      	cmpeq	r1, #255	; 0xff
  410b16:	d0d7      	beq.n	410ac8 <draw_shadow+0xcbc>
  410b18:	fb01 f107 	mul.w	r1, r1, r7
  410b1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410b20:	e7d2      	b.n	410ac8 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410b24:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410b28:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410b2c:	9805      	ldr	r0, [sp, #20]
  410b2e:	4e31      	ldr	r6, [pc, #196]	; (410bf4 <draw_shadow+0xde8>)
  410b30:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410b32:	2801      	cmp	r0, #1
  410b34:	d1d0      	bne.n	410ad8 <draw_shadow+0xccc>
  410b36:	2002      	movs	r0, #2
  410b38:	e7ce      	b.n	410ad8 <draw_shadow+0xccc>
  410b3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410b3c:	e536      	b.n	4105ac <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410b3e:	9a08      	ldr	r2, [sp, #32]
  410b40:	a91e      	add	r1, sp, #120	; 0x78
  410b42:	a815      	add	r0, sp, #84	; 0x54
  410b44:	4b2c      	ldr	r3, [pc, #176]	; (410bf8 <draw_shadow+0xdec>)
  410b46:	4798      	blx	r3
  410b48:	2800      	cmp	r0, #0
  410b4a:	f47f ad4f 	bne.w	4105ec <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410b4e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  410b52:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  410b56:	1af6      	subs	r6, r6, r3
  410b58:	b2b6      	uxth	r6, r6
  410b5a:	3601      	adds	r6, #1
  410b5c:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410b5e:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  410b62:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410b66:	eba8 0803 	sub.w	r8, r8, r3
  410b6a:	fa1f f888 	uxth.w	r8, r8
  410b6e:	f108 0801 	add.w	r8, r8, #1
  410b72:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  410b76:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410b78:	aa11      	add	r2, sp, #68	; 0x44
  410b7a:	2308      	movs	r3, #8
    while(len) {
  410b7c:	b12b      	cbz	r3, 410b8a <draw_shadow+0xd7e>
        *d8 = *s8;
  410b7e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410b82:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410b86:	3b01      	subs	r3, #1
  410b88:	e7f8      	b.n	410b7c <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  410b8a:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410b8e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410b92:	2400      	movs	r4, #0
  410b94:	f8dd 9014 	ldr.w	r9, [sp, #20]
  410b98:	e016      	b.n	410bc8 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410b9a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410b9e:	9302      	str	r3, [sp, #8]
  410ba0:	23ff      	movs	r3, #255	; 0xff
  410ba2:	9301      	str	r3, [sp, #4]
  410ba4:	9000      	str	r0, [sp, #0]
  410ba6:	464b      	mov	r3, r9
  410ba8:	8c2a      	ldrh	r2, [r5, #32]
  410baa:	a911      	add	r1, sp, #68	; 0x44
  410bac:	9804      	ldr	r0, [sp, #16]
  410bae:	4f14      	ldr	r7, [pc, #80]	; (410c00 <draw_shadow+0xdf4>)
  410bb0:	47b8      	blx	r7
            fa.y1++;
  410bb2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410bb6:	3301      	adds	r3, #1
  410bb8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  410bbc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410bc0:	3301      	adds	r3, #1
  410bc2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  410bc6:	3401      	adds	r4, #1
  410bc8:	4544      	cmp	r4, r8
  410bca:	f6bf ad0f 	bge.w	4105ec <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  410bce:	4632      	mov	r2, r6
  410bd0:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  410bd4:	4648      	mov	r0, r9
  410bd6:	4b09      	ldr	r3, [pc, #36]	; (410bfc <draw_shadow+0xdf0>)
  410bd8:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410bda:	4633      	mov	r3, r6
  410bdc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410be0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410be4:	4648      	mov	r0, r9
  410be6:	4f03      	ldr	r7, [pc, #12]	; (410bf4 <draw_shadow+0xde8>)
  410be8:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410bea:	2801      	cmp	r0, #1
  410bec:	d1d5      	bne.n	410b9a <draw_shadow+0xd8e>
  410bee:	2002      	movs	r0, #2
  410bf0:	e7d3      	b.n	410b9a <draw_shadow+0xd8e>
  410bf2:	bf00      	nop
  410bf4:	0040f825 	.word	0x0040f825
  410bf8:	00415431 	.word	0x00415431
  410bfc:	00416661 	.word	0x00416661
  410c00:	0040c5c9 	.word	0x0040c5c9

00410c04 <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  410c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410c08:	b0a5      	sub	sp, #148	; 0x94
  410c0a:	4683      	mov	fp, r0
  410c0c:	460c      	mov	r4, r1
  410c0e:	9205      	str	r2, [sp, #20]
  410c10:	461e      	mov	r6, r3
  410c12:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  410c16:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  410c1a:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  410c1e:	4baa      	ldr	r3, [pc, #680]	; (410ec8 <draw_full_border+0x2c4>)
  410c20:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  410c22:	2800      	cmp	r0, #0
  410c24:	d13d      	bne.n	410ca2 <draw_full_border+0x9e>
    bool simple_mode = true;
  410c26:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410c2a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  410c2e:	f8bb 2000 	ldrh.w	r2, [fp]
  410c32:	1a8a      	subs	r2, r1, r2
  410c34:	b292      	uxth	r2, r2
  410c36:	3201      	adds	r2, #1
  410c38:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410c3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  410c3e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  410c42:	1ac0      	subs	r0, r0, r3
  410c44:	b280      	uxth	r0, r0
  410c46:	3001      	adds	r0, #1
  410c48:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  410c4a:	88a3      	ldrh	r3, [r4, #4]
  410c4c:	1a59      	subs	r1, r3, r1
  410c4e:	b289      	uxth	r1, r1
  410c50:	910c      	str	r1, [sp, #48]	; 0x30
  410c52:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410c56:	8821      	ldrh	r1, [r4, #0]
  410c58:	1a5b      	subs	r3, r3, r1
  410c5a:	b29b      	uxth	r3, r3
  410c5c:	3301      	adds	r3, #1
  410c5e:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410c60:	88e1      	ldrh	r1, [r4, #6]
  410c62:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  410c66:	eba1 010e 	sub.w	r1, r1, lr
  410c6a:	b289      	uxth	r1, r1
  410c6c:	3101      	adds	r1, #1
  410c6e:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  410c70:	b1d5      	cbz	r5, 410ca8 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  410c72:	4282      	cmp	r2, r0
  410c74:	bfa8      	it	ge
  410c76:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  410c78:	1055      	asrs	r5, r2, #1
  410c7a:	42ae      	cmp	r6, r5
  410c7c:	dc00      	bgt.n	410c80 <draw_full_border+0x7c>
        rin = radius;
  410c7e:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  410c80:	eb05 0309 	add.w	r3, r5, r9
  410c84:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  410c86:	4b91      	ldr	r3, [pc, #580]	; (410ecc <draw_full_border+0x2c8>)
  410c88:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410c8a:	4b91      	ldr	r3, [pc, #580]	; (410ed0 <draw_full_border+0x2cc>)
  410c8c:	4798      	blx	r3
  410c8e:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  410c90:	9a05      	ldr	r2, [sp, #20]
  410c92:	4621      	mov	r1, r4
  410c94:	a822      	add	r0, sp, #136	; 0x88
  410c96:	4b8f      	ldr	r3, [pc, #572]	; (410ed4 <draw_full_border+0x2d0>)
  410c98:	4798      	blx	r3
    if(is_common == false) return;
  410c9a:	b998      	cbnz	r0, 410cc4 <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  410c9c:	b025      	add	sp, #148	; 0x94
  410c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  410ca2:	f04f 0a00 	mov.w	sl, #0
  410ca6:	e7c0      	b.n	410c2a <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  410ca8:	4299      	cmp	r1, r3
  410caa:	bfa8      	it	ge
  410cac:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  410cae:	104b      	asrs	r3, r1, #1
  410cb0:	9306      	str	r3, [sp, #24]
  410cb2:	429e      	cmp	r6, r3
  410cb4:	dc00      	bgt.n	410cb8 <draw_full_border+0xb4>
        rout = radius;
  410cb6:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  410cb8:	9b06      	ldr	r3, [sp, #24]
  410cba:	ebb3 0509 	subs.w	r5, r3, r9
  410cbe:	d5e2      	bpl.n	410c86 <draw_full_border+0x82>
  410cc0:	2500      	movs	r5, #0
  410cc2:	e7e0      	b.n	410c86 <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  410cc4:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  410cc8:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410ccc:	eba3 030e 	sub.w	r3, r3, lr
  410cd0:	b29a      	uxth	r2, r3
  410cd2:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  410cd6:	8a70      	ldrh	r0, [r6, #18]
  410cd8:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  410cdc:	1a09      	subs	r1, r1, r0
  410cde:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  410ce2:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410ce6:	eba3 030e 	sub.w	r3, r3, lr
  410cea:	b29b      	uxth	r3, r3
  410cec:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  410cf0:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  410cf4:	1a09      	subs	r1, r1, r0
  410cf6:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410cfa:	1a9b      	subs	r3, r3, r2
  410cfc:	b29b      	uxth	r3, r3
  410cfe:	3301      	adds	r3, #1
  410d00:	b21b      	sxth	r3, r3
  410d02:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  410d04:	2301      	movs	r3, #1
  410d06:	b22a      	sxth	r2, r5
  410d08:	4659      	mov	r1, fp
  410d0a:	a81b      	add	r0, sp, #108	; 0x6c
  410d0c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 410eec <draw_full_border+0x2e8>
  410d10:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  410d12:	2100      	movs	r1, #0
  410d14:	a81b      	add	r0, sp, #108	; 0x6c
  410d16:	4d70      	ldr	r5, [pc, #448]	; (410ed8 <draw_full_border+0x2d4>)
  410d18:	47a8      	blx	r5
  410d1a:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  410d1c:	2300      	movs	r3, #0
  410d1e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  410d22:	4621      	mov	r1, r4
  410d24:	a814      	add	r0, sp, #80	; 0x50
  410d26:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410d28:	2100      	movs	r1, #0
  410d2a:	a814      	add	r0, sp, #80	; 0x50
  410d2c:	47a8      	blx	r5
  410d2e:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  410d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410d32:	9308      	str	r3, [sp, #32]
  410d34:	4618      	mov	r0, r3
  410d36:	4b69      	ldr	r3, [pc, #420]	; (410edc <draw_full_border+0x2d8>)
  410d38:	4798      	blx	r3
  410d3a:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  410d3c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410d40:	f109 39ff 	add.w	r9, r9, #4294967295
  410d44:	464b      	mov	r3, r9
  410d46:	9a06      	ldr	r2, [sp, #24]
  410d48:	4591      	cmp	r9, r2
  410d4a:	bfb8      	it	lt
  410d4c:	4613      	movlt	r3, r2
  410d4e:	4619      	mov	r1, r3
  410d50:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  410d52:	f1ba 0f00 	cmp.w	sl, #0
  410d56:	f000 8197 	beq.w	411088 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  410d5a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  410d5e:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  410d62:	1ad2      	subs	r2, r2, r3
  410d64:	188a      	adds	r2, r1, r2
  410d66:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  410d68:	f9b4 2000 	ldrsh.w	r2, [r4]
  410d6c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410d70:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  410d74:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410d78:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  410d7c:	fa1f f289 	uxth.w	r2, r9
  410d80:	fa12 f383 	uxtah	r3, r2, r3
  410d84:	b21b      	sxth	r3, r3
  410d86:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410d8a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410d8e:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  410d90:	e02c      	b.n	410dec <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  410d92:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410d96:	b29a      	uxth	r2, r3
  410d98:	1b55      	subs	r5, r2, r5
  410d9a:	b2ad      	uxth	r5, r5
  410d9c:	3501      	adds	r5, #1
  410d9e:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  410da2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  410da6:	9a06      	ldr	r2, [sp, #24]
  410da8:	1a9b      	subs	r3, r3, r2
  410daa:	3301      	adds	r3, #1
  410dac:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  410db0:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  410db4:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  410db6:	1a9b      	subs	r3, r3, r2
  410db8:	d46c      	bmi.n	410e94 <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  410dba:	f8cd 8008 	str.w	r8, [sp, #8]
  410dbe:	f8cd a004 	str.w	sl, [sp, #4]
  410dc2:	9700      	str	r7, [sp, #0]
  410dc4:	9a07      	ldr	r2, [sp, #28]
  410dc6:	4413      	add	r3, r2
  410dc8:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410dcc:	a910      	add	r1, sp, #64	; 0x40
  410dce:	9805      	ldr	r0, [sp, #20]
  410dd0:	4d43      	ldr	r5, [pc, #268]	; (410ee0 <draw_full_border+0x2dc>)
  410dd2:	47a8      	blx	r5
            fill_area.y1++;
  410dd4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410dd8:	3301      	adds	r3, #1
  410dda:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410dde:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410de2:	3301      	adds	r3, #1
  410de4:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  410de8:	f109 0901 	add.w	r9, r9, #1
  410dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410dee:	4599      	cmp	r9, r3
  410df0:	dc52      	bgt.n	410e98 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  410df2:	9908      	ldr	r1, [sp, #32]
  410df4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410df8:	4658      	mov	r0, fp
  410dfa:	4b3a      	ldr	r3, [pc, #232]	; (410ee4 <draw_full_border+0x2e0>)
  410dfc:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410dfe:	8a31      	ldrh	r1, [r6, #16]
  410e00:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410e04:	4419      	add	r1, r3
  410e06:	8a72      	ldrh	r2, [r6, #18]
  410e08:	444a      	add	r2, r9
  410e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410e0c:	b212      	sxth	r2, r2
  410e0e:	b209      	sxth	r1, r1
  410e10:	4658      	mov	r0, fp
  410e12:	4d35      	ldr	r5, [pc, #212]	; (410ee8 <draw_full_border+0x2e4>)
  410e14:	47a8      	blx	r5
  410e16:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  410e18:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410e1c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410e20:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410e24:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  410e28:	f9b4 3000 	ldrsh.w	r3, [r4]
  410e2c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410e30:	8823      	ldrh	r3, [r4, #0]
  410e32:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  410e36:	442b      	add	r3, r5
  410e38:	b29b      	uxth	r3, r3
  410e3a:	3b01      	subs	r3, #1
  410e3c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410e40:	f8cd 8008 	str.w	r8, [sp, #8]
  410e44:	f8cd a004 	str.w	sl, [sp, #4]
  410e48:	9000      	str	r0, [sp, #0]
  410e4a:	465b      	mov	r3, fp
  410e4c:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410e50:	a910      	add	r1, sp, #64	; 0x40
  410e52:	9805      	ldr	r0, [sp, #20]
  410e54:	f8df b088 	ldr.w	fp, [pc, #136]	; 410ee0 <draw_full_border+0x2dc>
  410e58:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  410e5a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410e5e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  410e62:	990a      	ldr	r1, [sp, #40]	; 0x28
  410e64:	440b      	add	r3, r1
  410e66:	429a      	cmp	r2, r3
  410e68:	da93      	bge.n	410d92 <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  410e6a:	8823      	ldrh	r3, [r4, #0]
  410e6c:	442b      	add	r3, r5
  410e6e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  410e72:	88a3      	ldrh	r3, [r4, #4]
  410e74:	1b5b      	subs	r3, r3, r5
  410e76:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410e7a:	f8cd 8008 	str.w	r8, [sp, #8]
  410e7e:	f8cd a004 	str.w	sl, [sp, #4]
  410e82:	2301      	movs	r3, #1
  410e84:	9300      	str	r3, [sp, #0]
  410e86:	2300      	movs	r3, #0
  410e88:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410e8c:	a910      	add	r1, sp, #64	; 0x40
  410e8e:	9805      	ldr	r0, [sp, #20]
  410e90:	47d8      	blx	fp
  410e92:	e77e      	b.n	410d92 <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  410e94:	2300      	movs	r3, #0
  410e96:	e790      	b.n	410dba <draw_full_border+0x1b6>
  410e98:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  410e9a:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  410e9e:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  410ea2:	eba9 0903 	sub.w	r9, r9, r3
  410ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410ea8:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  410eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410eae:	4549      	cmp	r1, r9
  410eb0:	db01      	blt.n	410eb6 <draw_full_border+0x2b2>
  410eb2:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  410eb6:	fa19 f383 	uxtah	r3, r9, r3
  410eba:	b21b      	sxth	r3, r3
  410ebc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410ec0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410ec4:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410ec6:	e040      	b.n	410f4a <draw_full_border+0x346>
  410ec8:	0040f8ed 	.word	0x0040f8ed
  410ecc:	00409531 	.word	0x00409531
  410ed0:	004149fd 	.word	0x004149fd
  410ed4:	004151bb 	.word	0x004151bb
  410ed8:	0040f7f1 	.word	0x0040f7f1
  410edc:	00416531 	.word	0x00416531
  410ee0:	0040c5c9 	.word	0x0040c5c9
  410ee4:	00416715 	.word	0x00416715
  410ee8:	0040f825 	.word	0x0040f825
  410eec:	0040fa6d 	.word	0x0040fa6d
            fill_area2.x1 = area_outer->x2 - rout + 1;
  410ef0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410ef4:	b29a      	uxth	r2, r3
  410ef6:	1b55      	subs	r5, r2, r5
  410ef8:	b2ad      	uxth	r5, r5
  410efa:	3501      	adds	r5, #1
  410efc:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  410f00:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  410f04:	9a06      	ldr	r2, [sp, #24]
  410f06:	1a9b      	subs	r3, r3, r2
  410f08:	3301      	adds	r3, #1
  410f0a:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  410f0e:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  410f12:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  410f14:	1a9b      	subs	r3, r3, r2
  410f16:	d46d      	bmi.n	410ff4 <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  410f18:	f8cd 8008 	str.w	r8, [sp, #8]
  410f1c:	f8cd a004 	str.w	sl, [sp, #4]
  410f20:	9700      	str	r7, [sp, #0]
  410f22:	9a07      	ldr	r2, [sp, #28]
  410f24:	4413      	add	r3, r2
  410f26:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410f2a:	a910      	add	r1, sp, #64	; 0x40
  410f2c:	9805      	ldr	r0, [sp, #20]
  410f2e:	4d79      	ldr	r5, [pc, #484]	; (411114 <draw_full_border+0x510>)
  410f30:	47a8      	blx	r5
            fill_area.y1++;
  410f32:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410f36:	3301      	adds	r3, #1
  410f38:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410f3c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410f40:	3301      	adds	r3, #1
  410f42:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410f46:	f109 0901 	add.w	r9, r9, #1
  410f4a:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  410f4e:	4599      	cmp	r9, r3
  410f50:	dc52      	bgt.n	410ff8 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  410f52:	9908      	ldr	r1, [sp, #32]
  410f54:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410f58:	4658      	mov	r0, fp
  410f5a:	4b6f      	ldr	r3, [pc, #444]	; (411118 <draw_full_border+0x514>)
  410f5c:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410f5e:	8a31      	ldrh	r1, [r6, #16]
  410f60:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410f64:	4419      	add	r1, r3
  410f66:	8a72      	ldrh	r2, [r6, #18]
  410f68:	444a      	add	r2, r9
  410f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410f6c:	b212      	sxth	r2, r2
  410f6e:	b209      	sxth	r1, r1
  410f70:	4658      	mov	r0, fp
  410f72:	4d6a      	ldr	r5, [pc, #424]	; (41111c <draw_full_border+0x518>)
  410f74:	47a8      	blx	r5
  410f76:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  410f78:	f9b4 3000 	ldrsh.w	r3, [r4]
  410f7c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410f80:	8823      	ldrh	r3, [r4, #0]
  410f82:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  410f86:	442b      	add	r3, r5
  410f88:	b29b      	uxth	r3, r3
  410f8a:	3b01      	subs	r3, #1
  410f8c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  410f90:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410f94:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410f98:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410f9c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410fa0:	f8cd 8008 	str.w	r8, [sp, #8]
  410fa4:	f8cd a004 	str.w	sl, [sp, #4]
  410fa8:	9000      	str	r0, [sp, #0]
  410faa:	465b      	mov	r3, fp
  410fac:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410fb0:	a910      	add	r1, sp, #64	; 0x40
  410fb2:	9805      	ldr	r0, [sp, #20]
  410fb4:	f8df b15c 	ldr.w	fp, [pc, #348]	; 411114 <draw_full_border+0x510>
  410fb8:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  410fba:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410fbe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  410fc2:	990a      	ldr	r1, [sp, #40]	; 0x28
  410fc4:	1a5b      	subs	r3, r3, r1
  410fc6:	429a      	cmp	r2, r3
  410fc8:	dd92      	ble.n	410ef0 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  410fca:	8823      	ldrh	r3, [r4, #0]
  410fcc:	442b      	add	r3, r5
  410fce:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  410fd2:	88a3      	ldrh	r3, [r4, #4]
  410fd4:	1b5b      	subs	r3, r3, r5
  410fd6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410fda:	f8cd 8008 	str.w	r8, [sp, #8]
  410fde:	f8cd a004 	str.w	sl, [sp, #4]
  410fe2:	2301      	movs	r3, #1
  410fe4:	9300      	str	r3, [sp, #0]
  410fe6:	2300      	movs	r3, #0
  410fe8:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410fec:	a910      	add	r1, sp, #64	; 0x40
  410fee:	9805      	ldr	r0, [sp, #20]
  410ff0:	47d8      	blx	fp
  410ff2:	e77d      	b.n	410ef0 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  410ff4:	2300      	movs	r3, #0
  410ff6:	e78f      	b.n	410f18 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  410ff8:	8863      	ldrh	r3, [r4, #2]
  410ffa:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  410ffe:	444b      	add	r3, r9
  411000:	b29b      	uxth	r3, r3
  411002:	3301      	adds	r3, #1
  411004:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  411008:	88e3      	ldrh	r3, [r4, #6]
  41100a:	eba3 0309 	sub.w	r3, r3, r9
  41100e:	b29b      	uxth	r3, r3
  411010:	3b01      	subs	r3, #1
  411012:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  411016:	f9b4 3000 	ldrsh.w	r3, [r4]
  41101a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  41101e:	8823      	ldrh	r3, [r4, #0]
  411020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  411022:	4413      	add	r3, r2
  411024:	b29b      	uxth	r3, r3
  411026:	3b01      	subs	r3, #1
  411028:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  41102c:	f8cd 8008 	str.w	r8, [sp, #8]
  411030:	f8cd a004 	str.w	sl, [sp, #4]
  411034:	2601      	movs	r6, #1
  411036:	9600      	str	r6, [sp, #0]
  411038:	2300      	movs	r3, #0
  41103a:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  41103e:	a912      	add	r1, sp, #72	; 0x48
  411040:	f8dd 9014 	ldr.w	r9, [sp, #20]
  411044:	4648      	mov	r0, r9
  411046:	4d33      	ldr	r5, [pc, #204]	; (411114 <draw_full_border+0x510>)
  411048:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  41104a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  41104e:	b293      	uxth	r3, r2
  411050:	990c      	ldr	r1, [sp, #48]	; 0x30
  411052:	1a5b      	subs	r3, r3, r1
  411054:	b29b      	uxth	r3, r3
  411056:	4433      	add	r3, r6
  411058:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  41105c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  411060:	f8cd 8008 	str.w	r8, [sp, #8]
  411064:	f8cd a004 	str.w	sl, [sp, #4]
  411068:	9600      	str	r6, [sp, #0]
  41106a:	2300      	movs	r3, #0
  41106c:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  411070:	a912      	add	r1, sp, #72	; 0x48
  411072:	4648      	mov	r0, r9
  411074:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  411076:	980d      	ldr	r0, [sp, #52]	; 0x34
  411078:	4c29      	ldr	r4, [pc, #164]	; (411120 <draw_full_border+0x51c>)
  41107a:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  41107c:	980e      	ldr	r0, [sp, #56]	; 0x38
  41107e:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  411080:	9807      	ldr	r0, [sp, #28]
  411082:	4b28      	ldr	r3, [pc, #160]	; (411124 <draw_full_border+0x520>)
  411084:	4798      	blx	r3
  411086:	e609      	b.n	410c9c <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  411088:	f9b4 3000 	ldrsh.w	r3, [r4]
  41108c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  411090:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  411094:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411098:	8a73      	ldrh	r3, [r6, #18]
  41109a:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  41109e:	fa13 f384 	uxtah	r3, r3, r4
  4110a2:	b21b      	sxth	r3, r3
  4110a4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4110a8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4110ac:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4110b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  4110b4:	f8dd a014 	ldr.w	sl, [sp, #20]
  4110b8:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4110ba:	e025      	b.n	411108 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  4110bc:	9908      	ldr	r1, [sp, #32]
  4110be:	4658      	mov	r0, fp
  4110c0:	4b15      	ldr	r3, [pc, #84]	; (411118 <draw_full_border+0x514>)
  4110c2:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4110c4:	8a31      	ldrh	r1, [r6, #16]
  4110c6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4110ca:	4419      	add	r1, r3
  4110cc:	8a72      	ldrh	r2, [r6, #18]
  4110ce:	4422      	add	r2, r4
  4110d0:	464b      	mov	r3, r9
  4110d2:	b212      	sxth	r2, r2
  4110d4:	b209      	sxth	r1, r1
  4110d6:	4658      	mov	r0, fp
  4110d8:	4f10      	ldr	r7, [pc, #64]	; (41111c <draw_full_border+0x518>)
  4110da:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  4110dc:	f8cd 8008 	str.w	r8, [sp, #8]
  4110e0:	9501      	str	r5, [sp, #4]
  4110e2:	9000      	str	r0, [sp, #0]
  4110e4:	465b      	mov	r3, fp
  4110e6:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4110ea:	a912      	add	r1, sp, #72	; 0x48
  4110ec:	4650      	mov	r0, sl
  4110ee:	4f09      	ldr	r7, [pc, #36]	; (411114 <draw_full_border+0x510>)
  4110f0:	47b8      	blx	r7
            fill_area.y1++;
  4110f2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4110f6:	3301      	adds	r3, #1
  4110f8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  4110fc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  411100:	3301      	adds	r3, #1
  411102:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411106:	3401      	adds	r4, #1
  411108:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  41110c:	429c      	cmp	r4, r3
  41110e:	ddd5      	ble.n	4110bc <draw_full_border+0x4b8>
  411110:	e7b1      	b.n	411076 <draw_full_border+0x472>
  411112:	bf00      	nop
  411114:	0040c5c9 	.word	0x0040c5c9
  411118:	00416715 	.word	0x00416715
  41111c:	0040f825 	.word	0x0040f825
  411120:	0040f875 	.word	0x0040f875
  411124:	004162e1 	.word	0x004162e1

00411128 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  411128:	7f93      	ldrb	r3, [r2, #30]
  41112a:	2b02      	cmp	r3, #2
  41112c:	d957      	bls.n	4111de <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  41112e:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  411132:	2b00      	cmp	r3, #0
  411134:	d053      	beq.n	4111de <draw_outline+0xb6>
{
  411136:	b530      	push	{r4, r5, lr}
  411138:	b089      	sub	sp, #36	; 0x24
  41113a:	ac06      	add	r4, sp, #24
  41113c:	2308      	movs	r3, #8
  41113e:	e004      	b.n	41114a <draw_outline+0x22>
        *d8 = *s8;
  411140:	f810 5b01 	ldrb.w	r5, [r0], #1
  411144:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  411148:	3b01      	subs	r3, #1
    while(len) {
  41114a:	2b00      	cmp	r3, #0
  41114c:	d1f8      	bne.n	411140 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  41114e:	8b93      	ldrh	r3, [r2, #28]
  411150:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  411154:	1ac0      	subs	r0, r0, r3
  411156:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  41115a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  41115e:	1ac0      	subs	r0, r0, r3
  411160:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  411164:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  411168:	4418      	add	r0, r3
  41116a:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  41116e:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  411172:	4403      	add	r3, r0
  411174:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  411178:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  41117a:	a804      	add	r0, sp, #16
  41117c:	2308      	movs	r3, #8
  41117e:	e004      	b.n	41118a <draw_outline+0x62>
        *d8 = *s8;
  411180:	f814 5b01 	ldrb.w	r5, [r4], #1
  411184:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  411188:	3b01      	subs	r3, #1
    while(len) {
  41118a:	2b00      	cmp	r3, #0
  41118c:	d1f8      	bne.n	411180 <draw_outline+0x58>
  41118e:	4610      	mov	r0, r2
  411190:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  411192:	8b43      	ldrh	r3, [r0, #26]
  411194:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  411198:	1ae4      	subs	r4, r4, r3
  41119a:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  41119e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  4111a2:	441c      	add	r4, r3
  4111a4:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  4111a8:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  4111ac:	1ae4      	subs	r4, r4, r3
  4111ae:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  4111b2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  4111b6:	440b      	add	r3, r1
  4111b8:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  4111bc:	f9b0 3000 	ldrsh.w	r3, [r0]
  4111c0:	7fc1      	ldrb	r1, [r0, #31]
  4111c2:	9103      	str	r1, [sp, #12]
  4111c4:	7f81      	ldrb	r1, [r0, #30]
  4111c6:	9102      	str	r1, [sp, #8]
  4111c8:	8b01      	ldrh	r1, [r0, #24]
  4111ca:	f8ad 1004 	strh.w	r1, [sp, #4]
  4111ce:	2101      	movs	r1, #1
  4111d0:	9100      	str	r1, [sp, #0]
  4111d2:	a904      	add	r1, sp, #16
  4111d4:	a806      	add	r0, sp, #24
  4111d6:	4c02      	ldr	r4, [pc, #8]	; (4111e0 <draw_outline+0xb8>)
  4111d8:	47a0      	blx	r4
}
  4111da:	b009      	add	sp, #36	; 0x24
  4111dc:	bd30      	pop	{r4, r5, pc}
  4111de:	4770      	bx	lr
  4111e0:	00410c05 	.word	0x00410c05

004111e4 <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  4111e4:	7d13      	ldrb	r3, [r2, #20]
  4111e6:	2b02      	cmp	r3, #2
  4111e8:	f240 8197 	bls.w	41151a <draw_border+0x336>
    if(dsc->border_width == 0) return;
  4111ec:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  4111f0:	2b00      	cmp	r3, #0
  4111f2:	f000 8192 	beq.w	41151a <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  4111f6:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  4111fa:	2b00      	cmp	r3, #0
  4111fc:	f000 818d 	beq.w	41151a <draw_border+0x336>
    if(dsc->border_post) return;
  411200:	7d93      	ldrb	r3, [r2, #22]
  411202:	f013 0f01 	tst.w	r3, #1
  411206:	f040 8188 	bne.w	41151a <draw_border+0x336>
{
  41120a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41120e:	b0a3      	sub	sp, #140	; 0x8c
  411210:	8885      	ldrh	r5, [r0, #4]
  411212:	8803      	ldrh	r3, [r0, #0]
  411214:	1aed      	subs	r5, r5, r3
  411216:	b2ad      	uxth	r5, r5
  411218:	3501      	adds	r5, #1
  41121a:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41121c:	88c3      	ldrh	r3, [r0, #6]
  41121e:	8844      	ldrh	r4, [r0, #2]
  411220:	1b1b      	subs	r3, r3, r4
  411222:	b29b      	uxth	r3, r3
  411224:	3301      	adds	r3, #1
  411226:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  411228:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  41122c:	429d      	cmp	r5, r3
  41122e:	bfa8      	it	ge
  411230:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  411232:	106d      	asrs	r5, r5, #1
  411234:	42ac      	cmp	r4, r5
  411236:	dc00      	bgt.n	41123a <draw_border+0x56>
    int32_t rout = dsc->radius;
  411238:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  41123a:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  41123c:	ac20      	add	r4, sp, #128	; 0x80
  41123e:	2308      	movs	r3, #8
  411240:	e004      	b.n	41124c <draw_border+0x68>
        *d8 = *s8;
  411242:	f816 7b01 	ldrb.w	r7, [r6], #1
  411246:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  41124a:	3b01      	subs	r3, #1
    while(len) {
  41124c:	2b00      	cmp	r3, #0
  41124e:	d1f8      	bne.n	411242 <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  411250:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  411254:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  411258:	b2b4      	uxth	r4, r6
  41125a:	f014 0f04 	tst.w	r4, #4
  41125e:	d039      	beq.n	4112d4 <draw_border+0xf0>
  411260:	8a13      	ldrh	r3, [r2, #16]
  411262:	443b      	add	r3, r7
  411264:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  411268:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  41126c:	f014 0f08 	tst.w	r4, #8
  411270:	d036      	beq.n	4112e0 <draw_border+0xfc>
  411272:	8a13      	ldrh	r3, [r2, #16]
  411274:	1afb      	subs	r3, r7, r3
  411276:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  41127a:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  41127e:	f014 0f02 	tst.w	r4, #2
  411282:	d033      	beq.n	4112ec <draw_border+0x108>
  411284:	8a13      	ldrh	r3, [r2, #16]
  411286:	443b      	add	r3, r7
  411288:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  41128c:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  411290:	f014 0f01 	tst.w	r4, #1
  411294:	d030      	beq.n	4112f8 <draw_border+0x114>
  411296:	8a13      	ldrh	r3, [r2, #16]
  411298:	4692      	mov	sl, r2
  41129a:	9105      	str	r1, [sp, #20]
  41129c:	4604      	mov	r4, r0
  41129e:	1afb      	subs	r3, r7, r3
  4112a0:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  4112a4:	2e0f      	cmp	r6, #15
  4112a6:	d02d      	beq.n	411304 <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  4112a8:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4112ac:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  4112b0:	d901      	bls.n	4112b6 <draw_border+0xd2>
  4112b2:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4112b6:	4b99      	ldr	r3, [pc, #612]	; (41151c <draw_border+0x338>)
  4112b8:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4112ba:	4b99      	ldr	r3, [pc, #612]	; (411520 <draw_border+0x33c>)
  4112bc:	4798      	blx	r3
  4112be:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  4112c0:	9a05      	ldr	r2, [sp, #20]
  4112c2:	4621      	mov	r1, r4
  4112c4:	a80e      	add	r0, sp, #56	; 0x38
  4112c6:	4b97      	ldr	r3, [pc, #604]	; (411524 <draw_border+0x340>)
  4112c8:	4798      	blx	r3
        if(is_common == false) return;
  4112ca:	2800      	cmp	r0, #0
  4112cc:	d12d      	bne.n	41132a <draw_border+0x146>
}
  4112ce:	b023      	add	sp, #140	; 0x8c
  4112d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  4112d4:	8a13      	ldrh	r3, [r2, #16]
  4112d6:	442b      	add	r3, r5
  4112d8:	b29b      	uxth	r3, r3
  4112da:	425b      	negs	r3, r3
  4112dc:	b29b      	uxth	r3, r3
  4112de:	e7c0      	b.n	411262 <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  4112e0:	8a13      	ldrh	r3, [r2, #16]
  4112e2:	442b      	add	r3, r5
  4112e4:	b29b      	uxth	r3, r3
  4112e6:	425b      	negs	r3, r3
  4112e8:	b29b      	uxth	r3, r3
  4112ea:	e7c3      	b.n	411274 <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  4112ec:	8a13      	ldrh	r3, [r2, #16]
  4112ee:	442b      	add	r3, r5
  4112f0:	b29b      	uxth	r3, r3
  4112f2:	425b      	negs	r3, r3
  4112f4:	b29b      	uxth	r3, r3
  4112f6:	e7c6      	b.n	411286 <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  4112f8:	8a13      	ldrh	r3, [r2, #16]
  4112fa:	442b      	add	r3, r5
  4112fc:	b29b      	uxth	r3, r3
  4112fe:	425b      	negs	r3, r3
  411300:	b29b      	uxth	r3, r3
  411302:	e7c9      	b.n	411298 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  411304:	f9b2 3000 	ldrsh.w	r3, [r2]
  411308:	7d52      	ldrb	r2, [r2, #21]
  41130a:	9203      	str	r2, [sp, #12]
  41130c:	f89a 2014 	ldrb.w	r2, [sl, #20]
  411310:	9202      	str	r2, [sp, #8]
  411312:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  411316:	f8ad 2004 	strh.w	r2, [sp, #4]
  41131a:	2200      	movs	r2, #0
  41131c:	9200      	str	r2, [sp, #0]
  41131e:	460a      	mov	r2, r1
  411320:	4601      	mov	r1, r0
  411322:	a820      	add	r0, sp, #128	; 0x80
  411324:	4c80      	ldr	r4, [pc, #512]	; (411528 <draw_border+0x344>)
  411326:	47a0      	blx	r4
  411328:	e7d1      	b.n	4112ce <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  41132a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  41132e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  411332:	1a5b      	subs	r3, r3, r1
  411334:	b29a      	uxth	r2, r3
  411336:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  41133a:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  41133e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  411342:	1a1b      	subs	r3, r3, r0
  411344:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  411348:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41134c:	1a5b      	subs	r3, r3, r1
  41134e:	b29b      	uxth	r3, r3
  411350:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  411354:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  411358:	1a09      	subs	r1, r1, r0
  41135a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41135e:	1a9b      	subs	r3, r3, r2
  411360:	b29b      	uxth	r3, r3
  411362:	3301      	adds	r3, #1
  411364:	b21b      	sxth	r3, r3
  411366:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411368:	9306      	str	r3, [sp, #24]
  41136a:	4618      	mov	r0, r3
  41136c:	4b6f      	ldr	r3, [pc, #444]	; (41152c <draw_border+0x348>)
  41136e:	4798      	blx	r3
  411370:	4607      	mov	r7, r0
        if(rout > 0) {
  411372:	2d00      	cmp	r5, #0
  411374:	dd53      	ble.n	41141e <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  411376:	2300      	movs	r3, #0
  411378:	462a      	mov	r2, r5
  41137a:	4621      	mov	r1, r4
  41137c:	a812      	add	r0, sp, #72	; 0x48
  41137e:	4e6c      	ldr	r6, [pc, #432]	; (411530 <draw_border+0x34c>)
  411380:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411382:	2100      	movs	r1, #0
  411384:	a812      	add	r0, sp, #72	; 0x48
  411386:	4b6b      	ldr	r3, [pc, #428]	; (411534 <draw_border+0x350>)
  411388:	4798      	blx	r3
  41138a:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  41138c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  411390:	1aaa      	subs	r2, r5, r2
  411392:	2301      	movs	r3, #1
  411394:	b212      	sxth	r2, r2
  411396:	a920      	add	r1, sp, #128	; 0x80
  411398:	a819      	add	r0, sp, #100	; 0x64
  41139a:	4e65      	ldr	r6, [pc, #404]	; (411530 <draw_border+0x34c>)
  41139c:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  41139e:	2100      	movs	r1, #0
  4113a0:	a819      	add	r0, sp, #100	; 0x64
  4113a2:	4b64      	ldr	r3, [pc, #400]	; (411534 <draw_border+0x350>)
  4113a4:	4798      	blx	r3
  4113a6:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  4113a8:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  4113ac:	3b01      	subs	r3, #1
  4113ae:	429d      	cmp	r5, r3
  4113b0:	bfb8      	it	lt
  4113b2:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  4113b4:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  4113b8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  4113bc:	f89a 3015 	ldrb.w	r3, [sl, #21]
  4113c0:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  4113c2:	f9b4 3000 	ldrsh.w	r3, [r4]
  4113c6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  4113ca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4113ce:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4113d2:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  4113d6:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  4113da:	fa13 f386 	uxtah	r3, r3, r6
  4113de:	b21b      	sxth	r3, r3
  4113e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  4113e4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  4113e8:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  4113ec:	2b04      	cmp	r3, #4
  4113ee:	d01a      	beq.n	411426 <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  4113f0:	2b08      	cmp	r3, #8
  4113f2:	d01f      	beq.n	411434 <draw_border+0x250>
        uint32_t buf_ofs = 0;
  4113f4:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  4113f8:	2200      	movs	r2, #0
  4113fa:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  4113fe:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  411402:	2b02      	cmp	r3, #2
  411404:	d023      	beq.n	41144e <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  411406:	2b01      	cmp	r3, #1
  411408:	d025      	beq.n	411456 <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  41140a:	2b03      	cmp	r3, #3
  41140c:	d027      	beq.n	41145e <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  41140e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  411412:	bb53      	cbnz	r3, 41146a <draw_border+0x286>
  411414:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  411418:	b363      	cbz	r3, 411474 <draw_border+0x290>
  41141a:	2300      	movs	r3, #0
  41141c:	e026      	b.n	41146c <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  41141e:	f04f 33ff 	mov.w	r3, #4294967295
  411422:	930a      	str	r3, [sp, #40]	; 0x28
  411424:	e7b2      	b.n	41138c <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  411426:	8822      	ldrh	r2, [r4, #0]
  411428:	442a      	add	r2, r5
  41142a:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  41142e:	f04f 0b00 	mov.w	fp, #0
  411432:	e7e1      	b.n	4113f8 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  411434:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  411438:	ebab 0b05 	sub.w	fp, fp, r5
  41143c:	fa0f fb8b 	sxth.w	fp, fp
  411440:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  411444:	f9b4 2000 	ldrsh.w	r2, [r4]
  411448:	ebab 0b02 	sub.w	fp, fp, r2
  41144c:	e7d4      	b.n	4113f8 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  41144e:	2201      	movs	r2, #1
  411450:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  411454:	e7d7      	b.n	411406 <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  411456:	2201      	movs	r2, #1
  411458:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  41145c:	e7d5      	b.n	41140a <draw_border+0x226>
            top_only = true;
  41145e:	2301      	movs	r3, #1
  411460:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  411464:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  411468:	e7d1      	b.n	41140e <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  41146a:	2300      	movs	r3, #0
  41146c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  411470:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411472:	e02b      	b.n	4114cc <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  411474:	2301      	movs	r3, #1
  411476:	e7f9      	b.n	41146c <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  411478:	9906      	ldr	r1, [sp, #24]
  41147a:	4638      	mov	r0, r7
  41147c:	4b2e      	ldr	r3, [pc, #184]	; (411538 <draw_border+0x354>)
  41147e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411480:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  411484:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  411488:	4419      	add	r1, r3
  41148a:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  41148e:	4432      	add	r2, r6
  411490:	9b08      	ldr	r3, [sp, #32]
  411492:	b212      	sxth	r2, r2
  411494:	b209      	sxth	r1, r1
  411496:	4638      	mov	r0, r7
  411498:	4c28      	ldr	r4, [pc, #160]	; (41153c <draw_border+0x358>)
  41149a:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  41149c:	9b07      	ldr	r3, [sp, #28]
  41149e:	9302      	str	r3, [sp, #8]
  4114a0:	f8cd 9004 	str.w	r9, [sp, #4]
  4114a4:	9000      	str	r0, [sp, #0]
  4114a6:	eb07 030b 	add.w	r3, r7, fp
  4114aa:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  4114ae:	a910      	add	r1, sp, #64	; 0x40
  4114b0:	9805      	ldr	r0, [sp, #20]
  4114b2:	4c23      	ldr	r4, [pc, #140]	; (411540 <draw_border+0x35c>)
  4114b4:	47a0      	blx	r4
            fill_area.y1++;
  4114b6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  4114ba:	3301      	adds	r3, #1
  4114bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  4114c0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4114c4:	3301      	adds	r3, #1
  4114c6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4114ca:	3601      	adds	r6, #1
  4114cc:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  4114d0:	429e      	cmp	r6, r3
  4114d2:	dc19      	bgt.n	411508 <draw_border+0x324>
            if(normal ||
  4114d4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4114d8:	2b00      	cmp	r3, #0
  4114da:	d1cd      	bne.n	411478 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4114dc:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  4114e0:	b133      	cbz	r3, 4114f0 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4114e2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  4114e6:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  4114ea:	442b      	add	r3, r5
  4114ec:	429a      	cmp	r2, r3
  4114ee:	ddc3      	ble.n	411478 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4114f0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  4114f4:	2b00      	cmp	r3, #0
  4114f6:	d0de      	beq.n	4114b6 <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  4114f8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  4114fc:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  411500:	1b5b      	subs	r3, r3, r5
  411502:	429a      	cmp	r2, r3
  411504:	dbd7      	blt.n	4114b6 <draw_border+0x2d2>
  411506:	e7b7      	b.n	411478 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  411508:	980b      	ldr	r0, [sp, #44]	; 0x2c
  41150a:	4c0e      	ldr	r4, [pc, #56]	; (411544 <draw_border+0x360>)
  41150c:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  41150e:	980a      	ldr	r0, [sp, #40]	; 0x28
  411510:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  411512:	4638      	mov	r0, r7
  411514:	4b0c      	ldr	r3, [pc, #48]	; (411548 <draw_border+0x364>)
  411516:	4798      	blx	r3
  411518:	e6d9      	b.n	4112ce <draw_border+0xea>
  41151a:	4770      	bx	lr
  41151c:	00409531 	.word	0x00409531
  411520:	004149fd 	.word	0x004149fd
  411524:	004151bb 	.word	0x004151bb
  411528:	00410c05 	.word	0x00410c05
  41152c:	00416531 	.word	0x00416531
  411530:	0040fa6d 	.word	0x0040fa6d
  411534:	0040f7f1 	.word	0x0040f7f1
  411538:	00416715 	.word	0x00416715
  41153c:	0040f825 	.word	0x0040f825
  411540:	0040c5c9 	.word	0x0040c5c9
  411544:	0040f875 	.word	0x0040f875
  411548:	004162e1 	.word	0x004162e1

0041154c <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  41154c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  41154e:	2b00      	cmp	r3, #0
  411550:	f000 814e 	beq.w	4117f0 <draw_pattern+0x2a4>
{
  411554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411558:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  41155a:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  41155e:	2c02      	cmp	r4, #2
  411560:	d802      	bhi.n	411568 <draw_pattern+0x1c>
}
  411562:	b01f      	add	sp, #124	; 0x7c
  411564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411568:	4614      	mov	r4, r2
  41156a:	460e      	mov	r6, r1
  41156c:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  41156e:	4618      	mov	r0, r3
  411570:	4ba0      	ldr	r3, [pc, #640]	; (4117f4 <draw_pattern+0x2a8>)
  411572:	4798      	blx	r3
  411574:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  411576:	2801      	cmp	r0, #1
  411578:	d908      	bls.n	41158c <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  41157a:	2802      	cmp	r0, #2
  41157c:	d022      	beq.n	4115c4 <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  41157e:	2300      	movs	r3, #0
  411580:	461a      	mov	r2, r3
  411582:	4631      	mov	r1, r6
  411584:	4628      	mov	r0, r5
  411586:	4c9c      	ldr	r4, [pc, #624]	; (4117f8 <draw_pattern+0x2ac>)
  411588:	47a0      	blx	r4
        return;
  41158a:	e7ea      	b.n	411562 <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  41158c:	a907      	add	r1, sp, #28
  41158e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  411590:	4b9a      	ldr	r3, [pc, #616]	; (4117fc <draw_pattern+0x2b0>)
  411592:	4798      	blx	r3
        if(res != LV_RES_OK) {
  411594:	2801      	cmp	r0, #1
  411596:	d1e4      	bne.n	411562 <draw_pattern+0x16>
        img_w = header.w;
  411598:	9b07      	ldr	r3, [sp, #28]
  41159a:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  41159e:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  4115a2:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  4115a6:	a81a      	add	r0, sp, #104	; 0x68
  4115a8:	4b95      	ldr	r3, [pc, #596]	; (411800 <draw_pattern+0x2b4>)
  4115aa:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  4115ac:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4115b0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  4115b4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4115b8:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  4115bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4115be:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  4115c2:	e01d      	b.n	411600 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  4115c4:	a811      	add	r0, sp, #68	; 0x44
  4115c6:	4b8f      	ldr	r3, [pc, #572]	; (411804 <draw_pattern+0x2b8>)
  4115c8:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  4115ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4115cc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  4115d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  4115d2:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  4115d4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4115d8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  4115dc:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  4115e0:	2100      	movs	r1, #0
  4115e2:	9102      	str	r1, [sp, #8]
  4115e4:	f647 4118 	movw	r1, #31768	; 0x7c18
  4115e8:	9101      	str	r1, [sp, #4]
  4115ea:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  4115ee:	9100      	str	r1, [sp, #0]
  4115f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4115f2:	a807      	add	r0, sp, #28
  4115f4:	4f84      	ldr	r7, [pc, #528]	; (411808 <draw_pattern+0x2bc>)
  4115f6:	47b8      	blx	r7
        img_w = s.x;
  4115f8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  4115fc:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  411600:	f1ba 0f00 	cmp.w	sl, #0
  411604:	bf18      	it	ne
  411606:	f1bb 0f00 	cmpne.w	fp, #0
  41160a:	d0aa      	beq.n	411562 <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  41160c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  411610:	f013 0f01 	tst.w	r3, #1
  411614:	d148      	bne.n	4116a8 <draw_pattern+0x15c>
  411616:	88a8      	ldrh	r0, [r5, #4]
  411618:	882b      	ldrh	r3, [r5, #0]
  41161a:	1ac0      	subs	r0, r0, r3
  41161c:	b280      	uxth	r0, r0
  41161e:	3001      	adds	r0, #1
  411620:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411622:	88ea      	ldrh	r2, [r5, #6]
  411624:	8869      	ldrh	r1, [r5, #2]
  411626:	1a52      	subs	r2, r2, r1
  411628:	b292      	uxth	r2, r2
  41162a:	3201      	adds	r2, #1
  41162c:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  41162e:	ebb0 000b 	subs.w	r0, r0, fp
  411632:	f100 80ba 	bmi.w	4117aa <draw_pattern+0x25e>
  411636:	eb03 0360 	add.w	r3, r3, r0, asr #1
  41163a:	b29b      	uxth	r3, r3
  41163c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411640:	eba2 020a 	sub.w	r2, r2, sl
  411644:	4610      	mov	r0, r2
  411646:	2a00      	cmp	r2, #0
  411648:	f2c0 80b1 	blt.w	4117ae <draw_pattern+0x262>
  41164c:	eb01 0160 	add.w	r1, r1, r0, asr #1
  411650:	b289      	uxth	r1, r1
  411652:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411656:	445b      	add	r3, fp
  411658:	b29b      	uxth	r3, r3
  41165a:	3b01      	subs	r3, #1
  41165c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411660:	eb01 030a 	add.w	r3, r1, sl
  411664:	b29b      	uxth	r3, r3
  411666:	3b01      	subs	r3, #1
  411668:	b29b      	uxth	r3, r3
  41166a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  41166e:	f1b8 0f02 	cmp.w	r8, #2
  411672:	f000 809e 	beq.w	4117b2 <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  411676:	f9b4 2000 	ldrsh.w	r2, [r4]
  41167a:	4629      	mov	r1, r5
  41167c:	a80f      	add	r0, sp, #60	; 0x3c
  41167e:	4b63      	ldr	r3, [pc, #396]	; (41180c <draw_pattern+0x2c0>)
  411680:	4798      	blx	r3
  411682:	2800      	cmp	r0, #0
  411684:	f000 809e 	beq.w	4117c4 <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  411688:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  41168c:	f1b8 0f02 	cmp.w	r8, #2
  411690:	f000 80a5 	beq.w	4117de <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411694:	ab1a      	add	r3, sp, #104	; 0x68
  411696:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  411698:	4631      	mov	r1, r6
  41169a:	a80f      	add	r0, sp, #60	; 0x3c
  41169c:	4c56      	ldr	r4, [pc, #344]	; (4117f8 <draw_pattern+0x2ac>)
  41169e:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  4116a0:	4628      	mov	r0, r5
  4116a2:	4b5b      	ldr	r3, [pc, #364]	; (411810 <draw_pattern+0x2c4>)
  4116a4:	4798      	blx	r3
  4116a6:	e75c      	b.n	411562 <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4116a8:	2300      	movs	r3, #0
  4116aa:	f9b4 2000 	ldrsh.w	r2, [r4]
  4116ae:	4629      	mov	r1, r5
  4116b0:	a808      	add	r0, sp, #32
  4116b2:	4f58      	ldr	r7, [pc, #352]	; (411814 <draw_pattern+0x2c8>)
  4116b4:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4116b6:	2100      	movs	r1, #0
  4116b8:	a808      	add	r0, sp, #32
  4116ba:	4b57      	ldr	r3, [pc, #348]	; (411818 <draw_pattern+0x2cc>)
  4116bc:	4798      	blx	r3
  4116be:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4116c0:	88ab      	ldrh	r3, [r5, #4]
  4116c2:	882a      	ldrh	r2, [r5, #0]
  4116c4:	1a9b      	subs	r3, r3, r2
  4116c6:	b29b      	uxth	r3, r3
  4116c8:	3301      	adds	r3, #1
  4116ca:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  4116cc:	fb93 f2fb 	sdiv	r2, r3, fp
  4116d0:	fb02 331b 	mls	r3, r2, fp, r3
  4116d4:	2b00      	cmp	r3, #0
  4116d6:	db1e      	blt.n	411716 <draw_pattern+0x1ca>
  4116d8:	105b      	asrs	r3, r3, #1
  4116da:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4116dc:	88ea      	ldrh	r2, [r5, #6]
  4116de:	886b      	ldrh	r3, [r5, #2]
  4116e0:	1ad2      	subs	r2, r2, r3
  4116e2:	b292      	uxth	r2, r2
  4116e4:	3201      	adds	r2, #1
  4116e6:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  4116e8:	fb92 f1fa 	sdiv	r1, r2, sl
  4116ec:	fb01 221a 	mls	r2, r1, sl, r2
  4116f0:	2a00      	cmp	r2, #0
  4116f2:	db12      	blt.n	41171a <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  4116f4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4116f8:	b29b      	uxth	r3, r3
  4116fa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  4116fe:	fa1f fa8a 	uxth.w	sl, sl
  411702:	4453      	add	r3, sl
  411704:	b29b      	uxth	r3, r3
  411706:	3b01      	subs	r3, #1
  411708:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  41170c:	f8cd b010 	str.w	fp, [sp, #16]
  411710:	4683      	mov	fp, r0
  411712:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  411714:	e031      	b.n	41177a <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411716:	3301      	adds	r3, #1
  411718:	e7de      	b.n	4116d8 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  41171a:	3201      	adds	r2, #1
  41171c:	e7ea      	b.n	4116f4 <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  41171e:	2300      	movs	r3, #0
  411720:	9300      	str	r3, [sp, #0]
  411722:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  411726:	aa11      	add	r2, sp, #68	; 0x44
  411728:	4631      	mov	r1, r6
  41172a:	a80f      	add	r0, sp, #60	; 0x3c
  41172c:	4c3b      	ldr	r4, [pc, #236]	; (41181c <draw_pattern+0x2d0>)
  41172e:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411730:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411734:	443b      	add	r3, r7
  411736:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  41173a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41173e:	443b      	add	r3, r7
  411740:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  411744:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  411748:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41174c:	429a      	cmp	r2, r3
  41174e:	dc0a      	bgt.n	411766 <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411750:	f1b8 0f02 	cmp.w	r8, #2
  411754:	d0e3      	beq.n	41171e <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  411756:	ab1a      	add	r3, sp, #104	; 0x68
  411758:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  41175c:	4631      	mov	r1, r6
  41175e:	a80f      	add	r0, sp, #60	; 0x3c
  411760:	4c25      	ldr	r4, [pc, #148]	; (4117f8 <draw_pattern+0x2ac>)
  411762:	47a0      	blx	r4
  411764:	e7e4      	b.n	411730 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  411766:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  41176a:	4453      	add	r3, sl
  41176c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  411770:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  411774:	4453      	add	r3, sl
  411776:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  41177a:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41177e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  411782:	429a      	cmp	r2, r3
  411784:	dc0d      	bgt.n	4117a2 <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  411786:	882b      	ldrh	r3, [r5, #0]
  411788:	eba3 030b 	sub.w	r3, r3, fp
  41178c:	b29b      	uxth	r3, r3
  41178e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  411792:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  411796:	443b      	add	r3, r7
  411798:	b29b      	uxth	r3, r3
  41179a:	3b01      	subs	r3, #1
  41179c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  4117a0:	e7d0      	b.n	411744 <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  4117a2:	9805      	ldr	r0, [sp, #20]
  4117a4:	4b1a      	ldr	r3, [pc, #104]	; (411810 <draw_pattern+0x2c4>)
  4117a6:	4798      	blx	r3
  4117a8:	e6db      	b.n	411562 <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  4117aa:	3001      	adds	r0, #1
  4117ac:	e743      	b.n	411636 <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  4117ae:	1c50      	adds	r0, r2, #1
  4117b0:	e74c      	b.n	41164c <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  4117b2:	f002 0201 	and.w	r2, r2, #1
  4117b6:	4411      	add	r1, r2
  4117b8:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  4117bc:	4413      	add	r3, r2
  4117be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  4117c2:	e758      	b.n	411676 <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4117c4:	2300      	movs	r3, #0
  4117c6:	f9b4 2000 	ldrsh.w	r2, [r4]
  4117ca:	4629      	mov	r1, r5
  4117cc:	a808      	add	r0, sp, #32
  4117ce:	4d11      	ldr	r5, [pc, #68]	; (411814 <draw_pattern+0x2c8>)
  4117d0:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4117d2:	2100      	movs	r1, #0
  4117d4:	a808      	add	r0, sp, #32
  4117d6:	4b10      	ldr	r3, [pc, #64]	; (411818 <draw_pattern+0x2cc>)
  4117d8:	4798      	blx	r3
  4117da:	4605      	mov	r5, r0
  4117dc:	e756      	b.n	41168c <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  4117de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4117e0:	2200      	movs	r2, #0
  4117e2:	9200      	str	r2, [sp, #0]
  4117e4:	aa11      	add	r2, sp, #68	; 0x44
  4117e6:	4631      	mov	r1, r6
  4117e8:	a80f      	add	r0, sp, #60	; 0x3c
  4117ea:	4c0c      	ldr	r4, [pc, #48]	; (41181c <draw_pattern+0x2d0>)
  4117ec:	47a0      	blx	r4
  4117ee:	e757      	b.n	4116a0 <draw_pattern+0x154>
  4117f0:	4770      	bx	lr
  4117f2:	bf00      	nop
  4117f4:	0040d385 	.word	0x0040d385
  4117f8:	0040d345 	.word	0x0040d345
  4117fc:	00413511 	.word	0x00413511
  411800:	0040d099 	.word	0x0040d099
  411804:	0040dc2d 	.word	0x0040dc2d
  411808:	00417a51 	.word	0x00417a51
  41180c:	00415431 	.word	0x00415431
  411810:	0040f875 	.word	0x0040f875
  411814:	0040fa6d 	.word	0x0040fa6d
  411818:	0040f7f1 	.word	0x0040f7f1
  41181c:	0040dc75 	.word	0x0040dc75

00411820 <draw_value_str>:
{
  411820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  411824:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  411826:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  411828:	b11d      	cbz	r5, 411832 <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  41182a:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  41182e:	2b02      	cmp	r3, #2
  411830:	d802      	bhi.n	411838 <draw_value_str+0x18>
}
  411832:	b013      	add	sp, #76	; 0x4c
  411834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411838:	4614      	mov	r4, r2
  41183a:	460e      	mov	r6, r1
  41183c:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  41183e:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  411842:	2700      	movs	r7, #0
  411844:	9702      	str	r7, [sp, #8]
  411846:	f647 4218 	movw	r2, #31768	; 0x7c18
  41184a:	9201      	str	r2, [sp, #4]
  41184c:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  411850:	9200      	str	r2, [sp, #0]
  411852:	6c22      	ldr	r2, [r4, #64]	; 0x40
  411854:	4629      	mov	r1, r5
  411856:	a811      	add	r0, sp, #68	; 0x44
  411858:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 41190c <draw_value_str+0xec>
  41185c:	47c8      	blx	r9
    value_area.x1 = 0;
  41185e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  411862:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  411866:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  41186a:	3b01      	subs	r3, #1
  41186c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  411870:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  411874:	3b01      	subs	r3, #1
  411876:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  41187a:	ab0e      	add	r3, sp, #56	; 0x38
  41187c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  411880:	a90f      	add	r1, sp, #60	; 0x3c
  411882:	4640      	mov	r0, r8
  411884:	f8df 8088 	ldr.w	r8, [pc, #136]	; 411910 <draw_value_str+0xf0>
  411888:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  41188a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  41188e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  411892:	441a      	add	r2, r3
  411894:	b292      	uxth	r2, r2
  411896:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41189a:	4413      	add	r3, r2
  41189c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  4118a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  4118a4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  4118a8:	440b      	add	r3, r1
  4118aa:	b29b      	uxth	r3, r3
  4118ac:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  4118b0:	4419      	add	r1, r3
  4118b2:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  4118b6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  4118ba:	440a      	add	r2, r1
  4118bc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  4118c0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  4118c4:	4413      	add	r3, r2
  4118c6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  4118ca:	a805      	add	r0, sp, #20
  4118cc:	4b0d      	ldr	r3, [pc, #52]	; (411904 <draw_value_str+0xe4>)
  4118ce:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  4118d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4118d2:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  4118d4:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  4118d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  4118dc:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  4118e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  4118e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4118e8:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  4118ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4118f0:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  4118f4:	9700      	str	r7, [sp, #0]
  4118f6:	462b      	mov	r3, r5
  4118f8:	aa05      	add	r2, sp, #20
  4118fa:	4631      	mov	r1, r6
  4118fc:	a80f      	add	r0, sp, #60	; 0x3c
  4118fe:	4c02      	ldr	r4, [pc, #8]	; (411908 <draw_value_str+0xe8>)
  411900:	47a0      	blx	r4
  411902:	e796      	b.n	411832 <draw_value_str+0x12>
  411904:	0040dc2d 	.word	0x0040dc2d
  411908:	0040dc75 	.word	0x0040dc75
  41190c:	00417a51 	.word	0x00417a51
  411910:	004154f9 	.word	0x004154f9

00411914 <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  411914:	7b13      	ldrb	r3, [r2, #12]
  411916:	2b02      	cmp	r3, #2
  411918:	f240 839c 	bls.w	412054 <draw_bg+0x740>
{
  41191c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411920:	b0a5      	sub	sp, #148	; 0x94
  411922:	ad22      	add	r5, sp, #136	; 0x88
  411924:	2308      	movs	r3, #8
  411926:	e004      	b.n	411932 <draw_bg+0x1e>
        *d8 = *s8;
  411928:	f810 6b01 	ldrb.w	r6, [r0], #1
  41192c:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  411930:	3b01      	subs	r3, #1
    while(len) {
  411932:	2b00      	cmp	r3, #0
  411934:	d1f8      	bne.n	411928 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  411936:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  41193a:	2b01      	cmp	r3, #1
  41193c:	dd22      	ble.n	411984 <draw_bg+0x70>
  41193e:	7d13      	ldrb	r3, [r2, #20]
  411940:	2bfc      	cmp	r3, #252	; 0xfc
  411942:	d91f      	bls.n	411984 <draw_bg+0x70>
  411944:	f9b2 3000 	ldrsh.w	r3, [r2]
  411948:	b1e3      	cbz	r3, 411984 <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  41194a:	8a53      	ldrh	r3, [r2, #18]
  41194c:	f3c3 0080 	ubfx	r0, r3, #2, #1
  411950:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  411954:	4428      	add	r0, r5
  411956:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  41195a:	f3c3 0040 	ubfx	r0, r3, #1, #1
  41195e:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  411962:	4428      	add	r0, r5
  411964:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  411968:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  41196c:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  411970:	1b40      	subs	r0, r0, r5
  411972:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  411976:	f003 0301 	and.w	r3, r3, #1
  41197a:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  41197e:	1ac3      	subs	r3, r0, r3
  411980:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  411984:	7b13      	ldrb	r3, [r2, #12]
  411986:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  411988:	2bfd      	cmp	r3, #253	; 0xfd
  41198a:	d901      	bls.n	411990 <draw_bg+0x7c>
  41198c:	23ff      	movs	r3, #255	; 0xff
  41198e:	9305      	str	r3, [sp, #20]
  411990:	4692      	mov	sl, r2
  411992:	460d      	mov	r5, r1
  411994:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  411996:	4bad      	ldr	r3, [pc, #692]	; (411c4c <draw_bg+0x338>)
  411998:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  41199a:	4bad      	ldr	r3, [pc, #692]	; (411c50 <draw_bg+0x33c>)
  41199c:	4798      	blx	r3
  41199e:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  4119a0:	462a      	mov	r2, r5
  4119a2:	a922      	add	r1, sp, #136	; 0x88
  4119a4:	a820      	add	r0, sp, #128	; 0x80
  4119a6:	4bab      	ldr	r3, [pc, #684]	; (411c54 <draw_bg+0x340>)
  4119a8:	4798      	blx	r3
    if(is_common == false) return;
  4119aa:	9006      	str	r0, [sp, #24]
  4119ac:	b910      	cbnz	r0, 4119b4 <draw_bg+0xa0>
}
  4119ae:	b025      	add	sp, #148	; 0x94
  4119b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  4119b4:	8a39      	ldrh	r1, [r7, #16]
  4119b6:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4119ba:	1a5b      	subs	r3, r3, r1
  4119bc:	b29a      	uxth	r2, r3
  4119be:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  4119c2:	8a7d      	ldrh	r5, [r7, #18]
  4119c4:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  4119c8:	1b40      	subs	r0, r0, r5
  4119ca:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  4119ce:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  4119d2:	1a5b      	subs	r3, r3, r1
  4119d4:	b29b      	uxth	r3, r3
  4119d6:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  4119da:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  4119de:	1b49      	subs	r1, r1, r5
  4119e0:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4119e4:	1a9b      	subs	r3, r3, r2
  4119e6:	b29b      	uxth	r3, r3
  4119e8:	3301      	adds	r3, #1
  4119ea:	b21b      	sxth	r3, r3
  4119ec:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  4119ee:	930c      	str	r3, [sp, #48]	; 0x30
  4119f0:	4618      	mov	r0, r3
  4119f2:	4b99      	ldr	r3, [pc, #612]	; (411c58 <draw_bg+0x344>)
  4119f4:	4798      	blx	r3
  4119f6:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  4119f8:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  4119fc:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411a00:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411a04:	429a      	cmp	r2, r3
  411a06:	d00a      	beq.n	411a1e <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  411a08:	4b94      	ldr	r3, [pc, #592]	; (411c5c <draw_bg+0x348>)
  411a0a:	4798      	blx	r3
  411a0c:	b283      	uxth	r3, r0
  411a0e:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  411a10:	b943      	cbnz	r3, 411a24 <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411a12:	f1b8 0f02 	cmp.w	r8, #2
  411a16:	d068      	beq.n	411aea <draw_bg+0x1d6>
    bool simple_mode = true;
  411a18:	9b06      	ldr	r3, [sp, #24]
  411a1a:	9309      	str	r3, [sp, #36]	; 0x24
  411a1c:	e004      	b.n	411a28 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411a1e:	f04f 0800 	mov.w	r8, #0
  411a22:	e7f1      	b.n	411a08 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  411a24:	2300      	movs	r3, #0
  411a26:	9309      	str	r3, [sp, #36]	; 0x24
  411a28:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  411a2c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411a30:	ebab 0b03 	sub.w	fp, fp, r3
  411a34:	fa1f fb8b 	uxth.w	fp, fp
  411a38:	f10b 0b01 	add.w	fp, fp, #1
  411a3c:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  411a40:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411a44:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  411a48:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411a4c:	1aed      	subs	r5, r5, r3
  411a4e:	b2ad      	uxth	r5, r5
  411a50:	3501      	adds	r5, #1
  411a52:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  411a54:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411a58:	455d      	cmp	r5, fp
  411a5a:	bfa8      	it	ge
  411a5c:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  411a5e:	106d      	asrs	r5, r5, #1
  411a60:	42ab      	cmp	r3, r5
  411a62:	dc00      	bgt.n	411a66 <draw_bg+0x152>
    int32_t rout = dsc->radius;
  411a64:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  411a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411a68:	2d00      	cmp	r5, #0
  411a6a:	bf14      	ite	ne
  411a6c:	2300      	movne	r3, #0
  411a6e:	f003 0301 	andeq.w	r3, r3, #1
  411a72:	b113      	cbz	r3, 411a7a <draw_bg+0x166>
  411a74:	f1b8 0f00 	cmp.w	r8, #0
  411a78:	d03a      	beq.n	411af0 <draw_bg+0x1dc>
        if(rout > 0) {
  411a7a:	2d00      	cmp	r5, #0
  411a7c:	dd4a      	ble.n	411b14 <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  411a7e:	2300      	movs	r3, #0
  411a80:	462a      	mov	r2, r5
  411a82:	a922      	add	r1, sp, #136	; 0x88
  411a84:	a819      	add	r0, sp, #100	; 0x64
  411a86:	4e76      	ldr	r6, [pc, #472]	; (411c60 <draw_bg+0x34c>)
  411a88:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411a8a:	2100      	movs	r1, #0
  411a8c:	a819      	add	r0, sp, #100	; 0x64
  411a8e:	4b75      	ldr	r3, [pc, #468]	; (411c64 <draw_bg+0x350>)
  411a90:	4798      	blx	r3
  411a92:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  411a94:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  411a98:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  411a9c:	f1b8 0f02 	cmp.w	r8, #2
  411aa0:	d03c      	beq.n	411b1c <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  411aa2:	2300      	movs	r3, #0
  411aa4:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411aa6:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  411aaa:	b293      	uxth	r3, r2
  411aac:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  411ab0:	b288      	uxth	r0, r1
  411ab2:	1a1b      	subs	r3, r3, r0
  411ab4:	b29b      	uxth	r3, r3
  411ab6:	3301      	adds	r3, #1
  411ab8:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  411aba:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  411abe:	2b32      	cmp	r3, #50	; 0x32
  411ac0:	dc01      	bgt.n	411ac6 <draw_bg+0x1b2>
        bool split = false;
  411ac2:	2300      	movs	r3, #0
  411ac4:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  411ac6:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  411aca:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411ace:	8a7b      	ldrh	r3, [r7, #18]
  411ad0:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  411ad4:	fa13 f386 	uxtah	r3, r3, r6
  411ad8:	b21b      	sxth	r3, r3
  411ada:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  411ade:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  411ae2:	46b9      	mov	r9, r7
  411ae4:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411ae8:	e1ec      	b.n	411ec4 <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411aea:	2300      	movs	r3, #0
  411aec:	9309      	str	r3, [sp, #36]	; 0x24
  411aee:	e79b      	b.n	411a28 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  411af0:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411af4:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411af8:	9302      	str	r3, [sp, #8]
  411afa:	9b05      	ldr	r3, [sp, #20]
  411afc:	9301      	str	r3, [sp, #4]
  411afe:	2301      	movs	r3, #1
  411b00:	9300      	str	r3, [sp, #0]
  411b02:	2300      	movs	r3, #0
  411b04:	a922      	add	r1, sp, #136	; 0x88
  411b06:	980a      	ldr	r0, [sp, #40]	; 0x28
  411b08:	4c57      	ldr	r4, [pc, #348]	; (411c68 <draw_bg+0x354>)
  411b0a:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411b0c:	f04f 33ff 	mov.w	r3, #4294967295
  411b10:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  411b12:	e234      	b.n	411f7e <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411b14:	f04f 33ff 	mov.w	r3, #4294967295
  411b18:	9310      	str	r3, [sp, #64]	; 0x40
  411b1a:	e7bb      	b.n	411a94 <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  411b1c:	ea4f 004b 	mov.w	r0, fp, lsl #1
  411b20:	4b4d      	ldr	r3, [pc, #308]	; (411c58 <draw_bg+0x344>)
  411b22:	4798      	blx	r3
  411b24:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  411b26:	f04f 0900 	mov.w	r9, #0
  411b2a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  411b2e:	9512      	str	r5, [sp, #72]	; 0x48
  411b30:	4684      	mov	ip, r0
  411b32:	9713      	str	r7, [sp, #76]	; 0x4c
  411b34:	f8dd e010 	ldr.w	lr, [sp, #16]
  411b38:	e004      	b.n	411b44 <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  411b3a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  411b3e:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  411b40:	f109 0901 	add.w	r9, r9, #1
  411b44:	45f1      	cmp	r9, lr
  411b46:	da66      	bge.n	411c16 <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  411b48:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  411b4c:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411b50:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  411b54:	fb0b f200 	mul.w	r2, fp, r0
  411b58:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  411b5a:	429a      	cmp	r2, r3
  411b5c:	daed      	bge.n	411b3a <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411b5e:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  411b62:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  411b66:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  411b6a:	da51      	bge.n	411c10 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  411b6c:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  411b6e:	fb01 f10b 	mul.w	r1, r1, fp
  411b72:	1209      	asrs	r1, r1, #8
    i -= min;
  411b74:	1a9b      	subs	r3, r3, r2
  411b76:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  411b78:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  411b7c:	fb93 f3f1 	sdiv	r3, r3, r1
  411b80:	b2db      	uxtb	r3, r3
  411b82:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  411b86:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411b8a:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  411b8e:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  411b92:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  411b96:	fb07 f505 	mul.w	r5, r7, r5
  411b9a:	fb03 5202 	mla	r2, r3, r2, r5
  411b9e:	3280      	adds	r2, #128	; 0x80
  411ba0:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  411ba4:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  411ba8:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  411bac:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  411bb0:	f000 0507 	and.w	r5, r0, #7
  411bb4:	f3c0 3242 	ubfx	r2, r0, #13, #3
  411bb8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  411bbc:	f001 0807 	and.w	r8, r1, #7
  411bc0:	f3c1 3542 	ubfx	r5, r1, #13, #3
  411bc4:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  411bc8:	fb05 f507 	mul.w	r5, r5, r7
  411bcc:	fb02 5203 	mla	r2, r2, r3, r5
  411bd0:	3280      	adds	r2, #128	; 0x80
  411bd2:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  411bd6:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  411bda:	f3c2 6582 	ubfx	r5, r2, #26, #3
  411bde:	f365 0402 	bfi	r4, r5, #0, #3
  411be2:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411be6:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411bea:	f3c0 2004 	ubfx	r0, r0, #8, #5
  411bee:	f3c1 2104 	ubfx	r1, r1, #8, #5
  411bf2:	fb01 f707 	mul.w	r7, r1, r7
  411bf6:	fb00 7303 	mla	r3, r0, r3, r7
  411bfa:	3380      	adds	r3, #128	; 0x80
  411bfc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411c00:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  411c04:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411c08:	f363 240c 	bfi	r4, r3, #8, #5
  411c0c:	4623      	mov	r3, r4
  411c0e:	e796      	b.n	411b3e <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  411c10:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411c14:	e793      	b.n	411b3e <draw_bg+0x22a>
  411c16:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  411c1a:	9d12      	ldr	r5, [sp, #72]	; 0x48
  411c1c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  411c1e:	e742      	b.n	411aa6 <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  411c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  411c22:	9905      	ldr	r1, [sp, #20]
  411c24:	9f08      	ldr	r7, [sp, #32]
  411c26:	4638      	mov	r0, r7
  411c28:	4b10      	ldr	r3, [pc, #64]	; (411c6c <draw_bg+0x358>)
  411c2a:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411c2c:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  411c30:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  411c34:	4419      	add	r1, r3
  411c36:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  411c3a:	4432      	add	r2, r6
  411c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411c3e:	b212      	sxth	r2, r2
  411c40:	b209      	sxth	r1, r1
  411c42:	4638      	mov	r0, r7
  411c44:	4f0a      	ldr	r7, [pc, #40]	; (411c70 <draw_bg+0x35c>)
  411c46:	47b8      	blx	r7
  411c48:	9004      	str	r0, [sp, #16]
  411c4a:	e028      	b.n	411c9e <draw_bg+0x38a>
  411c4c:	00409531 	.word	0x00409531
  411c50:	004149fd 	.word	0x004149fd
  411c54:	004151bb 	.word	0x004151bb
  411c58:	00416531 	.word	0x00416531
  411c5c:	0040f8ed 	.word	0x0040f8ed
  411c60:	0040fa6d 	.word	0x0040fa6d
  411c64:	0040f7f1 	.word	0x0040f7f1
  411c68:	0040c5c9 	.word	0x0040c5c9
  411c6c:	00416661 	.word	0x00416661
  411c70:	0040f825 	.word	0x0040f825
                _lv_memset(mask_buf, opa, draw_area_w);
  411c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  411c76:	9905      	ldr	r1, [sp, #20]
  411c78:	9f08      	ldr	r7, [sp, #32]
  411c7a:	4638      	mov	r0, r7
  411c7c:	4bb5      	ldr	r3, [pc, #724]	; (411f54 <draw_bg+0x640>)
  411c7e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411c80:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  411c84:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  411c88:	4419      	add	r1, r3
  411c8a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  411c8e:	4432      	add	r2, r6
  411c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411c92:	b212      	sxth	r2, r2
  411c94:	b209      	sxth	r1, r1
  411c96:	4638      	mov	r0, r7
  411c98:	4faf      	ldr	r7, [pc, #700]	; (411f58 <draw_bg+0x644>)
  411c9a:	47b8      	blx	r7
  411c9c:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  411c9e:	9b04      	ldr	r3, [sp, #16]
  411ca0:	2b02      	cmp	r3, #2
  411ca2:	d061      	beq.n	411d68 <draw_bg+0x454>
            opa2 = opa;
  411ca4:	9b05      	ldr	r3, [sp, #20]
  411ca6:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  411ca8:	f1b8 0f01 	cmp.w	r8, #1
  411cac:	d05f      	beq.n	411d6e <draw_bg+0x45a>
            if(simple_mode && split &&
  411cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411cb0:	9a06      	ldr	r2, [sp, #24]
  411cb2:	4013      	ands	r3, r2
  411cb4:	f013 0fff 	tst.w	r3, #255	; 0xff
  411cb8:	f000 80e8 	beq.w	411e8c <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  411cbc:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411cc0:	442b      	add	r3, r5
  411cc2:	3301      	adds	r3, #1
            if(simple_mode && split &&
  411cc4:	429c      	cmp	r4, r3
  411cc6:	db06      	blt.n	411cd6 <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  411cc8:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411ccc:	1b5b      	subs	r3, r3, r5
  411cce:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  411cd0:	429c      	cmp	r4, r3
  411cd2:	f340 80db 	ble.w	411e8c <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  411cd6:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  411cda:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  411cde:	b2ac      	uxth	r4, r5
  411ce0:	fa14 f383 	uxtah	r3, r4, r3
  411ce4:	b29b      	uxth	r3, r3
  411ce6:	3b01      	subs	r3, #1
  411ce8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  411cec:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  411cf0:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  411cf4:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411cf8:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  411cfc:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411d00:	9302      	str	r3, [sp, #8]
  411d02:	9b07      	ldr	r3, [sp, #28]
  411d04:	9301      	str	r3, [sp, #4]
  411d06:	9b04      	ldr	r3, [sp, #16]
  411d08:	9300      	str	r3, [sp, #0]
  411d0a:	9b08      	ldr	r3, [sp, #32]
  411d0c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411d10:	a917      	add	r1, sp, #92	; 0x5c
  411d12:	980a      	ldr	r0, [sp, #40]	; 0x28
  411d14:	4f91      	ldr	r7, [pc, #580]	; (411f5c <draw_bg+0x648>)
  411d16:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  411d18:	f1b8 0f01 	cmp.w	r8, #1
  411d1c:	f000 809c 	beq.w	411e58 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  411d20:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  411d24:	b29a      	uxth	r2, r3
  411d26:	1b14      	subs	r4, r2, r4
  411d28:	b2a4      	uxth	r4, r4
  411d2a:	3401      	adds	r4, #1
  411d2c:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  411d30:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  411d34:	1b5b      	subs	r3, r3, r5
  411d36:	3301      	adds	r3, #1
  411d38:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  411d3c:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  411d40:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  411d42:	1a9b      	subs	r3, r3, r2
  411d44:	f100 80a0 	bmi.w	411e88 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  411d48:	f89a 200d 	ldrb.w	r2, [sl, #13]
  411d4c:	9202      	str	r2, [sp, #8]
  411d4e:	9a07      	ldr	r2, [sp, #28]
  411d50:	9201      	str	r2, [sp, #4]
  411d52:	9a04      	ldr	r2, [sp, #16]
  411d54:	9200      	str	r2, [sp, #0]
  411d56:	9a08      	ldr	r2, [sp, #32]
  411d58:	4413      	add	r3, r2
  411d5a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411d5e:	a917      	add	r1, sp, #92	; 0x5c
  411d60:	980a      	ldr	r0, [sp, #40]	; 0x28
  411d62:	4c7e      	ldr	r4, [pc, #504]	; (411f5c <draw_bg+0x648>)
  411d64:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  411d66:	e0a2      	b.n	411eae <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  411d68:	23ff      	movs	r3, #255	; 0xff
  411d6a:	9307      	str	r3, [sp, #28]
  411d6c:	e79c      	b.n	411ca8 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411d6e:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  411d72:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411d76:	1ad2      	subs	r2, r2, r3
  411d78:	b292      	uxth	r2, r2
  411d7a:	3201      	adds	r2, #1
  411d7c:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  411d7e:	1ae3      	subs	r3, r4, r3
  411d80:	b29b      	uxth	r3, r3
  411d82:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411d86:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  411d8a:	fb02 f10c 	mul.w	r1, r2, ip
  411d8e:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  411d90:	4571      	cmp	r1, lr
  411d92:	da59      	bge.n	411e48 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411d94:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  411d98:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  411d9c:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  411da0:	da57      	bge.n	411e52 <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  411da2:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  411da6:	fb00 f202 	mul.w	r2, r0, r2
  411daa:	1212      	asrs	r2, r2, #8
    i -= min;
  411dac:	1a5b      	subs	r3, r3, r1
  411dae:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  411db0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  411db4:	fb93 f3f2 	sdiv	r3, r3, r2
  411db8:	b2db      	uxtb	r3, r3
  411dba:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  411dbe:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411dc2:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  411dc6:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  411dca:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  411dce:	fb0c fe0e 	mul.w	lr, ip, lr
  411dd2:	fb03 e202 	mla	r2, r3, r2, lr
  411dd6:	3280      	adds	r2, #128	; 0x80
  411dd8:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  411ddc:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  411de0:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  411de4:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  411de8:	f000 0e07 	and.w	lr, r0, #7
  411dec:	f3c0 3242 	ubfx	r2, r0, #13, #3
  411df0:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  411df4:	f001 0707 	and.w	r7, r1, #7
  411df8:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  411dfc:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  411e00:	fb0e fe0c 	mul.w	lr, lr, ip
  411e04:	fb02 e203 	mla	r2, r2, r3, lr
  411e08:	3280      	adds	r2, #128	; 0x80
  411e0a:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  411e0e:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  411e12:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  411e16:	f36e 0b02 	bfi	fp, lr, #0, #3
  411e1a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411e1e:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411e22:	f3c0 2004 	ubfx	r0, r0, #8, #5
  411e26:	f3c1 2104 	ubfx	r1, r1, #8, #5
  411e2a:	fb01 fc0c 	mul.w	ip, r1, ip
  411e2e:	fb00 c303 	mla	r3, r0, r3, ip
  411e32:	3380      	adds	r3, #128	; 0x80
  411e34:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411e38:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  411e3c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411e40:	f363 2b0c 	bfi	fp, r3, #8, #5
  411e44:	465b      	mov	r3, fp
  411e46:	e001      	b.n	411e4c <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  411e48:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  411e4c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  411e50:	e72d      	b.n	411cae <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  411e52:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411e56:	e7f9      	b.n	411e4c <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  411e58:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411e5c:	4423      	add	r3, r4
  411e5e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  411e62:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411e66:	1b1b      	subs	r3, r3, r4
  411e68:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  411e6c:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411e70:	9302      	str	r3, [sp, #8]
  411e72:	9b05      	ldr	r3, [sp, #20]
  411e74:	9301      	str	r3, [sp, #4]
  411e76:	2301      	movs	r3, #1
  411e78:	9300      	str	r3, [sp, #0]
  411e7a:	2300      	movs	r3, #0
  411e7c:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411e80:	a917      	add	r1, sp, #92	; 0x5c
  411e82:	980a      	ldr	r0, [sp, #40]	; 0x28
  411e84:	47b8      	blx	r7
  411e86:	e74b      	b.n	411d20 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  411e88:	2300      	movs	r3, #0
  411e8a:	e75d      	b.n	411d48 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  411e8c:	f1b8 0f02 	cmp.w	r8, #2
  411e90:	d034      	beq.n	411efc <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  411e92:	f1b8 0f01 	cmp.w	r8, #1
  411e96:	d03f      	beq.n	411f18 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  411e98:	9b06      	ldr	r3, [sp, #24]
  411e9a:	f083 0301 	eor.w	r3, r3, #1
  411e9e:	b2db      	uxtb	r3, r3
  411ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  411ea2:	2a00      	cmp	r2, #0
  411ea4:	bf18      	it	ne
  411ea6:	f043 0301 	orrne.w	r3, r3, #1
  411eaa:	2b00      	cmp	r3, #0
  411eac:	d143      	bne.n	411f36 <draw_bg+0x622>
            fill_area.y1++;
  411eae:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  411eb2:	3301      	adds	r3, #1
  411eb4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  411eb8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411ebc:	3301      	adds	r3, #1
  411ebe:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411ec2:	3601      	adds	r6, #1
  411ec4:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  411ec8:	429e      	cmp	r6, r3
  411eca:	dc4b      	bgt.n	411f64 <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  411ecc:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  411ed0:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  411ed2:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411ed6:	442b      	add	r3, r5
  411ed8:	3301      	adds	r3, #1
  411eda:	429c      	cmp	r4, r3
  411edc:	f77f aeca 	ble.w	411c74 <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  411ee0:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411ee4:	1b5b      	subs	r3, r3, r5
  411ee6:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  411ee8:	429c      	cmp	r4, r3
  411eea:	f6bf aec3 	bge.w	411c74 <draw_bg+0x360>
                if(simple_mode == false) {
  411eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411ef0:	2b00      	cmp	r3, #0
  411ef2:	f43f ae95 	beq.w	411c20 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  411ef6:	2301      	movs	r3, #1
  411ef8:	9304      	str	r3, [sp, #16]
  411efa:	e6d0      	b.n	411c9e <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  411efc:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411f00:	9302      	str	r3, [sp, #8]
  411f02:	9b07      	ldr	r3, [sp, #28]
  411f04:	9301      	str	r3, [sp, #4]
  411f06:	9b04      	ldr	r3, [sp, #16]
  411f08:	9300      	str	r3, [sp, #0]
  411f0a:	9b08      	ldr	r3, [sp, #32]
  411f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  411f0e:	a915      	add	r1, sp, #84	; 0x54
  411f10:	980a      	ldr	r0, [sp, #40]	; 0x28
  411f12:	4c13      	ldr	r4, [pc, #76]	; (411f60 <draw_bg+0x64c>)
  411f14:	47a0      	blx	r4
  411f16:	e7ca      	b.n	411eae <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411f18:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411f1c:	9302      	str	r3, [sp, #8]
  411f1e:	9b07      	ldr	r3, [sp, #28]
  411f20:	9301      	str	r3, [sp, #4]
  411f22:	9b04      	ldr	r3, [sp, #16]
  411f24:	9300      	str	r3, [sp, #0]
  411f26:	9b08      	ldr	r3, [sp, #32]
  411f28:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411f2c:	a915      	add	r1, sp, #84	; 0x54
  411f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
  411f30:	4c0a      	ldr	r4, [pc, #40]	; (411f5c <draw_bg+0x648>)
  411f32:	47a0      	blx	r4
  411f34:	e7bb      	b.n	411eae <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411f36:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411f3a:	9302      	str	r3, [sp, #8]
  411f3c:	9b07      	ldr	r3, [sp, #28]
  411f3e:	9301      	str	r3, [sp, #4]
  411f40:	9b04      	ldr	r3, [sp, #16]
  411f42:	9300      	str	r3, [sp, #0]
  411f44:	9b08      	ldr	r3, [sp, #32]
  411f46:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411f4a:	a915      	add	r1, sp, #84	; 0x54
  411f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
  411f4e:	4c03      	ldr	r4, [pc, #12]	; (411f5c <draw_bg+0x648>)
  411f50:	47a0      	blx	r4
  411f52:	e7ac      	b.n	411eae <draw_bg+0x59a>
  411f54:	00416661 	.word	0x00416661
  411f58:	0040f825 	.word	0x0040f825
  411f5c:	0040c5c9 	.word	0x0040c5c9
  411f60:	0040c6e9 	.word	0x0040c6e9
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  411f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411f66:	f1b8 0f00 	cmp.w	r8, #0
  411f6a:	bf08      	it	eq
  411f6c:	2b00      	cmpeq	r3, #0
  411f6e:	d101      	bne.n	411f74 <draw_bg+0x660>
  411f70:	9b06      	ldr	r3, [sp, #24]
  411f72:	b95b      	cbnz	r3, 411f8c <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  411f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411f76:	b113      	cbz	r3, 411f7e <draw_bg+0x66a>
  411f78:	4618      	mov	r0, r3
  411f7a:	4b37      	ldr	r3, [pc, #220]	; (412058 <draw_bg+0x744>)
  411f7c:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  411f7e:	9810      	ldr	r0, [sp, #64]	; 0x40
  411f80:	4b36      	ldr	r3, [pc, #216]	; (41205c <draw_bg+0x748>)
  411f82:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  411f84:	9808      	ldr	r0, [sp, #32]
  411f86:	4b34      	ldr	r3, [pc, #208]	; (412058 <draw_bg+0x744>)
  411f88:	4798      	blx	r3
  411f8a:	e510      	b.n	4119ae <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  411f8c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411f90:	b2ad      	uxth	r5, r5
  411f92:	442b      	add	r3, r5
  411f94:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  411f98:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411f9c:	1b5b      	subs	r3, r3, r5
  411f9e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  411fa2:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411fa6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  411faa:	fa15 f383 	uxtah	r3, r5, r3
  411fae:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411fb2:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411fb6:	9302      	str	r3, [sp, #8]
  411fb8:	9b05      	ldr	r3, [sp, #20]
  411fba:	9301      	str	r3, [sp, #4]
  411fbc:	2301      	movs	r3, #1
  411fbe:	9300      	str	r3, [sp, #0]
  411fc0:	2300      	movs	r3, #0
  411fc2:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411fc6:	a915      	add	r1, sp, #84	; 0x54
  411fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
  411fca:	4c25      	ldr	r4, [pc, #148]	; (412060 <draw_bg+0x74c>)
  411fcc:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  411fce:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  411fd2:	b28b      	uxth	r3, r1
  411fd4:	1b5b      	subs	r3, r3, r5
  411fd6:	b21b      	sxth	r3, r3
  411fd8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  411fdc:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  411fe0:	4293      	cmp	r3, r2
  411fe2:	dc03      	bgt.n	411fec <draw_bg+0x6d8>
  411fe4:	b293      	uxth	r3, r2
  411fe6:	3301      	adds	r3, #1
  411fe8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  411fec:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411ff0:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411ff4:	9302      	str	r3, [sp, #8]
  411ff6:	9f05      	ldr	r7, [sp, #20]
  411ff8:	9701      	str	r7, [sp, #4]
  411ffa:	2601      	movs	r6, #1
  411ffc:	9600      	str	r6, [sp, #0]
  411ffe:	2300      	movs	r3, #0
  412000:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  412004:	a915      	add	r1, sp, #84	; 0x54
  412006:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  41200a:	4640      	mov	r0, r8
  41200c:	4c14      	ldr	r4, [pc, #80]	; (412060 <draw_bg+0x74c>)
  41200e:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  412010:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  412014:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  412018:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41201c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  412020:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  412024:	442b      	add	r3, r5
  412026:	b29b      	uxth	r3, r3
  412028:	4433      	add	r3, r6
  41202a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  41202e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  412032:	1b5b      	subs	r3, r3, r5
  412034:	b29b      	uxth	r3, r3
  412036:	3b01      	subs	r3, #1
  412038:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  41203c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  412040:	f89a 300d 	ldrb.w	r3, [sl, #13]
  412044:	9302      	str	r3, [sp, #8]
  412046:	9701      	str	r7, [sp, #4]
  412048:	9600      	str	r6, [sp, #0]
  41204a:	2300      	movs	r3, #0
  41204c:	a915      	add	r1, sp, #84	; 0x54
  41204e:	4640      	mov	r0, r8
  412050:	47a0      	blx	r4
  412052:	e78f      	b.n	411f74 <draw_bg+0x660>
  412054:	4770      	bx	lr
  412056:	bf00      	nop
  412058:	004162e1 	.word	0x004162e1
  41205c:	0040f875 	.word	0x0040f875
  412060:	0040c5c9 	.word	0x0040c5c9

00412064 <lv_draw_rect_dsc_init>:
{
  412064:	b510      	push	{r4, lr}
  412066:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  412068:	2154      	movs	r1, #84	; 0x54
  41206a:	4b0e      	ldr	r3, [pc, #56]	; (4120a4 <lv_draw_rect_dsc_init+0x40>)
  41206c:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  41206e:	4b0e      	ldr	r3, [pc, #56]	; (4120a8 <lv_draw_rect_dsc_init+0x44>)
  412070:	881b      	ldrh	r3, [r3, #0]
  412072:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  412074:	2300      	movs	r3, #0
  412076:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  412078:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  41207a:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  41207c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  412080:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  412082:	23ff      	movs	r3, #255	; 0xff
  412084:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  412086:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  412088:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  41208a:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  41208c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  412090:	4a06      	ldr	r2, [pc, #24]	; (4120ac <lv_draw_rect_dsc_init+0x48>)
  412092:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  412094:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  412098:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  41209a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  41209e:	230f      	movs	r3, #15
  4120a0:	8263      	strh	r3, [r4, #18]
  4120a2:	bd10      	pop	{r4, pc}
  4120a4:	004166bd 	.word	0x004166bd
  4120a8:	00428e08 	.word	0x00428e08
  4120ac:	2040002c 	.word	0x2040002c

004120b0 <lv_draw_rect>:
{
  4120b0:	b570      	push	{r4, r5, r6, lr}
  4120b2:	88c3      	ldrh	r3, [r0, #6]
  4120b4:	8844      	ldrh	r4, [r0, #2]
  4120b6:	1b1b      	subs	r3, r3, r4
  4120b8:	b29b      	uxth	r3, r3
  4120ba:	3301      	adds	r3, #1
  4120bc:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  4120be:	2b00      	cmp	r3, #0
  4120c0:	dd25      	ble.n	41210e <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4120c2:	8883      	ldrh	r3, [r0, #4]
  4120c4:	8804      	ldrh	r4, [r0, #0]
  4120c6:	1b1b      	subs	r3, r3, r4
  4120c8:	b29b      	uxth	r3, r3
  4120ca:	3301      	adds	r3, #1
  4120cc:	b21b      	sxth	r3, r3
  4120ce:	2b00      	cmp	r3, #0
  4120d0:	dd1d      	ble.n	41210e <lv_draw_rect+0x5e>
  4120d2:	4616      	mov	r6, r2
  4120d4:	460d      	mov	r5, r1
  4120d6:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  4120d8:	4b0d      	ldr	r3, [pc, #52]	; (412110 <lv_draw_rect+0x60>)
  4120da:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  4120dc:	4632      	mov	r2, r6
  4120de:	4629      	mov	r1, r5
  4120e0:	4620      	mov	r0, r4
  4120e2:	4b0c      	ldr	r3, [pc, #48]	; (412114 <lv_draw_rect+0x64>)
  4120e4:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  4120e6:	4632      	mov	r2, r6
  4120e8:	4629      	mov	r1, r5
  4120ea:	4620      	mov	r0, r4
  4120ec:	4b0a      	ldr	r3, [pc, #40]	; (412118 <lv_draw_rect+0x68>)
  4120ee:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  4120f0:	4632      	mov	r2, r6
  4120f2:	4629      	mov	r1, r5
  4120f4:	4620      	mov	r0, r4
  4120f6:	4b09      	ldr	r3, [pc, #36]	; (41211c <lv_draw_rect+0x6c>)
  4120f8:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  4120fa:	4632      	mov	r2, r6
  4120fc:	4629      	mov	r1, r5
  4120fe:	4620      	mov	r0, r4
  412100:	4b07      	ldr	r3, [pc, #28]	; (412120 <lv_draw_rect+0x70>)
  412102:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  412104:	4632      	mov	r2, r6
  412106:	4629      	mov	r1, r5
  412108:	4620      	mov	r0, r4
  41210a:	4b06      	ldr	r3, [pc, #24]	; (412124 <lv_draw_rect+0x74>)
  41210c:	4798      	blx	r3
  41210e:	bd70      	pop	{r4, r5, r6, pc}
  412110:	0040fe0d 	.word	0x0040fe0d
  412114:	00411915 	.word	0x00411915
  412118:	0041154d 	.word	0x0041154d
  41211c:	004111e5 	.word	0x004111e5
  412120:	00411821 	.word	0x00411821
  412124:	00411129 	.word	0x00411129

00412128 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  412128:	b5f0      	push	{r4, r5, r6, r7, lr}
  41212a:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  41212c:	2400      	movs	r4, #0
  41212e:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  412132:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  412134:	7804      	ldrb	r4, [r0, #0]
  412136:	f004 041f 	and.w	r4, r4, #31
  41213a:	2c06      	cmp	r4, #6
  41213c:	bf18      	it	ne
  41213e:	2c04      	cmpne	r4, #4
  412140:	d010      	beq.n	412164 <lv_img_buf_get_px_color+0x3c>
  412142:	2c05      	cmp	r4, #5
  412144:	d00e      	beq.n	412164 <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  412146:	2c07      	cmp	r4, #7
  412148:	d02b      	beq.n	4121a2 <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  41214a:	2c08      	cmp	r4, #8
  41214c:	d03f      	beq.n	4121ce <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  41214e:	2c09      	cmp	r4, #9
  412150:	d055      	beq.n	4121fe <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  412152:	2c0a      	cmp	r4, #10
  412154:	d06c      	beq.n	412230 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  412156:	3c0b      	subs	r4, #11
  412158:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  41215a:	2c03      	cmp	r4, #3
  41215c:	d81d      	bhi.n	41219a <lv_img_buf_get_px_color+0x72>
        p_color = color;
  41215e:	f8ad 3004 	strh.w	r3, [sp, #4]
  412162:	e01a      	b.n	41219a <lv_img_buf_get_px_color+0x72>
  412164:	4616      	mov	r6, r2
  412166:	460f      	mov	r7, r1
  412168:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  41216a:	7800      	ldrb	r0, [r0, #0]
  41216c:	f000 001f 	and.w	r0, r0, #31
  412170:	4b35      	ldr	r3, [pc, #212]	; (412248 <lv_img_buf_get_px_color+0x120>)
  412172:	4798      	blx	r3
  412174:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  412178:	6822      	ldr	r2, [r4, #0]
  41217a:	f3c2 228a 	ubfx	r2, r2, #10, #11
  41217e:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  412182:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  412186:	aa01      	add	r2, sp, #4
  412188:	2302      	movs	r3, #2
  41218a:	e004      	b.n	412196 <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  41218c:	f810 1b01 	ldrb.w	r1, [r0], #1
  412190:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  412194:	3b01      	subs	r3, #1
    while(len) {
  412196:	2b00      	cmp	r3, #0
  412198:	d1f8      	bne.n	41218c <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  41219a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  41219e:	b003      	add	sp, #12
  4121a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  4121a2:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  4121a6:	6800      	ldr	r0, [r0, #0]
  4121a8:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4121ac:	3007      	adds	r0, #7
  4121ae:	10c0      	asrs	r0, r0, #3
  4121b0:	fb00 f202 	mul.w	r2, r0, r2
  4121b4:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4121b8:	18a8      	adds	r0, r5, r2
  4121ba:	7a03      	ldrb	r3, [r0, #8]
  4121bc:	f1c4 0207 	rsb	r2, r4, #7
  4121c0:	2101      	movs	r1, #1
  4121c2:	4091      	lsls	r1, r2
  4121c4:	400b      	ands	r3, r1
  4121c6:	4113      	asrs	r3, r2
  4121c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  4121cc:	e7e5      	b.n	41219a <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  4121ce:	f001 0303 	and.w	r3, r1, #3
  4121d2:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  4121d4:	6800      	ldr	r0, [r0, #0]
  4121d6:	f3c0 208a 	ubfx	r0, r0, #10, #11
  4121da:	3003      	adds	r0, #3
  4121dc:	1080      	asrs	r0, r0, #2
  4121de:	fb00 f202 	mul.w	r2, r0, r2
  4121e2:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  4121e6:	18a8      	adds	r0, r5, r2
  4121e8:	7c02      	ldrb	r2, [r0, #16]
  4121ea:	f1c3 0306 	rsb	r3, r3, #6
  4121ee:	2103      	movs	r1, #3
  4121f0:	4099      	lsls	r1, r3
  4121f2:	400a      	ands	r2, r1
  4121f4:	fa42 f303 	asr.w	r3, r2, r3
  4121f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  4121fc:	e7cd      	b.n	41219a <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  4121fe:	f001 0301 	and.w	r3, r1, #1
  412202:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  412204:	6800      	ldr	r0, [r0, #0]
  412206:	f3c0 208a 	ubfx	r0, r0, #10, #11
  41220a:	3001      	adds	r0, #1
  41220c:	1040      	asrs	r0, r0, #1
  41220e:	fb00 f202 	mul.w	r2, r0, r2
  412212:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  412216:	18a8      	adds	r0, r5, r2
  412218:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  41221c:	f1c3 0304 	rsb	r3, r3, #4
  412220:	210f      	movs	r1, #15
  412222:	4099      	lsls	r1, r3
  412224:	400a      	ands	r2, r1
  412226:	fa42 f303 	asr.w	r3, r2, r3
  41222a:	f8ad 3004 	strh.w	r3, [sp, #4]
  41222e:	e7b4      	b.n	41219a <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  412230:	6800      	ldr	r0, [r0, #0]
  412232:	f3c0 208a 	ubfx	r0, r0, #10, #11
  412236:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  41223a:	18a8      	adds	r0, r5, r2
  41223c:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  412240:	f8ad 3004 	strh.w	r3, [sp, #4]
  412244:	e7a9      	b.n	41219a <lv_img_buf_get_px_color+0x72>
  412246:	bf00      	nop
  412248:	0040d0c1 	.word	0x0040d0c1

0041224c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  41224c:	b5f0      	push	{r4, r5, r6, r7, lr}
  41224e:	b085      	sub	sp, #20
  412250:	4604      	mov	r4, r0
  412252:	460e      	mov	r6, r1
  412254:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  412256:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  412258:	7803      	ldrb	r3, [r0, #0]
  41225a:	f003 031f 	and.w	r3, r3, #31
  41225e:	2b05      	cmp	r3, #5
  412260:	d00a      	beq.n	412278 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  412262:	2b0b      	cmp	r3, #11
  412264:	d012      	beq.n	41228c <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  412266:	2b0c      	cmp	r3, #12
  412268:	d029      	beq.n	4122be <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  41226a:	2b0d      	cmp	r3, #13
  41226c:	d043      	beq.n	4122f6 <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  41226e:	2b0e      	cmp	r3, #14
  412270:	d05f      	beq.n	412332 <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  412272:	20ff      	movs	r0, #255	; 0xff
}
  412274:	b005      	add	sp, #20
  412276:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  412278:	6801      	ldr	r1, [r0, #0]
  41227a:	f3c1 218a 	ubfx	r1, r1, #10, #11
  41227e:	fb01 6102 	mla	r1, r1, r2, r6
  412282:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  412286:	440d      	add	r5, r1
  412288:	78a8      	ldrb	r0, [r5, #2]
  41228a:	e7f3      	b.n	412274 <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  41228c:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  412290:	6801      	ldr	r1, [r0, #0]
  412292:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412296:	3107      	adds	r1, #7
  412298:	10c9      	asrs	r1, r1, #3
  41229a:	fb01 f107 	mul.w	r1, r1, r7
  41229e:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  4122a2:	5c6b      	ldrb	r3, [r5, r1]
  4122a4:	f1c2 0207 	rsb	r2, r2, #7
  4122a8:	2101      	movs	r1, #1
  4122aa:	4091      	lsls	r1, r2
  4122ac:	400b      	ands	r3, r1
  4122ae:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  4122b0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4122b4:	d101      	bne.n	4122ba <lv_img_buf_get_px_alpha+0x6e>
  4122b6:	20ff      	movs	r0, #255	; 0xff
  4122b8:	e7dc      	b.n	412274 <lv_img_buf_get_px_alpha+0x28>
  4122ba:	2000      	movs	r0, #0
  4122bc:	e7da      	b.n	412274 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  4122be:	4b20      	ldr	r3, [pc, #128]	; (412340 <lv_img_buf_get_px_alpha+0xf4>)
  4122c0:	681b      	ldr	r3, [r3, #0]
  4122c2:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  4122c4:	f001 0203 	and.w	r2, r1, #3
  4122c8:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  4122ca:	6801      	ldr	r1, [r0, #0]
  4122cc:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4122d0:	3103      	adds	r1, #3
  4122d2:	1089      	asrs	r1, r1, #2
  4122d4:	fb01 f107 	mul.w	r1, r1, r7
  4122d8:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  4122dc:	5c6b      	ldrb	r3, [r5, r1]
  4122de:	f1c2 0206 	rsb	r2, r2, #6
  4122e2:	2103      	movs	r1, #3
  4122e4:	4091      	lsls	r1, r2
  4122e6:	400b      	ands	r3, r1
  4122e8:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  4122ea:	aa04      	add	r2, sp, #16
  4122ec:	fa52 f383 	uxtab	r3, r2, r3
  4122f0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  4122f4:	e7be      	b.n	412274 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  4122f6:	4b13      	ldr	r3, [pc, #76]	; (412344 <lv_img_buf_get_px_alpha+0xf8>)
  4122f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4122fa:	f10d 0e10 	add.w	lr, sp, #16
  4122fe:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  412302:	f006 0201 	and.w	r2, r6, #1
  412306:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  412308:	6821      	ldr	r1, [r4, #0]
  41230a:	f3c1 218a 	ubfx	r1, r1, #10, #11
  41230e:	3101      	adds	r1, #1
  412310:	1049      	asrs	r1, r1, #1
  412312:	fb01 f107 	mul.w	r1, r1, r7
  412316:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  41231a:	5c6b      	ldrb	r3, [r5, r1]
  41231c:	f1c2 0204 	rsb	r2, r2, #4
  412320:	210f      	movs	r1, #15
  412322:	4091      	lsls	r1, r2
  412324:	400b      	ands	r3, r1
  412326:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  412328:	fa5e f383 	uxtab	r3, lr, r3
  41232c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  412330:	e7a0      	b.n	412274 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  412332:	6801      	ldr	r1, [r0, #0]
  412334:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412338:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  41233c:	5c68      	ldrb	r0, [r5, r1]
  41233e:	e799      	b.n	412274 <lv_img_buf_get_px_alpha+0x28>
  412340:	00428e0c 	.word	0x00428e0c
  412344:	00428e10 	.word	0x00428e10

00412348 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  412348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41234c:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  41234e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  412352:	021b      	lsls	r3, r3, #8
  412354:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  412356:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  41235a:	021b      	lsls	r3, r3, #8
  41235c:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  41235e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  412362:	4e3f      	ldr	r6, [pc, #252]	; (412460 <_lv_img_buf_transform_init+0x118>)
  412364:	fb86 3200 	smull	r3, r2, r6, r0
  412368:	17c3      	asrs	r3, r0, #31
  41236a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  41236e:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  412370:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  412374:	f06f 0709 	mvn.w	r7, #9
  412378:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  41237c:	b29d      	uxth	r5, r3
  41237e:	4268      	negs	r0, r5
  412380:	b200      	sxth	r0, r0
  412382:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 41246c <_lv_img_buf_transform_init+0x124>
  412386:	47d0      	blx	sl
  412388:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  41238a:	fa1f f989 	uxth.w	r9, r9
  41238e:	f1c9 0000 	rsb	r0, r9, #0
  412392:	b200      	sxth	r0, r0
  412394:	47d0      	blx	sl
  412396:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  412398:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  41239c:	b200      	sxth	r0, r0
  41239e:	47d0      	blx	sl
  4123a0:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  4123a2:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  4123a6:	b200      	sxth	r0, r0
  4123a8:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  4123aa:	f1c7 020a 	rsb	r2, r7, #10
  4123ae:	fb0b f307 	mul.w	r3, fp, r7
  4123b2:	fb02 3308 	mla	r3, r2, r8, r3
  4123b6:	fb86 e103 	smull	lr, r1, r6, r3
  4123ba:	17db      	asrs	r3, r3, #31
  4123bc:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  4123c0:	fb00 f007 	mul.w	r0, r0, r7
  4123c4:	fb02 0005 	mla	r0, r2, r5, r0
  4123c8:	fb86 2600 	smull	r2, r6, r6, r0
  4123cc:	17c0      	asrs	r0, r0, #31
  4123ce:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4123d2:	115b      	asrs	r3, r3, #5
  4123d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4123d6:	1140      	asrs	r0, r0, #5
  4123d8:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  4123da:	7ca0      	ldrb	r0, [r4, #18]
  4123dc:	4b21      	ldr	r3, [pc, #132]	; (412464 <_lv_img_buf_transform_init+0x11c>)
  4123de:	4798      	blx	r3
  4123e0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4123e4:	f360 0300 	bfi	r3, r0, #0, #1
  4123e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  4123ec:	7ca0      	ldrb	r0, [r4, #18]
  4123ee:	4b1e      	ldr	r3, [pc, #120]	; (412468 <_lv_img_buf_transform_init+0x120>)
  4123f0:	4798      	blx	r3
  4123f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4123f6:	f360 0341 	bfi	r3, r0, #1, #1
  4123fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4123fe:	7ca2      	ldrb	r2, [r4, #18]
  412400:	1f13      	subs	r3, r2, #4
  412402:	b2db      	uxtb	r3, r3
  412404:	2b02      	cmp	r3, #2
  412406:	d924      	bls.n	412452 <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  412408:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41240c:	f36f 0382 	bfc	r3, #2, #1
  412410:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  412414:	6823      	ldr	r3, [r4, #0]
  412416:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  412418:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  41241a:	f003 031f 	and.w	r3, r3, #31
  41241e:	f362 0304 	bfi	r3, r2, #0, #5
  412422:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  412424:	88a2      	ldrh	r2, [r4, #4]
  412426:	69a3      	ldr	r3, [r4, #24]
  412428:	f362 2394 	bfi	r3, r2, #10, #11
  41242c:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  41242e:	88e2      	ldrh	r2, [r4, #6]
  412430:	0c1b      	lsrs	r3, r3, #16
  412432:	f362 134f 	bfi	r3, r2, #5, #11
  412436:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  412438:	89e2      	ldrh	r2, [r4, #14]
  41243a:	0853      	lsrs	r3, r2, #1
  41243c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  412440:	fb93 f3f2 	sdiv	r3, r3, r2
  412444:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  412446:	23ff      	movs	r3, #255	; 0xff
  412448:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  41244a:	8a23      	ldrh	r3, [r4, #16]
  41244c:	82a3      	strh	r3, [r4, #20]
  41244e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  412452:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412456:	f043 0304 	orr.w	r3, r3, #4
  41245a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  41245e:	e7d9      	b.n	412414 <_lv_img_buf_transform_init+0xcc>
  412460:	66666667 	.word	0x66666667
  412464:	0040d0f3 	.word	0x0040d0f3
  412468:	0040d107 	.word	0x0040d107
  41246c:	00416019 	.word	0x00416019

00412470 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  412470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412474:	b083      	sub	sp, #12
  412476:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  41247a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  41247c:	2b00      	cmp	r3, #0
  41247e:	bf08      	it	eq
  412480:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  412484:	d109      	bne.n	41249a <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  412486:	2300      	movs	r3, #0
  412488:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  41248a:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  41248c:	3901      	subs	r1, #1
  41248e:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  412490:	3a01      	subs	r2, #1
  412492:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  412494:	b003      	add	sp, #12
  412496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41249a:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  41249c:	f9b5 6000 	ldrsh.w	r6, [r5]
  4124a0:	4276      	negs	r6, r6
  4124a2:	fb0e f606 	mul.w	r6, lr, r6
  4124a6:	1236      	asrs	r6, r6, #8
  4124a8:	3e01      	subs	r6, #1
  4124aa:	b2b6      	uxth	r6, r6
  4124ac:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  4124ae:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  4124b2:	4264      	negs	r4, r4
  4124b4:	fb04 f40e 	mul.w	r4, r4, lr
  4124b8:	1224      	asrs	r4, r4, #8
  4124ba:	3c01      	subs	r4, #1
  4124bc:	b2a4      	uxth	r4, r4
  4124be:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  4124c0:	f9b5 3000 	ldrsh.w	r3, [r5]
  4124c4:	1ac9      	subs	r1, r1, r3
  4124c6:	fb01 f10e 	mul.w	r1, r1, lr
  4124ca:	1209      	asrs	r1, r1, #8
  4124cc:	3102      	adds	r1, #2
  4124ce:	b289      	uxth	r1, r1
  4124d0:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  4124d2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  4124d6:	1ad3      	subs	r3, r2, r3
  4124d8:	fb03 f30e 	mul.w	r3, r3, lr
  4124dc:	121b      	asrs	r3, r3, #8
  4124de:	3302      	adds	r3, #2
  4124e0:	b29b      	uxth	r3, r3
  4124e2:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  4124e4:	b967      	cbnz	r7, 412500 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  4124e6:	882a      	ldrh	r2, [r5, #0]
  4124e8:	4416      	add	r6, r2
  4124ea:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  4124ec:	886a      	ldrh	r2, [r5, #2]
  4124ee:	4414      	add	r4, r2
  4124f0:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  4124f2:	882a      	ldrh	r2, [r5, #0]
  4124f4:	4411      	add	r1, r2
  4124f6:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  4124f8:	886a      	ldrh	r2, [r5, #2]
  4124fa:	4413      	add	r3, r2
  4124fc:	80c3      	strh	r3, [r0, #6]
        return;
  4124fe:	e7c9      	b.n	412494 <_lv_img_buf_get_transformed_area+0x24>
  412500:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  412502:	f8df 8150 	ldr.w	r8, [pc, #336]	; 412654 <_lv_img_buf_get_transformed_area+0x1e4>
  412506:	fb88 3007 	smull	r3, r0, r8, r7
  41250a:	17fe      	asrs	r6, r7, #31
  41250c:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  412510:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  412512:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  412516:	f06f 0009 	mvn.w	r0, #9
  41251a:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  41251e:	4630      	mov	r0, r6
  412520:	f8df 9134 	ldr.w	r9, [pc, #308]	; 412658 <_lv_img_buf_get_transformed_area+0x1e8>
  412524:	47c8      	blx	r9
  412526:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  412528:	fa0f f08a 	sxth.w	r0, sl
  41252c:	47c8      	blx	r9
  41252e:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  412530:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  412534:	b200      	sxth	r0, r0
  412536:	47c8      	blx	r9
  412538:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  41253a:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  41253e:	b200      	sxth	r0, r0
  412540:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  412542:	f1c7 030a 	rsb	r3, r7, #10
  412546:	fb0b fb07 	mul.w	fp, fp, r7
  41254a:	9a01      	ldr	r2, [sp, #4]
  41254c:	fb03 bb02 	mla	fp, r3, r2, fp
  412550:	fb88 210b 	smull	r2, r1, r8, fp
  412554:	ea4f 72eb 	mov.w	r2, fp, asr #31
  412558:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  41255c:	fb00 f007 	mul.w	r0, r0, r7
  412560:	fb03 0606 	mla	r6, r3, r6, r0
  412564:	fb88 3806 	smull	r3, r8, r8, r6
  412568:	17f6      	asrs	r6, r6, #31
  41256a:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  41256e:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412570:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  412574:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  412578:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  41257c:	fb00 f608 	mul.w	r6, r0, r8
  412580:	fb03 f102 	mul.w	r1, r3, r2
  412584:	eba6 0c01 	sub.w	ip, r6, r1
  412588:	882f      	ldrh	r7, [r5, #0]
  41258a:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  41258e:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  412592:	fb00 f002 	mul.w	r0, r0, r2
  412596:	fb03 f308 	mul.w	r3, r3, r8
  41259a:	eb00 0e03 	add.w	lr, r0, r3
  41259e:	886d      	ldrh	r5, [r5, #2]
  4125a0:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  4125a4:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  4125a8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4125ac:	fb09 fb08 	mul.w	fp, r9, r8
  4125b0:	ebab 0101 	sub.w	r1, fp, r1
  4125b4:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  4125b8:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4125ba:	fb09 f902 	mul.w	r9, r9, r2
  4125be:	444b      	add	r3, r9
  4125c0:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  4125c4:	b21b      	sxth	r3, r3
    yt = res->y2;
  4125c6:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4125ca:	fb0a f202 	mul.w	r2, sl, r2
  4125ce:	1ab6      	subs	r6, r6, r2
  4125d0:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  4125d4:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4125d6:	fb0a f808 	mul.w	r8, sl, r8
  4125da:	4440      	add	r0, r8
  4125dc:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  4125e0:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4125e2:	ebab 0202 	sub.w	r2, fp, r2
  4125e6:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  4125ea:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4125ec:	44c8      	add	r8, r9
  4125ee:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  4125f2:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  4125f4:	460a      	mov	r2, r1
  4125f6:	42b9      	cmp	r1, r7
  4125f8:	bfa8      	it	ge
  4125fa:	463a      	movge	r2, r7
  4125fc:	46e0      	mov	r8, ip
  4125fe:	45b4      	cmp	ip, r6
  412600:	bfa8      	it	ge
  412602:	46b0      	movge	r8, r6
  412604:	4542      	cmp	r2, r8
  412606:	bfa8      	it	ge
  412608:	4642      	movge	r2, r8
  41260a:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  41260c:	42b9      	cmp	r1, r7
  41260e:	bfb8      	it	lt
  412610:	4639      	movlt	r1, r7
  412612:	45b4      	cmp	ip, r6
  412614:	bfb8      	it	lt
  412616:	46b4      	movlt	ip, r6
  412618:	458c      	cmp	ip, r1
  41261a:	bfb8      	it	lt
  41261c:	468c      	movlt	ip, r1
  41261e:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  412622:	461a      	mov	r2, r3
  412624:	42ab      	cmp	r3, r5
  412626:	bfa8      	it	ge
  412628:	462a      	movge	r2, r5
  41262a:	4671      	mov	r1, lr
  41262c:	4586      	cmp	lr, r0
  41262e:	bfa8      	it	ge
  412630:	4601      	movge	r1, r0
  412632:	428a      	cmp	r2, r1
  412634:	bfa8      	it	ge
  412636:	460a      	movge	r2, r1
  412638:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  41263a:	429d      	cmp	r5, r3
  41263c:	bfb8      	it	lt
  41263e:	461d      	movlt	r5, r3
  412640:	4586      	cmp	lr, r0
  412642:	bfb8      	it	lt
  412644:	4686      	movlt	lr, r0
  412646:	45ae      	cmp	lr, r5
  412648:	bfb8      	it	lt
  41264a:	46ae      	movlt	lr, r5
  41264c:	f8a4 e006 	strh.w	lr, [r4, #6]
  412650:	e720      	b.n	412494 <_lv_img_buf_get_transformed_area+0x24>
  412652:	bf00      	nop
  412654:	66666667 	.word	0x66666667
  412658:	00416019 	.word	0x00416019

0041265c <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  41265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412660:	b089      	sub	sp, #36	; 0x24
  412662:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  412664:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  412666:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  41266a:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  41266c:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  412670:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  412672:	2a6f      	cmp	r2, #111	; 0x6f
  412674:	dc28      	bgt.n	4126c8 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  412676:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  41267a:	2a01      	cmp	r2, #1
  41267c:	d422      	bmi.n	4126c4 <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  41267e:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  412682:	b2f6      	uxtb	r6, r6
  412684:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  412688:	2b6f      	cmp	r3, #111	; 0x6f
  41268a:	dc34      	bgt.n	4126f6 <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  41268c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412690:	2b01      	cmp	r3, #1
  412692:	d42d      	bmi.n	4126f0 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  412694:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  412698:	b2ed      	uxtb	r5, r5
  41269a:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  41269e:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  4126a2:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  4126a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4126aa:	f013 0f04 	tst.w	r3, #4
  4126ae:	f000 808b 	beq.w	4127c8 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  4126b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
  4126b4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4126b8:	fb03 2307 	mla	r3, r3, r7, r2
  4126bc:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  4126be:	a807      	add	r0, sp, #28
  4126c0:	2202      	movs	r2, #2
  4126c2:	e034      	b.n	41272e <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  4126c4:	2700      	movs	r7, #0
  4126c6:	e7dc      	b.n	412682 <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  4126c8:	2a90      	cmp	r2, #144	; 0x90
  4126ca:	dd0e      	ble.n	4126ea <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  4126cc:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  4126d0:	3201      	adds	r2, #1
  4126d2:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  4126d6:	4282      	cmp	r2, r0
  4126d8:	da05      	bge.n	4126e6 <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  4126da:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  4126dc:	b2f6      	uxtb	r6, r6
  4126de:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  4126e2:	b2f6      	uxtb	r6, r6
  4126e4:	e7d0      	b.n	412688 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  4126e6:	2700      	movs	r7, #0
  4126e8:	e7f8      	b.n	4126dc <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  4126ea:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  4126ec:	2700      	movs	r7, #0
  4126ee:	e7cb      	b.n	412688 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  4126f0:	f04f 0800 	mov.w	r8, #0
  4126f4:	e7d0      	b.n	412698 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  4126f6:	2b90      	cmp	r3, #144	; 0x90
  4126f8:	dd10      	ble.n	41271c <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  4126fa:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  4126fe:	3301      	adds	r3, #1
  412700:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  412704:	4293      	cmp	r3, r2
  412706:	da06      	bge.n	412716 <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  412708:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  41270c:	b2ed      	uxtb	r5, r5
  41270e:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  412712:	b2ed      	uxtb	r5, r5
  412714:	e7c3      	b.n	41269e <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412716:	f04f 0800 	mov.w	r8, #0
  41271a:	e7f7      	b.n	41270c <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  41271c:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  41271e:	f04f 0800 	mov.w	r8, #0
  412722:	e7bc      	b.n	41269e <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  412724:	f813 eb01 	ldrb.w	lr, [r3], #1
  412728:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  41272c:	3a01      	subs	r2, #1
    while(len) {
  41272e:	2a00      	cmp	r2, #0
  412730:	d1f8      	bne.n	412724 <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  412732:	6c62      	ldr	r2, [r4, #68]	; 0x44
  412734:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  412738:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  41273c:	fb03 f300 	mul.w	r3, r3, r0
  412740:	fb03 2308 	mla	r3, r3, r8, r2
  412744:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412746:	a806      	add	r0, sp, #24
  412748:	2202      	movs	r2, #2
  41274a:	e004      	b.n	412756 <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  41274c:	f813 eb01 	ldrb.w	lr, [r3], #1
  412750:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412754:	3a01      	subs	r2, #1
    while(len) {
  412756:	2a00      	cmp	r2, #0
  412758:	d1f8      	bne.n	41274c <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  41275a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  41275c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  412760:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  412764:	fb03 f302 	mul.w	r3, r3, r2
  412768:	fb03 f308 	mul.w	r3, r3, r8
  41276c:	fb02 3307 	mla	r3, r2, r7, r3
  412770:	4403      	add	r3, r0
  412772:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  412774:	a805      	add	r0, sp, #20
  412776:	2202      	movs	r2, #2
  412778:	e004      	b.n	412784 <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  41277a:	f813 eb01 	ldrb.w	lr, [r3], #1
  41277e:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412782:	3a01      	subs	r2, #1
    while(len) {
  412784:	2a00      	cmp	r2, #0
  412786:	d1f8      	bne.n	41277a <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  412788:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41278c:	f013 0f02 	tst.w	r3, #2
  412790:	d06a      	beq.n	412868 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  412792:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412794:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412798:	fb03 f207 	mul.w	r2, r3, r7
  41279c:	1887      	adds	r7, r0, r2
  41279e:	441f      	add	r7, r3
  4127a0:	3f01      	subs	r7, #1
  4127a2:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  4127a6:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  4127aa:	fb07 f703 	mul.w	r7, r7, r3
  4127ae:	fb07 f808 	mul.w	r8, r7, r8
  4127b2:	eb00 0708 	add.w	r7, r0, r8
  4127b6:	441f      	add	r7, r3
  4127b8:	3f01      	subs	r7, #1
  4127ba:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  4127bc:	4442      	add	r2, r8
  4127be:	4402      	add	r2, r0
  4127c0:	4413      	add	r3, r2
  4127c2:	3b01      	subs	r3, #1
  4127c4:	5cc8      	ldrb	r0, [r1, r3]
  4127c6:	e052      	b.n	41286e <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  4127c8:	f104 0318 	add.w	r3, r4, #24
  4127cc:	4618      	mov	r0, r3
  4127ce:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  4127d2:	b2bf      	uxth	r7, r7
  4127d4:	4439      	add	r1, r7
  4127d6:	8a23      	ldrh	r3, [r4, #16]
  4127d8:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  4127dc:	b209      	sxth	r1, r1
  4127de:	9001      	str	r0, [sp, #4]
  4127e0:	f8df b300 	ldr.w	fp, [pc, #768]	; 412ae4 <_lv_img_buf_transform_anti_alias+0x488>
  4127e4:	47d8      	blx	fp
  4127e6:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  4127ea:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  4127ee:	fa1f f888 	uxth.w	r8, r8
  4127f2:	4442      	add	r2, r8
  4127f4:	8a23      	ldrh	r3, [r4, #16]
  4127f6:	b212      	sxth	r2, r2
  4127f8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  4127fc:	9801      	ldr	r0, [sp, #4]
  4127fe:	47d8      	blx	fp
  412800:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412804:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412808:	4439      	add	r1, r7
  41280a:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  41280e:	4442      	add	r2, r8
  412810:	8a23      	ldrh	r3, [r4, #16]
  412812:	b212      	sxth	r2, r2
  412814:	b209      	sxth	r1, r1
  412816:	9801      	ldr	r0, [sp, #4]
  412818:	47d8      	blx	fp
  41281a:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  41281e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412822:	f013 0f02 	tst.w	r3, #2
  412826:	d058      	beq.n	4128da <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  412828:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  41282c:	9202      	str	r2, [sp, #8]
  41282e:	fa17 f782 	uxtah	r7, r7, r2
  412832:	b23f      	sxth	r7, r7
  412834:	463b      	mov	r3, r7
  412836:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  41283a:	463a      	mov	r2, r7
  41283c:	9303      	str	r3, [sp, #12]
  41283e:	4619      	mov	r1, r3
  412840:	9801      	ldr	r0, [sp, #4]
  412842:	4ba7      	ldr	r3, [pc, #668]	; (412ae0 <_lv_img_buf_transform_anti_alias+0x484>)
  412844:	4798      	blx	r3
  412846:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  412848:	fa18 f887 	uxtah	r8, r8, r7
  41284c:	fa0f f888 	sxth.w	r8, r8
  412850:	4642      	mov	r2, r8
  412852:	9902      	ldr	r1, [sp, #8]
  412854:	9801      	ldr	r0, [sp, #4]
  412856:	4fa2      	ldr	r7, [pc, #648]	; (412ae0 <_lv_img_buf_transform_anti_alias+0x484>)
  412858:	47b8      	blx	r7
  41285a:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  41285c:	4642      	mov	r2, r8
  41285e:	9903      	ldr	r1, [sp, #12]
  412860:	9801      	ldr	r0, [sp, #4]
  412862:	4b9f      	ldr	r3, [pc, #636]	; (412ae0 <_lv_img_buf_transform_anti_alias+0x484>)
  412864:	4798      	blx	r3
  412866:	e002      	b.n	41286e <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  412868:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  41286a:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  41286c:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  41286e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412872:	f013 0f02 	tst.w	r3, #2
  412876:	d036      	beq.n	4128e6 <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  412878:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  41287c:	fb03 f10b 	mul.w	r1, r3, fp
  412880:	fb06 110a 	mla	r1, r6, sl, r1
  412884:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  412888:	fb03 f300 	mul.w	r3, r3, r0
  41288c:	fb06 3307 	mla	r3, r6, r7, r3
  412890:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  412894:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  412898:	fb02 f203 	mul.w	r2, r2, r3
  41289c:	fb05 2201 	mla	r2, r5, r1, r2
  4128a0:	1212      	asrs	r2, r2, #8
  4128a2:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  4128a4:	2902      	cmp	r1, #2
  4128a6:	bf98      	it	ls
  4128a8:	2b02      	cmpls	r3, #2
  4128aa:	f240 8117 	bls.w	412adc <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  4128ae:	2902      	cmp	r1, #2
  4128b0:	d800      	bhi.n	4128b4 <_lv_img_buf_transform_anti_alias+0x258>
  4128b2:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  4128b4:	2b02      	cmp	r3, #2
  4128b6:	d800      	bhi.n	4128ba <_lv_img_buf_transform_anti_alias+0x25e>
  4128b8:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  4128ba:	f1ba 0f02 	cmp.w	sl, #2
  4128be:	d910      	bls.n	4128e2 <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  4128c0:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  4128c2:	f1bb 0f02 	cmp.w	fp, #2
  4128c6:	d800      	bhi.n	4128ca <_lv_img_buf_transform_anti_alias+0x26e>
  4128c8:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  4128ca:	2f02      	cmp	r7, #2
  4128cc:	d800      	bhi.n	4128d0 <_lv_img_buf_transform_anti_alias+0x274>
  4128ce:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  4128d0:	2802      	cmp	r0, #2
  4128d2:	d962      	bls.n	41299a <_lv_img_buf_transform_anti_alias+0x33e>
  4128d4:	4633      	mov	r3, r6
  4128d6:	4616      	mov	r6, r2
  4128d8:	e008      	b.n	4128ec <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  4128da:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  4128dc:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  4128de:	4683      	mov	fp, r0
  4128e0:	e7c5      	b.n	41286e <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  4128e2:	2200      	movs	r2, #0
  4128e4:	e7ed      	b.n	4128c2 <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  4128e6:	23ff      	movs	r3, #255	; 0xff
  4128e8:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  4128ea:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  4128ec:	2e00      	cmp	r6, #0
  4128ee:	d157      	bne.n	4129a0 <_lv_img_buf_transform_anti_alias+0x344>
  4128f0:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  4128f4:	2b00      	cmp	r3, #0
  4128f6:	f040 809c 	bne.w	412a32 <_lv_img_buf_transform_anti_alias+0x3d6>
  4128fa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  4128fe:	2d00      	cmp	r5, #0
  412900:	f000 80e5 	beq.w	412ace <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412904:	2dff      	cmp	r5, #255	; 0xff
  412906:	f000 80e5 	beq.w	412ad4 <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41290a:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  41290e:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  412912:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  412916:	fb00 f101 	mul.w	r1, r0, r1
  41291a:	fb05 1202 	mla	r2, r5, r2, r1
  41291e:	3280      	adds	r2, #128	; 0x80
  412920:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412924:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412928:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  41292c:	f04f 0100 	mov.w	r1, #0
  412930:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412934:	f009 0607 	and.w	r6, r9, #7
  412938:	f3c9 3242 	ubfx	r2, r9, #13, #3
  41293c:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  412940:	f003 0707 	and.w	r7, r3, #7
  412944:	f3c3 3642 	ubfx	r6, r3, #13, #3
  412948:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  41294c:	fb06 f600 	mul.w	r6, r6, r0
  412950:	fb02 6205 	mla	r2, r2, r5, r6
  412954:	3280      	adds	r2, #128	; 0x80
  412956:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  41295a:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  41295e:	f3c2 6682 	ubfx	r6, r2, #26, #3
  412962:	f366 0102 	bfi	r1, r6, #0, #3
  412966:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  41296a:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41296e:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412972:	f3c3 2304 	ubfx	r3, r3, #8, #5
  412976:	fb03 f000 	mul.w	r0, r3, r0
  41297a:	fb09 0505 	mla	r5, r9, r5, r0
  41297e:	3580      	adds	r5, #128	; 0x80
  412980:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  412984:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  412988:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  41298c:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  412990:	82a1      	strh	r1, [r4, #20]

    return true;
  412992:	2001      	movs	r0, #1
}
  412994:	b009      	add	sp, #36	; 0x24
  412996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41299a:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  41299c:	23ff      	movs	r3, #255	; 0xff
  41299e:	e7a5      	b.n	4128ec <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  4129a0:	2eff      	cmp	r6, #255	; 0xff
  4129a2:	d0a7      	beq.n	4128f4 <_lv_img_buf_transform_anti_alias+0x298>
  4129a4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4129a8:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  4129ac:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  4129b0:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  4129b4:	fb07 f101 	mul.w	r1, r7, r1
  4129b8:	fb06 1202 	mla	r2, r6, r2, r1
  4129bc:	3280      	adds	r2, #128	; 0x80
  4129be:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  4129c2:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  4129c6:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4129ca:	f04f 0100 	mov.w	r1, #0
  4129ce:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4129d2:	f009 0e07 	and.w	lr, r9, #7
  4129d6:	f3c9 3242 	ubfx	r2, r9, #13, #3
  4129da:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  4129de:	f000 0c07 	and.w	ip, r0, #7
  4129e2:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  4129e6:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  4129ea:	fb0e fe07 	mul.w	lr, lr, r7
  4129ee:	fb02 e206 	mla	r2, r2, r6, lr
  4129f2:	3280      	adds	r2, #128	; 0x80
  4129f4:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  4129f8:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  4129fc:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412a00:	f36e 0102 	bfi	r1, lr, #0, #3
  412a04:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412a08:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412a0c:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412a10:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412a14:	fb00 f707 	mul.w	r7, r0, r7
  412a18:	fb09 7606 	mla	r6, r9, r6, r7
  412a1c:	3680      	adds	r6, #128	; 0x80
  412a1e:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  412a22:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  412a26:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  412a2a:	f366 210c 	bfi	r1, r6, #8, #5
  412a2e:	4689      	mov	r9, r1
  412a30:	e760      	b.n	4128f4 <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  412a32:	2bff      	cmp	r3, #255	; 0xff
  412a34:	d048      	beq.n	412ac8 <_lv_img_buf_transform_anti_alias+0x46c>
  412a36:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  412a3a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412a3e:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  412a42:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  412a46:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  412a4a:	fb07 f101 	mul.w	r1, r7, r1
  412a4e:	fb03 1202 	mla	r2, r3, r2, r1
  412a52:	3280      	adds	r2, #128	; 0x80
  412a54:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412a58:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412a5c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412a60:	f04f 0100 	mov.w	r1, #0
  412a64:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412a68:	f006 0e07 	and.w	lr, r6, #7
  412a6c:	f3c6 3242 	ubfx	r2, r6, #13, #3
  412a70:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  412a74:	f000 0c07 	and.w	ip, r0, #7
  412a78:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412a7c:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412a80:	fb0e fe07 	mul.w	lr, lr, r7
  412a84:	fb02 e203 	mla	r2, r2, r3, lr
  412a88:	3280      	adds	r2, #128	; 0x80
  412a8a:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412a8e:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412a92:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412a96:	f36e 0102 	bfi	r1, lr, #0, #3
  412a9a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412a9e:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412aa2:	f3c6 2604 	ubfx	r6, r6, #8, #5
  412aa6:	f3c0 2004 	ubfx	r0, r0, #8, #5
  412aaa:	fb00 f707 	mul.w	r7, r0, r7
  412aae:	fb06 7303 	mla	r3, r6, r3, r7
  412ab2:	3380      	adds	r3, #128	; 0x80
  412ab4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  412ab8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  412abc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  412ac0:	f363 210c 	bfi	r1, r3, #8, #5
  412ac4:	460b      	mov	r3, r1
  412ac6:	e71a      	b.n	4128fe <_lv_img_buf_transform_anti_alias+0x2a2>
  412ac8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  412acc:	e717      	b.n	4128fe <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412ace:	82a3      	strh	r3, [r4, #20]
    return true;
  412ad0:	2001      	movs	r0, #1
  412ad2:	e75f      	b.n	412994 <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  412ad4:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  412ad8:	2001      	movs	r0, #1
  412ada:	e75b      	b.n	412994 <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  412adc:	2000      	movs	r0, #0
  412ade:	e759      	b.n	412994 <_lv_img_buf_transform_anti_alias+0x338>
  412ae0:	0041224d 	.word	0x0041224d
  412ae4:	00412129 	.word	0x00412129

00412ae8 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  412ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  412aec:	4b4c      	ldr	r3, [pc, #304]	; (412c20 <_lv_img_cache_open+0x138>)
  412aee:	881f      	ldrh	r7, [r3, #0]
  412af0:	2f00      	cmp	r7, #0
  412af2:	f000 8091 	beq.w	412c18 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412af6:	4b4b      	ldr	r3, [pc, #300]	; (412c24 <_lv_img_cache_open+0x13c>)
  412af8:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412afa:	2300      	movs	r3, #0
  412afc:	e001      	b.n	412b02 <_lv_img_cache_open+0x1a>
  412afe:	3301      	adds	r3, #1
  412b00:	b29b      	uxth	r3, r3
  412b02:	42bb      	cmp	r3, r7
  412b04:	d20a      	bcs.n	412b1c <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  412b06:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  412b0a:	00ac      	lsls	r4, r5, #2
  412b0c:	4434      	add	r4, r6
  412b0e:	6a25      	ldr	r5, [r4, #32]
  412b10:	4a45      	ldr	r2, [pc, #276]	; (412c28 <_lv_img_cache_open+0x140>)
  412b12:	4295      	cmp	r5, r2
  412b14:	dbf3      	blt.n	412afe <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  412b16:	3d01      	subs	r5, #1
  412b18:	6225      	str	r5, [r4, #32]
  412b1a:	e7f0      	b.n	412afe <_lv_img_cache_open+0x16>
  412b1c:	4688      	mov	r8, r1
  412b1e:	4607      	mov	r7, r0
  412b20:	2400      	movs	r4, #0
  412b22:	e00c      	b.n	412b3e <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412b24:	892a      	ldrh	r2, [r5, #8]
  412b26:	fa1f f388 	uxth.w	r3, r8
  412b2a:	429a      	cmp	r2, r3
  412b2c:	d020      	beq.n	412b70 <_lv_img_cache_open+0x88>
        bool match = false;
  412b2e:	2300      	movs	r3, #0
  412b30:	e002      	b.n	412b38 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  412b32:	2801      	cmp	r0, #1
  412b34:	d015      	beq.n	412b62 <_lv_img_cache_open+0x7a>
        bool match = false;
  412b36:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  412b38:	b9f3      	cbnz	r3, 412b78 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  412b3a:	3401      	adds	r4, #1
  412b3c:	b2a4      	uxth	r4, r4
  412b3e:	4b38      	ldr	r3, [pc, #224]	; (412c20 <_lv_img_cache_open+0x138>)
  412b40:	881b      	ldrh	r3, [r3, #0]
  412b42:	429c      	cmp	r4, r3
  412b44:	d223      	bcs.n	412b8e <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  412b46:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412b4a:	009d      	lsls	r5, r3, #2
  412b4c:	4435      	add	r5, r6
  412b4e:	6868      	ldr	r0, [r5, #4]
  412b50:	4b36      	ldr	r3, [pc, #216]	; (412c2c <_lv_img_cache_open+0x144>)
  412b52:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  412b54:	2800      	cmp	r0, #0
  412b56:	d1ec      	bne.n	412b32 <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412b58:	686b      	ldr	r3, [r5, #4]
  412b5a:	42bb      	cmp	r3, r7
  412b5c:	d0e2      	beq.n	412b24 <_lv_img_cache_open+0x3c>
        bool match = false;
  412b5e:	2300      	movs	r3, #0
  412b60:	e7ea      	b.n	412b38 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  412b62:	4639      	mov	r1, r7
  412b64:	6868      	ldr	r0, [r5, #4]
  412b66:	4b32      	ldr	r3, [pc, #200]	; (412c30 <_lv_img_cache_open+0x148>)
  412b68:	4798      	blx	r3
  412b6a:	b118      	cbz	r0, 412b74 <_lv_img_cache_open+0x8c>
        bool match = false;
  412b6c:	2300      	movs	r3, #0
  412b6e:	e7e3      	b.n	412b38 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412b70:	2301      	movs	r3, #1
  412b72:	e7e1      	b.n	412b38 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  412b74:	2301      	movs	r3, #1
  412b76:	e7df      	b.n	412b38 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  412b78:	696b      	ldr	r3, [r5, #20]
  412b7a:	6a2a      	ldr	r2, [r5, #32]
  412b7c:	4413      	add	r3, r2
  412b7e:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  412b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  412b84:	dd04      	ble.n	412b90 <_lv_img_cache_open+0xa8>
  412b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  412b8a:	622b      	str	r3, [r5, #32]
  412b8c:	e000      	b.n	412b90 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  412b8e:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  412b90:	b115      	cbz	r5, 412b98 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  412b92:	4628      	mov	r0, r5
  412b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412b98:	4634      	mov	r4, r6
  412b9a:	2301      	movs	r3, #1
  412b9c:	e001      	b.n	412ba2 <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  412b9e:	3301      	adds	r3, #1
  412ba0:	b29b      	uxth	r3, r3
  412ba2:	4a1f      	ldr	r2, [pc, #124]	; (412c20 <_lv_img_cache_open+0x138>)
  412ba4:	8812      	ldrh	r2, [r2, #0]
  412ba6:	4293      	cmp	r3, r2
  412ba8:	d209      	bcs.n	412bbe <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  412baa:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  412bae:	008a      	lsls	r2, r1, #2
  412bb0:	4432      	add	r2, r6
  412bb2:	6a10      	ldr	r0, [r2, #32]
  412bb4:	6a21      	ldr	r1, [r4, #32]
  412bb6:	4288      	cmp	r0, r1
  412bb8:	daf1      	bge.n	412b9e <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  412bba:	4614      	mov	r4, r2
  412bbc:	e7ef      	b.n	412b9e <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  412bbe:	6863      	ldr	r3, [r4, #4]
  412bc0:	b113      	cbz	r3, 412bc8 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  412bc2:	4620      	mov	r0, r4
  412bc4:	4b1b      	ldr	r3, [pc, #108]	; (412c34 <_lv_img_cache_open+0x14c>)
  412bc6:	4798      	blx	r3
    t_start                          = lv_tick_get();
  412bc8:	4b1b      	ldr	r3, [pc, #108]	; (412c38 <_lv_img_cache_open+0x150>)
  412bca:	4798      	blx	r3
  412bcc:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  412bce:	2300      	movs	r3, #0
  412bd0:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  412bd2:	4642      	mov	r2, r8
  412bd4:	4639      	mov	r1, r7
  412bd6:	4620      	mov	r0, r4
  412bd8:	4b18      	ldr	r3, [pc, #96]	; (412c3c <_lv_img_cache_open+0x154>)
  412bda:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  412bdc:	b148      	cbz	r0, 412bf2 <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  412bde:	2300      	movs	r3, #0
  412be0:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  412be2:	6963      	ldr	r3, [r4, #20]
  412be4:	b19b      	cbz	r3, 412c0e <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  412be6:	6963      	ldr	r3, [r4, #20]
  412be8:	b9c3      	cbnz	r3, 412c1c <_lv_img_cache_open+0x134>
  412bea:	2301      	movs	r3, #1
  412bec:	6163      	str	r3, [r4, #20]
    return cached_src;
  412bee:	4625      	mov	r5, r4
  412bf0:	e7cf      	b.n	412b92 <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  412bf2:	4620      	mov	r0, r4
  412bf4:	4b0f      	ldr	r3, [pc, #60]	; (412c34 <_lv_img_cache_open+0x14c>)
  412bf6:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412bf8:	2120      	movs	r1, #32
  412bfa:	4620      	mov	r0, r4
  412bfc:	4e10      	ldr	r6, [pc, #64]	; (412c40 <_lv_img_cache_open+0x158>)
  412bfe:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  412c00:	2124      	movs	r1, #36	; 0x24
  412c02:	4620      	mov	r0, r4
  412c04:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  412c06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  412c0a:	6223      	str	r3, [r4, #32]
        return NULL;
  412c0c:	e7c1      	b.n	412b92 <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  412c0e:	4630      	mov	r0, r6
  412c10:	4b0c      	ldr	r3, [pc, #48]	; (412c44 <_lv_img_cache_open+0x15c>)
  412c12:	4798      	blx	r3
  412c14:	6160      	str	r0, [r4, #20]
  412c16:	e7e6      	b.n	412be6 <_lv_img_cache_open+0xfe>
        return NULL;
  412c18:	2500      	movs	r5, #0
  412c1a:	e7ba      	b.n	412b92 <_lv_img_cache_open+0xaa>
    return cached_src;
  412c1c:	4625      	mov	r5, r4
  412c1e:	e7b8      	b.n	412b92 <_lv_img_cache_open+0xaa>
  412c20:	2040c72e 	.word	0x2040c72e
  412c24:	2043a280 	.word	0x2043a280
  412c28:	80000002 	.word	0x80000002
  412c2c:	0040d385 	.word	0x0040d385
  412c30:	004237c9 	.word	0x004237c9
  412c34:	00413635 	.word	0x00413635
  412c38:	00414d05 	.word	0x00414d05
  412c3c:	00413575 	.word	0x00413575
  412c40:	004166bd 	.word	0x004166bd
  412c44:	00414d21 	.word	0x00414d21

00412c48 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  412c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412c4c:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412c4e:	4b11      	ldr	r3, [pc, #68]	; (412c94 <lv_img_cache_invalidate_src+0x4c>)
  412c50:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412c52:	2400      	movs	r4, #0
  412c54:	e00d      	b.n	412c72 <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  412c56:	b113      	cbz	r3, 412c5e <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  412c58:	4628      	mov	r0, r5
  412c5a:	4b0f      	ldr	r3, [pc, #60]	; (412c98 <lv_img_cache_invalidate_src+0x50>)
  412c5c:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412c5e:	2120      	movs	r1, #32
  412c60:	4628      	mov	r0, r5
  412c62:	f8df 803c 	ldr.w	r8, [pc, #60]	; 412ca0 <lv_img_cache_invalidate_src+0x58>
  412c66:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  412c68:	2124      	movs	r1, #36	; 0x24
  412c6a:	4628      	mov	r0, r5
  412c6c:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  412c6e:	3401      	adds	r4, #1
  412c70:	b2a4      	uxth	r4, r4
  412c72:	4b0a      	ldr	r3, [pc, #40]	; (412c9c <lv_img_cache_invalidate_src+0x54>)
  412c74:	881b      	ldrh	r3, [r3, #0]
  412c76:	429c      	cmp	r4, r3
  412c78:	d209      	bcs.n	412c8e <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  412c7a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412c7e:	0098      	lsls	r0, r3, #2
  412c80:	183d      	adds	r5, r7, r0
  412c82:	686b      	ldr	r3, [r5, #4]
  412c84:	42b3      	cmp	r3, r6
  412c86:	d0e6      	beq.n	412c56 <lv_img_cache_invalidate_src+0xe>
  412c88:	2e00      	cmp	r6, #0
  412c8a:	d1f0      	bne.n	412c6e <lv_img_cache_invalidate_src+0x26>
  412c8c:	e7e3      	b.n	412c56 <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  412c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412c92:	bf00      	nop
  412c94:	2043a280 	.word	0x2043a280
  412c98:	00413635 	.word	0x00413635
  412c9c:	2040c72e 	.word	0x2040c72e
  412ca0:	004166bd 	.word	0x004166bd

00412ca4 <lv_img_cache_set_size>:
{
  412ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412ca6:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  412ca8:	4b1c      	ldr	r3, [pc, #112]	; (412d1c <lv_img_cache_set_size+0x78>)
  412caa:	681b      	ldr	r3, [r3, #0]
  412cac:	b133      	cbz	r3, 412cbc <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  412cae:	2000      	movs	r0, #0
  412cb0:	4b1b      	ldr	r3, [pc, #108]	; (412d20 <lv_img_cache_set_size+0x7c>)
  412cb2:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  412cb4:	4b19      	ldr	r3, [pc, #100]	; (412d1c <lv_img_cache_set_size+0x78>)
  412cb6:	6818      	ldr	r0, [r3, #0]
  412cb8:	4b1a      	ldr	r3, [pc, #104]	; (412d24 <lv_img_cache_set_size+0x80>)
  412cba:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  412cbc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412cc0:	0098      	lsls	r0, r3, #2
  412cc2:	4b19      	ldr	r3, [pc, #100]	; (412d28 <lv_img_cache_set_size+0x84>)
  412cc4:	4798      	blx	r3
  412cc6:	4b15      	ldr	r3, [pc, #84]	; (412d1c <lv_img_cache_set_size+0x78>)
  412cc8:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  412cca:	4b18      	ldr	r3, [pc, #96]	; (412d2c <lv_img_cache_set_size+0x88>)
  412ccc:	4798      	blx	r3
  412cce:	b130      	cbz	r0, 412cde <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  412cd0:	4b12      	ldr	r3, [pc, #72]	; (412d1c <lv_img_cache_set_size+0x78>)
  412cd2:	681b      	ldr	r3, [r3, #0]
  412cd4:	b153      	cbz	r3, 412cec <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  412cd6:	4b16      	ldr	r3, [pc, #88]	; (412d30 <lv_img_cache_set_size+0x8c>)
  412cd8:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  412cda:	2400      	movs	r4, #0
  412cdc:	e019      	b.n	412d12 <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  412cde:	4b0f      	ldr	r3, [pc, #60]	; (412d1c <lv_img_cache_set_size+0x78>)
  412ce0:	681a      	ldr	r2, [r3, #0]
  412ce2:	2300      	movs	r3, #0
  412ce4:	4813      	ldr	r0, [pc, #76]	; (412d34 <lv_img_cache_set_size+0x90>)
  412ce6:	4914      	ldr	r1, [pc, #80]	; (412d38 <lv_img_cache_set_size+0x94>)
  412ce8:	4788      	blx	r1
  412cea:	e7fe      	b.n	412cea <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  412cec:	2200      	movs	r2, #0
  412cee:	4b10      	ldr	r3, [pc, #64]	; (412d30 <lv_img_cache_set_size+0x8c>)
  412cf0:	801a      	strh	r2, [r3, #0]
        return;
  412cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412cf4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412cf8:	009d      	lsls	r5, r3, #2
  412cfa:	4f08      	ldr	r7, [pc, #32]	; (412d1c <lv_img_cache_set_size+0x78>)
  412cfc:	6838      	ldr	r0, [r7, #0]
  412cfe:	2120      	movs	r1, #32
  412d00:	4428      	add	r0, r5
  412d02:	4e0e      	ldr	r6, [pc, #56]	; (412d3c <lv_img_cache_set_size+0x98>)
  412d04:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  412d06:	6838      	ldr	r0, [r7, #0]
  412d08:	2124      	movs	r1, #36	; 0x24
  412d0a:	4428      	add	r0, r5
  412d0c:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  412d0e:	3401      	adds	r4, #1
  412d10:	b2a4      	uxth	r4, r4
  412d12:	4b07      	ldr	r3, [pc, #28]	; (412d30 <lv_img_cache_set_size+0x8c>)
  412d14:	881b      	ldrh	r3, [r3, #0]
  412d16:	429c      	cmp	r4, r3
  412d18:	d3ec      	bcc.n	412cf4 <lv_img_cache_set_size+0x50>
  412d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412d1c:	2043a280 	.word	0x2043a280
  412d20:	00412c49 	.word	0x00412c49
  412d24:	0041624d 	.word	0x0041624d
  412d28:	00416189 	.word	0x00416189
  412d2c:	00415a81 	.word	0x00415a81
  412d30:	2040c72e 	.word	0x2040c72e
  412d34:	00428c94 	.word	0x00428c94
  412d38:	00415a8d 	.word	0x00415a8d
  412d3c:	004166bd 	.word	0x004166bd

00412d40 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  412d40:	b530      	push	{r4, r5, lr}
  412d42:	b085      	sub	sp, #20
  412d44:	460c      	mov	r4, r1
  412d46:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  412d48:	4608      	mov	r0, r1
  412d4a:	4b2b      	ldr	r3, [pc, #172]	; (412df8 <lv_img_decoder_built_in_info+0xb8>)
  412d4c:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  412d4e:	b9d8      	cbnz	r0, 412d88 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  412d50:	7823      	ldrb	r3, [r4, #0]
  412d52:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412d56:	3b04      	subs	r3, #4
  412d58:	b2db      	uxtb	r3, r3
  412d5a:	2b0a      	cmp	r3, #10
  412d5c:	d849      	bhi.n	412df2 <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  412d5e:	6823      	ldr	r3, [r4, #0]
  412d60:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412d64:	682a      	ldr	r2, [r5, #0]
  412d66:	f363 2294 	bfi	r2, r3, #10, #11
  412d6a:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  412d6c:	8863      	ldrh	r3, [r4, #2]
  412d6e:	f3c3 134a 	ubfx	r3, r3, #5, #11
  412d72:	886a      	ldrh	r2, [r5, #2]
  412d74:	f363 124f 	bfi	r2, r3, #5, #11
  412d78:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  412d7a:	7822      	ldrb	r2, [r4, #0]
  412d7c:	782b      	ldrb	r3, [r5, #0]
  412d7e:	f362 0304 	bfi	r3, r2, #0, #5
  412d82:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  412d84:	2001      	movs	r0, #1
  412d86:	e004      	b.n	412d92 <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  412d88:	2801      	cmp	r0, #1
  412d8a:	d004      	beq.n	412d96 <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  412d8c:	2802      	cmp	r0, #2
  412d8e:	d022      	beq.n	412dd6 <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  412d90:	2000      	movs	r0, #0
}
  412d92:	b005      	add	sp, #20
  412d94:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  412d96:	2202      	movs	r2, #2
  412d98:	4621      	mov	r1, r4
  412d9a:	a802      	add	r0, sp, #8
  412d9c:	4b17      	ldr	r3, [pc, #92]	; (412dfc <lv_img_decoder_built_in_info+0xbc>)
  412d9e:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  412da0:	b148      	cbz	r0, 412db6 <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412da2:	782b      	ldrb	r3, [r5, #0]
  412da4:	f003 031f 	and.w	r3, r3, #31
  412da8:	331c      	adds	r3, #28
  412daa:	f003 031f 	and.w	r3, r3, #31
  412dae:	2b0a      	cmp	r3, #10
  412db0:	d80f      	bhi.n	412dd2 <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  412db2:	2001      	movs	r0, #1
  412db4:	e7ed      	b.n	412d92 <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  412db6:	ab01      	add	r3, sp, #4
  412db8:	2204      	movs	r2, #4
  412dba:	4629      	mov	r1, r5
  412dbc:	a802      	add	r0, sp, #8
  412dbe:	4c10      	ldr	r4, [pc, #64]	; (412e00 <lv_img_decoder_built_in_info+0xc0>)
  412dc0:	47a0      	blx	r4
  412dc2:	4604      	mov	r4, r0
            lv_fs_close(&file);
  412dc4:	a802      	add	r0, sp, #8
  412dc6:	4b0f      	ldr	r3, [pc, #60]	; (412e04 <lv_img_decoder_built_in_info+0xc4>)
  412dc8:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  412dca:	b914      	cbnz	r4, 412dd2 <lv_img_decoder_built_in_info+0x92>
  412dcc:	9b01      	ldr	r3, [sp, #4]
  412dce:	2b04      	cmp	r3, #4
  412dd0:	d0e7      	beq.n	412da2 <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  412dd2:	2000      	movs	r0, #0
  412dd4:	e7dd      	b.n	412d92 <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  412dd6:	682b      	ldr	r3, [r5, #0]
  412dd8:	2001      	movs	r0, #1
  412dda:	f360 2394 	bfi	r3, r0, #10, #11
  412dde:	602b      	str	r3, [r5, #0]
        header->h = 1;
  412de0:	0c1a      	lsrs	r2, r3, #16
  412de2:	f360 124f 	bfi	r2, r0, #5, #11
  412de6:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  412de8:	220b      	movs	r2, #11
  412dea:	f362 0304 	bfi	r3, r2, #0, #5
  412dee:	702b      	strb	r3, [r5, #0]
  412df0:	e7cf      	b.n	412d92 <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412df2:	2000      	movs	r0, #0
  412df4:	e7cd      	b.n	412d92 <lv_img_decoder_built_in_info+0x52>
  412df6:	bf00      	nop
  412df8:	0040d385 	.word	0x0040d385
  412dfc:	00415bd9 	.word	0x00415bd9
  412e00:	00415b55 	.word	0x00415b55
  412e04:	00415b25 	.word	0x00415b25

00412e08 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  412e08:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412e0a:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  412e0c:	b1a4      	cbz	r4, 412e38 <lv_img_decoder_built_in_close+0x30>
  412e0e:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  412e10:	6820      	ldr	r0, [r4, #0]
  412e12:	b120      	cbz	r0, 412e1e <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  412e14:	4b09      	ldr	r3, [pc, #36]	; (412e3c <lv_img_decoder_built_in_close+0x34>)
  412e16:	4798      	blx	r3
            lv_mem_free(user_data->f);
  412e18:	6820      	ldr	r0, [r4, #0]
  412e1a:	4b09      	ldr	r3, [pc, #36]	; (412e40 <lv_img_decoder_built_in_close+0x38>)
  412e1c:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  412e1e:	6860      	ldr	r0, [r4, #4]
  412e20:	b108      	cbz	r0, 412e26 <lv_img_decoder_built_in_close+0x1e>
  412e22:	4b07      	ldr	r3, [pc, #28]	; (412e40 <lv_img_decoder_built_in_close+0x38>)
  412e24:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  412e26:	68a0      	ldr	r0, [r4, #8]
  412e28:	b108      	cbz	r0, 412e2e <lv_img_decoder_built_in_close+0x26>
  412e2a:	4b05      	ldr	r3, [pc, #20]	; (412e40 <lv_img_decoder_built_in_close+0x38>)
  412e2c:	4798      	blx	r3

        lv_mem_free(user_data);
  412e2e:	4620      	mov	r0, r4
  412e30:	4b03      	ldr	r3, [pc, #12]	; (412e40 <lv_img_decoder_built_in_close+0x38>)
  412e32:	4798      	blx	r3

        dsc->user_data = NULL;
  412e34:	2300      	movs	r3, #0
  412e36:	61eb      	str	r3, [r5, #28]
  412e38:	bd38      	pop	{r3, r4, r5, pc}
  412e3a:	bf00      	nop
  412e3c:	00415b25 	.word	0x00415b25
  412e40:	0041624d 	.word	0x0041624d

00412e44 <lv_img_decoder_built_in_open>:
{
  412e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412e48:	b082      	sub	sp, #8
  412e4a:	4607      	mov	r7, r0
  412e4c:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  412e4e:	7a8b      	ldrb	r3, [r1, #10]
  412e50:	2b01      	cmp	r3, #1
  412e52:	d016      	beq.n	412e82 <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412e54:	b923      	cbnz	r3, 412e60 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  412e56:	684b      	ldr	r3, [r1, #4]
  412e58:	689b      	ldr	r3, [r3, #8]
  412e5a:	2b00      	cmp	r3, #0
  412e5c:	f000 810b 	beq.w	413076 <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  412e60:	7b20      	ldrb	r0, [r4, #12]
  412e62:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  412e66:	1f03      	subs	r3, r0, #4
  412e68:	b2db      	uxtb	r3, r3
  412e6a:	2b02      	cmp	r3, #2
  412e6c:	d851      	bhi.n	412f12 <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412e6e:	7aa3      	ldrb	r3, [r4, #10]
  412e70:	2b00      	cmp	r3, #0
  412e72:	d14a      	bne.n	412f0a <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  412e74:	6863      	ldr	r3, [r4, #4]
  412e76:	689b      	ldr	r3, [r3, #8]
  412e78:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412e7a:	2001      	movs	r0, #1
}
  412e7c:	b002      	add	sp, #8
  412e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  412e82:	6848      	ldr	r0, [r1, #4]
  412e84:	4b7d      	ldr	r3, [pc, #500]	; (41307c <lv_img_decoder_built_in_open+0x238>)
  412e86:	4798      	blx	r3
  412e88:	497d      	ldr	r1, [pc, #500]	; (413080 <lv_img_decoder_built_in_open+0x23c>)
  412e8a:	4b7e      	ldr	r3, [pc, #504]	; (413084 <lv_img_decoder_built_in_open+0x240>)
  412e8c:	4798      	blx	r3
  412e8e:	b9a8      	cbnz	r0, 412ebc <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  412e90:	2202      	movs	r2, #2
  412e92:	6861      	ldr	r1, [r4, #4]
  412e94:	4668      	mov	r0, sp
  412e96:	4b7c      	ldr	r3, [pc, #496]	; (413088 <lv_img_decoder_built_in_open+0x244>)
  412e98:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  412e9a:	b978      	cbnz	r0, 412ebc <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  412e9c:	69e3      	ldr	r3, [r4, #28]
  412e9e:	b17b      	cbz	r3, 412ec0 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412ea0:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  412ea2:	2008      	movs	r0, #8
  412ea4:	4b79      	ldr	r3, [pc, #484]	; (41308c <lv_img_decoder_built_in_open+0x248>)
  412ea6:	4798      	blx	r3
  412ea8:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  412eaa:	4b79      	ldr	r3, [pc, #484]	; (413090 <lv_img_decoder_built_in_open+0x24c>)
  412eac:	4798      	blx	r3
  412eae:	b1d8      	cbz	r0, 412ee8 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  412eb0:	682b      	ldr	r3, [r5, #0]
  412eb2:	bb3b      	cbnz	r3, 412f04 <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  412eb4:	4621      	mov	r1, r4
  412eb6:	4638      	mov	r0, r7
  412eb8:	4b76      	ldr	r3, [pc, #472]	; (413094 <lv_img_decoder_built_in_open+0x250>)
  412eba:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  412ebc:	2000      	movs	r0, #0
  412ebe:	e7dd      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  412ec0:	200c      	movs	r0, #12
  412ec2:	4b72      	ldr	r3, [pc, #456]	; (41308c <lv_img_decoder_built_in_open+0x248>)
  412ec4:	4798      	blx	r3
  412ec6:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412ec8:	4b71      	ldr	r3, [pc, #452]	; (413090 <lv_img_decoder_built_in_open+0x24c>)
  412eca:	4798      	blx	r3
  412ecc:	b928      	cbnz	r0, 412eda <lv_img_decoder_built_in_open+0x96>
  412ece:	69e2      	ldr	r2, [r4, #28]
  412ed0:	2300      	movs	r3, #0
  412ed2:	4871      	ldr	r0, [pc, #452]	; (413098 <lv_img_decoder_built_in_open+0x254>)
  412ed4:	4971      	ldr	r1, [pc, #452]	; (41309c <lv_img_decoder_built_in_open+0x258>)
  412ed6:	4788      	blx	r1
  412ed8:	e7fe      	b.n	412ed8 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  412eda:	69e0      	ldr	r0, [r4, #28]
  412edc:	2800      	cmp	r0, #0
  412ede:	d0ed      	beq.n	412ebc <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412ee0:	210c      	movs	r1, #12
  412ee2:	4b6f      	ldr	r3, [pc, #444]	; (4130a0 <lv_img_decoder_built_in_open+0x25c>)
  412ee4:	4798      	blx	r3
  412ee6:	e7db      	b.n	412ea0 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  412ee8:	682a      	ldr	r2, [r5, #0]
  412eea:	2300      	movs	r3, #0
  412eec:	486a      	ldr	r0, [pc, #424]	; (413098 <lv_img_decoder_built_in_open+0x254>)
  412eee:	496b      	ldr	r1, [pc, #428]	; (41309c <lv_img_decoder_built_in_open+0x258>)
  412ef0:	4788      	blx	r1
  412ef2:	e7fe      	b.n	412ef2 <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  412ef4:	f811 0b01 	ldrb.w	r0, [r1], #1
  412ef8:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  412efc:	3a01      	subs	r2, #1
    while(len) {
  412efe:	2a00      	cmp	r2, #0
  412f00:	d1f8      	bne.n	412ef4 <lv_img_decoder_built_in_open+0xb0>
  412f02:	e7ad      	b.n	412e60 <lv_img_decoder_built_in_open+0x1c>
  412f04:	4669      	mov	r1, sp
  412f06:	2208      	movs	r2, #8
  412f08:	e7f9      	b.n	412efe <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  412f0a:	2300      	movs	r3, #0
  412f0c:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412f0e:	2001      	movs	r0, #1
  412f10:	e7b4      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  412f12:	1fc3      	subs	r3, r0, #7
  412f14:	b2db      	uxtb	r3, r3
  412f16:	2b03      	cmp	r3, #3
  412f18:	d909      	bls.n	412f2e <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  412f1a:	f1a0 030b 	sub.w	r3, r0, #11
  412f1e:	b2db      	uxtb	r3, r3
  412f20:	2b03      	cmp	r3, #3
  412f22:	f200 80a2 	bhi.w	41306a <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  412f26:	2300      	movs	r3, #0
  412f28:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  412f2a:	2001      	movs	r0, #1
  412f2c:	e7a6      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  412f2e:	4b5d      	ldr	r3, [pc, #372]	; (4130a4 <lv_img_decoder_built_in_open+0x260>)
  412f30:	4798      	blx	r3
  412f32:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  412f34:	2601      	movs	r6, #1
  412f36:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  412f38:	69e3      	ldr	r3, [r4, #28]
  412f3a:	b17b      	cbz	r3, 412f5c <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412f3c:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  412f3e:	2002      	movs	r0, #2
  412f40:	fa00 f00a 	lsl.w	r0, r0, sl
  412f44:	4b51      	ldr	r3, [pc, #324]	; (41308c <lv_img_decoder_built_in_open+0x248>)
  412f46:	4798      	blx	r3
  412f48:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  412f4a:	4b51      	ldr	r3, [pc, #324]	; (413090 <lv_img_decoder_built_in_open+0x24c>)
  412f4c:	4798      	blx	r3
  412f4e:	b9f0      	cbnz	r0, 412f8e <lv_img_decoder_built_in_open+0x14a>
  412f50:	686a      	ldr	r2, [r5, #4]
  412f52:	2300      	movs	r3, #0
  412f54:	4850      	ldr	r0, [pc, #320]	; (413098 <lv_img_decoder_built_in_open+0x254>)
  412f56:	4951      	ldr	r1, [pc, #324]	; (41309c <lv_img_decoder_built_in_open+0x258>)
  412f58:	4788      	blx	r1
  412f5a:	e7fe      	b.n	412f5a <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  412f5c:	200c      	movs	r0, #12
  412f5e:	4b4b      	ldr	r3, [pc, #300]	; (41308c <lv_img_decoder_built_in_open+0x248>)
  412f60:	4798      	blx	r3
  412f62:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412f64:	4b4a      	ldr	r3, [pc, #296]	; (413090 <lv_img_decoder_built_in_open+0x24c>)
  412f66:	4798      	blx	r3
  412f68:	b928      	cbnz	r0, 412f76 <lv_img_decoder_built_in_open+0x132>
  412f6a:	69e2      	ldr	r2, [r4, #28]
  412f6c:	2300      	movs	r3, #0
  412f6e:	484a      	ldr	r0, [pc, #296]	; (413098 <lv_img_decoder_built_in_open+0x254>)
  412f70:	494a      	ldr	r1, [pc, #296]	; (41309c <lv_img_decoder_built_in_open+0x258>)
  412f72:	4788      	blx	r1
  412f74:	e7fe      	b.n	412f74 <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  412f76:	69e0      	ldr	r0, [r4, #28]
  412f78:	b928      	cbnz	r0, 412f86 <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  412f7a:	4621      	mov	r1, r4
  412f7c:	4638      	mov	r0, r7
  412f7e:	4b45      	ldr	r3, [pc, #276]	; (413094 <lv_img_decoder_built_in_open+0x250>)
  412f80:	4798      	blx	r3
                return LV_RES_INV;
  412f82:	2000      	movs	r0, #0
  412f84:	e77a      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412f86:	210c      	movs	r1, #12
  412f88:	4b45      	ldr	r3, [pc, #276]	; (4130a0 <lv_img_decoder_built_in_open+0x25c>)
  412f8a:	4798      	blx	r3
  412f8c:	e7d6      	b.n	412f3c <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  412f8e:	4630      	mov	r0, r6
  412f90:	4b3e      	ldr	r3, [pc, #248]	; (41308c <lv_img_decoder_built_in_open+0x248>)
  412f92:	4798      	blx	r3
  412f94:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  412f96:	4b3e      	ldr	r3, [pc, #248]	; (413090 <lv_img_decoder_built_in_open+0x24c>)
  412f98:	4798      	blx	r3
  412f9a:	b158      	cbz	r0, 412fb4 <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  412f9c:	686b      	ldr	r3, [r5, #4]
  412f9e:	b17b      	cbz	r3, 412fc0 <lv_img_decoder_built_in_open+0x17c>
  412fa0:	68ab      	ldr	r3, [r5, #8]
  412fa2:	b16b      	cbz	r3, 412fc0 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412fa4:	7aa3      	ldrb	r3, [r4, #10]
  412fa6:	2b01      	cmp	r3, #1
  412fa8:	d010      	beq.n	412fcc <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  412faa:	6863      	ldr	r3, [r4, #4]
  412fac:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  412fb0:	2300      	movs	r3, #0
  412fb2:	e054      	b.n	41305e <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  412fb4:	68aa      	ldr	r2, [r5, #8]
  412fb6:	2300      	movs	r3, #0
  412fb8:	4837      	ldr	r0, [pc, #220]	; (413098 <lv_img_decoder_built_in_open+0x254>)
  412fba:	4938      	ldr	r1, [pc, #224]	; (41309c <lv_img_decoder_built_in_open+0x258>)
  412fbc:	4788      	blx	r1
  412fbe:	e7fe      	b.n	412fbe <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  412fc0:	4621      	mov	r1, r4
  412fc2:	4638      	mov	r0, r7
  412fc4:	4b33      	ldr	r3, [pc, #204]	; (413094 <lv_img_decoder_built_in_open+0x250>)
  412fc6:	4798      	blx	r3
            return LV_RES_INV;
  412fc8:	2000      	movs	r0, #0
  412fca:	e757      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  412fcc:	2104      	movs	r1, #4
  412fce:	6828      	ldr	r0, [r5, #0]
  412fd0:	4b35      	ldr	r3, [pc, #212]	; (4130a8 <lv_img_decoder_built_in_open+0x264>)
  412fd2:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  412fd4:	2700      	movs	r7, #0
  412fd6:	e022      	b.n	41301e <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  412fd8:	2300      	movs	r3, #0
  412fda:	2204      	movs	r2, #4
  412fdc:	4669      	mov	r1, sp
  412fde:	6828      	ldr	r0, [r5, #0]
  412fe0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4130ac <lv_img_decoder_built_in_open+0x268>
  412fe4:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  412fe6:	6869      	ldr	r1, [r5, #4]
  412fe8:	f89d 0002 	ldrb.w	r0, [sp, #2]
  412fec:	f89d 3001 	ldrb.w	r3, [sp, #1]
  412ff0:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  412ff4:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  412ff8:	08c0      	lsrs	r0, r0, #3
  412ffa:	08d2      	lsrs	r2, r2, #3
  412ffc:	f3c3 0382 	ubfx	r3, r3, #2, #3
  413000:	f36e 0902 	bfi	r9, lr, #0, #3
  413004:	f360 09c7 	bfi	r9, r0, #3, #5
  413008:	f362 290c 	bfi	r9, r2, #8, #5
  41300c:	f363 394f 	bfi	r9, r3, #13, #3
  413010:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  413014:	68ab      	ldr	r3, [r5, #8]
  413016:	f89d 2003 	ldrb.w	r2, [sp, #3]
  41301a:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  41301c:	3701      	adds	r7, #1
  41301e:	42b7      	cmp	r7, r6
  413020:	d3da      	bcc.n	412fd8 <lv_img_decoder_built_in_open+0x194>
  413022:	e01e      	b.n	413062 <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  413024:	6869      	ldr	r1, [r5, #4]
  413026:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  41302a:	f890 e002 	ldrb.w	lr, [r0, #2]
  41302e:	7842      	ldrb	r2, [r0, #1]
  413030:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  413034:	ea4f 1952 	mov.w	r9, r2, lsr #5
  413038:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  41303c:	08ff      	lsrs	r7, r7, #3
  41303e:	f3c2 0282 	ubfx	r2, r2, #2, #3
  413042:	f369 0802 	bfi	r8, r9, #0, #3
  413046:	f36e 08c7 	bfi	r8, lr, #3, #5
  41304a:	f367 280c 	bfi	r8, r7, #8, #5
  41304e:	f362 384f 	bfi	r8, r2, #13, #3
  413052:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  413056:	68aa      	ldr	r2, [r5, #8]
  413058:	78c1      	ldrb	r1, [r0, #3]
  41305a:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  41305c:	3301      	adds	r3, #1
  41305e:	42b3      	cmp	r3, r6
  413060:	d3e0      	bcc.n	413024 <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  413062:	2300      	movs	r3, #0
  413064:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  413066:	2001      	movs	r0, #1
  413068:	e708      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  41306a:	4621      	mov	r1, r4
  41306c:	4638      	mov	r0, r7
  41306e:	4b09      	ldr	r3, [pc, #36]	; (413094 <lv_img_decoder_built_in_open+0x250>)
  413070:	4798      	blx	r3
        return LV_RES_INV;
  413072:	2000      	movs	r0, #0
  413074:	e702      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  413076:	2000      	movs	r0, #0
  413078:	e700      	b.n	412e7c <lv_img_decoder_built_in_open+0x38>
  41307a:	bf00      	nop
  41307c:	00415c99 	.word	0x00415c99
  413080:	00428e34 	.word	0x00428e34
  413084:	004237c9 	.word	0x004237c9
  413088:	00415bd9 	.word	0x00415bd9
  41308c:	00416189 	.word	0x00416189
  413090:	00415a81 	.word	0x00415a81
  413094:	00412e09 	.word	0x00412e09
  413098:	00428c94 	.word	0x00428c94
  41309c:	00415a8d 	.word	0x00415a8d
  4130a0:	004166bd 	.word	0x004166bd
  4130a4:	0040d0c1 	.word	0x0040d0c1
  4130a8:	00415b91 	.word	0x00415b91
  4130ac:	00415b55 	.word	0x00415b55

004130b0 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  4130b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4130b4:	b083      	sub	sp, #12
  4130b6:	4680      	mov	r8, r0
  4130b8:	4689      	mov	r9, r1
  4130ba:	4614      	mov	r4, r2
  4130bc:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4130be:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  4130c0:	7b00      	ldrb	r0, [r0, #12]
  4130c2:	f000 001f 	and.w	r0, r0, #31
  4130c6:	4b15      	ldr	r3, [pc, #84]	; (41311c <lv_img_decoder_built_in_line_true_color+0x6c>)
  4130c8:	4798      	blx	r3
  4130ca:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  4130cc:	f8d8 100c 	ldr.w	r1, [r8, #12]
  4130d0:	f3c1 218a 	ubfx	r1, r1, #10, #11
  4130d4:	fb01 9104 	mla	r1, r1, r4, r9
  4130d8:	fb01 f100 	mul.w	r1, r1, r0
  4130dc:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  4130de:	3104      	adds	r1, #4
  4130e0:	6830      	ldr	r0, [r6, #0]
  4130e2:	4b0f      	ldr	r3, [pc, #60]	; (413120 <lv_img_decoder_built_in_line_true_color+0x70>)
  4130e4:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  4130e6:	b118      	cbz	r0, 4130f0 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  4130e8:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  4130ea:	b003      	add	sp, #12
  4130ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  4130f0:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  4130f4:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  4130f8:	ab02      	add	r3, sp, #8
  4130fa:	2200      	movs	r2, #0
  4130fc:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  413100:	462a      	mov	r2, r5
  413102:	990a      	ldr	r1, [sp, #40]	; 0x28
  413104:	6830      	ldr	r0, [r6, #0]
  413106:	4c07      	ldr	r4, [pc, #28]	; (413124 <lv_img_decoder_built_in_line_true_color+0x74>)
  413108:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  41310a:	b920      	cbnz	r0, 413116 <lv_img_decoder_built_in_line_true_color+0x66>
  41310c:	9b01      	ldr	r3, [sp, #4]
  41310e:	429d      	cmp	r5, r3
  413110:	d1eb      	bne.n	4130ea <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  413112:	2001      	movs	r0, #1
  413114:	e7e9      	b.n	4130ea <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  413116:	2000      	movs	r0, #0
  413118:	e7e7      	b.n	4130ea <lv_img_decoder_built_in_line_true_color+0x3a>
  41311a:	bf00      	nop
  41311c:	0040d0c1 	.word	0x0040d0c1
  413120:	00415b91 	.word	0x00415b91
  413124:	00415b55 	.word	0x00415b55

00413128 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  413128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41312c:	b08b      	sub	sp, #44	; 0x2c
  41312e:	4680      	mov	r8, r0
  413130:	460c      	mov	r4, r1
  413132:	4693      	mov	fp, r2
  413134:	461e      	mov	r6, r3
  413136:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  413138:	2700      	movs	r7, #0
  41313a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  41313e:	23ff      	movs	r3, #255	; 0xff
  413140:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  413144:	4b6a      	ldr	r3, [pc, #424]	; (4132f0 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  413146:	f853 2b04 	ldr.w	r2, [r3], #4
  41314a:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  41314c:	f10d 0e10 	add.w	lr, sp, #16
  413150:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  413152:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  413156:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  41315a:	463b      	mov	r3, r7
  41315c:	e008      	b.n	413170 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  41315e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  413162:	b281      	uxth	r1, r0
  413164:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  413166:	3201      	adds	r2, #1
  413168:	0a09      	lsrs	r1, r1, #8
  41316a:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  41316c:	3301      	adds	r3, #1
  41316e:	b21b      	sxth	r3, r3
  413170:	42b3      	cmp	r3, r6
  413172:	dbf4      	blt.n	41315e <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  413174:	f898 000c 	ldrb.w	r0, [r8, #12]
  413178:	f000 001f 	and.w	r0, r0, #31
  41317c:	4b5d      	ldr	r3, [pc, #372]	; (4132f4 <lv_img_decoder_built_in_line_alpha+0x1cc>)
  41317e:	4798      	blx	r3
  413180:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  413182:	2701      	movs	r7, #1
  413184:	4087      	lsls	r7, r0
  413186:	b2bf      	uxth	r7, r7
  413188:	3f01      	subs	r7, #1
  41318a:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  41318c:	f898 300c 	ldrb.w	r3, [r8, #12]
  413190:	f003 031f 	and.w	r3, r3, #31
  413194:	3b0b      	subs	r3, #11
  413196:	2b03      	cmp	r3, #3
  413198:	d864      	bhi.n	413264 <lv_img_decoder_built_in_line_alpha+0x13c>
  41319a:	e8df f003 	tbb	[pc, r3]
  41319e:	2802      	.short	0x2802
  4131a0:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  4131a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4131a6:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4131aa:	10da      	asrs	r2, r3, #3
  4131ac:	b211      	sxth	r1, r2
  4131ae:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  4131b0:	f013 0f07 	tst.w	r3, #7
  4131b4:	d001      	beq.n	4131ba <lv_img_decoder_built_in_line_alpha+0x92>
  4131b6:	1c53      	adds	r3, r2, #1
  4131b8:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  4131ba:	10e3      	asrs	r3, r4, #3
  4131bc:	9a01      	ldr	r2, [sp, #4]
  4131be:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  4131c2:	43e4      	mvns	r4, r4
  4131c4:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  4131c8:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4131cc:	f8d8 301c 	ldr.w	r3, [r8, #28]
  4131d0:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  4131d2:	9801      	ldr	r0, [sp, #4]
  4131d4:	4b48      	ldr	r3, [pc, #288]	; (4132f8 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  4131d6:	4798      	blx	r3
  4131d8:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4131da:	f898 300a 	ldrb.w	r3, [r8, #10]
  4131de:	2b00      	cmp	r3, #0
  4131e0:	d149      	bne.n	413276 <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  4131e2:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  4131e6:	689b      	ldr	r3, [r3, #8]
  4131e8:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  4131ea:	2100      	movs	r1, #0
  4131ec:	e05d      	b.n	4132aa <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  4131ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4131f2:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4131f6:	109a      	asrs	r2, r3, #2
  4131f8:	b211      	sxth	r1, r2
  4131fa:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  4131fc:	f013 0f03 	tst.w	r3, #3
  413200:	d001      	beq.n	413206 <lv_img_decoder_built_in_line_alpha+0xde>
  413202:	1c53      	adds	r3, r2, #1
  413204:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  413206:	10a3      	asrs	r3, r4, #2
  413208:	9a01      	ldr	r2, [sp, #4]
  41320a:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  41320e:	b2a4      	uxth	r4, r4
  413210:	43e4      	mvns	r4, r4
  413212:	f004 0403 	and.w	r4, r4, #3
  413216:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  413218:	f10d 0a20 	add.w	sl, sp, #32
            break;
  41321c:	e7d6      	b.n	4131cc <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  41321e:	f8d8 300c 	ldr.w	r3, [r8, #12]
  413222:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413226:	105a      	asrs	r2, r3, #1
  413228:	b211      	sxth	r1, r2
  41322a:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  41322c:	f013 0f01 	tst.w	r3, #1
  413230:	d001      	beq.n	413236 <lv_img_decoder_built_in_line_alpha+0x10e>
  413232:	1c53      	adds	r3, r2, #1
  413234:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  413236:	1063      	asrs	r3, r4, #1
  413238:	9a01      	ldr	r2, [sp, #4]
  41323a:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  41323e:	f014 0f01 	tst.w	r4, #1
  413242:	d114      	bne.n	41326e <lv_img_decoder_built_in_line_alpha+0x146>
  413244:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  413246:	f10d 0a10 	add.w	sl, sp, #16
  41324a:	e7bf      	b.n	4131cc <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  41324c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  413250:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413254:	b29a      	uxth	r2, r3
  413256:	b21b      	sxth	r3, r3
  413258:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  41325a:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  41325e:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  413260:	46a2      	mov	sl, r4
            break;
  413262:	e7b3      	b.n	4131cc <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  413264:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  413266:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  413268:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  41326a:	46a2      	mov	sl, r4
  41326c:	e7ae      	b.n	4131cc <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  41326e:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  413270:	f10d 0a10 	add.w	sl, sp, #16
  413274:	e7aa      	b.n	4131cc <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  413276:	f10b 0104 	add.w	r1, fp, #4
  41327a:	9b03      	ldr	r3, [sp, #12]
  41327c:	6818      	ldr	r0, [r3, #0]
  41327e:	4b1f      	ldr	r3, [pc, #124]	; (4132fc <lv_img_decoder_built_in_line_alpha+0x1d4>)
  413280:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  413282:	2300      	movs	r3, #0
  413284:	9a01      	ldr	r2, [sp, #4]
  413286:	9902      	ldr	r1, [sp, #8]
  413288:	9803      	ldr	r0, [sp, #12]
  41328a:	6800      	ldr	r0, [r0, #0]
  41328c:	f8df b074 	ldr.w	fp, [pc, #116]	; 413304 <lv_img_decoder_built_in_line_alpha+0x1dc>
  413290:	47d8      	blx	fp
        data_tmp = fs_buf;
  413292:	f8dd b008 	ldr.w	fp, [sp, #8]
  413296:	e7a8      	b.n	4131ea <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  413298:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  41329c:	eba4 0409 	sub.w	r4, r4, r9
  4132a0:	b264      	sxtb	r4, r4
        if(pos < 0) {
  4132a2:	2c00      	cmp	r4, #0
  4132a4:	db17      	blt.n	4132d6 <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  4132a6:	3101      	adds	r1, #1
  4132a8:	b209      	sxth	r1, r1
  4132aa:	42b1      	cmp	r1, r6
  4132ac:	da19      	bge.n	4132e2 <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  4132ae:	f89b 3000 	ldrb.w	r3, [fp]
  4132b2:	fa07 f204 	lsl.w	r2, r7, r4
  4132b6:	4013      	ands	r3, r2
  4132b8:	4123      	asrs	r3, r4
  4132ba:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4132be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  4132c2:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  4132c4:	f898 200c 	ldrb.w	r2, [r8, #12]
  4132c8:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  4132cc:	2a0e      	cmp	r2, #14
  4132ce:	d0e3      	beq.n	413298 <lv_img_decoder_built_in_line_alpha+0x170>
  4132d0:	f81a e00e 	ldrb.w	lr, [sl, lr]
  4132d4:	e7e0      	b.n	413298 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  4132d6:	f1c9 0408 	rsb	r4, r9, #8
  4132da:	b264      	sxtb	r4, r4
            data_tmp++;
  4132dc:	f10b 0b01 	add.w	fp, fp, #1
  4132e0:	e7e1      	b.n	4132a6 <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  4132e2:	9802      	ldr	r0, [sp, #8]
  4132e4:	4b06      	ldr	r3, [pc, #24]	; (413300 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  4132e6:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  4132e8:	2001      	movs	r0, #1
  4132ea:	b00b      	add	sp, #44	; 0x2c
  4132ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4132f0:	00428e20 	.word	0x00428e20
  4132f4:	0040d0c1 	.word	0x0040d0c1
  4132f8:	00416531 	.word	0x00416531
  4132fc:	00415b91 	.word	0x00415b91
  413300:	004162e1 	.word	0x004162e1
  413304:	00415b55 	.word	0x00415b55

00413308 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  413308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41330c:	b083      	sub	sp, #12
  41330e:	4682      	mov	sl, r0
  413310:	460c      	mov	r4, r1
  413312:	4616      	mov	r6, r2
  413314:	4699      	mov	r9, r3
  413316:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  413318:	7b00      	ldrb	r0, [r0, #12]
  41331a:	f000 001f 	and.w	r0, r0, #31
  41331e:	4b5d      	ldr	r3, [pc, #372]	; (413494 <lv_img_decoder_built_in_line_indexed+0x18c>)
  413320:	4798      	blx	r3
  413322:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  413324:	2701      	movs	r7, #1
  413326:	4087      	lsls	r7, r0
  413328:	b2bf      	uxth	r7, r7
  41332a:	3f01      	subs	r7, #1
  41332c:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  41332e:	f89a 300c 	ldrb.w	r3, [sl, #12]
  413332:	f003 031f 	and.w	r3, r3, #31
  413336:	3b07      	subs	r3, #7
  413338:	2b03      	cmp	r3, #3
  41333a:	d868      	bhi.n	41340e <lv_img_decoder_built_in_line_indexed+0x106>
  41333c:	e8df f003 	tbb	[pc, r3]
  413340:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  413344:	f8da 300c 	ldr.w	r3, [sl, #12]
  413348:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41334c:	10da      	asrs	r2, r3, #3
  41334e:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  413352:	f013 0f07 	tst.w	r3, #7
  413356:	d001      	beq.n	41335c <lv_img_decoder_built_in_line_indexed+0x54>
  413358:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  41335c:	10e3      	asrs	r3, r4, #3
  41335e:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  413362:	f106 0308 	add.w	r3, r6, #8
  413366:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  413368:	43e4      	mvns	r4, r4
  41336a:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  41336e:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  413372:	4658      	mov	r0, fp
  413374:	4b48      	ldr	r3, [pc, #288]	; (413498 <lv_img_decoder_built_in_line_indexed+0x190>)
  413376:	4798      	blx	r3
  413378:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  41337a:	f89a 300a 	ldrb.w	r3, [sl, #10]
  41337e:	2b00      	cmp	r3, #0
  413380:	d14c      	bne.n	41341c <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  413382:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  413386:	689b      	ldr	r3, [r3, #8]
  413388:	9a01      	ldr	r2, [sp, #4]
  41338a:	441a      	add	r2, r3
  41338c:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  41338e:	2100      	movs	r1, #0
  413390:	e056      	b.n	413440 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  413392:	f8da 300c 	ldr.w	r3, [sl, #12]
  413396:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41339a:	109a      	asrs	r2, r3, #2
  41339c:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  4133a0:	f013 0f03 	tst.w	r3, #3
  4133a4:	d001      	beq.n	4133aa <lv_img_decoder_built_in_line_indexed+0xa2>
  4133a6:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  4133aa:	10a3      	asrs	r3, r4, #2
  4133ac:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  4133b0:	f106 0310 	add.w	r3, r6, #16
  4133b4:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  4133b6:	b2a4      	uxth	r4, r4
  4133b8:	43e4      	mvns	r4, r4
  4133ba:	f004 0403 	and.w	r4, r4, #3
  4133be:	0064      	lsls	r4, r4, #1
            break;
  4133c0:	e7d5      	b.n	41336e <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  4133c2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4133c6:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4133ca:	105a      	asrs	r2, r3, #1
  4133cc:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  4133d0:	f013 0f01 	tst.w	r3, #1
  4133d4:	d001      	beq.n	4133da <lv_img_decoder_built_in_line_indexed+0xd2>
  4133d6:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  4133da:	1063      	asrs	r3, r4, #1
  4133dc:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  4133e0:	f106 0340 	add.w	r3, r6, #64	; 0x40
  4133e4:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  4133e6:	f014 0f01 	tst.w	r4, #1
  4133ea:	d115      	bne.n	413418 <lv_img_decoder_built_in_line_indexed+0x110>
  4133ec:	2404      	movs	r4, #4
  4133ee:	e7be      	b.n	41336e <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  4133f0:	f8da 300c 	ldr.w	r3, [sl, #12]
  4133f4:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  4133f8:	fa1f f38b 	uxth.w	r3, fp
  4133fc:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  413400:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  413404:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  413408:	9301      	str	r3, [sp, #4]
            pos = 0;
  41340a:	2400      	movs	r4, #0
            break;
  41340c:	e7af      	b.n	41336e <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  41340e:	2300      	movs	r3, #0
  413410:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  413412:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  413414:	469b      	mov	fp, r3
  413416:	e7aa      	b.n	41336e <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  413418:	2400      	movs	r4, #0
  41341a:	e7a8      	b.n	41336e <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  41341c:	9901      	ldr	r1, [sp, #4]
  41341e:	3104      	adds	r1, #4
  413420:	6830      	ldr	r0, [r6, #0]
  413422:	4b1e      	ldr	r3, [pc, #120]	; (41349c <lv_img_decoder_built_in_line_indexed+0x194>)
  413424:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  413426:	2300      	movs	r3, #0
  413428:	465a      	mov	r2, fp
  41342a:	f8dd b000 	ldr.w	fp, [sp]
  41342e:	4659      	mov	r1, fp
  413430:	6830      	ldr	r0, [r6, #0]
  413432:	f8df a070 	ldr.w	sl, [pc, #112]	; 4134a4 <lv_img_decoder_built_in_line_indexed+0x19c>
  413436:	47d0      	blx	sl
        data_tmp = fs_buf;
  413438:	46de      	mov	lr, fp
  41343a:	e7a8      	b.n	41338e <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  41343c:	3101      	adds	r1, #1
  41343e:	b209      	sxth	r1, r1
  413440:	4549      	cmp	r1, r9
  413442:	da20      	bge.n	413486 <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  413444:	f89e 3000 	ldrb.w	r3, [lr]
  413448:	fa07 f204 	lsl.w	r2, r7, r4
  41344c:	4013      	ands	r3, r2
  41344e:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  413450:	6870      	ldr	r0, [r6, #4]
  413452:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  413454:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  413458:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  41345c:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  41345e:	f102 0c01 	add.w	ip, r2, #1
  413462:	0a00      	lsrs	r0, r0, #8
  413464:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  413468:	3202      	adds	r2, #2
  41346a:	68b0      	ldr	r0, [r6, #8]
  41346c:	5cc3      	ldrb	r3, [r0, r3]
  41346e:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  413470:	eba4 0408 	sub.w	r4, r4, r8
  413474:	b264      	sxtb	r4, r4
        if(pos < 0) {
  413476:	2c00      	cmp	r4, #0
  413478:	dae0      	bge.n	41343c <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  41347a:	f1c8 0408 	rsb	r4, r8, #8
  41347e:	b264      	sxtb	r4, r4
            data_tmp++;
  413480:	f10e 0e01 	add.w	lr, lr, #1
  413484:	e7da      	b.n	41343c <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  413486:	9800      	ldr	r0, [sp, #0]
  413488:	4b05      	ldr	r3, [pc, #20]	; (4134a0 <lv_img_decoder_built_in_line_indexed+0x198>)
  41348a:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  41348c:	2001      	movs	r0, #1
  41348e:	b003      	add	sp, #12
  413490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413494:	0040d0c1 	.word	0x0040d0c1
  413498:	00416531 	.word	0x00416531
  41349c:	00415b91 	.word	0x00415b91
  4134a0:	004162e1 	.word	0x004162e1
  4134a4:	00415b55 	.word	0x00415b55

004134a8 <lv_img_decoder_built_in_read_line>:
{
  4134a8:	b530      	push	{r4, r5, lr}
  4134aa:	b083      	sub	sp, #12
  4134ac:	4608      	mov	r0, r1
  4134ae:	4611      	mov	r1, r2
  4134b0:	461a      	mov	r2, r3
  4134b2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4134b6:	7b04      	ldrb	r4, [r0, #12]
  4134b8:	f004 041f 	and.w	r4, r4, #31
  4134bc:	1f25      	subs	r5, r4, #4
  4134be:	b2ed      	uxtb	r5, r5
  4134c0:	2d02      	cmp	r5, #2
  4134c2:	d80a      	bhi.n	4134da <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  4134c4:	7a84      	ldrb	r4, [r0, #10]
  4134c6:	2c01      	cmp	r4, #1
  4134c8:	d002      	beq.n	4134d0 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  4134ca:	2000      	movs	r0, #0
}
  4134cc:	b003      	add	sp, #12
  4134ce:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  4134d0:	9c07      	ldr	r4, [sp, #28]
  4134d2:	9400      	str	r4, [sp, #0]
  4134d4:	4c0b      	ldr	r4, [pc, #44]	; (413504 <lv_img_decoder_built_in_read_line+0x5c>)
  4134d6:	47a0      	blx	r4
  4134d8:	e7f8      	b.n	4134cc <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  4134da:	f1a4 050b 	sub.w	r5, r4, #11
  4134de:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  4134e0:	2d03      	cmp	r5, #3
  4134e2:	d905      	bls.n	4134f0 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  4134e4:	3c07      	subs	r4, #7
  4134e6:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  4134e8:	2c03      	cmp	r4, #3
  4134ea:	d906      	bls.n	4134fa <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  4134ec:	2000      	movs	r0, #0
  4134ee:	e7ed      	b.n	4134cc <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  4134f0:	9c07      	ldr	r4, [sp, #28]
  4134f2:	9400      	str	r4, [sp, #0]
  4134f4:	4c04      	ldr	r4, [pc, #16]	; (413508 <lv_img_decoder_built_in_read_line+0x60>)
  4134f6:	47a0      	blx	r4
  4134f8:	e7e8      	b.n	4134cc <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  4134fa:	9c07      	ldr	r4, [sp, #28]
  4134fc:	9400      	str	r4, [sp, #0]
  4134fe:	4c03      	ldr	r4, [pc, #12]	; (41350c <lv_img_decoder_built_in_read_line+0x64>)
  413500:	47a0      	blx	r4
  413502:	e7e3      	b.n	4134cc <lv_img_decoder_built_in_read_line+0x24>
  413504:	004130b1 	.word	0x004130b1
  413508:	00413129 	.word	0x00413129
  41350c:	00413309 	.word	0x00413309

00413510 <lv_img_decoder_get_info>:
{
  413510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413512:	4607      	mov	r7, r0
  413514:	460e      	mov	r6, r1
    header->always_zero = 0;
  413516:	780b      	ldrb	r3, [r1, #0]
  413518:	f36f 1347 	bfc	r3, #5, #3
  41351c:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  41351e:	884b      	ldrh	r3, [r1, #2]
  413520:	f36f 134f 	bfc	r3, #5, #11
  413524:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  413526:	680b      	ldr	r3, [r1, #0]
  413528:	f36f 2394 	bfc	r3, #10, #11
  41352c:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  41352e:	f36f 0304 	bfc	r3, #0, #5
  413532:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413534:	480c      	ldr	r0, [pc, #48]	; (413568 <lv_img_decoder_get_info+0x58>)
  413536:	4b0d      	ldr	r3, [pc, #52]	; (41356c <lv_img_decoder_get_info+0x5c>)
  413538:	4798      	blx	r3
  41353a:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  41353c:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41353e:	e005      	b.n	41354c <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  413540:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413542:	4621      	mov	r1, r4
  413544:	4808      	ldr	r0, [pc, #32]	; (413568 <lv_img_decoder_get_info+0x58>)
  413546:	4b0a      	ldr	r3, [pc, #40]	; (413570 <lv_img_decoder_get_info+0x60>)
  413548:	4798      	blx	r3
  41354a:	4604      	mov	r4, r0
  41354c:	b14c      	cbz	r4, 413562 <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  41354e:	6823      	ldr	r3, [r4, #0]
  413550:	2b00      	cmp	r3, #0
  413552:	d0f5      	beq.n	413540 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  413554:	4632      	mov	r2, r6
  413556:	4639      	mov	r1, r7
  413558:	4620      	mov	r0, r4
  41355a:	4798      	blx	r3
  41355c:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  41355e:	2801      	cmp	r0, #1
  413560:	d1ef      	bne.n	413542 <lv_img_decoder_get_info+0x32>
}
  413562:	4628      	mov	r0, r5
  413564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  413566:	bf00      	nop
  413568:	2043a1cc 	.word	0x2043a1cc
  41356c:	00415d91 	.word	0x00415d91
  413570:	00415da5 	.word	0x00415da5

00413574 <lv_img_decoder_open>:
{
  413574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413576:	4606      	mov	r6, r0
  413578:	460f      	mov	r7, r1
    dsc->color     = color;
  41357a:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  41357c:	4608      	mov	r0, r1
  41357e:	4b1d      	ldr	r3, [pc, #116]	; (4135f4 <lv_img_decoder_open+0x80>)
  413580:	4798      	blx	r3
  413582:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  413584:	2300      	movs	r3, #0
  413586:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  413588:	2801      	cmp	r0, #1
  41358a:	d006      	beq.n	41359a <lv_img_decoder_open+0x26>
        dsc->src       = src;
  41358c:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41358e:	481a      	ldr	r0, [pc, #104]	; (4135f8 <lv_img_decoder_open+0x84>)
  413590:	4b1a      	ldr	r3, [pc, #104]	; (4135fc <lv_img_decoder_open+0x88>)
  413592:	4798      	blx	r3
  413594:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  413596:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413598:	e00f      	b.n	4135ba <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  41359a:	4638      	mov	r0, r7
  41359c:	4b18      	ldr	r3, [pc, #96]	; (413600 <lv_img_decoder_open+0x8c>)
  41359e:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  4135a0:	3001      	adds	r0, #1
  4135a2:	4b18      	ldr	r3, [pc, #96]	; (413604 <lv_img_decoder_open+0x90>)
  4135a4:	4798      	blx	r3
  4135a6:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  4135a8:	4639      	mov	r1, r7
  4135aa:	4b17      	ldr	r3, [pc, #92]	; (413608 <lv_img_decoder_open+0x94>)
  4135ac:	4798      	blx	r3
  4135ae:	e7ee      	b.n	41358e <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4135b0:	4621      	mov	r1, r4
  4135b2:	4811      	ldr	r0, [pc, #68]	; (4135f8 <lv_img_decoder_open+0x84>)
  4135b4:	4b15      	ldr	r3, [pc, #84]	; (41360c <lv_img_decoder_open+0x98>)
  4135b6:	4798      	blx	r3
  4135b8:	4604      	mov	r4, r0
  4135ba:	b1c4      	cbz	r4, 4135ee <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  4135bc:	6823      	ldr	r3, [r4, #0]
  4135be:	2b00      	cmp	r3, #0
  4135c0:	d0f6      	beq.n	4135b0 <lv_img_decoder_open+0x3c>
  4135c2:	6862      	ldr	r2, [r4, #4]
  4135c4:	2a00      	cmp	r2, #0
  4135c6:	d0f3      	beq.n	4135b0 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  4135c8:	f106 020c 	add.w	r2, r6, #12
  4135cc:	4639      	mov	r1, r7
  4135ce:	4620      	mov	r0, r4
  4135d0:	4798      	blx	r3
  4135d2:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  4135d4:	2801      	cmp	r0, #1
  4135d6:	d1eb      	bne.n	4135b0 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  4135d8:	2300      	movs	r3, #0
  4135da:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  4135dc:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  4135de:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  4135e0:	6863      	ldr	r3, [r4, #4]
  4135e2:	4631      	mov	r1, r6
  4135e4:	4620      	mov	r0, r4
  4135e6:	4798      	blx	r3
  4135e8:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  4135ea:	2801      	cmp	r0, #1
  4135ec:	d1e0      	bne.n	4135b0 <lv_img_decoder_open+0x3c>
}
  4135ee:	4628      	mov	r0, r5
  4135f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4135f2:	bf00      	nop
  4135f4:	0040d385 	.word	0x0040d385
  4135f8:	2043a1cc 	.word	0x2043a1cc
  4135fc:	00415d91 	.word	0x00415d91
  413600:	00423b81 	.word	0x00423b81
  413604:	00416189 	.word	0x00416189
  413608:	00423a9d 	.word	0x00423a9d
  41360c:	00415da5 	.word	0x00415da5

00413610 <lv_img_decoder_read_line>:
{
  413610:	b570      	push	{r4, r5, r6, lr}
  413612:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  413614:	6806      	ldr	r6, [r0, #0]
  413616:	68b4      	ldr	r4, [r6, #8]
  413618:	b154      	cbz	r4, 413630 <lv_img_decoder_read_line+0x20>
  41361a:	461d      	mov	r5, r3
  41361c:	4613      	mov	r3, r2
  41361e:	460a      	mov	r2, r1
  413620:	4601      	mov	r1, r0
  413622:	9806      	ldr	r0, [sp, #24]
  413624:	9001      	str	r0, [sp, #4]
  413626:	9500      	str	r5, [sp, #0]
  413628:	4630      	mov	r0, r6
  41362a:	47a0      	blx	r4
}
  41362c:	b002      	add	sp, #8
  41362e:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  413630:	2000      	movs	r0, #0
  413632:	e7fb      	b.n	41362c <lv_img_decoder_read_line+0x1c>

00413634 <lv_img_decoder_close>:
    if(dsc->decoder) {
  413634:	6803      	ldr	r3, [r0, #0]
  413636:	b183      	cbz	r3, 41365a <lv_img_decoder_close+0x26>
{
  413638:	b510      	push	{r4, lr}
  41363a:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  41363c:	68da      	ldr	r2, [r3, #12]
  41363e:	b112      	cbz	r2, 413646 <lv_img_decoder_close+0x12>
  413640:	4601      	mov	r1, r0
  413642:	4618      	mov	r0, r3
  413644:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  413646:	7aa3      	ldrb	r3, [r4, #10]
  413648:	2b01      	cmp	r3, #1
  41364a:	d000      	beq.n	41364e <lv_img_decoder_close+0x1a>
  41364c:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  41364e:	6860      	ldr	r0, [r4, #4]
  413650:	4b02      	ldr	r3, [pc, #8]	; (41365c <lv_img_decoder_close+0x28>)
  413652:	4798      	blx	r3
            dsc->src = NULL;
  413654:	2300      	movs	r3, #0
  413656:	6063      	str	r3, [r4, #4]
}
  413658:	e7f8      	b.n	41364c <lv_img_decoder_close+0x18>
  41365a:	4770      	bx	lr
  41365c:	0041624d 	.word	0x0041624d

00413660 <lv_img_decoder_create>:
{
  413660:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  413662:	480a      	ldr	r0, [pc, #40]	; (41368c <lv_img_decoder_create+0x2c>)
  413664:	4b0a      	ldr	r3, [pc, #40]	; (413690 <lv_img_decoder_create+0x30>)
  413666:	4798      	blx	r3
  413668:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  41366a:	4b0a      	ldr	r3, [pc, #40]	; (413694 <lv_img_decoder_create+0x34>)
  41366c:	4798      	blx	r3
  41366e:	b130      	cbz	r0, 41367e <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  413670:	b11c      	cbz	r4, 41367a <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  413672:	2110      	movs	r1, #16
  413674:	4620      	mov	r0, r4
  413676:	4b08      	ldr	r3, [pc, #32]	; (413698 <lv_img_decoder_create+0x38>)
  413678:	4798      	blx	r3
}
  41367a:	4620      	mov	r0, r4
  41367c:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  41367e:	4622      	mov	r2, r4
  413680:	2300      	movs	r3, #0
  413682:	4806      	ldr	r0, [pc, #24]	; (41369c <lv_img_decoder_create+0x3c>)
  413684:	4906      	ldr	r1, [pc, #24]	; (4136a0 <lv_img_decoder_create+0x40>)
  413686:	4788      	blx	r1
  413688:	e7fe      	b.n	413688 <lv_img_decoder_create+0x28>
  41368a:	bf00      	nop
  41368c:	2043a1cc 	.word	0x2043a1cc
  413690:	00415cf9 	.word	0x00415cf9
  413694:	00415a81 	.word	0x00415a81
  413698:	004166bd 	.word	0x004166bd
  41369c:	00428c94 	.word	0x00428c94
  4136a0:	00415a8d 	.word	0x00415a8d

004136a4 <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  4136a4:	6001      	str	r1, [r0, #0]
  4136a6:	4770      	bx	lr

004136a8 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  4136a8:	6041      	str	r1, [r0, #4]
  4136aa:	4770      	bx	lr

004136ac <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  4136ac:	6081      	str	r1, [r0, #8]
  4136ae:	4770      	bx	lr

004136b0 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  4136b0:	60c1      	str	r1, [r0, #12]
  4136b2:	4770      	bx	lr

004136b4 <_lv_img_decoder_init>:
{
  4136b4:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  4136b6:	2110      	movs	r1, #16
  4136b8:	4810      	ldr	r0, [pc, #64]	; (4136fc <_lv_img_decoder_init+0x48>)
  4136ba:	4b11      	ldr	r3, [pc, #68]	; (413700 <_lv_img_decoder_init+0x4c>)
  4136bc:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  4136be:	4b11      	ldr	r3, [pc, #68]	; (413704 <_lv_img_decoder_init+0x50>)
  4136c0:	4798      	blx	r3
    if(decoder == NULL) {
  4136c2:	4604      	mov	r4, r0
  4136c4:	b178      	cbz	r0, 4136e6 <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  4136c6:	4910      	ldr	r1, [pc, #64]	; (413708 <_lv_img_decoder_init+0x54>)
  4136c8:	4b10      	ldr	r3, [pc, #64]	; (41370c <_lv_img_decoder_init+0x58>)
  4136ca:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  4136cc:	4910      	ldr	r1, [pc, #64]	; (413710 <_lv_img_decoder_init+0x5c>)
  4136ce:	4620      	mov	r0, r4
  4136d0:	4b10      	ldr	r3, [pc, #64]	; (413714 <_lv_img_decoder_init+0x60>)
  4136d2:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  4136d4:	4910      	ldr	r1, [pc, #64]	; (413718 <_lv_img_decoder_init+0x64>)
  4136d6:	4620      	mov	r0, r4
  4136d8:	4b10      	ldr	r3, [pc, #64]	; (41371c <_lv_img_decoder_init+0x68>)
  4136da:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  4136dc:	4910      	ldr	r1, [pc, #64]	; (413720 <_lv_img_decoder_init+0x6c>)
  4136de:	4620      	mov	r0, r4
  4136e0:	4b10      	ldr	r3, [pc, #64]	; (413724 <_lv_img_decoder_init+0x70>)
  4136e2:	4798      	blx	r3
  4136e4:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  4136e6:	4b10      	ldr	r3, [pc, #64]	; (413728 <_lv_img_decoder_init+0x74>)
  4136e8:	4798      	blx	r3
  4136ea:	2800      	cmp	r0, #0
  4136ec:	d1fa      	bne.n	4136e4 <_lv_img_decoder_init+0x30>
  4136ee:	4622      	mov	r2, r4
  4136f0:	2300      	movs	r3, #0
  4136f2:	480e      	ldr	r0, [pc, #56]	; (41372c <_lv_img_decoder_init+0x78>)
  4136f4:	490e      	ldr	r1, [pc, #56]	; (413730 <_lv_img_decoder_init+0x7c>)
  4136f6:	4788      	blx	r1
  4136f8:	e7fe      	b.n	4136f8 <_lv_img_decoder_init+0x44>
  4136fa:	bf00      	nop
  4136fc:	2043a1cc 	.word	0x2043a1cc
  413700:	00415ce7 	.word	0x00415ce7
  413704:	00413661 	.word	0x00413661
  413708:	00412d41 	.word	0x00412d41
  41370c:	004136a5 	.word	0x004136a5
  413710:	00412e45 	.word	0x00412e45
  413714:	004136a9 	.word	0x004136a9
  413718:	004134a9 	.word	0x004134a9
  41371c:	004136ad 	.word	0x004136ad
  413720:	00412e09 	.word	0x00412e09
  413724:	004136b1 	.word	0x004136b1
  413728:	00415a81 	.word	0x00415a81
  41372c:	00428c94 	.word	0x00428c94
  413730:	00415a8d 	.word	0x00415a8d

00413734 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  413734:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
  413736:	6843      	ldr	r3, [r0, #4]
  413738:	4798      	blx	r3
}
  41373a:	bd08      	pop	{r3, pc}

0041373c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  41373c:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  41373e:	6804      	ldr	r4, [r0, #0]
  413740:	47a0      	blx	r4
}
  413742:	bd10      	pop	{r4, pc}

00413744 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  413744:	b510      	push	{r4, lr}
  413746:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  413748:	4613      	mov	r3, r2
  41374a:	460a      	mov	r2, r1
  41374c:	a901      	add	r1, sp, #4
  41374e:	4c04      	ldr	r4, [pc, #16]	; (413760 <lv_font_get_glyph_width+0x1c>)
  413750:	47a0      	blx	r4
    if(ret) return g.adv_w;
  413752:	b118      	cbz	r0, 41375c <lv_font_get_glyph_width+0x18>
  413754:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
  413758:	b004      	add	sp, #16
  41375a:	bd10      	pop	{r4, pc}
    else return 0;
  41375c:	2000      	movs	r0, #0
  41375e:	e7fb      	b.n	413758 <lv_font_get_glyph_width+0x14>
  413760:	0041373d 	.word	0x0041373d

00413764 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  413764:	7803      	ldrb	r3, [r0, #0]
  413766:	780a      	ldrb	r2, [r1, #0]
  413768:	4293      	cmp	r3, r2
  41376a:	d001      	beq.n	413770 <kern_pair_8_compare+0xc>
  41376c:	1a98      	subs	r0, r3, r2
  41376e:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  413770:	7840      	ldrb	r0, [r0, #1]
  413772:	784b      	ldrb	r3, [r1, #1]
  413774:	1ac0      	subs	r0, r0, r3

}
  413776:	4770      	bx	lr

00413778 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  413778:	8803      	ldrh	r3, [r0, #0]
  41377a:	880a      	ldrh	r2, [r1, #0]
  41377c:	4293      	cmp	r3, r2
  41377e:	d001      	beq.n	413784 <kern_pair_16_compare+0xc>
  413780:	1a98      	subs	r0, r3, r2
  413782:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  413784:	8840      	ldrh	r0, [r0, #2]
  413786:	884b      	ldrh	r3, [r1, #2]
  413788:	1ac0      	subs	r0, r0, r3
}
  41378a:	4770      	bx	lr

0041378c <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  41378c:	8800      	ldrh	r0, [r0, #0]
  41378e:	880b      	ldrh	r3, [r1, #0]
}
  413790:	1ac0      	subs	r0, r0, r3
  413792:	4770      	bx	lr

00413794 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  413794:	460b      	mov	r3, r1
  413796:	2900      	cmp	r1, #0
  413798:	d061      	beq.n	41385e <get_glyph_dsc_id+0xca>
{
  41379a:	b5f0      	push	{r4, r5, r6, r7, lr}
  41379c:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  41379e:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  4137a0:	6962      	ldr	r2, [r4, #20]
  4137a2:	4291      	cmp	r1, r2
  4137a4:	d013      	beq.n	4137ce <get_glyph_dsc_id+0x3a>
  4137a6:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  4137a8:	8a61      	ldrh	r1, [r4, #18]
  4137aa:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4137ae:	428a      	cmp	r2, r1
  4137b0:	da51      	bge.n	413856 <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  4137b2:	68a0      	ldr	r0, [r4, #8]
  4137b4:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4137b8:	00a9      	lsls	r1, r5, #2
  4137ba:	460e      	mov	r6, r1
  4137bc:	1847      	adds	r7, r0, r1
  4137be:	5841      	ldr	r1, [r0, r1]
  4137c0:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  4137c2:	88b8      	ldrh	r0, [r7, #4]
  4137c4:	4281      	cmp	r1, r0
  4137c6:	d904      	bls.n	4137d2 <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  4137c8:	3201      	adds	r2, #1
  4137ca:	b292      	uxth	r2, r2
  4137cc:	e7ec      	b.n	4137a8 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  4137ce:	69a0      	ldr	r0, [r4, #24]
  4137d0:	e00a      	b.n	4137e8 <get_glyph_dsc_id+0x54>
  4137d2:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  4137d4:	7cbb      	ldrb	r3, [r7, #18]
  4137d6:	2b02      	cmp	r3, #2
  4137d8:	d008      	beq.n	4137ec <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  4137da:	b953      	cbnz	r3, 4137f2 <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  4137dc:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  4137de:	88f8      	ldrh	r0, [r7, #6]
  4137e0:	5c5b      	ldrb	r3, [r3, r1]
  4137e2:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  4137e4:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  4137e6:	61a0      	str	r0, [r4, #24]
}
  4137e8:	b005      	add	sp, #20
  4137ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  4137ec:	88f8      	ldrh	r0, [r7, #6]
  4137ee:	4408      	add	r0, r1
  4137f0:	e7f8      	b.n	4137e4 <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  4137f2:	2b03      	cmp	r3, #3
  4137f4:	d003      	beq.n	4137fe <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  4137f6:	2b01      	cmp	r3, #1
  4137f8:	d017      	beq.n	41382a <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  4137fa:	2000      	movs	r0, #0
  4137fc:	e7f2      	b.n	4137e4 <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  4137fe:	a804      	add	r0, sp, #16
  413800:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413804:	68b9      	ldr	r1, [r7, #8]
  413806:	8a3a      	ldrh	r2, [r7, #16]
  413808:	4b16      	ldr	r3, [pc, #88]	; (413864 <get_glyph_dsc_id+0xd0>)
  41380a:	9300      	str	r3, [sp, #0]
  41380c:	2302      	movs	r3, #2
  41380e:	4f16      	ldr	r7, [pc, #88]	; (413868 <get_glyph_dsc_id+0xd4>)
  413810:	47b8      	blx	r7
            if(p) {
  413812:	4603      	mov	r3, r0
  413814:	b138      	cbz	r0, 413826 <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413816:	68a2      	ldr	r2, [r4, #8]
  413818:	4416      	add	r6, r2
  41381a:	68b0      	ldr	r0, [r6, #8]
  41381c:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  41381e:	88f3      	ldrh	r3, [r6, #6]
  413820:	eb03 0060 	add.w	r0, r3, r0, asr #1
  413824:	e7de      	b.n	4137e4 <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  413826:	2000      	movs	r0, #0
  413828:	e7dc      	b.n	4137e4 <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  41382a:	a804      	add	r0, sp, #16
  41382c:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413830:	68b9      	ldr	r1, [r7, #8]
  413832:	8a3a      	ldrh	r2, [r7, #16]
  413834:	4b0b      	ldr	r3, [pc, #44]	; (413864 <get_glyph_dsc_id+0xd0>)
  413836:	9300      	str	r3, [sp, #0]
  413838:	2302      	movs	r3, #2
  41383a:	4f0b      	ldr	r7, [pc, #44]	; (413868 <get_glyph_dsc_id+0xd4>)
  41383c:	47b8      	blx	r7
            if(p) {
  41383e:	b140      	cbz	r0, 413852 <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413840:	68a3      	ldr	r3, [r4, #8]
  413842:	441e      	add	r6, r3
  413844:	68b3      	ldr	r3, [r6, #8]
  413846:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  413848:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  41384a:	88f3      	ldrh	r3, [r6, #6]
  41384c:	5a88      	ldrh	r0, [r1, r2]
  41384e:	4418      	add	r0, r3
  413850:	e7c8      	b.n	4137e4 <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  413852:	2000      	movs	r0, #0
  413854:	e7c6      	b.n	4137e4 <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  413856:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  413858:	2000      	movs	r0, #0
  41385a:	61a0      	str	r0, [r4, #24]
    return 0;
  41385c:	e7c4      	b.n	4137e8 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  41385e:	4608      	mov	r0, r1
  413860:	4770      	bx	lr
  413862:	bf00      	nop
  413864:	0041378d 	.word	0x0041378d
  413868:	00417b89 	.word	0x00417b89

0041386c <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  41386c:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  41386e:	7cd8      	ldrb	r0, [r3, #19]
  413870:	f010 0f20 	tst.w	r0, #32
  413874:	d13a      	bne.n	4138ec <get_kern_value+0x80>
{
  413876:	b570      	push	{r4, r5, r6, lr}
  413878:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  41387a:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  41387c:	7ae3      	ldrb	r3, [r4, #11]
  41387e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  413882:	d004      	beq.n	41388e <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  413884:	2b40      	cmp	r3, #64	; 0x40
  413886:	d01a      	beq.n	4138be <get_kern_value+0x52>
    int8_t value = 0;
  413888:	2000      	movs	r0, #0
}
  41388a:	b004      	add	sp, #16
  41388c:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  41388e:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  413890:	0212      	lsls	r2, r2, #8
  413892:	b292      	uxth	r2, r2
  413894:	440a      	add	r2, r1
  413896:	a804      	add	r0, sp, #16
  413898:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  41389c:	68a2      	ldr	r2, [r4, #8]
  41389e:	4b1d      	ldr	r3, [pc, #116]	; (413914 <get_kern_value+0xa8>)
  4138a0:	9300      	str	r3, [sp, #0]
  4138a2:	2302      	movs	r3, #2
  4138a4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  4138a8:	4629      	mov	r1, r5
  4138aa:	4e1b      	ldr	r6, [pc, #108]	; (413918 <get_kern_value+0xac>)
  4138ac:	47b0      	blx	r6
            if(kid_p) {
  4138ae:	b120      	cbz	r0, 4138ba <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  4138b0:	1b43      	subs	r3, r0, r5
  4138b2:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  4138b4:	6862      	ldr	r2, [r4, #4]
  4138b6:	56d0      	ldrsb	r0, [r2, r3]
  4138b8:	e7e7      	b.n	41388a <get_kern_value+0x1e>
    int8_t value = 0;
  4138ba:	2000      	movs	r0, #0
  4138bc:	e7e5      	b.n	41388a <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  4138be:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  4138c0:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  4138c4:	a804      	add	r0, sp, #16
  4138c6:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  4138ca:	68a2      	ldr	r2, [r4, #8]
  4138cc:	4b13      	ldr	r3, [pc, #76]	; (41391c <get_kern_value+0xb0>)
  4138ce:	9300      	str	r3, [sp, #0]
  4138d0:	2304      	movs	r3, #4
  4138d2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  4138d6:	4629      	mov	r1, r5
  4138d8:	4e0f      	ldr	r6, [pc, #60]	; (413918 <get_kern_value+0xac>)
  4138da:	47b0      	blx	r6
            if(kid_p) {
  4138dc:	b120      	cbz	r0, 4138e8 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  4138de:	1b43      	subs	r3, r0, r5
  4138e0:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  4138e2:	6862      	ldr	r2, [r4, #4]
  4138e4:	56d0      	ldrsb	r0, [r2, r3]
  4138e6:	e7d0      	b.n	41388a <get_kern_value+0x1e>
    int8_t value = 0;
  4138e8:	2000      	movs	r0, #0
  4138ea:	e7ce      	b.n	41388a <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  4138ec:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  4138ee:	6843      	ldr	r3, [r0, #4]
  4138f0:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  4138f2:	6881      	ldr	r1, [r0, #8]
  4138f4:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  4138f6:	2b00      	cmp	r3, #0
  4138f8:	bf18      	it	ne
  4138fa:	2a00      	cmpne	r2, #0
  4138fc:	d007      	beq.n	41390e <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  4138fe:	6801      	ldr	r1, [r0, #0]
  413900:	3b01      	subs	r3, #1
  413902:	7b40      	ldrb	r0, [r0, #13]
  413904:	3a01      	subs	r2, #1
  413906:	fb00 2303 	mla	r3, r0, r3, r2
  41390a:	56c8      	ldrsb	r0, [r1, r3]
  41390c:	4770      	bx	lr
    int8_t value = 0;
  41390e:	2000      	movs	r0, #0
  413910:	4770      	bx	lr
  413912:	bf00      	nop
  413914:	00413765 	.word	0x00413765
  413918:	00417b89 	.word	0x00417b89
  41391c:	00413779 	.word	0x00413779

00413920 <decompress>:
{
  413920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413924:	b087      	sub	sp, #28
  413926:	460e      	mov	r6, r1
  413928:	4614      	mov	r4, r2
  41392a:	9301      	str	r3, [sp, #4]
  41392c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  413930:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  413934:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  413936:	2f03      	cmp	r7, #3
  413938:	d018      	beq.n	41396c <decompress+0x4c>
    uint8_t wr_size = bpp;
  41393a:	9702      	str	r7, [sp, #8]
    rle_in = in;
  41393c:	4ba8      	ldr	r3, [pc, #672]	; (413be0 <decompress+0x2c0>)
  41393e:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  413940:	4ba8      	ldr	r3, [pc, #672]	; (413be4 <decompress+0x2c4>)
  413942:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  413944:	2300      	movs	r3, #0
  413946:	4aa8      	ldr	r2, [pc, #672]	; (413be8 <decompress+0x2c8>)
  413948:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  41394a:	4aa8      	ldr	r2, [pc, #672]	; (413bec <decompress+0x2cc>)
  41394c:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  41394e:	4aa8      	ldr	r2, [pc, #672]	; (413bf0 <decompress+0x2d0>)
  413950:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  413952:	4aa8      	ldr	r2, [pc, #672]	; (413bf4 <decompress+0x2d4>)
  413954:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  413956:	4620      	mov	r0, r4
  413958:	4ba7      	ldr	r3, [pc, #668]	; (413bf8 <decompress+0x2d8>)
  41395a:	4798      	blx	r3
  41395c:	4605      	mov	r5, r0
    if(prefilter) {
  41395e:	9b04      	ldr	r3, [sp, #16]
  413960:	b93b      	cbnz	r3, 413972 <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  413962:	2300      	movs	r3, #0
  413964:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  413966:	2000      	movs	r0, #0
  413968:	46a6      	mov	lr, r4
  41396a:	e03a      	b.n	4139e2 <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  41396c:	2304      	movs	r3, #4
  41396e:	9302      	str	r3, [sp, #8]
  413970:	e7e4      	b.n	41393c <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  413972:	4620      	mov	r0, r4
  413974:	4ba0      	ldr	r3, [pc, #640]	; (413bf8 <decompress+0x2d8>)
  413976:	4798      	blx	r3
  413978:	9003      	str	r0, [sp, #12]
  41397a:	e7f4      	b.n	413966 <decompress+0x46>
            bit_mask = 0x1;
  41397c:	f04f 0801 	mov.w	r8, #1
  413980:	e011      	b.n	4139a6 <decompress+0x86>
            bit_mask = 0x7;
  413982:	f04f 0807 	mov.w	r8, #7
  413986:	e00e      	b.n	4139a6 <decompress+0x86>
            bit_mask = 0xF;
  413988:	f04f 080f 	mov.w	r8, #15
  41398c:	e00b      	b.n	4139a6 <decompress+0x86>
            bit_mask = 0xFF;
  41398e:	f04f 08ff 	mov.w	r8, #255	; 0xff
  413992:	e008      	b.n	4139a6 <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413994:	2301      	movs	r3, #1
  413996:	4093      	lsls	r3, r2
  413998:	b2db      	uxtb	r3, r3
  41399a:	3b01      	subs	r3, #1
  41399c:	fa5f f883 	uxtb.w	r8, r3
  4139a0:	e001      	b.n	4139a6 <decompress+0x86>
            bit_mask = 0x3;
  4139a2:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  4139a6:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  4139a8:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4139ac:	eb01 0902 	add.w	r9, r1, r2
  4139b0:	f1b9 0f07 	cmp.w	r9, #7
  4139b4:	d83c      	bhi.n	413a30 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4139b6:	f81a 3003 	ldrb.w	r3, [sl, r3]
  4139ba:	4249      	negs	r1, r1
  4139bc:	1a89      	subs	r1, r1, r2
  4139be:	3108      	adds	r1, #8
  4139c0:	410b      	asrs	r3, r1
  4139c2:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4139c6:	b11c      	cbz	r4, 4139d0 <decompress+0xb0>
  4139c8:	4989      	ldr	r1, [pc, #548]	; (413bf0 <decompress+0x2d0>)
  4139ca:	7809      	ldrb	r1, [r1, #0]
  4139cc:	4299      	cmp	r1, r3
  4139ce:	d03d      	beq.n	413a4c <decompress+0x12c>
        rle_prev_v = ret;
  4139d0:	4987      	ldr	r1, [pc, #540]	; (413bf0 <decompress+0x2d0>)
  4139d2:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  4139d4:	4422      	add	r2, r4
  4139d6:	4985      	ldr	r1, [pc, #532]	; (413bec <decompress+0x2cc>)
  4139d8:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  4139da:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  4139de:	3001      	adds	r0, #1
  4139e0:	b200      	sxth	r0, r0
  4139e2:	4586      	cmp	lr, r0
  4139e4:	f340 8188 	ble.w	413cf8 <decompress+0x3d8>
        out[i] = rle_next();
  4139e8:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  4139ec:	4b7e      	ldr	r3, [pc, #504]	; (413be8 <decompress+0x2c8>)
  4139ee:	781b      	ldrb	r3, [r3, #0]
  4139f0:	2b00      	cmp	r3, #0
  4139f2:	d136      	bne.n	413a62 <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4139f4:	4b7a      	ldr	r3, [pc, #488]	; (413be0 <decompress+0x2c0>)
  4139f6:	f8d3 a000 	ldr.w	sl, [r3]
  4139fa:	4b7c      	ldr	r3, [pc, #496]	; (413bec <decompress+0x2cc>)
  4139fc:	681c      	ldr	r4, [r3, #0]
  4139fe:	4b79      	ldr	r3, [pc, #484]	; (413be4 <decompress+0x2c4>)
  413a00:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413a02:	1e51      	subs	r1, r2, #1
  413a04:	2907      	cmp	r1, #7
  413a06:	d8c5      	bhi.n	413994 <decompress+0x74>
  413a08:	a301      	add	r3, pc, #4	; (adr r3, 413a10 <decompress+0xf0>)
  413a0a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  413a0e:	bf00      	nop
  413a10:	0041397d 	.word	0x0041397d
  413a14:	004139a3 	.word	0x004139a3
  413a18:	00413983 	.word	0x00413983
  413a1c:	00413989 	.word	0x00413989
  413a20:	00413995 	.word	0x00413995
  413a24:	00413995 	.word	0x00413995
  413a28:	00413995 	.word	0x00413995
  413a2c:	0041398f 	.word	0x0041398f
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413a30:	f81a 9003 	ldrb.w	r9, [sl, r3]
  413a34:	4453      	add	r3, sl
  413a36:	785b      	ldrb	r3, [r3, #1]
  413a38:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  413a3c:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413a3e:	4249      	negs	r1, r1
  413a40:	1a89      	subs	r1, r1, r2
  413a42:	3110      	adds	r1, #16
  413a44:	410b      	asrs	r3, r1
  413a46:	ea03 0308 	and.w	r3, r3, r8
  413a4a:	e7bc      	b.n	4139c6 <decompress+0xa6>
            rle_cnt = 0;
  413a4c:	f04f 0800 	mov.w	r8, #0
  413a50:	4968      	ldr	r1, [pc, #416]	; (413bf4 <decompress+0x2d4>)
  413a52:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  413a56:	f04f 0801 	mov.w	r8, #1
  413a5a:	4963      	ldr	r1, [pc, #396]	; (413be8 <decompress+0x2c8>)
  413a5c:	f881 8000 	strb.w	r8, [r1]
  413a60:	e7b6      	b.n	4139d0 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  413a62:	2b01      	cmp	r3, #1
  413a64:	d004      	beq.n	413a70 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  413a66:	2b02      	cmp	r3, #2
  413a68:	f000 80f3 	beq.w	413c52 <decompress+0x332>
    uint8_t ret = 0;
  413a6c:	2300      	movs	r3, #0
  413a6e:	e7b4      	b.n	4139da <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  413a70:	4b5b      	ldr	r3, [pc, #364]	; (413be0 <decompress+0x2c0>)
  413a72:	f8d3 8000 	ldr.w	r8, [r3]
  413a76:	4b5d      	ldr	r3, [pc, #372]	; (413bec <decompress+0x2cc>)
  413a78:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413a7a:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413a7c:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413a80:	1c5c      	adds	r4, r3, #1
  413a82:	2c07      	cmp	r4, #7
  413a84:	d81d      	bhi.n	413ac2 <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413a86:	f818 1001 	ldrb.w	r1, [r8, r1]
  413a8a:	f1c3 0307 	rsb	r3, r3, #7
  413a8e:	fa41 f303 	asr.w	r3, r1, r3
  413a92:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  413a96:	4b57      	ldr	r3, [pc, #348]	; (413bf4 <decompress+0x2d4>)
  413a98:	781c      	ldrb	r4, [r3, #0]
  413a9a:	3401      	adds	r4, #1
  413a9c:	b2e4      	uxtb	r4, r4
  413a9e:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  413aa0:	3201      	adds	r2, #1
  413aa2:	4b52      	ldr	r3, [pc, #328]	; (413bec <decompress+0x2cc>)
  413aa4:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413aa6:	2901      	cmp	r1, #1
  413aa8:	d018      	beq.n	413adc <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413aaa:	4b4e      	ldr	r3, [pc, #312]	; (413be4 <decompress+0x2c4>)
  413aac:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413aae:	1e63      	subs	r3, r4, #1
  413ab0:	2b07      	cmp	r3, #7
  413ab2:	f200 808e 	bhi.w	413bd2 <decompress+0x2b2>
  413ab6:	e8df f003 	tbb	[pc, r3]
  413aba:	a184      	.short	0xa184
  413abc:	8c8c8886 	.word	0x8c8c8886
  413ac0:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413ac2:	f818 4001 	ldrb.w	r4, [r8, r1]
  413ac6:	4441      	add	r1, r8
  413ac8:	7849      	ldrb	r1, [r1, #1]
  413aca:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  413ace:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413ad0:	f1c3 030f 	rsb	r3, r3, #15
  413ad4:	4119      	asrs	r1, r3
  413ad6:	f001 0101 	and.w	r1, r1, #1
  413ada:	e7dc      	b.n	413a96 <decompress+0x176>
            ret = rle_prev_v;
  413adc:	4b44      	ldr	r3, [pc, #272]	; (413bf0 <decompress+0x2d0>)
  413ade:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413ae0:	2c0b      	cmp	r4, #11
  413ae2:	f47f af7a 	bne.w	4139da <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  413ae6:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  413ae8:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  413aec:	f109 0a06 	add.w	sl, r9, #6
  413af0:	f1ba 0f07 	cmp.w	sl, #7
  413af4:	d815      	bhi.n	413b22 <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413af6:	f818 4004 	ldrb.w	r4, [r8, r4]
  413afa:	f1c9 0902 	rsb	r9, r9, #2
  413afe:	fa44 f409 	asr.w	r4, r4, r9
  413b02:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413b06:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 413bf4 <decompress+0x2d4>
  413b0a:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  413b0e:	3206      	adds	r2, #6
  413b10:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 413bec <decompress+0x2cc>
  413b14:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  413b18:	b18c      	cbz	r4, 413b3e <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  413b1a:	2102      	movs	r1, #2
  413b1c:	4a32      	ldr	r2, [pc, #200]	; (413be8 <decompress+0x2c8>)
  413b1e:	7011      	strb	r1, [r2, #0]
  413b20:	e75b      	b.n	4139da <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413b22:	f818 a004 	ldrb.w	sl, [r8, r4]
  413b26:	4444      	add	r4, r8
  413b28:	7864      	ldrb	r4, [r4, #1]
  413b2a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  413b2e:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413b30:	f1c9 090a 	rsb	r9, r9, #10
  413b34:	fa44 f409 	asr.w	r4, r4, r9
  413b38:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  413b3c:	e7e3      	b.n	413b06 <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413b3e:	4b29      	ldr	r3, [pc, #164]	; (413be4 <decompress+0x2c4>)
  413b40:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  413b42:	1e63      	subs	r3, r4, #1
  413b44:	2b07      	cmp	r3, #7
  413b46:	d824      	bhi.n	413b92 <decompress+0x272>
  413b48:	e8df f003 	tbb	[pc, r3]
  413b4c:	1f042905 	.word	0x1f042905
  413b50:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  413b54:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  413b56:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413b5a:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413b5e:	eb03 0a04 	add.w	sl, r3, r4
  413b62:	f1ba 0f07 	cmp.w	sl, #7
  413b66:	d81c      	bhi.n	413ba2 <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413b68:	f818 8009 	ldrb.w	r8, [r8, r9]
  413b6c:	425b      	negs	r3, r3
  413b6e:	1b1b      	subs	r3, r3, r4
  413b70:	3308      	adds	r3, #8
  413b72:	fa48 f303 	asr.w	r3, r8, r3
  413b76:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413b78:	491d      	ldr	r1, [pc, #116]	; (413bf0 <decompress+0x2d0>)
  413b7a:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413b7c:	4422      	add	r2, r4
  413b7e:	491b      	ldr	r1, [pc, #108]	; (413bec <decompress+0x2cc>)
  413b80:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413b82:	2100      	movs	r1, #0
  413b84:	4a18      	ldr	r2, [pc, #96]	; (413be8 <decompress+0x2c8>)
  413b86:	7011      	strb	r1, [r2, #0]
  413b88:	e727      	b.n	4139da <decompress+0xba>
            bit_mask = 0xF;
  413b8a:	210f      	movs	r1, #15
  413b8c:	e7e3      	b.n	413b56 <decompress+0x236>
            bit_mask = 0xFF;
  413b8e:	21ff      	movs	r1, #255	; 0xff
  413b90:	e7e1      	b.n	413b56 <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413b92:	2101      	movs	r1, #1
  413b94:	40a1      	lsls	r1, r4
  413b96:	b2c9      	uxtb	r1, r1
  413b98:	3901      	subs	r1, #1
  413b9a:	b2c9      	uxtb	r1, r1
  413b9c:	e7db      	b.n	413b56 <decompress+0x236>
            bit_mask = 0x3;
  413b9e:	2103      	movs	r1, #3
  413ba0:	e7d9      	b.n	413b56 <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413ba2:	f818 a009 	ldrb.w	sl, [r8, r9]
  413ba6:	44c8      	add	r8, r9
  413ba8:	f898 8001 	ldrb.w	r8, [r8, #1]
  413bac:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  413bb0:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413bb4:	425b      	negs	r3, r3
  413bb6:	1b1b      	subs	r3, r3, r4
  413bb8:	3310      	adds	r3, #16
  413bba:	fa48 f303 	asr.w	r3, r8, r3
  413bbe:	400b      	ands	r3, r1
  413bc0:	e7da      	b.n	413b78 <decompress+0x258>
            bit_mask = 0x1;
  413bc2:	2301      	movs	r3, #1
  413bc4:	e01b      	b.n	413bfe <decompress+0x2de>
            bit_mask = 0x7;
  413bc6:	2307      	movs	r3, #7
  413bc8:	e019      	b.n	413bfe <decompress+0x2de>
            bit_mask = 0xF;
  413bca:	230f      	movs	r3, #15
  413bcc:	e017      	b.n	413bfe <decompress+0x2de>
            bit_mask = 0xFF;
  413bce:	23ff      	movs	r3, #255	; 0xff
  413bd0:	e015      	b.n	413bfe <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413bd2:	2301      	movs	r3, #1
  413bd4:	40a3      	lsls	r3, r4
  413bd6:	b2db      	uxtb	r3, r3
  413bd8:	3b01      	subs	r3, #1
  413bda:	b2db      	uxtb	r3, r3
  413bdc:	e00f      	b.n	413bfe <decompress+0x2de>
  413bde:	bf00      	nop
  413be0:	2040c734 	.word	0x2040c734
  413be4:	2040c730 	.word	0x2040c730
  413be8:	2040c740 	.word	0x2040c740
  413bec:	2040c73c 	.word	0x2040c73c
  413bf0:	2040c738 	.word	0x2040c738
  413bf4:	2040c731 	.word	0x2040c731
  413bf8:	00416531 	.word	0x00416531
            bit_mask = 0x3;
  413bfc:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413bfe:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413c02:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413c06:	eb01 0a04 	add.w	sl, r1, r4
  413c0a:	f1ba 0f07 	cmp.w	sl, #7
  413c0e:	d810      	bhi.n	413c32 <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413c10:	f818 8009 	ldrb.w	r8, [r8, r9]
  413c14:	4249      	negs	r1, r1
  413c16:	1b09      	subs	r1, r1, r4
  413c18:	3108      	adds	r1, #8
  413c1a:	fa48 f101 	asr.w	r1, r8, r1
  413c1e:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413c20:	49b4      	ldr	r1, [pc, #720]	; (413ef4 <decompress+0x5d4>)
  413c22:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413c24:	4422      	add	r2, r4
  413c26:	49b4      	ldr	r1, [pc, #720]	; (413ef8 <decompress+0x5d8>)
  413c28:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413c2a:	2100      	movs	r1, #0
  413c2c:	4ab3      	ldr	r2, [pc, #716]	; (413efc <decompress+0x5dc>)
  413c2e:	7011      	strb	r1, [r2, #0]
  413c30:	e6d3      	b.n	4139da <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413c32:	f818 a009 	ldrb.w	sl, [r8, r9]
  413c36:	44c8      	add	r8, r9
  413c38:	f898 8001 	ldrb.w	r8, [r8, #1]
  413c3c:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  413c40:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413c44:	4249      	negs	r1, r1
  413c46:	1b09      	subs	r1, r1, r4
  413c48:	3110      	adds	r1, #16
  413c4a:	fa48 f101 	asr.w	r1, r8, r1
  413c4e:	400b      	ands	r3, r1
  413c50:	e7e6      	b.n	413c20 <decompress+0x300>
        ret = rle_prev_v;
  413c52:	4ba8      	ldr	r3, [pc, #672]	; (413ef4 <decompress+0x5d4>)
  413c54:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  413c56:	49aa      	ldr	r1, [pc, #680]	; (413f00 <decompress+0x5e0>)
  413c58:	780a      	ldrb	r2, [r1, #0]
  413c5a:	3a01      	subs	r2, #1
  413c5c:	b2d2      	uxtb	r2, r2
  413c5e:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  413c60:	2a00      	cmp	r2, #0
  413c62:	f47f aeba 	bne.w	4139da <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413c66:	4ba7      	ldr	r3, [pc, #668]	; (413f04 <decompress+0x5e4>)
  413c68:	f8d3 a000 	ldr.w	sl, [r3]
  413c6c:	4ba2      	ldr	r3, [pc, #648]	; (413ef8 <decompress+0x5d8>)
  413c6e:	681c      	ldr	r4, [r3, #0]
  413c70:	4ba5      	ldr	r3, [pc, #660]	; (413f08 <decompress+0x5e8>)
  413c72:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413c74:	1e53      	subs	r3, r2, #1
  413c76:	2b07      	cmp	r3, #7
  413c78:	d80d      	bhi.n	413c96 <decompress+0x376>
  413c7a:	e8df f003 	tbb	[pc, r3]
  413c7e:	1204      	.short	0x1204
  413c80:	0c0c0806 	.word	0x0c0c0806
  413c84:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  413c86:	2301      	movs	r3, #1
  413c88:	e00c      	b.n	413ca4 <decompress+0x384>
            bit_mask = 0x7;
  413c8a:	2307      	movs	r3, #7
  413c8c:	e00a      	b.n	413ca4 <decompress+0x384>
            bit_mask = 0xF;
  413c8e:	230f      	movs	r3, #15
  413c90:	e008      	b.n	413ca4 <decompress+0x384>
            bit_mask = 0xFF;
  413c92:	23ff      	movs	r3, #255	; 0xff
  413c94:	e006      	b.n	413ca4 <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413c96:	2301      	movs	r3, #1
  413c98:	4093      	lsls	r3, r2
  413c9a:	b2db      	uxtb	r3, r3
  413c9c:	3b01      	subs	r3, #1
  413c9e:	b2db      	uxtb	r3, r3
  413ca0:	e000      	b.n	413ca4 <decompress+0x384>
            bit_mask = 0x3;
  413ca2:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413ca4:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  413ca8:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  413cac:	eb01 0902 	add.w	r9, r1, r2
  413cb0:	f1b9 0f07 	cmp.w	r9, #7
  413cb4:	d810      	bhi.n	413cd8 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413cb6:	f81a 8008 	ldrb.w	r8, [sl, r8]
  413cba:	4249      	negs	r1, r1
  413cbc:	1a89      	subs	r1, r1, r2
  413cbe:	3108      	adds	r1, #8
  413cc0:	fa48 f101 	asr.w	r1, r8, r1
  413cc4:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413cc6:	498b      	ldr	r1, [pc, #556]	; (413ef4 <decompress+0x5d4>)
  413cc8:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413cca:	4422      	add	r2, r4
  413ccc:	498a      	ldr	r1, [pc, #552]	; (413ef8 <decompress+0x5d8>)
  413cce:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413cd0:	2100      	movs	r1, #0
  413cd2:	4a8a      	ldr	r2, [pc, #552]	; (413efc <decompress+0x5dc>)
  413cd4:	7011      	strb	r1, [r2, #0]
  413cd6:	e680      	b.n	4139da <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413cd8:	f81a 9008 	ldrb.w	r9, [sl, r8]
  413cdc:	44d0      	add	r8, sl
  413cde:	f898 8001 	ldrb.w	r8, [r8, #1]
  413ce2:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  413ce6:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413cea:	4249      	negs	r1, r1
  413cec:	1a89      	subs	r1, r1, r2
  413cee:	3110      	adds	r1, #16
  413cf0:	fa48 f101 	asr.w	r1, r8, r1
  413cf4:	400b      	ands	r3, r1
  413cf6:	e7e6      	b.n	413cc6 <decompress+0x3a6>
  413cf8:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  413cfa:	f04f 0c00 	mov.w	ip, #0
  413cfe:	4660      	mov	r0, ip
  413d00:	f8dd e008 	ldr.w	lr, [sp, #8]
  413d04:	e048      	b.n	413d98 <decompress+0x478>
        switch(val) {
  413d06:	2907      	cmp	r1, #7
  413d08:	d805      	bhi.n	413d16 <decompress+0x3f6>
  413d0a:	e8df f001 	tbb	[pc, r1]
  413d0e:	0723      	.short	0x0723
  413d10:	17130f0b 	.word	0x17130f0b
  413d14:	1f1b      	.short	0x1f1b
        len = 4;
  413d16:	f04f 0804 	mov.w	r8, #4
  413d1a:	e01e      	b.n	413d5a <decompress+0x43a>
  413d1c:	f04f 0804 	mov.w	r8, #4
                val = 2;
  413d20:	2102      	movs	r1, #2
  413d22:	e01a      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d24:	f04f 0804 	mov.w	r8, #4
                val = 4;
  413d28:	4641      	mov	r1, r8
  413d2a:	e016      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d2c:	f04f 0804 	mov.w	r8, #4
                val = 6;
  413d30:	2106      	movs	r1, #6
  413d32:	e012      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d34:	f04f 0804 	mov.w	r8, #4
                val = 9;
  413d38:	2109      	movs	r1, #9
  413d3a:	e00e      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d3c:	f04f 0804 	mov.w	r8, #4
                val = 11;
  413d40:	210b      	movs	r1, #11
  413d42:	e00a      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d44:	f04f 0804 	mov.w	r8, #4
                val = 13;
  413d48:	210d      	movs	r1, #13
  413d4a:	e006      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d4c:	f04f 0804 	mov.w	r8, #4
                val = 15;
  413d50:	210f      	movs	r1, #15
  413d52:	e002      	b.n	413d5a <decompress+0x43a>
        len = 4;
  413d54:	f04f 0804 	mov.w	r8, #4
                val = 0;
  413d58:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413d5a:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  413d5e:	4252      	negs	r2, r2
  413d60:	eba2 0208 	sub.w	r2, r2, r8
  413d64:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413d66:	2301      	movs	r3, #1
  413d68:	fa03 f308 	lsl.w	r3, r3, r8
  413d6c:	b2db      	uxtb	r3, r3
  413d6e:	3b01      	subs	r3, #1
  413d70:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413d72:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  413d76:	43db      	mvns	r3, r3
  413d78:	4093      	lsls	r3, r2
  413d7a:	f816 9008 	ldrb.w	r9, [r6, r8]
  413d7e:	ea09 0303 	and.w	r3, r9, r3
  413d82:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  413d84:	fa01 f202 	lsl.w	r2, r1, r2
  413d88:	431a      	orrs	r2, r3
  413d8a:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  413d8e:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  413d90:	f10c 0c01 	add.w	ip, ip, #1
  413d94:	fa0f fc8c 	sxth.w	ip, ip
  413d98:	45a4      	cmp	ip, r4
  413d9a:	da05      	bge.n	413da8 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  413d9c:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  413da0:	2f03      	cmp	r7, #3
  413da2:	d0b0      	beq.n	413d06 <decompress+0x3e6>
  413da4:	46b8      	mov	r8, r7
  413da6:	e7d8      	b.n	413d5a <decompress+0x43a>
  413da8:	2301      	movs	r3, #1
  413daa:	9300      	str	r3, [sp, #0]
  413dac:	f000 bc62 	b.w	414674 <decompress+0xd54>
            bit_mask = 0x1;
  413db0:	2301      	movs	r3, #1
  413db2:	e00c      	b.n	413dce <decompress+0x4ae>
            bit_mask = 0x7;
  413db4:	2307      	movs	r3, #7
  413db6:	e00a      	b.n	413dce <decompress+0x4ae>
            bit_mask = 0xF;
  413db8:	230f      	movs	r3, #15
  413dba:	e008      	b.n	413dce <decompress+0x4ae>
            bit_mask = 0xFF;
  413dbc:	23ff      	movs	r3, #255	; 0xff
  413dbe:	e006      	b.n	413dce <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413dc0:	2301      	movs	r3, #1
  413dc2:	408b      	lsls	r3, r1
  413dc4:	b2db      	uxtb	r3, r3
  413dc6:	3b01      	subs	r3, #1
  413dc8:	b2db      	uxtb	r3, r3
  413dca:	e000      	b.n	413dce <decompress+0x4ae>
            bit_mask = 0x3;
  413dcc:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413dce:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  413dd2:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  413dd6:	eb02 0b01 	add.w	fp, r2, r1
  413dda:	f1bb 0f07 	cmp.w	fp, #7
  413dde:	d83d      	bhi.n	413e5c <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413de0:	f81a 8008 	ldrb.w	r8, [sl, r8]
  413de4:	4252      	negs	r2, r2
  413de6:	1a52      	subs	r2, r2, r1
  413de8:	3208      	adds	r2, #8
  413dea:	fa48 f202 	asr.w	r2, r8, r2
  413dee:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413df0:	b118      	cbz	r0, 413dfa <decompress+0x4da>
  413df2:	4a40      	ldr	r2, [pc, #256]	; (413ef4 <decompress+0x5d4>)
  413df4:	7812      	ldrb	r2, [r2, #0]
  413df6:	429a      	cmp	r2, r3
  413df8:	d041      	beq.n	413e7e <decompress+0x55e>
        rle_prev_v = ret;
  413dfa:	4a3e      	ldr	r2, [pc, #248]	; (413ef4 <decompress+0x5d4>)
  413dfc:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  413dfe:	4401      	add	r1, r0
  413e00:	4a3d      	ldr	r2, [pc, #244]	; (413ef8 <decompress+0x5d8>)
  413e02:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  413e04:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413e08:	f10e 0e01 	add.w	lr, lr, #1
  413e0c:	fa0f fe8e 	sxth.w	lr, lr
  413e10:	4574      	cmp	r4, lr
  413e12:	f340 8191 	ble.w	414138 <decompress+0x818>
        out[i] = rle_next();
  413e16:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  413e1a:	4b38      	ldr	r3, [pc, #224]	; (413efc <decompress+0x5dc>)
  413e1c:	781b      	ldrb	r3, [r3, #0]
  413e1e:	2b00      	cmp	r3, #0
  413e20:	d138      	bne.n	413e94 <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413e22:	4b38      	ldr	r3, [pc, #224]	; (413f04 <decompress+0x5e4>)
  413e24:	f8d3 a000 	ldr.w	sl, [r3]
  413e28:	4b33      	ldr	r3, [pc, #204]	; (413ef8 <decompress+0x5d8>)
  413e2a:	6818      	ldr	r0, [r3, #0]
  413e2c:	4b36      	ldr	r3, [pc, #216]	; (413f08 <decompress+0x5e8>)
  413e2e:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  413e30:	1e4b      	subs	r3, r1, #1
  413e32:	2b07      	cmp	r3, #7
  413e34:	d8c4      	bhi.n	413dc0 <decompress+0x4a0>
  413e36:	a201      	add	r2, pc, #4	; (adr r2, 413e3c <decompress+0x51c>)
  413e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  413e3c:	00413db1 	.word	0x00413db1
  413e40:	00413dcd 	.word	0x00413dcd
  413e44:	00413db5 	.word	0x00413db5
  413e48:	00413db9 	.word	0x00413db9
  413e4c:	00413dc1 	.word	0x00413dc1
  413e50:	00413dc1 	.word	0x00413dc1
  413e54:	00413dc1 	.word	0x00413dc1
  413e58:	00413dbd 	.word	0x00413dbd
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413e5c:	f81a b008 	ldrb.w	fp, [sl, r8]
  413e60:	44d0      	add	r8, sl
  413e62:	f898 8001 	ldrb.w	r8, [r8, #1]
  413e66:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413e6a:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413e6e:	4252      	negs	r2, r2
  413e70:	1a52      	subs	r2, r2, r1
  413e72:	3210      	adds	r2, #16
  413e74:	fa4b fb02 	asr.w	fp, fp, r2
  413e78:	ea0b 0303 	and.w	r3, fp, r3
  413e7c:	e7b8      	b.n	413df0 <decompress+0x4d0>
            rle_cnt = 0;
  413e7e:	f04f 0800 	mov.w	r8, #0
  413e82:	4a1f      	ldr	r2, [pc, #124]	; (413f00 <decompress+0x5e0>)
  413e84:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  413e88:	f04f 0801 	mov.w	r8, #1
  413e8c:	4a1b      	ldr	r2, [pc, #108]	; (413efc <decompress+0x5dc>)
  413e8e:	f882 8000 	strb.w	r8, [r2]
  413e92:	e7b2      	b.n	413dfa <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  413e94:	2b01      	cmp	r3, #1
  413e96:	d004      	beq.n	413ea2 <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  413e98:	2b02      	cmp	r3, #2
  413e9a:	f000 80f3 	beq.w	414084 <decompress+0x764>
    uint8_t ret = 0;
  413e9e:	2300      	movs	r3, #0
  413ea0:	e7b0      	b.n	413e04 <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  413ea2:	4b18      	ldr	r3, [pc, #96]	; (413f04 <decompress+0x5e4>)
  413ea4:	f8d3 8000 	ldr.w	r8, [r3]
  413ea8:	4b13      	ldr	r3, [pc, #76]	; (413ef8 <decompress+0x5d8>)
  413eaa:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413eac:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413eae:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413eb2:	1c58      	adds	r0, r3, #1
  413eb4:	2807      	cmp	r0, #7
  413eb6:	d829      	bhi.n	413f0c <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413eb8:	f818 1001 	ldrb.w	r1, [r8, r1]
  413ebc:	f1c3 0307 	rsb	r3, r3, #7
  413ec0:	fa41 f303 	asr.w	r3, r1, r3
  413ec4:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  413ec8:	4b0d      	ldr	r3, [pc, #52]	; (413f00 <decompress+0x5e0>)
  413eca:	7818      	ldrb	r0, [r3, #0]
  413ecc:	3001      	adds	r0, #1
  413ece:	b2c0      	uxtb	r0, r0
  413ed0:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  413ed2:	3201      	adds	r2, #1
  413ed4:	4b08      	ldr	r3, [pc, #32]	; (413ef8 <decompress+0x5d8>)
  413ed6:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413ed8:	2901      	cmp	r1, #1
  413eda:	d024      	beq.n	413f26 <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413edc:	4b0a      	ldr	r3, [pc, #40]	; (413f08 <decompress+0x5e8>)
  413ede:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  413ee0:	1e43      	subs	r3, r0, #1
  413ee2:	2b07      	cmp	r3, #7
  413ee4:	f200 809c 	bhi.w	414020 <decompress+0x700>
  413ee8:	e8df f003 	tbb	[pc, r3]
  413eec:	9694a092 	.word	0x9694a092
  413ef0:	989a9a9a 	.word	0x989a9a9a
  413ef4:	2040c738 	.word	0x2040c738
  413ef8:	2040c73c 	.word	0x2040c73c
  413efc:	2040c740 	.word	0x2040c740
  413f00:	2040c731 	.word	0x2040c731
  413f04:	2040c734 	.word	0x2040c734
  413f08:	2040c730 	.word	0x2040c730
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413f0c:	f818 0001 	ldrb.w	r0, [r8, r1]
  413f10:	4441      	add	r1, r8
  413f12:	7849      	ldrb	r1, [r1, #1]
  413f14:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  413f18:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413f1a:	f1c3 030f 	rsb	r3, r3, #15
  413f1e:	4119      	asrs	r1, r3
  413f20:	f001 0101 	and.w	r1, r1, #1
  413f24:	e7d0      	b.n	413ec8 <decompress+0x5a8>
            ret = rle_prev_v;
  413f26:	4bb8      	ldr	r3, [pc, #736]	; (414208 <decompress+0x8e8>)
  413f28:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413f2a:	280b      	cmp	r0, #11
  413f2c:	f47f af6a 	bne.w	413e04 <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  413f30:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413f32:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  413f36:	f10a 0b06 	add.w	fp, sl, #6
  413f3a:	f1bb 0f07 	cmp.w	fp, #7
  413f3e:	d815      	bhi.n	413f6c <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413f40:	f818 0000 	ldrb.w	r0, [r8, r0]
  413f44:	f1ca 0a02 	rsb	sl, sl, #2
  413f48:	fa40 f00a 	asr.w	r0, r0, sl
  413f4c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413f50:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 414218 <decompress+0x8f8>
  413f54:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  413f58:	3206      	adds	r2, #6
  413f5a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 414214 <decompress+0x8f4>
  413f5e:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  413f62:	b188      	cbz	r0, 413f88 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  413f64:	2102      	movs	r1, #2
  413f66:	4aa9      	ldr	r2, [pc, #676]	; (41420c <decompress+0x8ec>)
  413f68:	7011      	strb	r1, [r2, #0]
  413f6a:	e74b      	b.n	413e04 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413f6c:	f818 b000 	ldrb.w	fp, [r8, r0]
  413f70:	4440      	add	r0, r8
  413f72:	7840      	ldrb	r0, [r0, #1]
  413f74:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  413f78:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413f7a:	f1ca 0a0a 	rsb	sl, sl, #10
  413f7e:	fa40 f00a 	asr.w	r0, r0, sl
  413f82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  413f86:	e7e3      	b.n	413f50 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413f88:	4ba1      	ldr	r3, [pc, #644]	; (414210 <decompress+0x8f0>)
  413f8a:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  413f8e:	f10b 33ff 	add.w	r3, fp, #4294967295
  413f92:	2b07      	cmp	r3, #7
  413f94:	d80b      	bhi.n	413fae <decompress+0x68e>
  413f96:	e8df f003 	tbb	[pc, r3]
  413f9a:	1112      	.short	0x1112
  413f9c:	0a0a0604 	.word	0x0a0a0604
  413fa0:	080a      	.short	0x080a
            bit_mask = 0x7;
  413fa2:	2107      	movs	r1, #7
  413fa4:	e00b      	b.n	413fbe <decompress+0x69e>
            bit_mask = 0xF;
  413fa6:	210f      	movs	r1, #15
  413fa8:	e009      	b.n	413fbe <decompress+0x69e>
            bit_mask = 0xFF;
  413faa:	21ff      	movs	r1, #255	; 0xff
  413fac:	e007      	b.n	413fbe <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413fae:	2101      	movs	r1, #1
  413fb0:	fa01 f10b 	lsl.w	r1, r1, fp
  413fb4:	b2c9      	uxtb	r1, r1
  413fb6:	3901      	subs	r1, #1
  413fb8:	b2c9      	uxtb	r1, r1
  413fba:	e000      	b.n	413fbe <decompress+0x69e>
            bit_mask = 0x3;
  413fbc:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  413fbe:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413fc0:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413fc4:	eb03 0a0b 	add.w	sl, r3, fp
  413fc8:	f1ba 0f07 	cmp.w	sl, #7
  413fcc:	d811      	bhi.n	413ff2 <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413fce:	f818 0000 	ldrb.w	r0, [r8, r0]
  413fd2:	425b      	negs	r3, r3
  413fd4:	eba3 030b 	sub.w	r3, r3, fp
  413fd8:	3308      	adds	r3, #8
  413fda:	fa40 f303 	asr.w	r3, r0, r3
  413fde:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413fe0:	4989      	ldr	r1, [pc, #548]	; (414208 <decompress+0x8e8>)
  413fe2:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413fe4:	445a      	add	r2, fp
  413fe6:	498b      	ldr	r1, [pc, #556]	; (414214 <decompress+0x8f4>)
  413fe8:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413fea:	2100      	movs	r1, #0
  413fec:	4a87      	ldr	r2, [pc, #540]	; (41420c <decompress+0x8ec>)
  413fee:	7011      	strb	r1, [r2, #0]
  413ff0:	e708      	b.n	413e04 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413ff2:	f818 a000 	ldrb.w	sl, [r8, r0]
  413ff6:	4440      	add	r0, r8
  413ff8:	7840      	ldrb	r0, [r0, #1]
  413ffa:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  413ffe:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414000:	425b      	negs	r3, r3
  414002:	eba3 030b 	sub.w	r3, r3, fp
  414006:	3310      	adds	r3, #16
  414008:	fa40 f303 	asr.w	r3, r0, r3
  41400c:	400b      	ands	r3, r1
  41400e:	e7e7      	b.n	413fe0 <decompress+0x6c0>
            bit_mask = 0x1;
  414010:	2301      	movs	r3, #1
  414012:	e00c      	b.n	41402e <decompress+0x70e>
            bit_mask = 0x7;
  414014:	2307      	movs	r3, #7
  414016:	e00a      	b.n	41402e <decompress+0x70e>
            bit_mask = 0xF;
  414018:	230f      	movs	r3, #15
  41401a:	e008      	b.n	41402e <decompress+0x70e>
            bit_mask = 0xFF;
  41401c:	23ff      	movs	r3, #255	; 0xff
  41401e:	e006      	b.n	41402e <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414020:	2301      	movs	r3, #1
  414022:	4083      	lsls	r3, r0
  414024:	b2db      	uxtb	r3, r3
  414026:	3b01      	subs	r3, #1
  414028:	b2db      	uxtb	r3, r3
  41402a:	e000      	b.n	41402e <decompress+0x70e>
            bit_mask = 0x3;
  41402c:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41402e:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414032:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  414036:	eb01 0b00 	add.w	fp, r1, r0
  41403a:	f1bb 0f07 	cmp.w	fp, #7
  41403e:	d810      	bhi.n	414062 <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414040:	f818 800a 	ldrb.w	r8, [r8, sl]
  414044:	4249      	negs	r1, r1
  414046:	1a09      	subs	r1, r1, r0
  414048:	3108      	adds	r1, #8
  41404a:	fa48 f101 	asr.w	r1, r8, r1
  41404e:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414050:	496d      	ldr	r1, [pc, #436]	; (414208 <decompress+0x8e8>)
  414052:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  414054:	4402      	add	r2, r0
  414056:	496f      	ldr	r1, [pc, #444]	; (414214 <decompress+0x8f4>)
  414058:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  41405a:	2100      	movs	r1, #0
  41405c:	4a6b      	ldr	r2, [pc, #428]	; (41420c <decompress+0x8ec>)
  41405e:	7011      	strb	r1, [r2, #0]
  414060:	e6d0      	b.n	413e04 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414062:	f818 b00a 	ldrb.w	fp, [r8, sl]
  414066:	44d0      	add	r8, sl
  414068:	f898 8001 	ldrb.w	r8, [r8, #1]
  41406c:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414070:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414074:	4249      	negs	r1, r1
  414076:	1a09      	subs	r1, r1, r0
  414078:	3110      	adds	r1, #16
  41407a:	fa4b fb01 	asr.w	fp, fp, r1
  41407e:	ea0b 0303 	and.w	r3, fp, r3
  414082:	e7e5      	b.n	414050 <decompress+0x730>
        ret = rle_prev_v;
  414084:	4b60      	ldr	r3, [pc, #384]	; (414208 <decompress+0x8e8>)
  414086:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  414088:	4963      	ldr	r1, [pc, #396]	; (414218 <decompress+0x8f8>)
  41408a:	780a      	ldrb	r2, [r1, #0]
  41408c:	3a01      	subs	r2, #1
  41408e:	b2d2      	uxtb	r2, r2
  414090:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414092:	2a00      	cmp	r2, #0
  414094:	f47f aeb6 	bne.w	413e04 <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414098:	4b60      	ldr	r3, [pc, #384]	; (41421c <decompress+0x8fc>)
  41409a:	f8d3 a000 	ldr.w	sl, [r3]
  41409e:	4b5d      	ldr	r3, [pc, #372]	; (414214 <decompress+0x8f4>)
  4140a0:	6818      	ldr	r0, [r3, #0]
  4140a2:	4b5b      	ldr	r3, [pc, #364]	; (414210 <decompress+0x8f0>)
  4140a4:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  4140a6:	1e4b      	subs	r3, r1, #1
  4140a8:	2b07      	cmp	r3, #7
  4140aa:	d80d      	bhi.n	4140c8 <decompress+0x7a8>
  4140ac:	e8df f003 	tbb	[pc, r3]
  4140b0:	08061204 	.word	0x08061204
  4140b4:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  4140b8:	2301      	movs	r3, #1
  4140ba:	e00c      	b.n	4140d6 <decompress+0x7b6>
            bit_mask = 0x7;
  4140bc:	2307      	movs	r3, #7
  4140be:	e00a      	b.n	4140d6 <decompress+0x7b6>
            bit_mask = 0xF;
  4140c0:	230f      	movs	r3, #15
  4140c2:	e008      	b.n	4140d6 <decompress+0x7b6>
            bit_mask = 0xFF;
  4140c4:	23ff      	movs	r3, #255	; 0xff
  4140c6:	e006      	b.n	4140d6 <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4140c8:	2301      	movs	r3, #1
  4140ca:	408b      	lsls	r3, r1
  4140cc:	b2db      	uxtb	r3, r3
  4140ce:	3b01      	subs	r3, #1
  4140d0:	b2db      	uxtb	r3, r3
  4140d2:	e000      	b.n	4140d6 <decompress+0x7b6>
            bit_mask = 0x3;
  4140d4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4140d6:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  4140da:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  4140de:	eb02 0b01 	add.w	fp, r2, r1
  4140e2:	f1bb 0f07 	cmp.w	fp, #7
  4140e6:	d810      	bhi.n	41410a <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4140e8:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4140ec:	4252      	negs	r2, r2
  4140ee:	1a52      	subs	r2, r2, r1
  4140f0:	3208      	adds	r2, #8
  4140f2:	fa48 f202 	asr.w	r2, r8, r2
  4140f6:	4013      	ands	r3, r2
            rle_prev_v = ret;
  4140f8:	4a43      	ldr	r2, [pc, #268]	; (414208 <decompress+0x8e8>)
  4140fa:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  4140fc:	4401      	add	r1, r0
  4140fe:	4a45      	ldr	r2, [pc, #276]	; (414214 <decompress+0x8f4>)
  414100:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  414102:	2100      	movs	r1, #0
  414104:	4a41      	ldr	r2, [pc, #260]	; (41420c <decompress+0x8ec>)
  414106:	7011      	strb	r1, [r2, #0]
  414108:	e67c      	b.n	413e04 <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41410a:	f81a b008 	ldrb.w	fp, [sl, r8]
  41410e:	44d0      	add	r8, sl
  414110:	f898 8001 	ldrb.w	r8, [r8, #1]
  414114:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  414118:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41411c:	4252      	negs	r2, r2
  41411e:	1a52      	subs	r2, r2, r1
  414120:	3210      	adds	r2, #16
  414122:	fa4b fb02 	asr.w	fp, fp, r2
  414126:	ea0b 0303 	and.w	r3, fp, r3
  41412a:	e7e5      	b.n	4140f8 <decompress+0x7d8>
  41412c:	f04f 0e00 	mov.w	lr, #0
  414130:	9005      	str	r0, [sp, #20]
  414132:	f8dd 900c 	ldr.w	r9, [sp, #12]
  414136:	e66b      	b.n	413e10 <decompress+0x4f0>
  414138:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  41413a:	f04f 0c00 	mov.w	ip, #0
  41413e:	f8dd e008 	ldr.w	lr, [sp, #8]
  414142:	f8dd 800c 	ldr.w	r8, [sp, #12]
  414146:	e048      	b.n	4141da <decompress+0x8ba>
        switch(val) {
  414148:	2907      	cmp	r1, #7
  41414a:	d805      	bhi.n	414158 <decompress+0x838>
  41414c:	e8df f001 	tbb	[pc, r1]
  414150:	0f0b0723 	.word	0x0f0b0723
  414154:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  414158:	f04f 0904 	mov.w	r9, #4
  41415c:	e01e      	b.n	41419c <decompress+0x87c>
  41415e:	f04f 0904 	mov.w	r9, #4
                val = 2;
  414162:	2102      	movs	r1, #2
  414164:	e01a      	b.n	41419c <decompress+0x87c>
        len = 4;
  414166:	f04f 0904 	mov.w	r9, #4
                val = 4;
  41416a:	4649      	mov	r1, r9
  41416c:	e016      	b.n	41419c <decompress+0x87c>
        len = 4;
  41416e:	f04f 0904 	mov.w	r9, #4
                val = 6;
  414172:	2106      	movs	r1, #6
  414174:	e012      	b.n	41419c <decompress+0x87c>
        len = 4;
  414176:	f04f 0904 	mov.w	r9, #4
                val = 9;
  41417a:	2109      	movs	r1, #9
  41417c:	e00e      	b.n	41419c <decompress+0x87c>
        len = 4;
  41417e:	f04f 0904 	mov.w	r9, #4
                val = 11;
  414182:	210b      	movs	r1, #11
  414184:	e00a      	b.n	41419c <decompress+0x87c>
        len = 4;
  414186:	f04f 0904 	mov.w	r9, #4
                val = 13;
  41418a:	210d      	movs	r1, #13
  41418c:	e006      	b.n	41419c <decompress+0x87c>
        len = 4;
  41418e:	f04f 0904 	mov.w	r9, #4
                val = 15;
  414192:	210f      	movs	r1, #15
  414194:	e002      	b.n	41419c <decompress+0x87c>
        len = 4;
  414196:	f04f 0904 	mov.w	r9, #4
                val = 0;
  41419a:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  41419c:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  4141a0:	4252      	negs	r2, r2
  4141a2:	eba2 0209 	sub.w	r2, r2, r9
  4141a6:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4141a8:	2301      	movs	r3, #1
  4141aa:	fa03 f309 	lsl.w	r3, r3, r9
  4141ae:	b2db      	uxtb	r3, r3
  4141b0:	3b01      	subs	r3, #1
  4141b2:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  4141b4:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  4141b8:	43db      	mvns	r3, r3
  4141ba:	4093      	lsls	r3, r2
  4141bc:	f816 a009 	ldrb.w	sl, [r6, r9]
  4141c0:	ea0a 0303 	and.w	r3, sl, r3
  4141c4:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  4141c6:	fa01 f202 	lsl.w	r2, r1, r2
  4141ca:	431a      	orrs	r2, r3
  4141cc:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  4141d0:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  4141d2:	f10c 0c01 	add.w	ip, ip, #1
  4141d6:	fa0f fc8c 	sxth.w	ip, ip
  4141da:	45a4      	cmp	ip, r4
  4141dc:	f280 8246 	bge.w	41466c <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  4141e0:	f818 100c 	ldrb.w	r1, [r8, ip]
  4141e4:	f815 300c 	ldrb.w	r3, [r5, ip]
  4141e8:	4059      	eors	r1, r3
  4141ea:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  4141ee:	2f03      	cmp	r7, #3
  4141f0:	d0aa      	beq.n	414148 <decompress+0x828>
  4141f2:	46b9      	mov	r9, r7
  4141f4:	e7d2      	b.n	41419c <decompress+0x87c>
            bit_mask = 0x1;
  4141f6:	f04f 0901 	mov.w	r9, #1
  4141fa:	e01d      	b.n	414238 <decompress+0x918>
            bit_mask = 0x7;
  4141fc:	f04f 0907 	mov.w	r9, #7
  414200:	e01a      	b.n	414238 <decompress+0x918>
            bit_mask = 0xF;
  414202:	f04f 090f 	mov.w	r9, #15
  414206:	e017      	b.n	414238 <decompress+0x918>
  414208:	2040c738 	.word	0x2040c738
  41420c:	2040c740 	.word	0x2040c740
  414210:	2040c730 	.word	0x2040c730
  414214:	2040c73c 	.word	0x2040c73c
  414218:	2040c731 	.word	0x2040c731
  41421c:	2040c734 	.word	0x2040c734
            bit_mask = 0xFF;
  414220:	f04f 09ff 	mov.w	r9, #255	; 0xff
  414224:	e008      	b.n	414238 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414226:	2301      	movs	r3, #1
  414228:	4093      	lsls	r3, r2
  41422a:	b2db      	uxtb	r3, r3
  41422c:	3b01      	subs	r3, #1
  41422e:	fa5f f983 	uxtb.w	r9, r3
  414232:	e001      	b.n	414238 <decompress+0x918>
            bit_mask = 0x3;
  414234:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  414238:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  41423c:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  414240:	188b      	adds	r3, r1, r2
  414242:	2b07      	cmp	r3, #7
  414244:	d840      	bhi.n	4142c8 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414246:	f81b 300a 	ldrb.w	r3, [fp, sl]
  41424a:	4249      	negs	r1, r1
  41424c:	1a89      	subs	r1, r1, r2
  41424e:	3108      	adds	r1, #8
  414250:	410b      	asrs	r3, r1
  414252:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  414256:	f1b8 0f00 	cmp.w	r8, #0
  41425a:	d003      	beq.n	414264 <decompress+0x944>
  41425c:	49b9      	ldr	r1, [pc, #740]	; (414544 <decompress+0xc24>)
  41425e:	7809      	ldrb	r1, [r1, #0]
  414260:	4299      	cmp	r1, r3
  414262:	d040      	beq.n	4142e6 <decompress+0x9c6>
        rle_prev_v = ret;
  414264:	49b7      	ldr	r1, [pc, #732]	; (414544 <decompress+0xc24>)
  414266:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  414268:	4442      	add	r2, r8
  41426a:	49b7      	ldr	r1, [pc, #732]	; (414548 <decompress+0xc28>)
  41426c:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  41426e:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  414272:	f10e 0e01 	add.w	lr, lr, #1
  414276:	fa0f fe8e 	sxth.w	lr, lr
  41427a:	4574      	cmp	r4, lr
  41427c:	f340 81a0 	ble.w	4145c0 <decompress+0xca0>
        out[i] = rle_next();
  414280:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  414284:	4bb1      	ldr	r3, [pc, #708]	; (41454c <decompress+0xc2c>)
  414286:	781b      	ldrb	r3, [r3, #0]
  414288:	2b00      	cmp	r3, #0
  41428a:	d137      	bne.n	4142fc <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41428c:	4bb0      	ldr	r3, [pc, #704]	; (414550 <decompress+0xc30>)
  41428e:	f8d3 b000 	ldr.w	fp, [r3]
  414292:	4bad      	ldr	r3, [pc, #692]	; (414548 <decompress+0xc28>)
  414294:	f8d3 8000 	ldr.w	r8, [r3]
  414298:	4bae      	ldr	r3, [pc, #696]	; (414554 <decompress+0xc34>)
  41429a:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  41429c:	1e53      	subs	r3, r2, #1
  41429e:	2b07      	cmp	r3, #7
  4142a0:	d8c1      	bhi.n	414226 <decompress+0x906>
  4142a2:	a101      	add	r1, pc, #4	; (adr r1, 4142a8 <decompress+0x988>)
  4142a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  4142a8:	004141f7 	.word	0x004141f7
  4142ac:	00414235 	.word	0x00414235
  4142b0:	004141fd 	.word	0x004141fd
  4142b4:	00414203 	.word	0x00414203
  4142b8:	00414227 	.word	0x00414227
  4142bc:	00414227 	.word	0x00414227
  4142c0:	00414227 	.word	0x00414227
  4142c4:	00414221 	.word	0x00414221
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4142c8:	f81b 300a 	ldrb.w	r3, [fp, sl]
  4142cc:	44da      	add	sl, fp
  4142ce:	f89a a001 	ldrb.w	sl, [sl, #1]
  4142d2:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  4142d6:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4142d8:	4249      	negs	r1, r1
  4142da:	1a89      	subs	r1, r1, r2
  4142dc:	3110      	adds	r1, #16
  4142de:	410b      	asrs	r3, r1
  4142e0:	ea03 0309 	and.w	r3, r3, r9
  4142e4:	e7b7      	b.n	414256 <decompress+0x936>
            rle_cnt = 0;
  4142e6:	f04f 0900 	mov.w	r9, #0
  4142ea:	499b      	ldr	r1, [pc, #620]	; (414558 <decompress+0xc38>)
  4142ec:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  4142f0:	f04f 0901 	mov.w	r9, #1
  4142f4:	4995      	ldr	r1, [pc, #596]	; (41454c <decompress+0xc2c>)
  4142f6:	f881 9000 	strb.w	r9, [r1]
  4142fa:	e7b3      	b.n	414264 <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  4142fc:	2b01      	cmp	r3, #1
  4142fe:	d004      	beq.n	41430a <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  414300:	2b02      	cmp	r3, #2
  414302:	f000 80fa 	beq.w	4144fa <decompress+0xbda>
    uint8_t ret = 0;
  414306:	2300      	movs	r3, #0
  414308:	e7b1      	b.n	41426e <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  41430a:	4b91      	ldr	r3, [pc, #580]	; (414550 <decompress+0xc30>)
  41430c:	f8d3 9000 	ldr.w	r9, [r3]
  414310:	4b8d      	ldr	r3, [pc, #564]	; (414548 <decompress+0xc28>)
  414312:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  414314:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  414316:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  41431a:	f103 0801 	add.w	r8, r3, #1
  41431e:	f1b8 0f07 	cmp.w	r8, #7
  414322:	d822      	bhi.n	41436a <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414324:	f819 1001 	ldrb.w	r1, [r9, r1]
  414328:	f1c3 0307 	rsb	r3, r3, #7
  41432c:	4119      	asrs	r1, r3
  41432e:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  414332:	4b89      	ldr	r3, [pc, #548]	; (414558 <decompress+0xc38>)
  414334:	f893 8000 	ldrb.w	r8, [r3]
  414338:	f108 0801 	add.w	r8, r8, #1
  41433c:	fa5f f888 	uxtb.w	r8, r8
  414340:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  414344:	3201      	adds	r2, #1
  414346:	4b80      	ldr	r3, [pc, #512]	; (414548 <decompress+0xc28>)
  414348:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  41434a:	2901      	cmp	r1, #1
  41434c:	d01a      	beq.n	414384 <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41434e:	4b81      	ldr	r3, [pc, #516]	; (414554 <decompress+0xc34>)
  414350:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  414354:	f108 33ff 	add.w	r3, r8, #4294967295
  414358:	2b07      	cmp	r3, #7
  41435a:	f200 8099 	bhi.w	414490 <decompress+0xb70>
  41435e:	e8df f003 	tbb	[pc, r3]
  414362:	9e8f      	.short	0x9e8f
  414364:	97979391 	.word	0x97979391
  414368:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41436a:	f819 8001 	ldrb.w	r8, [r9, r1]
  41436e:	4449      	add	r1, r9
  414370:	7849      	ldrb	r1, [r1, #1]
  414372:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  414376:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414378:	f1c3 030f 	rsb	r3, r3, #15
  41437c:	4119      	asrs	r1, r3
  41437e:	f001 0101 	and.w	r1, r1, #1
  414382:	e7d6      	b.n	414332 <decompress+0xa12>
            ret = rle_prev_v;
  414384:	4b6f      	ldr	r3, [pc, #444]	; (414544 <decompress+0xc24>)
  414386:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  414388:	f1b8 0f0b 	cmp.w	r8, #11
  41438c:	f47f af6f 	bne.w	41426e <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  414390:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414394:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  414398:	f10b 0806 	add.w	r8, fp, #6
  41439c:	f1b8 0f07 	cmp.w	r8, #7
  4143a0:	d817      	bhi.n	4143d2 <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4143a2:	f819 a00a 	ldrb.w	sl, [r9, sl]
  4143a6:	f1cb 0802 	rsb	r8, fp, #2
  4143aa:	fa4a f808 	asr.w	r8, sl, r8
  4143ae:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  4143b2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 414558 <decompress+0xc38>
  4143b6:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  4143ba:	3206      	adds	r2, #6
  4143bc:	f8df a188 	ldr.w	sl, [pc, #392]	; 414548 <decompress+0xc28>
  4143c0:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  4143c4:	f1b8 0f00 	cmp.w	r8, #0
  4143c8:	d013      	beq.n	4143f2 <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  4143ca:	2102      	movs	r1, #2
  4143cc:	4a5f      	ldr	r2, [pc, #380]	; (41454c <decompress+0xc2c>)
  4143ce:	7011      	strb	r1, [r2, #0]
  4143d0:	e74d      	b.n	41426e <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4143d2:	f819 800a 	ldrb.w	r8, [r9, sl]
  4143d6:	44ca      	add	sl, r9
  4143d8:	f89a a001 	ldrb.w	sl, [sl, #1]
  4143dc:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  4143e0:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4143e4:	f1cb 0b0a 	rsb	fp, fp, #10
  4143e8:	fa48 f80b 	asr.w	r8, r8, fp
  4143ec:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  4143f0:	e7df      	b.n	4143b2 <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4143f2:	4b58      	ldr	r3, [pc, #352]	; (414554 <decompress+0xc34>)
  4143f4:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  4143f8:	f108 33ff 	add.w	r3, r8, #4294967295
  4143fc:	2b07      	cmp	r3, #7
  4143fe:	d80b      	bhi.n	414418 <decompress+0xaf8>
  414400:	e8df f003 	tbb	[pc, r3]
  414404:	06041112 	.word	0x06041112
  414408:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  41440c:	2107      	movs	r1, #7
  41440e:	e00b      	b.n	414428 <decompress+0xb08>
            bit_mask = 0xF;
  414410:	210f      	movs	r1, #15
  414412:	e009      	b.n	414428 <decompress+0xb08>
            bit_mask = 0xFF;
  414414:	21ff      	movs	r1, #255	; 0xff
  414416:	e007      	b.n	414428 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414418:	2101      	movs	r1, #1
  41441a:	fa01 f108 	lsl.w	r1, r1, r8
  41441e:	b2c9      	uxtb	r1, r1
  414420:	3901      	subs	r1, #1
  414422:	b2c9      	uxtb	r1, r1
  414424:	e000      	b.n	414428 <decompress+0xb08>
            bit_mask = 0x3;
  414426:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  414428:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41442c:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414430:	eb03 0b08 	add.w	fp, r3, r8
  414434:	f1bb 0f07 	cmp.w	fp, #7
  414438:	d811      	bhi.n	41445e <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41443a:	f819 900a 	ldrb.w	r9, [r9, sl]
  41443e:	425b      	negs	r3, r3
  414440:	eba3 0308 	sub.w	r3, r3, r8
  414444:	3308      	adds	r3, #8
  414446:	fa49 f303 	asr.w	r3, r9, r3
  41444a:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  41444c:	493d      	ldr	r1, [pc, #244]	; (414544 <decompress+0xc24>)
  41444e:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  414450:	4442      	add	r2, r8
  414452:	493d      	ldr	r1, [pc, #244]	; (414548 <decompress+0xc28>)
  414454:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  414456:	2100      	movs	r1, #0
  414458:	4a3c      	ldr	r2, [pc, #240]	; (41454c <decompress+0xc2c>)
  41445a:	7011      	strb	r1, [r2, #0]
  41445c:	e707      	b.n	41426e <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41445e:	f819 b00a 	ldrb.w	fp, [r9, sl]
  414462:	44d1      	add	r9, sl
  414464:	f899 9001 	ldrb.w	r9, [r9, #1]
  414468:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  41446c:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414470:	425b      	negs	r3, r3
  414472:	eba3 0308 	sub.w	r3, r3, r8
  414476:	3310      	adds	r3, #16
  414478:	fa49 f303 	asr.w	r3, r9, r3
  41447c:	400b      	ands	r3, r1
  41447e:	e7e5      	b.n	41444c <decompress+0xb2c>
            bit_mask = 0x1;
  414480:	2301      	movs	r3, #1
  414482:	e00d      	b.n	4144a0 <decompress+0xb80>
            bit_mask = 0x7;
  414484:	2307      	movs	r3, #7
  414486:	e00b      	b.n	4144a0 <decompress+0xb80>
            bit_mask = 0xF;
  414488:	230f      	movs	r3, #15
  41448a:	e009      	b.n	4144a0 <decompress+0xb80>
            bit_mask = 0xFF;
  41448c:	23ff      	movs	r3, #255	; 0xff
  41448e:	e007      	b.n	4144a0 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414490:	2301      	movs	r3, #1
  414492:	fa03 f308 	lsl.w	r3, r3, r8
  414496:	b2db      	uxtb	r3, r3
  414498:	3b01      	subs	r3, #1
  41449a:	b2db      	uxtb	r3, r3
  41449c:	e000      	b.n	4144a0 <decompress+0xb80>
            bit_mask = 0x3;
  41449e:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4144a0:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4144a4:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  4144a8:	eb01 0b08 	add.w	fp, r1, r8
  4144ac:	f1bb 0f07 	cmp.w	fp, #7
  4144b0:	d811      	bhi.n	4144d6 <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4144b2:	f819 900a 	ldrb.w	r9, [r9, sl]
  4144b6:	4249      	negs	r1, r1
  4144b8:	eba1 0108 	sub.w	r1, r1, r8
  4144bc:	3108      	adds	r1, #8
  4144be:	fa49 f101 	asr.w	r1, r9, r1
  4144c2:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4144c4:	491f      	ldr	r1, [pc, #124]	; (414544 <decompress+0xc24>)
  4144c6:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4144c8:	4442      	add	r2, r8
  4144ca:	491f      	ldr	r1, [pc, #124]	; (414548 <decompress+0xc28>)
  4144cc:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4144ce:	2100      	movs	r1, #0
  4144d0:	4a1e      	ldr	r2, [pc, #120]	; (41454c <decompress+0xc2c>)
  4144d2:	7011      	strb	r1, [r2, #0]
  4144d4:	e6cb      	b.n	41426e <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4144d6:	f819 b00a 	ldrb.w	fp, [r9, sl]
  4144da:	44d1      	add	r9, sl
  4144dc:	f899 9001 	ldrb.w	r9, [r9, #1]
  4144e0:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  4144e4:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4144e8:	4249      	negs	r1, r1
  4144ea:	eba1 0108 	sub.w	r1, r1, r8
  4144ee:	3110      	adds	r1, #16
  4144f0:	fa49 f901 	asr.w	r9, r9, r1
  4144f4:	ea09 0303 	and.w	r3, r9, r3
  4144f8:	e7e4      	b.n	4144c4 <decompress+0xba4>
        ret = rle_prev_v;
  4144fa:	4b12      	ldr	r3, [pc, #72]	; (414544 <decompress+0xc24>)
  4144fc:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  4144fe:	4916      	ldr	r1, [pc, #88]	; (414558 <decompress+0xc38>)
  414500:	780a      	ldrb	r2, [r1, #0]
  414502:	3a01      	subs	r2, #1
  414504:	b2d2      	uxtb	r2, r2
  414506:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414508:	2a00      	cmp	r2, #0
  41450a:	f47f aeb0 	bne.w	41426e <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41450e:	4b10      	ldr	r3, [pc, #64]	; (414550 <decompress+0xc30>)
  414510:	f8d3 a000 	ldr.w	sl, [r3]
  414514:	4b0c      	ldr	r3, [pc, #48]	; (414548 <decompress+0xc28>)
  414516:	f8d3 9000 	ldr.w	r9, [r3]
  41451a:	4b0e      	ldr	r3, [pc, #56]	; (414554 <decompress+0xc34>)
  41451c:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  414520:	f108 33ff 	add.w	r3, r8, #4294967295
  414524:	2b07      	cmp	r3, #7
  414526:	d819      	bhi.n	41455c <decompress+0xc3c>
  414528:	e8df f003 	tbb	[pc, r3]
  41452c:	08061f04 	.word	0x08061f04
  414530:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  414534:	2301      	movs	r3, #1
  414536:	e019      	b.n	41456c <decompress+0xc4c>
            bit_mask = 0x7;
  414538:	2307      	movs	r3, #7
  41453a:	e017      	b.n	41456c <decompress+0xc4c>
            bit_mask = 0xF;
  41453c:	230f      	movs	r3, #15
  41453e:	e015      	b.n	41456c <decompress+0xc4c>
            bit_mask = 0xFF;
  414540:	23ff      	movs	r3, #255	; 0xff
  414542:	e013      	b.n	41456c <decompress+0xc4c>
  414544:	2040c738 	.word	0x2040c738
  414548:	2040c73c 	.word	0x2040c73c
  41454c:	2040c740 	.word	0x2040c740
  414550:	2040c734 	.word	0x2040c734
  414554:	2040c730 	.word	0x2040c730
  414558:	2040c731 	.word	0x2040c731
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41455c:	2301      	movs	r3, #1
  41455e:	fa03 f308 	lsl.w	r3, r3, r8
  414562:	b2db      	uxtb	r3, r3
  414564:	3b01      	subs	r3, #1
  414566:	b2db      	uxtb	r3, r3
  414568:	e000      	b.n	41456c <decompress+0xc4c>
            bit_mask = 0x3;
  41456a:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  41456c:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  414570:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  414574:	eb02 0b08 	add.w	fp, r2, r8
  414578:	f1bb 0f07 	cmp.w	fp, #7
  41457c:	d812      	bhi.n	4145a4 <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41457e:	f81a a001 	ldrb.w	sl, [sl, r1]
  414582:	4251      	negs	r1, r2
  414584:	eba1 0108 	sub.w	r1, r1, r8
  414588:	3108      	adds	r1, #8
  41458a:	fa4a f101 	asr.w	r1, sl, r1
  41458e:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414590:	4a42      	ldr	r2, [pc, #264]	; (41469c <decompress+0xd7c>)
  414592:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  414594:	eb08 0209 	add.w	r2, r8, r9
  414598:	4941      	ldr	r1, [pc, #260]	; (4146a0 <decompress+0xd80>)
  41459a:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  41459c:	2100      	movs	r1, #0
  41459e:	4a41      	ldr	r2, [pc, #260]	; (4146a4 <decompress+0xd84>)
  4145a0:	7011      	strb	r1, [r2, #0]
  4145a2:	e664      	b.n	41426e <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4145a4:	f81a b001 	ldrb.w	fp, [sl, r1]
  4145a8:	4451      	add	r1, sl
  4145aa:	7849      	ldrb	r1, [r1, #1]
  4145ac:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  4145b0:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4145b2:	4252      	negs	r2, r2
  4145b4:	eba2 0208 	sub.w	r2, r2, r8
  4145b8:	3210      	adds	r2, #16
  4145ba:	4111      	asrs	r1, r2
  4145bc:	400b      	ands	r3, r1
  4145be:	e7e7      	b.n	414590 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  4145c0:	f04f 0c00 	mov.w	ip, #0
  4145c4:	f8dd e008 	ldr.w	lr, [sp, #8]
  4145c8:	e048      	b.n	41465c <decompress+0xd3c>
        switch(val) {
  4145ca:	2907      	cmp	r1, #7
  4145cc:	d805      	bhi.n	4145da <decompress+0xcba>
  4145ce:	e8df f001 	tbb	[pc, r1]
  4145d2:	0723      	.short	0x0723
  4145d4:	17130f0b 	.word	0x17130f0b
  4145d8:	1f1b      	.short	0x1f1b
        len = 4;
  4145da:	f04f 0804 	mov.w	r8, #4
  4145de:	e01e      	b.n	41461e <decompress+0xcfe>
  4145e0:	f04f 0804 	mov.w	r8, #4
                val = 2;
  4145e4:	2102      	movs	r1, #2
  4145e6:	e01a      	b.n	41461e <decompress+0xcfe>
        len = 4;
  4145e8:	f04f 0804 	mov.w	r8, #4
                val = 4;
  4145ec:	4641      	mov	r1, r8
  4145ee:	e016      	b.n	41461e <decompress+0xcfe>
        len = 4;
  4145f0:	f04f 0804 	mov.w	r8, #4
                val = 6;
  4145f4:	2106      	movs	r1, #6
  4145f6:	e012      	b.n	41461e <decompress+0xcfe>
        len = 4;
  4145f8:	f04f 0804 	mov.w	r8, #4
                val = 9;
  4145fc:	2109      	movs	r1, #9
  4145fe:	e00e      	b.n	41461e <decompress+0xcfe>
        len = 4;
  414600:	f04f 0804 	mov.w	r8, #4
                val = 11;
  414604:	210b      	movs	r1, #11
  414606:	e00a      	b.n	41461e <decompress+0xcfe>
        len = 4;
  414608:	f04f 0804 	mov.w	r8, #4
                val = 13;
  41460c:	210d      	movs	r1, #13
  41460e:	e006      	b.n	41461e <decompress+0xcfe>
        len = 4;
  414610:	f04f 0804 	mov.w	r8, #4
                val = 15;
  414614:	210f      	movs	r1, #15
  414616:	e002      	b.n	41461e <decompress+0xcfe>
        len = 4;
  414618:	f04f 0804 	mov.w	r8, #4
                val = 0;
  41461c:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  41461e:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  414622:	4252      	negs	r2, r2
  414624:	eba2 0208 	sub.w	r2, r2, r8
  414628:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41462a:	2301      	movs	r3, #1
  41462c:	fa03 f308 	lsl.w	r3, r3, r8
  414630:	b2db      	uxtb	r3, r3
  414632:	3b01      	subs	r3, #1
  414634:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  414636:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  41463a:	43db      	mvns	r3, r3
  41463c:	4093      	lsls	r3, r2
  41463e:	f816 9008 	ldrb.w	r9, [r6, r8]
  414642:	ea09 0303 	and.w	r3, r9, r3
  414646:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  414648:	fa01 f202 	lsl.w	r2, r1, r2
  41464c:	431a      	orrs	r2, r3
  41464e:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  414652:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  414654:	f10c 0c01 	add.w	ip, ip, #1
  414658:	fa0f fc8c 	sxth.w	ip, ip
  41465c:	45a4      	cmp	ip, r4
  41465e:	da05      	bge.n	41466c <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  414660:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  414664:	2f03      	cmp	r7, #3
  414666:	d0b0      	beq.n	4145ca <decompress+0xcaa>
  414668:	46b8      	mov	r8, r7
  41466a:	e7d8      	b.n	41461e <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  41466c:	9b00      	ldr	r3, [sp, #0]
  41466e:	3301      	adds	r3, #1
  414670:	b21b      	sxth	r3, r3
  414672:	9300      	str	r3, [sp, #0]
  414674:	9b00      	ldr	r3, [sp, #0]
  414676:	9a01      	ldr	r2, [sp, #4]
  414678:	4293      	cmp	r3, r2
  41467a:	da06      	bge.n	41468a <decompress+0xd6a>
        if(prefilter) {
  41467c:	9b04      	ldr	r3, [sp, #16]
  41467e:	2b00      	cmp	r3, #0
  414680:	f47f ad54 	bne.w	41412c <decompress+0x80c>
  414684:	f04f 0e00 	mov.w	lr, #0
  414688:	e5f7      	b.n	41427a <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  41468a:	4628      	mov	r0, r5
  41468c:	4c06      	ldr	r4, [pc, #24]	; (4146a8 <decompress+0xd88>)
  41468e:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  414690:	9803      	ldr	r0, [sp, #12]
  414692:	47a0      	blx	r4
}
  414694:	b007      	add	sp, #28
  414696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41469a:	bf00      	nop
  41469c:	2040c738 	.word	0x2040c738
  4146a0:	2040c73c 	.word	0x2040c73c
  4146a4:	2040c740 	.word	0x2040c740
  4146a8:	004162e1 	.word	0x004162e1

004146ac <lv_font_get_bitmap_fmt_txt>:
{
  4146ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4146b0:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  4146b2:	2909      	cmp	r1, #9
  4146b4:	d01e      	beq.n	4146f4 <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4146b6:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4146b8:	4b37      	ldr	r3, [pc, #220]	; (414798 <lv_font_get_bitmap_fmt_txt+0xec>)
  4146ba:	4798      	blx	r3
    if(!gid) return NULL;
  4146bc:	4607      	mov	r7, r0
  4146be:	2800      	cmp	r0, #0
  4146c0:	d063      	beq.n	41478a <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4146c2:	686e      	ldr	r6, [r5, #4]
  4146c4:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  4146c8:	7ceb      	ldrb	r3, [r5, #19]
  4146ca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4146ce:	d013      	beq.n	4146f8 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  4146d0:	f898 3004 	ldrb.w	r3, [r8, #4]
  4146d4:	f898 4005 	ldrb.w	r4, [r8, #5]
  4146d8:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  4146dc:	2c00      	cmp	r4, #0
  4146de:	d056      	beq.n	41478e <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  4146e0:	7ceb      	ldrb	r3, [r5, #19]
  4146e2:	f3c3 0343 	ubfx	r3, r3, #1, #4
  4146e6:	3b01      	subs	r3, #1
  4146e8:	2b03      	cmp	r3, #3
  4146ea:	d80e      	bhi.n	41470a <lv_font_get_bitmap_fmt_txt+0x5e>
  4146ec:	e8df f003 	tbb	[pc, r3]
  4146f0:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  4146f4:	2120      	movs	r1, #32
  4146f6:	e7de      	b.n	4146b6 <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  4146f8:	6828      	ldr	r0, [r5, #0]
  4146fa:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  4146fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
  414702:	4418      	add	r0, r3
  414704:	e02f      	b.n	414766 <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  414706:	3407      	adds	r4, #7
  414708:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  41470a:	4b24      	ldr	r3, [pc, #144]	; (41479c <lv_font_get_bitmap_fmt_txt+0xf0>)
  41470c:	6818      	ldr	r0, [r3, #0]
  41470e:	4b24      	ldr	r3, [pc, #144]	; (4147a0 <lv_font_get_bitmap_fmt_txt+0xf4>)
  414710:	4798      	blx	r3
  414712:	4284      	cmp	r4, r0
  414714:	d90c      	bls.n	414730 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  414716:	4621      	mov	r1, r4
  414718:	4b20      	ldr	r3, [pc, #128]	; (41479c <lv_font_get_bitmap_fmt_txt+0xf0>)
  41471a:	6818      	ldr	r0, [r3, #0]
  41471c:	4b21      	ldr	r3, [pc, #132]	; (4147a4 <lv_font_get_bitmap_fmt_txt+0xf8>)
  41471e:	4798      	blx	r3
  414720:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  414722:	4b21      	ldr	r3, [pc, #132]	; (4147a8 <lv_font_get_bitmap_fmt_txt+0xfc>)
  414724:	4798      	blx	r3
  414726:	b350      	cbz	r0, 41477e <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  414728:	2c00      	cmp	r4, #0
  41472a:	d032      	beq.n	414792 <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  41472c:	4b1b      	ldr	r3, [pc, #108]	; (41479c <lv_font_get_bitmap_fmt_txt+0xf0>)
  41472e:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  414730:	7ceb      	ldrb	r3, [r5, #19]
  414732:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  414736:	2c40      	cmp	r4, #64	; 0x40
  414738:	bf14      	ite	ne
  41473a:	2400      	movne	r4, #0
  41473c:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  41473e:	f8d5 e000 	ldr.w	lr, [r5]
  414742:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  414746:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  41474a:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  41474e:	f898 3005 	ldrb.w	r3, [r8, #5]
  414752:	f898 2004 	ldrb.w	r2, [r8, #4]
  414756:	4d11      	ldr	r5, [pc, #68]	; (41479c <lv_font_get_bitmap_fmt_txt+0xf0>)
  414758:	9401      	str	r4, [sp, #4]
  41475a:	9100      	str	r1, [sp, #0]
  41475c:	6829      	ldr	r1, [r5, #0]
  41475e:	4470      	add	r0, lr
  414760:	4c12      	ldr	r4, [pc, #72]	; (4147ac <lv_font_get_bitmap_fmt_txt+0x100>)
  414762:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  414764:	6828      	ldr	r0, [r5, #0]
}
  414766:	b002      	add	sp, #8
  414768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  41476c:	3403      	adds	r4, #3
  41476e:	08a4      	lsrs	r4, r4, #2
                break;
  414770:	e7cb      	b.n	41470a <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414772:	3401      	adds	r4, #1
  414774:	0864      	lsrs	r4, r4, #1
                break;
  414776:	e7c8      	b.n	41470a <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414778:	3401      	adds	r4, #1
  41477a:	0864      	lsrs	r4, r4, #1
                break;
  41477c:	e7c5      	b.n	41470a <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  41477e:	4622      	mov	r2, r4
  414780:	2300      	movs	r3, #0
  414782:	480b      	ldr	r0, [pc, #44]	; (4147b0 <lv_font_get_bitmap_fmt_txt+0x104>)
  414784:	490b      	ldr	r1, [pc, #44]	; (4147b4 <lv_font_get_bitmap_fmt_txt+0x108>)
  414786:	4788      	blx	r1
  414788:	e7fe      	b.n	414788 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  41478a:	2000      	movs	r0, #0
  41478c:	e7eb      	b.n	414766 <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  41478e:	2000      	movs	r0, #0
  414790:	e7e9      	b.n	414766 <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  414792:	2000      	movs	r0, #0
  414794:	e7e7      	b.n	414766 <lv_font_get_bitmap_fmt_txt+0xba>
  414796:	bf00      	nop
  414798:	00413795 	.word	0x00413795
  41479c:	2043a1b0 	.word	0x2043a1b0
  4147a0:	004162c1 	.word	0x004162c1
  4147a4:	004164b9 	.word	0x004164b9
  4147a8:	00415a81 	.word	0x00415a81
  4147ac:	00413921 	.word	0x00413921
  4147b0:	00428c94 	.word	0x00428c94
  4147b4:	00415a8d 	.word	0x00415a8d

004147b8 <lv_font_get_glyph_dsc_fmt_txt>:
{
  4147b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4147bc:	4607      	mov	r7, r0
  4147be:	460c      	mov	r4, r1
  4147c0:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  4147c2:	2a09      	cmp	r2, #9
  4147c4:	d034      	beq.n	414830 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  4147c6:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4147c8:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4147ca:	4611      	mov	r1, r2
  4147cc:	4638      	mov	r0, r7
  4147ce:	4b20      	ldr	r3, [pc, #128]	; (414850 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  4147d0:	4798      	blx	r3
    if(!gid) return false;
  4147d2:	4680      	mov	r8, r0
  4147d4:	2800      	cmp	r0, #0
  4147d6:	d035      	beq.n	414844 <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  4147d8:	68f3      	ldr	r3, [r6, #12]
  4147da:	2b00      	cmp	r3, #0
  4147dc:	d030      	beq.n	414840 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  4147de:	4649      	mov	r1, r9
  4147e0:	4638      	mov	r0, r7
  4147e2:	4b1b      	ldr	r3, [pc, #108]	; (414850 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  4147e4:	4798      	blx	r3
        if(gid_next) {
  4147e6:	4602      	mov	r2, r0
  4147e8:	bb28      	cbnz	r0, 414836 <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  4147ea:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4147ec:	6871      	ldr	r1, [r6, #4]
  4147ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  4147f2:	8a33      	ldrh	r3, [r6, #16]
  4147f4:	fb03 f300 	mul.w	r3, r3, r0
  4147f8:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  4147fa:	8848      	ldrh	r0, [r1, #2]
  4147fc:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  414800:	b105      	cbz	r5, 414804 <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  414802:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  414804:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  414806:	3308      	adds	r3, #8
  414808:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  41480a:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  41480c:	794b      	ldrb	r3, [r1, #5]
  41480e:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  414810:	790a      	ldrb	r2, [r1, #4]
  414812:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  414814:	f991 3006 	ldrsb.w	r3, [r1, #6]
  414818:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  41481a:	f991 3007 	ldrsb.w	r3, [r1, #7]
  41481e:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  414820:	7cf3      	ldrb	r3, [r6, #19]
  414822:	f3c3 0343 	ubfx	r3, r3, #1, #4
  414826:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  414828:	b185      	cbz	r5, 41484c <lv_font_get_glyph_dsc_fmt_txt+0x94>
  41482a:	0052      	lsls	r2, r2, #1
  41482c:	8062      	strh	r2, [r4, #2]
  41482e:	e00a      	b.n	414846 <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  414830:	2501      	movs	r5, #1
        unicode_letter = ' ';
  414832:	2220      	movs	r2, #32
  414834:	e7c8      	b.n	4147c8 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  414836:	4641      	mov	r1, r8
  414838:	4638      	mov	r0, r7
  41483a:	4b06      	ldr	r3, [pc, #24]	; (414854 <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  41483c:	4798      	blx	r3
  41483e:	e7d5      	b.n	4147ec <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  414840:	2000      	movs	r0, #0
  414842:	e7d3      	b.n	4147ec <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  414844:	2500      	movs	r5, #0
}
  414846:	4628      	mov	r0, r5
  414848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  41484c:	2501      	movs	r5, #1
  41484e:	e7fa      	b.n	414846 <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  414850:	00413795 	.word	0x00413795
  414854:	0041386d 	.word	0x0041386d

00414858 <_lv_font_clean_up_fmt_txt>:
{
  414858:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  41485a:	4b04      	ldr	r3, [pc, #16]	; (41486c <_lv_font_clean_up_fmt_txt+0x14>)
  41485c:	6818      	ldr	r0, [r3, #0]
  41485e:	b120      	cbz	r0, 41486a <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  414860:	4b03      	ldr	r3, [pc, #12]	; (414870 <_lv_font_clean_up_fmt_txt+0x18>)
  414862:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  414864:	2200      	movs	r2, #0
  414866:	4b01      	ldr	r3, [pc, #4]	; (41486c <_lv_font_clean_up_fmt_txt+0x14>)
  414868:	601a      	str	r2, [r3, #0]
  41486a:	bd08      	pop	{r3, pc}
  41486c:	2043a1b0 	.word	0x2043a1b0
  414870:	0041624d 	.word	0x0041624d

00414874 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  414874:	b510      	push	{r4, lr}
  414876:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  414878:	2134      	movs	r1, #52	; 0x34
  41487a:	4b13      	ldr	r3, [pc, #76]	; (4148c8 <lv_disp_drv_init+0x54>)
  41487c:	4798      	blx	r3

    driver->flush_cb         = NULL;
  41487e:	2300      	movs	r3, #0
  414880:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  414882:	f44f 72a0 	mov.w	r2, #320	; 0x140
  414886:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  414888:	22f0      	movs	r2, #240	; 0xf0
  41488a:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  41488c:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  41488e:	7a22      	ldrb	r2, [r4, #8]
  414890:	f363 0241 	bfi	r2, r3, #1, #1
  414894:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  414896:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  41489a:	f042 0207 	orr.w	r2, r2, #7
  41489e:	f363 02c7 	bfi	r2, r3, #3, #5
  4148a2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  4148a6:	22e0      	movs	r2, #224	; 0xe0
  4148a8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  4148ac:	8922      	ldrh	r2, [r4, #8]
  4148ae:	2194      	movs	r1, #148	; 0x94
  4148b0:	f361 028b 	bfi	r2, r1, #2, #10
  4148b4:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  4148b6:	b2d2      	uxtb	r2, r2
  4148b8:	f042 0201 	orr.w	r2, r2, #1
  4148bc:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  4148be:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  4148c0:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  4148c2:	6163      	str	r3, [r4, #20]
  4148c4:	bd10      	pop	{r4, pc}
  4148c6:	bf00      	nop
  4148c8:	004166bd 	.word	0x004166bd

004148cc <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  4148cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4148ce:	4604      	mov	r4, r0
  4148d0:	460d      	mov	r5, r1
  4148d2:	4617      	mov	r7, r2
  4148d4:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  4148d6:	2124      	movs	r1, #36	; 0x24
  4148d8:	4b03      	ldr	r3, [pc, #12]	; (4148e8 <lv_disp_buf_init+0x1c>)
  4148da:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  4148dc:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  4148de:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  4148e0:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  4148e2:	60e6      	str	r6, [r4, #12]
  4148e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4148e6:	bf00      	nop
  4148e8:	004166bd 	.word	0x004166bd

004148ec <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  4148ec:	4b01      	ldr	r3, [pc, #4]	; (4148f4 <lv_disp_get_default+0x8>)
  4148ee:	6818      	ldr	r0, [r3, #0]
  4148f0:	4770      	bx	lr
  4148f2:	bf00      	nop
  4148f4:	2040c744 	.word	0x2040c744

004148f8 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  4148f8:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  4148fa:	4603      	mov	r3, r0
  4148fc:	b138      	cbz	r0, 41490e <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  4148fe:	b16b      	cbz	r3, 41491c <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414900:	7a1a      	ldrb	r2, [r3, #8]
  414902:	f012 0f02 	tst.w	r2, #2
  414906:	d006      	beq.n	414916 <lv_disp_get_hor_res+0x1e>
  414908:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  41490c:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  41490e:	4b05      	ldr	r3, [pc, #20]	; (414924 <lv_disp_get_hor_res+0x2c>)
  414910:	4798      	blx	r3
  414912:	4603      	mov	r3, r0
  414914:	e7f3      	b.n	4148fe <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414916:	f9b3 0000 	ldrsh.w	r0, [r3]
  41491a:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  41491c:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  414920:	bd08      	pop	{r3, pc}
  414922:	bf00      	nop
  414924:	004148ed 	.word	0x004148ed

00414928 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  414928:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  41492a:	4603      	mov	r3, r0
  41492c:	b138      	cbz	r0, 41493e <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  41492e:	b16b      	cbz	r3, 41494c <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414930:	7a1a      	ldrb	r2, [r3, #8]
  414932:	f012 0f02 	tst.w	r2, #2
  414936:	d006      	beq.n	414946 <lv_disp_get_ver_res+0x1e>
  414938:	f9b3 0000 	ldrsh.w	r0, [r3]
  41493c:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  41493e:	4b04      	ldr	r3, [pc, #16]	; (414950 <lv_disp_get_ver_res+0x28>)
  414940:	4798      	blx	r3
  414942:	4603      	mov	r3, r0
  414944:	e7f3      	b.n	41492e <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414946:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  41494a:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  41494c:	20f0      	movs	r0, #240	; 0xf0
}
  41494e:	bd08      	pop	{r3, pc}
  414950:	004148ed 	.word	0x004148ed

00414954 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  414954:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414956:	4603      	mov	r3, r0
  414958:	b120      	cbz	r0, 414964 <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  41495a:	b13b      	cbz	r3, 41496c <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  41495c:	8918      	ldrh	r0, [r3, #8]
  41495e:	f3c0 0089 	ubfx	r0, r0, #2, #10
  414962:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414964:	4b02      	ldr	r3, [pc, #8]	; (414970 <lv_disp_get_dpi+0x1c>)
  414966:	4798      	blx	r3
  414968:	4603      	mov	r3, r0
  41496a:	e7f6      	b.n	41495a <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  41496c:	2094      	movs	r0, #148	; 0x94
}
  41496e:	bd08      	pop	{r3, pc}
  414970:	004148ed 	.word	0x004148ed

00414974 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  414974:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414976:	4605      	mov	r5, r0
  414978:	b1a0      	cbz	r0, 4149a4 <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  41497a:	b1bd      	cbz	r5, 4149ac <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  41497c:	4628      	mov	r0, r5
  41497e:	4b10      	ldr	r3, [pc, #64]	; (4149c0 <lv_disp_get_size_category+0x4c>)
  414980:	4798      	blx	r3
  414982:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  414984:	4628      	mov	r0, r5
  414986:	4b0f      	ldr	r3, [pc, #60]	; (4149c4 <lv_disp_get_size_category+0x50>)
  414988:	4798      	blx	r3

    w = w * 10 / dpi;
  41498a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  41498e:	0063      	lsls	r3, r4, #1
  414990:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  414994:	281d      	cmp	r0, #29
  414996:	d90c      	bls.n	4149b2 <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  414998:	2831      	cmp	r0, #49	; 0x31
  41499a:	d90c      	bls.n	4149b6 <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  41499c:	2845      	cmp	r0, #69	; 0x45
  41499e:	d80c      	bhi.n	4149ba <lv_disp_get_size_category+0x46>
  4149a0:	2002      	movs	r0, #2
  4149a2:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  4149a4:	4b08      	ldr	r3, [pc, #32]	; (4149c8 <lv_disp_get_size_category+0x54>)
  4149a6:	4798      	blx	r3
  4149a8:	4605      	mov	r5, r0
  4149aa:	e7e6      	b.n	41497a <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  4149ac:	f44f 74a0 	mov.w	r4, #320	; 0x140
  4149b0:	e7e8      	b.n	414984 <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  4149b2:	2000      	movs	r0, #0
  4149b4:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  4149b6:	2001      	movs	r0, #1
  4149b8:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  4149ba:	2003      	movs	r0, #3
}
  4149bc:	bd38      	pop	{r3, r4, r5, pc}
  4149be:	bf00      	nop
  4149c0:	004148f9 	.word	0x004148f9
  4149c4:	00414955 	.word	0x00414955
  4149c8:	004148ed 	.word	0x004148ed

004149cc <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  4149cc:	6842      	ldr	r2, [r0, #4]
  4149ce:	2300      	movs	r3, #0
  4149d0:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  4149d2:	6842      	ldr	r2, [r0, #4]
  4149d4:	61d3      	str	r3, [r2, #28]
  4149d6:	4770      	bx	lr

004149d8 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  4149d8:	b508      	push	{r3, lr}
    if(disp == NULL)
  4149da:	b120      	cbz	r0, 4149e6 <lv_disp_get_next+0xe>
  4149dc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  4149de:	4804      	ldr	r0, [pc, #16]	; (4149f0 <lv_disp_get_next+0x18>)
  4149e0:	4b04      	ldr	r3, [pc, #16]	; (4149f4 <lv_disp_get_next+0x1c>)
  4149e2:	4798      	blx	r3
}
  4149e4:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  4149e6:	4802      	ldr	r0, [pc, #8]	; (4149f0 <lv_disp_get_next+0x18>)
  4149e8:	4b03      	ldr	r3, [pc, #12]	; (4149f8 <lv_disp_get_next+0x20>)
  4149ea:	4798      	blx	r3
  4149ec:	bd08      	pop	{r3, pc}
  4149ee:	bf00      	nop
  4149f0:	2043a1c0 	.word	0x2043a1c0
  4149f4:	00415da5 	.word	0x00415da5
  4149f8:	00415d91 	.word	0x00415d91

004149fc <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  4149fc:	6840      	ldr	r0, [r0, #4]
  4149fe:	4770      	bx	lr

00414a00 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  414a00:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  414a04:	f3c0 0009 	ubfx	r0, r0, #0, #10
  414a08:	4770      	bx	lr

00414a0a <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  414a0a:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  414a12:	428b      	cmp	r3, r1
  414a14:	db07      	blt.n	414a26 <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  414a16:	1a5b      	subs	r3, r3, r1
  414a18:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  414a1c:	f363 0209 	bfi	r2, r3, #0, #10
  414a20:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  414a24:	4770      	bx	lr
        disp->inv_p = 0;
  414a26:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414a2a:	f36f 0309 	bfc	r3, #0, #10
  414a2e:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  414a32:	4770      	bx	lr

00414a34 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  414a34:	6843      	ldr	r3, [r0, #4]
  414a36:	681a      	ldr	r2, [r3, #0]
  414a38:	b12a      	cbz	r2, 414a46 <lv_disp_is_double_buf+0x12>
  414a3a:	685b      	ldr	r3, [r3, #4]
  414a3c:	b10b      	cbz	r3, 414a42 <lv_disp_is_double_buf+0xe>
        return true;
  414a3e:	2001      	movs	r0, #1
    else
        return false;
}
  414a40:	4770      	bx	lr
        return false;
  414a42:	2000      	movs	r0, #0
  414a44:	4770      	bx	lr
  414a46:	2000      	movs	r0, #0
  414a48:	4770      	bx	lr
	...

00414a4c <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  414a4c:	b538      	push	{r3, r4, r5, lr}
  414a4e:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  414a50:	f9b0 4000 	ldrsh.w	r4, [r0]
  414a54:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414a58:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  414a5c:	4b06      	ldr	r3, [pc, #24]	; (414a78 <lv_disp_is_true_double_buf+0x2c>)
  414a5e:	4798      	blx	r3
  414a60:	b130      	cbz	r0, 414a70 <lv_disp_is_true_double_buf+0x24>
  414a62:	4603      	mov	r3, r0
  414a64:	686a      	ldr	r2, [r5, #4]
  414a66:	68d2      	ldr	r2, [r2, #12]
  414a68:	4294      	cmp	r4, r2
  414a6a:	d002      	beq.n	414a72 <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  414a6c:	2300      	movs	r3, #0
  414a6e:	e000      	b.n	414a72 <lv_disp_is_true_double_buf+0x26>
  414a70:	2300      	movs	r3, #0
    }
}
  414a72:	4618      	mov	r0, r3
  414a74:	bd38      	pop	{r3, r4, r5, pc}
  414a76:	bf00      	nop
  414a78:	00414a35 	.word	0x00414a35

00414a7c <lv_disp_drv_register>:
{
  414a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414a7e:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  414a80:	483b      	ldr	r0, [pc, #236]	; (414b70 <lv_disp_drv_register+0xf4>)
  414a82:	4b3c      	ldr	r3, [pc, #240]	; (414b74 <lv_disp_drv_register+0xf8>)
  414a84:	4798      	blx	r3
    if(!disp) {
  414a86:	4604      	mov	r4, r0
  414a88:	2800      	cmp	r0, #0
  414a8a:	d05c      	beq.n	414b46 <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  414a8c:	f44f 71c4 	mov.w	r1, #392	; 0x188
  414a90:	4b39      	ldr	r3, [pc, #228]	; (414b78 <lv_disp_drv_register+0xfc>)
  414a92:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  414a94:	2234      	movs	r2, #52	; 0x34
  414a96:	4629      	mov	r1, r5
  414a98:	4620      	mov	r0, r4
  414a9a:	4b38      	ldr	r3, [pc, #224]	; (414b7c <lv_disp_drv_register+0x100>)
  414a9c:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  414a9e:	214c      	movs	r1, #76	; 0x4c
  414aa0:	f104 0038 	add.w	r0, r4, #56	; 0x38
  414aa4:	4b36      	ldr	r3, [pc, #216]	; (414b80 <lv_disp_drv_register+0x104>)
  414aa6:	4798      	blx	r3
    disp->last_activity_time = 0;
  414aa8:	2300      	movs	r3, #0
  414aaa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  414aae:	4b35      	ldr	r3, [pc, #212]	; (414b84 <lv_disp_drv_register+0x108>)
  414ab0:	681b      	ldr	r3, [r3, #0]
  414ab2:	2b00      	cmp	r3, #0
  414ab4:	d051      	beq.n	414b5a <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  414ab6:	4b33      	ldr	r3, [pc, #204]	; (414b84 <lv_disp_drv_register+0x108>)
  414ab8:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  414aba:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  414abc:	4623      	mov	r3, r4
  414abe:	2203      	movs	r2, #3
  414ac0:	211e      	movs	r1, #30
  414ac2:	4831      	ldr	r0, [pc, #196]	; (414b88 <lv_disp_drv_register+0x10c>)
  414ac4:	4d31      	ldr	r5, [pc, #196]	; (414b8c <lv_disp_drv_register+0x110>)
  414ac6:	47a8      	blx	r5
  414ac8:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  414aca:	4b31      	ldr	r3, [pc, #196]	; (414b90 <lv_disp_drv_register+0x114>)
  414acc:	4798      	blx	r3
  414ace:	2800      	cmp	r0, #0
  414ad0:	d046      	beq.n	414b60 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  414ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
  414ad4:	2b00      	cmp	r3, #0
  414ad6:	d049      	beq.n	414b6c <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  414ad8:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  414adc:	f36f 0309 	bfc	r3, #0, #10
  414ae0:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  414ae4:	2500      	movs	r5, #0
  414ae6:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  414aea:	4b2a      	ldr	r3, [pc, #168]	; (414b94 <lv_disp_drv_register+0x118>)
  414aec:	881b      	ldrh	r3, [r3, #0]
  414aee:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  414af2:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  414af4:	23ff      	movs	r3, #255	; 0xff
  414af6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  414afa:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  414afc:	4629      	mov	r1, r5
  414afe:	4628      	mov	r0, r5
  414b00:	4e25      	ldr	r6, [pc, #148]	; (414b98 <lv_disp_drv_register+0x11c>)
  414b02:	47b0      	blx	r6
  414b04:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  414b06:	4629      	mov	r1, r5
  414b08:	4628      	mov	r0, r5
  414b0a:	47b0      	blx	r6
  414b0c:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  414b0e:	4629      	mov	r1, r5
  414b10:	4628      	mov	r0, r5
  414b12:	47b0      	blx	r6
  414b14:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  414b16:	4629      	mov	r1, r5
  414b18:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414b1a:	4e20      	ldr	r6, [pc, #128]	; (414b9c <lv_disp_drv_register+0x120>)
  414b1c:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  414b1e:	4629      	mov	r1, r5
  414b20:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414b22:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  414b24:	4629      	mov	r1, r5
  414b26:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414b28:	4e1d      	ldr	r6, [pc, #116]	; (414ba0 <lv_disp_drv_register+0x124>)
  414b2a:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  414b2c:	4629      	mov	r1, r5
  414b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414b30:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  414b32:	6c60      	ldr	r0, [r4, #68]	; 0x44
  414b34:	4b1b      	ldr	r3, [pc, #108]	; (414ba4 <lv_disp_drv_register+0x128>)
  414b36:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  414b38:	4b12      	ldr	r3, [pc, #72]	; (414b84 <lv_disp_drv_register+0x108>)
  414b3a:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  414b3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  414b3e:	4b1a      	ldr	r3, [pc, #104]	; (414ba8 <lv_disp_drv_register+0x12c>)
  414b40:	4798      	blx	r3
}
  414b42:	4620      	mov	r0, r4
  414b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  414b46:	4b12      	ldr	r3, [pc, #72]	; (414b90 <lv_disp_drv_register+0x114>)
  414b48:	4798      	blx	r3
  414b4a:	2800      	cmp	r0, #0
  414b4c:	d1f9      	bne.n	414b42 <lv_disp_drv_register+0xc6>
  414b4e:	4622      	mov	r2, r4
  414b50:	2300      	movs	r3, #0
  414b52:	4816      	ldr	r0, [pc, #88]	; (414bac <lv_disp_drv_register+0x130>)
  414b54:	4916      	ldr	r1, [pc, #88]	; (414bb0 <lv_disp_drv_register+0x134>)
  414b56:	4788      	blx	r1
  414b58:	e7fe      	b.n	414b58 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  414b5a:	4b0a      	ldr	r3, [pc, #40]	; (414b84 <lv_disp_drv_register+0x108>)
  414b5c:	601c      	str	r4, [r3, #0]
  414b5e:	e7aa      	b.n	414ab6 <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  414b60:	6b62      	ldr	r2, [r4, #52]	; 0x34
  414b62:	2300      	movs	r3, #0
  414b64:	4811      	ldr	r0, [pc, #68]	; (414bac <lv_disp_drv_register+0x130>)
  414b66:	4912      	ldr	r1, [pc, #72]	; (414bb0 <lv_disp_drv_register+0x134>)
  414b68:	4788      	blx	r1
  414b6a:	e7fe      	b.n	414b6a <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  414b6c:	2400      	movs	r4, #0
  414b6e:	e7e8      	b.n	414b42 <lv_disp_drv_register+0xc6>
  414b70:	2043a1c0 	.word	0x2043a1c0
  414b74:	00415cf9 	.word	0x00415cf9
  414b78:	004166bd 	.word	0x004166bd
  414b7c:	00416399 	.word	0x00416399
  414b80:	00415ce7 	.word	0x00415ce7
  414b84:	2040c744 	.word	0x2040c744
  414b88:	004099b1 	.word	0x004099b1
  414b8c:	004170f5 	.word	0x004170f5
  414b90:	00415a81 	.word	0x00415a81
  414b94:	0042c244 	.word	0x0042c244
  414b98:	00406625 	.word	0x00406625
  414b9c:	00407771 	.word	0x00407771
  414ba0:	0040552d 	.word	0x0040552d
  414ba4:	00405d69 	.word	0x00405d69
  414ba8:	004174bd 	.word	0x004174bd
  414bac:	00428c94 	.word	0x00428c94
  414bb0:	00415a8d 	.word	0x00415a8d

00414bb4 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  414bb4:	b510      	push	{r4, lr}
  414bb6:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  414bb8:	211c      	movs	r1, #28
  414bba:	4b08      	ldr	r3, [pc, #32]	; (414bdc <lv_indev_drv_init+0x28>)
  414bbc:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  414bbe:	2300      	movs	r3, #0
  414bc0:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  414bc2:	230a      	movs	r3, #10
  414bc4:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  414bc6:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  414bc8:	f44f 73c8 	mov.w	r3, #400	; 0x190
  414bcc:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  414bce:	2364      	movs	r3, #100	; 0x64
  414bd0:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  414bd2:	2332      	movs	r3, #50	; 0x32
  414bd4:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  414bd6:	2303      	movs	r3, #3
  414bd8:	75a3      	strb	r3, [r4, #22]
  414bda:	bd10      	pop	{r4, pc}
  414bdc:	004166bd 	.word	0x004166bd

00414be0 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  414be0:	b538      	push	{r3, r4, r5, lr}
  414be2:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414be4:	68c3      	ldr	r3, [r0, #12]
  414be6:	b313      	cbz	r3, 414c2e <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  414be8:	68eb      	ldr	r3, [r5, #12]
  414bea:	2b00      	cmp	r3, #0
  414bec:	d02d      	beq.n	414c4a <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  414bee:	4818      	ldr	r0, [pc, #96]	; (414c50 <lv_indev_drv_register+0x70>)
  414bf0:	4b18      	ldr	r3, [pc, #96]	; (414c54 <lv_indev_drv_register+0x74>)
  414bf2:	4798      	blx	r3
    if(!indev) {
  414bf4:	4604      	mov	r4, r0
  414bf6:	b1f0      	cbz	r0, 414c36 <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  414bf8:	2160      	movs	r1, #96	; 0x60
  414bfa:	4b17      	ldr	r3, [pc, #92]	; (414c58 <lv_indev_drv_register+0x78>)
  414bfc:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  414bfe:	221c      	movs	r2, #28
  414c00:	4629      	mov	r1, r5
  414c02:	4620      	mov	r0, r4
  414c04:	4b15      	ldr	r3, [pc, #84]	; (414c5c <lv_indev_drv_register+0x7c>)
  414c06:	4798      	blx	r3

    indev->proc.reset_query = 1;
  414c08:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  414c0c:	f043 0302 	orr.w	r3, r3, #2
  414c10:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  414c14:	2300      	movs	r3, #0
  414c16:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  414c18:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  414c1a:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  414c1c:	4623      	mov	r3, r4
  414c1e:	2204      	movs	r2, #4
  414c20:	211e      	movs	r1, #30
  414c22:	480f      	ldr	r0, [pc, #60]	; (414c60 <lv_indev_drv_register+0x80>)
  414c24:	4d0f      	ldr	r5, [pc, #60]	; (414c64 <lv_indev_drv_register+0x84>)
  414c26:	47a8      	blx	r5
  414c28:	6120      	str	r0, [r4, #16]

    return indev;
}
  414c2a:	4620      	mov	r0, r4
  414c2c:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414c2e:	4b0e      	ldr	r3, [pc, #56]	; (414c68 <lv_indev_drv_register+0x88>)
  414c30:	4798      	blx	r3
  414c32:	60e8      	str	r0, [r5, #12]
  414c34:	e7d8      	b.n	414be8 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  414c36:	4b0d      	ldr	r3, [pc, #52]	; (414c6c <lv_indev_drv_register+0x8c>)
  414c38:	4798      	blx	r3
  414c3a:	2800      	cmp	r0, #0
  414c3c:	d1f5      	bne.n	414c2a <lv_indev_drv_register+0x4a>
  414c3e:	4622      	mov	r2, r4
  414c40:	2300      	movs	r3, #0
  414c42:	480b      	ldr	r0, [pc, #44]	; (414c70 <lv_indev_drv_register+0x90>)
  414c44:	490b      	ldr	r1, [pc, #44]	; (414c74 <lv_indev_drv_register+0x94>)
  414c46:	4788      	blx	r1
  414c48:	e7fe      	b.n	414c48 <lv_indev_drv_register+0x68>
        return NULL;
  414c4a:	2400      	movs	r4, #0
  414c4c:	e7ed      	b.n	414c2a <lv_indev_drv_register+0x4a>
  414c4e:	bf00      	nop
  414c50:	2043a1b4 	.word	0x2043a1b4
  414c54:	00415cf9 	.word	0x00415cf9
  414c58:	004166bd 	.word	0x004166bd
  414c5c:	00416399 	.word	0x00416399
  414c60:	004050c9 	.word	0x004050c9
  414c64:	004170f5 	.word	0x004170f5
  414c68:	004148ed 	.word	0x004148ed
  414c6c:	00415a81 	.word	0x00415a81
  414c70:	00428c94 	.word	0x00428c94
  414c74:	00415a8d 	.word	0x00415a8d

00414c78 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  414c78:	b508      	push	{r3, lr}
    if(indev == NULL)
  414c7a:	b120      	cbz	r0, 414c86 <lv_indev_get_next+0xe>
  414c7c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  414c7e:	4804      	ldr	r0, [pc, #16]	; (414c90 <lv_indev_get_next+0x18>)
  414c80:	4b04      	ldr	r3, [pc, #16]	; (414c94 <lv_indev_get_next+0x1c>)
  414c82:	4798      	blx	r3
}
  414c84:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  414c86:	4802      	ldr	r0, [pc, #8]	; (414c90 <lv_indev_get_next+0x18>)
  414c88:	4b03      	ldr	r3, [pc, #12]	; (414c98 <lv_indev_get_next+0x20>)
  414c8a:	4798      	blx	r3
  414c8c:	bd08      	pop	{r3, pc}
  414c8e:	bf00      	nop
  414c90:	2043a1b4 	.word	0x2043a1b4
  414c94:	00415da5 	.word	0x00415da5
  414c98:	00415d91 	.word	0x00415d91

00414c9c <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  414c9c:	b538      	push	{r3, r4, r5, lr}
  414c9e:	4604      	mov	r4, r0
  414ca0:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  414ca2:	2110      	movs	r1, #16
  414ca4:	4628      	mov	r0, r5
  414ca6:	4b10      	ldr	r3, [pc, #64]	; (414ce8 <_lv_indev_read+0x4c>)
  414ca8:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  414caa:	7823      	ldrb	r3, [r4, #0]
  414cac:	2b01      	cmp	r3, #1
  414cae:	d009      	beq.n	414cc4 <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  414cb0:	2b02      	cmp	r3, #2
  414cb2:	d00e      	beq.n	414cd2 <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  414cb4:	2b04      	cmp	r3, #4
  414cb6:	d00f      	beq.n	414cd8 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  414cb8:	6863      	ldr	r3, [r4, #4]
  414cba:	b193      	cbz	r3, 414ce2 <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  414cbc:	4629      	mov	r1, r5
  414cbe:	4620      	mov	r0, r4
  414cc0:	4798      	blx	r3
  414cc2:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  414cc4:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  414cc8:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  414cca:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  414cce:	806b      	strh	r3, [r5, #2]
  414cd0:	e7f2      	b.n	414cb8 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  414cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414cd4:	606b      	str	r3, [r5, #4]
  414cd6:	e7ef      	b.n	414cb8 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  414cd8:	230a      	movs	r3, #10
  414cda:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  414cdc:	2300      	movs	r3, #0
  414cde:	81ab      	strh	r3, [r5, #12]
  414ce0:	e7ea      	b.n	414cb8 <_lv_indev_read+0x1c>
    bool cont = false;
  414ce2:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  414ce4:	bd38      	pop	{r3, r4, r5, pc}
  414ce6:	bf00      	nop
  414ce8:	004166bd 	.word	0x004166bd

00414cec <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  414cec:	2200      	movs	r2, #0
  414cee:	4b03      	ldr	r3, [pc, #12]	; (414cfc <lv_tick_inc+0x10>)
  414cf0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  414cf2:	4a03      	ldr	r2, [pc, #12]	; (414d00 <lv_tick_inc+0x14>)
  414cf4:	6813      	ldr	r3, [r2, #0]
  414cf6:	4418      	add	r0, r3
  414cf8:	6010      	str	r0, [r2, #0]
  414cfa:	4770      	bx	lr
  414cfc:	2040c74c 	.word	0x2040c74c
  414d00:	2040c748 	.word	0x2040c748

00414d04 <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
  414d04:	4b04      	ldr	r3, [pc, #16]	; (414d18 <lv_tick_get+0x14>)
  414d06:	2201      	movs	r2, #1
  414d08:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
  414d0a:	4a04      	ldr	r2, [pc, #16]	; (414d1c <lv_tick_get+0x18>)
  414d0c:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
  414d0e:	781b      	ldrb	r3, [r3, #0]
  414d10:	2b00      	cmp	r3, #0
  414d12:	d0f7      	beq.n	414d04 <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  414d14:	4770      	bx	lr
  414d16:	bf00      	nop
  414d18:	2040c74c 	.word	0x2040c74c
  414d1c:	2040c748 	.word	0x2040c748

00414d20 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  414d20:	b510      	push	{r4, lr}
  414d22:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  414d24:	4b03      	ldr	r3, [pc, #12]	; (414d34 <lv_tick_elaps+0x14>)
  414d26:	4798      	blx	r3

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
  414d28:	42a0      	cmp	r0, r4
  414d2a:	d201      	bcs.n	414d30 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
  414d2c:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
  414d2e:	bd10      	pop	{r4, pc}
        prev_tick = act_time - prev_tick;
  414d30:	1b00      	subs	r0, r0, r4
  414d32:	bd10      	pop	{r4, pc}
  414d34:	00414d05 	.word	0x00414d05

00414d38 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  414d38:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  414d3a:	6a88      	ldr	r0, [r1, #40]	; 0x28
  414d3c:	4282      	cmp	r2, r0
  414d3e:	d00b      	beq.n	414d58 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  414d40:	0280      	lsls	r0, r0, #10
  414d42:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  414d46:	6a0b      	ldr	r3, [r1, #32]
  414d48:	698a      	ldr	r2, [r1, #24]
  414d4a:	1a9b      	subs	r3, r3, r2
  414d4c:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  414d50:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  414d54:	b200      	sxth	r0, r0
  414d56:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  414d58:	f44f 6080 	mov.w	r0, #1024	; 0x400
  414d5c:	e7f3      	b.n	414d46 <lv_anim_path_linear+0xe>
	...

00414d60 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  414d60:	b508      	push	{r3, lr}
    anim_list_changed = true;
  414d62:	2201      	movs	r2, #1
  414d64:	4b08      	ldr	r3, [pc, #32]	; (414d88 <anim_mark_list_change+0x28>)
  414d66:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  414d68:	4808      	ldr	r0, [pc, #32]	; (414d8c <anim_mark_list_change+0x2c>)
  414d6a:	4b09      	ldr	r3, [pc, #36]	; (414d90 <anim_mark_list_change+0x30>)
  414d6c:	4798      	blx	r3
  414d6e:	b128      	cbz	r0, 414d7c <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  414d70:	2104      	movs	r1, #4
  414d72:	4b08      	ldr	r3, [pc, #32]	; (414d94 <anim_mark_list_change+0x34>)
  414d74:	6818      	ldr	r0, [r3, #0]
  414d76:	4b08      	ldr	r3, [pc, #32]	; (414d98 <anim_mark_list_change+0x38>)
  414d78:	4798      	blx	r3
  414d7a:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  414d7c:	2100      	movs	r1, #0
  414d7e:	4b05      	ldr	r3, [pc, #20]	; (414d94 <anim_mark_list_change+0x34>)
  414d80:	6818      	ldr	r0, [r3, #0]
  414d82:	4b05      	ldr	r3, [pc, #20]	; (414d98 <anim_mark_list_change+0x38>)
  414d84:	4798      	blx	r3
  414d86:	bd08      	pop	{r3, pc}
  414d88:	2040c754 	.word	0x2040c754
  414d8c:	2043a284 	.word	0x2043a284
  414d90:	00415d91 	.word	0x00415d91
  414d94:	2040c750 	.word	0x2040c750
  414d98:	00417449 	.word	0x00417449

00414d9c <anim_ready_handler>:
{
  414d9c:	b510      	push	{r4, lr}
  414d9e:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  414da0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  414da4:	f013 0301 	ands.w	r3, r3, #1
  414da8:	d107      	bne.n	414dba <anim_ready_handler+0x1e>
  414daa:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  414dac:	b12a      	cbz	r2, 414dba <anim_ready_handler+0x1e>
  414dae:	f64f 71ff 	movw	r1, #65535	; 0xffff
  414db2:	428a      	cmp	r2, r1
  414db4:	d001      	beq.n	414dba <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  414db6:	3a01      	subs	r2, #1
  414db8:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  414dba:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  414dbc:	b9b2      	cbnz	r2, 414dec <anim_ready_handler+0x50>
  414dbe:	6b02      	ldr	r2, [r0, #48]	; 0x30
  414dc0:	b102      	cbz	r2, 414dc4 <anim_ready_handler+0x28>
  414dc2:	b19b      	cbz	r3, 414dec <anim_ready_handler+0x50>
  414dc4:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  414dc6:	2244      	movs	r2, #68	; 0x44
  414dc8:	4601      	mov	r1, r0
  414dca:	a801      	add	r0, sp, #4
  414dcc:	4b16      	ldr	r3, [pc, #88]	; (414e28 <anim_ready_handler+0x8c>)
  414dce:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414dd0:	4621      	mov	r1, r4
  414dd2:	4816      	ldr	r0, [pc, #88]	; (414e2c <anim_ready_handler+0x90>)
  414dd4:	4b16      	ldr	r3, [pc, #88]	; (414e30 <anim_ready_handler+0x94>)
  414dd6:	4798      	blx	r3
        lv_mem_free(a);
  414dd8:	4620      	mov	r0, r4
  414dda:	4b16      	ldr	r3, [pc, #88]	; (414e34 <anim_ready_handler+0x98>)
  414ddc:	4798      	blx	r3
        anim_mark_list_change();
  414dde:	4b16      	ldr	r3, [pc, #88]	; (414e38 <anim_ready_handler+0x9c>)
  414de0:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  414de2:	9b04      	ldr	r3, [sp, #16]
  414de4:	b1e3      	cbz	r3, 414e20 <anim_ready_handler+0x84>
  414de6:	a801      	add	r0, sp, #4
  414de8:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  414dea:	e019      	b.n	414e20 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  414dec:	6b42      	ldr	r2, [r0, #52]	; 0x34
  414dee:	4252      	negs	r2, r2
  414df0:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  414df2:	6b02      	ldr	r2, [r0, #48]	; 0x30
  414df4:	b1a2      	cbz	r2, 414e20 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  414df6:	b913      	cbnz	r3, 414dfe <anim_ready_handler+0x62>
  414df8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  414dfa:	4249      	negs	r1, r1
  414dfc:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  414dfe:	f083 0301 	eor.w	r3, r3, #1
  414e02:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  414e06:	f363 0100 	bfi	r1, r3, #0, #1
  414e0a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  414e0e:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  414e10:	6a04      	ldr	r4, [r0, #32]
  414e12:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  414e14:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  414e16:	f011 0f01 	tst.w	r1, #1
  414e1a:	d100      	bne.n	414e1e <anim_ready_handler+0x82>
  414e1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  414e1e:	6242      	str	r2, [r0, #36]	; 0x24
}
  414e20:	4b06      	ldr	r3, [pc, #24]	; (414e3c <anim_ready_handler+0xa0>)
  414e22:	7818      	ldrb	r0, [r3, #0]
  414e24:	b012      	add	sp, #72	; 0x48
  414e26:	bd10      	pop	{r4, pc}
  414e28:	00416399 	.word	0x00416399
  414e2c:	2043a284 	.word	0x2043a284
  414e30:	00415e4d 	.word	0x00415e4d
  414e34:	0041624d 	.word	0x0041624d
  414e38:	00414d61 	.word	0x00414d61
  414e3c:	2040c754 	.word	0x2040c754

00414e40 <anim_task>:
{
  414e40:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414e42:	4836      	ldr	r0, [pc, #216]	; (414f1c <anim_task+0xdc>)
  414e44:	4b36      	ldr	r3, [pc, #216]	; (414f20 <anim_task+0xe0>)
  414e46:	4798      	blx	r3
  414e48:	e009      	b.n	414e5e <anim_task+0x1e>
        a->has_run = 0;
  414e4a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  414e4e:	f36f 0341 	bfc	r3, #1, #1
  414e52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414e56:	4601      	mov	r1, r0
  414e58:	4830      	ldr	r0, [pc, #192]	; (414f1c <anim_task+0xdc>)
  414e5a:	4b32      	ldr	r3, [pc, #200]	; (414f24 <anim_task+0xe4>)
  414e5c:	4798      	blx	r3
  414e5e:	2800      	cmp	r0, #0
  414e60:	d1f3      	bne.n	414e4a <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  414e62:	4b31      	ldr	r3, [pc, #196]	; (414f28 <anim_task+0xe8>)
  414e64:	6818      	ldr	r0, [r3, #0]
  414e66:	4b31      	ldr	r3, [pc, #196]	; (414f2c <anim_task+0xec>)
  414e68:	4798      	blx	r3
  414e6a:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414e6c:	482b      	ldr	r0, [pc, #172]	; (414f1c <anim_task+0xdc>)
  414e6e:	4b2c      	ldr	r3, [pc, #176]	; (414f20 <anim_task+0xe0>)
  414e70:	4798      	blx	r3
  414e72:	4604      	mov	r4, r0
    while(a != NULL) {
  414e74:	e022      	b.n	414ebc <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  414e76:	2a00      	cmp	r2, #0
  414e78:	db31      	blt.n	414ede <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  414e7a:	68a3      	ldr	r3, [r4, #8]
  414e7c:	2b00      	cmp	r3, #0
  414e7e:	d02e      	beq.n	414ede <anim_task+0x9e>
  414e80:	4620      	mov	r0, r4
  414e82:	4798      	blx	r3
  414e84:	e02b      	b.n	414ede <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  414e86:	6923      	ldr	r3, [r4, #16]
  414e88:	2b00      	cmp	r3, #0
  414e8a:	d032      	beq.n	414ef2 <anim_task+0xb2>
  414e8c:	4621      	mov	r1, r4
  414e8e:	f104 0010 	add.w	r0, r4, #16
  414e92:	4798      	blx	r3
                if(new_value != a->current) {
  414e94:	69e3      	ldr	r3, [r4, #28]
  414e96:	4298      	cmp	r0, r3
  414e98:	d005      	beq.n	414ea6 <anim_task+0x66>
                    a->current = new_value;
  414e9a:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  414e9c:	6863      	ldr	r3, [r4, #4]
  414e9e:	b113      	cbz	r3, 414ea6 <anim_task+0x66>
  414ea0:	b201      	sxth	r1, r0
  414ea2:	6820      	ldr	r0, [r4, #0]
  414ea4:	4798      	blx	r3
                if(a->act_time >= a->time) {
  414ea6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  414ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414eaa:	429a      	cmp	r2, r3
  414eac:	da27      	bge.n	414efe <anim_task+0xbe>
        if(anim_list_changed)
  414eae:	4b20      	ldr	r3, [pc, #128]	; (414f30 <anim_task+0xf0>)
  414eb0:	781b      	ldrb	r3, [r3, #0]
  414eb2:	b343      	cbz	r3, 414f06 <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414eb4:	4819      	ldr	r0, [pc, #100]	; (414f1c <anim_task+0xdc>)
  414eb6:	4b1a      	ldr	r3, [pc, #104]	; (414f20 <anim_task+0xe0>)
  414eb8:	4798      	blx	r3
  414eba:	4604      	mov	r4, r0
    while(a != NULL) {
  414ebc:	b34c      	cbz	r4, 414f12 <anim_task+0xd2>
        anim_list_changed = false;
  414ebe:	2200      	movs	r2, #0
  414ec0:	4b1b      	ldr	r3, [pc, #108]	; (414f30 <anim_task+0xf0>)
  414ec2:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  414ec4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  414ec8:	f013 0f02 	tst.w	r3, #2
  414ecc:	d1ef      	bne.n	414eae <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  414ece:	f043 0302 	orr.w	r3, r3, #2
  414ed2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  414ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414ed8:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  414eda:	2b00      	cmp	r3, #0
  414edc:	ddcb      	ble.n	414e76 <anim_task+0x36>
            a->act_time += elaps;
  414ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414ee0:	442b      	add	r3, r5
  414ee2:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  414ee4:	2b00      	cmp	r3, #0
  414ee6:	dbe2      	blt.n	414eae <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  414ee8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  414eea:	4293      	cmp	r3, r2
  414eec:	ddcb      	ble.n	414e86 <anim_task+0x46>
  414eee:	62a2      	str	r2, [r4, #40]	; 0x28
  414ef0:	e7c9      	b.n	414e86 <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  414ef2:	4621      	mov	r1, r4
  414ef4:	f104 0010 	add.w	r0, r4, #16
  414ef8:	4b0e      	ldr	r3, [pc, #56]	; (414f34 <anim_task+0xf4>)
  414efa:	4798      	blx	r3
  414efc:	e7ca      	b.n	414e94 <anim_task+0x54>
                    anim_ready_handler(a);
  414efe:	4620      	mov	r0, r4
  414f00:	4b0d      	ldr	r3, [pc, #52]	; (414f38 <anim_task+0xf8>)
  414f02:	4798      	blx	r3
  414f04:	e7d3      	b.n	414eae <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414f06:	4621      	mov	r1, r4
  414f08:	4804      	ldr	r0, [pc, #16]	; (414f1c <anim_task+0xdc>)
  414f0a:	4b06      	ldr	r3, [pc, #24]	; (414f24 <anim_task+0xe4>)
  414f0c:	4798      	blx	r3
  414f0e:	4604      	mov	r4, r0
  414f10:	e7d4      	b.n	414ebc <anim_task+0x7c>
    last_task_run = lv_tick_get();
  414f12:	4b0a      	ldr	r3, [pc, #40]	; (414f3c <anim_task+0xfc>)
  414f14:	4798      	blx	r3
  414f16:	4b04      	ldr	r3, [pc, #16]	; (414f28 <anim_task+0xe8>)
  414f18:	6018      	str	r0, [r3, #0]
  414f1a:	bd38      	pop	{r3, r4, r5, pc}
  414f1c:	2043a284 	.word	0x2043a284
  414f20:	00415d91 	.word	0x00415d91
  414f24:	00415da5 	.word	0x00415da5
  414f28:	2040c758 	.word	0x2040c758
  414f2c:	00414d21 	.word	0x00414d21
  414f30:	2040c754 	.word	0x2040c754
  414f34:	00414d39 	.word	0x00414d39
  414f38:	00414d9d 	.word	0x00414d9d
  414f3c:	00414d05 	.word	0x00414d05

00414f40 <_lv_anim_core_init>:
{
  414f40:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  414f42:	2144      	movs	r1, #68	; 0x44
  414f44:	480a      	ldr	r0, [pc, #40]	; (414f70 <_lv_anim_core_init+0x30>)
  414f46:	4b0b      	ldr	r3, [pc, #44]	; (414f74 <_lv_anim_core_init+0x34>)
  414f48:	4798      	blx	r3
    last_task_run = lv_tick_get();
  414f4a:	4b0b      	ldr	r3, [pc, #44]	; (414f78 <_lv_anim_core_init+0x38>)
  414f4c:	4798      	blx	r3
  414f4e:	4b0b      	ldr	r3, [pc, #44]	; (414f7c <_lv_anim_core_init+0x3c>)
  414f50:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  414f52:	2300      	movs	r3, #0
  414f54:	2204      	movs	r2, #4
  414f56:	211e      	movs	r1, #30
  414f58:	4809      	ldr	r0, [pc, #36]	; (414f80 <_lv_anim_core_init+0x40>)
  414f5a:	4c0a      	ldr	r4, [pc, #40]	; (414f84 <_lv_anim_core_init+0x44>)
  414f5c:	47a0      	blx	r4
  414f5e:	4b0a      	ldr	r3, [pc, #40]	; (414f88 <_lv_anim_core_init+0x48>)
  414f60:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  414f62:	4b0a      	ldr	r3, [pc, #40]	; (414f8c <_lv_anim_core_init+0x4c>)
  414f64:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  414f66:	2200      	movs	r2, #0
  414f68:	4b09      	ldr	r3, [pc, #36]	; (414f90 <_lv_anim_core_init+0x50>)
  414f6a:	701a      	strb	r2, [r3, #0]
  414f6c:	bd10      	pop	{r4, pc}
  414f6e:	bf00      	nop
  414f70:	2043a284 	.word	0x2043a284
  414f74:	00415ce7 	.word	0x00415ce7
  414f78:	00414d05 	.word	0x00414d05
  414f7c:	2040c758 	.word	0x2040c758
  414f80:	00414e41 	.word	0x00414e41
  414f84:	004170f5 	.word	0x004170f5
  414f88:	2040c750 	.word	0x2040c750
  414f8c:	00414d61 	.word	0x00414d61
  414f90:	2040c754 	.word	0x2040c754

00414f94 <lv_anim_init>:
{
  414f94:	b510      	push	{r4, lr}
  414f96:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  414f98:	2144      	movs	r1, #68	; 0x44
  414f9a:	4b0f      	ldr	r3, [pc, #60]	; (414fd8 <lv_anim_init+0x44>)
  414f9c:	4798      	blx	r3
    a->time    = 500;
  414f9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  414fa2:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  414fa4:	2300      	movs	r3, #0
  414fa6:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  414fa8:	2364      	movs	r3, #100	; 0x64
  414faa:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  414fac:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  414fb0:	4a0a      	ldr	r2, [pc, #40]	; (414fdc <lv_anim_init+0x48>)
  414fb2:	2304      	movs	r3, #4
  414fb4:	e004      	b.n	414fc0 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  414fb6:	f812 0b01 	ldrb.w	r0, [r2], #1
  414fba:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  414fbe:	3b01      	subs	r3, #1
    while(len) {
  414fc0:	2b00      	cmp	r3, #0
  414fc2:	d1f8      	bne.n	414fb6 <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  414fc4:	2301      	movs	r3, #1
  414fc6:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  414fc8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  414fcc:	f043 0301 	orr.w	r3, r3, #1
  414fd0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  414fd4:	bd10      	pop	{r4, pc}
  414fd6:	bf00      	nop
  414fd8:	004166bd 	.word	0x004166bd
  414fdc:	0042c248 	.word	0x0042c248

00414fe0 <lv_anim_del>:
{
  414fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414fe4:	4606      	mov	r6, r0
  414fe6:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414fe8:	4812      	ldr	r0, [pc, #72]	; (415034 <lv_anim_del+0x54>)
  414fea:	4b13      	ldr	r3, [pc, #76]	; (415038 <lv_anim_del+0x58>)
  414fec:	4798      	blx	r3
  414fee:	4604      	mov	r4, r0
    bool del = false;
  414ff0:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  414ff4:	e00b      	b.n	41500e <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414ff6:	4621      	mov	r1, r4
  414ff8:	480e      	ldr	r0, [pc, #56]	; (415034 <lv_anim_del+0x54>)
  414ffa:	4b10      	ldr	r3, [pc, #64]	; (41503c <lv_anim_del+0x5c>)
  414ffc:	4798      	blx	r3
            lv_mem_free(a);
  414ffe:	4620      	mov	r0, r4
  415000:	4b0f      	ldr	r3, [pc, #60]	; (415040 <lv_anim_del+0x60>)
  415002:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  415004:	4b0f      	ldr	r3, [pc, #60]	; (415044 <lv_anim_del+0x64>)
  415006:	4798      	blx	r3
            del = true;
  415008:	f04f 0801 	mov.w	r8, #1
  41500c:	462c      	mov	r4, r5
    while(a != NULL) {
  41500e:	b16c      	cbz	r4, 41502c <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  415010:	4621      	mov	r1, r4
  415012:	4808      	ldr	r0, [pc, #32]	; (415034 <lv_anim_del+0x54>)
  415014:	4b0c      	ldr	r3, [pc, #48]	; (415048 <lv_anim_del+0x68>)
  415016:	4798      	blx	r3
  415018:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  41501a:	6823      	ldr	r3, [r4, #0]
  41501c:	42b3      	cmp	r3, r6
  41501e:	d1f5      	bne.n	41500c <lv_anim_del+0x2c>
  415020:	6863      	ldr	r3, [r4, #4]
  415022:	42bb      	cmp	r3, r7
  415024:	d0e7      	beq.n	414ff6 <lv_anim_del+0x16>
  415026:	2f00      	cmp	r7, #0
  415028:	d1f0      	bne.n	41500c <lv_anim_del+0x2c>
  41502a:	e7e4      	b.n	414ff6 <lv_anim_del+0x16>
}
  41502c:	4640      	mov	r0, r8
  41502e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415032:	bf00      	nop
  415034:	2043a284 	.word	0x2043a284
  415038:	00415d91 	.word	0x00415d91
  41503c:	00415e4d 	.word	0x00415e4d
  415040:	0041624d 	.word	0x0041624d
  415044:	00414d61 	.word	0x00414d61
  415048:	00415da5 	.word	0x00415da5

0041504c <lv_anim_start>:
{
  41504c:	b538      	push	{r3, r4, r5, lr}
  41504e:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  415050:	6841      	ldr	r1, [r0, #4]
  415052:	b111      	cbz	r1, 41505a <lv_anim_start+0xe>
  415054:	6800      	ldr	r0, [r0, #0]
  415056:	4b18      	ldr	r3, [pc, #96]	; (4150b8 <lv_anim_start+0x6c>)
  415058:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  41505a:	4818      	ldr	r0, [pc, #96]	; (4150bc <lv_anim_start+0x70>)
  41505c:	4b18      	ldr	r3, [pc, #96]	; (4150c0 <lv_anim_start+0x74>)
  41505e:	4798      	blx	r3
  415060:	b9e8      	cbnz	r0, 41509e <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  415062:	4816      	ldr	r0, [pc, #88]	; (4150bc <lv_anim_start+0x70>)
  415064:	4b17      	ldr	r3, [pc, #92]	; (4150c4 <lv_anim_start+0x78>)
  415066:	4798      	blx	r3
  415068:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  41506a:	4b17      	ldr	r3, [pc, #92]	; (4150c8 <lv_anim_start+0x7c>)
  41506c:	4798      	blx	r3
  41506e:	b1e0      	cbz	r0, 4150aa <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  415070:	b1a4      	cbz	r4, 41509c <lv_anim_start+0x50>
    a->time_orig = a->time;
  415072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  415074:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  415076:	2244      	movs	r2, #68	; 0x44
  415078:	4629      	mov	r1, r5
  41507a:	4620      	mov	r0, r4
  41507c:	4b13      	ldr	r3, [pc, #76]	; (4150cc <lv_anim_start+0x80>)
  41507e:	4798      	blx	r3
    if(new_anim->early_apply) {
  415080:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  415084:	f013 0f01 	tst.w	r3, #1
  415088:	d006      	beq.n	415098 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  41508a:	6863      	ldr	r3, [r4, #4]
  41508c:	b123      	cbz	r3, 415098 <lv_anim_start+0x4c>
  41508e:	6820      	ldr	r0, [r4, #0]
  415090:	b110      	cbz	r0, 415098 <lv_anim_start+0x4c>
  415092:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  415096:	4798      	blx	r3
    anim_mark_list_change();
  415098:	4b0d      	ldr	r3, [pc, #52]	; (4150d0 <lv_anim_start+0x84>)
  41509a:	4798      	blx	r3
  41509c:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  41509e:	4b0d      	ldr	r3, [pc, #52]	; (4150d4 <lv_anim_start+0x88>)
  4150a0:	4798      	blx	r3
  4150a2:	3801      	subs	r0, #1
  4150a4:	4b0c      	ldr	r3, [pc, #48]	; (4150d8 <lv_anim_start+0x8c>)
  4150a6:	6018      	str	r0, [r3, #0]
  4150a8:	e7db      	b.n	415062 <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  4150aa:	4622      	mov	r2, r4
  4150ac:	2300      	movs	r3, #0
  4150ae:	480b      	ldr	r0, [pc, #44]	; (4150dc <lv_anim_start+0x90>)
  4150b0:	490b      	ldr	r1, [pc, #44]	; (4150e0 <lv_anim_start+0x94>)
  4150b2:	4788      	blx	r1
  4150b4:	e7fe      	b.n	4150b4 <lv_anim_start+0x68>
  4150b6:	bf00      	nop
  4150b8:	00414fe1 	.word	0x00414fe1
  4150bc:	2043a284 	.word	0x2043a284
  4150c0:	00415ffd 	.word	0x00415ffd
  4150c4:	00415cf9 	.word	0x00415cf9
  4150c8:	00415a81 	.word	0x00415a81
  4150cc:	00416399 	.word	0x00416399
  4150d0:	00414d61 	.word	0x00414d61
  4150d4:	00414d05 	.word	0x00414d05
  4150d8:	2040c758 	.word	0x2040c758
  4150dc:	00428c94 	.word	0x00428c94
  4150e0:	00415a8d 	.word	0x00415a8d

004150e4 <lv_anim_get>:
{
  4150e4:	b538      	push	{r3, r4, r5, lr}
  4150e6:	4604      	mov	r4, r0
  4150e8:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  4150ea:	4808      	ldr	r0, [pc, #32]	; (41510c <lv_anim_get+0x28>)
  4150ec:	4b08      	ldr	r3, [pc, #32]	; (415110 <lv_anim_get+0x2c>)
  4150ee:	4798      	blx	r3
  4150f0:	e003      	b.n	4150fa <lv_anim_get+0x16>
  4150f2:	4601      	mov	r1, r0
  4150f4:	4805      	ldr	r0, [pc, #20]	; (41510c <lv_anim_get+0x28>)
  4150f6:	4b07      	ldr	r3, [pc, #28]	; (415114 <lv_anim_get+0x30>)
  4150f8:	4798      	blx	r3
  4150fa:	b128      	cbz	r0, 415108 <lv_anim_get+0x24>
        if(a->var == var && a->exec_cb == exec_cb) {
  4150fc:	6803      	ldr	r3, [r0, #0]
  4150fe:	42a3      	cmp	r3, r4
  415100:	d1f7      	bne.n	4150f2 <lv_anim_get+0xe>
  415102:	6843      	ldr	r3, [r0, #4]
  415104:	42ab      	cmp	r3, r5
  415106:	d1f4      	bne.n	4150f2 <lv_anim_get+0xe>
}
  415108:	bd38      	pop	{r3, r4, r5, pc}
  41510a:	bf00      	nop
  41510c:	2043a284 	.word	0x2043a284
  415110:	00415d91 	.word	0x00415d91
  415114:	00415da5 	.word	0x00415da5

00415118 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
  415118:	1a89      	subs	r1, r1, r2
  41511a:	2900      	cmp	r1, #0
  41511c:	bfb8      	it	lt
  41511e:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
  415120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  415124:	fb02 f201 	mul.w	r2, r2, r1
  415128:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
  41512c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  415130:	d301      	bcc.n	415136 <lv_anim_speed_to_time+0x1e>
  415132:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if(time == 0) {
  415136:	b900      	cbnz	r0, 41513a <lv_anim_speed_to_time+0x22>
        time++;
  415138:	3001      	adds	r0, #1
}
  41513a:	b280      	uxth	r0, r0
  41513c:	4770      	bx	lr

0041513e <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  41513e:	b410      	push	{r4}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  415140:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  415144:	f9b0 2000 	ldrsh.w	r2, [r0]
  415148:	1a9b      	subs	r3, r3, r2
  41514a:	d417      	bmi.n	41517c <lv_point_within_circle+0x3e>
  41514c:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
  41514e:	b29c      	uxth	r4, r3
  415150:	fa14 f282 	uxtah	r2, r4, r2
  415154:	b292      	uxth	r2, r2
    lv_coord_t cy = area->y1 + r;
  415156:	8840      	ldrh	r0, [r0, #2]
  415158:	4404      	add	r4, r0
  41515a:	b2a4      	uxth	r4, r4

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
  41515c:	8808      	ldrh	r0, [r1, #0]
  41515e:	1a82      	subs	r2, r0, r2
    lv_coord_t py = p->y - cy;
  415160:	8849      	ldrh	r1, [r1, #2]
  415162:	1b09      	subs	r1, r1, r4

    uint32_t r_sqrd = r * r;
  415164:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  415168:	fb11 f101 	smulbb	r1, r1, r1
  41516c:	fb12 1202 	smlabb	r2, r2, r2, r1

    if(dist <= r_sqrd)
  415170:	4293      	cmp	r3, r2
  415172:	d205      	bcs.n	415180 <lv_point_within_circle+0x42>
        return true;
    else
        return false;
  415174:	2000      	movs	r0, #0
}
  415176:	f85d 4b04 	ldr.w	r4, [sp], #4
  41517a:	4770      	bx	lr
    lv_coord_t r = (area->x2 - area->x1) / 2;
  41517c:	3301      	adds	r3, #1
  41517e:	e7e5      	b.n	41514c <lv_point_within_circle+0xe>
        return true;
  415180:	2001      	movs	r0, #1
  415182:	e7f8      	b.n	415176 <lv_point_within_circle+0x38>

00415184 <lv_area_set>:
    area_p->x1 = x1;
  415184:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  415186:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  415188:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  41518a:	f9bd 3000 	ldrsh.w	r3, [sp]
  41518e:	80c3      	strh	r3, [r0, #6]
  415190:	4770      	bx	lr

00415192 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  415192:	8843      	ldrh	r3, [r0, #2]
  415194:	4419      	add	r1, r3
  415196:	b289      	uxth	r1, r1
  415198:	3901      	subs	r1, #1
  41519a:	80c1      	strh	r1, [r0, #6]
  41519c:	4770      	bx	lr

0041519e <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  41519e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4151a2:	f9b0 3000 	ldrsh.w	r3, [r0]
  4151a6:	1ad2      	subs	r2, r2, r3
  4151a8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  4151ac:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  4151b0:	1a18      	subs	r0, r3, r0
  4151b2:	3001      	adds	r0, #1
}
  4151b4:	fb02 0000 	mla	r0, r2, r0, r0
  4151b8:	4770      	bx	lr

004151ba <_lv_area_intersect>:
{
  4151ba:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
  4151bc:	f9b2 4000 	ldrsh.w	r4, [r2]
  4151c0:	f9b1 3000 	ldrsh.w	r3, [r1]
  4151c4:	429c      	cmp	r4, r3
  4151c6:	bfb8      	it	lt
  4151c8:	461c      	movlt	r4, r3
  4151ca:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
  4151cc:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  4151d0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  4151d4:	429d      	cmp	r5, r3
  4151d6:	bfb8      	it	lt
  4151d8:	461d      	movlt	r5, r3
  4151da:	8045      	strh	r5, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
  4151dc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  4151e0:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  4151e4:	42b3      	cmp	r3, r6
  4151e6:	bfa8      	it	ge
  4151e8:	4633      	movge	r3, r6
  4151ea:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
  4151ec:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  4151f0:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  4151f4:	428a      	cmp	r2, r1
  4151f6:	bfa8      	it	ge
  4151f8:	460a      	movge	r2, r1
  4151fa:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  4151fc:	429c      	cmp	r4, r3
  4151fe:	dc05      	bgt.n	41520c <_lv_area_intersect+0x52>
  415200:	4295      	cmp	r5, r2
  415202:	dd01      	ble.n	415208 <_lv_area_intersect+0x4e>
        union_ok = false;
  415204:	2000      	movs	r0, #0
  415206:	e002      	b.n	41520e <_lv_area_intersect+0x54>
    bool union_ok = true;
  415208:	2001      	movs	r0, #1
  41520a:	e000      	b.n	41520e <_lv_area_intersect+0x54>
        union_ok = false;
  41520c:	2000      	movs	r0, #0
}
  41520e:	bc70      	pop	{r4, r5, r6}
  415210:	4770      	bx	lr

00415212 <_lv_area_join>:
{
  415212:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
  415214:	f9b2 3000 	ldrsh.w	r3, [r2]
  415218:	f9b1 4000 	ldrsh.w	r4, [r1]
  41521c:	42a3      	cmp	r3, r4
  41521e:	bfa8      	it	ge
  415220:	4623      	movge	r3, r4
  415222:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
  415224:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  415228:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  41522c:	42a3      	cmp	r3, r4
  41522e:	bfa8      	it	ge
  415230:	4623      	movge	r3, r4
  415232:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
  415234:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  415238:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  41523c:	42a3      	cmp	r3, r4
  41523e:	bfb8      	it	lt
  415240:	4623      	movlt	r3, r4
  415242:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
  415244:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  415248:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  41524c:	4293      	cmp	r3, r2
  41524e:	bfb8      	it	lt
  415250:	4613      	movlt	r3, r2
  415252:	80c3      	strh	r3, [r0, #6]
}
  415254:	f85d 4b04 	ldr.w	r4, [sp], #4
  415258:	4770      	bx	lr
	...

0041525c <_lv_area_is_point_on>:
{
  41525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415260:	b082      	sub	sp, #8
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  415262:	f9b1 3000 	ldrsh.w	r3, [r1]
  415266:	f9b0 6000 	ldrsh.w	r6, [r0]
  41526a:	42b3      	cmp	r3, r6
  41526c:	db0f      	blt.n	41528e <_lv_area_is_point_on+0x32>
  41526e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  415272:	42a3      	cmp	r3, r4
  415274:	dc52      	bgt.n	41531c <_lv_area_is_point_on+0xc0>
  415276:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  41527a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  41527e:	42a3      	cmp	r3, r4
  415280:	db4e      	blt.n	415320 <_lv_area_is_point_on+0xc4>
  415282:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  415286:	42a3      	cmp	r3, r4
  415288:	dd4c      	ble.n	415324 <_lv_area_is_point_on+0xc8>
    bool is_on_rect = false;
  41528a:	2500      	movs	r5, #0
  41528c:	e000      	b.n	415290 <_lv_area_is_point_on+0x34>
  41528e:	2500      	movs	r5, #0
    if(!is_on_rect)
  415290:	2d00      	cmp	r5, #0
  415292:	d03f      	beq.n	415314 <_lv_area_is_point_on+0xb8>
    if(radius <= 0) {
  415294:	2a00      	cmp	r2, #0
  415296:	dd3d      	ble.n	415314 <_lv_area_is_point_on+0xb8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415298:	8884      	ldrh	r4, [r0, #4]
  41529a:	b2b3      	uxth	r3, r6
  41529c:	1ae4      	subs	r4, r4, r3
  41529e:	b2a4      	uxth	r4, r4
  4152a0:	3401      	adds	r4, #1
  4152a2:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  4152a4:	2c00      	cmp	r4, #0
  4152a6:	db3f      	blt.n	415328 <_lv_area_is_point_on+0xcc>
  4152a8:	1064      	asrs	r4, r4, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4152aa:	88c3      	ldrh	r3, [r0, #6]
  4152ac:	8847      	ldrh	r7, [r0, #2]
  4152ae:	1bdb      	subs	r3, r3, r7
  4152b0:	b29b      	uxth	r3, r3
  4152b2:	3301      	adds	r3, #1
  4152b4:	b21b      	sxth	r3, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  4152b6:	2b00      	cmp	r3, #0
  4152b8:	db38      	blt.n	41532c <_lv_area_is_point_on+0xd0>
  4152ba:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
  4152bc:	429c      	cmp	r4, r3
  4152be:	bfa8      	it	ge
  4152c0:	461c      	movge	r4, r3
  4152c2:	b224      	sxth	r4, r4
    if(radius > max_radius)
  4152c4:	42a2      	cmp	r2, r4
  4152c6:	dc00      	bgt.n	4152ca <_lv_area_is_point_on+0x6e>
  4152c8:	4614      	mov	r4, r2
  4152ca:	4688      	mov	r8, r1
  4152cc:	4607      	mov	r7, r0
    corner_area.x1 = a_p->x1;
  4152ce:	f8ad 6000 	strh.w	r6, [sp]
    corner_area.x2 = a_p->x1 + radius;
  4152d2:	8803      	ldrh	r3, [r0, #0]
  4152d4:	b2a4      	uxth	r4, r4
  4152d6:	4423      	add	r3, r4
  4152d8:	f8ad 3004 	strh.w	r3, [sp, #4]
    corner_area.y1 = a_p->y1;
  4152dc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  4152e0:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  4152e4:	8843      	ldrh	r3, [r0, #2]
  4152e6:	4423      	add	r3, r4
  4152e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4152ec:	2200      	movs	r2, #0
  4152ee:	4668      	mov	r0, sp
  4152f0:	f7ff ffb4 	bl	41525c <_lv_area_is_point_on>
  4152f4:	b1e0      	cbz	r0, 415330 <_lv_area_is_point_on+0xd4>
        corner_area.x2 += radius;
  4152f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4152fa:	4423      	add	r3, r4
  4152fc:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
  415300:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  415304:	441c      	add	r4, r3
  415306:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  41530a:	4641      	mov	r1, r8
  41530c:	4668      	mov	r0, sp
  41530e:	4b36      	ldr	r3, [pc, #216]	; (4153e8 <_lv_area_is_point_on+0x18c>)
  415310:	4798      	blx	r3
  415312:	4605      	mov	r5, r0
}
  415314:	4628      	mov	r0, r5
  415316:	b002      	add	sp, #8
  415318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_on_rect = false;
  41531c:	2500      	movs	r5, #0
  41531e:	e7b7      	b.n	415290 <_lv_area_is_point_on+0x34>
  415320:	2500      	movs	r5, #0
  415322:	e7b5      	b.n	415290 <_lv_area_is_point_on+0x34>
        is_on_rect = true;
  415324:	2501      	movs	r5, #1
  415326:	e7b3      	b.n	415290 <_lv_area_is_point_on+0x34>
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  415328:	3401      	adds	r4, #1
  41532a:	e7bd      	b.n	4152a8 <_lv_area_is_point_on+0x4c>
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  41532c:	3301      	adds	r3, #1
  41532e:	e7c4      	b.n	4152ba <_lv_area_is_point_on+0x5e>
    corner_area.y1 = a_p->y2 - radius;
  415330:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  415334:	b293      	uxth	r3, r2
  415336:	1b1b      	subs	r3, r3, r4
  415338:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
  41533c:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  415340:	2200      	movs	r2, #0
  415342:	4641      	mov	r1, r8
  415344:	4668      	mov	r0, sp
  415346:	f7ff ff89 	bl	41525c <_lv_area_is_point_on>
  41534a:	b178      	cbz	r0, 41536c <_lv_area_is_point_on+0x110>
        corner_area.x2 += radius;
  41534c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  415350:	4423      	add	r3, r4
  415352:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
  415356:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41535a:	1b1c      	subs	r4, r3, r4
  41535c:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  415360:	4641      	mov	r1, r8
  415362:	4668      	mov	r0, sp
  415364:	4b20      	ldr	r3, [pc, #128]	; (4153e8 <_lv_area_is_point_on+0x18c>)
  415366:	4798      	blx	r3
  415368:	4605      	mov	r5, r0
  41536a:	e7d3      	b.n	415314 <_lv_area_is_point_on+0xb8>
    corner_area.x1 = a_p->x2 - radius;
  41536c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  415370:	b293      	uxth	r3, r2
  415372:	1b1b      	subs	r3, r3, r4
  415374:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
  415378:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  41537c:	2200      	movs	r2, #0
  41537e:	4641      	mov	r1, r8
  415380:	4668      	mov	r0, sp
  415382:	f7ff ff6b 	bl	41525c <_lv_area_is_point_on>
  415386:	b178      	cbz	r0, 4153a8 <_lv_area_is_point_on+0x14c>
        corner_area.x1 -= radius;
  415388:	f8bd 3000 	ldrh.w	r3, [sp]
  41538c:	1b1b      	subs	r3, r3, r4
  41538e:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
  415392:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  415396:	1b1c      	subs	r4, r3, r4
  415398:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  41539c:	4641      	mov	r1, r8
  41539e:	4668      	mov	r0, sp
  4153a0:	4b11      	ldr	r3, [pc, #68]	; (4153e8 <_lv_area_is_point_on+0x18c>)
  4153a2:	4798      	blx	r3
  4153a4:	4605      	mov	r5, r0
  4153a6:	e7b5      	b.n	415314 <_lv_area_is_point_on+0xb8>
    corner_area.y1 = a_p->y1;
  4153a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  4153ac:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  4153b0:	887b      	ldrh	r3, [r7, #2]
  4153b2:	4423      	add	r3, r4
  4153b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  4153b8:	2200      	movs	r2, #0
  4153ba:	4641      	mov	r1, r8
  4153bc:	4668      	mov	r0, sp
  4153be:	f7ff ff4d 	bl	41525c <_lv_area_is_point_on>
  4153c2:	2800      	cmp	r0, #0
  4153c4:	d0a6      	beq.n	415314 <_lv_area_is_point_on+0xb8>
        corner_area.x1 -= radius;
  4153c6:	f8bd 3000 	ldrh.w	r3, [sp]
  4153ca:	1b1b      	subs	r3, r3, r4
  4153cc:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
  4153d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4153d4:	441c      	add	r4, r3
  4153d6:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  4153da:	4641      	mov	r1, r8
  4153dc:	4668      	mov	r0, sp
  4153de:	4b02      	ldr	r3, [pc, #8]	; (4153e8 <_lv_area_is_point_on+0x18c>)
  4153e0:	4798      	blx	r3
  4153e2:	4605      	mov	r5, r0
  4153e4:	e796      	b.n	415314 <_lv_area_is_point_on+0xb8>
  4153e6:	bf00      	nop
  4153e8:	0041513f 	.word	0x0041513f

004153ec <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
  4153ec:	f9b0 2000 	ldrsh.w	r2, [r0]
  4153f0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  4153f4:	429a      	cmp	r2, r3
  4153f6:	dc13      	bgt.n	415420 <_lv_area_is_on+0x34>
  4153f8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  4153fc:	f9b1 3000 	ldrsh.w	r3, [r1]
  415400:	429a      	cmp	r2, r3
  415402:	db0f      	blt.n	415424 <_lv_area_is_on+0x38>
  415404:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  415408:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  41540c:	429a      	cmp	r2, r3
  41540e:	dc0b      	bgt.n	415428 <_lv_area_is_on+0x3c>
  415410:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  415414:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415418:	429a      	cmp	r2, r3
  41541a:	da07      	bge.n	41542c <_lv_area_is_on+0x40>
        return false;
  41541c:	2000      	movs	r0, #0
  41541e:	4770      	bx	lr
  415420:	2000      	movs	r0, #0
  415422:	4770      	bx	lr
  415424:	2000      	movs	r0, #0
  415426:	4770      	bx	lr
  415428:	2000      	movs	r0, #0
  41542a:	4770      	bx	lr
        return true;
  41542c:	2001      	movs	r0, #1
}
  41542e:	4770      	bx	lr

00415430 <_lv_area_is_in>:
{
  415430:	b5f0      	push	{r4, r5, r6, r7, lr}
  415432:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  415434:	f9b0 5000 	ldrsh.w	r5, [r0]
  415438:	f9b1 3000 	ldrsh.w	r3, [r1]
  41543c:	429d      	cmp	r5, r3
  41543e:	db13      	blt.n	415468 <_lv_area_is_in+0x38>
  415440:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  415444:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415448:	429c      	cmp	r4, r3
  41544a:	db13      	blt.n	415474 <_lv_area_is_in+0x44>
  41544c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  415450:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  415454:	429c      	cmp	r4, r3
  415456:	dc0f      	bgt.n	415478 <_lv_area_is_in+0x48>
       ain_p->y2 <= aholder_p->y2) {
  415458:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  41545c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  415460:	429c      	cmp	r4, r3
  415462:	dd0b      	ble.n	41547c <_lv_area_is_in+0x4c>
    bool is_in = false;
  415464:	2300      	movs	r3, #0
  415466:	e000      	b.n	41546a <_lv_area_is_in+0x3a>
  415468:	2300      	movs	r3, #0
    if(!is_in) return false;
  41546a:	b103      	cbz	r3, 41546e <_lv_area_is_in+0x3e>
    if(radius == 0) return true;
  41546c:	b942      	cbnz	r2, 415480 <_lv_area_is_in+0x50>
}
  41546e:	4618      	mov	r0, r3
  415470:	b003      	add	sp, #12
  415472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_in = false;
  415474:	2300      	movs	r3, #0
  415476:	e7f8      	b.n	41546a <_lv_area_is_in+0x3a>
  415478:	2300      	movs	r3, #0
  41547a:	e7f6      	b.n	41546a <_lv_area_is_in+0x3a>
        is_in = true;
  41547c:	2301      	movs	r3, #1
  41547e:	e7f4      	b.n	41546a <_lv_area_is_in+0x3a>
  415480:	4617      	mov	r7, r2
  415482:	460c      	mov	r4, r1
  415484:	4606      	mov	r6, r0
    p.x = ain_p->x1;
  415486:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  41548a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  41548e:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  415492:	a901      	add	r1, sp, #4
  415494:	4620      	mov	r0, r4
  415496:	4b17      	ldr	r3, [pc, #92]	; (4154f4 <_lv_area_is_in+0xc4>)
  415498:	4798      	blx	r3
  41549a:	4603      	mov	r3, r0
  41549c:	2800      	cmp	r0, #0
  41549e:	d0e6      	beq.n	41546e <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  4154a0:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  4154a4:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  4154a8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  4154ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4154b0:	463a      	mov	r2, r7
  4154b2:	a901      	add	r1, sp, #4
  4154b4:	4620      	mov	r0, r4
  4154b6:	4b0f      	ldr	r3, [pc, #60]	; (4154f4 <_lv_area_is_in+0xc4>)
  4154b8:	4798      	blx	r3
  4154ba:	4603      	mov	r3, r0
  4154bc:	2800      	cmp	r0, #0
  4154be:	d0d6      	beq.n	41546e <_lv_area_is_in+0x3e>
    p.x = ain_p->x1;
  4154c0:	f9b6 3000 	ldrsh.w	r3, [r6]
  4154c4:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
  4154c8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  4154cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4154d0:	463a      	mov	r2, r7
  4154d2:	a901      	add	r1, sp, #4
  4154d4:	4620      	mov	r0, r4
  4154d6:	4b07      	ldr	r3, [pc, #28]	; (4154f4 <_lv_area_is_in+0xc4>)
  4154d8:	4798      	blx	r3
  4154da:	4603      	mov	r3, r0
  4154dc:	2800      	cmp	r0, #0
  4154de:	d0c6      	beq.n	41546e <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  4154e0:	a902      	add	r1, sp, #8
  4154e2:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  4154e6:	463a      	mov	r2, r7
  4154e8:	4620      	mov	r0, r4
  4154ea:	4b02      	ldr	r3, [pc, #8]	; (4154f4 <_lv_area_is_in+0xc4>)
  4154ec:	4798      	blx	r3
  4154ee:	4603      	mov	r3, r0
  4154f0:	e7bd      	b.n	41546e <_lv_area_is_in+0x3e>
  4154f2:	bf00      	nop
  4154f4:	0041525d 	.word	0x0041525d

004154f8 <_lv_area_align>:
{
  4154f8:	b430      	push	{r4, r5}
    switch(align) {
  4154fa:	2a14      	cmp	r2, #20
  4154fc:	d842      	bhi.n	415584 <_lv_area_align+0x8c>
  4154fe:	e8df f012 	tbh	[pc, r2, lsl #1]
  415502:	0015      	.short	0x0015
  415504:	00570053 	.word	0x00570053
  415508:	00850074 	.word	0x00850074
  41550c:	00bf0096 	.word	0x00bf0096
  415510:	00f900dc 	.word	0x00f900dc
  415514:	012b0122 	.word	0x012b0122
  415518:	0161014c 	.word	0x0161014c
  41551c:	018b016a 	.word	0x018b016a
  415520:	01a901a0 	.word	0x01a901a0
  415524:	01df01ca 	.word	0x01df01ca
  415528:	020901e8 	.word	0x020901e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41552c:	8884      	ldrh	r4, [r0, #4]
  41552e:	8802      	ldrh	r2, [r0, #0]
  415530:	1aa4      	subs	r4, r4, r2
  415532:	b2a4      	uxth	r4, r4
  415534:	3401      	adds	r4, #1
  415536:	b224      	sxth	r4, r4
  415538:	888a      	ldrh	r2, [r1, #4]
  41553a:	880d      	ldrh	r5, [r1, #0]
  41553c:	1b52      	subs	r2, r2, r5
  41553e:	b292      	uxth	r2, r2
  415540:	3201      	adds	r2, #1
  415542:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415544:	4625      	mov	r5, r4
  415546:	2c00      	cmp	r4, #0
  415548:	db26      	blt.n	415598 <_lv_area_align+0xa0>
  41554a:	106d      	asrs	r5, r5, #1
  41554c:	4614      	mov	r4, r2
  41554e:	2a00      	cmp	r2, #0
  415550:	db24      	blt.n	41559c <_lv_area_align+0xa4>
  415552:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415556:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415558:	88c4      	ldrh	r4, [r0, #6]
  41555a:	8842      	ldrh	r2, [r0, #2]
  41555c:	1aa4      	subs	r4, r4, r2
  41555e:	b2a4      	uxth	r4, r4
  415560:	3401      	adds	r4, #1
  415562:	b224      	sxth	r4, r4
  415564:	88ca      	ldrh	r2, [r1, #6]
  415566:	8849      	ldrh	r1, [r1, #2]
  415568:	1a52      	subs	r2, r2, r1
  41556a:	b292      	uxth	r2, r2
  41556c:	3201      	adds	r2, #1
  41556e:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415570:	4621      	mov	r1, r4
  415572:	2c00      	cmp	r4, #0
  415574:	db14      	blt.n	4155a0 <_lv_area_align+0xa8>
  415576:	1049      	asrs	r1, r1, #1
  415578:	4614      	mov	r4, r2
  41557a:	2a00      	cmp	r2, #0
  41557c:	db12      	blt.n	4155a4 <_lv_area_align+0xac>
  41557e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415582:	8059      	strh	r1, [r3, #2]
    res->x += base->x1;
  415584:	8802      	ldrh	r2, [r0, #0]
  415586:	8819      	ldrh	r1, [r3, #0]
  415588:	440a      	add	r2, r1
  41558a:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
  41558c:	8842      	ldrh	r2, [r0, #2]
  41558e:	8859      	ldrh	r1, [r3, #2]
  415590:	440a      	add	r2, r1
  415592:	805a      	strh	r2, [r3, #2]
}
  415594:	bc30      	pop	{r4, r5}
  415596:	4770      	bx	lr
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415598:	1c65      	adds	r5, r4, #1
  41559a:	e7d6      	b.n	41554a <_lv_area_align+0x52>
  41559c:	1c54      	adds	r4, r2, #1
  41559e:	e7d8      	b.n	415552 <_lv_area_align+0x5a>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4155a0:	1c61      	adds	r1, r4, #1
  4155a2:	e7e8      	b.n	415576 <_lv_area_align+0x7e>
  4155a4:	1c54      	adds	r4, r2, #1
  4155a6:	e7ea      	b.n	41557e <_lv_area_align+0x86>
            res->x = 0;
  4155a8:	2200      	movs	r2, #0
  4155aa:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4155ac:	805a      	strh	r2, [r3, #2]
            break;
  4155ae:	e7e9      	b.n	415584 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4155b0:	8884      	ldrh	r4, [r0, #4]
  4155b2:	8802      	ldrh	r2, [r0, #0]
  4155b4:	1aa4      	subs	r4, r4, r2
  4155b6:	b2a4      	uxth	r4, r4
  4155b8:	3401      	adds	r4, #1
  4155ba:	b224      	sxth	r4, r4
  4155bc:	888a      	ldrh	r2, [r1, #4]
  4155be:	8809      	ldrh	r1, [r1, #0]
  4155c0:	1a52      	subs	r2, r2, r1
  4155c2:	b292      	uxth	r2, r2
  4155c4:	3201      	adds	r2, #1
  4155c6:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4155c8:	4621      	mov	r1, r4
  4155ca:	2c00      	cmp	r4, #0
  4155cc:	db09      	blt.n	4155e2 <_lv_area_align+0xea>
  4155ce:	1049      	asrs	r1, r1, #1
  4155d0:	4614      	mov	r4, r2
  4155d2:	2a00      	cmp	r2, #0
  4155d4:	db07      	blt.n	4155e6 <_lv_area_align+0xee>
  4155d6:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4155da:	8019      	strh	r1, [r3, #0]
            res->y = 0;
  4155dc:	2200      	movs	r2, #0
  4155de:	805a      	strh	r2, [r3, #2]
            break;
  4155e0:	e7d0      	b.n	415584 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4155e2:	1c61      	adds	r1, r4, #1
  4155e4:	e7f3      	b.n	4155ce <_lv_area_align+0xd6>
  4155e6:	1c54      	adds	r4, r2, #1
  4155e8:	e7f5      	b.n	4155d6 <_lv_area_align+0xde>
  4155ea:	8882      	ldrh	r2, [r0, #4]
  4155ec:	8804      	ldrh	r4, [r0, #0]
  4155ee:	1b12      	subs	r2, r2, r4
  4155f0:	b292      	uxth	r2, r2
  4155f2:	3201      	adds	r2, #1
  4155f4:	b292      	uxth	r2, r2
  4155f6:	888c      	ldrh	r4, [r1, #4]
  4155f8:	8809      	ldrh	r1, [r1, #0]
  4155fa:	1a61      	subs	r1, r4, r1
  4155fc:	b289      	uxth	r1, r1
  4155fe:	3101      	adds	r1, #1
  415600:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415602:	1a52      	subs	r2, r2, r1
  415604:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  415606:	2200      	movs	r2, #0
  415608:	805a      	strh	r2, [r3, #2]
            break;
  41560a:	e7bb      	b.n	415584 <_lv_area_align+0x8c>
            res->x = 0;
  41560c:	2200      	movs	r2, #0
  41560e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415610:	88c2      	ldrh	r2, [r0, #6]
  415612:	8844      	ldrh	r4, [r0, #2]
  415614:	1b12      	subs	r2, r2, r4
  415616:	b292      	uxth	r2, r2
  415618:	3201      	adds	r2, #1
  41561a:	b292      	uxth	r2, r2
  41561c:	88cc      	ldrh	r4, [r1, #6]
  41561e:	8849      	ldrh	r1, [r1, #2]
  415620:	1a61      	subs	r1, r4, r1
  415622:	b289      	uxth	r1, r1
  415624:	3101      	adds	r1, #1
  415626:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415628:	1a52      	subs	r2, r2, r1
  41562a:	805a      	strh	r2, [r3, #2]
            break;
  41562c:	e7aa      	b.n	415584 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41562e:	8884      	ldrh	r4, [r0, #4]
  415630:	8802      	ldrh	r2, [r0, #0]
  415632:	1aa4      	subs	r4, r4, r2
  415634:	b2a4      	uxth	r4, r4
  415636:	3401      	adds	r4, #1
  415638:	b224      	sxth	r4, r4
  41563a:	888a      	ldrh	r2, [r1, #4]
  41563c:	880d      	ldrh	r5, [r1, #0]
  41563e:	1b52      	subs	r2, r2, r5
  415640:	b292      	uxth	r2, r2
  415642:	3201      	adds	r2, #1
  415644:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415646:	4625      	mov	r5, r4
  415648:	2c00      	cmp	r4, #0
  41564a:	db15      	blt.n	415678 <_lv_area_align+0x180>
  41564c:	106d      	asrs	r5, r5, #1
  41564e:	4614      	mov	r4, r2
  415650:	2a00      	cmp	r2, #0
  415652:	db13      	blt.n	41567c <_lv_area_align+0x184>
  415654:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415658:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41565a:	88c2      	ldrh	r2, [r0, #6]
  41565c:	8844      	ldrh	r4, [r0, #2]
  41565e:	1b12      	subs	r2, r2, r4
  415660:	b292      	uxth	r2, r2
  415662:	3201      	adds	r2, #1
  415664:	b292      	uxth	r2, r2
  415666:	88cc      	ldrh	r4, [r1, #6]
  415668:	8849      	ldrh	r1, [r1, #2]
  41566a:	1a61      	subs	r1, r4, r1
  41566c:	b289      	uxth	r1, r1
  41566e:	3101      	adds	r1, #1
  415670:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415672:	1a52      	subs	r2, r2, r1
  415674:	805a      	strh	r2, [r3, #2]
            break;
  415676:	e785      	b.n	415584 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415678:	1c65      	adds	r5, r4, #1
  41567a:	e7e7      	b.n	41564c <_lv_area_align+0x154>
  41567c:	1c54      	adds	r4, r2, #1
  41567e:	e7e9      	b.n	415654 <_lv_area_align+0x15c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415680:	8882      	ldrh	r2, [r0, #4]
  415682:	8804      	ldrh	r4, [r0, #0]
  415684:	1b12      	subs	r2, r2, r4
  415686:	b292      	uxth	r2, r2
  415688:	3201      	adds	r2, #1
  41568a:	b292      	uxth	r2, r2
  41568c:	888c      	ldrh	r4, [r1, #4]
  41568e:	880d      	ldrh	r5, [r1, #0]
  415690:	1b64      	subs	r4, r4, r5
  415692:	b2a4      	uxth	r4, r4
  415694:	3401      	adds	r4, #1
  415696:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415698:	1b12      	subs	r2, r2, r4
  41569a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41569c:	88c2      	ldrh	r2, [r0, #6]
  41569e:	8844      	ldrh	r4, [r0, #2]
  4156a0:	1b12      	subs	r2, r2, r4
  4156a2:	b292      	uxth	r2, r2
  4156a4:	3201      	adds	r2, #1
  4156a6:	b292      	uxth	r2, r2
  4156a8:	88cc      	ldrh	r4, [r1, #6]
  4156aa:	8849      	ldrh	r1, [r1, #2]
  4156ac:	1a61      	subs	r1, r4, r1
  4156ae:	b289      	uxth	r1, r1
  4156b0:	3101      	adds	r1, #1
  4156b2:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  4156b4:	1a52      	subs	r2, r2, r1
  4156b6:	805a      	strh	r2, [r3, #2]
            break;
  4156b8:	e764      	b.n	415584 <_lv_area_align+0x8c>
            res->x = 0;
  4156ba:	2200      	movs	r2, #0
  4156bc:	801a      	strh	r2, [r3, #0]
  4156be:	88c4      	ldrh	r4, [r0, #6]
  4156c0:	8842      	ldrh	r2, [r0, #2]
  4156c2:	1aa4      	subs	r4, r4, r2
  4156c4:	b2a4      	uxth	r4, r4
  4156c6:	3401      	adds	r4, #1
  4156c8:	b224      	sxth	r4, r4
  4156ca:	88ca      	ldrh	r2, [r1, #6]
  4156cc:	8849      	ldrh	r1, [r1, #2]
  4156ce:	1a52      	subs	r2, r2, r1
  4156d0:	b292      	uxth	r2, r2
  4156d2:	3201      	adds	r2, #1
  4156d4:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4156d6:	4621      	mov	r1, r4
  4156d8:	2c00      	cmp	r4, #0
  4156da:	db07      	blt.n	4156ec <_lv_area_align+0x1f4>
  4156dc:	1049      	asrs	r1, r1, #1
  4156de:	4614      	mov	r4, r2
  4156e0:	2a00      	cmp	r2, #0
  4156e2:	db05      	blt.n	4156f0 <_lv_area_align+0x1f8>
  4156e4:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4156e8:	8059      	strh	r1, [r3, #2]
            break;
  4156ea:	e74b      	b.n	415584 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4156ec:	1c61      	adds	r1, r4, #1
  4156ee:	e7f5      	b.n	4156dc <_lv_area_align+0x1e4>
  4156f0:	1c54      	adds	r4, r2, #1
  4156f2:	e7f7      	b.n	4156e4 <_lv_area_align+0x1ec>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4156f4:	8882      	ldrh	r2, [r0, #4]
  4156f6:	8804      	ldrh	r4, [r0, #0]
  4156f8:	1b12      	subs	r2, r2, r4
  4156fa:	b292      	uxth	r2, r2
  4156fc:	3201      	adds	r2, #1
  4156fe:	b292      	uxth	r2, r2
  415700:	888c      	ldrh	r4, [r1, #4]
  415702:	880d      	ldrh	r5, [r1, #0]
  415704:	1b64      	subs	r4, r4, r5
  415706:	b2a4      	uxth	r4, r4
  415708:	3401      	adds	r4, #1
  41570a:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  41570c:	1b12      	subs	r2, r2, r4
  41570e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415710:	88c4      	ldrh	r4, [r0, #6]
  415712:	8842      	ldrh	r2, [r0, #2]
  415714:	1aa4      	subs	r4, r4, r2
  415716:	b2a4      	uxth	r4, r4
  415718:	3401      	adds	r4, #1
  41571a:	b224      	sxth	r4, r4
  41571c:	88ca      	ldrh	r2, [r1, #6]
  41571e:	8849      	ldrh	r1, [r1, #2]
  415720:	1a52      	subs	r2, r2, r1
  415722:	b292      	uxth	r2, r2
  415724:	3201      	adds	r2, #1
  415726:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415728:	4621      	mov	r1, r4
  41572a:	2c00      	cmp	r4, #0
  41572c:	db07      	blt.n	41573e <_lv_area_align+0x246>
  41572e:	1049      	asrs	r1, r1, #1
  415730:	4614      	mov	r4, r2
  415732:	2a00      	cmp	r2, #0
  415734:	db05      	blt.n	415742 <_lv_area_align+0x24a>
  415736:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  41573a:	8059      	strh	r1, [r3, #2]
            break;
  41573c:	e722      	b.n	415584 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  41573e:	1c61      	adds	r1, r4, #1
  415740:	e7f5      	b.n	41572e <_lv_area_align+0x236>
  415742:	1c54      	adds	r4, r2, #1
  415744:	e7f7      	b.n	415736 <_lv_area_align+0x23e>
            res->x = 0;
  415746:	2200      	movs	r2, #0
  415748:	801a      	strh	r2, [r3, #0]
  41574a:	88ca      	ldrh	r2, [r1, #6]
  41574c:	8849      	ldrh	r1, [r1, #2]
  41574e:	1a52      	subs	r2, r2, r1
  415750:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  415752:	43d2      	mvns	r2, r2
  415754:	805a      	strh	r2, [r3, #2]
            break;
  415756:	e715      	b.n	415584 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415758:	8884      	ldrh	r4, [r0, #4]
  41575a:	8802      	ldrh	r2, [r0, #0]
  41575c:	1aa4      	subs	r4, r4, r2
  41575e:	b2a4      	uxth	r4, r4
  415760:	3401      	adds	r4, #1
  415762:	b224      	sxth	r4, r4
  415764:	888a      	ldrh	r2, [r1, #4]
  415766:	880d      	ldrh	r5, [r1, #0]
  415768:	1b52      	subs	r2, r2, r5
  41576a:	b292      	uxth	r2, r2
  41576c:	3201      	adds	r2, #1
  41576e:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415770:	4625      	mov	r5, r4
  415772:	2c00      	cmp	r4, #0
  415774:	db0d      	blt.n	415792 <_lv_area_align+0x29a>
  415776:	106d      	asrs	r5, r5, #1
  415778:	4614      	mov	r4, r2
  41577a:	2a00      	cmp	r2, #0
  41577c:	db0b      	blt.n	415796 <_lv_area_align+0x29e>
  41577e:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415782:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415784:	88ca      	ldrh	r2, [r1, #6]
  415786:	8849      	ldrh	r1, [r1, #2]
  415788:	1a52      	subs	r2, r2, r1
  41578a:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  41578c:	43d2      	mvns	r2, r2
  41578e:	805a      	strh	r2, [r3, #2]
            break;
  415790:	e6f8      	b.n	415584 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415792:	1c65      	adds	r5, r4, #1
  415794:	e7ef      	b.n	415776 <_lv_area_align+0x27e>
  415796:	1c54      	adds	r4, r2, #1
  415798:	e7f1      	b.n	41577e <_lv_area_align+0x286>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41579a:	8882      	ldrh	r2, [r0, #4]
  41579c:	8804      	ldrh	r4, [r0, #0]
  41579e:	1b12      	subs	r2, r2, r4
  4157a0:	b292      	uxth	r2, r2
  4157a2:	3201      	adds	r2, #1
  4157a4:	b292      	uxth	r2, r2
  4157a6:	888c      	ldrh	r4, [r1, #4]
  4157a8:	880d      	ldrh	r5, [r1, #0]
  4157aa:	1b64      	subs	r4, r4, r5
  4157ac:	b2a4      	uxth	r4, r4
  4157ae:	3401      	adds	r4, #1
  4157b0:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  4157b2:	1b12      	subs	r2, r2, r4
  4157b4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4157b6:	88ca      	ldrh	r2, [r1, #6]
  4157b8:	8849      	ldrh	r1, [r1, #2]
  4157ba:	1a52      	subs	r2, r2, r1
  4157bc:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  4157be:	43d2      	mvns	r2, r2
  4157c0:	805a      	strh	r2, [r3, #2]
            break;
  4157c2:	e6df      	b.n	415584 <_lv_area_align+0x8c>
            res->x = 0;
  4157c4:	2200      	movs	r2, #0
  4157c6:	801a      	strh	r2, [r3, #0]
  4157c8:	88c2      	ldrh	r2, [r0, #6]
  4157ca:	8841      	ldrh	r1, [r0, #2]
  4157cc:	1a52      	subs	r2, r2, r1
  4157ce:	b292      	uxth	r2, r2
  4157d0:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  4157d2:	805a      	strh	r2, [r3, #2]
            break;
  4157d4:	e6d6      	b.n	415584 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4157d6:	8884      	ldrh	r4, [r0, #4]
  4157d8:	8802      	ldrh	r2, [r0, #0]
  4157da:	1aa4      	subs	r4, r4, r2
  4157dc:	b2a4      	uxth	r4, r4
  4157de:	3401      	adds	r4, #1
  4157e0:	b224      	sxth	r4, r4
  4157e2:	888a      	ldrh	r2, [r1, #4]
  4157e4:	8809      	ldrh	r1, [r1, #0]
  4157e6:	1a52      	subs	r2, r2, r1
  4157e8:	b292      	uxth	r2, r2
  4157ea:	3201      	adds	r2, #1
  4157ec:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4157ee:	4621      	mov	r1, r4
  4157f0:	2c00      	cmp	r4, #0
  4157f2:	db0d      	blt.n	415810 <_lv_area_align+0x318>
  4157f4:	1049      	asrs	r1, r1, #1
  4157f6:	4614      	mov	r4, r2
  4157f8:	2a00      	cmp	r2, #0
  4157fa:	db0b      	blt.n	415814 <_lv_area_align+0x31c>
  4157fc:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415800:	8019      	strh	r1, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415802:	88c2      	ldrh	r2, [r0, #6]
  415804:	8841      	ldrh	r1, [r0, #2]
  415806:	1a52      	subs	r2, r2, r1
  415808:	b292      	uxth	r2, r2
  41580a:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  41580c:	805a      	strh	r2, [r3, #2]
            break;
  41580e:	e6b9      	b.n	415584 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415810:	1c61      	adds	r1, r4, #1
  415812:	e7ef      	b.n	4157f4 <_lv_area_align+0x2fc>
  415814:	1c54      	adds	r4, r2, #1
  415816:	e7f1      	b.n	4157fc <_lv_area_align+0x304>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415818:	8882      	ldrh	r2, [r0, #4]
  41581a:	8804      	ldrh	r4, [r0, #0]
  41581c:	1b12      	subs	r2, r2, r4
  41581e:	b292      	uxth	r2, r2
  415820:	3201      	adds	r2, #1
  415822:	b292      	uxth	r2, r2
  415824:	888c      	ldrh	r4, [r1, #4]
  415826:	8809      	ldrh	r1, [r1, #0]
  415828:	1a61      	subs	r1, r4, r1
  41582a:	b289      	uxth	r1, r1
  41582c:	3101      	adds	r1, #1
  41582e:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415830:	1a52      	subs	r2, r2, r1
  415832:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415834:	88c2      	ldrh	r2, [r0, #6]
  415836:	8841      	ldrh	r1, [r0, #2]
  415838:	1a52      	subs	r2, r2, r1
  41583a:	b292      	uxth	r2, r2
  41583c:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  41583e:	805a      	strh	r2, [r3, #2]
            break;
  415840:	e6a0      	b.n	415584 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415842:	888a      	ldrh	r2, [r1, #4]
  415844:	8809      	ldrh	r1, [r1, #0]
  415846:	1a52      	subs	r2, r2, r1
  415848:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  41584a:	43d2      	mvns	r2, r2
  41584c:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  41584e:	2200      	movs	r2, #0
  415850:	805a      	strh	r2, [r3, #2]
            break;
  415852:	e697      	b.n	415584 <_lv_area_align+0x8c>
  415854:	888a      	ldrh	r2, [r1, #4]
  415856:	880c      	ldrh	r4, [r1, #0]
  415858:	1b12      	subs	r2, r2, r4
  41585a:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  41585c:	43d2      	mvns	r2, r2
  41585e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415860:	88c4      	ldrh	r4, [r0, #6]
  415862:	8842      	ldrh	r2, [r0, #2]
  415864:	1aa4      	subs	r4, r4, r2
  415866:	b2a4      	uxth	r4, r4
  415868:	3401      	adds	r4, #1
  41586a:	b224      	sxth	r4, r4
  41586c:	88ca      	ldrh	r2, [r1, #6]
  41586e:	8849      	ldrh	r1, [r1, #2]
  415870:	1a52      	subs	r2, r2, r1
  415872:	b292      	uxth	r2, r2
  415874:	3201      	adds	r2, #1
  415876:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415878:	4621      	mov	r1, r4
  41587a:	2c00      	cmp	r4, #0
  41587c:	db07      	blt.n	41588e <_lv_area_align+0x396>
  41587e:	1049      	asrs	r1, r1, #1
  415880:	4614      	mov	r4, r2
  415882:	2a00      	cmp	r2, #0
  415884:	db05      	blt.n	415892 <_lv_area_align+0x39a>
  415886:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  41588a:	8059      	strh	r1, [r3, #2]
            break;
  41588c:	e67a      	b.n	415584 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  41588e:	1c61      	adds	r1, r4, #1
  415890:	e7f5      	b.n	41587e <_lv_area_align+0x386>
  415892:	1c54      	adds	r4, r2, #1
  415894:	e7f7      	b.n	415886 <_lv_area_align+0x38e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415896:	888a      	ldrh	r2, [r1, #4]
  415898:	880c      	ldrh	r4, [r1, #0]
  41589a:	1b12      	subs	r2, r2, r4
  41589c:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  41589e:	43d2      	mvns	r2, r2
  4158a0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4158a2:	88c2      	ldrh	r2, [r0, #6]
  4158a4:	8844      	ldrh	r4, [r0, #2]
  4158a6:	1b12      	subs	r2, r2, r4
  4158a8:	b292      	uxth	r2, r2
  4158aa:	3201      	adds	r2, #1
  4158ac:	b292      	uxth	r2, r2
  4158ae:	88cc      	ldrh	r4, [r1, #6]
  4158b0:	8849      	ldrh	r1, [r1, #2]
  4158b2:	1a61      	subs	r1, r4, r1
  4158b4:	b289      	uxth	r1, r1
  4158b6:	3101      	adds	r1, #1
  4158b8:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  4158ba:	1a52      	subs	r2, r2, r1
  4158bc:	805a      	strh	r2, [r3, #2]
            break;
  4158be:	e661      	b.n	415584 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4158c0:	8882      	ldrh	r2, [r0, #4]
  4158c2:	8801      	ldrh	r1, [r0, #0]
  4158c4:	1a52      	subs	r2, r2, r1
  4158c6:	b292      	uxth	r2, r2
  4158c8:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  4158ca:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4158cc:	2200      	movs	r2, #0
  4158ce:	805a      	strh	r2, [r3, #2]
            break;
  4158d0:	e658      	b.n	415584 <_lv_area_align+0x8c>
  4158d2:	8882      	ldrh	r2, [r0, #4]
  4158d4:	8804      	ldrh	r4, [r0, #0]
  4158d6:	1b12      	subs	r2, r2, r4
  4158d8:	b292      	uxth	r2, r2
  4158da:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  4158dc:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4158de:	88c4      	ldrh	r4, [r0, #6]
  4158e0:	8842      	ldrh	r2, [r0, #2]
  4158e2:	1aa4      	subs	r4, r4, r2
  4158e4:	b2a4      	uxth	r4, r4
  4158e6:	3401      	adds	r4, #1
  4158e8:	b224      	sxth	r4, r4
  4158ea:	88ca      	ldrh	r2, [r1, #6]
  4158ec:	8849      	ldrh	r1, [r1, #2]
  4158ee:	1a52      	subs	r2, r2, r1
  4158f0:	b292      	uxth	r2, r2
  4158f2:	3201      	adds	r2, #1
  4158f4:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4158f6:	4621      	mov	r1, r4
  4158f8:	2c00      	cmp	r4, #0
  4158fa:	db07      	blt.n	41590c <_lv_area_align+0x414>
  4158fc:	1049      	asrs	r1, r1, #1
  4158fe:	4614      	mov	r4, r2
  415900:	2a00      	cmp	r2, #0
  415902:	db05      	blt.n	415910 <_lv_area_align+0x418>
  415904:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415908:	8059      	strh	r1, [r3, #2]
            break;
  41590a:	e63b      	b.n	415584 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  41590c:	1c61      	adds	r1, r4, #1
  41590e:	e7f5      	b.n	4158fc <_lv_area_align+0x404>
  415910:	1c54      	adds	r4, r2, #1
  415912:	e7f7      	b.n	415904 <_lv_area_align+0x40c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415914:	8882      	ldrh	r2, [r0, #4]
  415916:	8804      	ldrh	r4, [r0, #0]
  415918:	1b12      	subs	r2, r2, r4
  41591a:	b292      	uxth	r2, r2
  41591c:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  41591e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415920:	88c2      	ldrh	r2, [r0, #6]
  415922:	8844      	ldrh	r4, [r0, #2]
  415924:	1b12      	subs	r2, r2, r4
  415926:	b292      	uxth	r2, r2
  415928:	3201      	adds	r2, #1
  41592a:	b292      	uxth	r2, r2
  41592c:	88cc      	ldrh	r4, [r1, #6]
  41592e:	8849      	ldrh	r1, [r1, #2]
  415930:	1a61      	subs	r1, r4, r1
  415932:	b289      	uxth	r1, r1
  415934:	3101      	adds	r1, #1
  415936:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415938:	1a52      	subs	r2, r2, r1
  41593a:	805a      	strh	r2, [r3, #2]
            break;
  41593c:	e622      	b.n	415584 <_lv_area_align+0x8c>

0041593e <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  41593e:	f010 0f03 	tst.w	r0, #3
  415942:	d002      	beq.n	41594a <lv_color_fill+0xc>
        *buf = color;
  415944:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  415948:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  41594a:	b28b      	uxth	r3, r1
  41594c:	eb03 4303 	add.w	r3, r3, r3, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  415950:	e009      	b.n	415966 <lv_color_fill+0x28>
        *buf32 = c32;
  415952:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
  415954:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
  415956:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
  415958:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
  41595a:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
  41595c:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
  41595e:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
  415960:	61c3      	str	r3, [r0, #28]
        buf32++;
  415962:	3020      	adds	r0, #32

        px_num -= 16;
  415964:	3a10      	subs	r2, #16
    while(px_num > 16) {
  415966:	2a10      	cmp	r2, #16
  415968:	d8f3      	bhi.n	415952 <lv_color_fill+0x14>
  41596a:	e002      	b.n	415972 <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
  41596c:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num --;
  415970:	3a01      	subs	r2, #1
    while(px_num) {
  415972:	2a00      	cmp	r2, #0
  415974:	d1fa      	bne.n	41596c <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  415976:	4770      	bx	lr

00415978 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  415978:	b4f0      	push	{r4, r5, r6, r7}
  41597a:	4602      	mov	r2, r0
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  41597c:	4b23      	ldr	r3, [pc, #140]	; (415a0c <lv_color_lighten+0x94>)
  41597e:	881c      	ldrh	r4, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415980:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  415984:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  415988:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  41598c:	fb05 f000 	mul.w	r0, r5, r0
  415990:	fb01 0303 	mla	r3, r1, r3, r0
  415994:	3380      	adds	r3, #128	; 0x80
  415996:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  41599a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  41599e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4159a2:	f04f 0000 	mov.w	r0, #0
  4159a6:	f363 00c7 	bfi	r0, r3, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4159aa:	f004 0607 	and.w	r6, r4, #7
  4159ae:	f3c4 3342 	ubfx	r3, r4, #13, #3
  4159b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4159b6:	f002 0707 	and.w	r7, r2, #7
  4159ba:	f3c2 3642 	ubfx	r6, r2, #13, #3
  4159be:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  4159c2:	fb06 f605 	mul.w	r6, r6, r5
  4159c6:	fb03 6301 	mla	r3, r3, r1, r6
  4159ca:	3380      	adds	r3, #128	; 0x80
  4159cc:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  4159d0:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  4159d4:	f3c3 6682 	ubfx	r6, r3, #26, #3
  4159d8:	f366 0002 	bfi	r0, r6, #0, #3
  4159dc:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  4159e0:	f363 304f 	bfi	r0, r3, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4159e4:	f3c4 2404 	ubfx	r4, r4, #8, #5
  4159e8:	f3c2 2204 	ubfx	r2, r2, #8, #5
  4159ec:	fb02 f505 	mul.w	r5, r2, r5
  4159f0:	fb04 5101 	mla	r1, r4, r1, r5
  4159f4:	3180      	adds	r1, #128	; 0x80
  4159f6:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  4159fa:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  4159fe:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  415a02:	f361 200c 	bfi	r0, r1, #8, #5
}
  415a06:	bcf0      	pop	{r4, r5, r6, r7}
  415a08:	4770      	bx	lr
  415a0a:	bf00      	nop
  415a0c:	0042c250 	.word	0x0042c250

00415a10 <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  415a10:	b410      	push	{r4}
  415a12:	4603      	mov	r3, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  415a14:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  415a18:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  415a1c:	fb01 f202 	mul.w	r2, r1, r2
  415a20:	3280      	adds	r2, #128	; 0x80
  415a22:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  415a26:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  415a2a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  415a2e:	f04f 0000 	mov.w	r0, #0
  415a32:	f362 00c7 	bfi	r0, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415a36:	f003 0407 	and.w	r4, r3, #7
  415a3a:	f3c3 3242 	ubfx	r2, r3, #13, #3
  415a3e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  415a42:	fb02 f201 	mul.w	r2, r2, r1
  415a46:	3280      	adds	r2, #128	; 0x80
  415a48:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  415a4c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  415a50:	f3c2 6482 	ubfx	r4, r2, #26, #3
  415a54:	f364 0002 	bfi	r0, r4, #0, #3
  415a58:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  415a5c:	f362 304f 	bfi	r0, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415a60:	f3c3 2304 	ubfx	r3, r3, #8, #5
  415a64:	fb03 f301 	mul.w	r3, r3, r1
  415a68:	3380      	adds	r3, #128	; 0x80
  415a6a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  415a6e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  415a72:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  415a76:	f363 200c 	bfi	r0, r3, #8, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  415a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  415a7e:	4770      	bx	lr

00415a80 <lv_debug_check_null>:
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
    if(p) return true;
  415a80:	b108      	cbz	r0, 415a86 <lv_debug_check_null+0x6>
  415a82:	2001      	movs	r0, #1
  415a84:	4770      	bx	lr

    return false;
  415a86:	2000      	movs	r0, #0
}
  415a88:	4770      	bx	lr
	...

00415a8c <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
  415a8c:	b570      	push	{r4, r5, r6, lr}
  415a8e:	b0c0      	sub	sp, #256	; 0x100
  415a90:	4606      	mov	r6, r0
  415a92:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
  415a94:	4b15      	ldr	r3, [pc, #84]	; (415aec <lv_debug_log_error+0x60>)
  415a96:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
  415a98:	28e5      	cmp	r0, #229	; 0xe5
  415a9a:	d901      	bls.n	415aa0 <lv_debug_log_error+0x14>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
  415a9c:	b040      	add	sp, #256	; 0x100
  415a9e:	bd70      	pop	{r4, r5, r6, pc}
  415aa0:	4605      	mov	r5, r0
        _lv_memcpy(bufp, msg, msg_len);
  415aa2:	4602      	mov	r2, r0
  415aa4:	4631      	mov	r1, r6
  415aa6:	4668      	mov	r0, sp
  415aa8:	4b11      	ldr	r3, [pc, #68]	; (415af0 <lv_debug_log_error+0x64>)
  415aaa:	4798      	blx	r3
        bufp += msg_len;
  415aac:	eb0d 0105 	add.w	r1, sp, r5
        *bufp = ' ';
  415ab0:	2320      	movs	r3, #32
  415ab2:	f80d 3005 	strb.w	r3, [sp, r5]
        *bufp = '(';
  415ab6:	2328      	movs	r3, #40	; 0x28
  415ab8:	704b      	strb	r3, [r1, #1]
        *bufp = '0';
  415aba:	2330      	movs	r3, #48	; 0x30
  415abc:	708b      	strb	r3, [r1, #2]
        *bufp = 'x';
  415abe:	2378      	movs	r3, #120	; 0x78
  415ac0:	70cb      	strb	r3, [r1, #3]
        bufp ++;
  415ac2:	3104      	adds	r1, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
  415ac4:	2307      	movs	r3, #7
  415ac6:	e00a      	b.n	415ade <lv_debug_log_error+0x52>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
  415ac8:	009a      	lsls	r2, r3, #2
  415aca:	fa24 f202 	lsr.w	r2, r4, r2
  415ace:	f002 020f 	and.w	r2, r2, #15
            *bufp = hex[x];
  415ad2:	4808      	ldr	r0, [pc, #32]	; (415af4 <lv_debug_log_error+0x68>)
  415ad4:	5c82      	ldrb	r2, [r0, r2]
  415ad6:	f801 2b01 	strb.w	r2, [r1], #1
        for(i = value_len * 2 - 1; i >= 0; i--) {
  415ada:	3b01      	subs	r3, #1
  415adc:	b25b      	sxtb	r3, r3
  415ade:	2b00      	cmp	r3, #0
  415ae0:	daf2      	bge.n	415ac8 <lv_debug_log_error+0x3c>
        *bufp = ')';
  415ae2:	2329      	movs	r3, #41	; 0x29
  415ae4:	700b      	strb	r3, [r1, #0]
        *bufp = '\0';
  415ae6:	2300      	movs	r3, #0
  415ae8:	704b      	strb	r3, [r1, #1]
}
  415aea:	e7d7      	b.n	415a9c <lv_debug_log_error+0x10>
  415aec:	00423b81 	.word	0x00423b81
  415af0:	00416399 	.word	0x00416399
  415af4:	0042c254 	.word	0x0042c254

00415af8 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  415af8:	3001      	adds	r0, #1

    while(*path != '\0') {
  415afa:	e000      	b.n	415afe <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  415afc:	3001      	adds	r0, #1
    while(*path != '\0') {
  415afe:	7803      	ldrb	r3, [r0, #0]
  415b00:	b12b      	cbz	r3, 415b0e <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  415b02:	2b5c      	cmp	r3, #92	; 0x5c
  415b04:	bf18      	it	ne
  415b06:	2b3a      	cmpne	r3, #58	; 0x3a
  415b08:	d0f8      	beq.n	415afc <lv_fs_get_real_path+0x4>
  415b0a:	2b2f      	cmp	r3, #47	; 0x2f
  415b0c:	d0f6      	beq.n	415afc <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  415b0e:	4770      	bx	lr

00415b10 <_lv_fs_init>:
{
  415b10:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  415b12:	2144      	movs	r1, #68	; 0x44
  415b14:	4801      	ldr	r0, [pc, #4]	; (415b1c <_lv_fs_init+0xc>)
  415b16:	4b02      	ldr	r3, [pc, #8]	; (415b20 <_lv_fs_init+0x10>)
  415b18:	4798      	blx	r3
  415b1a:	bd08      	pop	{r3, pc}
  415b1c:	2043a258 	.word	0x2043a258
  415b20:	00415ce7 	.word	0x00415ce7

00415b24 <lv_fs_close>:
{
  415b24:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  415b26:	6843      	ldr	r3, [r0, #4]
  415b28:	b173      	cbz	r3, 415b48 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  415b2a:	691a      	ldr	r2, [r3, #16]
  415b2c:	b172      	cbz	r2, 415b4c <lv_fs_close+0x28>
  415b2e:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  415b30:	6801      	ldr	r1, [r0, #0]
  415b32:	4618      	mov	r0, r3
  415b34:	4790      	blx	r2
  415b36:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  415b38:	6820      	ldr	r0, [r4, #0]
  415b3a:	4b05      	ldr	r3, [pc, #20]	; (415b50 <lv_fs_close+0x2c>)
  415b3c:	4798      	blx	r3
    file_p->file_d = NULL;
  415b3e:	2300      	movs	r3, #0
  415b40:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  415b42:	6063      	str	r3, [r4, #4]
}
  415b44:	4628      	mov	r0, r5
  415b46:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415b48:	250b      	movs	r5, #11
  415b4a:	e7fb      	b.n	415b44 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  415b4c:	2509      	movs	r5, #9
  415b4e:	e7f9      	b.n	415b44 <lv_fs_close+0x20>
  415b50:	0041624d 	.word	0x0041624d

00415b54 <lv_fs_read>:
{
  415b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  415b56:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  415b58:	461e      	mov	r6, r3
  415b5a:	b10b      	cbz	r3, 415b60 <lv_fs_read+0xc>
  415b5c:	2300      	movs	r3, #0
  415b5e:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415b60:	6845      	ldr	r5, [r0, #4]
  415b62:	b18d      	cbz	r5, 415b88 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415b64:	69af      	ldr	r7, [r5, #24]
  415b66:	b18f      	cbz	r7, 415b8c <lv_fs_read+0x38>
  415b68:	4613      	mov	r3, r2
  415b6a:	460a      	mov	r2, r1
  415b6c:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  415b6e:	a804      	add	r0, sp, #16
  415b70:	2100      	movs	r1, #0
  415b72:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  415b76:	6821      	ldr	r1, [r4, #0]
  415b78:	9000      	str	r0, [sp, #0]
  415b7a:	4628      	mov	r0, r5
  415b7c:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  415b7e:	b10e      	cbz	r6, 415b84 <lv_fs_read+0x30>
  415b80:	9b03      	ldr	r3, [sp, #12]
  415b82:	6033      	str	r3, [r6, #0]
}
  415b84:	b005      	add	sp, #20
  415b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415b88:	200b      	movs	r0, #11
  415b8a:	e7fb      	b.n	415b84 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415b8c:	2009      	movs	r0, #9
  415b8e:	e7f9      	b.n	415b84 <lv_fs_read+0x30>

00415b90 <lv_fs_seek>:
{
  415b90:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  415b92:	6844      	ldr	r4, [r0, #4]
  415b94:	b134      	cbz	r4, 415ba4 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  415b96:	6a25      	ldr	r5, [r4, #32]
  415b98:	b135      	cbz	r5, 415ba8 <lv_fs_seek+0x18>
  415b9a:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  415b9c:	6801      	ldr	r1, [r0, #0]
  415b9e:	4620      	mov	r0, r4
  415ba0:	47a8      	blx	r5
    return res;
  415ba2:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415ba4:	200b      	movs	r0, #11
  415ba6:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  415ba8:	2009      	movs	r0, #9
}
  415baa:	bd38      	pop	{r3, r4, r5, pc}

00415bac <lv_fs_get_drv>:
{
  415bac:	b510      	push	{r4, lr}
  415bae:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  415bb0:	4806      	ldr	r0, [pc, #24]	; (415bcc <lv_fs_get_drv+0x20>)
  415bb2:	4b07      	ldr	r3, [pc, #28]	; (415bd0 <lv_fs_get_drv+0x24>)
  415bb4:	4798      	blx	r3
  415bb6:	b138      	cbz	r0, 415bc8 <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  415bb8:	7803      	ldrb	r3, [r0, #0]
  415bba:	42a3      	cmp	r3, r4
  415bbc:	d004      	beq.n	415bc8 <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  415bbe:	4601      	mov	r1, r0
  415bc0:	4802      	ldr	r0, [pc, #8]	; (415bcc <lv_fs_get_drv+0x20>)
  415bc2:	4b04      	ldr	r3, [pc, #16]	; (415bd4 <lv_fs_get_drv+0x28>)
  415bc4:	4798      	blx	r3
  415bc6:	e7f6      	b.n	415bb6 <lv_fs_get_drv+0xa>
}
  415bc8:	bd10      	pop	{r4, pc}
  415bca:	bf00      	nop
  415bcc:	2043a258 	.word	0x2043a258
  415bd0:	00415d91 	.word	0x00415d91
  415bd4:	00415da5 	.word	0x00415da5

00415bd8 <lv_fs_open>:
{
  415bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  415bdc:	2400      	movs	r4, #0
  415bde:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  415be0:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  415be2:	2900      	cmp	r1, #0
  415be4:	d044      	beq.n	415c70 <lv_fs_open+0x98>
  415be6:	460d      	mov	r5, r1
  415be8:	4690      	mov	r8, r2
  415bea:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  415bec:	7808      	ldrb	r0, [r1, #0]
  415bee:	4b23      	ldr	r3, [pc, #140]	; (415c7c <lv_fs_open+0xa4>)
  415bf0:	4798      	blx	r3
  415bf2:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  415bf4:	2800      	cmp	r0, #0
  415bf6:	d03f      	beq.n	415c78 <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  415bf8:	6883      	ldr	r3, [r0, #8]
  415bfa:	b10b      	cbz	r3, 415c00 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  415bfc:	4798      	blx	r3
  415bfe:	b1a0      	cbz	r0, 415c2a <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  415c00:	6867      	ldr	r7, [r4, #4]
  415c02:	68fe      	ldr	r6, [r7, #12]
  415c04:	b1ae      	cbz	r6, 415c32 <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  415c06:	4628      	mov	r0, r5
  415c08:	4b1d      	ldr	r3, [pc, #116]	; (415c80 <lv_fs_open+0xa8>)
  415c0a:	4798      	blx	r3
  415c0c:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  415c0e:	8878      	ldrh	r0, [r7, #2]
  415c10:	b198      	cbz	r0, 415c3a <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  415c12:	4b1c      	ldr	r3, [pc, #112]	; (415c84 <lv_fs_open+0xac>)
  415c14:	4798      	blx	r3
  415c16:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  415c18:	4b1b      	ldr	r3, [pc, #108]	; (415c88 <lv_fs_open+0xb0>)
  415c1a:	4798      	blx	r3
  415c1c:	b1a0      	cbz	r0, 415c48 <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  415c1e:	6821      	ldr	r1, [r4, #0]
  415c20:	b9c1      	cbnz	r1, 415c54 <lv_fs_open+0x7c>
        file_p->drv = NULL;
  415c22:	2300      	movs	r3, #0
  415c24:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  415c26:	250a      	movs	r5, #10
  415c28:	e023      	b.n	415c72 <lv_fs_open+0x9a>
            file_p->drv = NULL;
  415c2a:	2300      	movs	r3, #0
  415c2c:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  415c2e:	2501      	movs	r5, #1
  415c30:	e01f      	b.n	415c72 <lv_fs_open+0x9a>
        file_p->drv = NULL;
  415c32:	2300      	movs	r3, #0
  415c34:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  415c36:	2509      	movs	r5, #9
  415c38:	e01b      	b.n	415c72 <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  415c3a:	4643      	mov	r3, r8
  415c3c:	462a      	mov	r2, r5
  415c3e:	4621      	mov	r1, r4
  415c40:	4638      	mov	r0, r7
  415c42:	47b0      	blx	r6
  415c44:	4605      	mov	r5, r0
  415c46:	e014      	b.n	415c72 <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  415c48:	6822      	ldr	r2, [r4, #0]
  415c4a:	2300      	movs	r3, #0
  415c4c:	480f      	ldr	r0, [pc, #60]	; (415c8c <lv_fs_open+0xb4>)
  415c4e:	4910      	ldr	r1, [pc, #64]	; (415c90 <lv_fs_open+0xb8>)
  415c50:	4788      	blx	r1
  415c52:	e7fe      	b.n	415c52 <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  415c54:	6860      	ldr	r0, [r4, #4]
  415c56:	68c7      	ldr	r7, [r0, #12]
  415c58:	4643      	mov	r3, r8
  415c5a:	462a      	mov	r2, r5
  415c5c:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  415c5e:	4605      	mov	r5, r0
  415c60:	b138      	cbz	r0, 415c72 <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  415c62:	6820      	ldr	r0, [r4, #0]
  415c64:	4b0b      	ldr	r3, [pc, #44]	; (415c94 <lv_fs_open+0xbc>)
  415c66:	4798      	blx	r3
        file_p->file_d = NULL;
  415c68:	2300      	movs	r3, #0
  415c6a:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  415c6c:	6063      	str	r3, [r4, #4]
  415c6e:	e000      	b.n	415c72 <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  415c70:	250b      	movs	r5, #11
}
  415c72:	4628      	mov	r0, r5
  415c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  415c78:	2503      	movs	r5, #3
  415c7a:	e7fa      	b.n	415c72 <lv_fs_open+0x9a>
  415c7c:	00415bad 	.word	0x00415bad
  415c80:	00415af9 	.word	0x00415af9
  415c84:	00416189 	.word	0x00416189
  415c88:	00415a81 	.word	0x00415a81
  415c8c:	00428c94 	.word	0x00428c94
  415c90:	00415a8d 	.word	0x00415a8d
  415c94:	0041624d 	.word	0x0041624d

00415c98 <lv_fs_get_ext>:
{
  415c98:	b510      	push	{r4, lr}
  415c9a:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  415c9c:	4b09      	ldr	r3, [pc, #36]	; (415cc4 <lv_fs_get_ext+0x2c>)
  415c9e:	4798      	blx	r3
  415ca0:	b158      	cbz	r0, 415cba <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  415ca2:	5c23      	ldrb	r3, [r4, r0]
  415ca4:	2b2e      	cmp	r3, #46	; 0x2e
  415ca6:	d005      	beq.n	415cb4 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  415ca8:	2b5c      	cmp	r3, #92	; 0x5c
  415caa:	bf18      	it	ne
  415cac:	2b2f      	cmpne	r3, #47	; 0x2f
  415cae:	d006      	beq.n	415cbe <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  415cb0:	3801      	subs	r0, #1
  415cb2:	e7f5      	b.n	415ca0 <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  415cb4:	3001      	adds	r0, #1
  415cb6:	4420      	add	r0, r4
  415cb8:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  415cba:	4803      	ldr	r0, [pc, #12]	; (415cc8 <lv_fs_get_ext+0x30>)
  415cbc:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  415cbe:	4802      	ldr	r0, [pc, #8]	; (415cc8 <lv_fs_get_ext+0x30>)
}
  415cc0:	bd10      	pop	{r4, pc}
  415cc2:	bf00      	nop
  415cc4:	00423b81 	.word	0x00423b81
  415cc8:	0042db98 	.word	0x0042db98

00415ccc <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  415ccc:	460b      	mov	r3, r1
  415cce:	b109      	cbz	r1, 415cd4 <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_PREV_P_OFFSET(ll_p);
  415cd0:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  415cd2:	505a      	str	r2, [r3, r1]
  415cd4:	4770      	bx	lr

00415cd6 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  415cd6:	b129      	cbz	r1, 415ce4 <node_set_next+0xe>
{
  415cd8:	b410      	push	{r4}
    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
  415cda:	6803      	ldr	r3, [r0, #0]
  415cdc:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  415cde:	50ca      	str	r2, [r1, r3]
}
  415ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
  415ce4:	4770      	bx	lr

00415ce6 <_lv_ll_init>:
    ll_p->head = NULL;
  415ce6:	2300      	movs	r3, #0
  415ce8:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  415cea:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  415cec:	3103      	adds	r1, #3
  415cee:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  415cf2:	6001      	str	r1, [r0, #0]
  415cf4:	4770      	bx	lr
	...

00415cf8 <_lv_ll_ins_head>:
{
  415cf8:	b538      	push	{r3, r4, r5, lr}
  415cfa:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415cfc:	6800      	ldr	r0, [r0, #0]
  415cfe:	3008      	adds	r0, #8
  415d00:	4b0d      	ldr	r3, [pc, #52]	; (415d38 <_lv_ll_ins_head+0x40>)
  415d02:	4798      	blx	r3
    if(n_new != NULL) {
  415d04:	4605      	mov	r5, r0
  415d06:	b190      	cbz	r0, 415d2e <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  415d08:	2200      	movs	r2, #0
  415d0a:	4601      	mov	r1, r0
  415d0c:	4620      	mov	r0, r4
  415d0e:	4b0b      	ldr	r3, [pc, #44]	; (415d3c <_lv_ll_ins_head+0x44>)
  415d10:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  415d12:	6862      	ldr	r2, [r4, #4]
  415d14:	4629      	mov	r1, r5
  415d16:	4620      	mov	r0, r4
  415d18:	4b09      	ldr	r3, [pc, #36]	; (415d40 <_lv_ll_ins_head+0x48>)
  415d1a:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  415d1c:	6861      	ldr	r1, [r4, #4]
  415d1e:	b119      	cbz	r1, 415d28 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  415d20:	462a      	mov	r2, r5
  415d22:	4620      	mov	r0, r4
  415d24:	4b05      	ldr	r3, [pc, #20]	; (415d3c <_lv_ll_ins_head+0x44>)
  415d26:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  415d28:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  415d2a:	68a3      	ldr	r3, [r4, #8]
  415d2c:	b10b      	cbz	r3, 415d32 <_lv_ll_ins_head+0x3a>
}
  415d2e:	4628      	mov	r0, r5
  415d30:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  415d32:	60a5      	str	r5, [r4, #8]
  415d34:	e7fb      	b.n	415d2e <_lv_ll_ins_head+0x36>
  415d36:	bf00      	nop
  415d38:	00416189 	.word	0x00416189
  415d3c:	00415ccd 	.word	0x00415ccd
  415d40:	00415cd7 	.word	0x00415cd7

00415d44 <_lv_ll_ins_tail>:
{
  415d44:	b538      	push	{r3, r4, r5, lr}
  415d46:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415d48:	6800      	ldr	r0, [r0, #0]
  415d4a:	3008      	adds	r0, #8
  415d4c:	4b0d      	ldr	r3, [pc, #52]	; (415d84 <_lv_ll_ins_tail+0x40>)
  415d4e:	4798      	blx	r3
    if(n_new != NULL) {
  415d50:	4605      	mov	r5, r0
  415d52:	b190      	cbz	r0, 415d7a <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  415d54:	2200      	movs	r2, #0
  415d56:	4601      	mov	r1, r0
  415d58:	4620      	mov	r0, r4
  415d5a:	4b0b      	ldr	r3, [pc, #44]	; (415d88 <_lv_ll_ins_tail+0x44>)
  415d5c:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  415d5e:	68a2      	ldr	r2, [r4, #8]
  415d60:	4629      	mov	r1, r5
  415d62:	4620      	mov	r0, r4
  415d64:	4b09      	ldr	r3, [pc, #36]	; (415d8c <_lv_ll_ins_tail+0x48>)
  415d66:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  415d68:	68a1      	ldr	r1, [r4, #8]
  415d6a:	b119      	cbz	r1, 415d74 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  415d6c:	462a      	mov	r2, r5
  415d6e:	4620      	mov	r0, r4
  415d70:	4b05      	ldr	r3, [pc, #20]	; (415d88 <_lv_ll_ins_tail+0x44>)
  415d72:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  415d74:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  415d76:	6863      	ldr	r3, [r4, #4]
  415d78:	b10b      	cbz	r3, 415d7e <_lv_ll_ins_tail+0x3a>
}
  415d7a:	4628      	mov	r0, r5
  415d7c:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  415d7e:	6065      	str	r5, [r4, #4]
  415d80:	e7fb      	b.n	415d7a <_lv_ll_ins_tail+0x36>
  415d82:	bf00      	nop
  415d84:	00416189 	.word	0x00416189
  415d88:	00415cd7 	.word	0x00415cd7
  415d8c:	00415ccd 	.word	0x00415ccd

00415d90 <_lv_ll_get_head>:
    if(ll_p != NULL) {
  415d90:	b108      	cbz	r0, 415d96 <_lv_ll_get_head+0x6>
        head = ll_p->head;
  415d92:	6840      	ldr	r0, [r0, #4]
  415d94:	4770      	bx	lr
    void * head = NULL;
  415d96:	2000      	movs	r0, #0
}
  415d98:	4770      	bx	lr

00415d9a <_lv_ll_get_tail>:
    if(ll_p != NULL) {
  415d9a:	b108      	cbz	r0, 415da0 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
  415d9c:	6880      	ldr	r0, [r0, #8]
  415d9e:	4770      	bx	lr
    void * tail = NULL;
  415da0:	2000      	movs	r0, #0
}
  415da2:	4770      	bx	lr

00415da4 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
  415da4:	b118      	cbz	r0, 415dae <_lv_ll_get_next+0xa>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
  415da6:	6803      	ldr	r3, [r0, #0]
  415da8:	3304      	adds	r3, #4
    return *((lv_ll_node_t **)n_act_d);
  415daa:	58c8      	ldr	r0, [r1, r3]
  415dac:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  415dae:	2000      	movs	r0, #0
}
  415db0:	4770      	bx	lr

00415db2 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
  415db2:	b110      	cbz	r0, 415dba <_lv_ll_get_prev+0x8>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
  415db4:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
  415db6:	58c8      	ldr	r0, [r1, r3]
  415db8:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  415dba:	2000      	movs	r0, #0
}
  415dbc:	4770      	bx	lr
	...

00415dc0 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
  415dc0:	2900      	cmp	r1, #0
  415dc2:	bf18      	it	ne
  415dc4:	2800      	cmpne	r0, #0
  415dc6:	d02f      	beq.n	415e28 <_lv_ll_ins_prev+0x68>
{
  415dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415dcc:	4604      	mov	r4, r0
  415dce:	4688      	mov	r8, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
  415dd0:	4b18      	ldr	r3, [pc, #96]	; (415e34 <_lv_ll_ins_prev+0x74>)
  415dd2:	4798      	blx	r3
  415dd4:	4580      	cmp	r8, r0
  415dd6:	d01f      	beq.n	415e18 <_lv_ll_ins_prev+0x58>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415dd8:	6820      	ldr	r0, [r4, #0]
  415dda:	3008      	adds	r0, #8
  415ddc:	4b16      	ldr	r3, [pc, #88]	; (415e38 <_lv_ll_ins_prev+0x78>)
  415dde:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  415de0:	4605      	mov	r5, r0
  415de2:	b318      	cbz	r0, 415e2c <_lv_ll_ins_prev+0x6c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
  415de4:	4641      	mov	r1, r8
  415de6:	4620      	mov	r0, r4
  415de8:	4b14      	ldr	r3, [pc, #80]	; (415e3c <_lv_ll_ins_prev+0x7c>)
  415dea:	4798      	blx	r3
  415dec:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
  415dee:	462a      	mov	r2, r5
  415df0:	4601      	mov	r1, r0
  415df2:	4620      	mov	r0, r4
  415df4:	4e12      	ldr	r6, [pc, #72]	; (415e40 <_lv_ll_ins_prev+0x80>)
  415df6:	47b0      	blx	r6
        node_set_prev(ll_p, n_new, n_prev);
  415df8:	463a      	mov	r2, r7
  415dfa:	4629      	mov	r1, r5
  415dfc:	4620      	mov	r0, r4
  415dfe:	4f11      	ldr	r7, [pc, #68]	; (415e44 <_lv_ll_ins_prev+0x84>)
  415e00:	47b8      	blx	r7
        node_set_prev(ll_p, n_act, n_new);
  415e02:	462a      	mov	r2, r5
  415e04:	4641      	mov	r1, r8
  415e06:	4620      	mov	r0, r4
  415e08:	47b8      	blx	r7
        node_set_next(ll_p, n_new, n_act);
  415e0a:	4642      	mov	r2, r8
  415e0c:	4629      	mov	r1, r5
  415e0e:	4620      	mov	r0, r4
  415e10:	47b0      	blx	r6
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415e12:	4628      	mov	r0, r5
  415e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
  415e18:	4620      	mov	r0, r4
  415e1a:	4b0b      	ldr	r3, [pc, #44]	; (415e48 <_lv_ll_ins_prev+0x88>)
  415e1c:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  415e1e:	b108      	cbz	r0, 415e24 <_lv_ll_ins_prev+0x64>
  415e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  415e28:	2000      	movs	r0, #0
  415e2a:	4770      	bx	lr
        if(n_new == NULL) return NULL;
  415e2c:	2000      	movs	r0, #0
}
  415e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415e32:	bf00      	nop
  415e34:	00415d91 	.word	0x00415d91
  415e38:	00416189 	.word	0x00416189
  415e3c:	00415db3 	.word	0x00415db3
  415e40:	00415cd7 	.word	0x00415cd7
  415e44:	00415ccd 	.word	0x00415ccd
  415e48:	00415cf9 	.word	0x00415cf9

00415e4c <_lv_ll_remove>:
{
  415e4c:	b570      	push	{r4, r5, r6, lr}
  415e4e:	4604      	mov	r4, r0
  415e50:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == node_p) {
  415e52:	4b1e      	ldr	r3, [pc, #120]	; (415ecc <_lv_ll_remove+0x80>)
  415e54:	4798      	blx	r3
  415e56:	4285      	cmp	r5, r0
  415e58:	d019      	beq.n	415e8e <_lv_ll_remove+0x42>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  415e5a:	4620      	mov	r0, r4
  415e5c:	4b1c      	ldr	r3, [pc, #112]	; (415ed0 <_lv_ll_remove+0x84>)
  415e5e:	4798      	blx	r3
  415e60:	4285      	cmp	r5, r0
  415e62:	d023      	beq.n	415eac <_lv_ll_remove+0x60>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
  415e64:	4629      	mov	r1, r5
  415e66:	4620      	mov	r0, r4
  415e68:	4b1a      	ldr	r3, [pc, #104]	; (415ed4 <_lv_ll_remove+0x88>)
  415e6a:	4798      	blx	r3
  415e6c:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
  415e6e:	4629      	mov	r1, r5
  415e70:	4620      	mov	r0, r4
  415e72:	4b19      	ldr	r3, [pc, #100]	; (415ed8 <_lv_ll_remove+0x8c>)
  415e74:	4798      	blx	r3
  415e76:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
  415e78:	4602      	mov	r2, r0
  415e7a:	4631      	mov	r1, r6
  415e7c:	4620      	mov	r0, r4
  415e7e:	4b17      	ldr	r3, [pc, #92]	; (415edc <_lv_ll_remove+0x90>)
  415e80:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  415e82:	4632      	mov	r2, r6
  415e84:	4629      	mov	r1, r5
  415e86:	4620      	mov	r0, r4
  415e88:	4b15      	ldr	r3, [pc, #84]	; (415ee0 <_lv_ll_remove+0x94>)
  415e8a:	4798      	blx	r3
  415e8c:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  415e8e:	4629      	mov	r1, r5
  415e90:	4620      	mov	r0, r4
  415e92:	4b11      	ldr	r3, [pc, #68]	; (415ed8 <_lv_ll_remove+0x8c>)
  415e94:	4798      	blx	r3
  415e96:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
  415e98:	b128      	cbz	r0, 415ea6 <_lv_ll_remove+0x5a>
            node_set_prev(ll_p, ll_p->head, NULL);
  415e9a:	2200      	movs	r2, #0
  415e9c:	4601      	mov	r1, r0
  415e9e:	4620      	mov	r0, r4
  415ea0:	4b0f      	ldr	r3, [pc, #60]	; (415ee0 <_lv_ll_remove+0x94>)
  415ea2:	4798      	blx	r3
  415ea4:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  415ea6:	2300      	movs	r3, #0
  415ea8:	60a3      	str	r3, [r4, #8]
  415eaa:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  415eac:	4629      	mov	r1, r5
  415eae:	4620      	mov	r0, r4
  415eb0:	4b08      	ldr	r3, [pc, #32]	; (415ed4 <_lv_ll_remove+0x88>)
  415eb2:	4798      	blx	r3
  415eb4:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
  415eb6:	b128      	cbz	r0, 415ec4 <_lv_ll_remove+0x78>
            node_set_next(ll_p, ll_p->tail, NULL);
  415eb8:	2200      	movs	r2, #0
  415eba:	4601      	mov	r1, r0
  415ebc:	4620      	mov	r0, r4
  415ebe:	4b07      	ldr	r3, [pc, #28]	; (415edc <_lv_ll_remove+0x90>)
  415ec0:	4798      	blx	r3
  415ec2:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  415ec4:	2300      	movs	r3, #0
  415ec6:	6063      	str	r3, [r4, #4]
  415ec8:	bd70      	pop	{r4, r5, r6, pc}
  415eca:	bf00      	nop
  415ecc:	00415d91 	.word	0x00415d91
  415ed0:	00415d9b 	.word	0x00415d9b
  415ed4:	00415db3 	.word	0x00415db3
  415ed8:	00415da5 	.word	0x00415da5
  415edc:	00415cd7 	.word	0x00415cd7
  415ee0:	00415ccd 	.word	0x00415ccd

00415ee4 <_lv_ll_chg_list>:
{
  415ee4:	b570      	push	{r4, r5, r6, lr}
  415ee6:	460c      	mov	r4, r1
  415ee8:	4615      	mov	r5, r2
  415eea:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
  415eec:	4611      	mov	r1, r2
  415eee:	4b17      	ldr	r3, [pc, #92]	; (415f4c <_lv_ll_chg_list+0x68>)
  415ef0:	4798      	blx	r3
    if(head) {
  415ef2:	b1ae      	cbz	r6, 415f20 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
  415ef4:	2200      	movs	r2, #0
  415ef6:	4629      	mov	r1, r5
  415ef8:	4620      	mov	r0, r4
  415efa:	4b15      	ldr	r3, [pc, #84]	; (415f50 <_lv_ll_chg_list+0x6c>)
  415efc:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
  415efe:	6862      	ldr	r2, [r4, #4]
  415f00:	4629      	mov	r1, r5
  415f02:	4620      	mov	r0, r4
  415f04:	4b13      	ldr	r3, [pc, #76]	; (415f54 <_lv_ll_chg_list+0x70>)
  415f06:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
  415f08:	6861      	ldr	r1, [r4, #4]
  415f0a:	b119      	cbz	r1, 415f14 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
  415f0c:	462a      	mov	r2, r5
  415f0e:	4620      	mov	r0, r4
  415f10:	4b0f      	ldr	r3, [pc, #60]	; (415f50 <_lv_ll_chg_list+0x6c>)
  415f12:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
  415f14:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
  415f16:	68a3      	ldr	r3, [r4, #8]
  415f18:	b103      	cbz	r3, 415f1c <_lv_ll_chg_list+0x38>
  415f1a:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
  415f1c:	60a5      	str	r5, [r4, #8]
  415f1e:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
  415f20:	68a2      	ldr	r2, [r4, #8]
  415f22:	4629      	mov	r1, r5
  415f24:	4620      	mov	r0, r4
  415f26:	4b0a      	ldr	r3, [pc, #40]	; (415f50 <_lv_ll_chg_list+0x6c>)
  415f28:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
  415f2a:	2200      	movs	r2, #0
  415f2c:	4629      	mov	r1, r5
  415f2e:	4620      	mov	r0, r4
  415f30:	4b08      	ldr	r3, [pc, #32]	; (415f54 <_lv_ll_chg_list+0x70>)
  415f32:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
  415f34:	68a1      	ldr	r1, [r4, #8]
  415f36:	b119      	cbz	r1, 415f40 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
  415f38:	462a      	mov	r2, r5
  415f3a:	4620      	mov	r0, r4
  415f3c:	4b05      	ldr	r3, [pc, #20]	; (415f54 <_lv_ll_chg_list+0x70>)
  415f3e:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
  415f40:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
  415f42:	6863      	ldr	r3, [r4, #4]
  415f44:	2b00      	cmp	r3, #0
  415f46:	d1e8      	bne.n	415f1a <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
  415f48:	6065      	str	r5, [r4, #4]
}
  415f4a:	e7e6      	b.n	415f1a <_lv_ll_chg_list+0x36>
  415f4c:	00415e4d 	.word	0x00415e4d
  415f50:	00415ccd 	.word	0x00415ccd
  415f54:	00415cd7 	.word	0x00415cd7

00415f58 <_lv_ll_get_len>:
{
  415f58:	b538      	push	{r3, r4, r5, lr}
  415f5a:	4605      	mov	r5, r0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415f5c:	4b06      	ldr	r3, [pc, #24]	; (415f78 <_lv_ll_get_len+0x20>)
  415f5e:	4798      	blx	r3
    uint32_t len = 0;
  415f60:	2400      	movs	r4, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415f62:	e004      	b.n	415f6e <_lv_ll_get_len+0x16>
        len++;
  415f64:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415f66:	4601      	mov	r1, r0
  415f68:	4628      	mov	r0, r5
  415f6a:	4b04      	ldr	r3, [pc, #16]	; (415f7c <_lv_ll_get_len+0x24>)
  415f6c:	4798      	blx	r3
  415f6e:	2800      	cmp	r0, #0
  415f70:	d1f8      	bne.n	415f64 <_lv_ll_get_len+0xc>
}
  415f72:	4620      	mov	r0, r4
  415f74:	bd38      	pop	{r3, r4, r5, pc}
  415f76:	bf00      	nop
  415f78:	00415d91 	.word	0x00415d91
  415f7c:	00415da5 	.word	0x00415da5

00415f80 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
  415f80:	4291      	cmp	r1, r2
  415f82:	d02f      	beq.n	415fe4 <_lv_ll_move_before+0x64>
{
  415f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  415f88:	4617      	mov	r7, r2
  415f8a:	460c      	mov	r4, r1
  415f8c:	4605      	mov	r5, r0
    if(n_after != NULL)
  415f8e:	b30a      	cbz	r2, 415fd4 <_lv_ll_move_before+0x54>
        n_before = _lv_ll_get_prev(ll_p, n_after);
  415f90:	4611      	mov	r1, r2
  415f92:	4b15      	ldr	r3, [pc, #84]	; (415fe8 <_lv_ll_move_before+0x68>)
  415f94:	4798      	blx	r3
  415f96:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
  415f98:	42a6      	cmp	r6, r4
  415f9a:	d019      	beq.n	415fd0 <_lv_ll_move_before+0x50>
    _lv_ll_remove(ll_p, n_act);
  415f9c:	4621      	mov	r1, r4
  415f9e:	4628      	mov	r0, r5
  415fa0:	4b12      	ldr	r3, [pc, #72]	; (415fec <_lv_ll_move_before+0x6c>)
  415fa2:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  415fa4:	4622      	mov	r2, r4
  415fa6:	4631      	mov	r1, r6
  415fa8:	4628      	mov	r0, r5
  415faa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 415ff4 <_lv_ll_move_before+0x74>
  415fae:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
  415fb0:	4632      	mov	r2, r6
  415fb2:	4621      	mov	r1, r4
  415fb4:	4628      	mov	r0, r5
  415fb6:	f8df 9040 	ldr.w	r9, [pc, #64]	; 415ff8 <_lv_ll_move_before+0x78>
  415fba:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
  415fbc:	4622      	mov	r2, r4
  415fbe:	4639      	mov	r1, r7
  415fc0:	4628      	mov	r0, r5
  415fc2:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
  415fc4:	463a      	mov	r2, r7
  415fc6:	4621      	mov	r1, r4
  415fc8:	4628      	mov	r0, r5
  415fca:	47c0      	blx	r8
    if(n_after == NULL) ll_p->tail = n_act;
  415fcc:	b137      	cbz	r7, 415fdc <_lv_ll_move_before+0x5c>
    if(n_before == NULL) ll_p->head = n_act;
  415fce:	b13e      	cbz	r6, 415fe0 <_lv_ll_move_before+0x60>
  415fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
  415fd4:	4b06      	ldr	r3, [pc, #24]	; (415ff0 <_lv_ll_move_before+0x70>)
  415fd6:	4798      	blx	r3
  415fd8:	4606      	mov	r6, r0
  415fda:	e7dd      	b.n	415f98 <_lv_ll_move_before+0x18>
    if(n_after == NULL) ll_p->tail = n_act;
  415fdc:	60ac      	str	r4, [r5, #8]
  415fde:	e7f6      	b.n	415fce <_lv_ll_move_before+0x4e>
    if(n_before == NULL) ll_p->head = n_act;
  415fe0:	606c      	str	r4, [r5, #4]
  415fe2:	e7f5      	b.n	415fd0 <_lv_ll_move_before+0x50>
  415fe4:	4770      	bx	lr
  415fe6:	bf00      	nop
  415fe8:	00415db3 	.word	0x00415db3
  415fec:	00415e4d 	.word	0x00415e4d
  415ff0:	00415d9b 	.word	0x00415d9b
  415ff4:	00415cd7 	.word	0x00415cd7
  415ff8:	00415ccd 	.word	0x00415ccd

00415ffc <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  415ffc:	b138      	cbz	r0, 41600e <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  415ffe:	6842      	ldr	r2, [r0, #4]
  416000:	b10a      	cbz	r2, 416006 <_lv_ll_is_empty+0xa>
    return false;
  416002:	2000      	movs	r0, #0
  416004:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  416006:	6883      	ldr	r3, [r0, #8]
  416008:	b11b      	cbz	r3, 416012 <_lv_ll_is_empty+0x16>
    return false;
  41600a:	2000      	movs	r0, #0
  41600c:	4770      	bx	lr
    if(ll_p == NULL) return true;
  41600e:	2001      	movs	r0, #1
  416010:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  416012:	2001      	movs	r0, #1
}
  416014:	4770      	bx	lr
	...

00416018 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  416018:	4b1c      	ldr	r3, [pc, #112]	; (41608c <_lv_trigo_sin+0x74>)
  41601a:	fb83 2300 	smull	r2, r3, r3, r0
  41601e:	181a      	adds	r2, r3, r0
  416020:	17c3      	asrs	r3, r0, #31
  416022:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  416026:	f44f 72b4 	mov.w	r2, #360	; 0x168
  41602a:	fb02 0013 	mls	r0, r2, r3, r0
  41602e:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  416030:	2800      	cmp	r0, #0
  416032:	db15      	blt.n	416060 <_lv_trigo_sin+0x48>

    if(angle < 90) {
  416034:	2859      	cmp	r0, #89	; 0x59
  416036:	dd16      	ble.n	416066 <_lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  416038:	b280      	uxth	r0, r0
  41603a:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  41603e:	b29b      	uxth	r3, r3
  416040:	2b59      	cmp	r3, #89	; 0x59
  416042:	d914      	bls.n	41606e <_lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  416044:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  416048:	b29b      	uxth	r3, r3
  41604a:	2b59      	cmp	r3, #89	; 0x59
  41604c:	d916      	bls.n	41607c <_lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  41604e:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  416052:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
  416054:	4b0e      	ldr	r3, [pc, #56]	; (416090 <_lv_trigo_sin+0x78>)
  416056:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  41605a:	4240      	negs	r0, r0
  41605c:	b200      	sxth	r0, r0
    }

    return ret;
}
  41605e:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  416060:	4410      	add	r0, r2
  416062:	b200      	sxth	r0, r0
  416064:	e7e6      	b.n	416034 <_lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  416066:	4b0a      	ldr	r3, [pc, #40]	; (416090 <_lv_trigo_sin+0x78>)
  416068:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  41606c:	4770      	bx	lr
        angle = 180 - angle;
  41606e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  416072:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
  416074:	4b06      	ldr	r3, [pc, #24]	; (416090 <_lv_trigo_sin+0x78>)
  416076:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  41607a:	4770      	bx	lr
        angle = angle - 180;
  41607c:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
  41607e:	4a04      	ldr	r2, [pc, #16]	; (416090 <_lv_trigo_sin+0x78>)
  416080:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  416084:	4240      	negs	r0, r0
  416086:	b200      	sxth	r0, r0
  416088:	4770      	bx	lr
  41608a:	bf00      	nop
  41608c:	b60b60b7 	.word	0xb60b60b7
  416090:	0042c268 	.word	0x0042c268

00416094 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
  416094:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
  416096:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
  416098:	2400      	movs	r4, #0
  41609a:	e001      	b.n	4160a0 <_lv_sqrt+0xc>
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
        if(trial * trial <= x) root = trial;
        mask = mask >> 1;
    } while(mask);
  41609c:	0852      	lsrs	r2, r2, #1
  41609e:	d006      	beq.n	4160ae <_lv_sqrt+0x1a>
        trial = root + mask;
  4160a0:	1913      	adds	r3, r2, r4
        if(trial * trial <= x) root = trial;
  4160a2:	fb03 f503 	mul.w	r5, r3, r3
  4160a6:	42a8      	cmp	r0, r5
  4160a8:	d3f8      	bcc.n	41609c <_lv_sqrt+0x8>
  4160aa:	461c      	mov	r4, r3
  4160ac:	e7f6      	b.n	41609c <_lv_sqrt+0x8>

    q->i = root >> 4;
  4160ae:	0923      	lsrs	r3, r4, #4
  4160b0:	800b      	strh	r3, [r1, #0]
    q->f = (root & 0xf) << 4;
  4160b2:	0124      	lsls	r4, r4, #4
  4160b4:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  4160b8:	804c      	strh	r4, [r1, #2]
}
  4160ba:	bc30      	pop	{r4, r5}
  4160bc:	4770      	bx	lr
	...

004160c0 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  4160c0:	4603      	mov	r3, r0
  4160c2:	b158      	cbz	r0, 4160dc <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  4160c4:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  4160c6:	681b      	ldr	r3, [r3, #0]
  4160c8:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  4160cc:	1d02      	adds	r2, r0, #4
  4160ce:	4b06      	ldr	r3, [pc, #24]	; (4160e8 <ent_get_next+0x28>)
  4160d0:	681b      	ldr	r3, [r3, #0]
  4160d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  4160d6:	429a      	cmp	r2, r3
  4160d8:	d203      	bcs.n	4160e2 <ent_get_next+0x22>
    }

    return next_e;
}
  4160da:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  4160dc:	4b02      	ldr	r3, [pc, #8]	; (4160e8 <ent_get_next+0x28>)
  4160de:	6818      	ldr	r0, [r3, #0]
  4160e0:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  4160e2:	2000      	movs	r0, #0
    return next_e;
  4160e4:	e7f9      	b.n	4160da <ent_get_next+0x1a>
  4160e6:	bf00      	nop
  4160e8:	2040c784 	.word	0x2040c784

004160ec <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  4160ec:	3103      	adds	r1, #3
  4160ee:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  4160f2:	6803      	ldr	r3, [r0, #0]
  4160f4:	f3c3 035e 	ubfx	r3, r3, #1, #31
  4160f8:	1d0a      	adds	r2, r1, #4
  4160fa:	4293      	cmp	r3, r2
  4160fc:	d016      	beq.n	41612c <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  4160fe:	4299      	cmp	r1, r3
  416100:	d013      	beq.n	41612a <ent_trunc+0x3e>
{
  416102:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  416104:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  416106:	5c53      	ldrb	r3, [r2, r1]
  416108:	f36f 0300 	bfc	r3, #0, #1
  41610c:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  41610e:	6803      	ldr	r3, [r0, #0]
  416110:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  416114:	3b04      	subs	r3, #4
  416116:	5854      	ldr	r4, [r2, r1]
  416118:	f363 045f 	bfi	r4, r3, #1, #31
  41611c:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  41611e:	6803      	ldr	r3, [r0, #0]
  416120:	f361 035f 	bfi	r3, r1, #1, #31
  416124:	6003      	str	r3, [r0, #0]
    }
}
  416126:	f85d 4b04 	ldr.w	r4, [sp], #4
  41612a:	4770      	bx	lr
        size = e->header.s.d_size;
  41612c:	4619      	mov	r1, r3
  41612e:	e7e6      	b.n	4160fe <ent_trunc+0x12>

00416130 <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  416130:	7803      	ldrb	r3, [r0, #0]
  416132:	f013 0f01 	tst.w	r3, #1
  416136:	d10f      	bne.n	416158 <ent_alloc+0x28>
  416138:	6803      	ldr	r3, [r0, #0]
  41613a:	f3c3 035e 	ubfx	r3, r3, #1, #31
  41613e:	428b      	cmp	r3, r1
  416140:	d30c      	bcc.n	41615c <ent_alloc+0x2c>
{
  416142:	b510      	push	{r4, lr}
  416144:	4604      	mov	r4, r0
        ent_trunc(e, size);
  416146:	4b06      	ldr	r3, [pc, #24]	; (416160 <ent_alloc+0x30>)
  416148:	4798      	blx	r3
        e->header.s.used = 1;
  41614a:	7823      	ldrb	r3, [r4, #0]
  41614c:	f043 0301 	orr.w	r3, r3, #1
  416150:	4620      	mov	r0, r4
  416152:	f800 3b04 	strb.w	r3, [r0], #4
  416156:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  416158:	2000      	movs	r0, #0
  41615a:	4770      	bx	lr
  41615c:	2000      	movs	r0, #0
    return alloc;
  41615e:	4770      	bx	lr
  416160:	004160ed 	.word	0x004160ed

00416164 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  416164:	4b06      	ldr	r3, [pc, #24]	; (416180 <_lv_mem_init+0x1c>)
  416166:	4a07      	ldr	r2, [pc, #28]	; (416184 <_lv_mem_init+0x20>)
  416168:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  41616a:	781a      	ldrb	r2, [r3, #0]
  41616c:	f36f 0200 	bfc	r2, #0, #1
  416170:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  416172:	681a      	ldr	r2, [r3, #0]
  416174:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  416178:	f361 025f 	bfi	r2, r1, #1, #31
  41617c:	601a      	str	r2, [r3, #0]
  41617e:	4770      	bx	lr
  416180:	2040c788 	.word	0x2040c788
  416184:	2040c784 	.word	0x2040c784

00416188 <lv_mem_alloc>:
{
  416188:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  41618a:	b330      	cbz	r0, 4161da <lv_mem_alloc+0x52>
  41618c:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  41618e:	3603      	adds	r6, #3
  416190:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  416194:	2400      	movs	r4, #0
    void * alloc = NULL;
  416196:	4625      	mov	r5, r4
  416198:	e006      	b.n	4161a8 <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  41619a:	1c23      	adds	r3, r4, #0
  41619c:	bf18      	it	ne
  41619e:	2301      	movne	r3, #1
  4161a0:	2d00      	cmp	r5, #0
  4161a2:	bf18      	it	ne
  4161a4:	2300      	movne	r3, #0
  4161a6:	b153      	cbz	r3, 4161be <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  4161a8:	4620      	mov	r0, r4
  4161aa:	4b0d      	ldr	r3, [pc, #52]	; (4161e0 <lv_mem_alloc+0x58>)
  4161ac:	4798      	blx	r3
        if(e != NULL) {
  4161ae:	4604      	mov	r4, r0
  4161b0:	2800      	cmp	r0, #0
  4161b2:	d0f2      	beq.n	41619a <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  4161b4:	4631      	mov	r1, r6
  4161b6:	4b0b      	ldr	r3, [pc, #44]	; (4161e4 <lv_mem_alloc+0x5c>)
  4161b8:	4798      	blx	r3
  4161ba:	4605      	mov	r5, r0
  4161bc:	e7ed      	b.n	41619a <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  4161be:	b16d      	cbz	r5, 4161dc <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  4161c0:	4b09      	ldr	r3, [pc, #36]	; (4161e8 <lv_mem_alloc+0x60>)
  4161c2:	681b      	ldr	r3, [r3, #0]
  4161c4:	429d      	cmp	r5, r3
  4161c6:	d909      	bls.n	4161dc <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  4161c8:	1aeb      	subs	r3, r5, r3
  4161ca:	441e      	add	r6, r3
  4161cc:	4b07      	ldr	r3, [pc, #28]	; (4161ec <lv_mem_alloc+0x64>)
  4161ce:	681b      	ldr	r3, [r3, #0]
  4161d0:	429e      	cmp	r6, r3
  4161d2:	d903      	bls.n	4161dc <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  4161d4:	4b05      	ldr	r3, [pc, #20]	; (4161ec <lv_mem_alloc+0x64>)
  4161d6:	601e      	str	r6, [r3, #0]
  4161d8:	e000      	b.n	4161dc <lv_mem_alloc+0x54>
        return &zero_mem;
  4161da:	4d05      	ldr	r5, [pc, #20]	; (4161f0 <lv_mem_alloc+0x68>)
}
  4161dc:	4628      	mov	r0, r5
  4161de:	bd70      	pop	{r4, r5, r6, pc}
  4161e0:	004160c1 	.word	0x004160c1
  4161e4:	00416131 	.word	0x00416131
  4161e8:	2040c784 	.word	0x2040c784
  4161ec:	2040c780 	.word	0x2040c780
  4161f0:	20414788 	.word	0x20414788

004161f4 <lv_mem_defrag>:
{
  4161f4:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  4161f6:	2000      	movs	r0, #0
  4161f8:	4b13      	ldr	r3, [pc, #76]	; (416248 <lv_mem_defrag+0x54>)
  4161fa:	4798      	blx	r3
  4161fc:	4604      	mov	r4, r0
  4161fe:	e017      	b.n	416230 <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  416200:	b304      	cbz	r4, 416244 <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  416202:	4620      	mov	r0, r4
  416204:	4b10      	ldr	r3, [pc, #64]	; (416248 <lv_mem_defrag+0x54>)
  416206:	4798      	blx	r3
        while(e_next != NULL) {
  416208:	b180      	cbz	r0, 41622c <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  41620a:	7803      	ldrb	r3, [r0, #0]
  41620c:	f013 0f01 	tst.w	r3, #1
  416210:	d10c      	bne.n	41622c <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  416212:	6801      	ldr	r1, [r0, #0]
  416214:	6823      	ldr	r3, [r4, #0]
  416216:	f3c3 025e 	ubfx	r2, r3, #1, #31
  41621a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  41621e:	3204      	adds	r2, #4
  416220:	f362 035f 	bfi	r3, r2, #1, #31
  416224:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  416226:	4b08      	ldr	r3, [pc, #32]	; (416248 <lv_mem_defrag+0x54>)
  416228:	4798      	blx	r3
  41622a:	e7ed      	b.n	416208 <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  41622c:	b150      	cbz	r0, 416244 <lv_mem_defrag+0x50>
{
  41622e:	4604      	mov	r4, r0
        while(e_free != NULL) {
  416230:	2c00      	cmp	r4, #0
  416232:	d0e5      	beq.n	416200 <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  416234:	7823      	ldrb	r3, [r4, #0]
  416236:	f013 0f01 	tst.w	r3, #1
  41623a:	d0e1      	beq.n	416200 <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  41623c:	4620      	mov	r0, r4
  41623e:	4b02      	ldr	r3, [pc, #8]	; (416248 <lv_mem_defrag+0x54>)
  416240:	4798      	blx	r3
  416242:	e7f4      	b.n	41622e <lv_mem_defrag+0x3a>
  416244:	bd10      	pop	{r4, pc}
  416246:	bf00      	nop
  416248:	004160c1 	.word	0x004160c1

0041624c <lv_mem_free>:
    if(data == &zero_mem) return;
  41624c:	4b18      	ldr	r3, [pc, #96]	; (4162b0 <lv_mem_free+0x64>)
  41624e:	4298      	cmp	r0, r3
  416250:	d02d      	beq.n	4162ae <lv_mem_free+0x62>
    if(data == NULL) return;
  416252:	b360      	cbz	r0, 4162ae <lv_mem_free+0x62>
{
  416254:	b510      	push	{r4, lr}
  416256:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  416258:	3804      	subs	r0, #4
    e->header.s.used = 0;
  41625a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  41625e:	f36f 0300 	bfc	r3, #0, #1
  416262:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  416266:	4a13      	ldr	r2, [pc, #76]	; (4162b4 <lv_mem_free+0x68>)
  416268:	8813      	ldrh	r3, [r2, #0]
  41626a:	3301      	adds	r3, #1
  41626c:	b29b      	uxth	r3, r3
  41626e:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  416270:	2b0f      	cmp	r3, #15
  416272:	d816      	bhi.n	4162a2 <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  416274:	4b10      	ldr	r3, [pc, #64]	; (4162b8 <lv_mem_free+0x6c>)
  416276:	4798      	blx	r3
        while(e_next != NULL) {
  416278:	b190      	cbz	r0, 4162a0 <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  41627a:	7803      	ldrb	r3, [r0, #0]
  41627c:	f013 0f01 	tst.w	r3, #1
  416280:	d114      	bne.n	4162ac <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  416282:	6801      	ldr	r1, [r0, #0]
  416284:	f854 3c04 	ldr.w	r3, [r4, #-4]
  416288:	f3c3 025e 	ubfx	r2, r3, #1, #31
  41628c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  416290:	3204      	adds	r2, #4
  416292:	f362 035f 	bfi	r3, r2, #1, #31
  416296:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  41629a:	4b07      	ldr	r3, [pc, #28]	; (4162b8 <lv_mem_free+0x6c>)
  41629c:	4798      	blx	r3
  41629e:	e7eb      	b.n	416278 <lv_mem_free+0x2c>
  4162a0:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  4162a2:	2200      	movs	r2, #0
  4162a4:	4b03      	ldr	r3, [pc, #12]	; (4162b4 <lv_mem_free+0x68>)
  4162a6:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  4162a8:	4b04      	ldr	r3, [pc, #16]	; (4162bc <lv_mem_free+0x70>)
  4162aa:	4798      	blx	r3
  4162ac:	bd10      	pop	{r4, pc}
  4162ae:	4770      	bx	lr
  4162b0:	20414788 	.word	0x20414788
  4162b4:	2040c75c 	.word	0x2040c75c
  4162b8:	004160c1 	.word	0x004160c1
  4162bc:	004161f5 	.word	0x004161f5

004162c0 <_lv_mem_get_size>:
    if(data == NULL) return 0;
  4162c0:	b138      	cbz	r0, 4162d2 <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  4162c2:	4a06      	ldr	r2, [pc, #24]	; (4162dc <_lv_mem_get_size+0x1c>)
  4162c4:	4290      	cmp	r0, r2
  4162c6:	d006      	beq.n	4162d6 <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  4162c8:	f850 0c04 	ldr.w	r0, [r0, #-4]
  4162cc:	f3c0 005e 	ubfx	r0, r0, #1, #31
  4162d0:	4770      	bx	lr
    if(data == NULL) return 0;
  4162d2:	2000      	movs	r0, #0
  4162d4:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  4162d6:	2000      	movs	r0, #0
}
  4162d8:	4770      	bx	lr
  4162da:	bf00      	nop
  4162dc:	20414788 	.word	0x20414788

004162e0 <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4162e0:	2300      	movs	r3, #0
  4162e2:	2b01      	cmp	r3, #1
  4162e4:	d810      	bhi.n	416308 <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  4162e6:	4619      	mov	r1, r3
  4162e8:	4a12      	ldr	r2, [pc, #72]	; (416334 <_lv_mem_buf_release+0x54>)
  4162ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4162ee:	4282      	cmp	r2, r0
  4162f0:	d002      	beq.n	4162f8 <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  4162f2:	3301      	adds	r3, #1
  4162f4:	b2db      	uxtb	r3, r3
  4162f6:	e7f4      	b.n	4162e2 <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  4162f8:	4b0e      	ldr	r3, [pc, #56]	; (416334 <_lv_mem_buf_release+0x54>)
  4162fa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4162fe:	798b      	ldrb	r3, [r1, #6]
  416300:	f36f 0300 	bfc	r3, #0, #1
  416304:	718b      	strb	r3, [r1, #6]
            return;
  416306:	4770      	bx	lr
  416308:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41630a:	2b0f      	cmp	r3, #15
  41630c:	d810      	bhi.n	416330 <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  41630e:	4619      	mov	r1, r3
  416310:	4a09      	ldr	r2, [pc, #36]	; (416338 <_lv_mem_buf_release+0x58>)
  416312:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  416316:	4290      	cmp	r0, r2
  416318:	d002      	beq.n	416320 <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41631a:	3301      	adds	r3, #1
  41631c:	b2db      	uxtb	r3, r3
  41631e:	e7f4      	b.n	41630a <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  416320:	4b05      	ldr	r3, [pc, #20]	; (416338 <_lv_mem_buf_release+0x58>)
  416322:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  416326:	798b      	ldrb	r3, [r1, #6]
  416328:	f36f 0300 	bfc	r3, #0, #1
  41632c:	718b      	strb	r3, [r1, #6]
            return;
  41632e:	4770      	bx	lr
  416330:	4770      	bx	lr
  416332:	bf00      	nop
  416334:	20400040 	.word	0x20400040
  416338:	2043a1d8 	.word	0x2043a1d8

0041633c <_lv_mem_buf_free_all>:
{
  41633c:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  41633e:	2300      	movs	r3, #0
  416340:	e008      	b.n	416354 <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  416342:	4a12      	ldr	r2, [pc, #72]	; (41638c <_lv_mem_buf_free_all+0x50>)
  416344:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416348:	7991      	ldrb	r1, [r2, #6]
  41634a:	f36f 0100 	bfc	r1, #0, #1
  41634e:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416350:	3301      	adds	r3, #1
  416352:	b2db      	uxtb	r3, r3
  416354:	2b01      	cmp	r3, #1
  416356:	d9f4      	bls.n	416342 <_lv_mem_buf_free_all+0x6>
  416358:	2400      	movs	r4, #0
  41635a:	e001      	b.n	416360 <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41635c:	3401      	adds	r4, #1
  41635e:	b2e4      	uxtb	r4, r4
  416360:	2c0f      	cmp	r4, #15
  416362:	d812      	bhi.n	41638a <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  416364:	4b0a      	ldr	r3, [pc, #40]	; (416390 <_lv_mem_buf_free_all+0x54>)
  416366:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  41636a:	2800      	cmp	r0, #0
  41636c:	d0f6      	beq.n	41635c <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  41636e:	4b09      	ldr	r3, [pc, #36]	; (416394 <_lv_mem_buf_free_all+0x58>)
  416370:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  416372:	4b07      	ldr	r3, [pc, #28]	; (416390 <_lv_mem_buf_free_all+0x54>)
  416374:	2200      	movs	r2, #0
  416376:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  41637a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  41637e:	7999      	ldrb	r1, [r3, #6]
  416380:	f362 0100 	bfi	r1, r2, #0, #1
  416384:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  416386:	809a      	strh	r2, [r3, #4]
  416388:	e7e8      	b.n	41635c <_lv_mem_buf_free_all+0x20>
}
  41638a:	bd10      	pop	{r4, pc}
  41638c:	20400040 	.word	0x20400040
  416390:	2043a1d8 	.word	0x2043a1d8
  416394:	0041624d 	.word	0x0041624d

00416398 <_lv_memcpy>:
{
  416398:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  41639a:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  41639e:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  4163a2:	429c      	cmp	r4, r3
  4163a4:	d050      	beq.n	416448 <_lv_memcpy+0xb0>
  4163a6:	4603      	mov	r3, r0
  4163a8:	e042      	b.n	416430 <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  4163aa:	780c      	ldrb	r4, [r1, #0]
  4163ac:	701c      	strb	r4, [r3, #0]
  4163ae:	784c      	ldrb	r4, [r1, #1]
  4163b0:	705c      	strb	r4, [r3, #1]
  4163b2:	788c      	ldrb	r4, [r1, #2]
  4163b4:	709c      	strb	r4, [r3, #2]
  4163b6:	78cc      	ldrb	r4, [r1, #3]
  4163b8:	70dc      	strb	r4, [r3, #3]
  4163ba:	790c      	ldrb	r4, [r1, #4]
  4163bc:	711c      	strb	r4, [r3, #4]
  4163be:	794c      	ldrb	r4, [r1, #5]
  4163c0:	715c      	strb	r4, [r3, #5]
  4163c2:	798c      	ldrb	r4, [r1, #6]
  4163c4:	719c      	strb	r4, [r3, #6]
  4163c6:	79cc      	ldrb	r4, [r1, #7]
  4163c8:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  4163ca:	7a0c      	ldrb	r4, [r1, #8]
  4163cc:	721c      	strb	r4, [r3, #8]
  4163ce:	7a4c      	ldrb	r4, [r1, #9]
  4163d0:	725c      	strb	r4, [r3, #9]
  4163d2:	7a8c      	ldrb	r4, [r1, #10]
  4163d4:	729c      	strb	r4, [r3, #10]
  4163d6:	7acc      	ldrb	r4, [r1, #11]
  4163d8:	72dc      	strb	r4, [r3, #11]
  4163da:	7b0c      	ldrb	r4, [r1, #12]
  4163dc:	731c      	strb	r4, [r3, #12]
  4163de:	7b4c      	ldrb	r4, [r1, #13]
  4163e0:	735c      	strb	r4, [r3, #13]
  4163e2:	7b8c      	ldrb	r4, [r1, #14]
  4163e4:	739c      	strb	r4, [r3, #14]
  4163e6:	7bcc      	ldrb	r4, [r1, #15]
  4163e8:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  4163ea:	7c0c      	ldrb	r4, [r1, #16]
  4163ec:	741c      	strb	r4, [r3, #16]
  4163ee:	7c4c      	ldrb	r4, [r1, #17]
  4163f0:	745c      	strb	r4, [r3, #17]
  4163f2:	7c8c      	ldrb	r4, [r1, #18]
  4163f4:	749c      	strb	r4, [r3, #18]
  4163f6:	7ccc      	ldrb	r4, [r1, #19]
  4163f8:	74dc      	strb	r4, [r3, #19]
  4163fa:	7d0c      	ldrb	r4, [r1, #20]
  4163fc:	751c      	strb	r4, [r3, #20]
  4163fe:	7d4c      	ldrb	r4, [r1, #21]
  416400:	755c      	strb	r4, [r3, #21]
  416402:	7d8c      	ldrb	r4, [r1, #22]
  416404:	759c      	strb	r4, [r3, #22]
  416406:	7dcc      	ldrb	r4, [r1, #23]
  416408:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  41640a:	7e0c      	ldrb	r4, [r1, #24]
  41640c:	761c      	strb	r4, [r3, #24]
  41640e:	7e4c      	ldrb	r4, [r1, #25]
  416410:	765c      	strb	r4, [r3, #25]
  416412:	7e8c      	ldrb	r4, [r1, #26]
  416414:	769c      	strb	r4, [r3, #26]
  416416:	7ecc      	ldrb	r4, [r1, #27]
  416418:	76dc      	strb	r4, [r3, #27]
  41641a:	7f0c      	ldrb	r4, [r1, #28]
  41641c:	771c      	strb	r4, [r3, #28]
  41641e:	7f4c      	ldrb	r4, [r1, #29]
  416420:	775c      	strb	r4, [r3, #29]
  416422:	7f8c      	ldrb	r4, [r1, #30]
  416424:	779c      	strb	r4, [r3, #30]
  416426:	7fcc      	ldrb	r4, [r1, #31]
  416428:	77dc      	strb	r4, [r3, #31]
  41642a:	3320      	adds	r3, #32
  41642c:	3120      	adds	r1, #32
            len -= 32;
  41642e:	3a20      	subs	r2, #32
        while(len > 32) {
  416430:	2a20      	cmp	r2, #32
  416432:	d8ba      	bhi.n	4163aa <_lv_memcpy+0x12>
  416434:	e004      	b.n	416440 <_lv_memcpy+0xa8>
            COPY8
  416436:	f811 4b01 	ldrb.w	r4, [r1], #1
  41643a:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  41643e:	3a01      	subs	r2, #1
        while(len) {
  416440:	2a00      	cmp	r2, #0
  416442:	d1f8      	bne.n	416436 <_lv_memcpy+0x9e>
}
  416444:	bc30      	pop	{r4, r5}
  416446:	4770      	bx	lr
    if(d_align) {
  416448:	b174      	cbz	r4, 416468 <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  41644a:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  41644e:	4603      	mov	r3, r0
        while(d_align && len) {
  416450:	e005      	b.n	41645e <_lv_memcpy+0xc6>
            COPY8;
  416452:	f811 5b01 	ldrb.w	r5, [r1], #1
  416456:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  41645a:	3c01      	subs	r4, #1
            len--;
  41645c:	3a01      	subs	r2, #1
        while(d_align && len) {
  41645e:	2c00      	cmp	r4, #0
  416460:	bf18      	it	ne
  416462:	2a00      	cmpne	r2, #0
  416464:	d1f5      	bne.n	416452 <_lv_memcpy+0xba>
  416466:	e014      	b.n	416492 <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  416468:	4603      	mov	r3, r0
  41646a:	e012      	b.n	416492 <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  41646c:	680c      	ldr	r4, [r1, #0]
  41646e:	601c      	str	r4, [r3, #0]
  416470:	684c      	ldr	r4, [r1, #4]
  416472:	605c      	str	r4, [r3, #4]
  416474:	688c      	ldr	r4, [r1, #8]
  416476:	609c      	str	r4, [r3, #8]
  416478:	68cc      	ldr	r4, [r1, #12]
  41647a:	60dc      	str	r4, [r3, #12]
  41647c:	690c      	ldr	r4, [r1, #16]
  41647e:	611c      	str	r4, [r3, #16]
  416480:	694c      	ldr	r4, [r1, #20]
  416482:	615c      	str	r4, [r3, #20]
  416484:	698c      	ldr	r4, [r1, #24]
  416486:	619c      	str	r4, [r3, #24]
  416488:	69cc      	ldr	r4, [r1, #28]
  41648a:	61dc      	str	r4, [r3, #28]
  41648c:	3320      	adds	r3, #32
  41648e:	3120      	adds	r1, #32
        len -= 32;
  416490:	3a20      	subs	r2, #32
    while(len > 32) {
  416492:	2a20      	cmp	r2, #32
  416494:	d8ea      	bhi.n	41646c <_lv_memcpy+0xd4>
  416496:	e004      	b.n	4164a2 <_lv_memcpy+0x10a>
        COPY32;
  416498:	f851 4b04 	ldr.w	r4, [r1], #4
  41649c:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  4164a0:	3a04      	subs	r2, #4
    while(len > 4) {
  4164a2:	2a04      	cmp	r2, #4
  4164a4:	d8f8      	bhi.n	416498 <_lv_memcpy+0x100>
  4164a6:	e004      	b.n	4164b2 <_lv_memcpy+0x11a>
        COPY8
  4164a8:	f811 4b01 	ldrb.w	r4, [r1], #1
  4164ac:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  4164b0:	3a01      	subs	r2, #1
    while(len) {
  4164b2:	2a00      	cmp	r2, #0
  4164b4:	d1f8      	bne.n	4164a8 <_lv_memcpy+0x110>
  4164b6:	e7c5      	b.n	416444 <_lv_memcpy+0xac>

004164b8 <lv_mem_realloc>:
{
  4164b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  4164ba:	3103      	adds	r1, #3
  4164bc:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  4164c0:	4605      	mov	r5, r0
  4164c2:	b128      	cbz	r0, 4164d0 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  4164c4:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  4164c8:	f013 0f01 	tst.w	r3, #1
  4164cc:	d100      	bne.n	4164d0 <lv_mem_realloc+0x18>
            data_p = NULL;
  4164ce:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  4164d0:	4628      	mov	r0, r5
  4164d2:	4b12      	ldr	r3, [pc, #72]	; (41651c <lv_mem_realloc+0x64>)
  4164d4:	4798      	blx	r3
  4164d6:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  4164d8:	4284      	cmp	r4, r0
  4164da:	d01d      	beq.n	416518 <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  4164dc:	d30e      	bcc.n	4164fc <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  4164de:	4620      	mov	r0, r4
  4164e0:	4b0f      	ldr	r3, [pc, #60]	; (416520 <lv_mem_realloc+0x68>)
  4164e2:	4798      	blx	r3
    if(new_p == NULL) {
  4164e4:	4607      	mov	r7, r0
  4164e6:	b138      	cbz	r0, 4164f8 <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  4164e8:	b135      	cbz	r5, 4164f8 <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  4164ea:	2e00      	cmp	r6, #0
  4164ec:	bf18      	it	ne
  4164ee:	2c00      	cmpne	r4, #0
  4164f0:	d10a      	bne.n	416508 <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  4164f2:	4628      	mov	r0, r5
  4164f4:	4b0b      	ldr	r3, [pc, #44]	; (416524 <lv_mem_realloc+0x6c>)
  4164f6:	4798      	blx	r3
}
  4164f8:	4638      	mov	r0, r7
  4164fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  4164fc:	4621      	mov	r1, r4
  4164fe:	1f28      	subs	r0, r5, #4
  416500:	4b09      	ldr	r3, [pc, #36]	; (416528 <lv_mem_realloc+0x70>)
  416502:	4798      	blx	r3
        return &e->first_data;
  416504:	462f      	mov	r7, r5
  416506:	e7f7      	b.n	4164f8 <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  416508:	4622      	mov	r2, r4
  41650a:	42b4      	cmp	r4, r6
  41650c:	bf28      	it	cs
  41650e:	4632      	movcs	r2, r6
  416510:	4629      	mov	r1, r5
  416512:	4b06      	ldr	r3, [pc, #24]	; (41652c <lv_mem_realloc+0x74>)
  416514:	4798      	blx	r3
  416516:	e7ec      	b.n	4164f2 <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  416518:	462f      	mov	r7, r5
  41651a:	e7ed      	b.n	4164f8 <lv_mem_realloc+0x40>
  41651c:	004162c1 	.word	0x004162c1
  416520:	00416189 	.word	0x00416189
  416524:	0041624d 	.word	0x0041624d
  416528:	004160ed 	.word	0x004160ed
  41652c:	00416399 	.word	0x00416399

00416530 <_lv_mem_buf_get>:
{
  416530:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  416532:	2800      	cmp	r0, #0
  416534:	f000 8085 	beq.w	416642 <_lv_mem_buf_get+0x112>
  416538:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  41653a:	2810      	cmp	r0, #16
  41653c:	d91d      	bls.n	41657a <_lv_mem_buf_get+0x4a>
  41653e:	f04f 31ff 	mov.w	r1, #4294967295
  416542:	2300      	movs	r3, #0
  416544:	e028      	b.n	416598 <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  416546:	4619      	mov	r1, r3
  416548:	4a3f      	ldr	r2, [pc, #252]	; (416648 <_lv_mem_buf_get+0x118>)
  41654a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  41654e:	7992      	ldrb	r2, [r2, #6]
  416550:	f012 0f01 	tst.w	r2, #1
  416554:	d007      	beq.n	416566 <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416556:	3301      	adds	r3, #1
  416558:	b2db      	uxtb	r3, r3
  41655a:	2b01      	cmp	r3, #1
  41655c:	d9f3      	bls.n	416546 <_lv_mem_buf_get+0x16>
  41655e:	f04f 31ff 	mov.w	r1, #4294967295
  416562:	2300      	movs	r3, #0
  416564:	e018      	b.n	416598 <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  416566:	4a38      	ldr	r2, [pc, #224]	; (416648 <_lv_mem_buf_get+0x118>)
  416568:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  41656c:	7983      	ldrb	r3, [r0, #6]
  41656e:	f043 0301 	orr.w	r3, r3, #1
  416572:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  416574:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  416578:	e034      	b.n	4165e4 <_lv_mem_buf_get+0xb4>
  41657a:	2300      	movs	r3, #0
  41657c:	e7ed      	b.n	41655a <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  41657e:	4a33      	ldr	r2, [pc, #204]	; (41664c <_lv_mem_buf_get+0x11c>)
  416580:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  416584:	798b      	ldrb	r3, [r1, #6]
  416586:	f043 0301 	orr.w	r3, r3, #1
  41658a:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  41658c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  416590:	e028      	b.n	4165e4 <_lv_mem_buf_get+0xb4>
                i_guess = i;
  416592:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416594:	3301      	adds	r3, #1
  416596:	b2db      	uxtb	r3, r3
  416598:	2b0f      	cmp	r3, #15
  41659a:	d818      	bhi.n	4165ce <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  41659c:	4618      	mov	r0, r3
  41659e:	4a2b      	ldr	r2, [pc, #172]	; (41664c <_lv_mem_buf_get+0x11c>)
  4165a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4165a4:	7992      	ldrb	r2, [r2, #6]
  4165a6:	f012 0f01 	tst.w	r2, #1
  4165aa:	d1f3      	bne.n	416594 <_lv_mem_buf_get+0x64>
  4165ac:	4a27      	ldr	r2, [pc, #156]	; (41664c <_lv_mem_buf_get+0x11c>)
  4165ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4165b2:	8892      	ldrh	r2, [r2, #4]
  4165b4:	4294      	cmp	r4, r2
  4165b6:	d8ed      	bhi.n	416594 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  4165b8:	d0e1      	beq.n	41657e <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  4165ba:	2900      	cmp	r1, #0
  4165bc:	dbe9      	blt.n	416592 <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  4165be:	4823      	ldr	r0, [pc, #140]	; (41664c <_lv_mem_buf_get+0x11c>)
  4165c0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  4165c4:	8880      	ldrh	r0, [r0, #4]
  4165c6:	4282      	cmp	r2, r0
  4165c8:	d2e4      	bcs.n	416594 <_lv_mem_buf_get+0x64>
                i_guess = i;
  4165ca:	b259      	sxtb	r1, r3
  4165cc:	e7e2      	b.n	416594 <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  4165ce:	2900      	cmp	r1, #0
  4165d0:	db23      	blt.n	41661a <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  4165d2:	4a1e      	ldr	r2, [pc, #120]	; (41664c <_lv_mem_buf_get+0x11c>)
  4165d4:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  4165d8:	7983      	ldrb	r3, [r0, #6]
  4165da:	f043 0301 	orr.w	r3, r3, #1
  4165de:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  4165e0:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  4165e4:	4618      	mov	r0, r3
  4165e6:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  4165e8:	4621      	mov	r1, r4
  4165ea:	4b18      	ldr	r3, [pc, #96]	; (41664c <_lv_mem_buf_get+0x11c>)
  4165ec:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  4165f0:	4b17      	ldr	r3, [pc, #92]	; (416650 <_lv_mem_buf_get+0x120>)
  4165f2:	4798      	blx	r3
            if(buf == NULL) {
  4165f4:	4603      	mov	r3, r0
  4165f6:	b150      	cbz	r0, 41660e <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  4165f8:	4814      	ldr	r0, [pc, #80]	; (41664c <_lv_mem_buf_get+0x11c>)
  4165fa:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  4165fe:	7991      	ldrb	r1, [r2, #6]
  416600:	f041 0101 	orr.w	r1, r1, #1
  416604:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  416606:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  416608:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  41660c:	e7ea      	b.n	4165e4 <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  41660e:	2200      	movs	r2, #0
  416610:	2300      	movs	r3, #0
  416612:	4810      	ldr	r0, [pc, #64]	; (416654 <_lv_mem_buf_get+0x124>)
  416614:	4910      	ldr	r1, [pc, #64]	; (416658 <_lv_mem_buf_get+0x128>)
  416616:	4788      	blx	r1
  416618:	e7fe      	b.n	416618 <_lv_mem_buf_get+0xe8>
  41661a:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  41661c:	2b0f      	cmp	r3, #15
  41661e:	d80a      	bhi.n	416636 <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  416620:	461d      	mov	r5, r3
  416622:	4a0a      	ldr	r2, [pc, #40]	; (41664c <_lv_mem_buf_get+0x11c>)
  416624:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416628:	7992      	ldrb	r2, [r2, #6]
  41662a:	f012 0f01 	tst.w	r2, #1
  41662e:	d0db      	beq.n	4165e8 <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416630:	3301      	adds	r3, #1
  416632:	b2db      	uxtb	r3, r3
  416634:	e7f2      	b.n	41661c <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  416636:	2200      	movs	r2, #0
  416638:	2300      	movs	r3, #0
  41663a:	4808      	ldr	r0, [pc, #32]	; (41665c <_lv_mem_buf_get+0x12c>)
  41663c:	4906      	ldr	r1, [pc, #24]	; (416658 <_lv_mem_buf_get+0x128>)
  41663e:	4788      	blx	r1
  416640:	e7fe      	b.n	416640 <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  416642:	2300      	movs	r3, #0
  416644:	e7ce      	b.n	4165e4 <_lv_mem_buf_get+0xb4>
  416646:	bf00      	nop
  416648:	20400040 	.word	0x20400040
  41664c:	2043a1d8 	.word	0x2043a1d8
  416650:	004164b9 	.word	0x004164b9
  416654:	0042c320 	.word	0x0042c320
  416658:	00415a8d 	.word	0x00415a8d
  41665c:	0042c374 	.word	0x0042c374

00416660 <_lv_memset>:
    if(d_align) {
  416660:	f010 0303 	ands.w	r3, r0, #3
  416664:	d00a      	beq.n	41667c <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  416666:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  41666a:	e003      	b.n	416674 <_lv_memset+0x14>
            SET8(v);
  41666c:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  416670:	3a01      	subs	r2, #1
            d_align--;
  416672:	3b01      	subs	r3, #1
        while(d_align && len) {
  416674:	2b00      	cmp	r3, #0
  416676:	bf18      	it	ne
  416678:	2a00      	cmpne	r2, #0
  41667a:	d1f7      	bne.n	41666c <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  41667c:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  416680:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  416684:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  416688:	e009      	b.n	41669e <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  41668a:	6003      	str	r3, [r0, #0]
  41668c:	6043      	str	r3, [r0, #4]
  41668e:	6083      	str	r3, [r0, #8]
  416690:	60c3      	str	r3, [r0, #12]
  416692:	6103      	str	r3, [r0, #16]
  416694:	6143      	str	r3, [r0, #20]
  416696:	6183      	str	r3, [r0, #24]
  416698:	61c3      	str	r3, [r0, #28]
  41669a:	3020      	adds	r0, #32
        len -= 32;
  41669c:	3a20      	subs	r2, #32
    while(len > 32) {
  41669e:	2a20      	cmp	r2, #32
  4166a0:	d8f3      	bhi.n	41668a <_lv_memset+0x2a>
  4166a2:	e002      	b.n	4166aa <_lv_memset+0x4a>
        SET32(v32);
  4166a4:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  4166a8:	3a04      	subs	r2, #4
    while(len > 4) {
  4166aa:	2a04      	cmp	r2, #4
  4166ac:	d8fa      	bhi.n	4166a4 <_lv_memset+0x44>
  4166ae:	e002      	b.n	4166b6 <_lv_memset+0x56>
        SET8(v);
  4166b0:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  4166b4:	3a01      	subs	r2, #1
    while(len) {
  4166b6:	2a00      	cmp	r2, #0
  4166b8:	d1fa      	bne.n	4166b0 <_lv_memset+0x50>
}
  4166ba:	4770      	bx	lr

004166bc <_lv_memset_00>:
    if(d_align) {
  4166bc:	f010 0303 	ands.w	r3, r0, #3
  4166c0:	d017      	beq.n	4166f2 <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  4166c2:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  4166c6:	e004      	b.n	4166d2 <_lv_memset_00+0x16>
            SET8(0);
  4166c8:	2200      	movs	r2, #0
  4166ca:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  4166ce:	3901      	subs	r1, #1
            d_align--;
  4166d0:	3b01      	subs	r3, #1
        while(d_align && len) {
  4166d2:	2b00      	cmp	r3, #0
  4166d4:	bf18      	it	ne
  4166d6:	2900      	cmpne	r1, #0
  4166d8:	d1f6      	bne.n	4166c8 <_lv_memset_00+0xc>
  4166da:	e00a      	b.n	4166f2 <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  4166dc:	2300      	movs	r3, #0
  4166de:	6003      	str	r3, [r0, #0]
  4166e0:	6043      	str	r3, [r0, #4]
  4166e2:	6083      	str	r3, [r0, #8]
  4166e4:	60c3      	str	r3, [r0, #12]
  4166e6:	6103      	str	r3, [r0, #16]
  4166e8:	6143      	str	r3, [r0, #20]
  4166ea:	6183      	str	r3, [r0, #24]
  4166ec:	61c3      	str	r3, [r0, #28]
  4166ee:	3020      	adds	r0, #32
        len -= 32;
  4166f0:	3920      	subs	r1, #32
    while(len > 32) {
  4166f2:	2920      	cmp	r1, #32
  4166f4:	d8f2      	bhi.n	4166dc <_lv_memset_00+0x20>
  4166f6:	e003      	b.n	416700 <_lv_memset_00+0x44>
        SET32(0);
  4166f8:	2300      	movs	r3, #0
  4166fa:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  4166fe:	3904      	subs	r1, #4
    while(len > 4) {
  416700:	2904      	cmp	r1, #4
  416702:	d8f9      	bhi.n	4166f8 <_lv_memset_00+0x3c>
  416704:	e003      	b.n	41670e <_lv_memset_00+0x52>
        SET8(0);
  416706:	2300      	movs	r3, #0
  416708:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  41670c:	3901      	subs	r1, #1
    while(len) {
  41670e:	2900      	cmp	r1, #0
  416710:	d1f9      	bne.n	416706 <_lv_memset_00+0x4a>
}
  416712:	4770      	bx	lr

00416714 <_lv_memset_ff>:
    if(d_align) {
  416714:	f010 0303 	ands.w	r3, r0, #3
  416718:	d018      	beq.n	41674c <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  41671a:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  41671e:	e004      	b.n	41672a <_lv_memset_ff+0x16>
            SET8(0xFF);
  416720:	22ff      	movs	r2, #255	; 0xff
  416722:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  416726:	3901      	subs	r1, #1
            d_align--;
  416728:	3b01      	subs	r3, #1
        while(d_align && len) {
  41672a:	2b00      	cmp	r3, #0
  41672c:	bf18      	it	ne
  41672e:	2900      	cmpne	r1, #0
  416730:	d1f6      	bne.n	416720 <_lv_memset_ff+0xc>
  416732:	e00b      	b.n	41674c <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  416734:	f04f 33ff 	mov.w	r3, #4294967295
  416738:	6003      	str	r3, [r0, #0]
  41673a:	6043      	str	r3, [r0, #4]
  41673c:	6083      	str	r3, [r0, #8]
  41673e:	60c3      	str	r3, [r0, #12]
  416740:	6103      	str	r3, [r0, #16]
  416742:	6143      	str	r3, [r0, #20]
  416744:	6183      	str	r3, [r0, #24]
  416746:	61c3      	str	r3, [r0, #28]
  416748:	3020      	adds	r0, #32
        len -= 32;
  41674a:	3920      	subs	r1, #32
    while(len > 32) {
  41674c:	2920      	cmp	r1, #32
  41674e:	d8f1      	bhi.n	416734 <_lv_memset_ff+0x20>
  416750:	e004      	b.n	41675c <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  416752:	f04f 33ff 	mov.w	r3, #4294967295
  416756:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  41675a:	3904      	subs	r1, #4
    while(len > 4) {
  41675c:	2904      	cmp	r1, #4
  41675e:	d8f8      	bhi.n	416752 <_lv_memset_ff+0x3e>
  416760:	e003      	b.n	41676a <_lv_memset_ff+0x56>
        SET8(0xFF);
  416762:	23ff      	movs	r3, #255	; 0xff
  416764:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416768:	3901      	subs	r1, #1
    while(len) {
  41676a:	2900      	cmp	r1, #0
  41676c:	d1f9      	bne.n	416762 <_lv_memset_ff+0x4e>
}
  41676e:	4770      	bx	lr

00416770 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
  416770:	429a      	cmp	r2, r3
  416772:	d200      	bcs.n	416776 <_out_buffer+0x6>
        ((char *)buffer)[idx] = character;
  416774:	5488      	strb	r0, [r1, r2]
  416776:	4770      	bx	lr

00416778 <_out_null>:
    }
}

// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
  416778:	4770      	bx	lr

0041677a <_atoi>:
}

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char ** str)
{
    unsigned int i = 0U;
  41677a:	2300      	movs	r3, #0
    while(_is_digit(**str)) {
  41677c:	e007      	b.n	41678e <_atoi+0x14>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
  41677e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  416782:	005a      	lsls	r2, r3, #1
  416784:	1c4b      	adds	r3, r1, #1
  416786:	6003      	str	r3, [r0, #0]
  416788:	780b      	ldrb	r3, [r1, #0]
  41678a:	4413      	add	r3, r2
  41678c:	3b30      	subs	r3, #48	; 0x30
    while(_is_digit(**str)) {
  41678e:	6801      	ldr	r1, [r0, #0]
  416790:	780a      	ldrb	r2, [r1, #0]
    return (ch >= '0') && (ch <= '9');
  416792:	3a30      	subs	r2, #48	; 0x30
  416794:	b2d2      	uxtb	r2, r2
    while(_is_digit(**str)) {
  416796:	2a09      	cmp	r2, #9
  416798:	d9f1      	bls.n	41677e <_atoi+0x4>
    }
    return i;
}
  41679a:	4618      	mov	r0, r3
  41679c:	4770      	bx	lr

0041679e <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char * buffer, size_t idx, size_t maxlen, const char * buf, size_t len,
                       unsigned int width, unsigned int flags)
{
  41679e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4167a2:	b083      	sub	sp, #12
  4167a4:	4605      	mov	r5, r0
  4167a6:	9101      	str	r1, [sp, #4]
  4167a8:	4693      	mov	fp, r2
  4167aa:	461e      	mov	r6, r3
  4167ac:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  4167b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4167b2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    const size_t start_idx = idx;

    // pad spaces up to given width
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  4167b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4167b8:	f013 0f03 	tst.w	r3, #3
  4167bc:	d114      	bne.n	4167e8 <_out_rev+0x4a>
  4167be:	4627      	mov	r7, r4
  4167c0:	e007      	b.n	4167d2 <_out_rev+0x34>
        size_t i;
        for(i = len; i < width; i++) {
            out(' ', buffer, idx++, maxlen);
  4167c2:	f102 0a01 	add.w	sl, r2, #1
  4167c6:	4633      	mov	r3, r6
  4167c8:	9901      	ldr	r1, [sp, #4]
  4167ca:	2020      	movs	r0, #32
  4167cc:	47a8      	blx	r5
        for(i = len; i < width; i++) {
  4167ce:	3701      	adds	r7, #1
            out(' ', buffer, idx++, maxlen);
  4167d0:	4652      	mov	r2, sl
        for(i = len; i < width; i++) {
  4167d2:	4547      	cmp	r7, r8
  4167d4:	d3f5      	bcc.n	4167c2 <_out_rev+0x24>
  4167d6:	e007      	b.n	4167e8 <_out_rev+0x4a>
        }
    }

    // reverse string
    while(len) {
        out(buf[--len], buffer, idx++, maxlen);
  4167d8:	3c01      	subs	r4, #1
  4167da:	1c57      	adds	r7, r2, #1
  4167dc:	4633      	mov	r3, r6
  4167de:	9901      	ldr	r1, [sp, #4]
  4167e0:	f819 0004 	ldrb.w	r0, [r9, r4]
  4167e4:	47a8      	blx	r5
  4167e6:	463a      	mov	r2, r7
    while(len) {
  4167e8:	2c00      	cmp	r4, #0
  4167ea:	d1f5      	bne.n	4167d8 <_out_rev+0x3a>
    }

    // append pad spaces up to given width
    if(flags & FLAGS_LEFT) {
  4167ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4167ee:	f013 0f02 	tst.w	r3, #2
  4167f2:	d00b      	beq.n	41680c <_out_rev+0x6e>
  4167f4:	9f01      	ldr	r7, [sp, #4]
  4167f6:	e005      	b.n	416804 <_out_rev+0x66>
        while(idx - start_idx < width) {
            out(' ', buffer, idx++, maxlen);
  4167f8:	1c54      	adds	r4, r2, #1
  4167fa:	4633      	mov	r3, r6
  4167fc:	4639      	mov	r1, r7
  4167fe:	2020      	movs	r0, #32
  416800:	47a8      	blx	r5
  416802:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
  416804:	eba2 030b 	sub.w	r3, r2, fp
  416808:	4598      	cmp	r8, r3
  41680a:	d8f5      	bhi.n	4167f8 <_out_rev+0x5a>
        }
    }

    return idx;
}
  41680c:	4610      	mov	r0, r2
  41680e:	b003      	add	sp, #12
  416810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00416814 <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416818:	b085      	sub	sp, #20
  41681a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  41681c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  41681e:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
  416822:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  416826:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  41682a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
  41682e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
  416830:	f016 0f02 	tst.w	r6, #2
  416834:	d124      	bne.n	416880 <_ntoa_format+0x6c>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  416836:	f1be 0f00 	cmp.w	lr, #0
  41683a:	d00e      	beq.n	41685a <_ntoa_format+0x46>
  41683c:	f016 0f01 	tst.w	r6, #1
  416840:	d00b      	beq.n	41685a <_ntoa_format+0x46>
  416842:	f1b9 0f00 	cmp.w	r9, #0
  416846:	d102      	bne.n	41684e <_ntoa_format+0x3a>
  416848:	f016 0f0c 	tst.w	r6, #12
  41684c:	d005      	beq.n	41685a <_ntoa_format+0x46>
            width--;
  41684e:	f10e 3eff 	add.w	lr, lr, #4294967295
  416852:	e002      	b.n	41685a <_ntoa_format+0x46>
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
  416854:	2730      	movs	r7, #48	; 0x30
  416856:	552f      	strb	r7, [r5, r4]
  416858:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41685a:	2c1f      	cmp	r4, #31
  41685c:	bf98      	it	ls
  41685e:	4564      	cmpls	r4, ip
  416860:	d3f8      	bcc.n	416854 <_ntoa_format+0x40>
  416862:	e002      	b.n	41686a <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
  416864:	2730      	movs	r7, #48	; 0x30
  416866:	552f      	strb	r7, [r5, r4]
  416868:	3401      	adds	r4, #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  41686a:	f016 0f01 	tst.w	r6, #1
  41686e:	d007      	beq.n	416880 <_ntoa_format+0x6c>
  416870:	2c1f      	cmp	r4, #31
  416872:	bf8c      	ite	hi
  416874:	2700      	movhi	r7, #0
  416876:	2701      	movls	r7, #1
  416878:	4574      	cmp	r4, lr
  41687a:	d201      	bcs.n	416880 <_ntoa_format+0x6c>
  41687c:	2f00      	cmp	r7, #0
  41687e:	d1f1      	bne.n	416864 <_ntoa_format+0x50>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
  416880:	f016 0f10 	tst.w	r6, #16
  416884:	d026      	beq.n	4168d4 <_ntoa_format+0xc0>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  416886:	f416 6f80 	tst.w	r6, #1024	; 0x400
  41688a:	d110      	bne.n	4168ae <_ntoa_format+0x9a>
  41688c:	b17c      	cbz	r4, 4168ae <_ntoa_format+0x9a>
  41688e:	4574      	cmp	r4, lr
  416890:	bf18      	it	ne
  416892:	4564      	cmpne	r4, ip
  416894:	d10b      	bne.n	4168ae <_ntoa_format+0x9a>
            len--;
            if(len && (base == 16U)) {
  416896:	f104 3cff 	add.w	ip, r4, #4294967295
  41689a:	f114 37ff 	adds.w	r7, r4, #4294967295
  41689e:	bf18      	it	ne
  4168a0:	2701      	movne	r7, #1
  4168a2:	f1b8 0f10 	cmp.w	r8, #16
  4168a6:	bf18      	it	ne
  4168a8:	2700      	movne	r7, #0
  4168aa:	b317      	cbz	r7, 4168f2 <_ntoa_format+0xde>
                len--;
  4168ac:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4168ae:	f1b8 0f10 	cmp.w	r8, #16
  4168b2:	d020      	beq.n	4168f6 <_ntoa_format+0xe2>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4168b4:	f1b8 0f10 	cmp.w	r8, #16
  4168b8:	d026      	beq.n	416908 <_ntoa_format+0xf4>
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4168ba:	2c1f      	cmp	r4, #31
  4168bc:	bf98      	it	ls
  4168be:	f1b8 0f02 	cmpls.w	r8, #2
  4168c2:	d102      	bne.n	4168ca <_ntoa_format+0xb6>
            buf[len++] = 'b';
  4168c4:	2762      	movs	r7, #98	; 0x62
  4168c6:	552f      	strb	r7, [r5, r4]
  4168c8:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
  4168ca:	2c1f      	cmp	r4, #31
  4168cc:	d802      	bhi.n	4168d4 <_ntoa_format+0xc0>
            buf[len++] = '0';
  4168ce:	2730      	movs	r7, #48	; 0x30
  4168d0:	552f      	strb	r7, [r5, r4]
  4168d2:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
  4168d4:	2c1f      	cmp	r4, #31
  4168d6:	d823      	bhi.n	416920 <_ntoa_format+0x10c>
        if(negative) {
  4168d8:	f1b9 0f00 	cmp.w	r9, #0
  4168dc:	d11d      	bne.n	41691a <_ntoa_format+0x106>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
  4168de:	f016 0f04 	tst.w	r6, #4
  4168e2:	d127      	bne.n	416934 <_ntoa_format+0x120>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
  4168e4:	f016 0f08 	tst.w	r6, #8
  4168e8:	d01a      	beq.n	416920 <_ntoa_format+0x10c>
            buf[len++] = ' ';
  4168ea:	2720      	movs	r7, #32
  4168ec:	552f      	strb	r7, [r5, r4]
  4168ee:	3401      	adds	r4, #1
  4168f0:	e016      	b.n	416920 <_ntoa_format+0x10c>
            len--;
  4168f2:	4664      	mov	r4, ip
  4168f4:	e7db      	b.n	4168ae <_ntoa_format+0x9a>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  4168f6:	f016 0f20 	tst.w	r6, #32
  4168fa:	d1db      	bne.n	4168b4 <_ntoa_format+0xa0>
  4168fc:	2c1f      	cmp	r4, #31
  4168fe:	d8d9      	bhi.n	4168b4 <_ntoa_format+0xa0>
            buf[len++] = 'x';
  416900:	2778      	movs	r7, #120	; 0x78
  416902:	552f      	strb	r7, [r5, r4]
  416904:	3401      	adds	r4, #1
  416906:	e7e0      	b.n	4168ca <_ntoa_format+0xb6>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  416908:	f016 0f20 	tst.w	r6, #32
  41690c:	d0d5      	beq.n	4168ba <_ntoa_format+0xa6>
  41690e:	2c1f      	cmp	r4, #31
  416910:	d8d3      	bhi.n	4168ba <_ntoa_format+0xa6>
            buf[len++] = 'X';
  416912:	2758      	movs	r7, #88	; 0x58
  416914:	552f      	strb	r7, [r5, r4]
  416916:	3401      	adds	r4, #1
  416918:	e7d7      	b.n	4168ca <_ntoa_format+0xb6>
            buf[len++] = '-';
  41691a:	272d      	movs	r7, #45	; 0x2d
  41691c:	552f      	strb	r7, [r5, r4]
  41691e:	3401      	adds	r4, #1
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  416920:	9603      	str	r6, [sp, #12]
  416922:	f8cd e008 	str.w	lr, [sp, #8]
  416926:	9401      	str	r4, [sp, #4]
  416928:	9500      	str	r5, [sp, #0]
  41692a:	4c04      	ldr	r4, [pc, #16]	; (41693c <_ntoa_format+0x128>)
  41692c:	47a0      	blx	r4
}
  41692e:	b005      	add	sp, #20
  416930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            buf[len++] = '+';  // ignore the space if the '+' exists
  416934:	272b      	movs	r7, #43	; 0x2b
  416936:	552f      	strb	r7, [r5, r4]
  416938:	3401      	adds	r4, #1
  41693a:	e7f1      	b.n	416920 <_ntoa_format+0x10c>
  41693c:	0041679f 	.word	0x0041679f

00416940 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  416940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416944:	b090      	sub	sp, #64	; 0x40
  416946:	9d16      	ldr	r5, [sp, #88]	; 0x58
  416948:	9f18      	ldr	r7, [sp, #96]	; 0x60
  41694a:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  41694e:	b90d      	cbnz	r5, 416954 <_ntoa_long+0x14>
        flags &= ~FLAGS_HASH;
  416950:	f02e 0e10 	bic.w	lr, lr, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  416954:	f41e 6680 	ands.w	r6, lr, #1024	; 0x400
  416958:	d01b      	beq.n	416992 <_ntoa_long+0x52>
  41695a:	b34d      	cbz	r5, 4169b0 <_ntoa_long+0x70>
  41695c:	2600      	movs	r6, #0
  41695e:	e018      	b.n	416992 <_ntoa_long+0x52>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416960:	f01e 0f20 	tst.w	lr, #32
  416964:	d021      	beq.n	4169aa <_ntoa_long+0x6a>
  416966:	f04f 0841 	mov.w	r8, #65	; 0x41
  41696a:	4444      	add	r4, r8
  41696c:	b2e4      	uxtb	r4, r4
  41696e:	3c0a      	subs	r4, #10
  416970:	b2e4      	uxtb	r4, r4
  416972:	f10d 0840 	add.w	r8, sp, #64	; 0x40
  416976:	4446      	add	r6, r8
  416978:	f806 4c20 	strb.w	r4, [r6, #-32]
            value /= base;
  41697c:	fbb5 f5f7 	udiv	r5, r5, r7
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416980:	1c2c      	adds	r4, r5, #0
  416982:	bf18      	it	ne
  416984:	2401      	movne	r4, #1
  416986:	f1bc 0f1f 	cmp.w	ip, #31
  41698a:	bf88      	it	hi
  41698c:	2400      	movhi	r4, #0
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  41698e:	4666      	mov	r6, ip
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416990:	b184      	cbz	r4, 4169b4 <_ntoa_long+0x74>
            const char digit = (char)(value % base);
  416992:	fbb5 f4f7 	udiv	r4, r5, r7
  416996:	fb07 5414 	mls	r4, r7, r4, r5
  41699a:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  41699c:	f106 0c01 	add.w	ip, r6, #1
  4169a0:	2c09      	cmp	r4, #9
  4169a2:	d8dd      	bhi.n	416960 <_ntoa_long+0x20>
  4169a4:	3430      	adds	r4, #48	; 0x30
  4169a6:	b2e4      	uxtb	r4, r4
  4169a8:	e7e3      	b.n	416972 <_ntoa_long+0x32>
  4169aa:	f04f 0861 	mov.w	r8, #97	; 0x61
  4169ae:	e7dc      	b.n	41696a <_ntoa_long+0x2a>
    size_t len = 0U;
  4169b0:	f04f 0c00 	mov.w	ip, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  4169b4:	f8cd e018 	str.w	lr, [sp, #24]
  4169b8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  4169ba:	9405      	str	r4, [sp, #20]
  4169bc:	9c19      	ldr	r4, [sp, #100]	; 0x64
  4169be:	9404      	str	r4, [sp, #16]
  4169c0:	9703      	str	r7, [sp, #12]
  4169c2:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
  4169c6:	9402      	str	r4, [sp, #8]
  4169c8:	f8cd c004 	str.w	ip, [sp, #4]
  4169cc:	ac08      	add	r4, sp, #32
  4169ce:	9400      	str	r4, [sp, #0]
  4169d0:	4c02      	ldr	r4, [pc, #8]	; (4169dc <_ntoa_long+0x9c>)
  4169d2:	47a0      	blx	r4
}
  4169d4:	b010      	add	sp, #64	; 0x40
  4169d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4169da:	bf00      	nop
  4169dc:	00416815 	.word	0x00416815

004169e0 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
  4169e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4169e4:	b095      	sub	sp, #84	; 0x54
  4169e6:	9009      	str	r0, [sp, #36]	; 0x24
  4169e8:	910a      	str	r1, [sp, #40]	; 0x28
  4169ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4169ec:	469b      	mov	fp, r3
  4169ee:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
  4169f2:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
  4169f6:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
  4169fa:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
  4169fe:	ea54 0305 	orrs.w	r3, r4, r5
  416a02:	d101      	bne.n	416a08 <_ntoa_long_long+0x28>
        flags &= ~FLAGS_HASH;
  416a04:	f02a 0a10 	bic.w	sl, sl, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
  416a08:	f41a 6680 	ands.w	r6, sl, #1024	; 0x400
  416a0c:	d024      	beq.n	416a58 <_ntoa_long_long+0x78>
  416a0e:	ea54 0305 	orrs.w	r3, r4, r5
  416a12:	d031      	beq.n	416a78 <_ntoa_long_long+0x98>
  416a14:	2600      	movs	r6, #0
  416a16:	e01f      	b.n	416a58 <_ntoa_long_long+0x78>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416a18:	f01a 0f20 	tst.w	sl, #32
  416a1c:	d02a      	beq.n	416a74 <_ntoa_long_long+0x94>
  416a1e:	2241      	movs	r2, #65	; 0x41
  416a20:	441a      	add	r2, r3
  416a22:	b2d2      	uxtb	r2, r2
  416a24:	3a0a      	subs	r2, #10
  416a26:	b2d2      	uxtb	r2, r2
  416a28:	ab14      	add	r3, sp, #80	; 0x50
  416a2a:	441e      	add	r6, r3
  416a2c:	f806 2c20 	strb.w	r2, [r6, #-32]
            value /= base;
  416a30:	4642      	mov	r2, r8
  416a32:	464b      	mov	r3, r9
  416a34:	4620      	mov	r0, r4
  416a36:	4629      	mov	r1, r5
  416a38:	4c1b      	ldr	r4, [pc, #108]	; (416aa8 <_ntoa_long_long+0xc8>)
  416a3a:	47a0      	blx	r4
  416a3c:	4604      	mov	r4, r0
  416a3e:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416a40:	ea50 0301 	orrs.w	r3, r0, r1
  416a44:	bf14      	ite	ne
  416a46:	2301      	movne	r3, #1
  416a48:	2300      	moveq	r3, #0
  416a4a:	2f1f      	cmp	r7, #31
  416a4c:	bf8c      	ite	hi
  416a4e:	2300      	movhi	r3, #0
  416a50:	f003 0301 	andls.w	r3, r3, #1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416a54:	463e      	mov	r6, r7
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
  416a56:	b183      	cbz	r3, 416a7a <_ntoa_long_long+0x9a>
            const char digit = (char)(value % base);
  416a58:	4642      	mov	r2, r8
  416a5a:	464b      	mov	r3, r9
  416a5c:	4620      	mov	r0, r4
  416a5e:	4629      	mov	r1, r5
  416a60:	4f11      	ldr	r7, [pc, #68]	; (416aa8 <_ntoa_long_long+0xc8>)
  416a62:	47b8      	blx	r7
  416a64:	b2d3      	uxtb	r3, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  416a66:	1c77      	adds	r7, r6, #1
  416a68:	2b09      	cmp	r3, #9
  416a6a:	d8d5      	bhi.n	416a18 <_ntoa_long_long+0x38>
  416a6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
  416a70:	b2d2      	uxtb	r2, r2
  416a72:	e7d9      	b.n	416a28 <_ntoa_long_long+0x48>
  416a74:	2261      	movs	r2, #97	; 0x61
  416a76:	e7d3      	b.n	416a20 <_ntoa_long_long+0x40>
    size_t len = 0U;
  416a78:	2700      	movs	r7, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  416a7a:	f8cd a018 	str.w	sl, [sp, #24]
  416a7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  416a80:	9305      	str	r3, [sp, #20]
  416a82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  416a84:	9304      	str	r3, [sp, #16]
  416a86:	f8cd 800c 	str.w	r8, [sp, #12]
  416a8a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  416a8e:	9302      	str	r3, [sp, #8]
  416a90:	9701      	str	r7, [sp, #4]
  416a92:	ab0c      	add	r3, sp, #48	; 0x30
  416a94:	9300      	str	r3, [sp, #0]
  416a96:	465b      	mov	r3, fp
  416a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  416a9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  416a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
  416a9e:	4c03      	ldr	r4, [pc, #12]	; (416aac <_ntoa_long_long+0xcc>)
  416aa0:	47a0      	blx	r4
}
  416aa2:	b015      	add	sp, #84	; 0x54
  416aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416aa8:	00422a75 	.word	0x00422a75
  416aac:	00416815 	.word	0x00416815

00416ab0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
  416ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416ab4:	b08f      	sub	sp, #60	; 0x3c
  416ab6:	4606      	mov	r6, r0
  416ab8:	920a      	str	r2, [sp, #40]	; 0x28
  416aba:	930d      	str	r3, [sp, #52]	; 0x34
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
  416abc:	910b      	str	r1, [sp, #44]	; 0x2c
  416abe:	b189      	cbz	r1, 416ae4 <_vsnprintf+0x34>
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
  416ac0:	2500      	movs	r5, #0
    while(*format) {
  416ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416ac4:	7818      	ldrb	r0, [r3, #0]
  416ac6:	2800      	cmp	r0, #0
  416ac8:	f000 82e5 	beq.w	417096 <_vsnprintf+0x5e6>
        if(*format != '%') {
  416acc:	2825      	cmp	r0, #37	; 0x25
  416ace:	d00b      	beq.n	416ae8 <_vsnprintf+0x38>
            out(*format, buffer, idx++, maxlen);
  416ad0:	1c6c      	adds	r4, r5, #1
  416ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416ad4:	462a      	mov	r2, r5
  416ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416ad8:	47b0      	blx	r6
            format++;
  416ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416adc:	3301      	adds	r3, #1
  416ade:	930d      	str	r3, [sp, #52]	; 0x34
            out(*format, buffer, idx++, maxlen);
  416ae0:	4625      	mov	r5, r4
            continue;
  416ae2:	e7ee      	b.n	416ac2 <_vsnprintf+0x12>
        out = _out_null;
  416ae4:	4e93      	ldr	r6, [pc, #588]	; (416d34 <_vsnprintf+0x284>)
  416ae6:	e7eb      	b.n	416ac0 <_vsnprintf+0x10>
            format++;
  416ae8:	3301      	adds	r3, #1
  416aea:	930d      	str	r3, [sp, #52]	; 0x34
        flags = 0U;
  416aec:	f04f 0900 	mov.w	r9, #0
  416af0:	e006      	b.n	416b00 <_vsnprintf+0x50>
                    flags |= FLAGS_ZEROPAD;
  416af2:	f049 0901 	orr.w	r9, r9, #1
                    format++;
  416af6:	3201      	adds	r2, #1
  416af8:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416afa:	2401      	movs	r4, #1
        } while(n);
  416afc:	2c00      	cmp	r4, #0
  416afe:	d043      	beq.n	416b88 <_vsnprintf+0xd8>
            switch(*format) {
  416b00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  416b02:	7813      	ldrb	r3, [r2, #0]
  416b04:	3b20      	subs	r3, #32
  416b06:	2b10      	cmp	r3, #16
  416b08:	d83c      	bhi.n	416b84 <_vsnprintf+0xd4>
  416b0a:	a101      	add	r1, pc, #4	; (adr r1, 416b10 <_vsnprintf+0x60>)
  416b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  416b10:	00416b6d 	.word	0x00416b6d
  416b14:	00416b85 	.word	0x00416b85
  416b18:	00416b85 	.word	0x00416b85
  416b1c:	00416b79 	.word	0x00416b79
  416b20:	00416b85 	.word	0x00416b85
  416b24:	00416b85 	.word	0x00416b85
  416b28:	00416b85 	.word	0x00416b85
  416b2c:	00416b85 	.word	0x00416b85
  416b30:	00416b85 	.word	0x00416b85
  416b34:	00416b85 	.word	0x00416b85
  416b38:	00416b85 	.word	0x00416b85
  416b3c:	00416b61 	.word	0x00416b61
  416b40:	00416b85 	.word	0x00416b85
  416b44:	00416b55 	.word	0x00416b55
  416b48:	00416b85 	.word	0x00416b85
  416b4c:	00416b85 	.word	0x00416b85
  416b50:	00416af3 	.word	0x00416af3
                    flags |= FLAGS_LEFT;
  416b54:	f049 0902 	orr.w	r9, r9, #2
                    format++;
  416b58:	3201      	adds	r2, #1
  416b5a:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416b5c:	2401      	movs	r4, #1
                    break;
  416b5e:	e7cd      	b.n	416afc <_vsnprintf+0x4c>
                    flags |= FLAGS_PLUS;
  416b60:	f049 0904 	orr.w	r9, r9, #4
                    format++;
  416b64:	3201      	adds	r2, #1
  416b66:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416b68:	2401      	movs	r4, #1
                    break;
  416b6a:	e7c7      	b.n	416afc <_vsnprintf+0x4c>
                    flags |= FLAGS_SPACE;
  416b6c:	f049 0908 	orr.w	r9, r9, #8
                    format++;
  416b70:	3201      	adds	r2, #1
  416b72:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416b74:	2401      	movs	r4, #1
                    break;
  416b76:	e7c1      	b.n	416afc <_vsnprintf+0x4c>
                    flags |= FLAGS_HASH;
  416b78:	f049 0910 	orr.w	r9, r9, #16
                    format++;
  416b7c:	3201      	adds	r2, #1
  416b7e:	920d      	str	r2, [sp, #52]	; 0x34
                    n = 1U;
  416b80:	2401      	movs	r4, #1
                    break;
  416b82:	e7bb      	b.n	416afc <_vsnprintf+0x4c>
                    n = 0U;
  416b84:	2400      	movs	r4, #0
  416b86:	e7b9      	b.n	416afc <_vsnprintf+0x4c>
        if(_is_digit(*format)) {
  416b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416b8a:	781a      	ldrb	r2, [r3, #0]
    return (ch >= '0') && (ch <= '9');
  416b8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  416b90:	b2db      	uxtb	r3, r3
        if(_is_digit(*format)) {
  416b92:	2b09      	cmp	r3, #9
  416b94:	d917      	bls.n	416bc6 <_vsnprintf+0x116>
        else if(*format == '*') {
  416b96:	2a2a      	cmp	r2, #42	; 0x2a
  416b98:	d01a      	beq.n	416bd0 <_vsnprintf+0x120>
        width = 0U;
  416b9a:	46a0      	mov	r8, r4
        if(*format == '.') {
  416b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416b9e:	781a      	ldrb	r2, [r3, #0]
  416ba0:	2a2e      	cmp	r2, #46	; 0x2e
  416ba2:	d025      	beq.n	416bf0 <_vsnprintf+0x140>
        switch(*format) {
  416ba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  416ba6:	7813      	ldrb	r3, [r2, #0]
  416ba8:	3b68      	subs	r3, #104	; 0x68
  416baa:	2b12      	cmp	r3, #18
  416bac:	d85b      	bhi.n	416c66 <_vsnprintf+0x1b6>
  416bae:	e8df f003 	tbb	[pc, r3]
  416bb2:	5a48      	.short	0x5a48
  416bb4:	5a3a5ab7 	.word	0x5a3a5ab7
  416bb8:	5a5a5a5a 	.word	0x5a5a5a5a
  416bbc:	5a565a5a 	.word	0x5a565a5a
  416bc0:	5a5a5a5a 	.word	0x5a5a5a5a
  416bc4:	bc          	.byte	0xbc
  416bc5:	00          	.byte	0x00
            width = _atoi(&format);
  416bc6:	a80d      	add	r0, sp, #52	; 0x34
  416bc8:	4b5b      	ldr	r3, [pc, #364]	; (416d38 <_vsnprintf+0x288>)
  416bca:	4798      	blx	r3
  416bcc:	4680      	mov	r8, r0
  416bce:	e7e5      	b.n	416b9c <_vsnprintf+0xec>
            const int w = va_arg(va, int);
  416bd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416bd2:	1d1a      	adds	r2, r3, #4
  416bd4:	9218      	str	r2, [sp, #96]	; 0x60
  416bd6:	681b      	ldr	r3, [r3, #0]
            if(w < 0) {
  416bd8:	2b00      	cmp	r3, #0
  416bda:	db04      	blt.n	416be6 <_vsnprintf+0x136>
                width = (unsigned int)w;
  416bdc:	4698      	mov	r8, r3
            format++;
  416bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416be0:	3301      	adds	r3, #1
  416be2:	930d      	str	r3, [sp, #52]	; 0x34
  416be4:	e7da      	b.n	416b9c <_vsnprintf+0xec>
                flags |= FLAGS_LEFT;    // reverse padding
  416be6:	f049 0902 	orr.w	r9, r9, #2
                width = (unsigned int) - w;
  416bea:	f1c3 0800 	rsb	r8, r3, #0
  416bee:	e7f6      	b.n	416bde <_vsnprintf+0x12e>
            flags |= FLAGS_PRECISION;
  416bf0:	f449 6980 	orr.w	r9, r9, #1024	; 0x400
            format++;
  416bf4:	1c5a      	adds	r2, r3, #1
  416bf6:	920d      	str	r2, [sp, #52]	; 0x34
            if(_is_digit(*format)) {
  416bf8:	785a      	ldrb	r2, [r3, #1]
    return (ch >= '0') && (ch <= '9');
  416bfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  416bfe:	b2db      	uxtb	r3, r3
            if(_is_digit(*format)) {
  416c00:	2b09      	cmp	r3, #9
  416c02:	d90b      	bls.n	416c1c <_vsnprintf+0x16c>
            else if(*format == '*') {
  416c04:	2a2a      	cmp	r2, #42	; 0x2a
  416c06:	d1cd      	bne.n	416ba4 <_vsnprintf+0xf4>
                const int prec = (int)va_arg(va, int);
  416c08:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416c0a:	1d1a      	adds	r2, r3, #4
  416c0c:	9218      	str	r2, [sp, #96]	; 0x60
  416c0e:	681c      	ldr	r4, [r3, #0]
                precision = prec > 0 ? (unsigned int)prec : 0U;
  416c10:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
  416c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416c16:	3301      	adds	r3, #1
  416c18:	930d      	str	r3, [sp, #52]	; 0x34
  416c1a:	e7c3      	b.n	416ba4 <_vsnprintf+0xf4>
                precision = _atoi(&format);
  416c1c:	a80d      	add	r0, sp, #52	; 0x34
  416c1e:	4b46      	ldr	r3, [pc, #280]	; (416d38 <_vsnprintf+0x288>)
  416c20:	4798      	blx	r3
  416c22:	4604      	mov	r4, r0
  416c24:	e7be      	b.n	416ba4 <_vsnprintf+0xf4>
                flags |= FLAGS_LONG;
  416c26:	f449 7180 	orr.w	r1, r9, #256	; 0x100
                format++;
  416c2a:	1c53      	adds	r3, r2, #1
  416c2c:	930d      	str	r3, [sp, #52]	; 0x34
                if(*format == 'l') {
  416c2e:	7852      	ldrb	r2, [r2, #1]
  416c30:	2a6c      	cmp	r2, #108	; 0x6c
  416c32:	d001      	beq.n	416c38 <_vsnprintf+0x188>
                flags |= FLAGS_LONG;
  416c34:	4689      	mov	r9, r1
  416c36:	e016      	b.n	416c66 <_vsnprintf+0x1b6>
                    flags |= FLAGS_LONG_LONG;
  416c38:	f449 7940 	orr.w	r9, r9, #768	; 0x300
                    format++;
  416c3c:	3301      	adds	r3, #1
  416c3e:	930d      	str	r3, [sp, #52]	; 0x34
  416c40:	e011      	b.n	416c66 <_vsnprintf+0x1b6>
                flags |= FLAGS_SHORT;
  416c42:	f049 0180 	orr.w	r1, r9, #128	; 0x80
                format++;
  416c46:	1c53      	adds	r3, r2, #1
  416c48:	930d      	str	r3, [sp, #52]	; 0x34
                if(*format == 'h') {
  416c4a:	7852      	ldrb	r2, [r2, #1]
  416c4c:	2a68      	cmp	r2, #104	; 0x68
  416c4e:	d001      	beq.n	416c54 <_vsnprintf+0x1a4>
                flags |= FLAGS_SHORT;
  416c50:	4689      	mov	r9, r1
  416c52:	e008      	b.n	416c66 <_vsnprintf+0x1b6>
                    flags |= FLAGS_CHAR;
  416c54:	f049 09c0 	orr.w	r9, r9, #192	; 0xc0
                    format++;
  416c58:	3301      	adds	r3, #1
  416c5a:	930d      	str	r3, [sp, #52]	; 0x34
  416c5c:	e003      	b.n	416c66 <_vsnprintf+0x1b6>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  416c5e:	f449 7980 	orr.w	r9, r9, #256	; 0x100
                format++;
  416c62:	3201      	adds	r2, #1
  416c64:	920d      	str	r2, [sp, #52]	; 0x34
        switch(*format) {
  416c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416c68:	7818      	ldrb	r0, [r3, #0]
  416c6a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
  416c6e:	2b53      	cmp	r3, #83	; 0x53
  416c70:	f200 8207 	bhi.w	417082 <_vsnprintf+0x5d2>
  416c74:	e8df f013 	tbh	[pc, r3, lsl #1]
  416c78:	020501fa 	.word	0x020501fa
  416c7c:	02050205 	.word	0x02050205
  416c80:	02050205 	.word	0x02050205
  416c84:	02050205 	.word	0x02050205
  416c88:	02050205 	.word	0x02050205
  416c8c:	02050205 	.word	0x02050205
  416c90:	02050205 	.word	0x02050205
  416c94:	02050205 	.word	0x02050205
  416c98:	02050205 	.word	0x02050205
  416c9c:	02050205 	.word	0x02050205
  416ca0:	02050205 	.word	0x02050205
  416ca4:	02050205 	.word	0x02050205
  416ca8:	02050205 	.word	0x02050205
  416cac:	02050205 	.word	0x02050205
  416cb0:	02050205 	.word	0x02050205
  416cb4:	02050205 	.word	0x02050205
  416cb8:	02050205 	.word	0x02050205
  416cbc:	02050205 	.word	0x02050205
  416cc0:	02050205 	.word	0x02050205
  416cc4:	02050205 	.word	0x02050205
  416cc8:	02050205 	.word	0x02050205
  416ccc:	02050205 	.word	0x02050205
  416cd0:	02050205 	.word	0x02050205
  416cd4:	02050205 	.word	0x02050205
  416cd8:	02050205 	.word	0x02050205
  416cdc:	00620205 	.word	0x00620205
  416ce0:	02050205 	.word	0x02050205
  416ce4:	02050205 	.word	0x02050205
  416ce8:	02050205 	.word	0x02050205
  416cec:	02050205 	.word	0x02050205
  416cf0:	00620205 	.word	0x00620205
  416cf4:	00620155 	.word	0x00620155
  416cf8:	02050205 	.word	0x02050205
  416cfc:	02050205 	.word	0x02050205
  416d00:	02050062 	.word	0x02050062
  416d04:	02050205 	.word	0x02050205
  416d08:	02050205 	.word	0x02050205
  416d0c:	01e00062 	.word	0x01e00062
  416d10:	02050205 	.word	0x02050205
  416d14:	02050187 	.word	0x02050187
  416d18:	02050062 	.word	0x02050062
  416d1c:	00620205 	.word	0x00620205
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  416d20:	f449 7900 	orr.w	r9, r9, #512	; 0x200
                format++;
  416d24:	3201      	adds	r2, #1
  416d26:	920d      	str	r2, [sp, #52]	; 0x34
                break;
  416d28:	e79d      	b.n	416c66 <_vsnprintf+0x1b6>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  416d2a:	f449 7980 	orr.w	r9, r9, #256	; 0x100
                format++;
  416d2e:	3201      	adds	r2, #1
  416d30:	920d      	str	r2, [sp, #52]	; 0x34
                break;
  416d32:	e798      	b.n	416c66 <_vsnprintf+0x1b6>
  416d34:	00416779 	.word	0x00416779
  416d38:	0041677b 	.word	0x0041677b
                    if(*format == 'x' || *format == 'X') {
  416d3c:	2858      	cmp	r0, #88	; 0x58
  416d3e:	bf18      	it	ne
  416d40:	2878      	cmpne	r0, #120	; 0x78
  416d42:	d007      	beq.n	416d54 <_vsnprintf+0x2a4>
                    else if(*format == 'o') {
  416d44:	286f      	cmp	r0, #111	; 0x6f
  416d46:	d040      	beq.n	416dca <_vsnprintf+0x31a>
                    else if(*format == 'b') {
  416d48:	2862      	cmp	r0, #98	; 0x62
  416d4a:	d040      	beq.n	416dce <_vsnprintf+0x31e>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
  416d4c:	f029 0910 	bic.w	r9, r9, #16
                        base = 10U;
  416d50:	210a      	movs	r1, #10
  416d52:	e000      	b.n	416d56 <_vsnprintf+0x2a6>
                        base = 16U;
  416d54:	2110      	movs	r1, #16
                    if(*format == 'X') {
  416d56:	2858      	cmp	r0, #88	; 0x58
  416d58:	d03b      	beq.n	416dd2 <_vsnprintf+0x322>
                    if((*format != 'i') && (*format != 'd')) {
  416d5a:	2869      	cmp	r0, #105	; 0x69
  416d5c:	bf18      	it	ne
  416d5e:	2864      	cmpne	r0, #100	; 0x64
  416d60:	d001      	beq.n	416d66 <_vsnprintf+0x2b6>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  416d62:	f029 090c 	bic.w	r9, r9, #12
                    if(flags & FLAGS_PRECISION) {
  416d66:	f419 6f80 	tst.w	r9, #1024	; 0x400
  416d6a:	d001      	beq.n	416d70 <_vsnprintf+0x2c0>
                        flags &= ~FLAGS_ZEROPAD;
  416d6c:	f029 0901 	bic.w	r9, r9, #1
                    if((*format == 'i') || (*format == 'd')) {
  416d70:	2864      	cmp	r0, #100	; 0x64
  416d72:	bf18      	it	ne
  416d74:	2869      	cmpne	r0, #105	; 0x69
  416d76:	d178      	bne.n	416e6a <_vsnprintf+0x3ba>
                        if(flags & FLAGS_LONG_LONG) {
  416d78:	f419 7f00 	tst.w	r9, #512	; 0x200
  416d7c:	d12c      	bne.n	416dd8 <_vsnprintf+0x328>
                        else if(flags & FLAGS_LONG) {
  416d7e:	f419 7f80 	tst.w	r9, #256	; 0x100
  416d82:	d14f      	bne.n	416e24 <_vsnprintf+0x374>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  416d84:	f019 0f40 	tst.w	r9, #64	; 0x40
  416d88:	d165      	bne.n	416e56 <_vsnprintf+0x3a6>
                                                                                                                                       int) : va_arg(va, int);
  416d8a:	f019 0f80 	tst.w	r9, #128	; 0x80
  416d8e:	d067      	beq.n	416e60 <_vsnprintf+0x3b0>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  416d90:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416d92:	1d1a      	adds	r2, r3, #4
  416d94:	9218      	str	r2, [sp, #96]	; 0x60
  416d96:	f9b3 3000 	ldrsh.w	r3, [r3]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
  416d9a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  416d9e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  416da2:	0fdb      	lsrs	r3, r3, #31
  416da4:	f8cd 9014 	str.w	r9, [sp, #20]
  416da8:	f8cd 8010 	str.w	r8, [sp, #16]
  416dac:	9403      	str	r4, [sp, #12]
  416dae:	9102      	str	r1, [sp, #8]
  416db0:	9301      	str	r3, [sp, #4]
  416db2:	9200      	str	r2, [sp, #0]
  416db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416db6:	462a      	mov	r2, r5
  416db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416dba:	4630      	mov	r0, r6
  416dbc:	4c9c      	ldr	r4, [pc, #624]	; (417030 <_vsnprintf+0x580>)
  416dbe:	47a0      	blx	r4
  416dc0:	4605      	mov	r5, r0
                    format++;
  416dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416dc4:	3301      	adds	r3, #1
  416dc6:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  416dc8:	e67b      	b.n	416ac2 <_vsnprintf+0x12>
                        base =  8U;
  416dca:	2108      	movs	r1, #8
  416dcc:	e7c3      	b.n	416d56 <_vsnprintf+0x2a6>
                        base =  2U;
  416dce:	2102      	movs	r1, #2
  416dd0:	e7c1      	b.n	416d56 <_vsnprintf+0x2a6>
                        flags |= FLAGS_UPPERCASE;
  416dd2:	f049 0920 	orr.w	r9, r9, #32
  416dd6:	e7c0      	b.n	416d5a <_vsnprintf+0x2aa>
                            const long long value = va_arg(va, long long);
  416dd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416dda:	3307      	adds	r3, #7
  416ddc:	f023 0007 	bic.w	r0, r3, #7
  416de0:	f100 0308 	add.w	r3, r0, #8
  416de4:	9318      	str	r3, [sp, #96]	; 0x60
  416de6:	6847      	ldr	r7, [r0, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
  416de8:	6802      	ldr	r2, [r0, #0]
  416dea:	463b      	mov	r3, r7
  416dec:	2a00      	cmp	r2, #0
  416dee:	f177 0000 	sbcs.w	r0, r7, #0
  416df2:	db13      	blt.n	416e1c <_vsnprintf+0x36c>
  416df4:	0fff      	lsrs	r7, r7, #31
  416df6:	f8cd 9020 	str.w	r9, [sp, #32]
  416dfa:	f8cd 801c 	str.w	r8, [sp, #28]
  416dfe:	9406      	str	r4, [sp, #24]
  416e00:	9104      	str	r1, [sp, #16]
  416e02:	2100      	movs	r1, #0
  416e04:	9105      	str	r1, [sp, #20]
  416e06:	9702      	str	r7, [sp, #8]
  416e08:	e9cd 2300 	strd	r2, r3, [sp]
  416e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416e0e:	462a      	mov	r2, r5
  416e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416e12:	4630      	mov	r0, r6
  416e14:	4c87      	ldr	r4, [pc, #540]	; (417034 <_vsnprintf+0x584>)
  416e16:	47a0      	blx	r4
  416e18:	4605      	mov	r5, r0
  416e1a:	e7d2      	b.n	416dc2 <_vsnprintf+0x312>
  416e1c:	4252      	negs	r2, r2
  416e1e:	eb67 0347 	sbc.w	r3, r7, r7, lsl #1
  416e22:	e7e7      	b.n	416df4 <_vsnprintf+0x344>
                            const long value = va_arg(va, long);
  416e24:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416e26:	1d1a      	adds	r2, r3, #4
  416e28:	9218      	str	r2, [sp, #96]	; 0x60
  416e2a:	681b      	ldr	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
  416e2c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  416e30:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  416e34:	0fdb      	lsrs	r3, r3, #31
  416e36:	f8cd 9014 	str.w	r9, [sp, #20]
  416e3a:	f8cd 8010 	str.w	r8, [sp, #16]
  416e3e:	9403      	str	r4, [sp, #12]
  416e40:	9102      	str	r1, [sp, #8]
  416e42:	9301      	str	r3, [sp, #4]
  416e44:	9200      	str	r2, [sp, #0]
  416e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416e48:	462a      	mov	r2, r5
  416e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416e4c:	4630      	mov	r0, r6
  416e4e:	4c78      	ldr	r4, [pc, #480]	; (417030 <_vsnprintf+0x580>)
  416e50:	47a0      	blx	r4
  416e52:	4605      	mov	r5, r0
  416e54:	e7b5      	b.n	416dc2 <_vsnprintf+0x312>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
  416e56:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416e58:	1d1a      	adds	r2, r3, #4
  416e5a:	9218      	str	r2, [sp, #96]	; 0x60
  416e5c:	781b      	ldrb	r3, [r3, #0]
  416e5e:	e79c      	b.n	416d9a <_vsnprintf+0x2ea>
                                                                                                                                       int) : va_arg(va, int);
  416e60:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416e62:	1d1a      	adds	r2, r3, #4
  416e64:	9218      	str	r2, [sp, #96]	; 0x60
  416e66:	681b      	ldr	r3, [r3, #0]
  416e68:	e797      	b.n	416d9a <_vsnprintf+0x2ea>
                        if(flags & FLAGS_LONG_LONG) {
  416e6a:	f419 7f00 	tst.w	r9, #512	; 0x200
  416e6e:	d11d      	bne.n	416eac <_vsnprintf+0x3fc>
                        else if(flags & FLAGS_LONG) {
  416e70:	f419 7f80 	tst.w	r9, #256	; 0x100
  416e74:	d136      	bne.n	416ee4 <_vsnprintf+0x434>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  416e76:	f019 0f40 	tst.w	r9, #64	; 0x40
  416e7a:	d148      	bne.n	416f0e <_vsnprintf+0x45e>
  416e7c:	f019 0f80 	tst.w	r9, #128	; 0x80
  416e80:	d04a      	beq.n	416f18 <_vsnprintf+0x468>
  416e82:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416e84:	1d1a      	adds	r2, r3, #4
  416e86:	9218      	str	r2, [sp, #96]	; 0x60
  416e88:	881b      	ldrh	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  416e8a:	f8cd 9014 	str.w	r9, [sp, #20]
  416e8e:	f8cd 8010 	str.w	r8, [sp, #16]
  416e92:	9403      	str	r4, [sp, #12]
  416e94:	9102      	str	r1, [sp, #8]
  416e96:	2200      	movs	r2, #0
  416e98:	9201      	str	r2, [sp, #4]
  416e9a:	9300      	str	r3, [sp, #0]
  416e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416e9e:	462a      	mov	r2, r5
  416ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416ea2:	4630      	mov	r0, r6
  416ea4:	4c62      	ldr	r4, [pc, #392]	; (417030 <_vsnprintf+0x580>)
  416ea6:	47a0      	blx	r4
  416ea8:	4605      	mov	r5, r0
  416eaa:	e78a      	b.n	416dc2 <_vsnprintf+0x312>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  416eac:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416eae:	3307      	adds	r3, #7
  416eb0:	f023 0307 	bic.w	r3, r3, #7
  416eb4:	f103 0208 	add.w	r2, r3, #8
  416eb8:	9218      	str	r2, [sp, #96]	; 0x60
  416eba:	e9d3 2300 	ldrd	r2, r3, [r3]
  416ebe:	2000      	movs	r0, #0
  416ec0:	f8cd 9020 	str.w	r9, [sp, #32]
  416ec4:	f8cd 801c 	str.w	r8, [sp, #28]
  416ec8:	9406      	str	r4, [sp, #24]
  416eca:	9104      	str	r1, [sp, #16]
  416ecc:	9005      	str	r0, [sp, #20]
  416ece:	9002      	str	r0, [sp, #8]
  416ed0:	e9cd 2300 	strd	r2, r3, [sp]
  416ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416ed6:	462a      	mov	r2, r5
  416ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416eda:	4630      	mov	r0, r6
  416edc:	4c55      	ldr	r4, [pc, #340]	; (417034 <_vsnprintf+0x584>)
  416ede:	47a0      	blx	r4
  416ee0:	4605      	mov	r5, r0
  416ee2:	e76e      	b.n	416dc2 <_vsnprintf+0x312>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  416ee4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416ee6:	1d1a      	adds	r2, r3, #4
  416ee8:	9218      	str	r2, [sp, #96]	; 0x60
  416eea:	681b      	ldr	r3, [r3, #0]
  416eec:	f8cd 9014 	str.w	r9, [sp, #20]
  416ef0:	f8cd 8010 	str.w	r8, [sp, #16]
  416ef4:	9403      	str	r4, [sp, #12]
  416ef6:	9102      	str	r1, [sp, #8]
  416ef8:	2200      	movs	r2, #0
  416efa:	9201      	str	r2, [sp, #4]
  416efc:	9300      	str	r3, [sp, #0]
  416efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416f00:	462a      	mov	r2, r5
  416f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416f04:	4630      	mov	r0, r6
  416f06:	4c4a      	ldr	r4, [pc, #296]	; (417030 <_vsnprintf+0x580>)
  416f08:	47a0      	blx	r4
  416f0a:	4605      	mov	r5, r0
  416f0c:	e759      	b.n	416dc2 <_vsnprintf+0x312>
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
  416f0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416f10:	1d1a      	adds	r2, r3, #4
  416f12:	9218      	str	r2, [sp, #96]	; 0x60
  416f14:	781b      	ldrb	r3, [r3, #0]
  416f16:	e7b8      	b.n	416e8a <_vsnprintf+0x3da>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  416f18:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416f1a:	1d1a      	adds	r2, r3, #4
  416f1c:	9218      	str	r2, [sp, #96]	; 0x60
  416f1e:	681b      	ldr	r3, [r3, #0]
  416f20:	e7b3      	b.n	416e8a <_vsnprintf+0x3da>
                    if(!(flags & FLAGS_LEFT)) {
  416f22:	f019 0902 	ands.w	r9, r9, #2
  416f26:	d01d      	beq.n	416f64 <_vsnprintf+0x4b4>
                    unsigned int l = 1U;
  416f28:	2401      	movs	r4, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
  416f2a:	9818      	ldr	r0, [sp, #96]	; 0x60
  416f2c:	1d03      	adds	r3, r0, #4
  416f2e:	9318      	str	r3, [sp, #96]	; 0x60
  416f30:	1c6f      	adds	r7, r5, #1
  416f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416f34:	462a      	mov	r2, r5
  416f36:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416f38:	7800      	ldrb	r0, [r0, #0]
  416f3a:	47b0      	blx	r6
                    if(flags & FLAGS_LEFT) {
  416f3c:	f1b9 0f00 	cmp.w	r9, #0
  416f40:	d11f      	bne.n	416f82 <_vsnprintf+0x4d2>
                    format++;
  416f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  416f44:	3301      	adds	r3, #1
  416f46:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  416f48:	463d      	mov	r5, r7
  416f4a:	e5ba      	b.n	416ac2 <_vsnprintf+0x12>
                            out(' ', buffer, idx++, maxlen);
  416f4c:	1c55      	adds	r5, r2, #1
  416f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416f52:	2020      	movs	r0, #32
  416f54:	47b0      	blx	r6
                        while(l++ < width) {
  416f56:	4623      	mov	r3, r4
                            out(' ', buffer, idx++, maxlen);
  416f58:	462a      	mov	r2, r5
                        while(l++ < width) {
  416f5a:	1c5c      	adds	r4, r3, #1
  416f5c:	4598      	cmp	r8, r3
  416f5e:	d8f5      	bhi.n	416f4c <_vsnprintf+0x49c>
  416f60:	4615      	mov	r5, r2
  416f62:	e7e2      	b.n	416f2a <_vsnprintf+0x47a>
  416f64:	2301      	movs	r3, #1
  416f66:	462a      	mov	r2, r5
  416f68:	e7f7      	b.n	416f5a <_vsnprintf+0x4aa>
                            out(' ', buffer, idx++, maxlen);
  416f6a:	1c57      	adds	r7, r2, #1
  416f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416f70:	2020      	movs	r0, #32
  416f72:	47b0      	blx	r6
                        while(l++ < width) {
  416f74:	462c      	mov	r4, r5
                            out(' ', buffer, idx++, maxlen);
  416f76:	463a      	mov	r2, r7
                        while(l++ < width) {
  416f78:	1c65      	adds	r5, r4, #1
  416f7a:	45a0      	cmp	r8, r4
  416f7c:	d8f5      	bhi.n	416f6a <_vsnprintf+0x4ba>
  416f7e:	4617      	mov	r7, r2
  416f80:	e7df      	b.n	416f42 <_vsnprintf+0x492>
  416f82:	463a      	mov	r2, r7
  416f84:	e7f8      	b.n	416f78 <_vsnprintf+0x4c8>
                    const char * p = va_arg(va, char *);
  416f86:	9b18      	ldr	r3, [sp, #96]	; 0x60
  416f88:	1d1a      	adds	r2, r3, #4
  416f8a:	9218      	str	r2, [sp, #96]	; 0x60
  416f8c:	681f      	ldr	r7, [r3, #0]
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
  416f8e:	b114      	cbz	r4, 416f96 <_vsnprintf+0x4e6>
  416f90:	4622      	mov	r2, r4
  416f92:	463b      	mov	r3, r7
  416f94:	e004      	b.n	416fa0 <_vsnprintf+0x4f0>
  416f96:	f04f 32ff 	mov.w	r2, #4294967295
  416f9a:	e7fa      	b.n	416f92 <_vsnprintf+0x4e2>
    for(s = str; *s && maxsize--; ++s);
  416f9c:	3301      	adds	r3, #1
  416f9e:	460a      	mov	r2, r1
  416fa0:	7819      	ldrb	r1, [r3, #0]
  416fa2:	b111      	cbz	r1, 416faa <_vsnprintf+0x4fa>
  416fa4:	1e51      	subs	r1, r2, #1
  416fa6:	2a00      	cmp	r2, #0
  416fa8:	d1f8      	bne.n	416f9c <_vsnprintf+0x4ec>
    return (unsigned int)(s - str);
  416faa:	1bdb      	subs	r3, r3, r7
                    if(flags & FLAGS_PRECISION) {
  416fac:	f419 6b80 	ands.w	fp, r9, #1024	; 0x400
  416fb0:	d002      	beq.n	416fb8 <_vsnprintf+0x508>
                        l = (l < precision ? l : precision);
  416fb2:	42a3      	cmp	r3, r4
  416fb4:	bf28      	it	cs
  416fb6:	4623      	movcs	r3, r4
                    if(!(flags & FLAGS_LEFT)) {
  416fb8:	f019 0202 	ands.w	r2, r9, #2
  416fbc:	920c      	str	r2, [sp, #48]	; 0x30
  416fbe:	d011      	beq.n	416fe4 <_vsnprintf+0x534>
  416fc0:	4699      	mov	r9, r3
  416fc2:	462a      	mov	r2, r5
  416fc4:	465d      	mov	r5, fp
  416fc6:	e017      	b.n	416ff8 <_vsnprintf+0x548>
                            out(' ', buffer, idx++, maxlen);
  416fc8:	f102 0a01 	add.w	sl, r2, #1
  416fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416fce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416fd0:	2020      	movs	r0, #32
  416fd2:	47b0      	blx	r6
                        while(l++ < width) {
  416fd4:	464b      	mov	r3, r9
                            out(' ', buffer, idx++, maxlen);
  416fd6:	4652      	mov	r2, sl
                        while(l++ < width) {
  416fd8:	f103 0901 	add.w	r9, r3, #1
  416fdc:	4598      	cmp	r8, r3
  416fde:	d8f3      	bhi.n	416fc8 <_vsnprintf+0x518>
  416fe0:	465d      	mov	r5, fp
  416fe2:	e009      	b.n	416ff8 <_vsnprintf+0x548>
  416fe4:	462a      	mov	r2, r5
  416fe6:	e7f7      	b.n	416fd8 <_vsnprintf+0x528>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  416fe8:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
  416fea:	3701      	adds	r7, #1
  416fec:	f102 0a01 	add.w	sl, r2, #1
  416ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  416ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  416ff4:	47b0      	blx	r6
  416ff6:	4652      	mov	r2, sl
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  416ff8:	7838      	ldrb	r0, [r7, #0]
  416ffa:	b120      	cbz	r0, 417006 <_vsnprintf+0x556>
  416ffc:	2d00      	cmp	r5, #0
  416ffe:	d0f4      	beq.n	416fea <_vsnprintf+0x53a>
  417000:	1e63      	subs	r3, r4, #1
  417002:	2c00      	cmp	r4, #0
  417004:	d1f0      	bne.n	416fe8 <_vsnprintf+0x538>
  417006:	4615      	mov	r5, r2
                    if(flags & FLAGS_LEFT) {
  417008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41700a:	b953      	cbnz	r3, 417022 <_vsnprintf+0x572>
                    format++;
  41700c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41700e:	3301      	adds	r3, #1
  417010:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  417012:	e556      	b.n	416ac2 <_vsnprintf+0x12>
                            out(' ', buffer, idx++, maxlen);
  417014:	1c55      	adds	r5, r2, #1
  417016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417018:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41701a:	2020      	movs	r0, #32
  41701c:	47b0      	blx	r6
                        while(l++ < width) {
  41701e:	46a1      	mov	r9, r4
                            out(' ', buffer, idx++, maxlen);
  417020:	462a      	mov	r2, r5
                        while(l++ < width) {
  417022:	f109 0401 	add.w	r4, r9, #1
  417026:	45c8      	cmp	r8, r9
  417028:	d8f4      	bhi.n	417014 <_vsnprintf+0x564>
  41702a:	4615      	mov	r5, r2
  41702c:	e7ee      	b.n	41700c <_vsnprintf+0x55c>
  41702e:	bf00      	nop
  417030:	00416941 	.word	0x00416941
  417034:	004169e1 	.word	0x004169e1
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
  417038:	f049 0321 	orr.w	r3, r9, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
  41703c:	9a18      	ldr	r2, [sp, #96]	; 0x60
  41703e:	1d11      	adds	r1, r2, #4
  417040:	9118      	str	r1, [sp, #96]	; 0x60
  417042:	6812      	ldr	r2, [r2, #0]
  417044:	9305      	str	r3, [sp, #20]
  417046:	2308      	movs	r3, #8
  417048:	9304      	str	r3, [sp, #16]
  41704a:	9403      	str	r4, [sp, #12]
  41704c:	2310      	movs	r3, #16
  41704e:	9302      	str	r3, [sp, #8]
  417050:	2300      	movs	r3, #0
  417052:	9301      	str	r3, [sp, #4]
  417054:	9200      	str	r2, [sp, #0]
  417056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417058:	462a      	mov	r2, r5
  41705a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41705c:	4630      	mov	r0, r6
  41705e:	4c15      	ldr	r4, [pc, #84]	; (4170b4 <_vsnprintf+0x604>)
  417060:	47a0      	blx	r4
  417062:	4605      	mov	r5, r0
                    format++;
  417064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  417066:	3301      	adds	r3, #1
  417068:	930d      	str	r3, [sp, #52]	; 0x34
                    break;
  41706a:	e52a      	b.n	416ac2 <_vsnprintf+0x12>
                out('%', buffer, idx++, maxlen);
  41706c:	1c6c      	adds	r4, r5, #1
  41706e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417070:	462a      	mov	r2, r5
  417072:	990b      	ldr	r1, [sp, #44]	; 0x2c
  417074:	2025      	movs	r0, #37	; 0x25
  417076:	47b0      	blx	r6
                format++;
  417078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41707a:	3301      	adds	r3, #1
  41707c:	930d      	str	r3, [sp, #52]	; 0x34
                out('%', buffer, idx++, maxlen);
  41707e:	4625      	mov	r5, r4
                break;
  417080:	e51f      	b.n	416ac2 <_vsnprintf+0x12>

            default :
                out(*format, buffer, idx++, maxlen);
  417082:	1c6c      	adds	r4, r5, #1
  417084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  417086:	462a      	mov	r2, r5
  417088:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41708a:	47b0      	blx	r6
                format++;
  41708c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41708e:	3301      	adds	r3, #1
  417090:	930d      	str	r3, [sp, #52]	; 0x34
                out(*format, buffer, idx++, maxlen);
  417092:	4625      	mov	r5, r4
                break;
  417094:	e515      	b.n	416ac2 <_vsnprintf+0x12>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  417096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  417098:	4295      	cmp	r5, r2
  41709a:	d308      	bcc.n	4170ae <_vsnprintf+0x5fe>
  41709c:	3a01      	subs	r2, #1
  41709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4170a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4170a2:	2000      	movs	r0, #0
  4170a4:	47b0      	blx	r6

    // return written chars without terminating \0
    return (int)idx;
}
  4170a6:	4628      	mov	r0, r5
  4170a8:	b00f      	add	sp, #60	; 0x3c
  4170aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  4170ae:	462a      	mov	r2, r5
  4170b0:	e7f5      	b.n	41709e <_vsnprintf+0x5ee>
  4170b2:	bf00      	nop
  4170b4:	00416941 	.word	0x00416941

004170b8 <lv_vsnprintf>:
    va_end(va);
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
  4170b8:	b510      	push	{r4, lr}
  4170ba:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
  4170bc:	9300      	str	r3, [sp, #0]
  4170be:	4613      	mov	r3, r2
  4170c0:	460a      	mov	r2, r1
  4170c2:	4601      	mov	r1, r0
  4170c4:	4802      	ldr	r0, [pc, #8]	; (4170d0 <lv_vsnprintf+0x18>)
  4170c6:	4c03      	ldr	r4, [pc, #12]	; (4170d4 <lv_vsnprintf+0x1c>)
  4170c8:	47a0      	blx	r4
}
  4170ca:	b002      	add	sp, #8
  4170cc:	bd10      	pop	{r4, pc}
  4170ce:	bf00      	nop
  4170d0:	00416771 	.word	0x00416771
  4170d4:	00416ab1 	.word	0x00416ab1

004170d8 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  4170d8:	b510      	push	{r4, lr}
  4170da:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  4170dc:	6840      	ldr	r0, [r0, #4]
  4170de:	4b04      	ldr	r3, [pc, #16]	; (4170f0 <lv_task_time_remaining+0x18>)
  4170e0:	4798      	blx	r3
    if(elp >= task->period)
  4170e2:	6823      	ldr	r3, [r4, #0]
  4170e4:	4298      	cmp	r0, r3
  4170e6:	d201      	bcs.n	4170ec <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  4170e8:	1a18      	subs	r0, r3, r0
  4170ea:	bd10      	pop	{r4, pc}
        return 0;
  4170ec:	2000      	movs	r0, #0
}
  4170ee:	bd10      	pop	{r4, pc}
  4170f0:	00414d21 	.word	0x00414d21

004170f4 <lv_task_create>:
{
  4170f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4170f8:	4607      	mov	r7, r0
  4170fa:	4688      	mov	r8, r1
  4170fc:	4615      	mov	r5, r2
  4170fe:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  417100:	4831      	ldr	r0, [pc, #196]	; (4171c8 <lv_task_create+0xd4>)
  417102:	4b32      	ldr	r3, [pc, #200]	; (4171cc <lv_task_create+0xd8>)
  417104:	4798      	blx	r3
    if(NULL == tmp) {
  417106:	4604      	mov	r4, r0
  417108:	b338      	cbz	r0, 41715a <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  41710a:	7d23      	ldrb	r3, [r4, #20]
  41710c:	f003 0307 	and.w	r3, r3, #7
  417110:	42ab      	cmp	r3, r5
  417112:	dd32      	ble.n	41717a <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  417114:	4621      	mov	r1, r4
  417116:	482c      	ldr	r0, [pc, #176]	; (4171c8 <lv_task_create+0xd4>)
  417118:	4b2d      	ldr	r3, [pc, #180]	; (4171d0 <lv_task_create+0xdc>)
  41711a:	4798      	blx	r3
        } while(tmp != NULL);
  41711c:	4604      	mov	r4, r0
  41711e:	2800      	cmp	r0, #0
  417120:	d1f3      	bne.n	41710a <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  417122:	4603      	mov	r3, r0
        if(tmp == NULL) {
  417124:	2b00      	cmp	r3, #0
  417126:	d03c      	beq.n	4171a2 <lv_task_create+0xae>
    task_list_changed = true;
  417128:	f04f 0901 	mov.w	r9, #1
  41712c:	4b29      	ldr	r3, [pc, #164]	; (4171d4 <lv_task_create+0xe0>)
  41712e:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  417132:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  417136:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  417138:	7d23      	ldrb	r3, [r4, #20]
  41713a:	f365 0302 	bfi	r3, r5, #0, #3
  41713e:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  417140:	f04f 33ff 	mov.w	r3, #4294967295
  417144:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  417146:	4b24      	ldr	r3, [pc, #144]	; (4171d8 <lv_task_create+0xe4>)
  417148:	4798      	blx	r3
  41714a:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  41714c:	60e6      	str	r6, [r4, #12]
    task_created = true;
  41714e:	4b23      	ldr	r3, [pc, #140]	; (4171dc <lv_task_create+0xe8>)
  417150:	f883 9000 	strb.w	r9, [r3]
}
  417154:	4620      	mov	r0, r4
  417156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  41715a:	481b      	ldr	r0, [pc, #108]	; (4171c8 <lv_task_create+0xd4>)
  41715c:	4b20      	ldr	r3, [pc, #128]	; (4171e0 <lv_task_create+0xec>)
  41715e:	4798      	blx	r3
  417160:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  417162:	4b20      	ldr	r3, [pc, #128]	; (4171e4 <lv_task_create+0xf0>)
  417164:	4798      	blx	r3
  417166:	b928      	cbnz	r0, 417174 <lv_task_create+0x80>
  417168:	4622      	mov	r2, r4
  41716a:	2300      	movs	r3, #0
  41716c:	481e      	ldr	r0, [pc, #120]	; (4171e8 <lv_task_create+0xf4>)
  41716e:	491f      	ldr	r1, [pc, #124]	; (4171ec <lv_task_create+0xf8>)
  417170:	4788      	blx	r1
  417172:	e7fe      	b.n	417172 <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  417174:	2c00      	cmp	r4, #0
  417176:	d1d7      	bne.n	417128 <lv_task_create+0x34>
  417178:	e7ec      	b.n	417154 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  41717a:	4621      	mov	r1, r4
  41717c:	4812      	ldr	r0, [pc, #72]	; (4171c8 <lv_task_create+0xd4>)
  41717e:	4b1c      	ldr	r3, [pc, #112]	; (4171f0 <lv_task_create+0xfc>)
  417180:	4798      	blx	r3
  417182:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  417184:	4b17      	ldr	r3, [pc, #92]	; (4171e4 <lv_task_create+0xf0>)
  417186:	4798      	blx	r3
  417188:	b128      	cbz	r0, 417196 <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  41718a:	f1b9 0f00 	cmp.w	r9, #0
  41718e:	d018      	beq.n	4171c2 <lv_task_create+0xce>
  417190:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  417192:	464c      	mov	r4, r9
  417194:	e7c6      	b.n	417124 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  417196:	464a      	mov	r2, r9
  417198:	2300      	movs	r3, #0
  41719a:	4813      	ldr	r0, [pc, #76]	; (4171e8 <lv_task_create+0xf4>)
  41719c:	4913      	ldr	r1, [pc, #76]	; (4171ec <lv_task_create+0xf8>)
  41719e:	4788      	blx	r1
  4171a0:	e7fe      	b.n	4171a0 <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  4171a2:	4809      	ldr	r0, [pc, #36]	; (4171c8 <lv_task_create+0xd4>)
  4171a4:	4b13      	ldr	r3, [pc, #76]	; (4171f4 <lv_task_create+0x100>)
  4171a6:	4798      	blx	r3
  4171a8:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  4171aa:	4b0e      	ldr	r3, [pc, #56]	; (4171e4 <lv_task_create+0xf0>)
  4171ac:	4798      	blx	r3
  4171ae:	b928      	cbnz	r0, 4171bc <lv_task_create+0xc8>
  4171b0:	4622      	mov	r2, r4
  4171b2:	2300      	movs	r3, #0
  4171b4:	480c      	ldr	r0, [pc, #48]	; (4171e8 <lv_task_create+0xf4>)
  4171b6:	490d      	ldr	r1, [pc, #52]	; (4171ec <lv_task_create+0xf8>)
  4171b8:	4788      	blx	r1
  4171ba:	e7fe      	b.n	4171ba <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  4171bc:	2c00      	cmp	r4, #0
  4171be:	d1b3      	bne.n	417128 <lv_task_create+0x34>
  4171c0:	e7c8      	b.n	417154 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  4171c2:	464c      	mov	r4, r9
  4171c4:	e7c6      	b.n	417154 <lv_task_create+0x60>
  4171c6:	bf00      	nop
  4171c8:	2043a1a4 	.word	0x2043a1a4
  4171cc:	00415d91 	.word	0x00415d91
  4171d0:	00415da5 	.word	0x00415da5
  4171d4:	2041479f 	.word	0x2041479f
  4171d8:	00414d05 	.word	0x00414d05
  4171dc:	2041479d 	.word	0x2041479d
  4171e0:	00415cf9 	.word	0x00415cf9
  4171e4:	00415a81 	.word	0x00415a81
  4171e8:	00428c94 	.word	0x00428c94
  4171ec:	00415a8d 	.word	0x00415a8d
  4171f0:	00415dc1 	.word	0x00415dc1
  4171f4:	00415d45 	.word	0x00415d45

004171f8 <lv_task_del>:
{
  4171f8:	b510      	push	{r4, lr}
  4171fa:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  4171fc:	4601      	mov	r1, r0
  4171fe:	4809      	ldr	r0, [pc, #36]	; (417224 <lv_task_del+0x2c>)
  417200:	4b09      	ldr	r3, [pc, #36]	; (417228 <lv_task_del+0x30>)
  417202:	4798      	blx	r3
    task_list_changed = true;
  417204:	2201      	movs	r2, #1
  417206:	4b09      	ldr	r3, [pc, #36]	; (41722c <lv_task_del+0x34>)
  417208:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  41720a:	4620      	mov	r0, r4
  41720c:	4b08      	ldr	r3, [pc, #32]	; (417230 <lv_task_del+0x38>)
  41720e:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  417210:	4b08      	ldr	r3, [pc, #32]	; (417234 <lv_task_del+0x3c>)
  417212:	681b      	ldr	r3, [r3, #0]
  417214:	429c      	cmp	r4, r3
  417216:	d000      	beq.n	41721a <lv_task_del+0x22>
  417218:	bd10      	pop	{r4, pc}
  41721a:	2201      	movs	r2, #1
  41721c:	4b06      	ldr	r3, [pc, #24]	; (417238 <lv_task_del+0x40>)
  41721e:	701a      	strb	r2, [r3, #0]
}
  417220:	e7fa      	b.n	417218 <lv_task_del+0x20>
  417222:	bf00      	nop
  417224:	2043a1a4 	.word	0x2043a1a4
  417228:	00415e4d 	.word	0x00415e4d
  41722c:	2041479f 	.word	0x2041479f
  417230:	0041624d 	.word	0x0041624d
  417234:	2043a274 	.word	0x2043a274
  417238:	2041479e 	.word	0x2041479e

0041723c <lv_task_exec>:
{
  41723c:	b510      	push	{r4, lr}
  41723e:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  417240:	4b0e      	ldr	r3, [pc, #56]	; (41727c <lv_task_exec+0x40>)
  417242:	4798      	blx	r3
  417244:	b108      	cbz	r0, 41724a <lv_task_exec+0xe>
    bool exec = false;
  417246:	2000      	movs	r0, #0
  417248:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  41724a:	4b0d      	ldr	r3, [pc, #52]	; (417280 <lv_task_exec+0x44>)
  41724c:	4798      	blx	r3
  41724e:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  417250:	68a3      	ldr	r3, [r4, #8]
  417252:	b10b      	cbz	r3, 417258 <lv_task_exec+0x1c>
  417254:	4620      	mov	r0, r4
  417256:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  417258:	4b0a      	ldr	r3, [pc, #40]	; (417284 <lv_task_exec+0x48>)
  41725a:	7818      	ldrb	r0, [r3, #0]
  41725c:	b938      	cbnz	r0, 41726e <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  41725e:	6923      	ldr	r3, [r4, #16]
  417260:	2b00      	cmp	r3, #0
  417262:	dd01      	ble.n	417268 <lv_task_exec+0x2c>
                task->repeat_count--;
  417264:	3b01      	subs	r3, #1
  417266:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  417268:	6923      	ldr	r3, [r4, #16]
  41726a:	b10b      	cbz	r3, 417270 <lv_task_exec+0x34>
        exec = true;
  41726c:	2001      	movs	r0, #1
}
  41726e:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  417270:	4620      	mov	r0, r4
  417272:	4b05      	ldr	r3, [pc, #20]	; (417288 <lv_task_exec+0x4c>)
  417274:	4798      	blx	r3
        exec = true;
  417276:	2001      	movs	r0, #1
  417278:	bd10      	pop	{r4, pc}
  41727a:	bf00      	nop
  41727c:	004170d9 	.word	0x004170d9
  417280:	00414d05 	.word	0x00414d05
  417284:	2041479e 	.word	0x2041479e
  417288:	004171f9 	.word	0x004171f9

0041728c <lv_task_handler>:
{
  41728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  41728e:	4b5e      	ldr	r3, [pc, #376]	; (417408 <lv_task_handler+0x17c>)
  417290:	781b      	ldrb	r3, [r3, #0]
  417292:	2b00      	cmp	r3, #0
  417294:	f040 80b5 	bne.w	417402 <lv_task_handler+0x176>
    already_running = true;
  417298:	2201      	movs	r2, #1
  41729a:	4b5b      	ldr	r3, [pc, #364]	; (417408 <lv_task_handler+0x17c>)
  41729c:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  41729e:	4b5b      	ldr	r3, [pc, #364]	; (41740c <lv_task_handler+0x180>)
  4172a0:	781d      	ldrb	r5, [r3, #0]
  4172a2:	b925      	cbnz	r5, 4172ae <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  4172a4:	2200      	movs	r2, #0
  4172a6:	4b58      	ldr	r3, [pc, #352]	; (417408 <lv_task_handler+0x17c>)
  4172a8:	701a      	strb	r2, [r3, #0]
        return 1;
  4172aa:	2501      	movs	r5, #1
  4172ac:	e0aa      	b.n	417404 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  4172ae:	4b58      	ldr	r3, [pc, #352]	; (417410 <lv_task_handler+0x184>)
  4172b0:	4798      	blx	r3
  4172b2:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  4172b4:	2400      	movs	r4, #0
  4172b6:	e04e      	b.n	417356 <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  4172b8:	4b56      	ldr	r3, [pc, #344]	; (417414 <lv_task_handler+0x188>)
  4172ba:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  4172bc:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  4172be:	e00f      	b.n	4172e0 <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  4172c0:	4b55      	ldr	r3, [pc, #340]	; (417418 <lv_task_handler+0x18c>)
  4172c2:	4798      	blx	r3
            if(task_created || task_deleted) {
  4172c4:	4b55      	ldr	r3, [pc, #340]	; (41741c <lv_task_handler+0x190>)
  4172c6:	781b      	ldrb	r3, [r3, #0]
  4172c8:	2b00      	cmp	r3, #0
  4172ca:	d153      	bne.n	417374 <lv_task_handler+0xe8>
  4172cc:	4b54      	ldr	r3, [pc, #336]	; (417420 <lv_task_handler+0x194>)
  4172ce:	781b      	ldrb	r3, [r3, #0]
  4172d0:	2b00      	cmp	r3, #0
  4172d2:	d151      	bne.n	417378 <lv_task_handler+0xec>
            if(task_list_changed) {
  4172d4:	4a53      	ldr	r2, [pc, #332]	; (417424 <lv_task_handler+0x198>)
  4172d6:	7812      	ldrb	r2, [r2, #0]
  4172d8:	2a00      	cmp	r2, #0
  4172da:	d14f      	bne.n	41737c <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  4172dc:	4b4d      	ldr	r3, [pc, #308]	; (417414 <lv_task_handler+0x188>)
  4172de:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  4172e0:	4b4c      	ldr	r3, [pc, #304]	; (417414 <lv_task_handler+0x188>)
  4172e2:	6819      	ldr	r1, [r3, #0]
  4172e4:	2900      	cmp	r1, #0
  4172e6:	d034      	beq.n	417352 <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  4172e8:	484f      	ldr	r0, [pc, #316]	; (417428 <lv_task_handler+0x19c>)
  4172ea:	4b50      	ldr	r3, [pc, #320]	; (41742c <lv_task_handler+0x1a0>)
  4172ec:	4798      	blx	r3
  4172ee:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  4172f0:	4b48      	ldr	r3, [pc, #288]	; (417414 <lv_task_handler+0x188>)
  4172f2:	6818      	ldr	r0, [r3, #0]
  4172f4:	7d03      	ldrb	r3, [r0, #20]
  4172f6:	f013 0307 	ands.w	r3, r3, #7
  4172fa:	d039      	beq.n	417370 <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  4172fc:	4284      	cmp	r4, r0
  4172fe:	d0db      	beq.n	4172b8 <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  417300:	2b05      	cmp	r3, #5
  417302:	d0dd      	beq.n	4172c0 <lv_task_handler+0x34>
            else if(task_interrupter) {
  417304:	b1b4      	cbz	r4, 417334 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  417306:	7d02      	ldrb	r2, [r0, #20]
  417308:	f002 0207 	and.w	r2, r2, #7
  41730c:	7d23      	ldrb	r3, [r4, #20]
  41730e:	f003 0307 	and.w	r3, r3, #7
  417312:	429a      	cmp	r2, r3
  417314:	ddd6      	ble.n	4172c4 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  417316:	4b40      	ldr	r3, [pc, #256]	; (417418 <lv_task_handler+0x18c>)
  417318:	4798      	blx	r3
  41731a:	2800      	cmp	r0, #0
  41731c:	d0d2      	beq.n	4172c4 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  41731e:	4b3f      	ldr	r3, [pc, #252]	; (41741c <lv_task_handler+0x190>)
  417320:	781b      	ldrb	r3, [r3, #0]
  417322:	2b00      	cmp	r3, #0
  417324:	d1ce      	bne.n	4172c4 <lv_task_handler+0x38>
  417326:	4b3e      	ldr	r3, [pc, #248]	; (417420 <lv_task_handler+0x194>)
  417328:	781b      	ldrb	r3, [r3, #0]
  41732a:	2b00      	cmp	r3, #0
  41732c:	d1ca      	bne.n	4172c4 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  41732e:	4a39      	ldr	r2, [pc, #228]	; (417414 <lv_task_handler+0x188>)
  417330:	6814      	ldr	r4, [r2, #0]
                            break;
  417332:	e00f      	b.n	417354 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  417334:	4b38      	ldr	r3, [pc, #224]	; (417418 <lv_task_handler+0x18c>)
  417336:	4798      	blx	r3
  417338:	2800      	cmp	r0, #0
  41733a:	d0c3      	beq.n	4172c4 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  41733c:	4b37      	ldr	r3, [pc, #220]	; (41741c <lv_task_handler+0x190>)
  41733e:	781b      	ldrb	r3, [r3, #0]
  417340:	2b00      	cmp	r3, #0
  417342:	d1bf      	bne.n	4172c4 <lv_task_handler+0x38>
  417344:	4b36      	ldr	r3, [pc, #216]	; (417420 <lv_task_handler+0x194>)
  417346:	781b      	ldrb	r3, [r3, #0]
  417348:	2b00      	cmp	r3, #0
  41734a:	d1bb      	bne.n	4172c4 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  41734c:	4a31      	ldr	r2, [pc, #196]	; (417414 <lv_task_handler+0x188>)
  41734e:	6814      	ldr	r4, [r2, #0]
                        break;
  417350:	e000      	b.n	417354 <lv_task_handler+0xc8>
        end_flag                 = true;
  417352:	462b      	mov	r3, r5
    } while(!end_flag);
  417354:	b9a3      	cbnz	r3, 417380 <lv_task_handler+0xf4>
        task_deleted             = false;
  417356:	2300      	movs	r3, #0
  417358:	4a31      	ldr	r2, [pc, #196]	; (417420 <lv_task_handler+0x194>)
  41735a:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  41735c:	4a2f      	ldr	r2, [pc, #188]	; (41741c <lv_task_handler+0x190>)
  41735e:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  417360:	4a30      	ldr	r2, [pc, #192]	; (417424 <lv_task_handler+0x198>)
  417362:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  417364:	4830      	ldr	r0, [pc, #192]	; (417428 <lv_task_handler+0x19c>)
  417366:	4b32      	ldr	r3, [pc, #200]	; (417430 <lv_task_handler+0x1a4>)
  417368:	4798      	blx	r3
  41736a:	4b2a      	ldr	r3, [pc, #168]	; (417414 <lv_task_handler+0x188>)
  41736c:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  41736e:	e7b7      	b.n	4172e0 <lv_task_handler+0x54>
        end_flag                 = true;
  417370:	462b      	mov	r3, r5
  417372:	e7ef      	b.n	417354 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  417374:	2400      	movs	r4, #0
  417376:	e7ed      	b.n	417354 <lv_task_handler+0xc8>
  417378:	2400      	movs	r4, #0
  41737a:	e7eb      	b.n	417354 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  41737c:	2400      	movs	r4, #0
  41737e:	e7e9      	b.n	417354 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  417380:	4829      	ldr	r0, [pc, #164]	; (417428 <lv_task_handler+0x19c>)
  417382:	4b2b      	ldr	r3, [pc, #172]	; (417430 <lv_task_handler+0x1a4>)
  417384:	4798      	blx	r3
  417386:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  417388:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  41738c:	e004      	b.n	417398 <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  41738e:	4621      	mov	r1, r4
  417390:	4825      	ldr	r0, [pc, #148]	; (417428 <lv_task_handler+0x19c>)
  417392:	4b26      	ldr	r3, [pc, #152]	; (41742c <lv_task_handler+0x1a0>)
  417394:	4798      	blx	r3
  417396:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  417398:	b154      	cbz	r4, 4173b0 <lv_task_handler+0x124>
  41739a:	7d23      	ldrb	r3, [r4, #20]
  41739c:	f013 0f07 	tst.w	r3, #7
  4173a0:	d006      	beq.n	4173b0 <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  4173a2:	4620      	mov	r0, r4
  4173a4:	4b23      	ldr	r3, [pc, #140]	; (417434 <lv_task_handler+0x1a8>)
  4173a6:	4798      	blx	r3
        if(delay < time_till_next)
  4173a8:	4285      	cmp	r5, r0
  4173aa:	d9f0      	bls.n	41738e <lv_task_handler+0x102>
            time_till_next = delay;
  4173ac:	4605      	mov	r5, r0
  4173ae:	e7ee      	b.n	41738e <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  4173b0:	4630      	mov	r0, r6
  4173b2:	4c21      	ldr	r4, [pc, #132]	; (417438 <lv_task_handler+0x1ac>)
  4173b4:	47a0      	blx	r4
  4173b6:	4a21      	ldr	r2, [pc, #132]	; (41743c <lv_task_handler+0x1b0>)
  4173b8:	6813      	ldr	r3, [r2, #0]
  4173ba:	4403      	add	r3, r0
  4173bc:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  4173be:	4b20      	ldr	r3, [pc, #128]	; (417440 <lv_task_handler+0x1b4>)
  4173c0:	6818      	ldr	r0, [r3, #0]
  4173c2:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  4173c4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  4173c8:	d315      	bcc.n	4173f6 <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  4173ca:	4b1c      	ldr	r3, [pc, #112]	; (41743c <lv_task_handler+0x1b0>)
  4173cc:	681a      	ldr	r2, [r3, #0]
  4173ce:	2364      	movs	r3, #100	; 0x64
  4173d0:	fb03 f302 	mul.w	r3, r3, r2
  4173d4:	fbb3 f3f0 	udiv	r3, r3, r0
  4173d8:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  4173da:	2b64      	cmp	r3, #100	; 0x64
  4173dc:	d80f      	bhi.n	4173fe <lv_task_handler+0x172>
  4173de:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  4173e2:	b2db      	uxtb	r3, r3
  4173e4:	4a17      	ldr	r2, [pc, #92]	; (417444 <lv_task_handler+0x1b8>)
  4173e6:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  4173e8:	2200      	movs	r2, #0
  4173ea:	4b14      	ldr	r3, [pc, #80]	; (41743c <lv_task_handler+0x1b0>)
  4173ec:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  4173ee:	4b08      	ldr	r3, [pc, #32]	; (417410 <lv_task_handler+0x184>)
  4173f0:	4798      	blx	r3
  4173f2:	4b13      	ldr	r3, [pc, #76]	; (417440 <lv_task_handler+0x1b4>)
  4173f4:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  4173f6:	2200      	movs	r2, #0
  4173f8:	4b03      	ldr	r3, [pc, #12]	; (417408 <lv_task_handler+0x17c>)
  4173fa:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  4173fc:	e002      	b.n	417404 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  4173fe:	2300      	movs	r3, #0
  417400:	e7f0      	b.n	4173e4 <lv_task_handler+0x158>
    if(already_running) return 1;
  417402:	2501      	movs	r5, #1
}
  417404:	4628      	mov	r0, r5
  417406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  417408:	2041478c 	.word	0x2041478c
  41740c:	2041479c 	.word	0x2041479c
  417410:	00414d05 	.word	0x00414d05
  417414:	2043a274 	.word	0x2043a274
  417418:	0041723d 	.word	0x0041723d
  41741c:	2041479d 	.word	0x2041479d
  417420:	2041479e 	.word	0x2041479e
  417424:	2041479f 	.word	0x2041479f
  417428:	2043a1a4 	.word	0x2043a1a4
  41742c:	00415da5 	.word	0x00415da5
  417430:	00415d91 	.word	0x00415d91
  417434:	004170d9 	.word	0x004170d9
  417438:	00414d21 	.word	0x00414d21
  41743c:	20414790 	.word	0x20414790
  417440:	20414798 	.word	0x20414798
  417444:	20414794 	.word	0x20414794

00417448 <lv_task_set_prio>:
{
  417448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  41744a:	7d03      	ldrb	r3, [r0, #20]
  41744c:	f003 0307 	and.w	r3, r3, #7
  417450:	428b      	cmp	r3, r1
  417452:	d021      	beq.n	417498 <lv_task_set_prio+0x50>
  417454:	460d      	mov	r5, r1
  417456:	460f      	mov	r7, r1
  417458:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  41745a:	4813      	ldr	r0, [pc, #76]	; (4174a8 <lv_task_set_prio+0x60>)
  41745c:	4b13      	ldr	r3, [pc, #76]	; (4174ac <lv_task_set_prio+0x64>)
  41745e:	4798      	blx	r3
  417460:	4604      	mov	r4, r0
  417462:	b18c      	cbz	r4, 417488 <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  417464:	7d23      	ldrb	r3, [r4, #20]
  417466:	f003 0307 	and.w	r3, r3, #7
  41746a:	429d      	cmp	r5, r3
  41746c:	da05      	bge.n	41747a <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  41746e:	4621      	mov	r1, r4
  417470:	480d      	ldr	r0, [pc, #52]	; (4174a8 <lv_task_set_prio+0x60>)
  417472:	4b0f      	ldr	r3, [pc, #60]	; (4174b0 <lv_task_set_prio+0x68>)
  417474:	4798      	blx	r3
  417476:	4604      	mov	r4, r0
  417478:	e7f3      	b.n	417462 <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  41747a:	42b4      	cmp	r4, r6
  41747c:	d004      	beq.n	417488 <lv_task_set_prio+0x40>
  41747e:	4622      	mov	r2, r4
  417480:	4631      	mov	r1, r6
  417482:	4809      	ldr	r0, [pc, #36]	; (4174a8 <lv_task_set_prio+0x60>)
  417484:	4b0b      	ldr	r3, [pc, #44]	; (4174b4 <lv_task_set_prio+0x6c>)
  417486:	4798      	blx	r3
    if(i == NULL) {
  417488:	b13c      	cbz	r4, 41749a <lv_task_set_prio+0x52>
    task_list_changed = true;
  41748a:	2201      	movs	r2, #1
  41748c:	4b0a      	ldr	r3, [pc, #40]	; (4174b8 <lv_task_set_prio+0x70>)
  41748e:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  417490:	7d33      	ldrb	r3, [r6, #20]
  417492:	f367 0302 	bfi	r3, r7, #0, #3
  417496:	7533      	strb	r3, [r6, #20]
  417498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  41749a:	2200      	movs	r2, #0
  41749c:	4631      	mov	r1, r6
  41749e:	4802      	ldr	r0, [pc, #8]	; (4174a8 <lv_task_set_prio+0x60>)
  4174a0:	4b04      	ldr	r3, [pc, #16]	; (4174b4 <lv_task_set_prio+0x6c>)
  4174a2:	4798      	blx	r3
  4174a4:	e7f1      	b.n	41748a <lv_task_set_prio+0x42>
  4174a6:	bf00      	nop
  4174a8:	2043a1a4 	.word	0x2043a1a4
  4174ac:	00415d91 	.word	0x00415d91
  4174b0:	00415da5 	.word	0x00415da5
  4174b4:	00415f81 	.word	0x00415f81
  4174b8:	2041479f 	.word	0x2041479f

004174bc <lv_task_ready>:
{
  4174bc:	b510      	push	{r4, lr}
  4174be:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  4174c0:	4b03      	ldr	r3, [pc, #12]	; (4174d0 <lv_task_ready+0x14>)
  4174c2:	4798      	blx	r3
  4174c4:	6823      	ldr	r3, [r4, #0]
  4174c6:	1ac0      	subs	r0, r0, r3
  4174c8:	3801      	subs	r0, #1
  4174ca:	6060      	str	r0, [r4, #4]
  4174cc:	bd10      	pop	{r4, pc}
  4174ce:	bf00      	nop
  4174d0:	00414d05 	.word	0x00414d05

004174d4 <lv_task_enable>:
    lv_task_run = en;
  4174d4:	4b01      	ldr	r3, [pc, #4]	; (4174dc <lv_task_enable+0x8>)
  4174d6:	7018      	strb	r0, [r3, #0]
  4174d8:	4770      	bx	lr
  4174da:	bf00      	nop
  4174dc:	2041479c 	.word	0x2041479c

004174e0 <_lv_task_core_init>:
{
  4174e0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  4174e2:	2118      	movs	r1, #24
  4174e4:	4803      	ldr	r0, [pc, #12]	; (4174f4 <_lv_task_core_init+0x14>)
  4174e6:	4b04      	ldr	r3, [pc, #16]	; (4174f8 <_lv_task_core_init+0x18>)
  4174e8:	4798      	blx	r3
    lv_task_enable(true);
  4174ea:	2001      	movs	r0, #1
  4174ec:	4b03      	ldr	r3, [pc, #12]	; (4174fc <_lv_task_core_init+0x1c>)
  4174ee:	4798      	blx	r3
  4174f0:	bd08      	pop	{r3, pc}
  4174f2:	bf00      	nop
  4174f4:	2043a1a4 	.word	0x2043a1a4
  4174f8:	00415ce7 	.word	0x00415ce7
  4174fc:	004174d5 	.word	0x004174d5

00417500 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
  417500:	7803      	ldrb	r3, [r0, #0]
  417502:	f013 0f80 	tst.w	r3, #128	; 0x80
  417506:	d101      	bne.n	41750c <lv_txt_utf8_size+0xc>
        return 1;
  417508:	2001      	movs	r0, #1
  41750a:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
  41750c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  417510:	2ac0      	cmp	r2, #192	; 0xc0
  417512:	d00b      	beq.n	41752c <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
  417514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  417518:	2ae0      	cmp	r2, #224	; 0xe0
  41751a:	d009      	beq.n	417530 <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
  41751c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  417520:	2bf0      	cmp	r3, #240	; 0xf0
  417522:	d001      	beq.n	417528 <lv_txt_utf8_size+0x28>
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
  417524:	2000      	movs	r0, #0
}
  417526:	4770      	bx	lr
        return 4;
  417528:	2004      	movs	r0, #4
  41752a:	4770      	bx	lr
        return 2;
  41752c:	2002      	movs	r0, #2
  41752e:	4770      	bx	lr
        return 3;
  417530:	2003      	movs	r0, #3
  417532:	4770      	bx	lr

00417534 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  417534:	b430      	push	{r4, r5}
  417536:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  417538:	2300      	movs	r3, #0
  41753a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  41753c:	460c      	mov	r4, r1
  41753e:	b151      	cbz	r1, 417556 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  417540:	6822      	ldr	r2, [r4, #0]
  417542:	5c83      	ldrb	r3, [r0, r2]
  417544:	f013 0f80 	tst.w	r3, #128	; 0x80
  417548:	d107      	bne.n	41755a <lv_txt_utf8_next+0x26>
        result = txt[*i];
  41754a:	4618      	mov	r0, r3
        (*i)++;
  41754c:	3201      	adds	r2, #1
  41754e:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  417550:	b002      	add	sp, #8
  417552:	bc30      	pop	{r4, r5}
  417554:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  417556:	ac01      	add	r4, sp, #4
  417558:	e7f2      	b.n	417540 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  41755a:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  41755e:	29c0      	cmp	r1, #192	; 0xc0
  417560:	d00b      	beq.n	41757a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  417562:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  417566:	29e0      	cmp	r1, #224	; 0xe0
  417568:	d019      	beq.n	41759e <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  41756a:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  41756e:	29f0      	cmp	r1, #240	; 0xf0
  417570:	d033      	beq.n	4175da <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  417572:	3201      	adds	r2, #1
  417574:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  417576:	2000      	movs	r0, #0
  417578:	e7ea      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  41757a:	019b      	lsls	r3, r3, #6
  41757c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  417580:	3201      	adds	r2, #1
  417582:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417584:	5c80      	ldrb	r0, [r0, r2]
  417586:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  41758a:	2980      	cmp	r1, #128	; 0x80
  41758c:	d001      	beq.n	417592 <lv_txt_utf8_next+0x5e>
  41758e:	2000      	movs	r0, #0
  417590:	e7de      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  417592:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  417596:	4418      	add	r0, r3
            (*i)++;
  417598:	3201      	adds	r2, #1
  41759a:	6022      	str	r2, [r4, #0]
  41759c:	e7d8      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  41759e:	031b      	lsls	r3, r3, #12
  4175a0:	b29b      	uxth	r3, r3
            (*i)++;
  4175a2:	3201      	adds	r2, #1
  4175a4:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4175a6:	5c81      	ldrb	r1, [r0, r2]
  4175a8:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4175ac:	2d80      	cmp	r5, #128	; 0x80
  4175ae:	d001      	beq.n	4175b4 <lv_txt_utf8_next+0x80>
  4175b0:	2000      	movs	r0, #0
  4175b2:	e7cd      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  4175b4:	0189      	lsls	r1, r1, #6
  4175b6:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  4175ba:	440b      	add	r3, r1
            (*i)++;
  4175bc:	3201      	adds	r2, #1
  4175be:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4175c0:	5c81      	ldrb	r1, [r0, r2]
  4175c2:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  4175c6:	2880      	cmp	r0, #128	; 0x80
  4175c8:	d001      	beq.n	4175ce <lv_txt_utf8_next+0x9a>
  4175ca:	2000      	movs	r0, #0
  4175cc:	e7c0      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  4175ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  4175d2:	1858      	adds	r0, r3, r1
            (*i)++;
  4175d4:	3201      	adds	r2, #1
  4175d6:	6022      	str	r2, [r4, #0]
  4175d8:	e7ba      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  4175da:	049b      	lsls	r3, r3, #18
  4175dc:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  4175e0:	3201      	adds	r2, #1
  4175e2:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4175e4:	5c81      	ldrb	r1, [r0, r2]
  4175e6:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4175ea:	2d80      	cmp	r5, #128	; 0x80
  4175ec:	d001      	beq.n	4175f2 <lv_txt_utf8_next+0xbe>
  4175ee:	2000      	movs	r0, #0
  4175f0:	e7ae      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  4175f2:	0309      	lsls	r1, r1, #12
  4175f4:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  4175f8:	430b      	orrs	r3, r1
            (*i)++;
  4175fa:	3201      	adds	r2, #1
  4175fc:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4175fe:	5c81      	ldrb	r1, [r0, r2]
  417600:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  417604:	2d80      	cmp	r5, #128	; 0x80
  417606:	d001      	beq.n	41760c <lv_txt_utf8_next+0xd8>
  417608:	2000      	movs	r0, #0
  41760a:	e7a1      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  41760c:	0189      	lsls	r1, r1, #6
  41760e:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  417612:	440b      	add	r3, r1
            (*i)++;
  417614:	3201      	adds	r2, #1
  417616:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  417618:	5c81      	ldrb	r1, [r0, r2]
  41761a:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  41761e:	2880      	cmp	r0, #128	; 0x80
  417620:	d001      	beq.n	417626 <lv_txt_utf8_next+0xf2>
  417622:	2000      	movs	r0, #0
  417624:	e794      	b.n	417550 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  417626:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  41762a:	1858      	adds	r0, r3, r1
            (*i)++;
  41762c:	3201      	adds	r2, #1
  41762e:	6022      	str	r2, [r4, #0]
  417630:	e78e      	b.n	417550 <lv_txt_utf8_next+0x1c>
	...

00417634 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  417634:	b570      	push	{r4, r5, r6, lr}
  417636:	b082      	sub	sp, #8
  417638:	4606      	mov	r6, r0
  41763a:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  41763c:	680b      	ldr	r3, [r1, #0]
  41763e:	3b01      	subs	r3, #1
  417640:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
  417642:	2400      	movs	r4, #0
  417644:	e002      	b.n	41764c <lv_txt_utf8_prev+0x18>
            if(*i != 0)
                (*i)--;
            else
                return 0;
        }
        cnt++;
  417646:	3401      	adds	r4, #1
  417648:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
  41764a:	b973      	cbnz	r3, 41766a <lv_txt_utf8_prev+0x36>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  41764c:	2c03      	cmp	r4, #3
  41764e:	d815      	bhi.n	41767c <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  417650:	4b0c      	ldr	r3, [pc, #48]	; (417684 <lv_txt_utf8_prev+0x50>)
  417652:	681b      	ldr	r3, [r3, #0]
  417654:	6828      	ldr	r0, [r5, #0]
  417656:	4430      	add	r0, r6
  417658:	4798      	blx	r3
        if(c_size == 0) {
  41765a:	4603      	mov	r3, r0
  41765c:	2800      	cmp	r0, #0
  41765e:	d1f2      	bne.n	417646 <lv_txt_utf8_prev+0x12>
            if(*i != 0)
  417660:	6828      	ldr	r0, [r5, #0]
  417662:	b160      	cbz	r0, 41767e <lv_txt_utf8_prev+0x4a>
                (*i)--;
  417664:	3801      	subs	r0, #1
  417666:	6028      	str	r0, [r5, #0]
  417668:	e7ed      	b.n	417646 <lv_txt_utf8_prev+0x12>

    uint32_t i_tmp  = *i;
  41766a:	682b      	ldr	r3, [r5, #0]
  41766c:	a902      	add	r1, sp, #8
  41766e:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  417672:	4b05      	ldr	r3, [pc, #20]	; (417688 <lv_txt_utf8_prev+0x54>)
  417674:	681b      	ldr	r3, [r3, #0]
  417676:	4630      	mov	r0, r6
  417678:	4798      	blx	r3

    return letter;
  41767a:	e000      	b.n	41767e <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  41767c:	2000      	movs	r0, #0
}
  41767e:	b002      	add	sp, #8
  417680:	bd70      	pop	{r4, r5, r6, pc}
  417682:	bf00      	nop
  417684:	20400060 	.word	0x20400060
  417688:	20400058 	.word	0x20400058

0041768c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  41768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41768e:	4607      	mov	r7, r0
  417690:	460e      	mov	r6, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
  417692:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
  417694:	4625      	mov	r5, r4
  417696:	e001      	b.n	41769c <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        byte_cnt += c_size > 0 ? c_size : 1;
  417698:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
  41769a:	3501      	adds	r5, #1
  41769c:	42b5      	cmp	r5, r6
  41769e:	d207      	bcs.n	4176b0 <lv_txt_utf8_get_byte_id+0x24>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  4176a0:	4b04      	ldr	r3, [pc, #16]	; (4176b4 <lv_txt_utf8_get_byte_id+0x28>)
  4176a2:	681b      	ldr	r3, [r3, #0]
  4176a4:	1938      	adds	r0, r7, r4
  4176a6:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
  4176a8:	2800      	cmp	r0, #0
  4176aa:	d1f5      	bne.n	417698 <lv_txt_utf8_get_byte_id+0xc>
  4176ac:	2001      	movs	r0, #1
  4176ae:	e7f3      	b.n	417698 <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
  4176b0:	4620      	mov	r0, r4
  4176b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4176b4:	20400060 	.word	0x20400060

004176b8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  4176b8:	b570      	push	{r4, r5, r6, lr}
  4176ba:	b082      	sub	sp, #8
  4176bc:	4606      	mov	r6, r0
  4176be:	460d      	mov	r5, r1
    uint32_t i        = 0;
  4176c0:	2400      	movs	r4, #0
  4176c2:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  4176c4:	e005      	b.n	4176d2 <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  4176c6:	4b06      	ldr	r3, [pc, #24]	; (4176e0 <lv_txt_utf8_get_char_id+0x28>)
  4176c8:	681b      	ldr	r3, [r3, #0]
  4176ca:	a901      	add	r1, sp, #4
  4176cc:	4630      	mov	r0, r6
  4176ce:	4798      	blx	r3
        char_cnt++;
  4176d0:	3401      	adds	r4, #1
    while(i < byte_id) {
  4176d2:	9b01      	ldr	r3, [sp, #4]
  4176d4:	42ab      	cmp	r3, r5
  4176d6:	d3f6      	bcc.n	4176c6 <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  4176d8:	4620      	mov	r0, r4
  4176da:	b002      	add	sp, #8
  4176dc:	bd70      	pop	{r4, r5, r6, pc}
  4176de:	bf00      	nop
  4176e0:	20400058 	.word	0x20400058

004176e4 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  4176e4:	b530      	push	{r4, r5, lr}
  4176e6:	b083      	sub	sp, #12
  4176e8:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
  4176ea:	2400      	movs	r4, #0
  4176ec:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
  4176ee:	e005      	b.n	4176fc <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
  4176f0:	4b06      	ldr	r3, [pc, #24]	; (41770c <lv_txt_utf8_get_length+0x28>)
  4176f2:	681b      	ldr	r3, [r3, #0]
  4176f4:	a901      	add	r1, sp, #4
  4176f6:	4628      	mov	r0, r5
  4176f8:	4798      	blx	r3
        len++;
  4176fa:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
  4176fc:	9b01      	ldr	r3, [sp, #4]
  4176fe:	5ceb      	ldrb	r3, [r5, r3]
  417700:	2b00      	cmp	r3, #0
  417702:	d1f5      	bne.n	4176f0 <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
  417704:	4620      	mov	r0, r4
  417706:	b003      	add	sp, #12
  417708:	bd30      	pop	{r4, r5, pc}
  41770a:	bf00      	nop
  41770c:	20400058 	.word	0x20400058

00417710 <_lv_txt_is_cmd>:
{
  417710:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  417712:	2923      	cmp	r1, #35	; 0x23
  417714:	d004      	beq.n	417720 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  417716:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  417718:	7813      	ldrb	r3, [r2, #0]
  41771a:	2b01      	cmp	r3, #1
  41771c:	d014      	beq.n	417748 <_lv_txt_is_cmd+0x38>
}
  41771e:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  417720:	7803      	ldrb	r3, [r0, #0]
  417722:	b91b      	cbnz	r3, 41772c <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  417724:	2301      	movs	r3, #1
  417726:	7003      	strb	r3, [r0, #0]
            ret    = true;
  417728:	4618      	mov	r0, r3
  41772a:	e7f5      	b.n	417718 <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  41772c:	2b01      	cmp	r3, #1
  41772e:	d003      	beq.n	417738 <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  417730:	2b02      	cmp	r3, #2
  417732:	d005      	beq.n	417740 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  417734:	2000      	movs	r0, #0
  417736:	e7ef      	b.n	417718 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  417738:	2300      	movs	r3, #0
  41773a:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  41773c:	4618      	mov	r0, r3
  41773e:	e7eb      	b.n	417718 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  417740:	2300      	movs	r3, #0
  417742:	7003      	strb	r3, [r0, #0]
            ret    = true;
  417744:	2001      	movs	r0, #1
  417746:	e7e7      	b.n	417718 <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  417748:	2920      	cmp	r1, #32
  41774a:	d001      	beq.n	417750 <_lv_txt_is_cmd+0x40>
        ret = true;
  41774c:	2001      	movs	r0, #1
  41774e:	e7e6      	b.n	41771e <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  417750:	2302      	movs	r3, #2
  417752:	7013      	strb	r3, [r2, #0]
        ret = true;
  417754:	2001      	movs	r0, #1
  417756:	4770      	bx	lr

00417758 <lv_txt_get_next_word>:
{
  417758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41775c:	b089      	sub	sp, #36	; 0x24
  41775e:	9103      	str	r1, [sp, #12]
  417760:	9202      	str	r2, [sp, #8]
  417762:	9304      	str	r3, [sp, #16]
  417764:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  417768:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  41776c:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  41776e:	2800      	cmp	r0, #0
  417770:	f000 808f 	beq.w	417892 <lv_txt_get_next_word+0x13a>
  417774:	4607      	mov	r7, r0
  417776:	7803      	ldrb	r3, [r0, #0]
  417778:	2b00      	cmp	r3, #0
  41777a:	f000 808d 	beq.w	417898 <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  41777e:	2900      	cmp	r1, #0
  417780:	f000 8090 	beq.w	4178a4 <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417784:	f01b 0f02 	tst.w	fp, #2
  417788:	d002      	beq.n	417790 <lv_txt_get_next_word+0x38>
  41778a:	f647 4318 	movw	r3, #31768	; 0x7c18
  41778e:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  417790:	2600      	movs	r6, #0
  417792:	9607      	str	r6, [sp, #28]
  417794:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  417796:	4b47      	ldr	r3, [pc, #284]	; (4178b4 <lv_txt_get_next_word+0x15c>)
  417798:	681b      	ldr	r3, [r3, #0]
  41779a:	a907      	add	r1, sp, #28
  41779c:	4638      	mov	r0, r7
  41779e:	4798      	blx	r3
  4177a0:	4604      	mov	r4, r0
    i_next_next = i_next;
  4177a2:	9b07      	ldr	r3, [sp, #28]
  4177a4:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  4177a6:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  4177aa:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  4177ac:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  4177ae:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  4177b0:	e039      	b.n	417826 <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  4177b2:	9a01      	ldr	r2, [sp, #4]
  4177b4:	4621      	mov	r1, r4
  4177b6:	9803      	ldr	r0, [sp, #12]
  4177b8:	4b3f      	ldr	r3, [pc, #252]	; (4178b8 <lv_txt_get_next_word+0x160>)
  4177ba:	4798      	blx	r3
  4177bc:	b203      	sxth	r3, r0
        cur_w += letter_w;
  4177be:	4428      	add	r0, r5
  4177c0:	b280      	uxth	r0, r0
  4177c2:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  4177c4:	2b00      	cmp	r3, #0
  4177c6:	dd02      	ble.n	4177ce <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  4177c8:	9b02      	ldr	r3, [sp, #8]
  4177ca:	18c5      	adds	r5, r0, r3
  4177cc:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  4177ce:	f1b8 3fff 	cmp.w	r8, #4294967295
  4177d2:	d00f      	beq.n	4177f4 <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  4177d4:	2c0d      	cmp	r4, #13
  4177d6:	bf18      	it	ne
  4177d8:	2c0a      	cmpne	r4, #10
  4177da:	bf0c      	ite	eq
  4177dc:	2101      	moveq	r1, #1
  4177de:	2100      	movne	r1, #0
  4177e0:	d038      	beq.n	417854 <lv_txt_get_next_word+0xfc>
  4177e2:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  4177e4:	4a35      	ldr	r2, [pc, #212]	; (4178bc <lv_txt_get_next_word+0x164>)
  4177e6:	5cd2      	ldrb	r2, [r2, r3]
  4177e8:	b162      	cbz	r2, 417804 <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  4177ea:	4294      	cmp	r4, r2
  4177ec:	d009      	beq.n	417802 <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  4177ee:	3301      	adds	r3, #1
  4177f0:	b2db      	uxtb	r3, r3
  4177f2:	e7f7      	b.n	4177e4 <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  4177f4:	9b02      	ldr	r3, [sp, #8]
  4177f6:	1aeb      	subs	r3, r5, r3
  4177f8:	9a04      	ldr	r2, [sp, #16]
  4177fa:	4293      	cmp	r3, r2
  4177fc:	ddea      	ble.n	4177d4 <lv_txt_get_next_word+0x7c>
            break_index = i;
  4177fe:	46b0      	mov	r8, r6
  417800:	e7e8      	b.n	4177d4 <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  417802:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  417804:	bb31      	cbnz	r1, 417854 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  417806:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417808:	3300      	adds	r3, #0
  41780a:	bf18      	it	ne
  41780c:	2301      	movne	r3, #1
  41780e:	f1b8 3fff 	cmp.w	r8, #4294967295
  417812:	bf18      	it	ne
  417814:	2300      	movne	r3, #0
  417816:	b10b      	cbz	r3, 41781c <lv_txt_get_next_word+0xc4>
  417818:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  41781a:	601d      	str	r5, [r3, #0]
        i = i_next;
  41781c:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  41781e:	9b06      	ldr	r3, [sp, #24]
  417820:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  417822:	46d1      	mov	r9, sl
  417824:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  417826:	5dbb      	ldrb	r3, [r7, r6]
  417828:	b1e3      	cbz	r3, 417864 <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  41782a:	4b22      	ldr	r3, [pc, #136]	; (4178b4 <lv_txt_get_next_word+0x15c>)
  41782c:	681b      	ldr	r3, [r3, #0]
  41782e:	a906      	add	r1, sp, #24
  417830:	4638      	mov	r0, r7
  417832:	4798      	blx	r3
  417834:	9001      	str	r0, [sp, #4]
        word_len++;
  417836:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  41783a:	f01b 0f01 	tst.w	fp, #1
  41783e:	d0b8      	beq.n	4177b2 <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  417840:	4621      	mov	r1, r4
  417842:	9814      	ldr	r0, [sp, #80]	; 0x50
  417844:	4b1e      	ldr	r3, [pc, #120]	; (4178c0 <lv_txt_get_next_word+0x168>)
  417846:	4798      	blx	r3
  417848:	2800      	cmp	r0, #0
  41784a:	d0b2      	beq.n	4177b2 <lv_txt_get_next_word+0x5a>
                i = i_next;
  41784c:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  41784e:	9b06      	ldr	r3, [sp, #24]
  417850:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  417852:	e7e6      	b.n	417822 <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  417854:	2e00      	cmp	r6, #0
  417856:	bf08      	it	eq
  417858:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  41785c:	d102      	bne.n	417864 <lv_txt_get_next_word+0x10c>
  41785e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417860:	b103      	cbz	r3, 417864 <lv_txt_get_next_word+0x10c>
  417862:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  417864:	f1b8 3fff 	cmp.w	r8, #4294967295
  417868:	d008      	beq.n	41787c <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  41786a:	9b05      	ldr	r3, [sp, #20]
  41786c:	b9b3      	cbnz	r3, 41789c <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  41786e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  417870:	b1eb      	cbz	r3, 4178ae <lv_txt_get_next_word+0x156>
  417872:	2300      	movs	r3, #0
  417874:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  417876:	6013      	str	r3, [r2, #0]
    return 0;
  417878:	4698      	mov	r8, r3
  41787a:	e00f      	b.n	41789c <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  41787c:	f1b9 0f00 	cmp.w	r9, #0
  417880:	d004      	beq.n	41788c <lv_txt_get_next_word+0x134>
  417882:	9b01      	ldr	r3, [sp, #4]
  417884:	2c0d      	cmp	r4, #13
  417886:	bf08      	it	eq
  417888:	2b0a      	cmpeq	r3, #10
  41788a:	d10e      	bne.n	4178aa <lv_txt_get_next_word+0x152>
  41788c:	f8dd 801c 	ldr.w	r8, [sp, #28]
  417890:	e004      	b.n	41789c <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  417892:	f04f 0800 	mov.w	r8, #0
  417896:	e001      	b.n	41789c <lv_txt_get_next_word+0x144>
  417898:	f04f 0800 	mov.w	r8, #0
}
  41789c:	4640      	mov	r0, r8
  41789e:	b009      	add	sp, #36	; 0x24
  4178a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  4178a4:	f04f 0800 	mov.w	r8, #0
  4178a8:	e7f8      	b.n	41789c <lv_txt_get_next_word+0x144>
  4178aa:	46b0      	mov	r8, r6
  4178ac:	e7f6      	b.n	41789c <lv_txt_get_next_word+0x144>
    return 0;
  4178ae:	f04f 0800 	mov.w	r8, #0
  4178b2:	e7f3      	b.n	41789c <lv_txt_get_next_word+0x144>
  4178b4:	20400058 	.word	0x20400058
  4178b8:	00413745 	.word	0x00413745
  4178bc:	0042c3a4 	.word	0x0042c3a4
  4178c0:	00417711 	.word	0x00417711

004178c4 <_lv_txt_get_next_line>:
{
  4178c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4178c8:	b089      	sub	sp, #36	; 0x24
  4178ca:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  4178ce:	2800      	cmp	r0, #0
  4178d0:	d05f      	beq.n	417992 <_lv_txt_get_next_line+0xce>
  4178d2:	4689      	mov	r9, r1
  4178d4:	4690      	mov	r8, r2
  4178d6:	461d      	mov	r5, r3
  4178d8:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  4178da:	2900      	cmp	r1, #0
  4178dc:	d05b      	beq.n	417996 <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  4178de:	f016 0f12 	tst.w	r6, #18
  4178e2:	d145      	bne.n	417970 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  4178e4:	f016 0f02 	tst.w	r6, #2
  4178e8:	d001      	beq.n	4178ee <_lv_txt_get_next_line+0x2a>
  4178ea:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  4178ee:	2300      	movs	r3, #0
  4178f0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  4178f4:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  4178f6:	9b06      	ldr	r3, [sp, #24]
  4178f8:	18e0      	adds	r0, r4, r3
  4178fa:	5ce2      	ldrb	r2, [r4, r3]
  4178fc:	b332      	cbz	r2, 41794c <_lv_txt_get_next_line+0x88>
  4178fe:	2d00      	cmp	r5, #0
  417900:	dd24      	ble.n	41794c <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  417902:	2200      	movs	r2, #0
  417904:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  417906:	fab3 f383 	clz	r3, r3
  41790a:	095b      	lsrs	r3, r3, #5
  41790c:	9303      	str	r3, [sp, #12]
  41790e:	f10d 031f 	add.w	r3, sp, #31
  417912:	9302      	str	r3, [sp, #8]
  417914:	ab05      	add	r3, sp, #20
  417916:	9301      	str	r3, [sp, #4]
  417918:	9600      	str	r6, [sp, #0]
  41791a:	462b      	mov	r3, r5
  41791c:	4642      	mov	r2, r8
  41791e:	4649      	mov	r1, r9
  417920:	4f1e      	ldr	r7, [pc, #120]	; (41799c <_lv_txt_get_next_line+0xd8>)
  417922:	47b8      	blx	r7
        max_width -= word_w;
  417924:	9b05      	ldr	r3, [sp, #20]
  417926:	1aed      	subs	r5, r5, r3
  417928:	b22d      	sxth	r5, r5
        if(advance == 0) {
  41792a:	4603      	mov	r3, r0
  41792c:	b310      	cbz	r0, 417974 <_lv_txt_get_next_line+0xb0>
        i += advance;
  41792e:	9806      	ldr	r0, [sp, #24]
  417930:	4418      	add	r0, r3
  417932:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  417934:	7823      	ldrb	r3, [r4, #0]
  417936:	2b0d      	cmp	r3, #13
  417938:	bf18      	it	ne
  41793a:	2b0a      	cmpne	r3, #10
  41793c:	d006      	beq.n	41794c <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  41793e:	5c23      	ldrb	r3, [r4, r0]
  417940:	2b0d      	cmp	r3, #13
  417942:	bf18      	it	ne
  417944:	2b0a      	cmpne	r3, #10
  417946:	d1d6      	bne.n	4178f6 <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  417948:	3001      	adds	r0, #1
  41794a:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  41794c:	9b06      	ldr	r3, [sp, #24]
  41794e:	b1d3      	cbz	r3, 417986 <_lv_txt_get_next_line+0xc2>
    return i;
  417950:	9806      	ldr	r0, [sp, #24]
}
  417952:	b009      	add	sp, #36	; 0x24
  417954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  417958:	3001      	adds	r0, #1
  41795a:	5c23      	ldrb	r3, [r4, r0]
  41795c:	2b0a      	cmp	r3, #10
  41795e:	bf18      	it	ne
  417960:	2b0d      	cmpne	r3, #13
  417962:	d001      	beq.n	417968 <_lv_txt_get_next_line+0xa4>
  417964:	2b00      	cmp	r3, #0
  417966:	d1f7      	bne.n	417958 <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  417968:	2b00      	cmp	r3, #0
  41796a:	d0f2      	beq.n	417952 <_lv_txt_get_next_line+0x8e>
  41796c:	3001      	adds	r0, #1
  41796e:	e7f0      	b.n	417952 <_lv_txt_get_next_line+0x8e>
  417970:	2000      	movs	r0, #0
  417972:	e7f2      	b.n	41795a <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  417974:	9b06      	ldr	r3, [sp, #24]
  417976:	2b00      	cmp	r3, #0
  417978:	d1e8      	bne.n	41794c <_lv_txt_get_next_line+0x88>
  41797a:	4b09      	ldr	r3, [pc, #36]	; (4179a0 <_lv_txt_get_next_line+0xdc>)
  41797c:	681b      	ldr	r3, [r3, #0]
  41797e:	a906      	add	r1, sp, #24
  417980:	4620      	mov	r0, r4
  417982:	4798      	blx	r3
  417984:	e7e2      	b.n	41794c <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  417986:	4b06      	ldr	r3, [pc, #24]	; (4179a0 <_lv_txt_get_next_line+0xdc>)
  417988:	681b      	ldr	r3, [r3, #0]
  41798a:	a906      	add	r1, sp, #24
  41798c:	4620      	mov	r0, r4
  41798e:	4798      	blx	r3
  417990:	e7de      	b.n	417950 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  417992:	2000      	movs	r0, #0
  417994:	e7dd      	b.n	417952 <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  417996:	2000      	movs	r0, #0
  417998:	e7db      	b.n	417952 <_lv_txt_get_next_line+0x8e>
  41799a:	bf00      	nop
  41799c:	00417759 	.word	0x00417759
  4179a0:	20400058 	.word	0x20400058

004179a4 <_lv_txt_get_width>:
{
  4179a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4179a8:	b085      	sub	sp, #20
  4179aa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  4179ae:	2800      	cmp	r0, #0
  4179b0:	d041      	beq.n	417a36 <_lv_txt_get_width+0x92>
  4179b2:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  4179b4:	2a00      	cmp	r2, #0
  4179b6:	d041      	beq.n	417a3c <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  4179b8:	2000      	movs	r0, #0
  4179ba:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  4179bc:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  4179c0:	b129      	cbz	r1, 4179ce <_lv_txt_get_width+0x2a>
  4179c2:	4698      	mov	r8, r3
  4179c4:	9201      	str	r2, [sp, #4]
  4179c6:	460d      	mov	r5, r1
  4179c8:	f04f 0a00 	mov.w	sl, #0
  4179cc:	e00e      	b.n	4179ec <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  4179ce:	4682      	mov	sl, r0
  4179d0:	e02d      	b.n	417a2e <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  4179d2:	464a      	mov	r2, r9
  4179d4:	4659      	mov	r1, fp
  4179d6:	9801      	ldr	r0, [sp, #4]
  4179d8:	4b1a      	ldr	r3, [pc, #104]	; (417a44 <_lv_txt_get_width+0xa0>)
  4179da:	4798      	blx	r3
  4179dc:	b203      	sxth	r3, r0
            if(char_width > 0) {
  4179de:	2b00      	cmp	r3, #0
  4179e0:	dd04      	ble.n	4179ec <_lv_txt_get_width+0x48>
                width += char_width;
  4179e2:	4450      	add	r0, sl
                width += letter_space;
  4179e4:	fa18 f080 	uxtah	r0, r8, r0
  4179e8:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  4179ec:	9b03      	ldr	r3, [sp, #12]
  4179ee:	429d      	cmp	r5, r3
  4179f0:	d916      	bls.n	417a20 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  4179f2:	4e15      	ldr	r6, [pc, #84]	; (417a48 <_lv_txt_get_width+0xa4>)
  4179f4:	6833      	ldr	r3, [r6, #0]
  4179f6:	a903      	add	r1, sp, #12
  4179f8:	4620      	mov	r0, r4
  4179fa:	4798      	blx	r3
  4179fc:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  4179fe:	6833      	ldr	r3, [r6, #0]
  417a00:	2100      	movs	r1, #0
  417a02:	9803      	ldr	r0, [sp, #12]
  417a04:	4420      	add	r0, r4
  417a06:	4798      	blx	r3
  417a08:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  417a0a:	f017 0f01 	tst.w	r7, #1
  417a0e:	d0e0      	beq.n	4179d2 <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  417a10:	4659      	mov	r1, fp
  417a12:	f10d 000b 	add.w	r0, sp, #11
  417a16:	4b0d      	ldr	r3, [pc, #52]	; (417a4c <_lv_txt_get_width+0xa8>)
  417a18:	4798      	blx	r3
  417a1a:	2800      	cmp	r0, #0
  417a1c:	d1e6      	bne.n	4179ec <_lv_txt_get_width+0x48>
  417a1e:	e7d8      	b.n	4179d2 <_lv_txt_get_width+0x2e>
        if(width > 0) {
  417a20:	f1ba 0f00 	cmp.w	sl, #0
  417a24:	dd03      	ble.n	417a2e <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  417a26:	ebaa 0008 	sub.w	r0, sl, r8
  417a2a:	fa0f fa80 	sxth.w	sl, r0
}
  417a2e:	4650      	mov	r0, sl
  417a30:	b005      	add	sp, #20
  417a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  417a36:	f04f 0a00 	mov.w	sl, #0
  417a3a:	e7f8      	b.n	417a2e <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  417a3c:	f04f 0a00 	mov.w	sl, #0
  417a40:	e7f5      	b.n	417a2e <_lv_txt_get_width+0x8a>
  417a42:	bf00      	nop
  417a44:	00413745 	.word	0x00413745
  417a48:	20400058 	.word	0x20400058
  417a4c:	00417711 	.word	0x00417711

00417a50 <_lv_txt_get_size>:
{
  417a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417a54:	b087      	sub	sp, #28
  417a56:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  417a5a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  417a5e:	9404      	str	r4, [sp, #16]
  417a60:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  417a64:	2400      	movs	r4, #0
  417a66:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  417a68:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  417a6a:	2900      	cmp	r1, #0
  417a6c:	d04d      	beq.n	417b0a <_lv_txt_get_size+0xba>
  417a6e:	460f      	mov	r7, r1
    if(font == NULL) return;
  417a70:	2a00      	cmp	r2, #0
  417a72:	d04a      	beq.n	417b0a <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  417a74:	f018 0f02 	tst.w	r8, #2
  417a78:	d002      	beq.n	417a80 <_lv_txt_get_size+0x30>
  417a7a:	f647 4118 	movw	r1, #31768	; 0x7c18
  417a7e:	9104      	str	r1, [sp, #16]
  417a80:	9303      	str	r3, [sp, #12]
  417a82:	9202      	str	r2, [sp, #8]
  417a84:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  417a86:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  417a8a:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  417a8c:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  417a90:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  417a92:	197e      	adds	r6, r7, r5
  417a94:	5d7b      	ldrb	r3, [r7, r5]
  417a96:	b323      	cbz	r3, 417ae2 <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  417a98:	f8cd 8000 	str.w	r8, [sp]
  417a9c:	9b04      	ldr	r3, [sp, #16]
  417a9e:	9a03      	ldr	r2, [sp, #12]
  417aa0:	9902      	ldr	r1, [sp, #8]
  417aa2:	4630      	mov	r0, r6
  417aa4:	f8df b074 	ldr.w	fp, [pc, #116]	; 417b1c <_lv_txt_get_size+0xcc>
  417aa8:	47d8      	blx	fp
  417aaa:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  417aac:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  417ab0:	eb03 020a 	add.w	r2, r3, sl
  417ab4:	444a      	add	r2, r9
  417ab6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  417aba:	d226      	bcs.n	417b0a <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  417abc:	4453      	add	r3, sl
            size_res->y += line_space;
  417abe:	fa19 f383 	uxtah	r3, r9, r3
  417ac2:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  417ac4:	f8cd 8000 	str.w	r8, [sp]
  417ac8:	9b03      	ldr	r3, [sp, #12]
  417aca:	9a02      	ldr	r2, [sp, #8]
  417acc:	4601      	mov	r1, r0
  417ace:	4630      	mov	r0, r6
  417ad0:	4e11      	ldr	r6, [pc, #68]	; (417b18 <_lv_txt_get_size+0xc8>)
  417ad2:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  417ad4:	f9b4 3000 	ldrsh.w	r3, [r4]
  417ad8:	4298      	cmp	r0, r3
  417ada:	bfb8      	it	lt
  417adc:	4618      	movlt	r0, r3
  417ade:	8020      	strh	r0, [r4, #0]
  417ae0:	e7d7      	b.n	417a92 <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  417ae2:	b15d      	cbz	r5, 417afc <_lv_txt_get_size+0xac>
  417ae4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  417ae8:	2b0d      	cmp	r3, #13
  417aea:	bf18      	it	ne
  417aec:	2b0a      	cmpne	r3, #10
  417aee:	d105      	bne.n	417afc <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  417af0:	eb0a 0309 	add.w	r3, sl, r9
  417af4:	8862      	ldrh	r2, [r4, #2]
  417af6:	fa12 f383 	uxtah	r3, r2, r3
  417afa:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  417afc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  417b00:	b133      	cbz	r3, 417b10 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  417b02:	eba3 0909 	sub.w	r9, r3, r9
  417b06:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  417b0a:	b007      	add	sp, #28
  417b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  417b10:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  417b14:	8063      	strh	r3, [r4, #2]
  417b16:	e7f8      	b.n	417b0a <_lv_txt_get_size+0xba>
  417b18:	004179a5 	.word	0x004179a5
  417b1c:	004178c5 	.word	0x004178c5

00417b20 <_lv_txt_set_text_vfmt>:
{
  417b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417b24:	b082      	sub	sp, #8
  417b26:	4607      	mov	r7, r0
  417b28:	460d      	mov	r5, r1
    va_copy(ap_copy, ap);
  417b2a:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
  417b2c:	460b      	mov	r3, r1
  417b2e:	4602      	mov	r2, r0
  417b30:	2100      	movs	r1, #0
  417b32:	4608      	mov	r0, r1
  417b34:	4c0f      	ldr	r4, [pc, #60]	; (417b74 <_lv_txt_set_text_vfmt+0x54>)
  417b36:	47a0      	blx	r4
  417b38:	4680      	mov	r8, r0
    text = lv_mem_alloc(len + 1);
  417b3a:	1c46      	adds	r6, r0, #1
  417b3c:	4630      	mov	r0, r6
  417b3e:	4b0e      	ldr	r3, [pc, #56]	; (417b78 <_lv_txt_set_text_vfmt+0x58>)
  417b40:	4798      	blx	r3
  417b42:	4604      	mov	r4, r0
    LV_ASSERT_MEM(text);
  417b44:	4b0d      	ldr	r3, [pc, #52]	; (417b7c <_lv_txt_set_text_vfmt+0x5c>)
  417b46:	4798      	blx	r3
  417b48:	b168      	cbz	r0, 417b66 <_lv_txt_set_text_vfmt+0x46>
    if(text == NULL) {
  417b4a:	b144      	cbz	r4, 417b5e <_lv_txt_set_text_vfmt+0x3e>
    text[len] = 0; /* Ensure NULL termination */
  417b4c:	2300      	movs	r3, #0
  417b4e:	f804 3008 	strb.w	r3, [r4, r8]
    lv_vsnprintf(text, len + 1, fmt, ap);
  417b52:	462b      	mov	r3, r5
  417b54:	463a      	mov	r2, r7
  417b56:	4631      	mov	r1, r6
  417b58:	4620      	mov	r0, r4
  417b5a:	4d06      	ldr	r5, [pc, #24]	; (417b74 <_lv_txt_set_text_vfmt+0x54>)
  417b5c:	47a8      	blx	r5
}
  417b5e:	4620      	mov	r0, r4
  417b60:	b002      	add	sp, #8
  417b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(text);
  417b66:	4622      	mov	r2, r4
  417b68:	2300      	movs	r3, #0
  417b6a:	4805      	ldr	r0, [pc, #20]	; (417b80 <_lv_txt_set_text_vfmt+0x60>)
  417b6c:	4905      	ldr	r1, [pc, #20]	; (417b84 <_lv_txt_set_text_vfmt+0x64>)
  417b6e:	4788      	blx	r1
  417b70:	e7fe      	b.n	417b70 <_lv_txt_set_text_vfmt+0x50>
  417b72:	bf00      	nop
  417b74:	004170b9 	.word	0x004170b9
  417b78:	00416189 	.word	0x00416189
  417b7c:	00415a81 	.word	0x00415a81
  417b80:	00428c94 	.word	0x00428c94
  417b84:	00415a8d 	.word	0x00415a8d

00417b88 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  417b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  417b8c:	4681      	mov	r9, r0
  417b8e:	468a      	mov	sl, r1
  417b90:	4615      	mov	r5, r2
  417b92:	461f      	mov	r7, r3
  417b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  417b98:	4608      	mov	r0, r1
  417b9a:	e003      	b.n	417ba4 <_lv_utils_bsearch+0x1c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
            base = (middle += size);
        }
        else if(c < 0) {
  417b9c:	2800      	cmp	r0, #0
  417b9e:	da16      	bge.n	417bce <_lv_utils_bsearch+0x46>
            n /= 2;
            middle = base;
  417ba0:	4650      	mov	r0, sl
            n /= 2;
  417ba2:	4635      	mov	r5, r6
    for(middle = base; n != 0;) {
  417ba4:	b185      	cbz	r5, 417bc8 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  417ba6:	086e      	lsrs	r6, r5, #1
  417ba8:	fb07 0406 	mla	r4, r7, r6, r0
        if((c = (*cmp)(key, middle)) > 0) {
  417bac:	4621      	mov	r1, r4
  417bae:	4648      	mov	r0, r9
  417bb0:	47c0      	blx	r8
  417bb2:	2800      	cmp	r0, #0
  417bb4:	ddf2      	ble.n	417b9c <_lv_utils_bsearch+0x14>
            n    = (n / 2) - ((n & 1) == 0);
  417bb6:	f015 0f01 	tst.w	r5, #1
  417bba:	bf0c      	ite	eq
  417bbc:	2501      	moveq	r5, #1
  417bbe:	2500      	movne	r5, #0
  417bc0:	1b75      	subs	r5, r6, r5
            base = (middle += size);
  417bc2:	19e0      	adds	r0, r4, r7
  417bc4:	4682      	mov	sl, r0
  417bc6:	e7ed      	b.n	417ba4 <_lv_utils_bsearch+0x1c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  417bc8:	2000      	movs	r0, #0
  417bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return (char *)middle;
  417bce:	4620      	mov	r0, r4
}
  417bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00417bd4 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  417bd4:	b570      	push	{r4, r5, r6, lr}
  417bd6:	4604      	mov	r4, r0
  417bd8:	460d      	mov	r5, r1
  417bda:	4616      	mov	r6, r2
    if(th->base) {
  417bdc:	6880      	ldr	r0, [r0, #8]
  417bde:	b108      	cbz	r0, 417be4 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  417be0:	f7ff fff8 	bl	417bd4 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  417be4:	6863      	ldr	r3, [r4, #4]
  417be6:	b11b      	cbz	r3, 417bf0 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  417be8:	4631      	mov	r1, r6
  417bea:	4628      	mov	r0, r5
  417bec:	4798      	blx	r3
  417bee:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  417bf0:	6823      	ldr	r3, [r4, #0]
  417bf2:	b123      	cbz	r3, 417bfe <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  417bf4:	4632      	mov	r2, r6
  417bf6:	4629      	mov	r1, r5
  417bf8:	4801      	ldr	r0, [pc, #4]	; (417c00 <apply_theme+0x2c>)
  417bfa:	6800      	ldr	r0, [r0, #0]
  417bfc:	4798      	blx	r3
  417bfe:	bd70      	pop	{r4, r5, r6, pc}
  417c00:	204147a0 	.word	0x204147a0

00417c04 <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  417c04:	b538      	push	{r3, r4, r5, lr}
  417c06:	4604      	mov	r4, r0
    switch(name) {
  417c08:	3901      	subs	r1, #1
  417c0a:	2927      	cmp	r1, #39	; 0x27
  417c0c:	f200 8150 	bhi.w	417eb0 <clear_styles+0x2ac>
  417c10:	e8df f011 	tbh	[pc, r1, lsl #1]
  417c14:	002c0028 	.word	0x002c0028
  417c18:	0046006b 	.word	0x0046006b
  417c1c:	00380034 	.word	0x00380034
  417c20:	0057012d 	.word	0x0057012d
  417c24:	00ea0083 	.word	0x00ea0083
  417c28:	013a0030 	.word	0x013a0030
  417c2c:	014500dd 	.word	0x014500dd
  417c30:	005f005b 	.word	0x005f005b
  417c34:	0063003f 	.word	0x0063003f
  417c38:	00670095 	.word	0x00670095
  417c3c:	00d900cf 	.word	0x00d900cf
  417c40:	008a0141 	.word	0x008a0141
  417c44:	00cb008e 	.word	0x00cb008e
  417c48:	00c40099 	.word	0x00c40099
  417c4c:	01220079 	.word	0x01220079
  417c50:	00720129 	.word	0x00720129
  417c54:	00f4004d 	.word	0x00f4004d
  417c58:	00b300a3 	.word	0x00b300a3
  417c5c:	00ba0115 	.word	0x00ba0115
  417c60:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  417c64:	2100      	movs	r1, #0
  417c66:	4b93      	ldr	r3, [pc, #588]	; (417eb4 <clear_styles+0x2b0>)
  417c68:	4798      	blx	r3
            break;
  417c6a:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  417c6c:	2100      	movs	r1, #0
  417c6e:	4b91      	ldr	r3, [pc, #580]	; (417eb4 <clear_styles+0x2b0>)
  417c70:	4798      	blx	r3
            break;
  417c72:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  417c74:	2100      	movs	r1, #0
  417c76:	4b8f      	ldr	r3, [pc, #572]	; (417eb4 <clear_styles+0x2b0>)
  417c78:	4798      	blx	r3
            break;
  417c7a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  417c7c:	2100      	movs	r1, #0
  417c7e:	4b8d      	ldr	r3, [pc, #564]	; (417eb4 <clear_styles+0x2b0>)
  417c80:	4798      	blx	r3
            break;
  417c82:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  417c84:	2100      	movs	r1, #0
  417c86:	4d8b      	ldr	r5, [pc, #556]	; (417eb4 <clear_styles+0x2b0>)
  417c88:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  417c8a:	2101      	movs	r1, #1
  417c8c:	4620      	mov	r0, r4
  417c8e:	47a8      	blx	r5
            break;
  417c90:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  417c92:	2100      	movs	r1, #0
  417c94:	4d87      	ldr	r5, [pc, #540]	; (417eb4 <clear_styles+0x2b0>)
  417c96:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  417c98:	2101      	movs	r1, #1
  417c9a:	4620      	mov	r0, r4
  417c9c:	47a8      	blx	r5
            break;
  417c9e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  417ca0:	2100      	movs	r1, #0
  417ca2:	4d84      	ldr	r5, [pc, #528]	; (417eb4 <clear_styles+0x2b0>)
  417ca4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  417ca6:	2101      	movs	r1, #1
  417ca8:	4620      	mov	r0, r4
  417caa:	47a8      	blx	r5
            break;
  417cac:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  417cae:	2100      	movs	r1, #0
  417cb0:	4d80      	ldr	r5, [pc, #512]	; (417eb4 <clear_styles+0x2b0>)
  417cb2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  417cb4:	2101      	movs	r1, #1
  417cb6:	4620      	mov	r0, r4
  417cb8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  417cba:	2102      	movs	r1, #2
  417cbc:	4620      	mov	r0, r4
  417cbe:	47a8      	blx	r5
            break;
  417cc0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  417cc2:	2100      	movs	r1, #0
  417cc4:	4b7b      	ldr	r3, [pc, #492]	; (417eb4 <clear_styles+0x2b0>)
  417cc6:	4798      	blx	r3
            break;
  417cc8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  417cca:	2100      	movs	r1, #0
  417ccc:	4b79      	ldr	r3, [pc, #484]	; (417eb4 <clear_styles+0x2b0>)
  417cce:	4798      	blx	r3
            break;
  417cd0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  417cd2:	2100      	movs	r1, #0
  417cd4:	4b77      	ldr	r3, [pc, #476]	; (417eb4 <clear_styles+0x2b0>)
  417cd6:	4798      	blx	r3
            break;
  417cd8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  417cda:	2100      	movs	r1, #0
  417cdc:	4b75      	ldr	r3, [pc, #468]	; (417eb4 <clear_styles+0x2b0>)
  417cde:	4798      	blx	r3
            break;
  417ce0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  417ce2:	2100      	movs	r1, #0
  417ce4:	4b73      	ldr	r3, [pc, #460]	; (417eb4 <clear_styles+0x2b0>)
  417ce6:	4798      	blx	r3
            break;
  417ce8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  417cea:	2100      	movs	r1, #0
  417cec:	4d71      	ldr	r5, [pc, #452]	; (417eb4 <clear_styles+0x2b0>)
  417cee:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  417cf0:	2101      	movs	r1, #1
  417cf2:	4620      	mov	r0, r4
  417cf4:	47a8      	blx	r5
            break;
  417cf6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  417cf8:	2100      	movs	r1, #0
  417cfa:	4d6e      	ldr	r5, [pc, #440]	; (417eb4 <clear_styles+0x2b0>)
  417cfc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  417cfe:	2101      	movs	r1, #1
  417d00:	4620      	mov	r0, r4
  417d02:	47a8      	blx	r5
            break;
  417d04:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  417d06:	2100      	movs	r1, #0
  417d08:	4d6a      	ldr	r5, [pc, #424]	; (417eb4 <clear_styles+0x2b0>)
  417d0a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  417d0c:	2101      	movs	r1, #1
  417d0e:	4620      	mov	r0, r4
  417d10:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  417d12:	2102      	movs	r1, #2
  417d14:	4620      	mov	r0, r4
  417d16:	47a8      	blx	r5
            break;
  417d18:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  417d1a:	2100      	movs	r1, #0
  417d1c:	4d65      	ldr	r5, [pc, #404]	; (417eb4 <clear_styles+0x2b0>)
  417d1e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  417d20:	2140      	movs	r1, #64	; 0x40
  417d22:	4620      	mov	r0, r4
  417d24:	47a8      	blx	r5
            break;
  417d26:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  417d28:	2100      	movs	r1, #0
  417d2a:	4b62      	ldr	r3, [pc, #392]	; (417eb4 <clear_styles+0x2b0>)
  417d2c:	4798      	blx	r3
            break;
  417d2e:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  417d30:	2140      	movs	r1, #64	; 0x40
  417d32:	4d60      	ldr	r5, [pc, #384]	; (417eb4 <clear_styles+0x2b0>)
  417d34:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  417d36:	2141      	movs	r1, #65	; 0x41
  417d38:	4620      	mov	r0, r4
  417d3a:	47a8      	blx	r5
            break;
  417d3c:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  417d3e:	2100      	movs	r1, #0
  417d40:	4b5c      	ldr	r3, [pc, #368]	; (417eb4 <clear_styles+0x2b0>)
  417d42:	4798      	blx	r3
            break;
  417d44:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  417d46:	2100      	movs	r1, #0
  417d48:	4d5a      	ldr	r5, [pc, #360]	; (417eb4 <clear_styles+0x2b0>)
  417d4a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  417d4c:	2140      	movs	r1, #64	; 0x40
  417d4e:	4620      	mov	r0, r4
  417d50:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  417d52:	2101      	movs	r1, #1
  417d54:	4620      	mov	r0, r4
  417d56:	47a8      	blx	r5
            break;
  417d58:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  417d5a:	2100      	movs	r1, #0
  417d5c:	4d55      	ldr	r5, [pc, #340]	; (417eb4 <clear_styles+0x2b0>)
  417d5e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  417d60:	2140      	movs	r1, #64	; 0x40
  417d62:	4620      	mov	r0, r4
  417d64:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  417d66:	2141      	movs	r1, #65	; 0x41
  417d68:	4620      	mov	r0, r4
  417d6a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  417d6c:	2143      	movs	r1, #67	; 0x43
  417d6e:	4620      	mov	r0, r4
  417d70:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  417d72:	2142      	movs	r1, #66	; 0x42
  417d74:	4620      	mov	r0, r4
  417d76:	47a8      	blx	r5
            break;
  417d78:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  417d7a:	2100      	movs	r1, #0
  417d7c:	4d4d      	ldr	r5, [pc, #308]	; (417eb4 <clear_styles+0x2b0>)
  417d7e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  417d80:	2140      	movs	r1, #64	; 0x40
  417d82:	4620      	mov	r0, r4
  417d84:	47a8      	blx	r5
            break;
  417d86:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  417d88:	2100      	movs	r1, #0
  417d8a:	4d4a      	ldr	r5, [pc, #296]	; (417eb4 <clear_styles+0x2b0>)
  417d8c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  417d8e:	2101      	movs	r1, #1
  417d90:	4620      	mov	r0, r4
  417d92:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  417d94:	2102      	movs	r1, #2
  417d96:	4620      	mov	r0, r4
  417d98:	47a8      	blx	r5
            break;
  417d9a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  417d9c:	2100      	movs	r1, #0
  417d9e:	4d45      	ldr	r5, [pc, #276]	; (417eb4 <clear_styles+0x2b0>)
  417da0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  417da2:	2103      	movs	r1, #3
  417da4:	4620      	mov	r0, r4
  417da6:	47a8      	blx	r5
            break;
  417da8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  417daa:	2100      	movs	r1, #0
  417dac:	4b41      	ldr	r3, [pc, #260]	; (417eb4 <clear_styles+0x2b0>)
  417dae:	4798      	blx	r3
            break;
  417db0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  417db2:	2100      	movs	r1, #0
  417db4:	4d3f      	ldr	r5, [pc, #252]	; (417eb4 <clear_styles+0x2b0>)
  417db6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  417db8:	2140      	movs	r1, #64	; 0x40
  417dba:	4620      	mov	r0, r4
  417dbc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  417dbe:	2101      	movs	r1, #1
  417dc0:	4620      	mov	r0, r4
  417dc2:	47a8      	blx	r5
            break;
  417dc4:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  417dc6:	2100      	movs	r1, #0
  417dc8:	4b3a      	ldr	r3, [pc, #232]	; (417eb4 <clear_styles+0x2b0>)
  417dca:	4798      	blx	r3
            break;
  417dcc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  417dce:	2100      	movs	r1, #0
  417dd0:	4d38      	ldr	r5, [pc, #224]	; (417eb4 <clear_styles+0x2b0>)
  417dd2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  417dd4:	2140      	movs	r1, #64	; 0x40
  417dd6:	4620      	mov	r0, r4
  417dd8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  417dda:	2141      	movs	r1, #65	; 0x41
  417ddc:	4620      	mov	r0, r4
  417dde:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  417de0:	2142      	movs	r1, #66	; 0x42
  417de2:	4620      	mov	r0, r4
  417de4:	47a8      	blx	r5
            break;
  417de6:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  417de8:	2100      	movs	r1, #0
  417dea:	4d32      	ldr	r5, [pc, #200]	; (417eb4 <clear_styles+0x2b0>)
  417dec:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  417dee:	2101      	movs	r1, #1
  417df0:	4620      	mov	r0, r4
  417df2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  417df4:	2102      	movs	r1, #2
  417df6:	4620      	mov	r0, r4
  417df8:	47a8      	blx	r5
            break;
  417dfa:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  417dfc:	2100      	movs	r1, #0
  417dfe:	4d2d      	ldr	r5, [pc, #180]	; (417eb4 <clear_styles+0x2b0>)
  417e00:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  417e02:	2101      	movs	r1, #1
  417e04:	4620      	mov	r0, r4
  417e06:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  417e08:	2102      	movs	r1, #2
  417e0a:	4620      	mov	r0, r4
  417e0c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  417e0e:	2103      	movs	r1, #3
  417e10:	4620      	mov	r0, r4
  417e12:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  417e14:	2104      	movs	r1, #4
  417e16:	4620      	mov	r0, r4
  417e18:	47a8      	blx	r5
            break;
  417e1a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  417e1c:	2100      	movs	r1, #0
  417e1e:	4d25      	ldr	r5, [pc, #148]	; (417eb4 <clear_styles+0x2b0>)
  417e20:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  417e22:	2142      	movs	r1, #66	; 0x42
  417e24:	4620      	mov	r0, r4
  417e26:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  417e28:	2141      	movs	r1, #65	; 0x41
  417e2a:	4620      	mov	r0, r4
  417e2c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  417e2e:	2140      	movs	r1, #64	; 0x40
  417e30:	4620      	mov	r0, r4
  417e32:	47a8      	blx	r5
            break;
  417e34:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  417e36:	2100      	movs	r1, #0
  417e38:	4b1e      	ldr	r3, [pc, #120]	; (417eb4 <clear_styles+0x2b0>)
  417e3a:	4798      	blx	r3
            break;
  417e3c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  417e3e:	2100      	movs	r1, #0
  417e40:	4d1c      	ldr	r5, [pc, #112]	; (417eb4 <clear_styles+0x2b0>)
  417e42:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  417e44:	2104      	movs	r1, #4
  417e46:	4620      	mov	r0, r4
  417e48:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  417e4a:	2103      	movs	r1, #3
  417e4c:	4620      	mov	r0, r4
  417e4e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  417e50:	2101      	movs	r1, #1
  417e52:	4620      	mov	r0, r4
  417e54:	47a8      	blx	r5
            break;
  417e56:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  417e58:	2100      	movs	r1, #0
  417e5a:	4d16      	ldr	r5, [pc, #88]	; (417eb4 <clear_styles+0x2b0>)
  417e5c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  417e5e:	2103      	movs	r1, #3
  417e60:	4620      	mov	r0, r4
  417e62:	47a8      	blx	r5
            break;
  417e64:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  417e66:	2100      	movs	r1, #0
  417e68:	4b12      	ldr	r3, [pc, #72]	; (417eb4 <clear_styles+0x2b0>)
  417e6a:	4798      	blx	r3
            break;
  417e6c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  417e6e:	2100      	movs	r1, #0
  417e70:	4d10      	ldr	r5, [pc, #64]	; (417eb4 <clear_styles+0x2b0>)
  417e72:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  417e74:	2103      	movs	r1, #3
  417e76:	4620      	mov	r0, r4
  417e78:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  417e7a:	2101      	movs	r1, #1
  417e7c:	4620      	mov	r0, r4
  417e7e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  417e80:	2102      	movs	r1, #2
  417e82:	4620      	mov	r0, r4
  417e84:	47a8      	blx	r5
            break;
  417e86:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  417e88:	2100      	movs	r1, #0
  417e8a:	4d0a      	ldr	r5, [pc, #40]	; (417eb4 <clear_styles+0x2b0>)
  417e8c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  417e8e:	2101      	movs	r1, #1
  417e90:	4620      	mov	r0, r4
  417e92:	47a8      	blx	r5
            break;
  417e94:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  417e96:	2100      	movs	r1, #0
  417e98:	4b06      	ldr	r3, [pc, #24]	; (417eb4 <clear_styles+0x2b0>)
  417e9a:	4798      	blx	r3
            break;
  417e9c:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  417e9e:	2100      	movs	r1, #0
  417ea0:	4d04      	ldr	r5, [pc, #16]	; (417eb4 <clear_styles+0x2b0>)
  417ea2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  417ea4:	2101      	movs	r1, #1
  417ea6:	4620      	mov	r0, r4
  417ea8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  417eaa:	2102      	movs	r1, #2
  417eac:	4620      	mov	r0, r4
  417eae:	47a8      	blx	r5
  417eb0:	bd38      	pop	{r3, r4, r5, pc}
  417eb2:	bf00      	nop
  417eb4:	00405ae5 	.word	0x00405ae5

00417eb8 <lv_theme_set_act>:
    act_theme = th;
  417eb8:	4b01      	ldr	r3, [pc, #4]	; (417ec0 <lv_theme_set_act+0x8>)
  417eba:	6018      	str	r0, [r3, #0]
  417ebc:	4770      	bx	lr
  417ebe:	bf00      	nop
  417ec0:	204147a0 	.word	0x204147a0

00417ec4 <lv_theme_apply>:
{
  417ec4:	b538      	push	{r3, r4, r5, lr}
  417ec6:	4604      	mov	r4, r0
  417ec8:	460d      	mov	r5, r1
    clear_styles(obj, name);
  417eca:	4b04      	ldr	r3, [pc, #16]	; (417edc <lv_theme_apply+0x18>)
  417ecc:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  417ece:	462a      	mov	r2, r5
  417ed0:	4621      	mov	r1, r4
  417ed2:	4b03      	ldr	r3, [pc, #12]	; (417ee0 <lv_theme_apply+0x1c>)
  417ed4:	6818      	ldr	r0, [r3, #0]
  417ed6:	4b03      	ldr	r3, [pc, #12]	; (417ee4 <lv_theme_apply+0x20>)
  417ed8:	4798      	blx	r3
  417eda:	bd38      	pop	{r3, r4, r5, pc}
  417edc:	00417c05 	.word	0x00417c05
  417ee0:	204147a0 	.word	0x204147a0
  417ee4:	00417bd5 	.word	0x00417bd5

00417ee8 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  417ee8:	4b01      	ldr	r3, [pc, #4]	; (417ef0 <lv_theme_get_font_normal+0x8>)
  417eea:	681b      	ldr	r3, [r3, #0]
}
  417eec:	6958      	ldr	r0, [r3, #20]
  417eee:	4770      	bx	lr
  417ef0:	204147a0 	.word	0x204147a0

00417ef4 <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  417ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417ef8:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  417efa:	3a01      	subs	r2, #1
  417efc:	2a27      	cmp	r2, #39	; 0x27
  417efe:	d831      	bhi.n	417f64 <theme_apply+0x70>
  417f00:	e8df f012 	tbh	[pc, r2, lsl #1]
  417f04:	00370028 	.word	0x00370028
  417f08:	008800ae 	.word	0x008800ae
  417f0c:	0055004b 	.word	0x0055004b
  417f10:	003002af 	.word	0x003002af
  417f14:	01fd00fd 	.word	0x01fd00fd
  417f18:	02cb0041 	.word	0x02cb0041
  417f1c:	02ea01d3 	.word	0x02ea01d3
  417f20:	00300030 	.word	0x00300030
  417f24:	0030006f 	.word	0x0030006f
  417f28:	00300131 	.word	0x00300131
  417f2c:	01c901b4 	.word	0x01c901b4
  417f30:	011202db 	.word	0x011202db
  417f34:	01af0121 	.word	0x01af0121
  417f38:	019a013b 	.word	0x019a013b
  417f3c:	028500e2 	.word	0x028500e2
  417f40:	00d202a0 	.word	0x00d202a0
  417f44:	02270098 	.word	0x02270098
  417f48:	017b0160 	.word	0x017b0160
  417f4c:	01850264 	.word	0x01850264
  417f50:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  417f54:	2100      	movs	r1, #0
  417f56:	4620      	mov	r0, r4
  417f58:	4b96      	ldr	r3, [pc, #600]	; (4181b4 <theme_apply+0x2c0>)
  417f5a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  417f5c:	4b96      	ldr	r3, [pc, #600]	; (4181b8 <theme_apply+0x2c4>)
  417f5e:	6819      	ldr	r1, [r3, #0]
  417f60:	4b96      	ldr	r3, [pc, #600]	; (4181bc <theme_apply+0x2c8>)
  417f62:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  417f64:	22ff      	movs	r2, #255	; 0xff
  417f66:	4611      	mov	r1, r2
  417f68:	4620      	mov	r0, r4
  417f6a:	4b95      	ldr	r3, [pc, #596]	; (4181c0 <theme_apply+0x2cc>)
  417f6c:	4798      	blx	r3
  417f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  417f72:	2100      	movs	r1, #0
  417f74:	4620      	mov	r0, r4
  417f76:	4b8f      	ldr	r3, [pc, #572]	; (4181b4 <theme_apply+0x2c0>)
  417f78:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  417f7a:	4b8f      	ldr	r3, [pc, #572]	; (4181b8 <theme_apply+0x2c4>)
  417f7c:	6819      	ldr	r1, [r3, #0]
  417f7e:	3104      	adds	r1, #4
  417f80:	4b8e      	ldr	r3, [pc, #568]	; (4181bc <theme_apply+0x2c8>)
  417f82:	4798      	blx	r3
            break;
  417f84:	e7ee      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  417f86:	2100      	movs	r1, #0
  417f88:	4620      	mov	r0, r4
  417f8a:	4b8a      	ldr	r3, [pc, #552]	; (4181b4 <theme_apply+0x2c0>)
  417f8c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  417f8e:	4b8a      	ldr	r3, [pc, #552]	; (4181b8 <theme_apply+0x2c4>)
  417f90:	6819      	ldr	r1, [r3, #0]
  417f92:	3104      	adds	r1, #4
  417f94:	4b89      	ldr	r3, [pc, #548]	; (4181bc <theme_apply+0x2c8>)
  417f96:	4798      	blx	r3
            break;
  417f98:	e7e4      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  417f9a:	2100      	movs	r1, #0
  417f9c:	4620      	mov	r0, r4
  417f9e:	4b85      	ldr	r3, [pc, #532]	; (4181b4 <theme_apply+0x2c0>)
  417fa0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  417fa2:	4b85      	ldr	r3, [pc, #532]	; (4181b8 <theme_apply+0x2c4>)
  417fa4:	6819      	ldr	r1, [r3, #0]
  417fa6:	3110      	adds	r1, #16
  417fa8:	4b84      	ldr	r3, [pc, #528]	; (4181bc <theme_apply+0x2c8>)
  417faa:	4798      	blx	r3
            break;
  417fac:	e7da      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  417fae:	2100      	movs	r1, #0
  417fb0:	4620      	mov	r0, r4
  417fb2:	4f80      	ldr	r7, [pc, #512]	; (4181b4 <theme_apply+0x2c0>)
  417fb4:	47b8      	blx	r7
  417fb6:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417fb8:	4e7f      	ldr	r6, [pc, #508]	; (4181b8 <theme_apply+0x2c4>)
  417fba:	6831      	ldr	r1, [r6, #0]
  417fbc:	3104      	adds	r1, #4
  417fbe:	4d7f      	ldr	r5, [pc, #508]	; (4181bc <theme_apply+0x2c8>)
  417fc0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417fc2:	6831      	ldr	r1, [r6, #0]
  417fc4:	3118      	adds	r1, #24
  417fc6:	4640      	mov	r0, r8
  417fc8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  417fca:	2101      	movs	r1, #1
  417fcc:	4620      	mov	r0, r4
  417fce:	47b8      	blx	r7
  417fd0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417fd2:	6831      	ldr	r1, [r6, #0]
  417fd4:	3104      	adds	r1, #4
  417fd6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417fd8:	6831      	ldr	r1, [r6, #0]
  417fda:	3108      	adds	r1, #8
  417fdc:	4638      	mov	r0, r7
  417fde:	47a8      	blx	r5
            break;
  417fe0:	e7c0      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  417fe2:	2100      	movs	r1, #0
  417fe4:	4620      	mov	r0, r4
  417fe6:	4f73      	ldr	r7, [pc, #460]	; (4181b4 <theme_apply+0x2c0>)
  417fe8:	47b8      	blx	r7
  417fea:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  417fec:	4e72      	ldr	r6, [pc, #456]	; (4181b8 <theme_apply+0x2c4>)
  417fee:	6831      	ldr	r1, [r6, #0]
  417ff0:	4d72      	ldr	r5, [pc, #456]	; (4181bc <theme_apply+0x2c8>)
  417ff2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  417ff4:	6831      	ldr	r1, [r6, #0]
  417ff6:	316c      	adds	r1, #108	; 0x6c
  417ff8:	4640      	mov	r0, r8
  417ffa:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  417ffc:	2101      	movs	r1, #1
  417ffe:	4620      	mov	r0, r4
  418000:	47b8      	blx	r7
  418002:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418004:	6831      	ldr	r1, [r6, #0]
  418006:	3104      	adds	r1, #4
  418008:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41800a:	6831      	ldr	r1, [r6, #0]
  41800c:	3108      	adds	r1, #8
  41800e:	4638      	mov	r0, r7
  418010:	47a8      	blx	r5
            break;
  418012:	e7a7      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  418014:	2100      	movs	r1, #0
  418016:	4620      	mov	r0, r4
  418018:	4f66      	ldr	r7, [pc, #408]	; (4181b4 <theme_apply+0x2c0>)
  41801a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  41801c:	4e66      	ldr	r6, [pc, #408]	; (4181b8 <theme_apply+0x2c4>)
  41801e:	6831      	ldr	r1, [r6, #0]
  418020:	3128      	adds	r1, #40	; 0x28
  418022:	4d66      	ldr	r5, [pc, #408]	; (4181bc <theme_apply+0x2c8>)
  418024:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  418026:	2101      	movs	r1, #1
  418028:	4620      	mov	r0, r4
  41802a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41802c:	6831      	ldr	r1, [r6, #0]
  41802e:	312c      	adds	r1, #44	; 0x2c
  418030:	47a8      	blx	r5
            break;
  418032:	e797      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  418034:	2100      	movs	r1, #0
  418036:	4620      	mov	r0, r4
  418038:	4f5e      	ldr	r7, [pc, #376]	; (4181b4 <theme_apply+0x2c0>)
  41803a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  41803c:	4e5e      	ldr	r6, [pc, #376]	; (4181b8 <theme_apply+0x2c4>)
  41803e:	6831      	ldr	r1, [r6, #0]
  418040:	3128      	adds	r1, #40	; 0x28
  418042:	4d5e      	ldr	r5, [pc, #376]	; (4181bc <theme_apply+0x2c8>)
  418044:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  418046:	2101      	movs	r1, #1
  418048:	4620      	mov	r0, r4
  41804a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  41804c:	6831      	ldr	r1, [r6, #0]
  41804e:	312c      	adds	r1, #44	; 0x2c
  418050:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  418052:	2102      	movs	r1, #2
  418054:	4620      	mov	r0, r4
  418056:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  418058:	6831      	ldr	r1, [r6, #0]
  41805a:	31a0      	adds	r1, #160	; 0xa0
  41805c:	47a8      	blx	r5
            break;
  41805e:	e781      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  418060:	2100      	movs	r1, #0
  418062:	4620      	mov	r0, r4
  418064:	4f53      	ldr	r7, [pc, #332]	; (4181b4 <theme_apply+0x2c0>)
  418066:	47b8      	blx	r7
  418068:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41806a:	4e53      	ldr	r6, [pc, #332]	; (4181b8 <theme_apply+0x2c4>)
  41806c:	6831      	ldr	r1, [r6, #0]
  41806e:	3104      	adds	r1, #4
  418070:	4d52      	ldr	r5, [pc, #328]	; (4181bc <theme_apply+0x2c8>)
  418072:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  418074:	6831      	ldr	r1, [r6, #0]
  418076:	3120      	adds	r1, #32
  418078:	4640      	mov	r0, r8
  41807a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  41807c:	2101      	movs	r1, #1
  41807e:	4620      	mov	r0, r4
  418080:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  418082:	6831      	ldr	r1, [r6, #0]
  418084:	311c      	adds	r1, #28
  418086:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  418088:	2102      	movs	r1, #2
  41808a:	4620      	mov	r0, r4
  41808c:	47b8      	blx	r7
  41808e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418090:	6831      	ldr	r1, [r6, #0]
  418092:	3104      	adds	r1, #4
  418094:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  418096:	6831      	ldr	r1, [r6, #0]
  418098:	3108      	adds	r1, #8
  41809a:	4638      	mov	r0, r7
  41809c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  41809e:	6831      	ldr	r1, [r6, #0]
  4180a0:	3124      	adds	r1, #36	; 0x24
  4180a2:	4638      	mov	r0, r7
  4180a4:	47a8      	blx	r5
            break;
  4180a6:	e75d      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  4180a8:	2100      	movs	r1, #0
  4180aa:	4620      	mov	r0, r4
  4180ac:	4f41      	ldr	r7, [pc, #260]	; (4181b4 <theme_apply+0x2c0>)
  4180ae:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  4180b0:	4e41      	ldr	r6, [pc, #260]	; (4181b8 <theme_apply+0x2c4>)
  4180b2:	6831      	ldr	r1, [r6, #0]
  4180b4:	3120      	adds	r1, #32
  4180b6:	4d41      	ldr	r5, [pc, #260]	; (4181bc <theme_apply+0x2c8>)
  4180b8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  4180ba:	2101      	movs	r1, #1
  4180bc:	4620      	mov	r0, r4
  4180be:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4180c0:	6831      	ldr	r1, [r6, #0]
  4180c2:	311c      	adds	r1, #28
  4180c4:	47a8      	blx	r5
            break;
  4180c6:	e74d      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  4180c8:	2100      	movs	r1, #0
  4180ca:	4620      	mov	r0, r4
  4180cc:	4f39      	ldr	r7, [pc, #228]	; (4181b4 <theme_apply+0x2c0>)
  4180ce:	47b8      	blx	r7
  4180d0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  4180d2:	4e39      	ldr	r6, [pc, #228]	; (4181b8 <theme_apply+0x2c4>)
  4180d4:	6831      	ldr	r1, [r6, #0]
  4180d6:	3128      	adds	r1, #40	; 0x28
  4180d8:	4d38      	ldr	r5, [pc, #224]	; (4181bc <theme_apply+0x2c8>)
  4180da:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  4180dc:	6831      	ldr	r1, [r6, #0]
  4180de:	3198      	adds	r1, #152	; 0x98
  4180e0:	4640      	mov	r0, r8
  4180e2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  4180e4:	2101      	movs	r1, #1
  4180e6:	4620      	mov	r0, r4
  4180e8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  4180ea:	6831      	ldr	r1, [r6, #0]
  4180ec:	312c      	adds	r1, #44	; 0x2c
  4180ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  4180f0:	2102      	movs	r1, #2
  4180f2:	4620      	mov	r0, r4
  4180f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  4180f6:	6831      	ldr	r1, [r6, #0]
  4180f8:	3194      	adds	r1, #148	; 0x94
  4180fa:	47a8      	blx	r5
            break;
  4180fc:	e732      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  4180fe:	2100      	movs	r1, #0
  418100:	4620      	mov	r0, r4
  418102:	4f2c      	ldr	r7, [pc, #176]	; (4181b4 <theme_apply+0x2c0>)
  418104:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  418106:	4e2c      	ldr	r6, [pc, #176]	; (4181b8 <theme_apply+0x2c4>)
  418108:	6831      	ldr	r1, [r6, #0]
  41810a:	3150      	adds	r1, #80	; 0x50
  41810c:	4d2b      	ldr	r5, [pc, #172]	; (4181bc <theme_apply+0x2c8>)
  41810e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  418110:	2140      	movs	r1, #64	; 0x40
  418112:	4620      	mov	r0, r4
  418114:	47b8      	blx	r7
  418116:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  418118:	6831      	ldr	r1, [r6, #0]
  41811a:	3110      	adds	r1, #16
  41811c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  41811e:	6831      	ldr	r1, [r6, #0]
  418120:	3154      	adds	r1, #84	; 0x54
  418122:	4638      	mov	r0, r7
  418124:	47a8      	blx	r5
            break;
  418126:	e71d      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  418128:	2100      	movs	r1, #0
  41812a:	4620      	mov	r0, r4
  41812c:	4b21      	ldr	r3, [pc, #132]	; (4181b4 <theme_apply+0x2c0>)
  41812e:	4798      	blx	r3
  418130:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  418132:	4e21      	ldr	r6, [pc, #132]	; (4181b8 <theme_apply+0x2c4>)
  418134:	6831      	ldr	r1, [r6, #0]
  418136:	3104      	adds	r1, #4
  418138:	4d20      	ldr	r5, [pc, #128]	; (4181bc <theme_apply+0x2c8>)
  41813a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  41813c:	6831      	ldr	r1, [r6, #0]
  41813e:	3180      	adds	r1, #128	; 0x80
  418140:	4638      	mov	r0, r7
  418142:	47a8      	blx	r5
            break;
  418144:	e70e      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  418146:	2140      	movs	r1, #64	; 0x40
  418148:	4620      	mov	r0, r4
  41814a:	4f1a      	ldr	r7, [pc, #104]	; (4181b4 <theme_apply+0x2c0>)
  41814c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  41814e:	4e1a      	ldr	r6, [pc, #104]	; (4181b8 <theme_apply+0x2c4>)
  418150:	6831      	ldr	r1, [r6, #0]
  418152:	3118      	adds	r1, #24
  418154:	4d19      	ldr	r5, [pc, #100]	; (4181bc <theme_apply+0x2c8>)
  418156:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  418158:	2141      	movs	r1, #65	; 0x41
  41815a:	4620      	mov	r0, r4
  41815c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  41815e:	6831      	ldr	r1, [r6, #0]
  418160:	3110      	adds	r1, #16
  418162:	47a8      	blx	r5
            break;
  418164:	e6fe      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  418166:	2100      	movs	r1, #0
  418168:	4620      	mov	r0, r4
  41816a:	4b12      	ldr	r3, [pc, #72]	; (4181b4 <theme_apply+0x2c0>)
  41816c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  41816e:	4b12      	ldr	r3, [pc, #72]	; (4181b8 <theme_apply+0x2c4>)
  418170:	6819      	ldr	r1, [r3, #0]
  418172:	3170      	adds	r1, #112	; 0x70
  418174:	4b11      	ldr	r3, [pc, #68]	; (4181bc <theme_apply+0x2c8>)
  418176:	4798      	blx	r3
            break;
  418178:	e6f4      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  41817a:	2100      	movs	r1, #0
  41817c:	4620      	mov	r0, r4
  41817e:	4f0d      	ldr	r7, [pc, #52]	; (4181b4 <theme_apply+0x2c0>)
  418180:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  418182:	4e0d      	ldr	r6, [pc, #52]	; (4181b8 <theme_apply+0x2c4>)
  418184:	6831      	ldr	r1, [r6, #0]
  418186:	3104      	adds	r1, #4
  418188:	4d0c      	ldr	r5, [pc, #48]	; (4181bc <theme_apply+0x2c8>)
  41818a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  41818c:	2140      	movs	r1, #64	; 0x40
  41818e:	4620      	mov	r0, r4
  418190:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  418192:	6831      	ldr	r1, [r6, #0]
  418194:	3114      	adds	r1, #20
  418196:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  418198:	2101      	movs	r1, #1
  41819a:	4620      	mov	r0, r4
  41819c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41819e:	6831      	ldr	r1, [r6, #0]
  4181a0:	3184      	adds	r1, #132	; 0x84
  4181a2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  4181a4:	2102      	movs	r1, #2
  4181a6:	4620      	mov	r0, r4
  4181a8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  4181aa:	6831      	ldr	r1, [r6, #0]
  4181ac:	3188      	adds	r1, #136	; 0x88
  4181ae:	47a8      	blx	r5
            break;
  4181b0:	e6d8      	b.n	417f64 <theme_apply+0x70>
  4181b2:	bf00      	nop
  4181b4:	00405a1d 	.word	0x00405a1d
  4181b8:	204147a8 	.word	0x204147a8
  4181bc:	00409c45 	.word	0x00409c45
  4181c0:	00407671 	.word	0x00407671
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  4181c4:	2100      	movs	r1, #0
  4181c6:	4620      	mov	r0, r4
  4181c8:	4f9b      	ldr	r7, [pc, #620]	; (418438 <theme_apply+0x544>)
  4181ca:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4181cc:	4e9b      	ldr	r6, [pc, #620]	; (41843c <theme_apply+0x548>)
  4181ce:	6831      	ldr	r1, [r6, #0]
  4181d0:	4d9b      	ldr	r5, [pc, #620]	; (418440 <theme_apply+0x54c>)
  4181d2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  4181d4:	2141      	movs	r1, #65	; 0x41
  4181d6:	4620      	mov	r0, r4
  4181d8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4181da:	6831      	ldr	r1, [r6, #0]
  4181dc:	31ac      	adds	r1, #172	; 0xac
  4181de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  4181e0:	2143      	movs	r1, #67	; 0x43
  4181e2:	4620      	mov	r0, r4
  4181e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  4181e6:	6831      	ldr	r1, [r6, #0]
  4181e8:	31b0      	adds	r1, #176	; 0xb0
  4181ea:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4181ec:	2142      	movs	r1, #66	; 0x42
  4181ee:	4620      	mov	r0, r4
  4181f0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4181f2:	6831      	ldr	r1, [r6, #0]
  4181f4:	31a8      	adds	r1, #168	; 0xa8
  4181f6:	47a8      	blx	r5
            break;
  4181f8:	e6b4      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4181fa:	2140      	movs	r1, #64	; 0x40
  4181fc:	4620      	mov	r0, r4
  4181fe:	4b8e      	ldr	r3, [pc, #568]	; (418438 <theme_apply+0x544>)
  418200:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  418202:	4b8e      	ldr	r3, [pc, #568]	; (41843c <theme_apply+0x548>)
  418204:	6819      	ldr	r1, [r3, #0]
  418206:	31b4      	adds	r1, #180	; 0xb4
  418208:	4b8d      	ldr	r3, [pc, #564]	; (418440 <theme_apply+0x54c>)
  41820a:	4798      	blx	r3
            break;
  41820c:	e6aa      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  41820e:	2100      	movs	r1, #0
  418210:	4620      	mov	r0, r4
  418212:	4f89      	ldr	r7, [pc, #548]	; (418438 <theme_apply+0x544>)
  418214:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  418216:	4e89      	ldr	r6, [pc, #548]	; (41843c <theme_apply+0x548>)
  418218:	6831      	ldr	r1, [r6, #0]
  41821a:	4d89      	ldr	r5, [pc, #548]	; (418440 <theme_apply+0x54c>)
  41821c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  41821e:	2101      	movs	r1, #1
  418220:	4620      	mov	r0, r4
  418222:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  418224:	6831      	ldr	r1, [r6, #0]
  418226:	3184      	adds	r1, #132	; 0x84
  418228:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  41822a:	2102      	movs	r1, #2
  41822c:	4620      	mov	r0, r4
  41822e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  418230:	6831      	ldr	r1, [r6, #0]
  418232:	3188      	adds	r1, #136	; 0x88
  418234:	47a8      	blx	r5
            break;
  418236:	e695      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  418238:	2100      	movs	r1, #0
  41823a:	4620      	mov	r0, r4
  41823c:	4f7e      	ldr	r7, [pc, #504]	; (418438 <theme_apply+0x544>)
  41823e:	47b8      	blx	r7
  418240:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418242:	4e7e      	ldr	r6, [pc, #504]	; (41843c <theme_apply+0x548>)
  418244:	6831      	ldr	r1, [r6, #0]
  418246:	3104      	adds	r1, #4
  418248:	4d7d      	ldr	r5, [pc, #500]	; (418440 <theme_apply+0x54c>)
  41824a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  41824c:	6831      	ldr	r1, [r6, #0]
  41824e:	318c      	adds	r1, #140	; 0x8c
  418250:	4640      	mov	r0, r8
  418252:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  418254:	2103      	movs	r1, #3
  418256:	4620      	mov	r0, r4
  418258:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  41825a:	6831      	ldr	r1, [r6, #0]
  41825c:	3190      	adds	r1, #144	; 0x90
  41825e:	47a8      	blx	r5
            break;
  418260:	e680      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  418262:	2100      	movs	r1, #0
  418264:	4620      	mov	r0, r4
  418266:	4b74      	ldr	r3, [pc, #464]	; (418438 <theme_apply+0x544>)
  418268:	4798      	blx	r3
            break;
  41826a:	e67b      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  41826c:	2100      	movs	r1, #0
  41826e:	4620      	mov	r0, r4
  418270:	4f71      	ldr	r7, [pc, #452]	; (418438 <theme_apply+0x544>)
  418272:	47b8      	blx	r7
  418274:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418276:	4e71      	ldr	r6, [pc, #452]	; (41843c <theme_apply+0x548>)
  418278:	6831      	ldr	r1, [r6, #0]
  41827a:	3104      	adds	r1, #4
  41827c:	4d70      	ldr	r5, [pc, #448]	; (418440 <theme_apply+0x54c>)
  41827e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  418280:	6831      	ldr	r1, [r6, #0]
  418282:	3178      	adds	r1, #120	; 0x78
  418284:	4640      	mov	r0, r8
  418286:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  418288:	2101      	movs	r1, #1
  41828a:	4620      	mov	r0, r4
  41828c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41828e:	6831      	ldr	r1, [r6, #0]
  418290:	3184      	adds	r1, #132	; 0x84
  418292:	47a8      	blx	r5
            break;
  418294:	e666      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  418296:	2100      	movs	r1, #0
  418298:	4620      	mov	r0, r4
  41829a:	4b67      	ldr	r3, [pc, #412]	; (418438 <theme_apply+0x544>)
  41829c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  41829e:	4b67      	ldr	r3, [pc, #412]	; (41843c <theme_apply+0x548>)
  4182a0:	6819      	ldr	r1, [r3, #0]
  4182a2:	317c      	adds	r1, #124	; 0x7c
  4182a4:	4b66      	ldr	r3, [pc, #408]	; (418440 <theme_apply+0x54c>)
  4182a6:	4798      	blx	r3
            break;
  4182a8:	e65c      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  4182aa:	2100      	movs	r1, #0
  4182ac:	4620      	mov	r0, r4
  4182ae:	4f62      	ldr	r7, [pc, #392]	; (418438 <theme_apply+0x544>)
  4182b0:	47b8      	blx	r7
  4182b2:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4182b4:	4e61      	ldr	r6, [pc, #388]	; (41843c <theme_apply+0x548>)
  4182b6:	6831      	ldr	r1, [r6, #0]
  4182b8:	3104      	adds	r1, #4
  4182ba:	4d61      	ldr	r5, [pc, #388]	; (418440 <theme_apply+0x54c>)
  4182bc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4182be:	6831      	ldr	r1, [r6, #0]
  4182c0:	3108      	adds	r1, #8
  4182c2:	4640      	mov	r0, r8
  4182c4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4182c6:	6831      	ldr	r1, [r6, #0]
  4182c8:	3118      	adds	r1, #24
  4182ca:	4640      	mov	r0, r8
  4182cc:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  4182ce:	2140      	movs	r1, #64	; 0x40
  4182d0:	4620      	mov	r0, r4
  4182d2:	47b8      	blx	r7
  4182d4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4182d6:	6831      	ldr	r1, [r6, #0]
  4182d8:	3104      	adds	r1, #4
  4182da:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  4182dc:	6831      	ldr	r1, [r6, #0]
  4182de:	3158      	adds	r1, #88	; 0x58
  4182e0:	4640      	mov	r0, r8
  4182e2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  4182e4:	2141      	movs	r1, #65	; 0x41
  4182e6:	4620      	mov	r0, r4
  4182e8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4182ea:	6831      	ldr	r1, [r6, #0]
  4182ec:	3184      	adds	r1, #132	; 0x84
  4182ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  4182f0:	2142      	movs	r1, #66	; 0x42
  4182f2:	4620      	mov	r0, r4
  4182f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  4182f6:	6831      	ldr	r1, [r6, #0]
  4182f8:	315c      	adds	r1, #92	; 0x5c
  4182fa:	47a8      	blx	r5
            break;
  4182fc:	e632      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  4182fe:	2100      	movs	r1, #0
  418300:	4620      	mov	r0, r4
  418302:	4f4d      	ldr	r7, [pc, #308]	; (418438 <theme_apply+0x544>)
  418304:	47b8      	blx	r7
  418306:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418308:	4e4c      	ldr	r6, [pc, #304]	; (41843c <theme_apply+0x548>)
  41830a:	6831      	ldr	r1, [r6, #0]
  41830c:	3104      	adds	r1, #4
  41830e:	4d4c      	ldr	r5, [pc, #304]	; (418440 <theme_apply+0x54c>)
  418310:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  418312:	6831      	ldr	r1, [r6, #0]
  418314:	3144      	adds	r1, #68	; 0x44
  418316:	4640      	mov	r0, r8
  418318:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41831a:	6831      	ldr	r1, [r6, #0]
  41831c:	3118      	adds	r1, #24
  41831e:	4640      	mov	r0, r8
  418320:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  418322:	2101      	movs	r1, #1
  418324:	4620      	mov	r0, r4
  418326:	47b8      	blx	r7
  418328:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  41832a:	6831      	ldr	r1, [r6, #0]
  41832c:	3118      	adds	r1, #24
  41832e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  418330:	6831      	ldr	r1, [r6, #0]
  418332:	3148      	adds	r1, #72	; 0x48
  418334:	4640      	mov	r0, r8
  418336:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  418338:	2103      	movs	r1, #3
  41833a:	4620      	mov	r0, r4
  41833c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  41833e:	6831      	ldr	r1, [r6, #0]
  418340:	3148      	adds	r1, #72	; 0x48
  418342:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  418344:	2102      	movs	r1, #2
  418346:	4620      	mov	r0, r4
  418348:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  41834a:	6831      	ldr	r1, [r6, #0]
  41834c:	314c      	adds	r1, #76	; 0x4c
  41834e:	47a8      	blx	r5
            break;
  418350:	e608      	b.n	417f64 <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  418352:	2100      	movs	r1, #0
  418354:	4620      	mov	r0, r4
  418356:	4b38      	ldr	r3, [pc, #224]	; (418438 <theme_apply+0x544>)
  418358:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  41835a:	4b38      	ldr	r3, [pc, #224]	; (41843c <theme_apply+0x548>)
  41835c:	6819      	ldr	r1, [r3, #0]
  41835e:	3104      	adds	r1, #4
  418360:	4b37      	ldr	r3, [pc, #220]	; (418440 <theme_apply+0x54c>)
  418362:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  418364:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  418366:	e009      	b.n	41837c <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  418368:	b2e9      	uxtb	r1, r5
  41836a:	4620      	mov	r0, r4
  41836c:	4b32      	ldr	r3, [pc, #200]	; (418438 <theme_apply+0x544>)
  41836e:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  418370:	4b32      	ldr	r3, [pc, #200]	; (41843c <theme_apply+0x548>)
  418372:	6819      	ldr	r1, [r3, #0]
  418374:	31a4      	adds	r1, #164	; 0xa4
  418376:	4b32      	ldr	r3, [pc, #200]	; (418440 <theme_apply+0x54c>)
  418378:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  41837a:	3501      	adds	r5, #1
  41837c:	2d04      	cmp	r5, #4
  41837e:	ddf3      	ble.n	418368 <theme_apply+0x474>
  418380:	e5f0      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  418382:	2100      	movs	r1, #0
  418384:	4620      	mov	r0, r4
  418386:	4f2c      	ldr	r7, [pc, #176]	; (418438 <theme_apply+0x544>)
  418388:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  41838a:	4e2c      	ldr	r6, [pc, #176]	; (41843c <theme_apply+0x548>)
  41838c:	6831      	ldr	r1, [r6, #0]
  41838e:	4d2c      	ldr	r5, [pc, #176]	; (418440 <theme_apply+0x54c>)
  418390:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  418392:	2142      	movs	r1, #66	; 0x42
  418394:	4620      	mov	r0, r4
  418396:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  418398:	6831      	ldr	r1, [r6, #0]
  41839a:	3184      	adds	r1, #132	; 0x84
  41839c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  41839e:	2141      	movs	r1, #65	; 0x41
  4183a0:	4620      	mov	r0, r4
  4183a2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  4183a4:	6831      	ldr	r1, [r6, #0]
  4183a6:	31b4      	adds	r1, #180	; 0xb4
  4183a8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  4183aa:	2140      	movs	r1, #64	; 0x40
  4183ac:	4620      	mov	r0, r4
  4183ae:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4183b0:	6831      	ldr	r1, [r6, #0]
  4183b2:	31ac      	adds	r1, #172	; 0xac
  4183b4:	47a8      	blx	r5
            break;
  4183b6:	e5d5      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4183b8:	2100      	movs	r1, #0
  4183ba:	4620      	mov	r0, r4
  4183bc:	4b1e      	ldr	r3, [pc, #120]	; (418438 <theme_apply+0x544>)
  4183be:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4183c0:	4b1e      	ldr	r3, [pc, #120]	; (41843c <theme_apply+0x548>)
  4183c2:	6819      	ldr	r1, [r3, #0]
  4183c4:	31a8      	adds	r1, #168	; 0xa8
  4183c6:	4b1e      	ldr	r3, [pc, #120]	; (418440 <theme_apply+0x54c>)
  4183c8:	4798      	blx	r3
            break;
  4183ca:	e5cb      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  4183cc:	2100      	movs	r1, #0
  4183ce:	4620      	mov	r0, r4
  4183d0:	4f19      	ldr	r7, [pc, #100]	; (418438 <theme_apply+0x544>)
  4183d2:	47b8      	blx	r7
  4183d4:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4183d6:	4e19      	ldr	r6, [pc, #100]	; (41843c <theme_apply+0x548>)
  4183d8:	6831      	ldr	r1, [r6, #0]
  4183da:	3104      	adds	r1, #4
  4183dc:	4d18      	ldr	r5, [pc, #96]	; (418440 <theme_apply+0x54c>)
  4183de:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4183e0:	6831      	ldr	r1, [r6, #0]
  4183e2:	3118      	adds	r1, #24
  4183e4:	4640      	mov	r0, r8
  4183e6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  4183e8:	2104      	movs	r1, #4
  4183ea:	4620      	mov	r0, r4
  4183ec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  4183ee:	6831      	ldr	r1, [r6, #0]
  4183f0:	31bc      	adds	r1, #188	; 0xbc
  4183f2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  4183f4:	2103      	movs	r1, #3
  4183f6:	4620      	mov	r0, r4
  4183f8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  4183fa:	6831      	ldr	r1, [r6, #0]
  4183fc:	31b8      	adds	r1, #184	; 0xb8
  4183fe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  418400:	2101      	movs	r1, #1
  418402:	4620      	mov	r0, r4
  418404:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  418406:	6831      	ldr	r1, [r6, #0]
  418408:	3184      	adds	r1, #132	; 0x84
  41840a:	47a8      	blx	r5
            break;
  41840c:	e5aa      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  41840e:	2100      	movs	r1, #0
  418410:	4620      	mov	r0, r4
  418412:	4f09      	ldr	r7, [pc, #36]	; (418438 <theme_apply+0x544>)
  418414:	47b8      	blx	r7
  418416:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  418418:	4e08      	ldr	r6, [pc, #32]	; (41843c <theme_apply+0x548>)
  41841a:	6831      	ldr	r1, [r6, #0]
  41841c:	3104      	adds	r1, #4
  41841e:	4d08      	ldr	r5, [pc, #32]	; (418440 <theme_apply+0x54c>)
  418420:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  418422:	6831      	ldr	r1, [r6, #0]
  418424:	3118      	adds	r1, #24
  418426:	4640      	mov	r0, r8
  418428:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  41842a:	2103      	movs	r1, #3
  41842c:	4620      	mov	r0, r4
  41842e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  418430:	6831      	ldr	r1, [r6, #0]
  418432:	319c      	adds	r1, #156	; 0x9c
  418434:	47a8      	blx	r5
            break;
  418436:	e595      	b.n	417f64 <theme_apply+0x70>
  418438:	00405a1d 	.word	0x00405a1d
  41843c:	204147a8 	.word	0x204147a8
  418440:	00409c45 	.word	0x00409c45
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  418444:	2100      	movs	r1, #0
  418446:	4620      	mov	r0, r4
  418448:	4b31      	ldr	r3, [pc, #196]	; (418510 <theme_apply+0x61c>)
  41844a:	4798      	blx	r3
  41844c:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41844e:	4e31      	ldr	r6, [pc, #196]	; (418514 <theme_apply+0x620>)
  418450:	6831      	ldr	r1, [r6, #0]
  418452:	3104      	adds	r1, #4
  418454:	4d30      	ldr	r5, [pc, #192]	; (418518 <theme_apply+0x624>)
  418456:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  418458:	6831      	ldr	r1, [r6, #0]
  41845a:	3108      	adds	r1, #8
  41845c:	4638      	mov	r0, r7
  41845e:	47a8      	blx	r5
            break;
  418460:	e580      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  418462:	2100      	movs	r1, #0
  418464:	4620      	mov	r0, r4
  418466:	4f2a      	ldr	r7, [pc, #168]	; (418510 <theme_apply+0x61c>)
  418468:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  41846a:	4e2a      	ldr	r6, [pc, #168]	; (418514 <theme_apply+0x620>)
  41846c:	6831      	ldr	r1, [r6, #0]
  41846e:	3104      	adds	r1, #4
  418470:	4d29      	ldr	r5, [pc, #164]	; (418518 <theme_apply+0x624>)
  418472:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  418474:	2103      	movs	r1, #3
  418476:	4620      	mov	r0, r4
  418478:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  41847a:	6831      	ldr	r1, [r6, #0]
  41847c:	3130      	adds	r1, #48	; 0x30
  41847e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  418480:	2101      	movs	r1, #1
  418482:	4620      	mov	r0, r4
  418484:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  418486:	6831      	ldr	r1, [r6, #0]
  418488:	3134      	adds	r1, #52	; 0x34
  41848a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  41848c:	2102      	movs	r1, #2
  41848e:	4620      	mov	r0, r4
  418490:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  418492:	6831      	ldr	r1, [r6, #0]
  418494:	3138      	adds	r1, #56	; 0x38
  418496:	47a8      	blx	r5
            break;
  418498:	e564      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  41849a:	2100      	movs	r1, #0
  41849c:	4620      	mov	r0, r4
  41849e:	4f1c      	ldr	r7, [pc, #112]	; (418510 <theme_apply+0x61c>)
  4184a0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  4184a2:	4e1c      	ldr	r6, [pc, #112]	; (418514 <theme_apply+0x620>)
  4184a4:	6831      	ldr	r1, [r6, #0]
  4184a6:	313c      	adds	r1, #60	; 0x3c
  4184a8:	4d1b      	ldr	r5, [pc, #108]	; (418518 <theme_apply+0x624>)
  4184aa:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  4184ac:	2101      	movs	r1, #1
  4184ae:	4620      	mov	r0, r4
  4184b0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  4184b2:	6831      	ldr	r1, [r6, #0]
  4184b4:	3140      	adds	r1, #64	; 0x40
  4184b6:	47a8      	blx	r5
            break;
  4184b8:	e554      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  4184ba:	2100      	movs	r1, #0
  4184bc:	4620      	mov	r0, r4
  4184be:	4b14      	ldr	r3, [pc, #80]	; (418510 <theme_apply+0x61c>)
  4184c0:	4798      	blx	r3
  4184c2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4184c4:	4e13      	ldr	r6, [pc, #76]	; (418514 <theme_apply+0x620>)
  4184c6:	6831      	ldr	r1, [r6, #0]
  4184c8:	3104      	adds	r1, #4
  4184ca:	4d13      	ldr	r5, [pc, #76]	; (418518 <theme_apply+0x624>)
  4184cc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  4184ce:	6831      	ldr	r1, [r6, #0]
  4184d0:	3174      	adds	r1, #116	; 0x74
  4184d2:	4638      	mov	r0, r7
  4184d4:	47a8      	blx	r5
            break;
  4184d6:	e545      	b.n	417f64 <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  4184d8:	2100      	movs	r1, #0
  4184da:	4620      	mov	r0, r4
  4184dc:	4f0c      	ldr	r7, [pc, #48]	; (418510 <theme_apply+0x61c>)
  4184de:	47b8      	blx	r7
  4184e0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4184e2:	4e0c      	ldr	r6, [pc, #48]	; (418514 <theme_apply+0x620>)
  4184e4:	6831      	ldr	r1, [r6, #0]
  4184e6:	3104      	adds	r1, #4
  4184e8:	4d0b      	ldr	r5, [pc, #44]	; (418518 <theme_apply+0x624>)
  4184ea:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  4184ec:	6831      	ldr	r1, [r6, #0]
  4184ee:	3160      	adds	r1, #96	; 0x60
  4184f0:	4640      	mov	r0, r8
  4184f2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  4184f4:	2101      	movs	r1, #1
  4184f6:	4620      	mov	r0, r4
  4184f8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  4184fa:	6831      	ldr	r1, [r6, #0]
  4184fc:	3164      	adds	r1, #100	; 0x64
  4184fe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  418500:	2102      	movs	r1, #2
  418502:	4620      	mov	r0, r4
  418504:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  418506:	6831      	ldr	r1, [r6, #0]
  418508:	3168      	adds	r1, #104	; 0x68
  41850a:	47a8      	blx	r5
            break;
  41850c:	e52a      	b.n	417f64 <theme_apply+0x70>
  41850e:	bf00      	nop
  418510:	00405a1d 	.word	0x00405a1d
  418514:	204147a8 	.word	0x204147a8
  418518:	00409c45 	.word	0x00409c45

0041851c <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  41851c:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  41851e:	4b04      	ldr	r3, [pc, #16]	; (418530 <style_init_reset+0x14>)
  418520:	781b      	ldrb	r3, [r3, #0]
  418522:	b913      	cbnz	r3, 41852a <style_init_reset+0xe>
    else lv_style_init(style);
  418524:	4b03      	ldr	r3, [pc, #12]	; (418534 <style_init_reset+0x18>)
  418526:	4798      	blx	r3
  418528:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  41852a:	4b03      	ldr	r3, [pc, #12]	; (418538 <style_init_reset+0x1c>)
  41852c:	4798      	blx	r3
  41852e:	bd08      	pop	{r3, pc}
  418530:	204147a4 	.word	0x204147a4
  418534:	00409b61 	.word	0x00409b61
  418538:	00409d85 	.word	0x00409d85

0041853c <bar_init>:
{
  41853c:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  41853e:	4c6f      	ldr	r4, [pc, #444]	; (4186fc <bar_init+0x1c0>)
  418540:	6820      	ldr	r0, [r4, #0]
  418542:	3028      	adds	r0, #40	; 0x28
  418544:	4b6e      	ldr	r3, [pc, #440]	; (418700 <bar_init+0x1c4>)
  418546:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418548:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41854a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41854e:	2101      	movs	r1, #1
  418550:	3028      	adds	r0, #40	; 0x28
  418552:	4b6c      	ldr	r3, [pc, #432]	; (418704 <bar_init+0x1c8>)
  418554:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  418556:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418558:	22ff      	movs	r2, #255	; 0xff
  41855a:	212c      	movs	r1, #44	; 0x2c
  41855c:	3028      	adds	r0, #40	; 0x28
  41855e:	4b6a      	ldr	r3, [pc, #424]	; (418708 <bar_init+0x1cc>)
  418560:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  418562:	6820      	ldr	r0, [r4, #0]
  418564:	3028      	adds	r0, #40	; 0x28
  418566:	4b69      	ldr	r3, [pc, #420]	; (41870c <bar_init+0x1d0>)
  418568:	6a1b      	ldr	r3, [r3, #32]
  41856a:	f013 0f02 	tst.w	r3, #2
  41856e:	f000 808e 	beq.w	41868e <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  418572:	f04f 0200 	mov.w	r2, #0
  418576:	2306      	movs	r3, #6
  418578:	f363 0202 	bfi	r2, r3, #0, #3
  41857c:	231a      	movs	r3, #26
  41857e:	f363 02c7 	bfi	r2, r3, #3, #5
  418582:	231b      	movs	r3, #27
  418584:	f363 220c 	bfi	r2, r3, #8, #5
  418588:	2305      	movs	r3, #5
  41858a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41858e:	2129      	movs	r1, #41	; 0x29
  418590:	4b5f      	ldr	r3, [pc, #380]	; (418710 <bar_init+0x1d4>)
  418592:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418594:	4b59      	ldr	r3, [pc, #356]	; (4186fc <bar_init+0x1c0>)
  418596:	6818      	ldr	r0, [r3, #0]
  418598:	3028      	adds	r0, #40	; 0x28
  41859a:	4b5c      	ldr	r3, [pc, #368]	; (41870c <bar_init+0x1d0>)
  41859c:	6a1b      	ldr	r3, [r3, #32]
  41859e:	f013 0f02 	tst.w	r3, #2
  4185a2:	f000 8082 	beq.w	4186aa <bar_init+0x16e>
  4185a6:	f04f 0200 	mov.w	r2, #0
  4185aa:	2302      	movs	r3, #2
  4185ac:	f363 0202 	bfi	r2, r3, #0, #3
  4185b0:	2306      	movs	r3, #6
  4185b2:	f363 02c7 	bfi	r2, r3, #3, #5
  4185b6:	2309      	movs	r3, #9
  4185b8:	f363 220c 	bfi	r2, r3, #8, #5
  4185bc:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4185c0:	2179      	movs	r1, #121	; 0x79
  4185c2:	4d53      	ldr	r5, [pc, #332]	; (418710 <bar_init+0x1d4>)
  4185c4:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  4185c6:	4c4d      	ldr	r4, [pc, #308]	; (4186fc <bar_init+0x1c0>)
  4185c8:	6820      	ldr	r0, [r4, #0]
  4185ca:	4e50      	ldr	r6, [pc, #320]	; (41870c <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  4185cc:	89b2      	ldrh	r2, [r6, #12]
  4185ce:	2149      	movs	r1, #73	; 0x49
  4185d0:	3028      	adds	r0, #40	; 0x28
  4185d2:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  4185d4:	6820      	ldr	r0, [r4, #0]
  4185d6:	89f2      	ldrh	r2, [r6, #14]
  4185d8:	f240 4149 	movw	r1, #1097	; 0x449
  4185dc:	3028      	adds	r0, #40	; 0x28
  4185de:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  4185e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4185e2:	2200      	movs	r2, #0
  4185e4:	214c      	movs	r1, #76	; 0x4c
  4185e6:	3028      	adds	r0, #40	; 0x28
  4185e8:	4d47      	ldr	r5, [pc, #284]	; (418708 <bar_init+0x1cc>)
  4185ea:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  4185ec:	6820      	ldr	r0, [r4, #0]
  4185ee:	227f      	movs	r2, #127	; 0x7f
  4185f0:	f44f 7113 	mov.w	r1, #588	; 0x24c
  4185f4:	3028      	adds	r0, #40	; 0x28
  4185f6:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4185f8:	6824      	ldr	r4, [r4, #0]
  4185fa:	3428      	adds	r4, #40	; 0x28
  4185fc:	6a33      	ldr	r3, [r6, #32]
  4185fe:	f013 0f20 	tst.w	r3, #32
  418602:	d055      	beq.n	4186b0 <bar_init+0x174>
  418604:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  418606:	2140      	movs	r1, #64	; 0x40
  418608:	4620      	mov	r0, r4
  41860a:	4d3e      	ldr	r5, [pc, #248]	; (418704 <bar_init+0x1c8>)
  41860c:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41860e:	4c3b      	ldr	r4, [pc, #236]	; (4186fc <bar_init+0x1c0>)
  418610:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  418612:	2200      	movs	r2, #0
  418614:	21b0      	movs	r1, #176	; 0xb0
  418616:	3028      	adds	r0, #40	; 0x28
  418618:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41861a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41861c:	224c      	movs	r2, #76	; 0x4c
  41861e:	21b7      	movs	r1, #183	; 0xb7
  418620:	3028      	adds	r0, #40	; 0x28
  418622:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  418624:	6820      	ldr	r0, [r4, #0]
  418626:	302c      	adds	r0, #44	; 0x2c
  418628:	4b35      	ldr	r3, [pc, #212]	; (418700 <bar_init+0x1c4>)
  41862a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41862c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41862e:	22ff      	movs	r2, #255	; 0xff
  418630:	212c      	movs	r1, #44	; 0x2c
  418632:	4408      	add	r0, r1
  418634:	4b34      	ldr	r3, [pc, #208]	; (418708 <bar_init+0x1cc>)
  418636:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418638:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41863a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41863e:	2101      	movs	r1, #1
  418640:	302c      	adds	r0, #44	; 0x2c
  418642:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  418644:	6820      	ldr	r0, [r4, #0]
  418646:	4d31      	ldr	r5, [pc, #196]	; (41870c <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418648:	89aa      	ldrh	r2, [r5, #12]
  41864a:	2129      	movs	r1, #41	; 0x29
  41864c:	302c      	adds	r0, #44	; 0x2c
  41864e:	4e30      	ldr	r6, [pc, #192]	; (418710 <bar_init+0x1d4>)
  418650:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  418652:	6820      	ldr	r0, [r4, #0]
  418654:	f04f 0200 	mov.w	r2, #0
  418658:	2304      	movs	r3, #4
  41865a:	f363 0202 	bfi	r2, r3, #0, #3
  41865e:	2311      	movs	r3, #17
  418660:	f363 02c7 	bfi	r2, r3, #3, #5
  418664:	f363 220c 	bfi	r2, r3, #8, #5
  418668:	2302      	movs	r3, #2
  41866a:	f363 324f 	bfi	r2, r3, #13, #3
  41866e:	f242 0129 	movw	r1, #8233	; 0x2029
  418672:	302c      	adds	r0, #44	; 0x2c
  418674:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  418676:	6820      	ldr	r0, [r4, #0]
  418678:	302c      	adds	r0, #44	; 0x2c
  41867a:	6a2b      	ldr	r3, [r5, #32]
  41867c:	f013 0f02 	tst.w	r3, #2
  418680:	d12d      	bne.n	4186de <bar_init+0x1a2>
  418682:	4b24      	ldr	r3, [pc, #144]	; (418714 <bar_init+0x1d8>)
  418684:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  418686:	2179      	movs	r1, #121	; 0x79
  418688:	4b21      	ldr	r3, [pc, #132]	; (418710 <bar_init+0x1d4>)
  41868a:	4798      	blx	r3
  41868c:	bd70      	pop	{r4, r5, r6, pc}
  41868e:	2302      	movs	r3, #2
  418690:	f04f 0200 	mov.w	r2, #0
  418694:	f363 0202 	bfi	r2, r3, #0, #3
  418698:	2108      	movs	r1, #8
  41869a:	f361 02c7 	bfi	r2, r1, #3, #5
  41869e:	2109      	movs	r1, #9
  4186a0:	f361 220c 	bfi	r2, r1, #8, #5
  4186a4:	f363 324f 	bfi	r2, r3, #13, #3
  4186a8:	e771      	b.n	41858e <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4186aa:	4b1a      	ldr	r3, [pc, #104]	; (418714 <bar_init+0x1d8>)
  4186ac:	881a      	ldrh	r2, [r3, #0]
  4186ae:	e787      	b.n	4185c0 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4186b0:	2000      	movs	r0, #0
  4186b2:	4b19      	ldr	r3, [pc, #100]	; (418718 <bar_init+0x1dc>)
  4186b4:	4798      	blx	r3
  4186b6:	3028      	adds	r0, #40	; 0x28
  4186b8:	0040      	lsls	r0, r0, #1
  4186ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4186be:	da01      	bge.n	4186c4 <bar_init+0x188>
  4186c0:	2201      	movs	r2, #1
  4186c2:	e7a0      	b.n	418606 <bar_init+0xca>
  4186c4:	2000      	movs	r0, #0
  4186c6:	4b14      	ldr	r3, [pc, #80]	; (418718 <bar_init+0x1dc>)
  4186c8:	4798      	blx	r3
  4186ca:	3028      	adds	r0, #40	; 0x28
  4186cc:	0040      	lsls	r0, r0, #1
  4186ce:	4b13      	ldr	r3, [pc, #76]	; (41871c <bar_init+0x1e0>)
  4186d0:	fb83 2300 	smull	r2, r3, r3, r0
  4186d4:	17c2      	asrs	r2, r0, #31
  4186d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4186da:	b212      	sxth	r2, r2
  4186dc:	e793      	b.n	418606 <bar_init+0xca>
  4186de:	f04f 0200 	mov.w	r2, #0
  4186e2:	2302      	movs	r3, #2
  4186e4:	f363 0202 	bfi	r2, r3, #0, #3
  4186e8:	2308      	movs	r3, #8
  4186ea:	f363 02c7 	bfi	r2, r3, #3, #5
  4186ee:	2309      	movs	r3, #9
  4186f0:	f363 220c 	bfi	r2, r3, #8, #5
  4186f4:	f36f 324f 	bfc	r2, #13, #3
  4186f8:	e7c5      	b.n	418686 <bar_init+0x14a>
  4186fa:	bf00      	nop
  4186fc:	204147a8 	.word	0x204147a8
  418700:	0041851d 	.word	0x0041851d
  418704:	00409f49 	.word	0x00409f49
  418708:	0040a269 	.word	0x0040a269
  41870c:	204147ac 	.word	0x204147ac
  418710:	0040a0d9 	.word	0x0040a0d9
  418714:	0042c3ac 	.word	0x0042c3ac
  418718:	00414955 	.word	0x00414955
  41871c:	66666667 	.word	0x66666667

00418720 <slider_init>:
{
  418720:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  418722:	4ca3      	ldr	r4, [pc, #652]	; (4189b0 <slider_init+0x290>)
  418724:	6820      	ldr	r0, [r4, #0]
  418726:	3094      	adds	r0, #148	; 0x94
  418728:	4ba2      	ldr	r3, [pc, #648]	; (4189b4 <slider_init+0x294>)
  41872a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  41872c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41872e:	22ff      	movs	r2, #255	; 0xff
  418730:	212c      	movs	r1, #44	; 0x2c
  418732:	3094      	adds	r0, #148	; 0x94
  418734:	4ba0      	ldr	r3, [pc, #640]	; (4189b8 <slider_init+0x298>)
  418736:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  418738:	6820      	ldr	r0, [r4, #0]
  41873a:	3094      	adds	r0, #148	; 0x94
  41873c:	4b9f      	ldr	r3, [pc, #636]	; (4189bc <slider_init+0x29c>)
  41873e:	6a1b      	ldr	r3, [r3, #32]
  418740:	f013 0f02 	tst.w	r3, #2
  418744:	f000 80ba 	beq.w	4188bc <slider_init+0x19c>
  418748:	4b9c      	ldr	r3, [pc, #624]	; (4189bc <slider_init+0x29c>)
  41874a:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41874c:	2129      	movs	r1, #41	; 0x29
  41874e:	4b9c      	ldr	r3, [pc, #624]	; (4189c0 <slider_init+0x2a0>)
  418750:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418752:	4b97      	ldr	r3, [pc, #604]	; (4189b0 <slider_init+0x290>)
  418754:	6818      	ldr	r0, [r3, #0]
  418756:	3094      	adds	r0, #148	; 0x94
  418758:	4b98      	ldr	r3, [pc, #608]	; (4189bc <slider_init+0x29c>)
  41875a:	6a1b      	ldr	r3, [r3, #32]
  41875c:	f013 0f02 	tst.w	r3, #2
  418760:	f000 80af 	beq.w	4188c2 <slider_init+0x1a2>
  418764:	f04f 0200 	mov.w	r2, #0
  418768:	2302      	movs	r3, #2
  41876a:	f363 0202 	bfi	r2, r3, #0, #3
  41876e:	2306      	movs	r3, #6
  418770:	f363 02c7 	bfi	r2, r3, #3, #5
  418774:	2309      	movs	r3, #9
  418776:	f363 220c 	bfi	r2, r3, #8, #5
  41877a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41877e:	2179      	movs	r1, #121	; 0x79
  418780:	4b8f      	ldr	r3, [pc, #572]	; (4189c0 <slider_init+0x2a0>)
  418782:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418784:	4c8a      	ldr	r4, [pc, #552]	; (4189b0 <slider_init+0x290>)
  418786:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418788:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41878c:	2101      	movs	r1, #1
  41878e:	3094      	adds	r0, #148	; 0x94
  418790:	4b8c      	ldr	r3, [pc, #560]	; (4189c4 <slider_init+0x2a4>)
  418792:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418794:	6824      	ldr	r4, [r4, #0]
  418796:	3494      	adds	r4, #148	; 0x94
  418798:	2000      	movs	r0, #0
  41879a:	4b8b      	ldr	r3, [pc, #556]	; (4189c8 <slider_init+0x2a8>)
  41879c:	4798      	blx	r3
  41879e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4187a2:	3050      	adds	r0, #80	; 0x50
  4187a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187a8:	f280 808e 	bge.w	4188c8 <slider_init+0x1a8>
  4187ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4187ae:	2112      	movs	r1, #18
  4187b0:	4620      	mov	r0, r4
  4187b2:	4b84      	ldr	r3, [pc, #528]	; (4189c4 <slider_init+0x2a4>)
  4187b4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4187b6:	4b7e      	ldr	r3, [pc, #504]	; (4189b0 <slider_init+0x290>)
  4187b8:	681c      	ldr	r4, [r3, #0]
  4187ba:	3494      	adds	r4, #148	; 0x94
  4187bc:	2000      	movs	r0, #0
  4187be:	4b82      	ldr	r3, [pc, #520]	; (4189c8 <slider_init+0x2a8>)
  4187c0:	4798      	blx	r3
  4187c2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4187c6:	3050      	adds	r0, #80	; 0x50
  4187c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187cc:	f280 808a 	bge.w	4188e4 <slider_init+0x1c4>
  4187d0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4187d2:	2113      	movs	r1, #19
  4187d4:	4620      	mov	r0, r4
  4187d6:	4b7b      	ldr	r3, [pc, #492]	; (4189c4 <slider_init+0x2a4>)
  4187d8:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4187da:	4b75      	ldr	r3, [pc, #468]	; (4189b0 <slider_init+0x290>)
  4187dc:	681c      	ldr	r4, [r3, #0]
  4187de:	3494      	adds	r4, #148	; 0x94
  4187e0:	2000      	movs	r0, #0
  4187e2:	4b79      	ldr	r3, [pc, #484]	; (4189c8 <slider_init+0x2a8>)
  4187e4:	4798      	blx	r3
  4187e6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4187ea:	3050      	adds	r0, #80	; 0x50
  4187ec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187f0:	f280 8086 	bge.w	418900 <slider_init+0x1e0>
  4187f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4187f6:	2110      	movs	r1, #16
  4187f8:	4620      	mov	r0, r4
  4187fa:	4b72      	ldr	r3, [pc, #456]	; (4189c4 <slider_init+0x2a4>)
  4187fc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4187fe:	4b6c      	ldr	r3, [pc, #432]	; (4189b0 <slider_init+0x290>)
  418800:	681c      	ldr	r4, [r3, #0]
  418802:	3494      	adds	r4, #148	; 0x94
  418804:	2000      	movs	r0, #0
  418806:	4b70      	ldr	r3, [pc, #448]	; (4189c8 <slider_init+0x2a8>)
  418808:	4798      	blx	r3
  41880a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41880e:	3050      	adds	r0, #80	; 0x50
  418810:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418814:	f280 8082 	bge.w	41891c <slider_init+0x1fc>
  418818:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41881a:	2111      	movs	r1, #17
  41881c:	4620      	mov	r0, r4
  41881e:	4b69      	ldr	r3, [pc, #420]	; (4189c4 <slider_init+0x2a4>)
  418820:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  418822:	4c63      	ldr	r4, [pc, #396]	; (4189b0 <slider_init+0x290>)
  418824:	6820      	ldr	r0, [r4, #0]
  418826:	3098      	adds	r0, #152	; 0x98
  418828:	4b62      	ldr	r3, [pc, #392]	; (4189b4 <slider_init+0x294>)
  41882a:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41882c:	6824      	ldr	r4, [r4, #0]
  41882e:	3498      	adds	r4, #152	; 0x98
  418830:	2000      	movs	r0, #0
  418832:	4b65      	ldr	r3, [pc, #404]	; (4189c8 <slider_init+0x2a8>)
  418834:	4798      	blx	r3
  418836:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41883a:	0040      	lsls	r0, r0, #1
  41883c:	3050      	adds	r0, #80	; 0x50
  41883e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418842:	da79      	bge.n	418938 <slider_init+0x218>
  418844:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  418846:	2117      	movs	r1, #23
  418848:	4620      	mov	r0, r4
  41884a:	4b5e      	ldr	r3, [pc, #376]	; (4189c4 <slider_init+0x2a4>)
  41884c:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41884e:	4b58      	ldr	r3, [pc, #352]	; (4189b0 <slider_init+0x290>)
  418850:	681c      	ldr	r4, [r3, #0]
  418852:	3498      	adds	r4, #152	; 0x98
  418854:	2000      	movs	r0, #0
  418856:	4b5c      	ldr	r3, [pc, #368]	; (4189c8 <slider_init+0x2a8>)
  418858:	4798      	blx	r3
  41885a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41885e:	0040      	lsls	r0, r0, #1
  418860:	3050      	adds	r0, #80	; 0x50
  418862:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418866:	da76      	bge.n	418956 <slider_init+0x236>
  418868:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41886a:	2118      	movs	r1, #24
  41886c:	4620      	mov	r0, r4
  41886e:	4b55      	ldr	r3, [pc, #340]	; (4189c4 <slider_init+0x2a4>)
  418870:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418872:	4b4f      	ldr	r3, [pc, #316]	; (4189b0 <slider_init+0x290>)
  418874:	681c      	ldr	r4, [r3, #0]
  418876:	3498      	adds	r4, #152	; 0x98
  418878:	2000      	movs	r0, #0
  41887a:	4b53      	ldr	r3, [pc, #332]	; (4189c8 <slider_init+0x2a8>)
  41887c:	4798      	blx	r3
  41887e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418882:	0040      	lsls	r0, r0, #1
  418884:	3050      	adds	r0, #80	; 0x50
  418886:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41888a:	da73      	bge.n	418974 <slider_init+0x254>
  41888c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41888e:	2115      	movs	r1, #21
  418890:	4620      	mov	r0, r4
  418892:	4b4c      	ldr	r3, [pc, #304]	; (4189c4 <slider_init+0x2a4>)
  418894:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418896:	4b46      	ldr	r3, [pc, #280]	; (4189b0 <slider_init+0x290>)
  418898:	681c      	ldr	r4, [r3, #0]
  41889a:	3498      	adds	r4, #152	; 0x98
  41889c:	2000      	movs	r0, #0
  41889e:	4b4a      	ldr	r3, [pc, #296]	; (4189c8 <slider_init+0x2a8>)
  4188a0:	4798      	blx	r3
  4188a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4188a6:	0040      	lsls	r0, r0, #1
  4188a8:	3050      	adds	r0, #80	; 0x50
  4188aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4188ae:	da70      	bge.n	418992 <slider_init+0x272>
  4188b0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4188b2:	2116      	movs	r1, #22
  4188b4:	4620      	mov	r0, r4
  4188b6:	4b43      	ldr	r3, [pc, #268]	; (4189c4 <slider_init+0x2a4>)
  4188b8:	4798      	blx	r3
  4188ba:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  4188bc:	4b43      	ldr	r3, [pc, #268]	; (4189cc <slider_init+0x2ac>)
  4188be:	881a      	ldrh	r2, [r3, #0]
  4188c0:	e744      	b.n	41874c <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4188c2:	4b42      	ldr	r3, [pc, #264]	; (4189cc <slider_init+0x2ac>)
  4188c4:	881a      	ldrh	r2, [r3, #0]
  4188c6:	e75a      	b.n	41877e <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4188c8:	2000      	movs	r0, #0
  4188ca:	4b3f      	ldr	r3, [pc, #252]	; (4189c8 <slider_init+0x2a8>)
  4188cc:	4798      	blx	r3
  4188ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4188d2:	3050      	adds	r0, #80	; 0x50
  4188d4:	4b3e      	ldr	r3, [pc, #248]	; (4189d0 <slider_init+0x2b0>)
  4188d6:	fb83 2300 	smull	r2, r3, r3, r0
  4188da:	17c2      	asrs	r2, r0, #31
  4188dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188e0:	b212      	sxth	r2, r2
  4188e2:	e764      	b.n	4187ae <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4188e4:	2000      	movs	r0, #0
  4188e6:	4b38      	ldr	r3, [pc, #224]	; (4189c8 <slider_init+0x2a8>)
  4188e8:	4798      	blx	r3
  4188ea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4188ee:	3050      	adds	r0, #80	; 0x50
  4188f0:	4b37      	ldr	r3, [pc, #220]	; (4189d0 <slider_init+0x2b0>)
  4188f2:	fb83 2300 	smull	r2, r3, r3, r0
  4188f6:	17c2      	asrs	r2, r0, #31
  4188f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188fc:	b212      	sxth	r2, r2
  4188fe:	e768      	b.n	4187d2 <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  418900:	2000      	movs	r0, #0
  418902:	4b31      	ldr	r3, [pc, #196]	; (4189c8 <slider_init+0x2a8>)
  418904:	4798      	blx	r3
  418906:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41890a:	3050      	adds	r0, #80	; 0x50
  41890c:	4b30      	ldr	r3, [pc, #192]	; (4189d0 <slider_init+0x2b0>)
  41890e:	fb83 2300 	smull	r2, r3, r3, r0
  418912:	17c2      	asrs	r2, r0, #31
  418914:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418918:	b212      	sxth	r2, r2
  41891a:	e76c      	b.n	4187f6 <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  41891c:	2000      	movs	r0, #0
  41891e:	4b2a      	ldr	r3, [pc, #168]	; (4189c8 <slider_init+0x2a8>)
  418920:	4798      	blx	r3
  418922:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418926:	3050      	adds	r0, #80	; 0x50
  418928:	4b29      	ldr	r3, [pc, #164]	; (4189d0 <slider_init+0x2b0>)
  41892a:	fb83 2300 	smull	r2, r3, r3, r0
  41892e:	17c2      	asrs	r2, r0, #31
  418930:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418934:	b212      	sxth	r2, r2
  418936:	e770      	b.n	41881a <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418938:	2000      	movs	r0, #0
  41893a:	4b23      	ldr	r3, [pc, #140]	; (4189c8 <slider_init+0x2a8>)
  41893c:	4798      	blx	r3
  41893e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418942:	0040      	lsls	r0, r0, #1
  418944:	3050      	adds	r0, #80	; 0x50
  418946:	4b22      	ldr	r3, [pc, #136]	; (4189d0 <slider_init+0x2b0>)
  418948:	fb83 2300 	smull	r2, r3, r3, r0
  41894c:	17c2      	asrs	r2, r0, #31
  41894e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418952:	b212      	sxth	r2, r2
  418954:	e777      	b.n	418846 <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418956:	2000      	movs	r0, #0
  418958:	4b1b      	ldr	r3, [pc, #108]	; (4189c8 <slider_init+0x2a8>)
  41895a:	4798      	blx	r3
  41895c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418960:	0040      	lsls	r0, r0, #1
  418962:	3050      	adds	r0, #80	; 0x50
  418964:	4b1a      	ldr	r3, [pc, #104]	; (4189d0 <slider_init+0x2b0>)
  418966:	fb83 2300 	smull	r2, r3, r3, r0
  41896a:	17c2      	asrs	r2, r0, #31
  41896c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418970:	b212      	sxth	r2, r2
  418972:	e77a      	b.n	41886a <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418974:	2000      	movs	r0, #0
  418976:	4b14      	ldr	r3, [pc, #80]	; (4189c8 <slider_init+0x2a8>)
  418978:	4798      	blx	r3
  41897a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41897e:	0040      	lsls	r0, r0, #1
  418980:	3050      	adds	r0, #80	; 0x50
  418982:	4b13      	ldr	r3, [pc, #76]	; (4189d0 <slider_init+0x2b0>)
  418984:	fb83 2300 	smull	r2, r3, r3, r0
  418988:	17c2      	asrs	r2, r0, #31
  41898a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41898e:	b212      	sxth	r2, r2
  418990:	e77d      	b.n	41888e <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418992:	2000      	movs	r0, #0
  418994:	4b0c      	ldr	r3, [pc, #48]	; (4189c8 <slider_init+0x2a8>)
  418996:	4798      	blx	r3
  418998:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41899c:	0040      	lsls	r0, r0, #1
  41899e:	3050      	adds	r0, #80	; 0x50
  4189a0:	4b0b      	ldr	r3, [pc, #44]	; (4189d0 <slider_init+0x2b0>)
  4189a2:	fb83 2300 	smull	r2, r3, r3, r0
  4189a6:	17c2      	asrs	r2, r0, #31
  4189a8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4189ac:	b212      	sxth	r2, r2
  4189ae:	e780      	b.n	4188b2 <slider_init+0x192>
  4189b0:	204147a8 	.word	0x204147a8
  4189b4:	0041851d 	.word	0x0041851d
  4189b8:	0040a269 	.word	0x0040a269
  4189bc:	204147ac 	.word	0x204147ac
  4189c0:	0040a0d9 	.word	0x0040a0d9
  4189c4:	00409f49 	.word	0x00409f49
  4189c8:	00414955 	.word	0x00414955
  4189cc:	0042c3ac 	.word	0x0042c3ac
  4189d0:	66666667 	.word	0x66666667

004189d4 <switch_init>:
{
  4189d4:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  4189d6:	4c48      	ldr	r4, [pc, #288]	; (418af8 <switch_init+0x124>)
  4189d8:	6820      	ldr	r0, [r4, #0]
  4189da:	30a0      	adds	r0, #160	; 0xa0
  4189dc:	4b47      	ldr	r3, [pc, #284]	; (418afc <switch_init+0x128>)
  4189de:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  4189e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4189e2:	22ff      	movs	r2, #255	; 0xff
  4189e4:	212c      	movs	r1, #44	; 0x2c
  4189e6:	30a0      	adds	r0, #160	; 0xa0
  4189e8:	4b45      	ldr	r3, [pc, #276]	; (418b00 <switch_init+0x12c>)
  4189ea:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  4189ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4189ee:	4b45      	ldr	r3, [pc, #276]	; (418b04 <switch_init+0x130>)
  4189f0:	881a      	ldrh	r2, [r3, #0]
  4189f2:	2129      	movs	r1, #41	; 0x29
  4189f4:	30a0      	adds	r0, #160	; 0xa0
  4189f6:	4b44      	ldr	r3, [pc, #272]	; (418b08 <switch_init+0x134>)
  4189f8:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4189fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4189fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418a00:	2101      	movs	r1, #1
  418a02:	30a0      	adds	r0, #160	; 0xa0
  418a04:	4b41      	ldr	r3, [pc, #260]	; (418b0c <switch_init+0x138>)
  418a06:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418a08:	6824      	ldr	r4, [r4, #0]
  418a0a:	34a0      	adds	r4, #160	; 0xa0
  418a0c:	2000      	movs	r0, #0
  418a0e:	4b40      	ldr	r3, [pc, #256]	; (418b10 <switch_init+0x13c>)
  418a10:	4798      	blx	r3
  418a12:	3014      	adds	r0, #20
  418a14:	0080      	lsls	r0, r0, #2
  418a16:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a1a:	da39      	bge.n	418a90 <switch_init+0xbc>
  418a1c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418a20:	2110      	movs	r1, #16
  418a22:	4620      	mov	r0, r4
  418a24:	4b39      	ldr	r3, [pc, #228]	; (418b0c <switch_init+0x138>)
  418a26:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418a28:	4b33      	ldr	r3, [pc, #204]	; (418af8 <switch_init+0x124>)
  418a2a:	681c      	ldr	r4, [r3, #0]
  418a2c:	34a0      	adds	r4, #160	; 0xa0
  418a2e:	2000      	movs	r0, #0
  418a30:	4b37      	ldr	r3, [pc, #220]	; (418b10 <switch_init+0x13c>)
  418a32:	4798      	blx	r3
  418a34:	3014      	adds	r0, #20
  418a36:	0080      	lsls	r0, r0, #2
  418a38:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a3c:	da35      	bge.n	418aaa <switch_init+0xd6>
  418a3e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418a42:	2111      	movs	r1, #17
  418a44:	4620      	mov	r0, r4
  418a46:	4b31      	ldr	r3, [pc, #196]	; (418b0c <switch_init+0x138>)
  418a48:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  418a4a:	4b2b      	ldr	r3, [pc, #172]	; (418af8 <switch_init+0x124>)
  418a4c:	681c      	ldr	r4, [r3, #0]
  418a4e:	34a0      	adds	r4, #160	; 0xa0
  418a50:	2000      	movs	r0, #0
  418a52:	4b2f      	ldr	r3, [pc, #188]	; (418b10 <switch_init+0x13c>)
  418a54:	4798      	blx	r3
  418a56:	3014      	adds	r0, #20
  418a58:	0080      	lsls	r0, r0, #2
  418a5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a5e:	da31      	bge.n	418ac4 <switch_init+0xf0>
  418a60:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418a64:	2112      	movs	r1, #18
  418a66:	4620      	mov	r0, r4
  418a68:	4b28      	ldr	r3, [pc, #160]	; (418b0c <switch_init+0x138>)
  418a6a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  418a6c:	4b22      	ldr	r3, [pc, #136]	; (418af8 <switch_init+0x124>)
  418a6e:	681c      	ldr	r4, [r3, #0]
  418a70:	34a0      	adds	r4, #160	; 0xa0
  418a72:	2000      	movs	r0, #0
  418a74:	4b26      	ldr	r3, [pc, #152]	; (418b10 <switch_init+0x13c>)
  418a76:	4798      	blx	r3
  418a78:	3014      	adds	r0, #20
  418a7a:	0080      	lsls	r0, r0, #2
  418a7c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a80:	da2d      	bge.n	418ade <switch_init+0x10a>
  418a82:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418a86:	2113      	movs	r1, #19
  418a88:	4620      	mov	r0, r4
  418a8a:	4b20      	ldr	r3, [pc, #128]	; (418b0c <switch_init+0x138>)
  418a8c:	4798      	blx	r3
  418a8e:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  418a90:	2000      	movs	r0, #0
  418a92:	4b1f      	ldr	r3, [pc, #124]	; (418b10 <switch_init+0x13c>)
  418a94:	4798      	blx	r3
  418a96:	3014      	adds	r0, #20
  418a98:	0080      	lsls	r0, r0, #2
  418a9a:	4b1e      	ldr	r3, [pc, #120]	; (418b14 <switch_init+0x140>)
  418a9c:	fb83 2300 	smull	r2, r3, r3, r0
  418aa0:	17c2      	asrs	r2, r0, #31
  418aa2:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418aa6:	b212      	sxth	r2, r2
  418aa8:	e7ba      	b.n	418a20 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  418aaa:	2000      	movs	r0, #0
  418aac:	4b18      	ldr	r3, [pc, #96]	; (418b10 <switch_init+0x13c>)
  418aae:	4798      	blx	r3
  418ab0:	3014      	adds	r0, #20
  418ab2:	0080      	lsls	r0, r0, #2
  418ab4:	4b17      	ldr	r3, [pc, #92]	; (418b14 <switch_init+0x140>)
  418ab6:	fb83 2300 	smull	r2, r3, r3, r0
  418aba:	17c2      	asrs	r2, r0, #31
  418abc:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418ac0:	b212      	sxth	r2, r2
  418ac2:	e7be      	b.n	418a42 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  418ac4:	2000      	movs	r0, #0
  418ac6:	4b12      	ldr	r3, [pc, #72]	; (418b10 <switch_init+0x13c>)
  418ac8:	4798      	blx	r3
  418aca:	3014      	adds	r0, #20
  418acc:	0080      	lsls	r0, r0, #2
  418ace:	4b11      	ldr	r3, [pc, #68]	; (418b14 <switch_init+0x140>)
  418ad0:	fb83 2300 	smull	r2, r3, r3, r0
  418ad4:	17c2      	asrs	r2, r0, #31
  418ad6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418ada:	b212      	sxth	r2, r2
  418adc:	e7c2      	b.n	418a64 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  418ade:	2000      	movs	r0, #0
  418ae0:	4b0b      	ldr	r3, [pc, #44]	; (418b10 <switch_init+0x13c>)
  418ae2:	4798      	blx	r3
  418ae4:	3014      	adds	r0, #20
  418ae6:	0080      	lsls	r0, r0, #2
  418ae8:	4b0a      	ldr	r3, [pc, #40]	; (418b14 <switch_init+0x140>)
  418aea:	fb83 2300 	smull	r2, r3, r3, r0
  418aee:	17c2      	asrs	r2, r0, #31
  418af0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  418af4:	b212      	sxth	r2, r2
  418af6:	e7c6      	b.n	418a86 <switch_init+0xb2>
  418af8:	204147a8 	.word	0x204147a8
  418afc:	0041851d 	.word	0x0041851d
  418b00:	0040a269 	.word	0x0040a269
  418b04:	0042c3ac 	.word	0x0042c3ac
  418b08:	0040a0d9 	.word	0x0040a0d9
  418b0c:	00409f49 	.word	0x00409f49
  418b10:	00414955 	.word	0x00414955
  418b14:	66666667 	.word	0x66666667

00418b18 <linemeter_init>:
{
  418b18:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  418b1a:	4c8a      	ldr	r4, [pc, #552]	; (418d44 <linemeter_init+0x22c>)
  418b1c:	6820      	ldr	r0, [r4, #0]
  418b1e:	3074      	adds	r0, #116	; 0x74
  418b20:	4b89      	ldr	r3, [pc, #548]	; (418d48 <linemeter_init+0x230>)
  418b22:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418b24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418b26:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418b2a:	2101      	movs	r1, #1
  418b2c:	3074      	adds	r0, #116	; 0x74
  418b2e:	4b87      	ldr	r3, [pc, #540]	; (418d4c <linemeter_init+0x234>)
  418b30:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418b32:	6824      	ldr	r4, [r4, #0]
  418b34:	3474      	adds	r4, #116	; 0x74
  418b36:	2000      	movs	r0, #0
  418b38:	4b85      	ldr	r3, [pc, #532]	; (418d50 <linemeter_init+0x238>)
  418b3a:	4798      	blx	r3
  418b3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b40:	0080      	lsls	r0, r0, #2
  418b42:	3050      	adds	r0, #80	; 0x50
  418b44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b48:	f280 8093 	bge.w	418c72 <linemeter_init+0x15a>
  418b4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418b4e:	2112      	movs	r1, #18
  418b50:	4620      	mov	r0, r4
  418b52:	4b7e      	ldr	r3, [pc, #504]	; (418d4c <linemeter_init+0x234>)
  418b54:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418b56:	4b7b      	ldr	r3, [pc, #492]	; (418d44 <linemeter_init+0x22c>)
  418b58:	681c      	ldr	r4, [r3, #0]
  418b5a:	3474      	adds	r4, #116	; 0x74
  418b5c:	2000      	movs	r0, #0
  418b5e:	4b7c      	ldr	r3, [pc, #496]	; (418d50 <linemeter_init+0x238>)
  418b60:	4798      	blx	r3
  418b62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b66:	0080      	lsls	r0, r0, #2
  418b68:	3050      	adds	r0, #80	; 0x50
  418b6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b6e:	f280 808f 	bge.w	418c90 <linemeter_init+0x178>
  418b72:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418b74:	2113      	movs	r1, #19
  418b76:	4620      	mov	r0, r4
  418b78:	4b74      	ldr	r3, [pc, #464]	; (418d4c <linemeter_init+0x234>)
  418b7a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418b7c:	4b71      	ldr	r3, [pc, #452]	; (418d44 <linemeter_init+0x22c>)
  418b7e:	681c      	ldr	r4, [r3, #0]
  418b80:	3474      	adds	r4, #116	; 0x74
  418b82:	2000      	movs	r0, #0
  418b84:	4b72      	ldr	r3, [pc, #456]	; (418d50 <linemeter_init+0x238>)
  418b86:	4798      	blx	r3
  418b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418b8c:	0080      	lsls	r0, r0, #2
  418b8e:	3050      	adds	r0, #80	; 0x50
  418b90:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b94:	f280 808b 	bge.w	418cae <linemeter_init+0x196>
  418b98:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418b9a:	2110      	movs	r1, #16
  418b9c:	4620      	mov	r0, r4
  418b9e:	4b6b      	ldr	r3, [pc, #428]	; (418d4c <linemeter_init+0x234>)
  418ba0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  418ba2:	4b68      	ldr	r3, [pc, #416]	; (418d44 <linemeter_init+0x22c>)
  418ba4:	681c      	ldr	r4, [r3, #0]
  418ba6:	3474      	adds	r4, #116	; 0x74
  418ba8:	2000      	movs	r0, #0
  418baa:	4b69      	ldr	r3, [pc, #420]	; (418d50 <linemeter_init+0x238>)
  418bac:	4798      	blx	r3
  418bae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418bb2:	0040      	lsls	r0, r0, #1
  418bb4:	3050      	adds	r0, #80	; 0x50
  418bb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418bba:	f280 8087 	bge.w	418ccc <linemeter_init+0x1b4>
  418bbe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418bc0:	2114      	movs	r1, #20
  418bc2:	4620      	mov	r0, r4
  418bc4:	4b61      	ldr	r3, [pc, #388]	; (418d4c <linemeter_init+0x234>)
  418bc6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  418bc8:	4b5e      	ldr	r3, [pc, #376]	; (418d44 <linemeter_init+0x22c>)
  418bca:	681c      	ldr	r4, [r3, #0]
  418bcc:	3474      	adds	r4, #116	; 0x74
  418bce:	2000      	movs	r0, #0
  418bd0:	4b5f      	ldr	r3, [pc, #380]	; (418d50 <linemeter_init+0x238>)
  418bd2:	4798      	blx	r3
  418bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418bd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418bdc:	3050      	adds	r0, #80	; 0x50
  418bde:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418be2:	f280 8082 	bge.w	418cea <linemeter_init+0x1d2>
  418be6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  418be8:	21c0      	movs	r1, #192	; 0xc0
  418bea:	4620      	mov	r0, r4
  418bec:	4b57      	ldr	r3, [pc, #348]	; (418d4c <linemeter_init+0x234>)
  418bee:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  418bf0:	4c54      	ldr	r4, [pc, #336]	; (418d44 <linemeter_init+0x22c>)
  418bf2:	6820      	ldr	r0, [r4, #0]
  418bf4:	4e57      	ldr	r6, [pc, #348]	; (418d54 <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418bf6:	89b2      	ldrh	r2, [r6, #12]
  418bf8:	2199      	movs	r1, #153	; 0x99
  418bfa:	3074      	adds	r0, #116	; 0x74
  418bfc:	4d56      	ldr	r5, [pc, #344]	; (418d58 <linemeter_init+0x240>)
  418bfe:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  418c00:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  418c02:	89b2      	ldrh	r2, [r6, #12]
  418c04:	21c9      	movs	r1, #201	; 0xc9
  418c06:	3074      	adds	r0, #116	; 0x74
  418c08:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418c0a:	6820      	ldr	r0, [r4, #0]
  418c0c:	f04f 0200 	mov.w	r2, #0
  418c10:	2304      	movs	r3, #4
  418c12:	f363 0202 	bfi	r2, r3, #0, #3
  418c16:	2311      	movs	r3, #17
  418c18:	f363 02c7 	bfi	r2, r3, #3, #5
  418c1c:	f363 220c 	bfi	r2, r3, #8, #5
  418c20:	2302      	movs	r3, #2
  418c22:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  418c26:	21ca      	movs	r1, #202	; 0xca
  418c28:	3074      	adds	r0, #116	; 0x74
  418c2a:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  418c2c:	6824      	ldr	r4, [r4, #0]
  418c2e:	3474      	adds	r4, #116	; 0x74
  418c30:	2000      	movs	r0, #0
  418c32:	4b47      	ldr	r3, [pc, #284]	; (418d50 <linemeter_init+0x238>)
  418c34:	4798      	blx	r3
  418c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c3a:	0040      	lsls	r0, r0, #1
  418c3c:	3050      	adds	r0, #80	; 0x50
  418c3e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c42:	da62      	bge.n	418d0a <linemeter_init+0x1f2>
  418c44:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418c46:	2190      	movs	r1, #144	; 0x90
  418c48:	4620      	mov	r0, r4
  418c4a:	4b40      	ldr	r3, [pc, #256]	; (418d4c <linemeter_init+0x234>)
  418c4c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  418c4e:	4b3d      	ldr	r3, [pc, #244]	; (418d44 <linemeter_init+0x22c>)
  418c50:	681c      	ldr	r4, [r3, #0]
  418c52:	3474      	adds	r4, #116	; 0x74
  418c54:	2000      	movs	r0, #0
  418c56:	4b3e      	ldr	r3, [pc, #248]	; (418d50 <linemeter_init+0x238>)
  418c58:	4798      	blx	r3
  418c5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418c5e:	3050      	adds	r0, #80	; 0x50
  418c60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c64:	da60      	bge.n	418d28 <linemeter_init+0x210>
  418c66:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418c68:	21c3      	movs	r1, #195	; 0xc3
  418c6a:	4620      	mov	r0, r4
  418c6c:	4b37      	ldr	r3, [pc, #220]	; (418d4c <linemeter_init+0x234>)
  418c6e:	4798      	blx	r3
  418c70:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418c72:	2000      	movs	r0, #0
  418c74:	4b36      	ldr	r3, [pc, #216]	; (418d50 <linemeter_init+0x238>)
  418c76:	4798      	blx	r3
  418c78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c7c:	0080      	lsls	r0, r0, #2
  418c7e:	3050      	adds	r0, #80	; 0x50
  418c80:	4b36      	ldr	r3, [pc, #216]	; (418d5c <linemeter_init+0x244>)
  418c82:	fb83 2300 	smull	r2, r3, r3, r0
  418c86:	17c2      	asrs	r2, r0, #31
  418c88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418c8c:	b212      	sxth	r2, r2
  418c8e:	e75e      	b.n	418b4e <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418c90:	2000      	movs	r0, #0
  418c92:	4b2f      	ldr	r3, [pc, #188]	; (418d50 <linemeter_init+0x238>)
  418c94:	4798      	blx	r3
  418c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418c9a:	0080      	lsls	r0, r0, #2
  418c9c:	3050      	adds	r0, #80	; 0x50
  418c9e:	4b2f      	ldr	r3, [pc, #188]	; (418d5c <linemeter_init+0x244>)
  418ca0:	fb83 2300 	smull	r2, r3, r3, r0
  418ca4:	17c2      	asrs	r2, r0, #31
  418ca6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418caa:	b212      	sxth	r2, r2
  418cac:	e762      	b.n	418b74 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418cae:	2000      	movs	r0, #0
  418cb0:	4b27      	ldr	r3, [pc, #156]	; (418d50 <linemeter_init+0x238>)
  418cb2:	4798      	blx	r3
  418cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418cb8:	0080      	lsls	r0, r0, #2
  418cba:	3050      	adds	r0, #80	; 0x50
  418cbc:	4b27      	ldr	r3, [pc, #156]	; (418d5c <linemeter_init+0x244>)
  418cbe:	fb83 2300 	smull	r2, r3, r3, r0
  418cc2:	17c2      	asrs	r2, r0, #31
  418cc4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418cc8:	b212      	sxth	r2, r2
  418cca:	e766      	b.n	418b9a <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  418ccc:	2000      	movs	r0, #0
  418cce:	4b20      	ldr	r3, [pc, #128]	; (418d50 <linemeter_init+0x238>)
  418cd0:	4798      	blx	r3
  418cd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418cd6:	0040      	lsls	r0, r0, #1
  418cd8:	3050      	adds	r0, #80	; 0x50
  418cda:	4b20      	ldr	r3, [pc, #128]	; (418d5c <linemeter_init+0x244>)
  418cdc:	fb83 2300 	smull	r2, r3, r3, r0
  418ce0:	17c2      	asrs	r2, r0, #31
  418ce2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ce6:	b212      	sxth	r2, r2
  418ce8:	e76a      	b.n	418bc0 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  418cea:	2000      	movs	r0, #0
  418cec:	4b18      	ldr	r3, [pc, #96]	; (418d50 <linemeter_init+0x238>)
  418cee:	4798      	blx	r3
  418cf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418cf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418cf8:	3050      	adds	r0, #80	; 0x50
  418cfa:	4b18      	ldr	r3, [pc, #96]	; (418d5c <linemeter_init+0x244>)
  418cfc:	fb83 2300 	smull	r2, r3, r3, r0
  418d00:	17c2      	asrs	r2, r0, #31
  418d02:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d06:	b212      	sxth	r2, r2
  418d08:	e76e      	b.n	418be8 <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  418d0a:	2000      	movs	r0, #0
  418d0c:	4b10      	ldr	r3, [pc, #64]	; (418d50 <linemeter_init+0x238>)
  418d0e:	4798      	blx	r3
  418d10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418d14:	0040      	lsls	r0, r0, #1
  418d16:	3050      	adds	r0, #80	; 0x50
  418d18:	4b10      	ldr	r3, [pc, #64]	; (418d5c <linemeter_init+0x244>)
  418d1a:	fb83 2300 	smull	r2, r3, r3, r0
  418d1e:	17c2      	asrs	r2, r0, #31
  418d20:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d24:	b212      	sxth	r2, r2
  418d26:	e78e      	b.n	418c46 <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  418d28:	2000      	movs	r0, #0
  418d2a:	4b09      	ldr	r3, [pc, #36]	; (418d50 <linemeter_init+0x238>)
  418d2c:	4798      	blx	r3
  418d2e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  418d32:	3050      	adds	r0, #80	; 0x50
  418d34:	4b09      	ldr	r3, [pc, #36]	; (418d5c <linemeter_init+0x244>)
  418d36:	fb83 2300 	smull	r2, r3, r3, r0
  418d3a:	17c2      	asrs	r2, r0, #31
  418d3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d40:	b212      	sxth	r2, r2
  418d42:	e791      	b.n	418c68 <linemeter_init+0x150>
  418d44:	204147a8 	.word	0x204147a8
  418d48:	0041851d 	.word	0x0041851d
  418d4c:	00409f49 	.word	0x00409f49
  418d50:	00414955 	.word	0x00414955
  418d54:	204147ac 	.word	0x204147ac
  418d58:	0040a0d9 	.word	0x0040a0d9
  418d5c:	66666667 	.word	0x66666667

00418d60 <gauge_init>:
{
  418d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  418d64:	4cc0      	ldr	r4, [pc, #768]	; (419068 <gauge_init+0x308>)
  418d66:	6820      	ldr	r0, [r4, #0]
  418d68:	3060      	adds	r0, #96	; 0x60
  418d6a:	4bc0      	ldr	r3, [pc, #768]	; (41906c <gauge_init+0x30c>)
  418d6c:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418d6e:	6820      	ldr	r0, [r4, #0]
  418d70:	f04f 0804 	mov.w	r8, #4
  418d74:	f04f 0200 	mov.w	r2, #0
  418d78:	f368 0202 	bfi	r2, r8, #0, #3
  418d7c:	2511      	movs	r5, #17
  418d7e:	f365 02c7 	bfi	r2, r5, #3, #5
  418d82:	f365 220c 	bfi	r2, r5, #8, #5
  418d86:	2702      	movs	r7, #2
  418d88:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418d8c:	2199      	movs	r1, #153	; 0x99
  418d8e:	3060      	adds	r0, #96	; 0x60
  418d90:	4eb7      	ldr	r6, [pc, #732]	; (419070 <gauge_init+0x310>)
  418d92:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418d94:	6820      	ldr	r0, [r4, #0]
  418d96:	f04f 0200 	mov.w	r2, #0
  418d9a:	f368 0202 	bfi	r2, r8, #0, #3
  418d9e:	f365 02c7 	bfi	r2, r5, #3, #5
  418da2:	f365 220c 	bfi	r2, r5, #8, #5
  418da6:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  418daa:	21c9      	movs	r1, #201	; 0xc9
  418dac:	3060      	adds	r0, #96	; 0x60
  418dae:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  418db0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  418db2:	4bb0      	ldr	r3, [pc, #704]	; (419074 <gauge_init+0x314>)
  418db4:	899a      	ldrh	r2, [r3, #12]
  418db6:	21ca      	movs	r1, #202	; 0xca
  418db8:	3060      	adds	r0, #96	; 0x60
  418dba:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  418dbc:	6824      	ldr	r4, [r4, #0]
  418dbe:	3460      	adds	r4, #96	; 0x60
  418dc0:	2000      	movs	r0, #0
  418dc2:	4bad      	ldr	r3, [pc, #692]	; (419078 <gauge_init+0x318>)
  418dc4:	4798      	blx	r3
  418dc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418dca:	3050      	adds	r0, #80	; 0x50
  418dcc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418dd0:	f280 8177 	bge.w	4190c2 <gauge_init+0x362>
  418dd4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418dd6:	2190      	movs	r1, #144	; 0x90
  418dd8:	4620      	mov	r0, r4
  418dda:	4ba8      	ldr	r3, [pc, #672]	; (41907c <gauge_init+0x31c>)
  418ddc:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  418dde:	4ba2      	ldr	r3, [pc, #648]	; (419068 <gauge_init+0x308>)
  418de0:	681c      	ldr	r4, [r3, #0]
  418de2:	3460      	adds	r4, #96	; 0x60
  418de4:	2000      	movs	r0, #0
  418de6:	4ba4      	ldr	r3, [pc, #656]	; (419078 <gauge_init+0x318>)
  418de8:	4798      	blx	r3
  418dea:	3014      	adds	r0, #20
  418dec:	0080      	lsls	r0, r0, #2
  418dee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418df2:	f280 8174 	bge.w	4190de <gauge_init+0x37e>
  418df6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418df8:	21c3      	movs	r1, #195	; 0xc3
  418dfa:	4620      	mov	r0, r4
  418dfc:	4b9f      	ldr	r3, [pc, #636]	; (41907c <gauge_init+0x31c>)
  418dfe:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  418e00:	4b99      	ldr	r3, [pc, #612]	; (419068 <gauge_init+0x308>)
  418e02:	681c      	ldr	r4, [r3, #0]
  418e04:	3460      	adds	r4, #96	; 0x60
  418e06:	2000      	movs	r0, #0
  418e08:	4b9b      	ldr	r3, [pc, #620]	; (419078 <gauge_init+0x318>)
  418e0a:	4798      	blx	r3
  418e0c:	300a      	adds	r0, #10
  418e0e:	00c0      	lsls	r0, r0, #3
  418e10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e14:	f280 8170 	bge.w	4190f8 <gauge_init+0x398>
  418e18:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  418e1a:	21c2      	movs	r1, #194	; 0xc2
  418e1c:	4620      	mov	r0, r4
  418e1e:	4b97      	ldr	r3, [pc, #604]	; (41907c <gauge_init+0x31c>)
  418e20:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418e22:	4b91      	ldr	r3, [pc, #580]	; (419068 <gauge_init+0x308>)
  418e24:	681c      	ldr	r4, [r3, #0]
  418e26:	3460      	adds	r4, #96	; 0x60
  418e28:	2000      	movs	r0, #0
  418e2a:	4b93      	ldr	r3, [pc, #588]	; (419078 <gauge_init+0x318>)
  418e2c:	4798      	blx	r3
  418e2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418e32:	0080      	lsls	r0, r0, #2
  418e34:	3050      	adds	r0, #80	; 0x50
  418e36:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e3a:	f280 816a 	bge.w	419112 <gauge_init+0x3b2>
  418e3e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418e40:	2112      	movs	r1, #18
  418e42:	4620      	mov	r0, r4
  418e44:	4b8d      	ldr	r3, [pc, #564]	; (41907c <gauge_init+0x31c>)
  418e46:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418e48:	4b87      	ldr	r3, [pc, #540]	; (419068 <gauge_init+0x308>)
  418e4a:	681c      	ldr	r4, [r3, #0]
  418e4c:	3460      	adds	r4, #96	; 0x60
  418e4e:	2000      	movs	r0, #0
  418e50:	4b89      	ldr	r3, [pc, #548]	; (419078 <gauge_init+0x318>)
  418e52:	4798      	blx	r3
  418e54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418e58:	0080      	lsls	r0, r0, #2
  418e5a:	3050      	adds	r0, #80	; 0x50
  418e5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e60:	f280 8166 	bge.w	419130 <gauge_init+0x3d0>
  418e64:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418e66:	2113      	movs	r1, #19
  418e68:	4620      	mov	r0, r4
  418e6a:	4b84      	ldr	r3, [pc, #528]	; (41907c <gauge_init+0x31c>)
  418e6c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418e6e:	4b7e      	ldr	r3, [pc, #504]	; (419068 <gauge_init+0x308>)
  418e70:	681c      	ldr	r4, [r3, #0]
  418e72:	3460      	adds	r4, #96	; 0x60
  418e74:	2000      	movs	r0, #0
  418e76:	4b80      	ldr	r3, [pc, #512]	; (419078 <gauge_init+0x318>)
  418e78:	4798      	blx	r3
  418e7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418e7e:	0080      	lsls	r0, r0, #2
  418e80:	3050      	adds	r0, #80	; 0x50
  418e82:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e86:	f280 8162 	bge.w	41914e <gauge_init+0x3ee>
  418e8a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418e8c:	2110      	movs	r1, #16
  418e8e:	4620      	mov	r0, r4
  418e90:	4b7a      	ldr	r3, [pc, #488]	; (41907c <gauge_init+0x31c>)
  418e92:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418e94:	4b74      	ldr	r3, [pc, #464]	; (419068 <gauge_init+0x308>)
  418e96:	681c      	ldr	r4, [r3, #0]
  418e98:	3460      	adds	r4, #96	; 0x60
  418e9a:	2000      	movs	r0, #0
  418e9c:	4b76      	ldr	r3, [pc, #472]	; (419078 <gauge_init+0x318>)
  418e9e:	4798      	blx	r3
  418ea0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418ea4:	0080      	lsls	r0, r0, #2
  418ea6:	3050      	adds	r0, #80	; 0x50
  418ea8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418eac:	f280 815e 	bge.w	41916c <gauge_init+0x40c>
  418eb0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418eb2:	2114      	movs	r1, #20
  418eb4:	4620      	mov	r0, r4
  418eb6:	4b71      	ldr	r3, [pc, #452]	; (41907c <gauge_init+0x31c>)
  418eb8:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  418eba:	4b6b      	ldr	r3, [pc, #428]	; (419068 <gauge_init+0x308>)
  418ebc:	681c      	ldr	r4, [r3, #0]
  418ebe:	3460      	adds	r4, #96	; 0x60
  418ec0:	2000      	movs	r0, #0
  418ec2:	4b6d      	ldr	r3, [pc, #436]	; (419078 <gauge_init+0x318>)
  418ec4:	4798      	blx	r3
  418ec6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418eca:	3050      	adds	r0, #80	; 0x50
  418ecc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418ed0:	f280 815b 	bge.w	41918a <gauge_init+0x42a>
  418ed4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  418ed6:	21c0      	movs	r1, #192	; 0xc0
  418ed8:	4620      	mov	r0, r4
  418eda:	4d68      	ldr	r5, [pc, #416]	; (41907c <gauge_init+0x31c>)
  418edc:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418ede:	4c62      	ldr	r4, [pc, #392]	; (419068 <gauge_init+0x308>)
  418ee0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418ee2:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418ee6:	2101      	movs	r1, #1
  418ee8:	3060      	adds	r0, #96	; 0x60
  418eea:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  418eec:	6820      	ldr	r0, [r4, #0]
  418eee:	3064      	adds	r0, #100	; 0x64
  418ef0:	4b5e      	ldr	r3, [pc, #376]	; (41906c <gauge_init+0x30c>)
  418ef2:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418ef4:	6820      	ldr	r0, [r4, #0]
  418ef6:	f04f 0804 	mov.w	r8, #4
  418efa:	f04f 0200 	mov.w	r2, #0
  418efe:	f368 0202 	bfi	r2, r8, #0, #3
  418f02:	2511      	movs	r5, #17
  418f04:	f365 02c7 	bfi	r2, r5, #3, #5
  418f08:	f365 220c 	bfi	r2, r5, #8, #5
  418f0c:	2702      	movs	r7, #2
  418f0e:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418f12:	2199      	movs	r1, #153	; 0x99
  418f14:	3064      	adds	r0, #100	; 0x64
  418f16:	4e56      	ldr	r6, [pc, #344]	; (419070 <gauge_init+0x310>)
  418f18:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418f1a:	6820      	ldr	r0, [r4, #0]
  418f1c:	f04f 0200 	mov.w	r2, #0
  418f20:	f368 0202 	bfi	r2, r8, #0, #3
  418f24:	f365 02c7 	bfi	r2, r5, #3, #5
  418f28:	f365 220c 	bfi	r2, r5, #8, #5
  418f2c:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  418f30:	21c9      	movs	r1, #201	; 0xc9
  418f32:	3064      	adds	r0, #100	; 0x64
  418f34:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  418f36:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  418f38:	4b4e      	ldr	r3, [pc, #312]	; (419074 <gauge_init+0x314>)
  418f3a:	899a      	ldrh	r2, [r3, #12]
  418f3c:	21ca      	movs	r1, #202	; 0xca
  418f3e:	3064      	adds	r0, #100	; 0x64
  418f40:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  418f42:	6824      	ldr	r4, [r4, #0]
  418f44:	3464      	adds	r4, #100	; 0x64
  418f46:	2000      	movs	r0, #0
  418f48:	4b4b      	ldr	r3, [pc, #300]	; (419078 <gauge_init+0x318>)
  418f4a:	4798      	blx	r3
  418f4c:	300a      	adds	r0, #10
  418f4e:	00c0      	lsls	r0, r0, #3
  418f50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f54:	f280 8127 	bge.w	4191a6 <gauge_init+0x446>
  418f58:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418f5a:	2190      	movs	r1, #144	; 0x90
  418f5c:	4620      	mov	r0, r4
  418f5e:	4b47      	ldr	r3, [pc, #284]	; (41907c <gauge_init+0x31c>)
  418f60:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  418f62:	4b41      	ldr	r3, [pc, #260]	; (419068 <gauge_init+0x308>)
  418f64:	681c      	ldr	r4, [r3, #0]
  418f66:	3464      	adds	r4, #100	; 0x64
  418f68:	2000      	movs	r0, #0
  418f6a:	4b43      	ldr	r3, [pc, #268]	; (419078 <gauge_init+0x318>)
  418f6c:	4798      	blx	r3
  418f6e:	300a      	adds	r0, #10
  418f70:	00c0      	lsls	r0, r0, #3
  418f72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f76:	f280 8123 	bge.w	4191c0 <gauge_init+0x460>
  418f7a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418f7c:	21c3      	movs	r1, #195	; 0xc3
  418f7e:	4620      	mov	r0, r4
  418f80:	4b3e      	ldr	r3, [pc, #248]	; (41907c <gauge_init+0x31c>)
  418f82:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  418f84:	4b38      	ldr	r3, [pc, #224]	; (419068 <gauge_init+0x308>)
  418f86:	681c      	ldr	r4, [r3, #0]
  418f88:	3464      	adds	r4, #100	; 0x64
  418f8a:	2000      	movs	r0, #0
  418f8c:	4b3a      	ldr	r3, [pc, #232]	; (419078 <gauge_init+0x318>)
  418f8e:	4798      	blx	r3
  418f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418f98:	3050      	adds	r0, #80	; 0x50
  418f9a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f9e:	f280 811c 	bge.w	4191da <gauge_init+0x47a>
  418fa2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  418fa4:	21c0      	movs	r1, #192	; 0xc0
  418fa6:	4620      	mov	r0, r4
  418fa8:	4b34      	ldr	r3, [pc, #208]	; (41907c <gauge_init+0x31c>)
  418faa:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  418fac:	4c2e      	ldr	r4, [pc, #184]	; (419068 <gauge_init+0x308>)
  418fae:	6820      	ldr	r0, [r4, #0]
  418fb0:	3068      	adds	r0, #104	; 0x68
  418fb2:	4b2e      	ldr	r3, [pc, #184]	; (41906c <gauge_init+0x30c>)
  418fb4:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  418fb6:	6820      	ldr	r0, [r4, #0]
  418fb8:	3068      	adds	r0, #104	; 0x68
  418fba:	4b2e      	ldr	r3, [pc, #184]	; (419074 <gauge_init+0x314>)
  418fbc:	6a1b      	ldr	r3, [r3, #32]
  418fbe:	f013 0f02 	tst.w	r3, #2
  418fc2:	f000 811a 	beq.w	4191fa <gauge_init+0x49a>
  418fc6:	2302      	movs	r3, #2
  418fc8:	f04f 0200 	mov.w	r2, #0
  418fcc:	f363 0202 	bfi	r2, r3, #0, #3
  418fd0:	2108      	movs	r1, #8
  418fd2:	f361 02c7 	bfi	r2, r1, #3, #5
  418fd6:	210b      	movs	r1, #11
  418fd8:	f361 220c 	bfi	r2, r1, #8, #5
  418fdc:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418fe0:	2199      	movs	r1, #153	; 0x99
  418fe2:	4b23      	ldr	r3, [pc, #140]	; (419070 <gauge_init+0x310>)
  418fe4:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  418fe6:	4b20      	ldr	r3, [pc, #128]	; (419068 <gauge_init+0x308>)
  418fe8:	681c      	ldr	r4, [r3, #0]
  418fea:	3468      	adds	r4, #104	; 0x68
  418fec:	2000      	movs	r0, #0
  418fee:	4b22      	ldr	r3, [pc, #136]	; (419078 <gauge_init+0x318>)
  418ff0:	4798      	blx	r3
  418ff2:	300a      	adds	r0, #10
  418ff4:	00c0      	lsls	r0, r0, #3
  418ff6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418ffa:	f280 8101 	bge.w	419200 <gauge_init+0x4a0>
  418ffe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419000:	2190      	movs	r1, #144	; 0x90
  419002:	4620      	mov	r0, r4
  419004:	4b1d      	ldr	r3, [pc, #116]	; (41907c <gauge_init+0x31c>)
  419006:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  419008:	4c17      	ldr	r4, [pc, #92]	; (419068 <gauge_init+0x308>)
  41900a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41900c:	22ff      	movs	r2, #255	; 0xff
  41900e:	212c      	movs	r1, #44	; 0x2c
  419010:	3068      	adds	r0, #104	; 0x68
  419012:	4b1b      	ldr	r3, [pc, #108]	; (419080 <gauge_init+0x320>)
  419014:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  419016:	6820      	ldr	r0, [r4, #0]
  419018:	3068      	adds	r0, #104	; 0x68
  41901a:	4b16      	ldr	r3, [pc, #88]	; (419074 <gauge_init+0x314>)
  41901c:	6a1b      	ldr	r3, [r3, #32]
  41901e:	f013 0f02 	tst.w	r3, #2
  419022:	f000 80fa 	beq.w	41921a <gauge_init+0x4ba>
  419026:	2302      	movs	r3, #2
  419028:	f04f 0200 	mov.w	r2, #0
  41902c:	f363 0202 	bfi	r2, r3, #0, #3
  419030:	2108      	movs	r1, #8
  419032:	f361 02c7 	bfi	r2, r1, #3, #5
  419036:	210b      	movs	r1, #11
  419038:	f361 220c 	bfi	r2, r1, #8, #5
  41903c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419040:	2129      	movs	r1, #41	; 0x29
  419042:	4b0b      	ldr	r3, [pc, #44]	; (419070 <gauge_init+0x310>)
  419044:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419046:	4c08      	ldr	r4, [pc, #32]	; (419068 <gauge_init+0x308>)
  419048:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41904a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41904e:	2101      	movs	r1, #1
  419050:	3068      	adds	r0, #104	; 0x68
  419052:	4b0a      	ldr	r3, [pc, #40]	; (41907c <gauge_init+0x31c>)
  419054:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  419056:	6824      	ldr	r4, [r4, #0]
  419058:	3468      	adds	r4, #104	; 0x68
  41905a:	2000      	movs	r0, #0
  41905c:	4b06      	ldr	r3, [pc, #24]	; (419078 <gauge_init+0x318>)
  41905e:	4798      	blx	r3
  419060:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419064:	0040      	lsls	r0, r0, #1
  419066:	e00d      	b.n	419084 <gauge_init+0x324>
  419068:	204147a8 	.word	0x204147a8
  41906c:	0041851d 	.word	0x0041851d
  419070:	0040a0d9 	.word	0x0040a0d9
  419074:	204147ac 	.word	0x204147ac
  419078:	00414955 	.word	0x00414955
  41907c:	00409f49 	.word	0x00409f49
  419080:	0040a269 	.word	0x0040a269
  419084:	3050      	adds	r0, #80	; 0x50
  419086:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41908a:	f280 80c9 	bge.w	419220 <gauge_init+0x4c0>
  41908e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  419090:	2103      	movs	r1, #3
  419092:	4620      	mov	r0, r4
  419094:	4b71      	ldr	r3, [pc, #452]	; (41925c <gauge_init+0x4fc>)
  419096:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  419098:	4b71      	ldr	r3, [pc, #452]	; (419260 <gauge_init+0x500>)
  41909a:	681c      	ldr	r4, [r3, #0]
  41909c:	3468      	adds	r4, #104	; 0x68
  41909e:	2000      	movs	r0, #0
  4190a0:	4b70      	ldr	r3, [pc, #448]	; (419264 <gauge_init+0x504>)
  4190a2:	4798      	blx	r3
  4190a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190a8:	0040      	lsls	r0, r0, #1
  4190aa:	3050      	adds	r0, #80	; 0x50
  4190ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4190b0:	f280 80c5 	bge.w	41923e <gauge_init+0x4de>
  4190b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4190b6:	2114      	movs	r1, #20
  4190b8:	4620      	mov	r0, r4
  4190ba:	4b68      	ldr	r3, [pc, #416]	; (41925c <gauge_init+0x4fc>)
  4190bc:	4798      	blx	r3
  4190be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4190c2:	2000      	movs	r0, #0
  4190c4:	4b67      	ldr	r3, [pc, #412]	; (419264 <gauge_init+0x504>)
  4190c6:	4798      	blx	r3
  4190c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190cc:	3050      	adds	r0, #80	; 0x50
  4190ce:	4b66      	ldr	r3, [pc, #408]	; (419268 <gauge_init+0x508>)
  4190d0:	fb83 2300 	smull	r2, r3, r3, r0
  4190d4:	17c2      	asrs	r2, r0, #31
  4190d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190da:	b212      	sxth	r2, r2
  4190dc:	e67b      	b.n	418dd6 <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  4190de:	2000      	movs	r0, #0
  4190e0:	4b60      	ldr	r3, [pc, #384]	; (419264 <gauge_init+0x504>)
  4190e2:	4798      	blx	r3
  4190e4:	3014      	adds	r0, #20
  4190e6:	0080      	lsls	r0, r0, #2
  4190e8:	4b5f      	ldr	r3, [pc, #380]	; (419268 <gauge_init+0x508>)
  4190ea:	fb83 2300 	smull	r2, r3, r3, r0
  4190ee:	17c2      	asrs	r2, r0, #31
  4190f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190f4:	b212      	sxth	r2, r2
  4190f6:	e67f      	b.n	418df8 <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  4190f8:	2000      	movs	r0, #0
  4190fa:	4b5a      	ldr	r3, [pc, #360]	; (419264 <gauge_init+0x504>)
  4190fc:	4798      	blx	r3
  4190fe:	300a      	adds	r0, #10
  419100:	00c0      	lsls	r0, r0, #3
  419102:	4b59      	ldr	r3, [pc, #356]	; (419268 <gauge_init+0x508>)
  419104:	fb83 2300 	smull	r2, r3, r3, r0
  419108:	17c2      	asrs	r2, r0, #31
  41910a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41910e:	b212      	sxth	r2, r2
  419110:	e683      	b.n	418e1a <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419112:	2000      	movs	r0, #0
  419114:	4b53      	ldr	r3, [pc, #332]	; (419264 <gauge_init+0x504>)
  419116:	4798      	blx	r3
  419118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41911c:	0080      	lsls	r0, r0, #2
  41911e:	3050      	adds	r0, #80	; 0x50
  419120:	4b51      	ldr	r3, [pc, #324]	; (419268 <gauge_init+0x508>)
  419122:	fb83 2300 	smull	r2, r3, r3, r0
  419126:	17c2      	asrs	r2, r0, #31
  419128:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41912c:	b212      	sxth	r2, r2
  41912e:	e687      	b.n	418e40 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  419130:	2000      	movs	r0, #0
  419132:	4b4c      	ldr	r3, [pc, #304]	; (419264 <gauge_init+0x504>)
  419134:	4798      	blx	r3
  419136:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41913a:	0080      	lsls	r0, r0, #2
  41913c:	3050      	adds	r0, #80	; 0x50
  41913e:	4b4a      	ldr	r3, [pc, #296]	; (419268 <gauge_init+0x508>)
  419140:	fb83 2300 	smull	r2, r3, r3, r0
  419144:	17c2      	asrs	r2, r0, #31
  419146:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41914a:	b212      	sxth	r2, r2
  41914c:	e68b      	b.n	418e66 <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41914e:	2000      	movs	r0, #0
  419150:	4b44      	ldr	r3, [pc, #272]	; (419264 <gauge_init+0x504>)
  419152:	4798      	blx	r3
  419154:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419158:	0080      	lsls	r0, r0, #2
  41915a:	3050      	adds	r0, #80	; 0x50
  41915c:	4b42      	ldr	r3, [pc, #264]	; (419268 <gauge_init+0x508>)
  41915e:	fb83 2300 	smull	r2, r3, r3, r0
  419162:	17c2      	asrs	r2, r0, #31
  419164:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419168:	b212      	sxth	r2, r2
  41916a:	e68f      	b.n	418e8c <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41916c:	2000      	movs	r0, #0
  41916e:	4b3d      	ldr	r3, [pc, #244]	; (419264 <gauge_init+0x504>)
  419170:	4798      	blx	r3
  419172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419176:	0080      	lsls	r0, r0, #2
  419178:	3050      	adds	r0, #80	; 0x50
  41917a:	4b3b      	ldr	r3, [pc, #236]	; (419268 <gauge_init+0x508>)
  41917c:	fb83 2300 	smull	r2, r3, r3, r0
  419180:	17c2      	asrs	r2, r0, #31
  419182:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419186:	b212      	sxth	r2, r2
  419188:	e693      	b.n	418eb2 <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  41918a:	2000      	movs	r0, #0
  41918c:	4b35      	ldr	r3, [pc, #212]	; (419264 <gauge_init+0x504>)
  41918e:	4798      	blx	r3
  419190:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419194:	3050      	adds	r0, #80	; 0x50
  419196:	4b34      	ldr	r3, [pc, #208]	; (419268 <gauge_init+0x508>)
  419198:	fb83 2300 	smull	r2, r3, r3, r0
  41919c:	17c2      	asrs	r2, r0, #31
  41919e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4191a2:	b212      	sxth	r2, r2
  4191a4:	e697      	b.n	418ed6 <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4191a6:	2000      	movs	r0, #0
  4191a8:	4b2e      	ldr	r3, [pc, #184]	; (419264 <gauge_init+0x504>)
  4191aa:	4798      	blx	r3
  4191ac:	300a      	adds	r0, #10
  4191ae:	00c0      	lsls	r0, r0, #3
  4191b0:	4b2d      	ldr	r3, [pc, #180]	; (419268 <gauge_init+0x508>)
  4191b2:	fb83 2300 	smull	r2, r3, r3, r0
  4191b6:	17c2      	asrs	r2, r0, #31
  4191b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4191bc:	b212      	sxth	r2, r2
  4191be:	e6cc      	b.n	418f5a <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4191c0:	2000      	movs	r0, #0
  4191c2:	4b28      	ldr	r3, [pc, #160]	; (419264 <gauge_init+0x504>)
  4191c4:	4798      	blx	r3
  4191c6:	300a      	adds	r0, #10
  4191c8:	00c0      	lsls	r0, r0, #3
  4191ca:	4b27      	ldr	r3, [pc, #156]	; (419268 <gauge_init+0x508>)
  4191cc:	fb83 2300 	smull	r2, r3, r3, r0
  4191d0:	17c2      	asrs	r2, r0, #31
  4191d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4191d6:	b212      	sxth	r2, r2
  4191d8:	e6d0      	b.n	418f7c <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  4191da:	2000      	movs	r0, #0
  4191dc:	4b21      	ldr	r3, [pc, #132]	; (419264 <gauge_init+0x504>)
  4191de:	4798      	blx	r3
  4191e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4191e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4191e8:	3050      	adds	r0, #80	; 0x50
  4191ea:	4b1f      	ldr	r3, [pc, #124]	; (419268 <gauge_init+0x508>)
  4191ec:	fb83 2300 	smull	r2, r3, r3, r0
  4191f0:	17c2      	asrs	r2, r0, #31
  4191f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4191f6:	b212      	sxth	r2, r2
  4191f8:	e6d4      	b.n	418fa4 <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  4191fa:	4b1c      	ldr	r3, [pc, #112]	; (41926c <gauge_init+0x50c>)
  4191fc:	881a      	ldrh	r2, [r3, #0]
  4191fe:	e6ef      	b.n	418fe0 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  419200:	2000      	movs	r0, #0
  419202:	4b18      	ldr	r3, [pc, #96]	; (419264 <gauge_init+0x504>)
  419204:	4798      	blx	r3
  419206:	300a      	adds	r0, #10
  419208:	00c0      	lsls	r0, r0, #3
  41920a:	4b17      	ldr	r3, [pc, #92]	; (419268 <gauge_init+0x508>)
  41920c:	fb83 2300 	smull	r2, r3, r3, r0
  419210:	17c2      	asrs	r2, r0, #31
  419212:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419216:	b212      	sxth	r2, r2
  419218:	e6f2      	b.n	419000 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41921a:	4b14      	ldr	r3, [pc, #80]	; (41926c <gauge_init+0x50c>)
  41921c:	881a      	ldrh	r2, [r3, #0]
  41921e:	e70f      	b.n	419040 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  419220:	2000      	movs	r0, #0
  419222:	4b10      	ldr	r3, [pc, #64]	; (419264 <gauge_init+0x504>)
  419224:	4798      	blx	r3
  419226:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41922a:	0040      	lsls	r0, r0, #1
  41922c:	3050      	adds	r0, #80	; 0x50
  41922e:	4b0e      	ldr	r3, [pc, #56]	; (419268 <gauge_init+0x508>)
  419230:	fb83 2300 	smull	r2, r3, r3, r0
  419234:	17c2      	asrs	r2, r0, #31
  419236:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41923a:	b212      	sxth	r2, r2
  41923c:	e728      	b.n	419090 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  41923e:	2000      	movs	r0, #0
  419240:	4b08      	ldr	r3, [pc, #32]	; (419264 <gauge_init+0x504>)
  419242:	4798      	blx	r3
  419244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419248:	0040      	lsls	r0, r0, #1
  41924a:	3050      	adds	r0, #80	; 0x50
  41924c:	4b06      	ldr	r3, [pc, #24]	; (419268 <gauge_init+0x508>)
  41924e:	fb83 2300 	smull	r2, r3, r3, r0
  419252:	17c2      	asrs	r2, r0, #31
  419254:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419258:	b212      	sxth	r2, r2
  41925a:	e72c      	b.n	4190b6 <gauge_init+0x356>
  41925c:	00409f49 	.word	0x00409f49
  419260:	204147a8 	.word	0x204147a8
  419264:	00414955 	.word	0x00414955
  419268:	66666667 	.word	0x66666667
  41926c:	0042c3ac 	.word	0x0042c3ac

00419270 <arc_init>:
{
  419270:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  419272:	4c53      	ldr	r4, [pc, #332]	; (4193c0 <arc_init+0x150>)
  419274:	6820      	ldr	r0, [r4, #0]
  419276:	301c      	adds	r0, #28
  419278:	4b52      	ldr	r3, [pc, #328]	; (4193c4 <arc_init+0x154>)
  41927a:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  41927c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41927e:	4b52      	ldr	r3, [pc, #328]	; (4193c8 <arc_init+0x158>)
  419280:	899a      	ldrh	r2, [r3, #12]
  419282:	2199      	movs	r1, #153	; 0x99
  419284:	301c      	adds	r0, #28
  419286:	4b51      	ldr	r3, [pc, #324]	; (4193cc <arc_init+0x15c>)
  419288:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  41928a:	6824      	ldr	r4, [r4, #0]
  41928c:	341c      	adds	r4, #28
  41928e:	2000      	movs	r0, #0
  419290:	4b4f      	ldr	r3, [pc, #316]	; (4193d0 <arc_init+0x160>)
  419292:	4798      	blx	r3
  419294:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419298:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41929c:	3050      	adds	r0, #80	; 0x50
  41929e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192a2:	da5e      	bge.n	419362 <arc_init+0xf2>
  4192a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4192a6:	2190      	movs	r1, #144	; 0x90
  4192a8:	4620      	mov	r0, r4
  4192aa:	4d4a      	ldr	r5, [pc, #296]	; (4193d4 <arc_init+0x164>)
  4192ac:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  4192ae:	4c44      	ldr	r4, [pc, #272]	; (4193c0 <arc_init+0x150>)
  4192b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  4192b2:	2201      	movs	r2, #1
  4192b4:	2194      	movs	r1, #148	; 0x94
  4192b6:	301c      	adds	r0, #28
  4192b8:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  4192ba:	6820      	ldr	r0, [r4, #0]
  4192bc:	3020      	adds	r0, #32
  4192be:	4b41      	ldr	r3, [pc, #260]	; (4193c4 <arc_init+0x154>)
  4192c0:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  4192c2:	6820      	ldr	r0, [r4, #0]
  4192c4:	3020      	adds	r0, #32
  4192c6:	4b40      	ldr	r3, [pc, #256]	; (4193c8 <arc_init+0x158>)
  4192c8:	6a1b      	ldr	r3, [r3, #32]
  4192ca:	f013 0f02 	tst.w	r3, #2
  4192ce:	d058      	beq.n	419382 <arc_init+0x112>
  4192d0:	f04f 0200 	mov.w	r2, #0
  4192d4:	2306      	movs	r3, #6
  4192d6:	f363 0202 	bfi	r2, r3, #0, #3
  4192da:	231a      	movs	r3, #26
  4192dc:	f363 02c7 	bfi	r2, r3, #3, #5
  4192e0:	231b      	movs	r3, #27
  4192e2:	f363 220c 	bfi	r2, r3, #8, #5
  4192e6:	2305      	movs	r3, #5
  4192e8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4192ec:	2199      	movs	r1, #153	; 0x99
  4192ee:	4b37      	ldr	r3, [pc, #220]	; (4193cc <arc_init+0x15c>)
  4192f0:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  4192f2:	4b33      	ldr	r3, [pc, #204]	; (4193c0 <arc_init+0x150>)
  4192f4:	681c      	ldr	r4, [r3, #0]
  4192f6:	3420      	adds	r4, #32
  4192f8:	2000      	movs	r0, #0
  4192fa:	4b35      	ldr	r3, [pc, #212]	; (4193d0 <arc_init+0x160>)
  4192fc:	4798      	blx	r3
  4192fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419302:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419306:	3050      	adds	r0, #80	; 0x50
  419308:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41930c:	da47      	bge.n	41939e <arc_init+0x12e>
  41930e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  419310:	2190      	movs	r1, #144	; 0x90
  419312:	4620      	mov	r0, r4
  419314:	4c2f      	ldr	r4, [pc, #188]	; (4193d4 <arc_init+0x164>)
  419316:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  419318:	4d29      	ldr	r5, [pc, #164]	; (4193c0 <arc_init+0x150>)
  41931a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  41931c:	2201      	movs	r2, #1
  41931e:	2194      	movs	r1, #148	; 0x94
  419320:	3020      	adds	r0, #32
  419322:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  419324:	6828      	ldr	r0, [r5, #0]
  419326:	3024      	adds	r0, #36	; 0x24
  419328:	4b26      	ldr	r3, [pc, #152]	; (4193c4 <arc_init+0x154>)
  41932a:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  41932c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41932e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419332:	2101      	movs	r1, #1
  419334:	3024      	adds	r0, #36	; 0x24
  419336:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  419338:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41933a:	2200      	movs	r2, #0
  41933c:	2110      	movs	r1, #16
  41933e:	3024      	adds	r0, #36	; 0x24
  419340:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  419342:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419344:	2200      	movs	r2, #0
  419346:	2111      	movs	r1, #17
  419348:	3024      	adds	r0, #36	; 0x24
  41934a:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  41934c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41934e:	2200      	movs	r2, #0
  419350:	2112      	movs	r1, #18
  419352:	3024      	adds	r0, #36	; 0x24
  419354:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  419356:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419358:	2200      	movs	r2, #0
  41935a:	2113      	movs	r1, #19
  41935c:	3024      	adds	r0, #36	; 0x24
  41935e:	47a0      	blx	r4
  419360:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  419362:	2000      	movs	r0, #0
  419364:	4b1a      	ldr	r3, [pc, #104]	; (4193d0 <arc_init+0x160>)
  419366:	4798      	blx	r3
  419368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41936c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419370:	3050      	adds	r0, #80	; 0x50
  419372:	4b19      	ldr	r3, [pc, #100]	; (4193d8 <arc_init+0x168>)
  419374:	fb83 2300 	smull	r2, r3, r3, r0
  419378:	17c2      	asrs	r2, r0, #31
  41937a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41937e:	b212      	sxth	r2, r2
  419380:	e791      	b.n	4192a6 <arc_init+0x36>
  419382:	2302      	movs	r3, #2
  419384:	f04f 0200 	mov.w	r2, #0
  419388:	f363 0202 	bfi	r2, r3, #0, #3
  41938c:	2108      	movs	r1, #8
  41938e:	f361 02c7 	bfi	r2, r1, #3, #5
  419392:	2109      	movs	r1, #9
  419394:	f361 220c 	bfi	r2, r1, #8, #5
  419398:	f363 324f 	bfi	r2, r3, #13, #3
  41939c:	e7a6      	b.n	4192ec <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41939e:	2000      	movs	r0, #0
  4193a0:	4b0b      	ldr	r3, [pc, #44]	; (4193d0 <arc_init+0x160>)
  4193a2:	4798      	blx	r3
  4193a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4193ac:	3050      	adds	r0, #80	; 0x50
  4193ae:	4b0a      	ldr	r3, [pc, #40]	; (4193d8 <arc_init+0x168>)
  4193b0:	fb83 2300 	smull	r2, r3, r3, r0
  4193b4:	17c2      	asrs	r2, r0, #31
  4193b6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4193ba:	b212      	sxth	r2, r2
  4193bc:	e7a8      	b.n	419310 <arc_init+0xa0>
  4193be:	bf00      	nop
  4193c0:	204147a8 	.word	0x204147a8
  4193c4:	0041851d 	.word	0x0041851d
  4193c8:	204147ac 	.word	0x204147ac
  4193cc:	0040a0d9 	.word	0x0040a0d9
  4193d0:	00414955 	.word	0x00414955
  4193d4:	00409f49 	.word	0x00409f49
  4193d8:	66666667 	.word	0x66666667

004193dc <chart_init>:
{
  4193dc:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  4193de:	4c9a      	ldr	r4, [pc, #616]	; (419648 <chart_init+0x26c>)
  4193e0:	6820      	ldr	r0, [r4, #0]
  4193e2:	3044      	adds	r0, #68	; 0x44
  4193e4:	4b99      	ldr	r3, [pc, #612]	; (41964c <chart_init+0x270>)
  4193e6:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  4193e8:	6820      	ldr	r0, [r4, #0]
  4193ea:	3044      	adds	r0, #68	; 0x44
  4193ec:	4b98      	ldr	r3, [pc, #608]	; (419650 <chart_init+0x274>)
  4193ee:	6a1b      	ldr	r3, [r3, #32]
  4193f0:	f013 0f02 	tst.w	r3, #2
  4193f4:	f000 80ab 	beq.w	41954e <chart_init+0x172>
  4193f8:	f04f 0200 	mov.w	r2, #0
  4193fc:	2305      	movs	r3, #5
  4193fe:	f363 0202 	bfi	r2, r3, #0, #3
  419402:	2315      	movs	r3, #21
  419404:	f363 02c7 	bfi	r2, r3, #3, #5
  419408:	f363 220c 	bfi	r2, r3, #8, #5
  41940c:	2302      	movs	r3, #2
  41940e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419412:	f248 0189 	movw	r1, #32905	; 0x8089
  419416:	4b8f      	ldr	r3, [pc, #572]	; (419654 <chart_init+0x278>)
  419418:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  41941a:	4c8b      	ldr	r4, [pc, #556]	; (419648 <chart_init+0x26c>)
  41941c:	6820      	ldr	r0, [r4, #0]
  41941e:	3048      	adds	r0, #72	; 0x48
  419420:	4b8a      	ldr	r3, [pc, #552]	; (41964c <chart_init+0x270>)
  419422:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  419424:	6824      	ldr	r4, [r4, #0]
  419426:	3448      	adds	r4, #72	; 0x48
  419428:	2000      	movs	r0, #0
  41942a:	4b8b      	ldr	r3, [pc, #556]	; (419658 <chart_init+0x27c>)
  41942c:	4798      	blx	r3
  41942e:	3050      	adds	r0, #80	; 0x50
  419430:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419434:	f280 809a 	bge.w	41956c <chart_init+0x190>
  419438:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41943a:	2190      	movs	r1, #144	; 0x90
  41943c:	4620      	mov	r0, r4
  41943e:	4b87      	ldr	r3, [pc, #540]	; (41965c <chart_init+0x280>)
  419440:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419442:	4b81      	ldr	r3, [pc, #516]	; (419648 <chart_init+0x26c>)
  419444:	681c      	ldr	r4, [r3, #0]
  419446:	3448      	adds	r4, #72	; 0x48
  419448:	2000      	movs	r0, #0
  41944a:	4b83      	ldr	r3, [pc, #524]	; (419658 <chart_init+0x27c>)
  41944c:	4798      	blx	r3
  41944e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419452:	0040      	lsls	r0, r0, #1
  419454:	3050      	adds	r0, #80	; 0x50
  419456:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41945a:	f280 8093 	bge.w	419584 <chart_init+0x1a8>
  41945e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  419460:	2192      	movs	r1, #146	; 0x92
  419462:	4620      	mov	r0, r4
  419464:	4b7d      	ldr	r3, [pc, #500]	; (41965c <chart_init+0x280>)
  419466:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419468:	4b77      	ldr	r3, [pc, #476]	; (419648 <chart_init+0x26c>)
  41946a:	681c      	ldr	r4, [r3, #0]
  41946c:	3448      	adds	r4, #72	; 0x48
  41946e:	2000      	movs	r0, #0
  419470:	4b79      	ldr	r3, [pc, #484]	; (419658 <chart_init+0x27c>)
  419472:	4798      	blx	r3
  419474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419478:	0040      	lsls	r0, r0, #1
  41947a:	3050      	adds	r0, #80	; 0x50
  41947c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419480:	f280 808f 	bge.w	4195a2 <chart_init+0x1c6>
  419484:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  419486:	2193      	movs	r1, #147	; 0x93
  419488:	4620      	mov	r0, r4
  41948a:	4b74      	ldr	r3, [pc, #464]	; (41965c <chart_init+0x280>)
  41948c:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41948e:	4b6e      	ldr	r3, [pc, #440]	; (419648 <chart_init+0x26c>)
  419490:	6818      	ldr	r0, [r3, #0]
  419492:	3048      	adds	r0, #72	; 0x48
  419494:	4b6e      	ldr	r3, [pc, #440]	; (419650 <chart_init+0x274>)
  419496:	6a1b      	ldr	r3, [r3, #32]
  419498:	f013 0f02 	tst.w	r3, #2
  41949c:	f000 8090 	beq.w	4195c0 <chart_init+0x1e4>
  4194a0:	f04f 0200 	mov.w	r2, #0
  4194a4:	2306      	movs	r3, #6
  4194a6:	f363 0202 	bfi	r2, r3, #0, #3
  4194aa:	231a      	movs	r3, #26
  4194ac:	f363 02c7 	bfi	r2, r3, #3, #5
  4194b0:	231c      	movs	r3, #28
  4194b2:	f363 220c 	bfi	r2, r3, #8, #5
  4194b6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  4194ba:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4194be:	2199      	movs	r1, #153	; 0x99
  4194c0:	4b64      	ldr	r3, [pc, #400]	; (419654 <chart_init+0x278>)
  4194c2:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  4194c4:	4c60      	ldr	r4, [pc, #384]	; (419648 <chart_init+0x26c>)
  4194c6:	6820      	ldr	r0, [r4, #0]
  4194c8:	304c      	adds	r0, #76	; 0x4c
  4194ca:	4b60      	ldr	r3, [pc, #384]	; (41964c <chart_init+0x270>)
  4194cc:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  4194ce:	6824      	ldr	r4, [r4, #0]
  4194d0:	344c      	adds	r4, #76	; 0x4c
  4194d2:	2000      	movs	r0, #0
  4194d4:	4b60      	ldr	r3, [pc, #384]	; (419658 <chart_init+0x27c>)
  4194d6:	4798      	blx	r3
  4194d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4194dc:	3050      	adds	r0, #80	; 0x50
  4194de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194e2:	da7c      	bge.n	4195de <chart_init+0x202>
  4194e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4194e6:	2190      	movs	r1, #144	; 0x90
  4194e8:	4620      	mov	r0, r4
  4194ea:	4b5c      	ldr	r3, [pc, #368]	; (41965c <chart_init+0x280>)
  4194ec:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  4194ee:	4b56      	ldr	r3, [pc, #344]	; (419648 <chart_init+0x26c>)
  4194f0:	681c      	ldr	r4, [r3, #0]
  4194f2:	344c      	adds	r4, #76	; 0x4c
  4194f4:	2000      	movs	r0, #0
  4194f6:	4b58      	ldr	r3, [pc, #352]	; (419658 <chart_init+0x27c>)
  4194f8:	4798      	blx	r3
  4194fa:	3014      	adds	r0, #20
  4194fc:	0080      	lsls	r0, r0, #2
  4194fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419502:	da7a      	bge.n	4195fa <chart_init+0x21e>
  419504:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  419506:	2103      	movs	r1, #3
  419508:	4620      	mov	r0, r4
  41950a:	4b54      	ldr	r3, [pc, #336]	; (41965c <chart_init+0x280>)
  41950c:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  41950e:	4b4e      	ldr	r3, [pc, #312]	; (419648 <chart_init+0x26c>)
  419510:	681c      	ldr	r4, [r3, #0]
  419512:	344c      	adds	r4, #76	; 0x4c
  419514:	2000      	movs	r0, #0
  419516:	4b50      	ldr	r3, [pc, #320]	; (419658 <chart_init+0x27c>)
  419518:	4798      	blx	r3
  41951a:	3028      	adds	r0, #40	; 0x28
  41951c:	0040      	lsls	r0, r0, #1
  41951e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419522:	da77      	bge.n	419614 <chart_init+0x238>
  419524:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419526:	2114      	movs	r1, #20
  419528:	4620      	mov	r0, r4
  41952a:	4b4c      	ldr	r3, [pc, #304]	; (41965c <chart_init+0x280>)
  41952c:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  41952e:	4b46      	ldr	r3, [pc, #280]	; (419648 <chart_init+0x26c>)
  419530:	681c      	ldr	r4, [r3, #0]
  419532:	344c      	adds	r4, #76	; 0x4c
  419534:	2000      	movs	r0, #0
  419536:	4b48      	ldr	r3, [pc, #288]	; (419658 <chart_init+0x27c>)
  419538:	4798      	blx	r3
  41953a:	3050      	adds	r0, #80	; 0x50
  41953c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419540:	da75      	bge.n	41962e <chart_init+0x252>
  419542:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419544:	2101      	movs	r1, #1
  419546:	4620      	mov	r0, r4
  419548:	4b44      	ldr	r3, [pc, #272]	; (41965c <chart_init+0x280>)
  41954a:	4798      	blx	r3
  41954c:	bd10      	pop	{r4, pc}
  41954e:	f04f 0200 	mov.w	r2, #0
  419552:	2305      	movs	r3, #5
  419554:	f363 0202 	bfi	r2, r3, #0, #3
  419558:	2314      	movs	r3, #20
  41955a:	f363 02c7 	bfi	r2, r3, #3, #5
  41955e:	2317      	movs	r3, #23
  419560:	f363 220c 	bfi	r2, r3, #8, #5
  419564:	2303      	movs	r3, #3
  419566:	f363 324f 	bfi	r2, r3, #13, #3
  41956a:	e752      	b.n	419412 <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  41956c:	2000      	movs	r0, #0
  41956e:	4b3a      	ldr	r3, [pc, #232]	; (419658 <chart_init+0x27c>)
  419570:	4798      	blx	r3
  419572:	3050      	adds	r0, #80	; 0x50
  419574:	4b3a      	ldr	r3, [pc, #232]	; (419660 <chart_init+0x284>)
  419576:	fb83 2300 	smull	r2, r3, r3, r0
  41957a:	17c2      	asrs	r2, r0, #31
  41957c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419580:	b212      	sxth	r2, r2
  419582:	e75a      	b.n	41943a <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419584:	2000      	movs	r0, #0
  419586:	4b34      	ldr	r3, [pc, #208]	; (419658 <chart_init+0x27c>)
  419588:	4798      	blx	r3
  41958a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41958e:	0040      	lsls	r0, r0, #1
  419590:	3050      	adds	r0, #80	; 0x50
  419592:	4b33      	ldr	r3, [pc, #204]	; (419660 <chart_init+0x284>)
  419594:	fb83 2300 	smull	r2, r3, r3, r0
  419598:	17c2      	asrs	r2, r0, #31
  41959a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41959e:	b212      	sxth	r2, r2
  4195a0:	e75e      	b.n	419460 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4195a2:	2000      	movs	r0, #0
  4195a4:	4b2c      	ldr	r3, [pc, #176]	; (419658 <chart_init+0x27c>)
  4195a6:	4798      	blx	r3
  4195a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4195ac:	0040      	lsls	r0, r0, #1
  4195ae:	3050      	adds	r0, #80	; 0x50
  4195b0:	4b2b      	ldr	r3, [pc, #172]	; (419660 <chart_init+0x284>)
  4195b2:	fb83 2300 	smull	r2, r3, r3, r0
  4195b6:	17c2      	asrs	r2, r0, #31
  4195b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4195bc:	b212      	sxth	r2, r2
  4195be:	e762      	b.n	419486 <chart_init+0xaa>
  4195c0:	f04f 0200 	mov.w	r2, #0
  4195c4:	2304      	movs	r3, #4
  4195c6:	f363 0202 	bfi	r2, r3, #0, #3
  4195ca:	2310      	movs	r3, #16
  4195cc:	f363 02c7 	bfi	r2, r3, #3, #5
  4195d0:	2312      	movs	r3, #18
  4195d2:	f363 220c 	bfi	r2, r3, #8, #5
  4195d6:	2302      	movs	r3, #2
  4195d8:	f363 324f 	bfi	r2, r3, #13, #3
  4195dc:	e76f      	b.n	4194be <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  4195de:	2000      	movs	r0, #0
  4195e0:	4b1d      	ldr	r3, [pc, #116]	; (419658 <chart_init+0x27c>)
  4195e2:	4798      	blx	r3
  4195e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4195e8:	3050      	adds	r0, #80	; 0x50
  4195ea:	4b1d      	ldr	r3, [pc, #116]	; (419660 <chart_init+0x284>)
  4195ec:	fb83 2300 	smull	r2, r3, r3, r0
  4195f0:	17c2      	asrs	r2, r0, #31
  4195f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4195f6:	b212      	sxth	r2, r2
  4195f8:	e775      	b.n	4194e6 <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  4195fa:	2000      	movs	r0, #0
  4195fc:	4b16      	ldr	r3, [pc, #88]	; (419658 <chart_init+0x27c>)
  4195fe:	4798      	blx	r3
  419600:	3014      	adds	r0, #20
  419602:	0080      	lsls	r0, r0, #2
  419604:	4b16      	ldr	r3, [pc, #88]	; (419660 <chart_init+0x284>)
  419606:	fb83 2300 	smull	r2, r3, r3, r0
  41960a:	17c2      	asrs	r2, r0, #31
  41960c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419610:	b212      	sxth	r2, r2
  419612:	e778      	b.n	419506 <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  419614:	2000      	movs	r0, #0
  419616:	4b10      	ldr	r3, [pc, #64]	; (419658 <chart_init+0x27c>)
  419618:	4798      	blx	r3
  41961a:	3028      	adds	r0, #40	; 0x28
  41961c:	0040      	lsls	r0, r0, #1
  41961e:	4b10      	ldr	r3, [pc, #64]	; (419660 <chart_init+0x284>)
  419620:	fb83 2300 	smull	r2, r3, r3, r0
  419624:	17c2      	asrs	r2, r0, #31
  419626:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41962a:	b212      	sxth	r2, r2
  41962c:	e77b      	b.n	419526 <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  41962e:	2000      	movs	r0, #0
  419630:	4b09      	ldr	r3, [pc, #36]	; (419658 <chart_init+0x27c>)
  419632:	4798      	blx	r3
  419634:	3050      	adds	r0, #80	; 0x50
  419636:	4b0a      	ldr	r3, [pc, #40]	; (419660 <chart_init+0x284>)
  419638:	fb83 2300 	smull	r2, r3, r3, r0
  41963c:	17c2      	asrs	r2, r0, #31
  41963e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419642:	b212      	sxth	r2, r2
  419644:	e77e      	b.n	419544 <chart_init+0x168>
  419646:	bf00      	nop
  419648:	204147a8 	.word	0x204147a8
  41964c:	0041851d 	.word	0x0041851d
  419650:	204147ac 	.word	0x204147ac
  419654:	0040a0d9 	.word	0x0040a0d9
  419658:	00414955 	.word	0x00414955
  41965c:	00409f49 	.word	0x00409f49
  419660:	66666667 	.word	0x66666667

00419664 <calendar_init>:
{
  419664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  419666:	4cbd      	ldr	r4, [pc, #756]	; (41995c <calendar_init+0x2f8>)
  419668:	6820      	ldr	r0, [r4, #0]
  41966a:	3034      	adds	r0, #52	; 0x34
  41966c:	4bbc      	ldr	r3, [pc, #752]	; (419960 <calendar_init+0x2fc>)
  41966e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  419670:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419672:	2200      	movs	r2, #0
  419674:	2110      	movs	r1, #16
  419676:	3034      	adds	r0, #52	; 0x34
  419678:	4bba      	ldr	r3, [pc, #744]	; (419964 <calendar_init+0x300>)
  41967a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41967c:	6824      	ldr	r4, [r4, #0]
  41967e:	3434      	adds	r4, #52	; 0x34
  419680:	2000      	movs	r0, #0
  419682:	4bb9      	ldr	r3, [pc, #740]	; (419968 <calendar_init+0x304>)
  419684:	4798      	blx	r3
  419686:	2801      	cmp	r0, #1
  419688:	f240 81e5 	bls.w	419a56 <calendar_init+0x3f2>
  41968c:	2000      	movs	r0, #0
  41968e:	4bb7      	ldr	r3, [pc, #732]	; (41996c <calendar_init+0x308>)
  419690:	4798      	blx	r3
  419692:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419696:	0040      	lsls	r0, r0, #1
  419698:	3050      	adds	r0, #80	; 0x50
  41969a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41969e:	f280 81f3 	bge.w	419a88 <calendar_init+0x424>
  4196a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4196a4:	2112      	movs	r1, #18
  4196a6:	4620      	mov	r0, r4
  4196a8:	4bae      	ldr	r3, [pc, #696]	; (419964 <calendar_init+0x300>)
  4196aa:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4196ac:	4bab      	ldr	r3, [pc, #684]	; (41995c <calendar_init+0x2f8>)
  4196ae:	681c      	ldr	r4, [r3, #0]
  4196b0:	3434      	adds	r4, #52	; 0x34
  4196b2:	2000      	movs	r0, #0
  4196b4:	4bac      	ldr	r3, [pc, #688]	; (419968 <calendar_init+0x304>)
  4196b6:	4798      	blx	r3
  4196b8:	2801      	cmp	r0, #1
  4196ba:	f240 81f4 	bls.w	419aa6 <calendar_init+0x442>
  4196be:	2000      	movs	r0, #0
  4196c0:	4baa      	ldr	r3, [pc, #680]	; (41996c <calendar_init+0x308>)
  4196c2:	4798      	blx	r3
  4196c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4196c8:	0040      	lsls	r0, r0, #1
  4196ca:	3050      	adds	r0, #80	; 0x50
  4196cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4196d0:	f280 8202 	bge.w	419ad8 <calendar_init+0x474>
  4196d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4196d6:	2113      	movs	r1, #19
  4196d8:	4620      	mov	r0, r4
  4196da:	4da2      	ldr	r5, [pc, #648]	; (419964 <calendar_init+0x300>)
  4196dc:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  4196de:	4c9f      	ldr	r4, [pc, #636]	; (41995c <calendar_init+0x2f8>)
  4196e0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4196e2:	2200      	movs	r2, #0
  4196e4:	2111      	movs	r1, #17
  4196e6:	3034      	adds	r0, #52	; 0x34
  4196e8:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4196ea:	6824      	ldr	r4, [r4, #0]
  4196ec:	3434      	adds	r4, #52	; 0x34
  4196ee:	2000      	movs	r0, #0
  4196f0:	4b9d      	ldr	r3, [pc, #628]	; (419968 <calendar_init+0x304>)
  4196f2:	4798      	blx	r3
  4196f4:	2801      	cmp	r0, #1
  4196f6:	f240 81fe 	bls.w	419af6 <calendar_init+0x492>
  4196fa:	2000      	movs	r0, #0
  4196fc:	4b9b      	ldr	r3, [pc, #620]	; (41996c <calendar_init+0x308>)
  4196fe:	4798      	blx	r3
  419700:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419704:	0040      	lsls	r0, r0, #1
  419706:	3050      	adds	r0, #80	; 0x50
  419708:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41970c:	f280 820c 	bge.w	419b28 <calendar_init+0x4c4>
  419710:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  419712:	2115      	movs	r1, #21
  419714:	4620      	mov	r0, r4
  419716:	4b93      	ldr	r3, [pc, #588]	; (419964 <calendar_init+0x300>)
  419718:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  41971a:	4b90      	ldr	r3, [pc, #576]	; (41995c <calendar_init+0x2f8>)
  41971c:	681c      	ldr	r4, [r3, #0]
  41971e:	3434      	adds	r4, #52	; 0x34
  419720:	2000      	movs	r0, #0
  419722:	4b91      	ldr	r3, [pc, #580]	; (419968 <calendar_init+0x304>)
  419724:	4798      	blx	r3
  419726:	2801      	cmp	r0, #1
  419728:	f240 820d 	bls.w	419b46 <calendar_init+0x4e2>
  41972c:	2000      	movs	r0, #0
  41972e:	4b8f      	ldr	r3, [pc, #572]	; (41996c <calendar_init+0x308>)
  419730:	4798      	blx	r3
  419732:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419736:	0040      	lsls	r0, r0, #1
  419738:	3050      	adds	r0, #80	; 0x50
  41973a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41973e:	f280 821b 	bge.w	419b78 <calendar_init+0x514>
  419742:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  419744:	2116      	movs	r1, #22
  419746:	4620      	mov	r0, r4
  419748:	4b86      	ldr	r3, [pc, #536]	; (419964 <calendar_init+0x300>)
  41974a:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  41974c:	4b83      	ldr	r3, [pc, #524]	; (41995c <calendar_init+0x2f8>)
  41974e:	6818      	ldr	r0, [r3, #0]
  419750:	3034      	adds	r0, #52	; 0x34
  419752:	4b87      	ldr	r3, [pc, #540]	; (419970 <calendar_init+0x30c>)
  419754:	6a1b      	ldr	r3, [r3, #32]
  419756:	f013 0f02 	tst.w	r3, #2
  41975a:	f000 821c 	beq.w	419b96 <calendar_init+0x532>
  41975e:	f04f 0200 	mov.w	r2, #0
  419762:	2304      	movs	r3, #4
  419764:	f363 0202 	bfi	r2, r3, #0, #3
  419768:	2311      	movs	r3, #17
  41976a:	f363 02c7 	bfi	r2, r3, #3, #5
  41976e:	f363 220c 	bfi	r2, r3, #8, #5
  419772:	2302      	movs	r3, #2
  419774:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419778:	f249 0189 	movw	r1, #37001	; 0x9089
  41977c:	4b7d      	ldr	r3, [pc, #500]	; (419974 <calendar_init+0x310>)
  41977e:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  419780:	4c76      	ldr	r4, [pc, #472]	; (41995c <calendar_init+0x2f8>)
  419782:	6820      	ldr	r0, [r4, #0]
  419784:	3038      	adds	r0, #56	; 0x38
  419786:	4b76      	ldr	r3, [pc, #472]	; (419960 <calendar_init+0x2fc>)
  419788:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41978a:	6820      	ldr	r0, [r4, #0]
  41978c:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  41978e:	4b78      	ldr	r3, [pc, #480]	; (419970 <calendar_init+0x30c>)
  419790:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  419792:	f013 0f02 	tst.w	r3, #2
  419796:	f000 8201 	beq.w	419b9c <calendar_init+0x538>
  41979a:	f04f 0200 	mov.w	r2, #0
  41979e:	2302      	movs	r3, #2
  4197a0:	f363 0202 	bfi	r2, r3, #0, #3
  4197a4:	2306      	movs	r3, #6
  4197a6:	f363 02c7 	bfi	r2, r3, #3, #5
  4197aa:	2309      	movs	r3, #9
  4197ac:	f363 220c 	bfi	r2, r3, #8, #5
  4197b0:	f36f 324f 	bfc	r2, #13, #3
  4197b4:	f248 0189 	movw	r1, #32905	; 0x8089
  4197b8:	4b6e      	ldr	r3, [pc, #440]	; (419974 <calendar_init+0x310>)
  4197ba:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  4197bc:	4b67      	ldr	r3, [pc, #412]	; (41995c <calendar_init+0x2f8>)
  4197be:	681c      	ldr	r4, [r3, #0]
  4197c0:	3438      	adds	r4, #56	; 0x38
  4197c2:	2000      	movs	r0, #0
  4197c4:	4b68      	ldr	r3, [pc, #416]	; (419968 <calendar_init+0x304>)
  4197c6:	4798      	blx	r3
  4197c8:	2801      	cmp	r0, #1
  4197ca:	f240 81f2 	bls.w	419bb2 <calendar_init+0x54e>
  4197ce:	2000      	movs	r0, #0
  4197d0:	4b66      	ldr	r3, [pc, #408]	; (41996c <calendar_init+0x308>)
  4197d2:	4798      	blx	r3
  4197d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4197d8:	0040      	lsls	r0, r0, #1
  4197da:	3050      	adds	r0, #80	; 0x50
  4197dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197e0:	f280 8200 	bge.w	419be4 <calendar_init+0x580>
  4197e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4197e6:	2112      	movs	r1, #18
  4197e8:	4620      	mov	r0, r4
  4197ea:	4b5e      	ldr	r3, [pc, #376]	; (419964 <calendar_init+0x300>)
  4197ec:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  4197ee:	4b5b      	ldr	r3, [pc, #364]	; (41995c <calendar_init+0x2f8>)
  4197f0:	681c      	ldr	r4, [r3, #0]
  4197f2:	3438      	adds	r4, #56	; 0x38
  4197f4:	2000      	movs	r0, #0
  4197f6:	4b5c      	ldr	r3, [pc, #368]	; (419968 <calendar_init+0x304>)
  4197f8:	4798      	blx	r3
  4197fa:	2801      	cmp	r0, #1
  4197fc:	f240 8201 	bls.w	419c02 <calendar_init+0x59e>
  419800:	2000      	movs	r0, #0
  419802:	4b5a      	ldr	r3, [pc, #360]	; (41996c <calendar_init+0x308>)
  419804:	4798      	blx	r3
  419806:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41980a:	0040      	lsls	r0, r0, #1
  41980c:	3050      	adds	r0, #80	; 0x50
  41980e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419812:	f280 820f 	bge.w	419c34 <calendar_init+0x5d0>
  419816:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419818:	2113      	movs	r1, #19
  41981a:	4620      	mov	r0, r4
  41981c:	4b51      	ldr	r3, [pc, #324]	; (419964 <calendar_init+0x300>)
  41981e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419820:	4b4e      	ldr	r3, [pc, #312]	; (41995c <calendar_init+0x2f8>)
  419822:	681c      	ldr	r4, [r3, #0]
  419824:	3438      	adds	r4, #56	; 0x38
  419826:	2000      	movs	r0, #0
  419828:	4b4f      	ldr	r3, [pc, #316]	; (419968 <calendar_init+0x304>)
  41982a:	4798      	blx	r3
  41982c:	2801      	cmp	r0, #1
  41982e:	f240 8210 	bls.w	419c52 <calendar_init+0x5ee>
  419832:	2000      	movs	r0, #0
  419834:	4b4d      	ldr	r3, [pc, #308]	; (41996c <calendar_init+0x308>)
  419836:	4798      	blx	r3
  419838:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41983c:	0040      	lsls	r0, r0, #1
  41983e:	3050      	adds	r0, #80	; 0x50
  419840:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419844:	f280 822a 	bge.w	419c9c <calendar_init+0x638>
  419848:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41984a:	2111      	movs	r1, #17
  41984c:	4620      	mov	r0, r4
  41984e:	4b45      	ldr	r3, [pc, #276]	; (419964 <calendar_init+0x300>)
  419850:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  419852:	4c42      	ldr	r4, [pc, #264]	; (41995c <calendar_init+0x2f8>)
  419854:	6820      	ldr	r0, [r4, #0]
  419856:	3030      	adds	r0, #48	; 0x30
  419858:	4b41      	ldr	r3, [pc, #260]	; (419960 <calendar_init+0x2fc>)
  41985a:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  41985c:	6824      	ldr	r4, [r4, #0]
  41985e:	3430      	adds	r4, #48	; 0x30
  419860:	2000      	movs	r0, #0
  419862:	4b42      	ldr	r3, [pc, #264]	; (41996c <calendar_init+0x308>)
  419864:	4798      	blx	r3
  419866:	3014      	adds	r0, #20
  419868:	0080      	lsls	r0, r0, #2
  41986a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41986e:	f280 8224 	bge.w	419cba <calendar_init+0x656>
  419872:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419874:	2101      	movs	r1, #1
  419876:	4620      	mov	r0, r4
  419878:	4b3a      	ldr	r3, [pc, #232]	; (419964 <calendar_init+0x300>)
  41987a:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41987c:	4b37      	ldr	r3, [pc, #220]	; (41995c <calendar_init+0x2f8>)
  41987e:	6818      	ldr	r0, [r3, #0]
  419880:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  419882:	4b3b      	ldr	r3, [pc, #236]	; (419970 <calendar_init+0x30c>)
  419884:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  419886:	f013 0f02 	tst.w	r3, #2
  41988a:	f000 8223 	beq.w	419cd4 <calendar_init+0x670>
  41988e:	f04f 0200 	mov.w	r2, #0
  419892:	2302      	movs	r3, #2
  419894:	f363 0202 	bfi	r2, r3, #0, #3
  419898:	2306      	movs	r3, #6
  41989a:	f363 02c7 	bfi	r2, r3, #3, #5
  41989e:	2309      	movs	r3, #9
  4198a0:	f363 220c 	bfi	r2, r3, #8, #5
  4198a4:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4198a8:	f248 1189 	movw	r1, #33161	; 0x8189
  4198ac:	4d31      	ldr	r5, [pc, #196]	; (419974 <calendar_init+0x310>)
  4198ae:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  4198b0:	4c2a      	ldr	r4, [pc, #168]	; (41995c <calendar_init+0x2f8>)
  4198b2:	6820      	ldr	r0, [r4, #0]
  4198b4:	4b30      	ldr	r3, [pc, #192]	; (419978 <calendar_init+0x314>)
  4198b6:	889a      	ldrh	r2, [r3, #4]
  4198b8:	f24a 0189 	movw	r1, #41097	; 0xa089
  4198bc:	3030      	adds	r0, #48	; 0x30
  4198be:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  4198c0:	6820      	ldr	r0, [r4, #0]
  4198c2:	3030      	adds	r0, #48	; 0x30
  4198c4:	4b2a      	ldr	r3, [pc, #168]	; (419970 <calendar_init+0x30c>)
  4198c6:	6a1b      	ldr	r3, [r3, #32]
  4198c8:	f013 0f02 	tst.w	r3, #2
  4198cc:	f000 8205 	beq.w	419cda <calendar_init+0x676>
  4198d0:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4198d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
  4198d6:	4d29      	ldr	r5, [pc, #164]	; (41997c <calendar_init+0x318>)
  4198d8:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  4198da:	4c20      	ldr	r4, [pc, #128]	; (41995c <calendar_init+0x2f8>)
  4198dc:	6820      	ldr	r0, [r4, #0]
  4198de:	2233      	movs	r2, #51	; 0x33
  4198e0:	f241 012c 	movw	r1, #4140	; 0x102c
  4198e4:	3030      	adds	r0, #48	; 0x30
  4198e6:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  4198e8:	6820      	ldr	r0, [r4, #0]
  4198ea:	22ff      	movs	r2, #255	; 0xff
  4198ec:	f44f 710b 	mov.w	r1, #556	; 0x22c
  4198f0:	3030      	adds	r0, #48	; 0x30
  4198f2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  4198f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4198f6:	4b20      	ldr	r3, [pc, #128]	; (419978 <calendar_init+0x314>)
  4198f8:	881a      	ldrh	r2, [r3, #0]
  4198fa:	f248 2189 	movw	r1, #33417	; 0x8289
  4198fe:	3030      	adds	r0, #48	; 0x30
  419900:	4e1c      	ldr	r6, [pc, #112]	; (419974 <calendar_init+0x310>)
  419902:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  419904:	6820      	ldr	r0, [r4, #0]
  419906:	4d1a      	ldr	r5, [pc, #104]	; (419970 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419908:	89aa      	ldrh	r2, [r5, #12]
  41990a:	f240 2129 	movw	r1, #553	; 0x229
  41990e:	3030      	adds	r0, #48	; 0x30
  419910:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419912:	6820      	ldr	r0, [r4, #0]
  419914:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  419916:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419918:	f013 0f02 	tst.w	r3, #2
  41991c:	f000 81df 	beq.w	419cde <calendar_init+0x67a>
  419920:	f04f 0200 	mov.w	r2, #0
  419924:	2303      	movs	r3, #3
  419926:	f363 0202 	bfi	r2, r3, #0, #3
  41992a:	230c      	movs	r3, #12
  41992c:	f363 02c7 	bfi	r2, r3, #3, #5
  419930:	f363 220c 	bfi	r2, r3, #8, #5
  419934:	2301      	movs	r3, #1
  419936:	f363 324f 	bfi	r2, r3, #13, #3
  41993a:	2129      	movs	r1, #41	; 0x29
  41993c:	4d0d      	ldr	r5, [pc, #52]	; (419974 <calendar_init+0x310>)
  41993e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  419940:	4c06      	ldr	r4, [pc, #24]	; (41995c <calendar_init+0x2f8>)
  419942:	6820      	ldr	r0, [r4, #0]
  419944:	4e0a      	ldr	r6, [pc, #40]	; (419970 <calendar_init+0x30c>)
  419946:	89b2      	ldrh	r2, [r6, #12]
  419948:	f240 1129 	movw	r1, #297	; 0x129
  41994c:	3030      	adds	r0, #48	; 0x30
  41994e:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  419950:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419952:	2202      	movs	r2, #2
  419954:	f44f 7198 	mov.w	r1, #304	; 0x130
  419958:	3030      	adds	r0, #48	; 0x30
  41995a:	e011      	b.n	419980 <calendar_init+0x31c>
  41995c:	204147a8 	.word	0x204147a8
  419960:	0041851d 	.word	0x0041851d
  419964:	00409f49 	.word	0x00409f49
  419968:	00414975 	.word	0x00414975
  41996c:	00414955 	.word	0x00414955
  419970:	204147ac 	.word	0x204147ac
  419974:	0040a0d9 	.word	0x0040a0d9
  419978:	0042c3ac 	.word	0x0042c3ac
  41997c:	0040a269 	.word	0x0040a269
  419980:	4fb9      	ldr	r7, [pc, #740]	; (419c68 <calendar_init+0x604>)
  419982:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  419984:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419986:	2204      	movs	r2, #4
  419988:	f240 1131 	movw	r1, #305	; 0x131
  41998c:	3030      	adds	r0, #48	; 0x30
  41998e:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  419990:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419992:	89b2      	ldrh	r2, [r6, #12]
  419994:	f240 1139 	movw	r1, #313	; 0x139
  419998:	3030      	adds	r0, #48	; 0x30
  41999a:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41999c:	6824      	ldr	r4, [r4, #0]
  41999e:	3430      	adds	r4, #48	; 0x30
  4199a0:	2000      	movs	r0, #0
  4199a2:	4bb2      	ldr	r3, [pc, #712]	; (419c6c <calendar_init+0x608>)
  4199a4:	4798      	blx	r3
  4199a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4199aa:	3050      	adds	r0, #80	; 0x50
  4199ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4199b0:	f280 8198 	bge.w	419ce4 <calendar_init+0x680>
  4199b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4199b6:	2114      	movs	r1, #20
  4199b8:	4620      	mov	r0, r4
  4199ba:	4bab      	ldr	r3, [pc, #684]	; (419c68 <calendar_init+0x604>)
  4199bc:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4199be:	4bac      	ldr	r3, [pc, #688]	; (419c70 <calendar_init+0x60c>)
  4199c0:	681c      	ldr	r4, [r3, #0]
  4199c2:	3430      	adds	r4, #48	; 0x30
  4199c4:	2000      	movs	r0, #0
  4199c6:	4bab      	ldr	r3, [pc, #684]	; (419c74 <calendar_init+0x610>)
  4199c8:	4798      	blx	r3
  4199ca:	2801      	cmp	r0, #1
  4199cc:	f240 8198 	bls.w	419d00 <calendar_init+0x69c>
  4199d0:	2000      	movs	r0, #0
  4199d2:	4ba6      	ldr	r3, [pc, #664]	; (419c6c <calendar_init+0x608>)
  4199d4:	4798      	blx	r3
  4199d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4199da:	0040      	lsls	r0, r0, #1
  4199dc:	3050      	adds	r0, #80	; 0x50
  4199de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4199e2:	f280 81a6 	bge.w	419d32 <calendar_init+0x6ce>
  4199e6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4199e8:	2112      	movs	r1, #18
  4199ea:	4620      	mov	r0, r4
  4199ec:	4b9e      	ldr	r3, [pc, #632]	; (419c68 <calendar_init+0x604>)
  4199ee:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4199f0:	4b9f      	ldr	r3, [pc, #636]	; (419c70 <calendar_init+0x60c>)
  4199f2:	681c      	ldr	r4, [r3, #0]
  4199f4:	3430      	adds	r4, #48	; 0x30
  4199f6:	2000      	movs	r0, #0
  4199f8:	4b9e      	ldr	r3, [pc, #632]	; (419c74 <calendar_init+0x610>)
  4199fa:	4798      	blx	r3
  4199fc:	2801      	cmp	r0, #1
  4199fe:	f240 81a7 	bls.w	419d50 <calendar_init+0x6ec>
  419a02:	2000      	movs	r0, #0
  419a04:	4b99      	ldr	r3, [pc, #612]	; (419c6c <calendar_init+0x608>)
  419a06:	4798      	blx	r3
  419a08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419a0c:	0040      	lsls	r0, r0, #1
  419a0e:	3050      	adds	r0, #80	; 0x50
  419a10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a14:	f280 81b5 	bge.w	419d82 <calendar_init+0x71e>
  419a18:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419a1a:	2113      	movs	r1, #19
  419a1c:	4620      	mov	r0, r4
  419a1e:	4b92      	ldr	r3, [pc, #584]	; (419c68 <calendar_init+0x604>)
  419a20:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419a22:	4b93      	ldr	r3, [pc, #588]	; (419c70 <calendar_init+0x60c>)
  419a24:	681c      	ldr	r4, [r3, #0]
  419a26:	3430      	adds	r4, #48	; 0x30
  419a28:	2000      	movs	r0, #0
  419a2a:	4b92      	ldr	r3, [pc, #584]	; (419c74 <calendar_init+0x610>)
  419a2c:	4798      	blx	r3
  419a2e:	2801      	cmp	r0, #1
  419a30:	f240 81b6 	bls.w	419da0 <calendar_init+0x73c>
  419a34:	2000      	movs	r0, #0
  419a36:	4b8d      	ldr	r3, [pc, #564]	; (419c6c <calendar_init+0x608>)
  419a38:	4798      	blx	r3
  419a3a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419a3e:	0040      	lsls	r0, r0, #1
  419a40:	3050      	adds	r0, #80	; 0x50
  419a42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a46:	f280 81c4 	bge.w	419dd2 <calendar_init+0x76e>
  419a4a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419a4c:	2111      	movs	r1, #17
  419a4e:	4620      	mov	r0, r4
  419a50:	4b85      	ldr	r3, [pc, #532]	; (419c68 <calendar_init+0x604>)
  419a52:	4798      	blx	r3
  419a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419a56:	2000      	movs	r0, #0
  419a58:	4b84      	ldr	r3, [pc, #528]	; (419c6c <calendar_init+0x608>)
  419a5a:	4798      	blx	r3
  419a5c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419a60:	3050      	adds	r0, #80	; 0x50
  419a62:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a66:	da01      	bge.n	419a6c <calendar_init+0x408>
  419a68:	2201      	movs	r2, #1
  419a6a:	e61b      	b.n	4196a4 <calendar_init+0x40>
  419a6c:	2000      	movs	r0, #0
  419a6e:	4b7f      	ldr	r3, [pc, #508]	; (419c6c <calendar_init+0x608>)
  419a70:	4798      	blx	r3
  419a72:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419a76:	3050      	adds	r0, #80	; 0x50
  419a78:	4b7f      	ldr	r3, [pc, #508]	; (419c78 <calendar_init+0x614>)
  419a7a:	fb83 2300 	smull	r2, r3, r3, r0
  419a7e:	17c2      	asrs	r2, r0, #31
  419a80:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419a84:	b212      	sxth	r2, r2
  419a86:	e60d      	b.n	4196a4 <calendar_init+0x40>
  419a88:	2000      	movs	r0, #0
  419a8a:	4b78      	ldr	r3, [pc, #480]	; (419c6c <calendar_init+0x608>)
  419a8c:	4798      	blx	r3
  419a8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419a92:	0040      	lsls	r0, r0, #1
  419a94:	3050      	adds	r0, #80	; 0x50
  419a96:	4b78      	ldr	r3, [pc, #480]	; (419c78 <calendar_init+0x614>)
  419a98:	fb83 2300 	smull	r2, r3, r3, r0
  419a9c:	17c2      	asrs	r2, r0, #31
  419a9e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419aa2:	b212      	sxth	r2, r2
  419aa4:	e5fe      	b.n	4196a4 <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419aa6:	2000      	movs	r0, #0
  419aa8:	4b70      	ldr	r3, [pc, #448]	; (419c6c <calendar_init+0x608>)
  419aaa:	4798      	blx	r3
  419aac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ab0:	3050      	adds	r0, #80	; 0x50
  419ab2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ab6:	da01      	bge.n	419abc <calendar_init+0x458>
  419ab8:	2201      	movs	r2, #1
  419aba:	e60c      	b.n	4196d6 <calendar_init+0x72>
  419abc:	2000      	movs	r0, #0
  419abe:	4b6b      	ldr	r3, [pc, #428]	; (419c6c <calendar_init+0x608>)
  419ac0:	4798      	blx	r3
  419ac2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ac6:	3050      	adds	r0, #80	; 0x50
  419ac8:	4b6b      	ldr	r3, [pc, #428]	; (419c78 <calendar_init+0x614>)
  419aca:	fb83 2300 	smull	r2, r3, r3, r0
  419ace:	17c2      	asrs	r2, r0, #31
  419ad0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ad4:	b212      	sxth	r2, r2
  419ad6:	e5fe      	b.n	4196d6 <calendar_init+0x72>
  419ad8:	2000      	movs	r0, #0
  419ada:	4b64      	ldr	r3, [pc, #400]	; (419c6c <calendar_init+0x608>)
  419adc:	4798      	blx	r3
  419ade:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ae2:	0040      	lsls	r0, r0, #1
  419ae4:	3050      	adds	r0, #80	; 0x50
  419ae6:	4b64      	ldr	r3, [pc, #400]	; (419c78 <calendar_init+0x614>)
  419ae8:	fb83 2300 	smull	r2, r3, r3, r0
  419aec:	17c2      	asrs	r2, r0, #31
  419aee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419af2:	b212      	sxth	r2, r2
  419af4:	e5ef      	b.n	4196d6 <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419af6:	2000      	movs	r0, #0
  419af8:	4b5c      	ldr	r3, [pc, #368]	; (419c6c <calendar_init+0x608>)
  419afa:	4798      	blx	r3
  419afc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b00:	3050      	adds	r0, #80	; 0x50
  419b02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b06:	da01      	bge.n	419b0c <calendar_init+0x4a8>
  419b08:	2201      	movs	r2, #1
  419b0a:	e602      	b.n	419712 <calendar_init+0xae>
  419b0c:	2000      	movs	r0, #0
  419b0e:	4b57      	ldr	r3, [pc, #348]	; (419c6c <calendar_init+0x608>)
  419b10:	4798      	blx	r3
  419b12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b16:	3050      	adds	r0, #80	; 0x50
  419b18:	4b57      	ldr	r3, [pc, #348]	; (419c78 <calendar_init+0x614>)
  419b1a:	fb83 2300 	smull	r2, r3, r3, r0
  419b1e:	17c2      	asrs	r2, r0, #31
  419b20:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b24:	b212      	sxth	r2, r2
  419b26:	e5f4      	b.n	419712 <calendar_init+0xae>
  419b28:	2000      	movs	r0, #0
  419b2a:	4b50      	ldr	r3, [pc, #320]	; (419c6c <calendar_init+0x608>)
  419b2c:	4798      	blx	r3
  419b2e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b32:	0040      	lsls	r0, r0, #1
  419b34:	3050      	adds	r0, #80	; 0x50
  419b36:	4b50      	ldr	r3, [pc, #320]	; (419c78 <calendar_init+0x614>)
  419b38:	fb83 2300 	smull	r2, r3, r3, r0
  419b3c:	17c2      	asrs	r2, r0, #31
  419b3e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b42:	b212      	sxth	r2, r2
  419b44:	e5e5      	b.n	419712 <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  419b46:	2000      	movs	r0, #0
  419b48:	4b48      	ldr	r3, [pc, #288]	; (419c6c <calendar_init+0x608>)
  419b4a:	4798      	blx	r3
  419b4c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b50:	3050      	adds	r0, #80	; 0x50
  419b52:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b56:	da01      	bge.n	419b5c <calendar_init+0x4f8>
  419b58:	2201      	movs	r2, #1
  419b5a:	e5f3      	b.n	419744 <calendar_init+0xe0>
  419b5c:	2000      	movs	r0, #0
  419b5e:	4b43      	ldr	r3, [pc, #268]	; (419c6c <calendar_init+0x608>)
  419b60:	4798      	blx	r3
  419b62:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b66:	3050      	adds	r0, #80	; 0x50
  419b68:	4b43      	ldr	r3, [pc, #268]	; (419c78 <calendar_init+0x614>)
  419b6a:	fb83 2300 	smull	r2, r3, r3, r0
  419b6e:	17c2      	asrs	r2, r0, #31
  419b70:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b74:	b212      	sxth	r2, r2
  419b76:	e5e5      	b.n	419744 <calendar_init+0xe0>
  419b78:	2000      	movs	r0, #0
  419b7a:	4b3c      	ldr	r3, [pc, #240]	; (419c6c <calendar_init+0x608>)
  419b7c:	4798      	blx	r3
  419b7e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419b82:	0040      	lsls	r0, r0, #1
  419b84:	3050      	adds	r0, #80	; 0x50
  419b86:	4b3c      	ldr	r3, [pc, #240]	; (419c78 <calendar_init+0x614>)
  419b88:	fb83 2300 	smull	r2, r3, r3, r0
  419b8c:	17c2      	asrs	r2, r0, #31
  419b8e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b92:	b212      	sxth	r2, r2
  419b94:	e5d6      	b.n	419744 <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  419b96:	4b39      	ldr	r3, [pc, #228]	; (419c7c <calendar_init+0x618>)
  419b98:	881a      	ldrh	r2, [r3, #0]
  419b9a:	e5ed      	b.n	419778 <calendar_init+0x114>
  419b9c:	f04f 0207 	mov.w	r2, #7
  419ba0:	231d      	movs	r3, #29
  419ba2:	f363 02c7 	bfi	r2, r3, #3, #5
  419ba6:	f363 220c 	bfi	r2, r3, #8, #5
  419baa:	2303      	movs	r3, #3
  419bac:	f363 324f 	bfi	r2, r3, #13, #3
  419bb0:	e600      	b.n	4197b4 <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419bb2:	2000      	movs	r0, #0
  419bb4:	4b2d      	ldr	r3, [pc, #180]	; (419c6c <calendar_init+0x608>)
  419bb6:	4798      	blx	r3
  419bb8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bbc:	3050      	adds	r0, #80	; 0x50
  419bbe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bc2:	da01      	bge.n	419bc8 <calendar_init+0x564>
  419bc4:	2201      	movs	r2, #1
  419bc6:	e60e      	b.n	4197e6 <calendar_init+0x182>
  419bc8:	2000      	movs	r0, #0
  419bca:	4b28      	ldr	r3, [pc, #160]	; (419c6c <calendar_init+0x608>)
  419bcc:	4798      	blx	r3
  419bce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bd2:	3050      	adds	r0, #80	; 0x50
  419bd4:	4b28      	ldr	r3, [pc, #160]	; (419c78 <calendar_init+0x614>)
  419bd6:	fb83 2300 	smull	r2, r3, r3, r0
  419bda:	17c2      	asrs	r2, r0, #31
  419bdc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419be0:	b212      	sxth	r2, r2
  419be2:	e600      	b.n	4197e6 <calendar_init+0x182>
  419be4:	2000      	movs	r0, #0
  419be6:	4b21      	ldr	r3, [pc, #132]	; (419c6c <calendar_init+0x608>)
  419be8:	4798      	blx	r3
  419bea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419bee:	0040      	lsls	r0, r0, #1
  419bf0:	3050      	adds	r0, #80	; 0x50
  419bf2:	4b21      	ldr	r3, [pc, #132]	; (419c78 <calendar_init+0x614>)
  419bf4:	fb83 2300 	smull	r2, r3, r3, r0
  419bf8:	17c2      	asrs	r2, r0, #31
  419bfa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419bfe:	b212      	sxth	r2, r2
  419c00:	e5f1      	b.n	4197e6 <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419c02:	2000      	movs	r0, #0
  419c04:	4b19      	ldr	r3, [pc, #100]	; (419c6c <calendar_init+0x608>)
  419c06:	4798      	blx	r3
  419c08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c0c:	3050      	adds	r0, #80	; 0x50
  419c0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c12:	da01      	bge.n	419c18 <calendar_init+0x5b4>
  419c14:	2201      	movs	r2, #1
  419c16:	e5ff      	b.n	419818 <calendar_init+0x1b4>
  419c18:	2000      	movs	r0, #0
  419c1a:	4b14      	ldr	r3, [pc, #80]	; (419c6c <calendar_init+0x608>)
  419c1c:	4798      	blx	r3
  419c1e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c22:	3050      	adds	r0, #80	; 0x50
  419c24:	4b14      	ldr	r3, [pc, #80]	; (419c78 <calendar_init+0x614>)
  419c26:	fb83 2300 	smull	r2, r3, r3, r0
  419c2a:	17c2      	asrs	r2, r0, #31
  419c2c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c30:	b212      	sxth	r2, r2
  419c32:	e5f1      	b.n	419818 <calendar_init+0x1b4>
  419c34:	2000      	movs	r0, #0
  419c36:	4b0d      	ldr	r3, [pc, #52]	; (419c6c <calendar_init+0x608>)
  419c38:	4798      	blx	r3
  419c3a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c3e:	0040      	lsls	r0, r0, #1
  419c40:	3050      	adds	r0, #80	; 0x50
  419c42:	4b0d      	ldr	r3, [pc, #52]	; (419c78 <calendar_init+0x614>)
  419c44:	fb83 2300 	smull	r2, r3, r3, r0
  419c48:	17c2      	asrs	r2, r0, #31
  419c4a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c4e:	b212      	sxth	r2, r2
  419c50:	e5e2      	b.n	419818 <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  419c52:	2000      	movs	r0, #0
  419c54:	4b05      	ldr	r3, [pc, #20]	; (419c6c <calendar_init+0x608>)
  419c56:	4798      	blx	r3
  419c58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c5c:	3050      	adds	r0, #80	; 0x50
  419c5e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c62:	da0d      	bge.n	419c80 <calendar_init+0x61c>
  419c64:	2201      	movs	r2, #1
  419c66:	e5f0      	b.n	41984a <calendar_init+0x1e6>
  419c68:	00409f49 	.word	0x00409f49
  419c6c:	00414955 	.word	0x00414955
  419c70:	204147a8 	.word	0x204147a8
  419c74:	00414975 	.word	0x00414975
  419c78:	66666667 	.word	0x66666667
  419c7c:	0042c3ac 	.word	0x0042c3ac
  419c80:	2000      	movs	r0, #0
  419c82:	4b5b      	ldr	r3, [pc, #364]	; (419df0 <calendar_init+0x78c>)
  419c84:	4798      	blx	r3
  419c86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419c8a:	3050      	adds	r0, #80	; 0x50
  419c8c:	4b59      	ldr	r3, [pc, #356]	; (419df4 <calendar_init+0x790>)
  419c8e:	fb83 2300 	smull	r2, r3, r3, r0
  419c92:	17c2      	asrs	r2, r0, #31
  419c94:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c98:	b212      	sxth	r2, r2
  419c9a:	e5d6      	b.n	41984a <calendar_init+0x1e6>
  419c9c:	2000      	movs	r0, #0
  419c9e:	4b54      	ldr	r3, [pc, #336]	; (419df0 <calendar_init+0x78c>)
  419ca0:	4798      	blx	r3
  419ca2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ca6:	0040      	lsls	r0, r0, #1
  419ca8:	3050      	adds	r0, #80	; 0x50
  419caa:	4b52      	ldr	r3, [pc, #328]	; (419df4 <calendar_init+0x790>)
  419cac:	fb83 2300 	smull	r2, r3, r3, r0
  419cb0:	17c2      	asrs	r2, r0, #31
  419cb2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419cb6:	b212      	sxth	r2, r2
  419cb8:	e5c7      	b.n	41984a <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  419cba:	2000      	movs	r0, #0
  419cbc:	4b4c      	ldr	r3, [pc, #304]	; (419df0 <calendar_init+0x78c>)
  419cbe:	4798      	blx	r3
  419cc0:	3014      	adds	r0, #20
  419cc2:	0080      	lsls	r0, r0, #2
  419cc4:	4b4b      	ldr	r3, [pc, #300]	; (419df4 <calendar_init+0x790>)
  419cc6:	fb83 2300 	smull	r2, r3, r3, r0
  419cca:	17c2      	asrs	r2, r0, #31
  419ccc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419cd0:	b212      	sxth	r2, r2
  419cd2:	e5cf      	b.n	419874 <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  419cd4:	4b48      	ldr	r3, [pc, #288]	; (419df8 <calendar_init+0x794>)
  419cd6:	881a      	ldrh	r2, [r3, #0]
  419cd8:	e5e6      	b.n	4198a8 <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  419cda:	2266      	movs	r2, #102	; 0x66
  419cdc:	e5f9      	b.n	4198d2 <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419cde:	4b46      	ldr	r3, [pc, #280]	; (419df8 <calendar_init+0x794>)
  419ce0:	881a      	ldrh	r2, [r3, #0]
  419ce2:	e62a      	b.n	41993a <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  419ce4:	2000      	movs	r0, #0
  419ce6:	4b42      	ldr	r3, [pc, #264]	; (419df0 <calendar_init+0x78c>)
  419ce8:	4798      	blx	r3
  419cea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419cee:	3050      	adds	r0, #80	; 0x50
  419cf0:	4b40      	ldr	r3, [pc, #256]	; (419df4 <calendar_init+0x790>)
  419cf2:	fb83 2300 	smull	r2, r3, r3, r0
  419cf6:	17c2      	asrs	r2, r0, #31
  419cf8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419cfc:	b212      	sxth	r2, r2
  419cfe:	e65a      	b.n	4199b6 <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419d00:	2000      	movs	r0, #0
  419d02:	4b3b      	ldr	r3, [pc, #236]	; (419df0 <calendar_init+0x78c>)
  419d04:	4798      	blx	r3
  419d06:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d0a:	3050      	adds	r0, #80	; 0x50
  419d0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d10:	da01      	bge.n	419d16 <calendar_init+0x6b2>
  419d12:	2201      	movs	r2, #1
  419d14:	e668      	b.n	4199e8 <calendar_init+0x384>
  419d16:	2000      	movs	r0, #0
  419d18:	4b35      	ldr	r3, [pc, #212]	; (419df0 <calendar_init+0x78c>)
  419d1a:	4798      	blx	r3
  419d1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d20:	3050      	adds	r0, #80	; 0x50
  419d22:	4b34      	ldr	r3, [pc, #208]	; (419df4 <calendar_init+0x790>)
  419d24:	fb83 2300 	smull	r2, r3, r3, r0
  419d28:	17c2      	asrs	r2, r0, #31
  419d2a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d2e:	b212      	sxth	r2, r2
  419d30:	e65a      	b.n	4199e8 <calendar_init+0x384>
  419d32:	2000      	movs	r0, #0
  419d34:	4b2e      	ldr	r3, [pc, #184]	; (419df0 <calendar_init+0x78c>)
  419d36:	4798      	blx	r3
  419d38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d3c:	0040      	lsls	r0, r0, #1
  419d3e:	3050      	adds	r0, #80	; 0x50
  419d40:	4b2c      	ldr	r3, [pc, #176]	; (419df4 <calendar_init+0x790>)
  419d42:	fb83 2300 	smull	r2, r3, r3, r0
  419d46:	17c2      	asrs	r2, r0, #31
  419d48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d4c:	b212      	sxth	r2, r2
  419d4e:	e64b      	b.n	4199e8 <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419d50:	2000      	movs	r0, #0
  419d52:	4b27      	ldr	r3, [pc, #156]	; (419df0 <calendar_init+0x78c>)
  419d54:	4798      	blx	r3
  419d56:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d5a:	3050      	adds	r0, #80	; 0x50
  419d5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d60:	da01      	bge.n	419d66 <calendar_init+0x702>
  419d62:	2201      	movs	r2, #1
  419d64:	e659      	b.n	419a1a <calendar_init+0x3b6>
  419d66:	2000      	movs	r0, #0
  419d68:	4b21      	ldr	r3, [pc, #132]	; (419df0 <calendar_init+0x78c>)
  419d6a:	4798      	blx	r3
  419d6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d70:	3050      	adds	r0, #80	; 0x50
  419d72:	4b20      	ldr	r3, [pc, #128]	; (419df4 <calendar_init+0x790>)
  419d74:	fb83 2300 	smull	r2, r3, r3, r0
  419d78:	17c2      	asrs	r2, r0, #31
  419d7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d7e:	b212      	sxth	r2, r2
  419d80:	e64b      	b.n	419a1a <calendar_init+0x3b6>
  419d82:	2000      	movs	r0, #0
  419d84:	4b1a      	ldr	r3, [pc, #104]	; (419df0 <calendar_init+0x78c>)
  419d86:	4798      	blx	r3
  419d88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d8c:	0040      	lsls	r0, r0, #1
  419d8e:	3050      	adds	r0, #80	; 0x50
  419d90:	4b18      	ldr	r3, [pc, #96]	; (419df4 <calendar_init+0x790>)
  419d92:	fb83 2300 	smull	r2, r3, r3, r0
  419d96:	17c2      	asrs	r2, r0, #31
  419d98:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d9c:	b212      	sxth	r2, r2
  419d9e:	e63c      	b.n	419a1a <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419da0:	2000      	movs	r0, #0
  419da2:	4b13      	ldr	r3, [pc, #76]	; (419df0 <calendar_init+0x78c>)
  419da4:	4798      	blx	r3
  419da6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419daa:	3050      	adds	r0, #80	; 0x50
  419dac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419db0:	da01      	bge.n	419db6 <calendar_init+0x752>
  419db2:	2201      	movs	r2, #1
  419db4:	e64a      	b.n	419a4c <calendar_init+0x3e8>
  419db6:	2000      	movs	r0, #0
  419db8:	4b0d      	ldr	r3, [pc, #52]	; (419df0 <calendar_init+0x78c>)
  419dba:	4798      	blx	r3
  419dbc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419dc0:	3050      	adds	r0, #80	; 0x50
  419dc2:	4b0c      	ldr	r3, [pc, #48]	; (419df4 <calendar_init+0x790>)
  419dc4:	fb83 2300 	smull	r2, r3, r3, r0
  419dc8:	17c2      	asrs	r2, r0, #31
  419dca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419dce:	b212      	sxth	r2, r2
  419dd0:	e63c      	b.n	419a4c <calendar_init+0x3e8>
  419dd2:	2000      	movs	r0, #0
  419dd4:	4b06      	ldr	r3, [pc, #24]	; (419df0 <calendar_init+0x78c>)
  419dd6:	4798      	blx	r3
  419dd8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ddc:	0040      	lsls	r0, r0, #1
  419dde:	3050      	adds	r0, #80	; 0x50
  419de0:	4b04      	ldr	r3, [pc, #16]	; (419df4 <calendar_init+0x790>)
  419de2:	fb83 2300 	smull	r2, r3, r3, r0
  419de6:	17c2      	asrs	r2, r0, #31
  419de8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419dec:	b212      	sxth	r2, r2
  419dee:	e62d      	b.n	419a4c <calendar_init+0x3e8>
  419df0:	00414955 	.word	0x00414955
  419df4:	66666667 	.word	0x66666667
  419df8:	0042c3ac 	.word	0x0042c3ac

00419dfc <cpicker_init>:
{
  419dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  419dfe:	4c9a      	ldr	r4, [pc, #616]	; (41a068 <cpicker_init+0x26c>)
  419e00:	6820      	ldr	r0, [r4, #0]
  419e02:	303c      	adds	r0, #60	; 0x3c
  419e04:	4b99      	ldr	r3, [pc, #612]	; (41a06c <cpicker_init+0x270>)
  419e06:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  419e08:	6824      	ldr	r4, [r4, #0]
  419e0a:	343c      	adds	r4, #60	; 0x3c
  419e0c:	2000      	movs	r0, #0
  419e0e:	4b98      	ldr	r3, [pc, #608]	; (41a070 <cpicker_init+0x274>)
  419e10:	4798      	blx	r3
  419e12:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419e16:	0040      	lsls	r0, r0, #1
  419e18:	3050      	adds	r0, #80	; 0x50
  419e1a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e1e:	f280 80b6 	bge.w	419f8e <cpicker_init+0x192>
  419e22:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  419e24:	21c0      	movs	r1, #192	; 0xc0
  419e26:	4620      	mov	r0, r4
  419e28:	4b92      	ldr	r3, [pc, #584]	; (41a074 <cpicker_init+0x278>)
  419e2a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  419e2c:	4c8e      	ldr	r4, [pc, #568]	; (41a068 <cpicker_init+0x26c>)
  419e2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419e30:	22ff      	movs	r2, #255	; 0xff
  419e32:	212c      	movs	r1, #44	; 0x2c
  419e34:	303c      	adds	r0, #60	; 0x3c
  419e36:	4b90      	ldr	r3, [pc, #576]	; (41a078 <cpicker_init+0x27c>)
  419e38:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  419e3a:	6820      	ldr	r0, [r4, #0]
  419e3c:	303c      	adds	r0, #60	; 0x3c
  419e3e:	4b8f      	ldr	r3, [pc, #572]	; (41a07c <cpicker_init+0x280>)
  419e40:	6a1b      	ldr	r3, [r3, #32]
  419e42:	f013 0f02 	tst.w	r3, #2
  419e46:	f000 80b1 	beq.w	419fac <cpicker_init+0x1b0>
  419e4a:	f04f 0207 	mov.w	r2, #7
  419e4e:	231d      	movs	r3, #29
  419e50:	f363 02c7 	bfi	r2, r3, #3, #5
  419e54:	231e      	movs	r3, #30
  419e56:	f363 220c 	bfi	r2, r3, #8, #5
  419e5a:	2303      	movs	r3, #3
  419e5c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419e60:	2129      	movs	r1, #41	; 0x29
  419e62:	4b87      	ldr	r3, [pc, #540]	; (41a080 <cpicker_init+0x284>)
  419e64:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  419e66:	4b80      	ldr	r3, [pc, #512]	; (41a068 <cpicker_init+0x26c>)
  419e68:	681c      	ldr	r4, [r3, #0]
  419e6a:	343c      	adds	r4, #60	; 0x3c
  419e6c:	2000      	movs	r0, #0
  419e6e:	4b80      	ldr	r3, [pc, #512]	; (41a070 <cpicker_init+0x274>)
  419e70:	4798      	blx	r3
  419e72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419e76:	0080      	lsls	r0, r0, #2
  419e78:	3050      	adds	r0, #80	; 0x50
  419e7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e7e:	f280 80a3 	bge.w	419fc8 <cpicker_init+0x1cc>
  419e82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419e84:	2114      	movs	r1, #20
  419e86:	4620      	mov	r0, r4
  419e88:	4e7a      	ldr	r6, [pc, #488]	; (41a074 <cpicker_init+0x278>)
  419e8a:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419e8c:	4c76      	ldr	r4, [pc, #472]	; (41a068 <cpicker_init+0x26c>)
  419e8e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419e90:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419e94:	2101      	movs	r1, #1
  419e96:	303c      	adds	r0, #60	; 0x3c
  419e98:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  419e9a:	6820      	ldr	r0, [r4, #0]
  419e9c:	3040      	adds	r0, #64	; 0x40
  419e9e:	4b73      	ldr	r3, [pc, #460]	; (41a06c <cpicker_init+0x270>)
  419ea0:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419ea2:	6820      	ldr	r0, [r4, #0]
  419ea4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419ea8:	2101      	movs	r1, #1
  419eaa:	3040      	adds	r0, #64	; 0x40
  419eac:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  419eae:	6820      	ldr	r0, [r4, #0]
  419eb0:	4f74      	ldr	r7, [pc, #464]	; (41a084 <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419eb2:	883a      	ldrh	r2, [r7, #0]
  419eb4:	2129      	movs	r1, #41	; 0x29
  419eb6:	3040      	adds	r0, #64	; 0x40
  419eb8:	4d71      	ldr	r5, [pc, #452]	; (41a080 <cpicker_init+0x284>)
  419eba:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  419ebc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419ebe:	22ff      	movs	r2, #255	; 0xff
  419ec0:	212c      	movs	r1, #44	; 0x2c
  419ec2:	3040      	adds	r0, #64	; 0x40
  419ec4:	4b6c      	ldr	r3, [pc, #432]	; (41a078 <cpicker_init+0x27c>)
  419ec6:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  419ec8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419eca:	2202      	movs	r2, #2
  419ecc:	2130      	movs	r1, #48	; 0x30
  419ece:	3040      	adds	r0, #64	; 0x40
  419ed0:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  419ed2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419ed4:	88ba      	ldrh	r2, [r7, #4]
  419ed6:	2139      	movs	r1, #57	; 0x39
  419ed8:	3040      	adds	r0, #64	; 0x40
  419eda:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  419edc:	6820      	ldr	r0, [r4, #0]
  419ede:	4e67      	ldr	r6, [pc, #412]	; (41a07c <cpicker_init+0x280>)
  419ee0:	89b2      	ldrh	r2, [r6, #12]
  419ee2:	f240 2139 	movw	r1, #569	; 0x239
  419ee6:	3040      	adds	r0, #64	; 0x40
  419ee8:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  419eea:	6820      	ldr	r0, [r4, #0]
  419eec:	89f2      	ldrh	r2, [r6, #14]
  419eee:	f240 4139 	movw	r1, #1081	; 0x439
  419ef2:	3040      	adds	r0, #64	; 0x40
  419ef4:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  419ef6:	6824      	ldr	r4, [r4, #0]
  419ef8:	3440      	adds	r4, #64	; 0x40
  419efa:	2000      	movs	r0, #0
  419efc:	4b5c      	ldr	r3, [pc, #368]	; (41a070 <cpicker_init+0x274>)
  419efe:	4798      	blx	r3
  419f00:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  419f04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  419f08:	3050      	adds	r0, #80	; 0x50
  419f0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f0e:	da6a      	bge.n	419fe6 <cpicker_init+0x1ea>
  419f10:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419f12:	2112      	movs	r1, #18
  419f14:	4620      	mov	r0, r4
  419f16:	4b57      	ldr	r3, [pc, #348]	; (41a074 <cpicker_init+0x278>)
  419f18:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  419f1a:	4b53      	ldr	r3, [pc, #332]	; (41a068 <cpicker_init+0x26c>)
  419f1c:	681c      	ldr	r4, [r3, #0]
  419f1e:	3440      	adds	r4, #64	; 0x40
  419f20:	2000      	movs	r0, #0
  419f22:	4b53      	ldr	r3, [pc, #332]	; (41a070 <cpicker_init+0x274>)
  419f24:	4798      	blx	r3
  419f26:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  419f2a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  419f2e:	3050      	adds	r0, #80	; 0x50
  419f30:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f34:	da67      	bge.n	41a006 <cpicker_init+0x20a>
  419f36:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419f38:	2113      	movs	r1, #19
  419f3a:	4620      	mov	r0, r4
  419f3c:	4b4d      	ldr	r3, [pc, #308]	; (41a074 <cpicker_init+0x278>)
  419f3e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  419f40:	4b49      	ldr	r3, [pc, #292]	; (41a068 <cpicker_init+0x26c>)
  419f42:	681c      	ldr	r4, [r3, #0]
  419f44:	3440      	adds	r4, #64	; 0x40
  419f46:	2000      	movs	r0, #0
  419f48:	4b49      	ldr	r3, [pc, #292]	; (41a070 <cpicker_init+0x274>)
  419f4a:	4798      	blx	r3
  419f4c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  419f50:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  419f54:	3050      	adds	r0, #80	; 0x50
  419f56:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f5a:	da64      	bge.n	41a026 <cpicker_init+0x22a>
  419f5c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419f5e:	2110      	movs	r1, #16
  419f60:	4620      	mov	r0, r4
  419f62:	4b44      	ldr	r3, [pc, #272]	; (41a074 <cpicker_init+0x278>)
  419f64:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  419f66:	4b40      	ldr	r3, [pc, #256]	; (41a068 <cpicker_init+0x26c>)
  419f68:	681c      	ldr	r4, [r3, #0]
  419f6a:	3440      	adds	r4, #64	; 0x40
  419f6c:	2000      	movs	r0, #0
  419f6e:	4b40      	ldr	r3, [pc, #256]	; (41a070 <cpicker_init+0x274>)
  419f70:	4798      	blx	r3
  419f72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  419f76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  419f7a:	3050      	adds	r0, #80	; 0x50
  419f7c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f80:	da61      	bge.n	41a046 <cpicker_init+0x24a>
  419f82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419f84:	2111      	movs	r1, #17
  419f86:	4620      	mov	r0, r4
  419f88:	4b3a      	ldr	r3, [pc, #232]	; (41a074 <cpicker_init+0x278>)
  419f8a:	4798      	blx	r3
  419f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  419f8e:	2000      	movs	r0, #0
  419f90:	4b37      	ldr	r3, [pc, #220]	; (41a070 <cpicker_init+0x274>)
  419f92:	4798      	blx	r3
  419f94:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419f98:	0040      	lsls	r0, r0, #1
  419f9a:	3050      	adds	r0, #80	; 0x50
  419f9c:	4b3a      	ldr	r3, [pc, #232]	; (41a088 <cpicker_init+0x28c>)
  419f9e:	fb83 2300 	smull	r2, r3, r3, r0
  419fa2:	17c2      	asrs	r2, r0, #31
  419fa4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fa8:	b212      	sxth	r2, r2
  419faa:	e73b      	b.n	419e24 <cpicker_init+0x28>
  419fac:	2302      	movs	r3, #2
  419fae:	f04f 0200 	mov.w	r2, #0
  419fb2:	f363 0202 	bfi	r2, r3, #0, #3
  419fb6:	2108      	movs	r1, #8
  419fb8:	f361 02c7 	bfi	r2, r1, #3, #5
  419fbc:	210b      	movs	r1, #11
  419fbe:	f361 220c 	bfi	r2, r1, #8, #5
  419fc2:	f363 324f 	bfi	r2, r3, #13, #3
  419fc6:	e74b      	b.n	419e60 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  419fc8:	2000      	movs	r0, #0
  419fca:	4b29      	ldr	r3, [pc, #164]	; (41a070 <cpicker_init+0x274>)
  419fcc:	4798      	blx	r3
  419fce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419fd2:	0080      	lsls	r0, r0, #2
  419fd4:	3050      	adds	r0, #80	; 0x50
  419fd6:	4b2c      	ldr	r3, [pc, #176]	; (41a088 <cpicker_init+0x28c>)
  419fd8:	fb83 2300 	smull	r2, r3, r3, r0
  419fdc:	17c2      	asrs	r2, r0, #31
  419fde:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fe2:	b212      	sxth	r2, r2
  419fe4:	e74e      	b.n	419e84 <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  419fe6:	2000      	movs	r0, #0
  419fe8:	4b21      	ldr	r3, [pc, #132]	; (41a070 <cpicker_init+0x274>)
  419fea:	4798      	blx	r3
  419fec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419ff0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  419ff4:	3050      	adds	r0, #80	; 0x50
  419ff6:	4b24      	ldr	r3, [pc, #144]	; (41a088 <cpicker_init+0x28c>)
  419ff8:	fb83 2300 	smull	r2, r3, r3, r0
  419ffc:	17c2      	asrs	r2, r0, #31
  419ffe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a002:	b212      	sxth	r2, r2
  41a004:	e785      	b.n	419f12 <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a006:	2000      	movs	r0, #0
  41a008:	4b19      	ldr	r3, [pc, #100]	; (41a070 <cpicker_init+0x274>)
  41a00a:	4798      	blx	r3
  41a00c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a010:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a014:	3050      	adds	r0, #80	; 0x50
  41a016:	4b1c      	ldr	r3, [pc, #112]	; (41a088 <cpicker_init+0x28c>)
  41a018:	fb83 2300 	smull	r2, r3, r3, r0
  41a01c:	17c2      	asrs	r2, r0, #31
  41a01e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a022:	b212      	sxth	r2, r2
  41a024:	e788      	b.n	419f38 <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a026:	2000      	movs	r0, #0
  41a028:	4b11      	ldr	r3, [pc, #68]	; (41a070 <cpicker_init+0x274>)
  41a02a:	4798      	blx	r3
  41a02c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a030:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a034:	3050      	adds	r0, #80	; 0x50
  41a036:	4b14      	ldr	r3, [pc, #80]	; (41a088 <cpicker_init+0x28c>)
  41a038:	fb83 2300 	smull	r2, r3, r3, r0
  41a03c:	17c2      	asrs	r2, r0, #31
  41a03e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a042:	b212      	sxth	r2, r2
  41a044:	e78b      	b.n	419f5e <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41a046:	2000      	movs	r0, #0
  41a048:	4b09      	ldr	r3, [pc, #36]	; (41a070 <cpicker_init+0x274>)
  41a04a:	4798      	blx	r3
  41a04c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  41a050:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41a054:	3050      	adds	r0, #80	; 0x50
  41a056:	4b0c      	ldr	r3, [pc, #48]	; (41a088 <cpicker_init+0x28c>)
  41a058:	fb83 2300 	smull	r2, r3, r3, r0
  41a05c:	17c2      	asrs	r2, r0, #31
  41a05e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a062:	b212      	sxth	r2, r2
  41a064:	e78e      	b.n	419f84 <cpicker_init+0x188>
  41a066:	bf00      	nop
  41a068:	204147a8 	.word	0x204147a8
  41a06c:	0041851d 	.word	0x0041851d
  41a070:	00414955 	.word	0x00414955
  41a074:	00409f49 	.word	0x00409f49
  41a078:	0040a269 	.word	0x0040a269
  41a07c:	204147ac 	.word	0x204147ac
  41a080:	0040a0d9 	.word	0x0040a0d9
  41a084:	0042c3ac 	.word	0x0042c3ac
  41a088:	66666667 	.word	0x66666667

0041a08c <checkbox_init>:
{
  41a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  41a08e:	4cb5      	ldr	r4, [pc, #724]	; (41a364 <checkbox_init+0x2d8>)
  41a090:	6820      	ldr	r0, [r4, #0]
  41a092:	3050      	adds	r0, #80	; 0x50
  41a094:	4bb4      	ldr	r3, [pc, #720]	; (41a368 <checkbox_init+0x2dc>)
  41a096:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a098:	6824      	ldr	r4, [r4, #0]
  41a09a:	3450      	adds	r4, #80	; 0x50
  41a09c:	2000      	movs	r0, #0
  41a09e:	4bb3      	ldr	r3, [pc, #716]	; (41a36c <checkbox_init+0x2e0>)
  41a0a0:	4798      	blx	r3
  41a0a2:	3014      	adds	r0, #20
  41a0a4:	0080      	lsls	r0, r0, #2
  41a0a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0aa:	f280 80e1 	bge.w	41a270 <checkbox_init+0x1e4>
  41a0ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a0b0:	2101      	movs	r1, #1
  41a0b2:	4620      	mov	r0, r4
  41a0b4:	4bae      	ldr	r3, [pc, #696]	; (41a370 <checkbox_init+0x2e4>)
  41a0b6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a0b8:	4baa      	ldr	r3, [pc, #680]	; (41a364 <checkbox_init+0x2d8>)
  41a0ba:	681c      	ldr	r4, [r3, #0]
  41a0bc:	3450      	adds	r4, #80	; 0x50
  41a0be:	2000      	movs	r0, #0
  41a0c0:	4baa      	ldr	r3, [pc, #680]	; (41a36c <checkbox_init+0x2e0>)
  41a0c2:	4798      	blx	r3
  41a0c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a0c8:	0043      	lsls	r3, r0, #1
  41a0ca:	3350      	adds	r3, #80	; 0x50
  41a0cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41a0d0:	f280 80db 	bge.w	41a28a <checkbox_init+0x1fe>
  41a0d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a0d6:	2114      	movs	r1, #20
  41a0d8:	4620      	mov	r0, r4
  41a0da:	4ba5      	ldr	r3, [pc, #660]	; (41a370 <checkbox_init+0x2e4>)
  41a0dc:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  41a0de:	4ca1      	ldr	r4, [pc, #644]	; (41a364 <checkbox_init+0x2d8>)
  41a0e0:	6820      	ldr	r0, [r4, #0]
  41a0e2:	4ea4      	ldr	r6, [pc, #656]	; (41a374 <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41a0e4:	89b2      	ldrh	r2, [r6, #12]
  41a0e6:	2149      	movs	r1, #73	; 0x49
  41a0e8:	3050      	adds	r0, #80	; 0x50
  41a0ea:	4ba3      	ldr	r3, [pc, #652]	; (41a378 <checkbox_init+0x2ec>)
  41a0ec:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41a0ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41a0f0:	2200      	movs	r2, #0
  41a0f2:	214c      	movs	r1, #76	; 0x4c
  41a0f4:	3050      	adds	r0, #80	; 0x50
  41a0f6:	4da1      	ldr	r5, [pc, #644]	; (41a37c <checkbox_init+0x2f0>)
  41a0f8:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  41a0fa:	6820      	ldr	r0, [r4, #0]
  41a0fc:	227f      	movs	r2, #127	; 0x7f
  41a0fe:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41a102:	3050      	adds	r0, #80	; 0x50
  41a104:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a106:	6824      	ldr	r4, [r4, #0]
  41a108:	3450      	adds	r4, #80	; 0x50
  41a10a:	6a33      	ldr	r3, [r6, #32]
  41a10c:	f013 0f20 	tst.w	r3, #32
  41a110:	f000 80ca 	beq.w	41a2a8 <checkbox_init+0x21c>
  41a114:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41a116:	2140      	movs	r1, #64	; 0x40
  41a118:	4620      	mov	r0, r4
  41a11a:	4b95      	ldr	r3, [pc, #596]	; (41a370 <checkbox_init+0x2e4>)
  41a11c:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a11e:	4b91      	ldr	r3, [pc, #580]	; (41a364 <checkbox_init+0x2d8>)
  41a120:	681c      	ldr	r4, [r3, #0]
  41a122:	3450      	adds	r4, #80	; 0x50
  41a124:	2000      	movs	r0, #0
  41a126:	4b91      	ldr	r3, [pc, #580]	; (41a36c <checkbox_init+0x2e0>)
  41a128:	4798      	blx	r3
  41a12a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a12e:	0043      	lsls	r3, r0, #1
  41a130:	3350      	adds	r3, #80	; 0x50
  41a132:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41a136:	f280 80ce 	bge.w	41a2d6 <checkbox_init+0x24a>
  41a13a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41a13c:	2141      	movs	r1, #65	; 0x41
  41a13e:	4620      	mov	r0, r4
  41a140:	4d8b      	ldr	r5, [pc, #556]	; (41a370 <checkbox_init+0x2e4>)
  41a142:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41a144:	4c87      	ldr	r4, [pc, #540]	; (41a364 <checkbox_init+0x2d8>)
  41a146:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41a148:	2200      	movs	r2, #0
  41a14a:	21b0      	movs	r1, #176	; 0xb0
  41a14c:	3050      	adds	r0, #80	; 0x50
  41a14e:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41a150:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41a152:	224c      	movs	r2, #76	; 0x4c
  41a154:	21b7      	movs	r1, #183	; 0xb7
  41a156:	3050      	adds	r0, #80	; 0x50
  41a158:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  41a15a:	6820      	ldr	r0, [r4, #0]
  41a15c:	3054      	adds	r0, #84	; 0x54
  41a15e:	4b82      	ldr	r3, [pc, #520]	; (41a368 <checkbox_init+0x2dc>)
  41a160:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  41a162:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41a164:	2200      	movs	r2, #0
  41a166:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41a16a:	3054      	adds	r0, #84	; 0x54
  41a16c:	4b83      	ldr	r3, [pc, #524]	; (41a37c <checkbox_init+0x2f0>)
  41a16e:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41a170:	6824      	ldr	r4, [r4, #0]
  41a172:	3454      	adds	r4, #84	; 0x54
  41a174:	2000      	movs	r0, #0
  41a176:	4b7d      	ldr	r3, [pc, #500]	; (41a36c <checkbox_init+0x2e0>)
  41a178:	4798      	blx	r3
  41a17a:	3014      	adds	r0, #20
  41a17c:	0080      	lsls	r0, r0, #2
  41a17e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a182:	f280 80b7 	bge.w	41a2f4 <checkbox_init+0x268>
  41a186:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a188:	2101      	movs	r1, #1
  41a18a:	4620      	mov	r0, r4
  41a18c:	4e78      	ldr	r6, [pc, #480]	; (41a370 <checkbox_init+0x2e4>)
  41a18e:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  41a190:	4c74      	ldr	r4, [pc, #464]	; (41a364 <checkbox_init+0x2d8>)
  41a192:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  41a194:	4a7a      	ldr	r2, [pc, #488]	; (41a380 <checkbox_init+0x2f4>)
  41a196:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  41a19a:	3054      	adds	r0, #84	; 0x54
  41a19c:	4d79      	ldr	r5, [pc, #484]	; (41a384 <checkbox_init+0x2f8>)
  41a19e:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  41a1a0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41a1a2:	4b79      	ldr	r3, [pc, #484]	; (41a388 <checkbox_init+0x2fc>)
  41a1a4:	881a      	ldrh	r2, [r3, #0]
  41a1a6:	f240 1169 	movw	r1, #361	; 0x169
  41a1aa:	3054      	adds	r0, #84	; 0x54
  41a1ac:	4b72      	ldr	r3, [pc, #456]	; (41a378 <checkbox_init+0x2ec>)
  41a1ae:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  41a1b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  41a1b2:	2200      	movs	r2, #0
  41a1b4:	216c      	movs	r1, #108	; 0x6c
  41a1b6:	3054      	adds	r0, #84	; 0x54
  41a1b8:	4f70      	ldr	r7, [pc, #448]	; (41a37c <checkbox_init+0x2f0>)
  41a1ba:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  41a1bc:	6820      	ldr	r0, [r4, #0]
  41a1be:	22ff      	movs	r2, #255	; 0xff
  41a1c0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  41a1c4:	3054      	adds	r0, #84	; 0x54
  41a1c6:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  41a1c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  41a1ca:	226c      	movs	r2, #108	; 0x6c
  41a1cc:	21b4      	movs	r1, #180	; 0xb4
  41a1ce:	3054      	adds	r0, #84	; 0x54
  41a1d0:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  41a1d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41a1d4:	4b67      	ldr	r3, [pc, #412]	; (41a374 <checkbox_init+0x2e8>)
  41a1d6:	691a      	ldr	r2, [r3, #16]
  41a1d8:	f248 118e 	movw	r1, #33166	; 0x818e
  41a1dc:	3054      	adds	r0, #84	; 0x54
  41a1de:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a1e0:	6824      	ldr	r4, [r4, #0]
  41a1e2:	3454      	adds	r4, #84	; 0x54
  41a1e4:	2000      	movs	r0, #0
  41a1e6:	4b61      	ldr	r3, [pc, #388]	; (41a36c <checkbox_init+0x2e0>)
  41a1e8:	4798      	blx	r3
  41a1ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a1ee:	3050      	adds	r0, #80	; 0x50
  41a1f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1f4:	f280 808b 	bge.w	41a30e <checkbox_init+0x282>
  41a1f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a1fa:	2112      	movs	r1, #18
  41a1fc:	4620      	mov	r0, r4
  41a1fe:	4b5c      	ldr	r3, [pc, #368]	; (41a370 <checkbox_init+0x2e4>)
  41a200:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a202:	4b58      	ldr	r3, [pc, #352]	; (41a364 <checkbox_init+0x2d8>)
  41a204:	681c      	ldr	r4, [r3, #0]
  41a206:	3454      	adds	r4, #84	; 0x54
  41a208:	2000      	movs	r0, #0
  41a20a:	4b58      	ldr	r3, [pc, #352]	; (41a36c <checkbox_init+0x2e0>)
  41a20c:	4798      	blx	r3
  41a20e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a212:	3050      	adds	r0, #80	; 0x50
  41a214:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a218:	f280 8087 	bge.w	41a32a <checkbox_init+0x29e>
  41a21c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a21e:	2113      	movs	r1, #19
  41a220:	4620      	mov	r0, r4
  41a222:	4b53      	ldr	r3, [pc, #332]	; (41a370 <checkbox_init+0x2e4>)
  41a224:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a226:	4b4f      	ldr	r3, [pc, #316]	; (41a364 <checkbox_init+0x2d8>)
  41a228:	681c      	ldr	r4, [r3, #0]
  41a22a:	3454      	adds	r4, #84	; 0x54
  41a22c:	2000      	movs	r0, #0
  41a22e:	4b4f      	ldr	r3, [pc, #316]	; (41a36c <checkbox_init+0x2e0>)
  41a230:	4798      	blx	r3
  41a232:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a236:	3050      	adds	r0, #80	; 0x50
  41a238:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a23c:	f280 8083 	bge.w	41a346 <checkbox_init+0x2ba>
  41a240:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a242:	2110      	movs	r1, #16
  41a244:	4620      	mov	r0, r4
  41a246:	4b4a      	ldr	r3, [pc, #296]	; (41a370 <checkbox_init+0x2e4>)
  41a248:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a24a:	4b46      	ldr	r3, [pc, #280]	; (41a364 <checkbox_init+0x2d8>)
  41a24c:	681c      	ldr	r4, [r3, #0]
  41a24e:	3454      	adds	r4, #84	; 0x54
  41a250:	2000      	movs	r0, #0
  41a252:	4b46      	ldr	r3, [pc, #280]	; (41a36c <checkbox_init+0x2e0>)
  41a254:	4798      	blx	r3
  41a256:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a25a:	3050      	adds	r0, #80	; 0x50
  41a25c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a260:	f280 8096 	bge.w	41a390 <checkbox_init+0x304>
  41a264:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a266:	2111      	movs	r1, #17
  41a268:	4620      	mov	r0, r4
  41a26a:	4b41      	ldr	r3, [pc, #260]	; (41a370 <checkbox_init+0x2e4>)
  41a26c:	4798      	blx	r3
  41a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a270:	2000      	movs	r0, #0
  41a272:	4b3e      	ldr	r3, [pc, #248]	; (41a36c <checkbox_init+0x2e0>)
  41a274:	4798      	blx	r3
  41a276:	3014      	adds	r0, #20
  41a278:	0080      	lsls	r0, r0, #2
  41a27a:	4b44      	ldr	r3, [pc, #272]	; (41a38c <checkbox_init+0x300>)
  41a27c:	fb83 2300 	smull	r2, r3, r3, r0
  41a280:	17c2      	asrs	r2, r0, #31
  41a282:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a286:	b212      	sxth	r2, r2
  41a288:	e712      	b.n	41a0b0 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a28a:	2000      	movs	r0, #0
  41a28c:	4b37      	ldr	r3, [pc, #220]	; (41a36c <checkbox_init+0x2e0>)
  41a28e:	4798      	blx	r3
  41a290:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a294:	0043      	lsls	r3, r0, #1
  41a296:	3350      	adds	r3, #80	; 0x50
  41a298:	493c      	ldr	r1, [pc, #240]	; (41a38c <checkbox_init+0x300>)
  41a29a:	fb81 2103 	smull	r2, r1, r1, r3
  41a29e:	17da      	asrs	r2, r3, #31
  41a2a0:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41a2a4:	b212      	sxth	r2, r2
  41a2a6:	e716      	b.n	41a0d6 <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41a2a8:	2000      	movs	r0, #0
  41a2aa:	4b30      	ldr	r3, [pc, #192]	; (41a36c <checkbox_init+0x2e0>)
  41a2ac:	4798      	blx	r3
  41a2ae:	3028      	adds	r0, #40	; 0x28
  41a2b0:	0040      	lsls	r0, r0, #1
  41a2b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2b6:	da01      	bge.n	41a2bc <checkbox_init+0x230>
  41a2b8:	2201      	movs	r2, #1
  41a2ba:	e72c      	b.n	41a116 <checkbox_init+0x8a>
  41a2bc:	2000      	movs	r0, #0
  41a2be:	4b2b      	ldr	r3, [pc, #172]	; (41a36c <checkbox_init+0x2e0>)
  41a2c0:	4798      	blx	r3
  41a2c2:	3028      	adds	r0, #40	; 0x28
  41a2c4:	0040      	lsls	r0, r0, #1
  41a2c6:	4b31      	ldr	r3, [pc, #196]	; (41a38c <checkbox_init+0x300>)
  41a2c8:	fb83 2300 	smull	r2, r3, r3, r0
  41a2cc:	17c2      	asrs	r2, r0, #31
  41a2ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2d2:	b212      	sxth	r2, r2
  41a2d4:	e71f      	b.n	41a116 <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41a2d6:	2000      	movs	r0, #0
  41a2d8:	4b24      	ldr	r3, [pc, #144]	; (41a36c <checkbox_init+0x2e0>)
  41a2da:	4798      	blx	r3
  41a2dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a2e0:	0043      	lsls	r3, r0, #1
  41a2e2:	3350      	adds	r3, #80	; 0x50
  41a2e4:	4929      	ldr	r1, [pc, #164]	; (41a38c <checkbox_init+0x300>)
  41a2e6:	fb81 2103 	smull	r2, r1, r1, r3
  41a2ea:	17da      	asrs	r2, r3, #31
  41a2ec:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41a2f0:	b212      	sxth	r2, r2
  41a2f2:	e723      	b.n	41a13c <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41a2f4:	2000      	movs	r0, #0
  41a2f6:	4b1d      	ldr	r3, [pc, #116]	; (41a36c <checkbox_init+0x2e0>)
  41a2f8:	4798      	blx	r3
  41a2fa:	3014      	adds	r0, #20
  41a2fc:	0080      	lsls	r0, r0, #2
  41a2fe:	4b23      	ldr	r3, [pc, #140]	; (41a38c <checkbox_init+0x300>)
  41a300:	fb83 2300 	smull	r2, r3, r3, r0
  41a304:	17c2      	asrs	r2, r0, #31
  41a306:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a30a:	b212      	sxth	r2, r2
  41a30c:	e73c      	b.n	41a188 <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a30e:	2000      	movs	r0, #0
  41a310:	4b16      	ldr	r3, [pc, #88]	; (41a36c <checkbox_init+0x2e0>)
  41a312:	4798      	blx	r3
  41a314:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a318:	3050      	adds	r0, #80	; 0x50
  41a31a:	4b1c      	ldr	r3, [pc, #112]	; (41a38c <checkbox_init+0x300>)
  41a31c:	fb83 2300 	smull	r2, r3, r3, r0
  41a320:	17c2      	asrs	r2, r0, #31
  41a322:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a326:	b212      	sxth	r2, r2
  41a328:	e767      	b.n	41a1fa <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a32a:	2000      	movs	r0, #0
  41a32c:	4b0f      	ldr	r3, [pc, #60]	; (41a36c <checkbox_init+0x2e0>)
  41a32e:	4798      	blx	r3
  41a330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a334:	3050      	adds	r0, #80	; 0x50
  41a336:	4b15      	ldr	r3, [pc, #84]	; (41a38c <checkbox_init+0x300>)
  41a338:	fb83 2300 	smull	r2, r3, r3, r0
  41a33c:	17c2      	asrs	r2, r0, #31
  41a33e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a342:	b212      	sxth	r2, r2
  41a344:	e76b      	b.n	41a21e <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a346:	2000      	movs	r0, #0
  41a348:	4b08      	ldr	r3, [pc, #32]	; (41a36c <checkbox_init+0x2e0>)
  41a34a:	4798      	blx	r3
  41a34c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a350:	3050      	adds	r0, #80	; 0x50
  41a352:	4b0e      	ldr	r3, [pc, #56]	; (41a38c <checkbox_init+0x300>)
  41a354:	fb83 2300 	smull	r2, r3, r3, r0
  41a358:	17c2      	asrs	r2, r0, #31
  41a35a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a35e:	b212      	sxth	r2, r2
  41a360:	e76f      	b.n	41a242 <checkbox_init+0x1b6>
  41a362:	bf00      	nop
  41a364:	204147a8 	.word	0x204147a8
  41a368:	0041851d 	.word	0x0041851d
  41a36c:	00414955 	.word	0x00414955
  41a370:	00409f49 	.word	0x00409f49
  41a374:	204147ac 	.word	0x204147ac
  41a378:	0040a0d9 	.word	0x0040a0d9
  41a37c:	0040a269 	.word	0x0040a269
  41a380:	0042c3b8 	.word	0x0042c3b8
  41a384:	0040a3f9 	.word	0x0040a3f9
  41a388:	0042c3ac 	.word	0x0042c3ac
  41a38c:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41a390:	2000      	movs	r0, #0
  41a392:	4b06      	ldr	r3, [pc, #24]	; (41a3ac <checkbox_init+0x320>)
  41a394:	4798      	blx	r3
  41a396:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a39a:	3050      	adds	r0, #80	; 0x50
  41a39c:	4b04      	ldr	r3, [pc, #16]	; (41a3b0 <checkbox_init+0x324>)
  41a39e:	fb83 2300 	smull	r2, r3, r3, r0
  41a3a2:	17c2      	asrs	r2, r0, #31
  41a3a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a3a8:	b212      	sxth	r2, r2
  41a3aa:	e75c      	b.n	41a266 <checkbox_init+0x1da>
  41a3ac:	00414955 	.word	0x00414955
  41a3b0:	66666667 	.word	0x66666667

0041a3b4 <keyboard_init>:
{
  41a3b4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  41a3b6:	4c76      	ldr	r4, [pc, #472]	; (41a590 <keyboard_init+0x1dc>)
  41a3b8:	6820      	ldr	r0, [r4, #0]
  41a3ba:	306c      	adds	r0, #108	; 0x6c
  41a3bc:	4b75      	ldr	r3, [pc, #468]	; (41a594 <keyboard_init+0x1e0>)
  41a3be:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  41a3c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a3c2:	2200      	movs	r2, #0
  41a3c4:	2101      	movs	r1, #1
  41a3c6:	306c      	adds	r0, #108	; 0x6c
  41a3c8:	4b73      	ldr	r3, [pc, #460]	; (41a598 <keyboard_init+0x1e4>)
  41a3ca:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a3cc:	6824      	ldr	r4, [r4, #0]
  41a3ce:	346c      	adds	r4, #108	; 0x6c
  41a3d0:	2000      	movs	r0, #0
  41a3d2:	4b72      	ldr	r3, [pc, #456]	; (41a59c <keyboard_init+0x1e8>)
  41a3d4:	4798      	blx	r3
  41a3d6:	3014      	adds	r0, #20
  41a3d8:	0080      	lsls	r0, r0, #2
  41a3da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a3de:	f280 8081 	bge.w	41a4e4 <keyboard_init+0x130>
  41a3e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a3e4:	2130      	movs	r1, #48	; 0x30
  41a3e6:	4620      	mov	r0, r4
  41a3e8:	4d6b      	ldr	r5, [pc, #428]	; (41a598 <keyboard_init+0x1e4>)
  41a3ea:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  41a3ec:	4c68      	ldr	r4, [pc, #416]	; (41a590 <keyboard_init+0x1dc>)
  41a3ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a3f0:	2202      	movs	r2, #2
  41a3f2:	2131      	movs	r1, #49	; 0x31
  41a3f4:	306c      	adds	r0, #108	; 0x6c
  41a3f6:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41a3f8:	6820      	ldr	r0, [r4, #0]
  41a3fa:	306c      	adds	r0, #108	; 0x6c
  41a3fc:	4b68      	ldr	r3, [pc, #416]	; (41a5a0 <keyboard_init+0x1ec>)
  41a3fe:	6a1b      	ldr	r3, [r3, #32]
  41a400:	f013 0f02 	tst.w	r3, #2
  41a404:	d07b      	beq.n	41a4fe <keyboard_init+0x14a>
  41a406:	f04f 0200 	mov.w	r2, #0
  41a40a:	2301      	movs	r3, #1
  41a40c:	f363 0202 	bfi	r2, r3, #0, #3
  41a410:	2307      	movs	r3, #7
  41a412:	f363 02c7 	bfi	r2, r3, #3, #5
  41a416:	2308      	movs	r3, #8
  41a418:	f363 220c 	bfi	r2, r3, #8, #5
  41a41c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a420:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a424:	2139      	movs	r1, #57	; 0x39
  41a426:	4d5f      	ldr	r5, [pc, #380]	; (41a5a4 <keyboard_init+0x1f0>)
  41a428:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  41a42a:	4c59      	ldr	r4, [pc, #356]	; (41a590 <keyboard_init+0x1dc>)
  41a42c:	6820      	ldr	r0, [r4, #0]
  41a42e:	4b5c      	ldr	r3, [pc, #368]	; (41a5a0 <keyboard_init+0x1ec>)
  41a430:	89da      	ldrh	r2, [r3, #14]
  41a432:	f240 4139 	movw	r1, #1081	; 0x439
  41a436:	306c      	adds	r0, #108	; 0x6c
  41a438:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a43a:	6824      	ldr	r4, [r4, #0]
  41a43c:	346c      	adds	r4, #108	; 0x6c
  41a43e:	2000      	movs	r0, #0
  41a440:	4b56      	ldr	r3, [pc, #344]	; (41a59c <keyboard_init+0x1e8>)
  41a442:	4798      	blx	r3
  41a444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a448:	3050      	adds	r0, #80	; 0x50
  41a44a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a44e:	da59      	bge.n	41a504 <keyboard_init+0x150>
  41a450:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a452:	2112      	movs	r1, #18
  41a454:	4620      	mov	r0, r4
  41a456:	4b50      	ldr	r3, [pc, #320]	; (41a598 <keyboard_init+0x1e4>)
  41a458:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a45a:	4b4d      	ldr	r3, [pc, #308]	; (41a590 <keyboard_init+0x1dc>)
  41a45c:	681c      	ldr	r4, [r3, #0]
  41a45e:	346c      	adds	r4, #108	; 0x6c
  41a460:	2000      	movs	r0, #0
  41a462:	4b4e      	ldr	r3, [pc, #312]	; (41a59c <keyboard_init+0x1e8>)
  41a464:	4798      	blx	r3
  41a466:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a46a:	3050      	adds	r0, #80	; 0x50
  41a46c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a470:	da56      	bge.n	41a520 <keyboard_init+0x16c>
  41a472:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a474:	2113      	movs	r1, #19
  41a476:	4620      	mov	r0, r4
  41a478:	4b47      	ldr	r3, [pc, #284]	; (41a598 <keyboard_init+0x1e4>)
  41a47a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a47c:	4b44      	ldr	r3, [pc, #272]	; (41a590 <keyboard_init+0x1dc>)
  41a47e:	681c      	ldr	r4, [r3, #0]
  41a480:	346c      	adds	r4, #108	; 0x6c
  41a482:	2000      	movs	r0, #0
  41a484:	4b45      	ldr	r3, [pc, #276]	; (41a59c <keyboard_init+0x1e8>)
  41a486:	4798      	blx	r3
  41a488:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a48c:	3050      	adds	r0, #80	; 0x50
  41a48e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a492:	da53      	bge.n	41a53c <keyboard_init+0x188>
  41a494:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a496:	2110      	movs	r1, #16
  41a498:	4620      	mov	r0, r4
  41a49a:	4b3f      	ldr	r3, [pc, #252]	; (41a598 <keyboard_init+0x1e4>)
  41a49c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a49e:	4b3c      	ldr	r3, [pc, #240]	; (41a590 <keyboard_init+0x1dc>)
  41a4a0:	681c      	ldr	r4, [r3, #0]
  41a4a2:	346c      	adds	r4, #108	; 0x6c
  41a4a4:	2000      	movs	r0, #0
  41a4a6:	4b3d      	ldr	r3, [pc, #244]	; (41a59c <keyboard_init+0x1e8>)
  41a4a8:	4798      	blx	r3
  41a4aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a4ae:	3050      	adds	r0, #80	; 0x50
  41a4b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4b4:	da50      	bge.n	41a558 <keyboard_init+0x1a4>
  41a4b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a4b8:	2111      	movs	r1, #17
  41a4ba:	4620      	mov	r0, r4
  41a4bc:	4b36      	ldr	r3, [pc, #216]	; (41a598 <keyboard_init+0x1e4>)
  41a4be:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41a4c0:	4b33      	ldr	r3, [pc, #204]	; (41a590 <keyboard_init+0x1dc>)
  41a4c2:	681c      	ldr	r4, [r3, #0]
  41a4c4:	346c      	adds	r4, #108	; 0x6c
  41a4c6:	2000      	movs	r0, #0
  41a4c8:	4b34      	ldr	r3, [pc, #208]	; (41a59c <keyboard_init+0x1e8>)
  41a4ca:	4798      	blx	r3
  41a4cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a4d0:	3050      	adds	r0, #80	; 0x50
  41a4d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4d6:	da4d      	bge.n	41a574 <keyboard_init+0x1c0>
  41a4d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a4da:	2114      	movs	r1, #20
  41a4dc:	4620      	mov	r0, r4
  41a4de:	4b2e      	ldr	r3, [pc, #184]	; (41a598 <keyboard_init+0x1e4>)
  41a4e0:	4798      	blx	r3
  41a4e2:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41a4e4:	2000      	movs	r0, #0
  41a4e6:	4b2d      	ldr	r3, [pc, #180]	; (41a59c <keyboard_init+0x1e8>)
  41a4e8:	4798      	blx	r3
  41a4ea:	3014      	adds	r0, #20
  41a4ec:	0080      	lsls	r0, r0, #2
  41a4ee:	4b2e      	ldr	r3, [pc, #184]	; (41a5a8 <keyboard_init+0x1f4>)
  41a4f0:	fb83 2300 	smull	r2, r3, r3, r0
  41a4f4:	17c2      	asrs	r2, r0, #31
  41a4f6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4fa:	b212      	sxth	r2, r2
  41a4fc:	e772      	b.n	41a3e4 <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  41a4fe:	f04f 0200 	mov.w	r2, #0
  41a502:	e78f      	b.n	41a424 <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a504:	2000      	movs	r0, #0
  41a506:	4b25      	ldr	r3, [pc, #148]	; (41a59c <keyboard_init+0x1e8>)
  41a508:	4798      	blx	r3
  41a50a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a50e:	3050      	adds	r0, #80	; 0x50
  41a510:	4b25      	ldr	r3, [pc, #148]	; (41a5a8 <keyboard_init+0x1f4>)
  41a512:	fb83 2300 	smull	r2, r3, r3, r0
  41a516:	17c2      	asrs	r2, r0, #31
  41a518:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a51c:	b212      	sxth	r2, r2
  41a51e:	e798      	b.n	41a452 <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a520:	2000      	movs	r0, #0
  41a522:	4b1e      	ldr	r3, [pc, #120]	; (41a59c <keyboard_init+0x1e8>)
  41a524:	4798      	blx	r3
  41a526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a52a:	3050      	adds	r0, #80	; 0x50
  41a52c:	4b1e      	ldr	r3, [pc, #120]	; (41a5a8 <keyboard_init+0x1f4>)
  41a52e:	fb83 2300 	smull	r2, r3, r3, r0
  41a532:	17c2      	asrs	r2, r0, #31
  41a534:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a538:	b212      	sxth	r2, r2
  41a53a:	e79b      	b.n	41a474 <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41a53c:	2000      	movs	r0, #0
  41a53e:	4b17      	ldr	r3, [pc, #92]	; (41a59c <keyboard_init+0x1e8>)
  41a540:	4798      	blx	r3
  41a542:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a546:	3050      	adds	r0, #80	; 0x50
  41a548:	4b17      	ldr	r3, [pc, #92]	; (41a5a8 <keyboard_init+0x1f4>)
  41a54a:	fb83 2300 	smull	r2, r3, r3, r0
  41a54e:	17c2      	asrs	r2, r0, #31
  41a550:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a554:	b212      	sxth	r2, r2
  41a556:	e79e      	b.n	41a496 <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  41a558:	2000      	movs	r0, #0
  41a55a:	4b10      	ldr	r3, [pc, #64]	; (41a59c <keyboard_init+0x1e8>)
  41a55c:	4798      	blx	r3
  41a55e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a562:	3050      	adds	r0, #80	; 0x50
  41a564:	4b10      	ldr	r3, [pc, #64]	; (41a5a8 <keyboard_init+0x1f4>)
  41a566:	fb83 2300 	smull	r2, r3, r3, r0
  41a56a:	17c2      	asrs	r2, r0, #31
  41a56c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a570:	b212      	sxth	r2, r2
  41a572:	e7a1      	b.n	41a4b8 <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41a574:	2000      	movs	r0, #0
  41a576:	4b09      	ldr	r3, [pc, #36]	; (41a59c <keyboard_init+0x1e8>)
  41a578:	4798      	blx	r3
  41a57a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41a57e:	3050      	adds	r0, #80	; 0x50
  41a580:	4b09      	ldr	r3, [pc, #36]	; (41a5a8 <keyboard_init+0x1f4>)
  41a582:	fb83 2300 	smull	r2, r3, r3, r0
  41a586:	17c2      	asrs	r2, r0, #31
  41a588:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a58c:	b212      	sxth	r2, r2
  41a58e:	e7a4      	b.n	41a4da <keyboard_init+0x126>
  41a590:	204147a8 	.word	0x204147a8
  41a594:	0041851d 	.word	0x0041851d
  41a598:	00409f49 	.word	0x00409f49
  41a59c:	00414955 	.word	0x00414955
  41a5a0:	204147ac 	.word	0x204147ac
  41a5a4:	0040a0d9 	.word	0x0040a0d9
  41a5a8:	66666667 	.word	0x66666667

0041a5ac <msgbox_init>:
{
  41a5ac:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  41a5ae:	4c20      	ldr	r4, [pc, #128]	; (41a630 <msgbox_init+0x84>)
  41a5b0:	6820      	ldr	r0, [r4, #0]
  41a5b2:	3080      	adds	r0, #128	; 0x80
  41a5b4:	4b1f      	ldr	r3, [pc, #124]	; (41a634 <msgbox_init+0x88>)
  41a5b6:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41a5b8:	6824      	ldr	r4, [r4, #0]
  41a5ba:	3480      	adds	r4, #128	; 0x80
  41a5bc:	2000      	movs	r0, #0
  41a5be:	4b1e      	ldr	r3, [pc, #120]	; (41a638 <msgbox_init+0x8c>)
  41a5c0:	4798      	blx	r3
  41a5c2:	2332      	movs	r3, #50	; 0x32
  41a5c4:	fb03 f000 	mul.w	r0, r3, r0
  41a5c8:	3050      	adds	r0, #80	; 0x50
  41a5ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5ce:	da1d      	bge.n	41a60c <msgbox_init+0x60>
  41a5d0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41a5d2:	2150      	movs	r1, #80	; 0x50
  41a5d4:	4620      	mov	r0, r4
  41a5d6:	4b19      	ldr	r3, [pc, #100]	; (41a63c <msgbox_init+0x90>)
  41a5d8:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41a5da:	4b15      	ldr	r3, [pc, #84]	; (41a630 <msgbox_init+0x84>)
  41a5dc:	6818      	ldr	r0, [r3, #0]
  41a5de:	3080      	adds	r0, #128	; 0x80
  41a5e0:	4b17      	ldr	r3, [pc, #92]	; (41a640 <msgbox_init+0x94>)
  41a5e2:	6a1b      	ldr	r3, [r3, #32]
  41a5e4:	f013 0f02 	tst.w	r3, #2
  41a5e8:	d11f      	bne.n	41a62a <msgbox_init+0x7e>
  41a5ea:	f04f 0200 	mov.w	r2, #0
  41a5ee:	2304      	movs	r3, #4
  41a5f0:	f363 0202 	bfi	r2, r3, #0, #3
  41a5f4:	2313      	movs	r3, #19
  41a5f6:	f363 02c7 	bfi	r2, r3, #3, #5
  41a5fa:	f363 220c 	bfi	r2, r3, #8, #5
  41a5fe:	2306      	movs	r3, #6
  41a600:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41a604:	2159      	movs	r1, #89	; 0x59
  41a606:	4b0f      	ldr	r3, [pc, #60]	; (41a644 <msgbox_init+0x98>)
  41a608:	4798      	blx	r3
  41a60a:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  41a60c:	2000      	movs	r0, #0
  41a60e:	4b0a      	ldr	r3, [pc, #40]	; (41a638 <msgbox_init+0x8c>)
  41a610:	4798      	blx	r3
  41a612:	2232      	movs	r2, #50	; 0x32
  41a614:	fb02 f000 	mul.w	r0, r2, r0
  41a618:	3050      	adds	r0, #80	; 0x50
  41a61a:	4b0b      	ldr	r3, [pc, #44]	; (41a648 <msgbox_init+0x9c>)
  41a61c:	fb83 2300 	smull	r2, r3, r3, r0
  41a620:	17c2      	asrs	r2, r0, #31
  41a622:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a626:	b212      	sxth	r2, r2
  41a628:	e7d3      	b.n	41a5d2 <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  41a62a:	4b08      	ldr	r3, [pc, #32]	; (41a64c <msgbox_init+0xa0>)
  41a62c:	891a      	ldrh	r2, [r3, #8]
  41a62e:	e7e9      	b.n	41a604 <msgbox_init+0x58>
  41a630:	204147a8 	.word	0x204147a8
  41a634:	0041851d 	.word	0x0041851d
  41a638:	00414955 	.word	0x00414955
  41a63c:	00409f49 	.word	0x00409f49
  41a640:	204147ac 	.word	0x204147ac
  41a644:	0040a0d9 	.word	0x0040a0d9
  41a648:	66666667 	.word	0x66666667
  41a64c:	0042c3ac 	.word	0x0042c3ac

0041a650 <page_init>:
{
  41a650:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  41a652:	4c5a      	ldr	r4, [pc, #360]	; (41a7bc <page_init+0x16c>)
  41a654:	6820      	ldr	r0, [r4, #0]
  41a656:	3084      	adds	r0, #132	; 0x84
  41a658:	4b59      	ldr	r3, [pc, #356]	; (41a7c0 <page_init+0x170>)
  41a65a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a65c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a65e:	22ff      	movs	r2, #255	; 0xff
  41a660:	212c      	movs	r1, #44	; 0x2c
  41a662:	3084      	adds	r0, #132	; 0x84
  41a664:	4b57      	ldr	r3, [pc, #348]	; (41a7c4 <page_init+0x174>)
  41a666:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  41a668:	6820      	ldr	r0, [r4, #0]
  41a66a:	3084      	adds	r0, #132	; 0x84
  41a66c:	4b56      	ldr	r3, [pc, #344]	; (41a7c8 <page_init+0x178>)
  41a66e:	6a1b      	ldr	r3, [r3, #32]
  41a670:	f013 0f02 	tst.w	r3, #2
  41a674:	d068      	beq.n	41a748 <page_init+0xf8>
  41a676:	f04f 0200 	mov.w	r2, #0
  41a67a:	2306      	movs	r3, #6
  41a67c:	f363 0202 	bfi	r2, r3, #0, #3
  41a680:	2319      	movs	r3, #25
  41a682:	f363 02c7 	bfi	r2, r3, #3, #5
  41a686:	231a      	movs	r3, #26
  41a688:	f363 220c 	bfi	r2, r3, #8, #5
  41a68c:	2303      	movs	r3, #3
  41a68e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a692:	2129      	movs	r1, #41	; 0x29
  41a694:	4b4d      	ldr	r3, [pc, #308]	; (41a7cc <page_init+0x17c>)
  41a696:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a698:	4c48      	ldr	r4, [pc, #288]	; (41a7bc <page_init+0x16c>)
  41a69a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a69c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a6a0:	2101      	movs	r1, #1
  41a6a2:	3084      	adds	r0, #132	; 0x84
  41a6a4:	4b4a      	ldr	r3, [pc, #296]	; (41a7d0 <page_init+0x180>)
  41a6a6:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41a6a8:	6824      	ldr	r4, [r4, #0]
  41a6aa:	3484      	adds	r4, #132	; 0x84
  41a6ac:	2000      	movs	r0, #0
  41a6ae:	4b49      	ldr	r3, [pc, #292]	; (41a7d4 <page_init+0x184>)
  41a6b0:	4798      	blx	r3
  41a6b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a6b6:	3050      	adds	r0, #80	; 0x50
  41a6b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6bc:	da54      	bge.n	41a768 <page_init+0x118>
  41a6be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41a6c0:	2103      	movs	r1, #3
  41a6c2:	4620      	mov	r0, r4
  41a6c4:	4b42      	ldr	r3, [pc, #264]	; (41a7d0 <page_init+0x180>)
  41a6c6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41a6c8:	4b3c      	ldr	r3, [pc, #240]	; (41a7bc <page_init+0x16c>)
  41a6ca:	681c      	ldr	r4, [r3, #0]
  41a6cc:	3484      	adds	r4, #132	; 0x84
  41a6ce:	2000      	movs	r0, #0
  41a6d0:	4b40      	ldr	r3, [pc, #256]	; (41a7d4 <page_init+0x184>)
  41a6d2:	4798      	blx	r3
  41a6d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a6d8:	3050      	adds	r0, #80	; 0x50
  41a6da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6de:	da51      	bge.n	41a784 <page_init+0x134>
  41a6e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a6e2:	2113      	movs	r1, #19
  41a6e4:	4620      	mov	r0, r4
  41a6e6:	4b3a      	ldr	r3, [pc, #232]	; (41a7d0 <page_init+0x180>)
  41a6e8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41a6ea:	4b34      	ldr	r3, [pc, #208]	; (41a7bc <page_init+0x16c>)
  41a6ec:	681c      	ldr	r4, [r3, #0]
  41a6ee:	3484      	adds	r4, #132	; 0x84
  41a6f0:	2000      	movs	r0, #0
  41a6f2:	4b38      	ldr	r3, [pc, #224]	; (41a7d4 <page_init+0x184>)
  41a6f4:	4798      	blx	r3
  41a6f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a6fa:	3050      	adds	r0, #80	; 0x50
  41a6fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a700:	da4e      	bge.n	41a7a0 <page_init+0x150>
  41a702:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a704:	2111      	movs	r1, #17
  41a706:	4620      	mov	r0, r4
  41a708:	4b31      	ldr	r3, [pc, #196]	; (41a7d0 <page_init+0x180>)
  41a70a:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  41a70c:	4c2b      	ldr	r4, [pc, #172]	; (41a7bc <page_init+0x16c>)
  41a70e:	6820      	ldr	r0, [r4, #0]
  41a710:	3088      	adds	r0, #136	; 0x88
  41a712:	4b2b      	ldr	r3, [pc, #172]	; (41a7c0 <page_init+0x170>)
  41a714:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a716:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a718:	22ff      	movs	r2, #255	; 0xff
  41a71a:	212c      	movs	r1, #44	; 0x2c
  41a71c:	3088      	adds	r0, #136	; 0x88
  41a71e:	4b29      	ldr	r3, [pc, #164]	; (41a7c4 <page_init+0x174>)
  41a720:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  41a722:	6820      	ldr	r0, [r4, #0]
  41a724:	f04f 0200 	mov.w	r2, #0
  41a728:	2304      	movs	r3, #4
  41a72a:	f363 0202 	bfi	r2, r3, #0, #3
  41a72e:	2311      	movs	r3, #17
  41a730:	f363 02c7 	bfi	r2, r3, #3, #5
  41a734:	f363 220c 	bfi	r2, r3, #8, #5
  41a738:	2302      	movs	r3, #2
  41a73a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a73e:	2129      	movs	r1, #41	; 0x29
  41a740:	3088      	adds	r0, #136	; 0x88
  41a742:	4b22      	ldr	r3, [pc, #136]	; (41a7cc <page_init+0x17c>)
  41a744:	4798      	blx	r3
  41a746:	bd10      	pop	{r4, pc}
  41a748:	f04f 0200 	mov.w	r2, #0
  41a74c:	2303      	movs	r3, #3
  41a74e:	f363 0202 	bfi	r2, r3, #0, #3
  41a752:	230e      	movs	r3, #14
  41a754:	f363 02c7 	bfi	r2, r3, #3, #5
  41a758:	2310      	movs	r3, #16
  41a75a:	f363 220c 	bfi	r2, r3, #8, #5
  41a75e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a762:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41a766:	e794      	b.n	41a692 <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  41a768:	2000      	movs	r0, #0
  41a76a:	4b1a      	ldr	r3, [pc, #104]	; (41a7d4 <page_init+0x184>)
  41a76c:	4798      	blx	r3
  41a76e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a772:	3050      	adds	r0, #80	; 0x50
  41a774:	4b18      	ldr	r3, [pc, #96]	; (41a7d8 <page_init+0x188>)
  41a776:	fb83 2300 	smull	r2, r3, r3, r0
  41a77a:	17c2      	asrs	r2, r0, #31
  41a77c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a780:	b212      	sxth	r2, r2
  41a782:	e79d      	b.n	41a6c0 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41a784:	2000      	movs	r0, #0
  41a786:	4b13      	ldr	r3, [pc, #76]	; (41a7d4 <page_init+0x184>)
  41a788:	4798      	blx	r3
  41a78a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a78e:	3050      	adds	r0, #80	; 0x50
  41a790:	4b11      	ldr	r3, [pc, #68]	; (41a7d8 <page_init+0x188>)
  41a792:	fb83 2300 	smull	r2, r3, r3, r0
  41a796:	17c2      	asrs	r2, r0, #31
  41a798:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a79c:	b212      	sxth	r2, r2
  41a79e:	e7a0      	b.n	41a6e2 <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41a7a0:	2000      	movs	r0, #0
  41a7a2:	4b0c      	ldr	r3, [pc, #48]	; (41a7d4 <page_init+0x184>)
  41a7a4:	4798      	blx	r3
  41a7a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a7aa:	3050      	adds	r0, #80	; 0x50
  41a7ac:	4b0a      	ldr	r3, [pc, #40]	; (41a7d8 <page_init+0x188>)
  41a7ae:	fb83 2300 	smull	r2, r3, r3, r0
  41a7b2:	17c2      	asrs	r2, r0, #31
  41a7b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a7b8:	b212      	sxth	r2, r2
  41a7ba:	e7a3      	b.n	41a704 <page_init+0xb4>
  41a7bc:	204147a8 	.word	0x204147a8
  41a7c0:	0041851d 	.word	0x0041851d
  41a7c4:	0040a269 	.word	0x0040a269
  41a7c8:	204147ac 	.word	0x204147ac
  41a7cc:	0040a0d9 	.word	0x0040a0d9
  41a7d0:	00409f49 	.word	0x00409f49
  41a7d4:	00414955 	.word	0x00414955
  41a7d8:	66666667 	.word	0x66666667

0041a7dc <textarea_init>:
{
  41a7dc:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  41a7de:	4c4a      	ldr	r4, [pc, #296]	; (41a908 <textarea_init+0x12c>)
  41a7e0:	6820      	ldr	r0, [r4, #0]
  41a7e2:	30b8      	adds	r0, #184	; 0xb8
  41a7e4:	4b49      	ldr	r3, [pc, #292]	; (41a90c <textarea_init+0x130>)
  41a7e6:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41a7e8:	6820      	ldr	r0, [r4, #0]
  41a7ea:	30b8      	adds	r0, #184	; 0xb8
  41a7ec:	4b48      	ldr	r3, [pc, #288]	; (41a910 <textarea_init+0x134>)
  41a7ee:	6a1b      	ldr	r3, [r3, #32]
  41a7f0:	f013 0f02 	tst.w	r3, #2
  41a7f4:	d052      	beq.n	41a89c <textarea_init+0xc0>
  41a7f6:	f04f 0200 	mov.w	r2, #0
  41a7fa:	2302      	movs	r3, #2
  41a7fc:	f363 0202 	bfi	r2, r3, #0, #3
  41a800:	2306      	movs	r3, #6
  41a802:	f363 02c7 	bfi	r2, r3, #3, #5
  41a806:	2309      	movs	r3, #9
  41a808:	f363 220c 	bfi	r2, r3, #8, #5
  41a80c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a810:	2139      	movs	r1, #57	; 0x39
  41a812:	4b40      	ldr	r3, [pc, #256]	; (41a914 <textarea_init+0x138>)
  41a814:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41a816:	4b3c      	ldr	r3, [pc, #240]	; (41a908 <textarea_init+0x12c>)
  41a818:	681c      	ldr	r4, [r3, #0]
  41a81a:	34b8      	adds	r4, #184	; 0xb8
  41a81c:	2000      	movs	r0, #0
  41a81e:	4b3e      	ldr	r3, [pc, #248]	; (41a918 <textarea_init+0x13c>)
  41a820:	4798      	blx	r3
  41a822:	3028      	adds	r0, #40	; 0x28
  41a824:	0040      	lsls	r0, r0, #1
  41a826:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a82a:	da46      	bge.n	41a8ba <textarea_init+0xde>
  41a82c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a82e:	2130      	movs	r1, #48	; 0x30
  41a830:	4620      	mov	r0, r4
  41a832:	4b3a      	ldr	r3, [pc, #232]	; (41a91c <textarea_init+0x140>)
  41a834:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41a836:	4b34      	ldr	r3, [pc, #208]	; (41a908 <textarea_init+0x12c>)
  41a838:	681c      	ldr	r4, [r3, #0]
  41a83a:	34b8      	adds	r4, #184	; 0xb8
  41a83c:	2000      	movs	r0, #0
  41a83e:	4b36      	ldr	r3, [pc, #216]	; (41a918 <textarea_init+0x13c>)
  41a840:	4798      	blx	r3
  41a842:	3050      	adds	r0, #80	; 0x50
  41a844:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a848:	da44      	bge.n	41a8d4 <textarea_init+0xf8>
  41a84a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a84c:	2112      	movs	r1, #18
  41a84e:	4620      	mov	r0, r4
  41a850:	4d32      	ldr	r5, [pc, #200]	; (41a91c <textarea_init+0x140>)
  41a852:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  41a854:	4c2c      	ldr	r4, [pc, #176]	; (41a908 <textarea_init+0x12c>)
  41a856:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a858:	2204      	movs	r2, #4
  41a85a:	2131      	movs	r1, #49	; 0x31
  41a85c:	30b8      	adds	r0, #184	; 0xb8
  41a85e:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  41a860:	6820      	ldr	r0, [r4, #0]
  41a862:	30bc      	adds	r0, #188	; 0xbc
  41a864:	4b29      	ldr	r3, [pc, #164]	; (41a90c <textarea_init+0x130>)
  41a866:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41a868:	6820      	ldr	r0, [r4, #0]
  41a86a:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  41a86c:	4b28      	ldr	r3, [pc, #160]	; (41a910 <textarea_init+0x134>)
  41a86e:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  41a870:	f013 0f02 	tst.w	r3, #2
  41a874:	d13a      	bne.n	41a8ec <textarea_init+0x110>
  41a876:	f04f 0200 	mov.w	r2, #0
  41a87a:	2305      	movs	r3, #5
  41a87c:	f363 0202 	bfi	r2, r3, #0, #3
  41a880:	2314      	movs	r3, #20
  41a882:	f363 02c7 	bfi	r2, r3, #3, #5
  41a886:	2317      	movs	r3, #23
  41a888:	f363 220c 	bfi	r2, r3, #8, #5
  41a88c:	2303      	movs	r3, #3
  41a88e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a892:	f248 0189 	movw	r1, #32905	; 0x8089
  41a896:	4b1f      	ldr	r3, [pc, #124]	; (41a914 <textarea_init+0x138>)
  41a898:	4798      	blx	r3
  41a89a:	bd38      	pop	{r3, r4, r5, pc}
  41a89c:	f04f 0200 	mov.w	r2, #0
  41a8a0:	2305      	movs	r3, #5
  41a8a2:	f363 0202 	bfi	r2, r3, #0, #3
  41a8a6:	2314      	movs	r3, #20
  41a8a8:	f363 02c7 	bfi	r2, r3, #3, #5
  41a8ac:	2315      	movs	r3, #21
  41a8ae:	f363 220c 	bfi	r2, r3, #8, #5
  41a8b2:	2302      	movs	r3, #2
  41a8b4:	f363 324f 	bfi	r2, r3, #13, #3
  41a8b8:	e7aa      	b.n	41a810 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41a8ba:	2000      	movs	r0, #0
  41a8bc:	4b16      	ldr	r3, [pc, #88]	; (41a918 <textarea_init+0x13c>)
  41a8be:	4798      	blx	r3
  41a8c0:	3028      	adds	r0, #40	; 0x28
  41a8c2:	0040      	lsls	r0, r0, #1
  41a8c4:	4b16      	ldr	r3, [pc, #88]	; (41a920 <textarea_init+0x144>)
  41a8c6:	fb83 2300 	smull	r2, r3, r3, r0
  41a8ca:	17c2      	asrs	r2, r0, #31
  41a8cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8d0:	b212      	sxth	r2, r2
  41a8d2:	e7ac      	b.n	41a82e <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41a8d4:	2000      	movs	r0, #0
  41a8d6:	4b10      	ldr	r3, [pc, #64]	; (41a918 <textarea_init+0x13c>)
  41a8d8:	4798      	blx	r3
  41a8da:	3050      	adds	r0, #80	; 0x50
  41a8dc:	4b10      	ldr	r3, [pc, #64]	; (41a920 <textarea_init+0x144>)
  41a8de:	fb83 2300 	smull	r2, r3, r3, r0
  41a8e2:	17c2      	asrs	r2, r0, #31
  41a8e4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8e8:	b212      	sxth	r2, r2
  41a8ea:	e7af      	b.n	41a84c <textarea_init+0x70>
  41a8ec:	f04f 0200 	mov.w	r2, #0
  41a8f0:	2305      	movs	r3, #5
  41a8f2:	f363 0202 	bfi	r2, r3, #0, #3
  41a8f6:	2315      	movs	r3, #21
  41a8f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41a8fc:	f363 220c 	bfi	r2, r3, #8, #5
  41a900:	2302      	movs	r3, #2
  41a902:	f363 324f 	bfi	r2, r3, #13, #3
  41a906:	e7c4      	b.n	41a892 <textarea_init+0xb6>
  41a908:	204147a8 	.word	0x204147a8
  41a90c:	0041851d 	.word	0x0041851d
  41a910:	204147ac 	.word	0x204147ac
  41a914:	0040a0d9 	.word	0x0040a0d9
  41a918:	00414955 	.word	0x00414955
  41a91c:	00409f49 	.word	0x00409f49
  41a920:	66666667 	.word	0x66666667

0041a924 <spinbox_init>:
{
  41a924:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  41a926:	4c2d      	ldr	r4, [pc, #180]	; (41a9dc <spinbox_init+0xb8>)
  41a928:	6820      	ldr	r0, [r4, #0]
  41a92a:	309c      	adds	r0, #156	; 0x9c
  41a92c:	4b2c      	ldr	r3, [pc, #176]	; (41a9e0 <spinbox_init+0xbc>)
  41a92e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a930:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a932:	22ff      	movs	r2, #255	; 0xff
  41a934:	212c      	movs	r1, #44	; 0x2c
  41a936:	309c      	adds	r0, #156	; 0x9c
  41a938:	4b2a      	ldr	r3, [pc, #168]	; (41a9e4 <spinbox_init+0xc0>)
  41a93a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  41a93c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a93e:	4b2a      	ldr	r3, [pc, #168]	; (41a9e8 <spinbox_init+0xc4>)
  41a940:	899a      	ldrh	r2, [r3, #12]
  41a942:	2129      	movs	r1, #41	; 0x29
  41a944:	309c      	adds	r0, #156	; 0x9c
  41a946:	4d29      	ldr	r5, [pc, #164]	; (41a9ec <spinbox_init+0xc8>)
  41a948:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41a94a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a94c:	4b28      	ldr	r3, [pc, #160]	; (41a9f0 <spinbox_init+0xcc>)
  41a94e:	881a      	ldrh	r2, [r3, #0]
  41a950:	f248 0189 	movw	r1, #32905	; 0x8089
  41a954:	309c      	adds	r0, #156	; 0x9c
  41a956:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41a958:	6824      	ldr	r4, [r4, #0]
  41a95a:	349c      	adds	r4, #156	; 0x9c
  41a95c:	2000      	movs	r0, #0
  41a95e:	4b25      	ldr	r3, [pc, #148]	; (41a9f4 <spinbox_init+0xd0>)
  41a960:	4798      	blx	r3
  41a962:	2364      	movs	r3, #100	; 0x64
  41a964:	fb03 f000 	mul.w	r0, r3, r0
  41a968:	3050      	adds	r0, #80	; 0x50
  41a96a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a96e:	da17      	bge.n	41a9a0 <spinbox_init+0x7c>
  41a970:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a972:	2110      	movs	r1, #16
  41a974:	4620      	mov	r0, r4
  41a976:	4b20      	ldr	r3, [pc, #128]	; (41a9f8 <spinbox_init+0xd4>)
  41a978:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41a97a:	4b18      	ldr	r3, [pc, #96]	; (41a9dc <spinbox_init+0xb8>)
  41a97c:	681c      	ldr	r4, [r3, #0]
  41a97e:	349c      	adds	r4, #156	; 0x9c
  41a980:	2000      	movs	r0, #0
  41a982:	4b1c      	ldr	r3, [pc, #112]	; (41a9f4 <spinbox_init+0xd0>)
  41a984:	4798      	blx	r3
  41a986:	2364      	movs	r3, #100	; 0x64
  41a988:	fb03 f000 	mul.w	r0, r3, r0
  41a98c:	3050      	adds	r0, #80	; 0x50
  41a98e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a992:	da14      	bge.n	41a9be <spinbox_init+0x9a>
  41a994:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a996:	2111      	movs	r1, #17
  41a998:	4620      	mov	r0, r4
  41a99a:	4b17      	ldr	r3, [pc, #92]	; (41a9f8 <spinbox_init+0xd4>)
  41a99c:	4798      	blx	r3
  41a99e:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41a9a0:	2000      	movs	r0, #0
  41a9a2:	4b14      	ldr	r3, [pc, #80]	; (41a9f4 <spinbox_init+0xd0>)
  41a9a4:	4798      	blx	r3
  41a9a6:	2264      	movs	r2, #100	; 0x64
  41a9a8:	fb02 f000 	mul.w	r0, r2, r0
  41a9ac:	3050      	adds	r0, #80	; 0x50
  41a9ae:	4b13      	ldr	r3, [pc, #76]	; (41a9fc <spinbox_init+0xd8>)
  41a9b0:	fb83 2300 	smull	r2, r3, r3, r0
  41a9b4:	17c2      	asrs	r2, r0, #31
  41a9b6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9ba:	b212      	sxth	r2, r2
  41a9bc:	e7d9      	b.n	41a972 <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  41a9be:	2000      	movs	r0, #0
  41a9c0:	4b0c      	ldr	r3, [pc, #48]	; (41a9f4 <spinbox_init+0xd0>)
  41a9c2:	4798      	blx	r3
  41a9c4:	2264      	movs	r2, #100	; 0x64
  41a9c6:	fb02 f000 	mul.w	r0, r2, r0
  41a9ca:	3050      	adds	r0, #80	; 0x50
  41a9cc:	4b0b      	ldr	r3, [pc, #44]	; (41a9fc <spinbox_init+0xd8>)
  41a9ce:	fb83 2300 	smull	r2, r3, r3, r0
  41a9d2:	17c2      	asrs	r2, r0, #31
  41a9d4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9d8:	b212      	sxth	r2, r2
  41a9da:	e7dc      	b.n	41a996 <spinbox_init+0x72>
  41a9dc:	204147a8 	.word	0x204147a8
  41a9e0:	0041851d 	.word	0x0041851d
  41a9e4:	0040a269 	.word	0x0040a269
  41a9e8:	204147ac 	.word	0x204147ac
  41a9ec:	0040a0d9 	.word	0x0040a0d9
  41a9f0:	0042c3ac 	.word	0x0042c3ac
  41a9f4:	00414955 	.word	0x00414955
  41a9f8:	00409f49 	.word	0x00409f49
  41a9fc:	66666667 	.word	0x66666667

0041aa00 <list_init>:
{
  41aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  41aa02:	4cbf      	ldr	r4, [pc, #764]	; (41ad00 <list_init+0x300>)
  41aa04:	6820      	ldr	r0, [r4, #0]
  41aa06:	3078      	adds	r0, #120	; 0x78
  41aa08:	4ebe      	ldr	r6, [pc, #760]	; (41ad04 <list_init+0x304>)
  41aa0a:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  41aa0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41aa0e:	2201      	movs	r2, #1
  41aa10:	2102      	movs	r1, #2
  41aa12:	3078      	adds	r0, #120	; 0x78
  41aa14:	4dbc      	ldr	r5, [pc, #752]	; (41ad08 <list_init+0x308>)
  41aa16:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41aa18:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41aa1a:	2200      	movs	r2, #0
  41aa1c:	2112      	movs	r1, #18
  41aa1e:	3078      	adds	r0, #120	; 0x78
  41aa20:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41aa22:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41aa24:	2200      	movs	r2, #0
  41aa26:	2113      	movs	r1, #19
  41aa28:	3078      	adds	r0, #120	; 0x78
  41aa2a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41aa2c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41aa2e:	2200      	movs	r2, #0
  41aa30:	2110      	movs	r1, #16
  41aa32:	3078      	adds	r0, #120	; 0x78
  41aa34:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41aa36:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41aa38:	2200      	movs	r2, #0
  41aa3a:	2111      	movs	r1, #17
  41aa3c:	3078      	adds	r0, #120	; 0x78
  41aa3e:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  41aa40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41aa42:	2200      	movs	r2, #0
  41aa44:	2114      	movs	r1, #20
  41aa46:	3078      	adds	r0, #120	; 0x78
  41aa48:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  41aa4a:	6820      	ldr	r0, [r4, #0]
  41aa4c:	307c      	adds	r0, #124	; 0x7c
  41aa4e:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41aa50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41aa52:	22ff      	movs	r2, #255	; 0xff
  41aa54:	212c      	movs	r1, #44	; 0x2c
  41aa56:	307c      	adds	r0, #124	; 0x7c
  41aa58:	4bac      	ldr	r3, [pc, #688]	; (41ad0c <list_init+0x30c>)
  41aa5a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  41aa5c:	6820      	ldr	r0, [r4, #0]
  41aa5e:	307c      	adds	r0, #124	; 0x7c
  41aa60:	4bab      	ldr	r3, [pc, #684]	; (41ad10 <list_init+0x310>)
  41aa62:	6a1b      	ldr	r3, [r3, #32]
  41aa64:	f013 0f02 	tst.w	r3, #2
  41aa68:	f000 8223 	beq.w	41aeb2 <list_init+0x4b2>
  41aa6c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aa70:	2129      	movs	r1, #41	; 0x29
  41aa72:	4ba8      	ldr	r3, [pc, #672]	; (41ad14 <list_init+0x314>)
  41aa74:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  41aa76:	4ba2      	ldr	r3, [pc, #648]	; (41ad00 <list_init+0x300>)
  41aa78:	6818      	ldr	r0, [r3, #0]
  41aa7a:	307c      	adds	r0, #124	; 0x7c
  41aa7c:	4ba4      	ldr	r3, [pc, #656]	; (41ad10 <list_init+0x310>)
  41aa7e:	6a1b      	ldr	r3, [r3, #32]
  41aa80:	f013 0f02 	tst.w	r3, #2
  41aa84:	f000 8223 	beq.w	41aece <list_init+0x4ce>
  41aa88:	f04f 0207 	mov.w	r2, #7
  41aa8c:	231d      	movs	r3, #29
  41aa8e:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa92:	f363 220c 	bfi	r2, r3, #8, #5
  41aa96:	2303      	movs	r3, #3
  41aa98:	f363 324f 	bfi	r2, r3, #13, #3
  41aa9c:	f241 0129 	movw	r1, #4137	; 0x1029
  41aaa0:	4b9c      	ldr	r3, [pc, #624]	; (41ad14 <list_init+0x314>)
  41aaa2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  41aaa4:	4b96      	ldr	r3, [pc, #600]	; (41ad00 <list_init+0x300>)
  41aaa6:	6818      	ldr	r0, [r3, #0]
  41aaa8:	307c      	adds	r0, #124	; 0x7c
  41aaaa:	4b99      	ldr	r3, [pc, #612]	; (41ad10 <list_init+0x310>)
  41aaac:	6a1b      	ldr	r3, [r3, #32]
  41aaae:	f013 0f02 	tst.w	r3, #2
  41aab2:	f000 821b 	beq.w	41aeec <list_init+0x4ec>
  41aab6:	f04f 32ff 	mov.w	r2, #4294967295
  41aaba:	f242 0129 	movw	r1, #8233	; 0x2029
  41aabe:	4d95      	ldr	r5, [pc, #596]	; (41ad14 <list_init+0x314>)
  41aac0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  41aac2:	4c8f      	ldr	r4, [pc, #572]	; (41ad00 <list_init+0x300>)
  41aac4:	6820      	ldr	r0, [r4, #0]
  41aac6:	4f92      	ldr	r7, [pc, #584]	; (41ad10 <list_init+0x310>)
  41aac8:	89ba      	ldrh	r2, [r7, #12]
  41aaca:	f240 1129 	movw	r1, #297	; 0x129
  41aace:	307c      	adds	r0, #124	; 0x7c
  41aad0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  41aad2:	6826      	ldr	r6, [r4, #0]
  41aad4:	367c      	adds	r6, #124	; 0x7c
  41aad6:	2133      	movs	r1, #51	; 0x33
  41aad8:	89b8      	ldrh	r0, [r7, #12]
  41aada:	4b8f      	ldr	r3, [pc, #572]	; (41ad18 <list_init+0x318>)
  41aadc:	4798      	blx	r3
  41aade:	4602      	mov	r2, r0
  41aae0:	f241 1129 	movw	r1, #4393	; 0x1129
  41aae4:	4630      	mov	r0, r6
  41aae6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41aae8:	6820      	ldr	r0, [r4, #0]
  41aaea:	307c      	adds	r0, #124	; 0x7c
  41aaec:	6a3b      	ldr	r3, [r7, #32]
  41aaee:	f013 0f02 	tst.w	r3, #2
  41aaf2:	f000 8209 	beq.w	41af08 <list_init+0x508>
  41aaf6:	f04f 0200 	mov.w	r2, #0
  41aafa:	2301      	movs	r3, #1
  41aafc:	f363 0202 	bfi	r2, r3, #0, #3
  41ab00:	2307      	movs	r3, #7
  41ab02:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab06:	2308      	movs	r3, #8
  41ab08:	f363 220c 	bfi	r2, r3, #8, #5
  41ab0c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab10:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ab14:	f248 0189 	movw	r1, #32905	; 0x8089
  41ab18:	4b7e      	ldr	r3, [pc, #504]	; (41ad14 <list_init+0x314>)
  41ab1a:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41ab1c:	4b78      	ldr	r3, [pc, #480]	; (41ad00 <list_init+0x300>)
  41ab1e:	6818      	ldr	r0, [r3, #0]
  41ab20:	307c      	adds	r0, #124	; 0x7c
  41ab22:	4b7b      	ldr	r3, [pc, #492]	; (41ad10 <list_init+0x310>)
  41ab24:	6a1b      	ldr	r3, [r3, #32]
  41ab26:	f013 0f02 	tst.w	r3, #2
  41ab2a:	f000 81f0 	beq.w	41af0e <list_init+0x50e>
  41ab2e:	f04f 32ff 	mov.w	r2, #4294967295
  41ab32:	f248 1189 	movw	r1, #33161	; 0x8189
  41ab36:	4b77      	ldr	r3, [pc, #476]	; (41ad14 <list_init+0x314>)
  41ab38:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41ab3a:	4b71      	ldr	r3, [pc, #452]	; (41ad00 <list_init+0x300>)
  41ab3c:	6818      	ldr	r0, [r3, #0]
  41ab3e:	307c      	adds	r0, #124	; 0x7c
  41ab40:	4b73      	ldr	r3, [pc, #460]	; (41ad10 <list_init+0x310>)
  41ab42:	6a1b      	ldr	r3, [r3, #32]
  41ab44:	f013 0f02 	tst.w	r3, #2
  41ab48:	f000 81e4 	beq.w	41af14 <list_init+0x514>
  41ab4c:	f04f 0200 	mov.w	r2, #0
  41ab50:	2305      	movs	r3, #5
  41ab52:	f363 0202 	bfi	r2, r3, #0, #3
  41ab56:	2315      	movs	r3, #21
  41ab58:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab5c:	f363 220c 	bfi	r2, r3, #8, #5
  41ab60:	2302      	movs	r3, #2
  41ab62:	f363 324f 	bfi	r2, r3, #13, #3
  41ab66:	f24a 0189 	movw	r1, #41097	; 0xa089
  41ab6a:	4b6a      	ldr	r3, [pc, #424]	; (41ad14 <list_init+0x314>)
  41ab6c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41ab6e:	4b64      	ldr	r3, [pc, #400]	; (41ad00 <list_init+0x300>)
  41ab70:	6818      	ldr	r0, [r3, #0]
  41ab72:	307c      	adds	r0, #124	; 0x7c
  41ab74:	4b66      	ldr	r3, [pc, #408]	; (41ad10 <list_init+0x310>)
  41ab76:	6a1b      	ldr	r3, [r3, #32]
  41ab78:	f013 0f02 	tst.w	r3, #2
  41ab7c:	f000 81d8 	beq.w	41af30 <list_init+0x530>
  41ab80:	f04f 0200 	mov.w	r2, #0
  41ab84:	2301      	movs	r3, #1
  41ab86:	f363 0202 	bfi	r2, r3, #0, #3
  41ab8a:	2307      	movs	r3, #7
  41ab8c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab90:	2308      	movs	r3, #8
  41ab92:	f363 220c 	bfi	r2, r3, #8, #5
  41ab96:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab9a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41ab9e:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41aba2:	4b5c      	ldr	r3, [pc, #368]	; (41ad14 <list_init+0x314>)
  41aba4:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41aba6:	4b56      	ldr	r3, [pc, #344]	; (41ad00 <list_init+0x300>)
  41aba8:	6818      	ldr	r0, [r3, #0]
  41abaa:	307c      	adds	r0, #124	; 0x7c
  41abac:	4b58      	ldr	r3, [pc, #352]	; (41ad10 <list_init+0x310>)
  41abae:	6a1b      	ldr	r3, [r3, #32]
  41abb0:	f013 0f02 	tst.w	r3, #2
  41abb4:	f000 81bf 	beq.w	41af36 <list_init+0x536>
  41abb8:	f04f 32ff 	mov.w	r2, #4294967295
  41abbc:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41abc0:	4b54      	ldr	r3, [pc, #336]	; (41ad14 <list_init+0x314>)
  41abc2:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41abc4:	4b4e      	ldr	r3, [pc, #312]	; (41ad00 <list_init+0x300>)
  41abc6:	6818      	ldr	r0, [r3, #0]
  41abc8:	307c      	adds	r0, #124	; 0x7c
  41abca:	4b51      	ldr	r3, [pc, #324]	; (41ad10 <list_init+0x310>)
  41abcc:	6a1b      	ldr	r3, [r3, #32]
  41abce:	f013 0f02 	tst.w	r3, #2
  41abd2:	f000 81b3 	beq.w	41af3c <list_init+0x53c>
  41abd6:	f04f 0200 	mov.w	r2, #0
  41abda:	2305      	movs	r3, #5
  41abdc:	f363 0202 	bfi	r2, r3, #0, #3
  41abe0:	2315      	movs	r3, #21
  41abe2:	f363 02c7 	bfi	r2, r3, #3, #5
  41abe6:	f363 220c 	bfi	r2, r3, #8, #5
  41abea:	2302      	movs	r3, #2
  41abec:	f363 324f 	bfi	r2, r3, #13, #3
  41abf0:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41abf4:	4b47      	ldr	r3, [pc, #284]	; (41ad14 <list_init+0x314>)
  41abf6:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  41abf8:	4c41      	ldr	r4, [pc, #260]	; (41ad00 <list_init+0x300>)
  41abfa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41abfc:	2201      	movs	r2, #1
  41abfe:	2131      	movs	r1, #49	; 0x31
  41ac00:	307c      	adds	r0, #124	; 0x7c
  41ac02:	4b41      	ldr	r3, [pc, #260]	; (41ad08 <list_init+0x308>)
  41ac04:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41ac06:	6820      	ldr	r0, [r4, #0]
  41ac08:	307c      	adds	r0, #124	; 0x7c
  41ac0a:	4b41      	ldr	r3, [pc, #260]	; (41ad10 <list_init+0x310>)
  41ac0c:	6a1b      	ldr	r3, [r3, #32]
  41ac0e:	f013 0f02 	tst.w	r3, #2
  41ac12:	f000 81a1 	beq.w	41af58 <list_init+0x558>
  41ac16:	f04f 0200 	mov.w	r2, #0
  41ac1a:	2306      	movs	r3, #6
  41ac1c:	f363 0202 	bfi	r2, r3, #0, #3
  41ac20:	231a      	movs	r3, #26
  41ac22:	f363 02c7 	bfi	r2, r3, #3, #5
  41ac26:	231c      	movs	r3, #28
  41ac28:	f363 220c 	bfi	r2, r3, #8, #5
  41ac2c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ac30:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ac34:	2139      	movs	r1, #57	; 0x39
  41ac36:	4d37      	ldr	r5, [pc, #220]	; (41ad14 <list_init+0x314>)
  41ac38:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  41ac3a:	4c31      	ldr	r4, [pc, #196]	; (41ad00 <list_init+0x300>)
  41ac3c:	6820      	ldr	r0, [r4, #0]
  41ac3e:	4e34      	ldr	r6, [pc, #208]	; (41ad10 <list_init+0x310>)
  41ac40:	89b2      	ldrh	r2, [r6, #12]
  41ac42:	f240 2139 	movw	r1, #569	; 0x239
  41ac46:	307c      	adds	r0, #124	; 0x7c
  41ac48:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  41ac4a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41ac4c:	2201      	movs	r2, #1
  41ac4e:	2130      	movs	r1, #48	; 0x30
  41ac50:	307c      	adds	r0, #124	; 0x7c
  41ac52:	4b2d      	ldr	r3, [pc, #180]	; (41ad08 <list_init+0x308>)
  41ac54:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  41ac56:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41ac58:	89f2      	ldrh	r2, [r6, #14]
  41ac5a:	f240 2149 	movw	r1, #585	; 0x249
  41ac5e:	307c      	adds	r0, #124	; 0x7c
  41ac60:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41ac62:	6824      	ldr	r4, [r4, #0]
  41ac64:	347c      	adds	r4, #124	; 0x7c
  41ac66:	6a33      	ldr	r3, [r6, #32]
  41ac68:	f013 0f20 	tst.w	r3, #32
  41ac6c:	f000 8183 	beq.w	41af76 <list_init+0x576>
  41ac70:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41ac72:	f44f 7110 	mov.w	r1, #576	; 0x240
  41ac76:	4620      	mov	r0, r4
  41ac78:	4b23      	ldr	r3, [pc, #140]	; (41ad08 <list_init+0x308>)
  41ac7a:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41ac7c:	4b20      	ldr	r3, [pc, #128]	; (41ad00 <list_init+0x300>)
  41ac7e:	681c      	ldr	r4, [r3, #0]
  41ac80:	347c      	adds	r4, #124	; 0x7c
  41ac82:	2000      	movs	r0, #0
  41ac84:	4b25      	ldr	r3, [pc, #148]	; (41ad1c <list_init+0x31c>)
  41ac86:	4798      	blx	r3
  41ac88:	3028      	adds	r0, #40	; 0x28
  41ac8a:	0040      	lsls	r0, r0, #1
  41ac8c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac90:	f280 8188 	bge.w	41afa4 <list_init+0x5a4>
  41ac94:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41ac98:	f240 2141 	movw	r1, #577	; 0x241
  41ac9c:	4620      	mov	r0, r4
  41ac9e:	4b1a      	ldr	r3, [pc, #104]	; (41ad08 <list_init+0x308>)
  41aca0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41aca2:	4b17      	ldr	r3, [pc, #92]	; (41ad00 <list_init+0x300>)
  41aca4:	681c      	ldr	r4, [r3, #0]
  41aca6:	347c      	adds	r4, #124	; 0x7c
  41aca8:	2000      	movs	r0, #0
  41acaa:	4b1d      	ldr	r3, [pc, #116]	; (41ad20 <list_init+0x320>)
  41acac:	4798      	blx	r3
  41acae:	2801      	cmp	r0, #1
  41acb0:	f240 8185 	bls.w	41afbe <list_init+0x5be>
  41acb4:	2000      	movs	r0, #0
  41acb6:	4b19      	ldr	r3, [pc, #100]	; (41ad1c <list_init+0x31c>)
  41acb8:	4798      	blx	r3
  41acba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41acbe:	0040      	lsls	r0, r0, #1
  41acc0:	3050      	adds	r0, #80	; 0x50
  41acc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acc6:	f280 8193 	bge.w	41aff0 <list_init+0x5f0>
  41acca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41accc:	2112      	movs	r1, #18
  41acce:	4620      	mov	r0, r4
  41acd0:	4b0d      	ldr	r3, [pc, #52]	; (41ad08 <list_init+0x308>)
  41acd2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41acd4:	4b0a      	ldr	r3, [pc, #40]	; (41ad00 <list_init+0x300>)
  41acd6:	681c      	ldr	r4, [r3, #0]
  41acd8:	347c      	adds	r4, #124	; 0x7c
  41acda:	2000      	movs	r0, #0
  41acdc:	4b10      	ldr	r3, [pc, #64]	; (41ad20 <list_init+0x320>)
  41acde:	4798      	blx	r3
  41ace0:	2801      	cmp	r0, #1
  41ace2:	f240 8194 	bls.w	41b00e <list_init+0x60e>
  41ace6:	2000      	movs	r0, #0
  41ace8:	4b0c      	ldr	r3, [pc, #48]	; (41ad1c <list_init+0x31c>)
  41acea:	4798      	blx	r3
  41acec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41acf0:	0040      	lsls	r0, r0, #1
  41acf2:	3050      	adds	r0, #80	; 0x50
  41acf4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acf8:	f280 81ac 	bge.w	41b054 <list_init+0x654>
  41acfc:	e012      	b.n	41ad24 <list_init+0x324>
  41acfe:	bf00      	nop
  41ad00:	204147a8 	.word	0x204147a8
  41ad04:	0041851d 	.word	0x0041851d
  41ad08:	00409f49 	.word	0x00409f49
  41ad0c:	0040a269 	.word	0x0040a269
  41ad10:	204147ac 	.word	0x204147ac
  41ad14:	0040a0d9 	.word	0x0040a0d9
  41ad18:	00415a11 	.word	0x00415a11
  41ad1c:	00414955 	.word	0x00414955
  41ad20:	00414975 	.word	0x00414975
  41ad24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ad26:	2113      	movs	r1, #19
  41ad28:	4620      	mov	r0, r4
  41ad2a:	4bc5      	ldr	r3, [pc, #788]	; (41b040 <list_init+0x640>)
  41ad2c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41ad2e:	4bc5      	ldr	r3, [pc, #788]	; (41b044 <list_init+0x644>)
  41ad30:	681c      	ldr	r4, [r3, #0]
  41ad32:	347c      	adds	r4, #124	; 0x7c
  41ad34:	2000      	movs	r0, #0
  41ad36:	4bc4      	ldr	r3, [pc, #784]	; (41b048 <list_init+0x648>)
  41ad38:	4798      	blx	r3
  41ad3a:	2801      	cmp	r0, #1
  41ad3c:	f240 8199 	bls.w	41b072 <list_init+0x672>
  41ad40:	2000      	movs	r0, #0
  41ad42:	4bc2      	ldr	r3, [pc, #776]	; (41b04c <list_init+0x64c>)
  41ad44:	4798      	blx	r3
  41ad46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad4a:	0040      	lsls	r0, r0, #1
  41ad4c:	3050      	adds	r0, #80	; 0x50
  41ad4e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad52:	f280 81a7 	bge.w	41b0a4 <list_init+0x6a4>
  41ad56:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ad58:	2110      	movs	r1, #16
  41ad5a:	4620      	mov	r0, r4
  41ad5c:	4bb8      	ldr	r3, [pc, #736]	; (41b040 <list_init+0x640>)
  41ad5e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41ad60:	4bb8      	ldr	r3, [pc, #736]	; (41b044 <list_init+0x644>)
  41ad62:	681c      	ldr	r4, [r3, #0]
  41ad64:	347c      	adds	r4, #124	; 0x7c
  41ad66:	2000      	movs	r0, #0
  41ad68:	4bb7      	ldr	r3, [pc, #732]	; (41b048 <list_init+0x648>)
  41ad6a:	4798      	blx	r3
  41ad6c:	2801      	cmp	r0, #1
  41ad6e:	f240 81a8 	bls.w	41b0c2 <list_init+0x6c2>
  41ad72:	2000      	movs	r0, #0
  41ad74:	4bb5      	ldr	r3, [pc, #724]	; (41b04c <list_init+0x64c>)
  41ad76:	4798      	blx	r3
  41ad78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad7c:	0040      	lsls	r0, r0, #1
  41ad7e:	3050      	adds	r0, #80	; 0x50
  41ad80:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad84:	f280 81b6 	bge.w	41b0f4 <list_init+0x6f4>
  41ad88:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ad8a:	2111      	movs	r1, #17
  41ad8c:	4620      	mov	r0, r4
  41ad8e:	4bac      	ldr	r3, [pc, #688]	; (41b040 <list_init+0x640>)
  41ad90:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41ad92:	4bac      	ldr	r3, [pc, #688]	; (41b044 <list_init+0x644>)
  41ad94:	681c      	ldr	r4, [r3, #0]
  41ad96:	347c      	adds	r4, #124	; 0x7c
  41ad98:	2000      	movs	r0, #0
  41ad9a:	4bab      	ldr	r3, [pc, #684]	; (41b048 <list_init+0x648>)
  41ad9c:	4798      	blx	r3
  41ad9e:	2801      	cmp	r0, #1
  41ada0:	f240 81b7 	bls.w	41b112 <list_init+0x712>
  41ada4:	2000      	movs	r0, #0
  41ada6:	4ba9      	ldr	r3, [pc, #676]	; (41b04c <list_init+0x64c>)
  41ada8:	4798      	blx	r3
  41adaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41adae:	0040      	lsls	r0, r0, #1
  41adb0:	3050      	adds	r0, #80	; 0x50
  41adb2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41adb6:	f280 81c5 	bge.w	41b144 <list_init+0x744>
  41adba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41adbc:	2114      	movs	r1, #20
  41adbe:	4620      	mov	r0, r4
  41adc0:	4b9f      	ldr	r3, [pc, #636]	; (41b040 <list_init+0x640>)
  41adc2:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41adc4:	4b9f      	ldr	r3, [pc, #636]	; (41b044 <list_init+0x644>)
  41adc6:	681c      	ldr	r4, [r3, #0]
  41adc8:	347c      	adds	r4, #124	; 0x7c
  41adca:	2000      	movs	r0, #0
  41adcc:	4b9e      	ldr	r3, [pc, #632]	; (41b048 <list_init+0x648>)
  41adce:	4798      	blx	r3
  41add0:	2801      	cmp	r0, #1
  41add2:	f240 81c6 	bls.w	41b162 <list_init+0x762>
  41add6:	2000      	movs	r0, #0
  41add8:	4b9c      	ldr	r3, [pc, #624]	; (41b04c <list_init+0x64c>)
  41adda:	4798      	blx	r3
  41addc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ade0:	0040      	lsls	r0, r0, #1
  41ade2:	3050      	adds	r0, #80	; 0x50
  41ade4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ade8:	f280 81d5 	bge.w	41b196 <list_init+0x796>
  41adec:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41adf0:	2104      	movs	r1, #4
  41adf2:	4620      	mov	r0, r4
  41adf4:	4b92      	ldr	r3, [pc, #584]	; (41b040 <list_init+0x640>)
  41adf6:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41adf8:	4b92      	ldr	r3, [pc, #584]	; (41b044 <list_init+0x644>)
  41adfa:	681c      	ldr	r4, [r3, #0]
  41adfc:	347c      	adds	r4, #124	; 0x7c
  41adfe:	2000      	movs	r0, #0
  41ae00:	4b92      	ldr	r3, [pc, #584]	; (41b04c <list_init+0x64c>)
  41ae02:	4798      	blx	r3
  41ae04:	3028      	adds	r0, #40	; 0x28
  41ae06:	0040      	lsls	r0, r0, #1
  41ae08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae0c:	f280 81d2 	bge.w	41b1b4 <list_init+0x7b4>
  41ae10:	f04f 32ff 	mov.w	r2, #4294967295
  41ae14:	f241 0104 	movw	r1, #4100	; 0x1004
  41ae18:	4620      	mov	r0, r4
  41ae1a:	4b89      	ldr	r3, [pc, #548]	; (41b040 <list_init+0x640>)
  41ae1c:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41ae1e:	4b89      	ldr	r3, [pc, #548]	; (41b044 <list_init+0x644>)
  41ae20:	681c      	ldr	r4, [r3, #0]
  41ae22:	347c      	adds	r4, #124	; 0x7c
  41ae24:	2000      	movs	r0, #0
  41ae26:	4b89      	ldr	r3, [pc, #548]	; (41b04c <list_init+0x64c>)
  41ae28:	4798      	blx	r3
  41ae2a:	3028      	adds	r0, #40	; 0x28
  41ae2c:	0040      	lsls	r0, r0, #1
  41ae2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae32:	f280 81cc 	bge.w	41b1ce <list_init+0x7ce>
  41ae36:	f04f 32ff 	mov.w	r2, #4294967295
  41ae3a:	f44f 7182 	mov.w	r1, #260	; 0x104
  41ae3e:	4620      	mov	r0, r4
  41ae40:	4b7f      	ldr	r3, [pc, #508]	; (41b040 <list_init+0x640>)
  41ae42:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41ae44:	4b7f      	ldr	r3, [pc, #508]	; (41b044 <list_init+0x644>)
  41ae46:	681c      	ldr	r4, [r3, #0]
  41ae48:	347c      	adds	r4, #124	; 0x7c
  41ae4a:	2000      	movs	r0, #0
  41ae4c:	4b7f      	ldr	r3, [pc, #508]	; (41b04c <list_init+0x64c>)
  41ae4e:	4798      	blx	r3
  41ae50:	3028      	adds	r0, #40	; 0x28
  41ae52:	0040      	lsls	r0, r0, #1
  41ae54:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae58:	f280 81c6 	bge.w	41b1e8 <list_init+0x7e8>
  41ae5c:	f04f 32ff 	mov.w	r2, #4294967295
  41ae60:	f242 0104 	movw	r1, #8196	; 0x2004
  41ae64:	4620      	mov	r0, r4
  41ae66:	4b76      	ldr	r3, [pc, #472]	; (41b040 <list_init+0x640>)
  41ae68:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41ae6a:	4b76      	ldr	r3, [pc, #472]	; (41b044 <list_init+0x644>)
  41ae6c:	681c      	ldr	r4, [r3, #0]
  41ae6e:	347c      	adds	r4, #124	; 0x7c
  41ae70:	2000      	movs	r0, #0
  41ae72:	4b76      	ldr	r3, [pc, #472]	; (41b04c <list_init+0x64c>)
  41ae74:	4798      	blx	r3
  41ae76:	3028      	adds	r0, #40	; 0x28
  41ae78:	0040      	lsls	r0, r0, #1
  41ae7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae7e:	f280 81c0 	bge.w	41b202 <list_init+0x802>
  41ae82:	f04f 32ff 	mov.w	r2, #4294967295
  41ae86:	f44f 7101 	mov.w	r1, #516	; 0x204
  41ae8a:	4620      	mov	r0, r4
  41ae8c:	4c6c      	ldr	r4, [pc, #432]	; (41b040 <list_init+0x640>)
  41ae8e:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41ae90:	4d6c      	ldr	r5, [pc, #432]	; (41b044 <list_init+0x644>)
  41ae92:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41ae94:	2200      	movs	r2, #0
  41ae96:	21b0      	movs	r1, #176	; 0xb0
  41ae98:	307c      	adds	r0, #124	; 0x7c
  41ae9a:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41ae9c:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41ae9e:	2229      	movs	r2, #41	; 0x29
  41aea0:	21b7      	movs	r1, #183	; 0xb7
  41aea2:	307c      	adds	r0, #124	; 0x7c
  41aea4:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  41aea6:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41aea8:	2204      	movs	r2, #4
  41aeaa:	21b6      	movs	r1, #182	; 0xb6
  41aeac:	307c      	adds	r0, #124	; 0x7c
  41aeae:	47a0      	blx	r4
  41aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41aeb2:	f04f 0200 	mov.w	r2, #0
  41aeb6:	2303      	movs	r3, #3
  41aeb8:	f363 0202 	bfi	r2, r3, #0, #3
  41aebc:	230b      	movs	r3, #11
  41aebe:	f363 02c7 	bfi	r2, r3, #3, #5
  41aec2:	230e      	movs	r3, #14
  41aec4:	f363 220c 	bfi	r2, r3, #8, #5
  41aec8:	f36f 324f 	bfc	r2, #13, #3
  41aecc:	e5d0      	b.n	41aa70 <list_init+0x70>
  41aece:	f04f 0200 	mov.w	r2, #0
  41aed2:	2302      	movs	r3, #2
  41aed4:	f363 0202 	bfi	r2, r3, #0, #3
  41aed8:	2309      	movs	r3, #9
  41aeda:	f363 02c7 	bfi	r2, r3, #3, #5
  41aede:	230a      	movs	r3, #10
  41aee0:	f363 220c 	bfi	r2, r3, #8, #5
  41aee4:	2303      	movs	r3, #3
  41aee6:	f363 324f 	bfi	r2, r3, #13, #3
  41aeea:	e5d7      	b.n	41aa9c <list_init+0x9c>
  41aeec:	f04f 0200 	mov.w	r2, #0
  41aef0:	2303      	movs	r3, #3
  41aef2:	f363 0202 	bfi	r2, r3, #0, #3
  41aef6:	230b      	movs	r3, #11
  41aef8:	f363 02c7 	bfi	r2, r3, #3, #5
  41aefc:	230e      	movs	r3, #14
  41aefe:	f363 220c 	bfi	r2, r3, #8, #5
  41af02:	f36f 324f 	bfc	r2, #13, #3
  41af06:	e5d8      	b.n	41aaba <list_init+0xba>
  41af08:	f04f 32ff 	mov.w	r2, #4294967295
  41af0c:	e602      	b.n	41ab14 <list_init+0x114>
  41af0e:	f04f 32ff 	mov.w	r2, #4294967295
  41af12:	e60e      	b.n	41ab32 <list_init+0x132>
  41af14:	f04f 0200 	mov.w	r2, #0
  41af18:	2304      	movs	r3, #4
  41af1a:	f363 0202 	bfi	r2, r3, #0, #3
  41af1e:	2313      	movs	r3, #19
  41af20:	f363 02c7 	bfi	r2, r3, #3, #5
  41af24:	f363 220c 	bfi	r2, r3, #8, #5
  41af28:	2306      	movs	r3, #6
  41af2a:	f363 324f 	bfi	r2, r3, #13, #3
  41af2e:	e61a      	b.n	41ab66 <list_init+0x166>
  41af30:	f04f 32ff 	mov.w	r2, #4294967295
  41af34:	e633      	b.n	41ab9e <list_init+0x19e>
  41af36:	f04f 32ff 	mov.w	r2, #4294967295
  41af3a:	e63f      	b.n	41abbc <list_init+0x1bc>
  41af3c:	f04f 0200 	mov.w	r2, #0
  41af40:	2304      	movs	r3, #4
  41af42:	f363 0202 	bfi	r2, r3, #0, #3
  41af46:	2313      	movs	r3, #19
  41af48:	f363 02c7 	bfi	r2, r3, #3, #5
  41af4c:	f363 220c 	bfi	r2, r3, #8, #5
  41af50:	2306      	movs	r3, #6
  41af52:	f363 324f 	bfi	r2, r3, #13, #3
  41af56:	e64b      	b.n	41abf0 <list_init+0x1f0>
  41af58:	f04f 0200 	mov.w	r2, #0
  41af5c:	2304      	movs	r3, #4
  41af5e:	f363 0202 	bfi	r2, r3, #0, #3
  41af62:	2310      	movs	r3, #16
  41af64:	f363 02c7 	bfi	r2, r3, #3, #5
  41af68:	2312      	movs	r3, #18
  41af6a:	f363 220c 	bfi	r2, r3, #8, #5
  41af6e:	2302      	movs	r3, #2
  41af70:	f363 324f 	bfi	r2, r3, #13, #3
  41af74:	e65e      	b.n	41ac34 <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41af76:	2000      	movs	r0, #0
  41af78:	4b34      	ldr	r3, [pc, #208]	; (41b04c <list_init+0x64c>)
  41af7a:	4798      	blx	r3
  41af7c:	3028      	adds	r0, #40	; 0x28
  41af7e:	0040      	lsls	r0, r0, #1
  41af80:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af84:	da01      	bge.n	41af8a <list_init+0x58a>
  41af86:	2201      	movs	r2, #1
  41af88:	e673      	b.n	41ac72 <list_init+0x272>
  41af8a:	2000      	movs	r0, #0
  41af8c:	4b2f      	ldr	r3, [pc, #188]	; (41b04c <list_init+0x64c>)
  41af8e:	4798      	blx	r3
  41af90:	3028      	adds	r0, #40	; 0x28
  41af92:	0040      	lsls	r0, r0, #1
  41af94:	4b2e      	ldr	r3, [pc, #184]	; (41b050 <list_init+0x650>)
  41af96:	fb83 2300 	smull	r2, r3, r3, r0
  41af9a:	17c2      	asrs	r2, r0, #31
  41af9c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41afa0:	b212      	sxth	r2, r2
  41afa2:	e666      	b.n	41ac72 <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41afa4:	2000      	movs	r0, #0
  41afa6:	4b29      	ldr	r3, [pc, #164]	; (41b04c <list_init+0x64c>)
  41afa8:	4798      	blx	r3
  41afaa:	3028      	adds	r0, #40	; 0x28
  41afac:	0040      	lsls	r0, r0, #1
  41afae:	4b28      	ldr	r3, [pc, #160]	; (41b050 <list_init+0x650>)
  41afb0:	fb83 2300 	smull	r2, r3, r3, r0
  41afb4:	17c2      	asrs	r2, r0, #31
  41afb6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41afba:	b212      	sxth	r2, r2
  41afbc:	e66c      	b.n	41ac98 <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41afbe:	2000      	movs	r0, #0
  41afc0:	4b22      	ldr	r3, [pc, #136]	; (41b04c <list_init+0x64c>)
  41afc2:	4798      	blx	r3
  41afc4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afc8:	3050      	adds	r0, #80	; 0x50
  41afca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41afce:	da01      	bge.n	41afd4 <list_init+0x5d4>
  41afd0:	2201      	movs	r2, #1
  41afd2:	e67b      	b.n	41accc <list_init+0x2cc>
  41afd4:	2000      	movs	r0, #0
  41afd6:	4b1d      	ldr	r3, [pc, #116]	; (41b04c <list_init+0x64c>)
  41afd8:	4798      	blx	r3
  41afda:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afde:	3050      	adds	r0, #80	; 0x50
  41afe0:	4b1b      	ldr	r3, [pc, #108]	; (41b050 <list_init+0x650>)
  41afe2:	fb83 2300 	smull	r2, r3, r3, r0
  41afe6:	17c2      	asrs	r2, r0, #31
  41afe8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41afec:	b212      	sxth	r2, r2
  41afee:	e66d      	b.n	41accc <list_init+0x2cc>
  41aff0:	2000      	movs	r0, #0
  41aff2:	4b16      	ldr	r3, [pc, #88]	; (41b04c <list_init+0x64c>)
  41aff4:	4798      	blx	r3
  41aff6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41affa:	0040      	lsls	r0, r0, #1
  41affc:	3050      	adds	r0, #80	; 0x50
  41affe:	4b14      	ldr	r3, [pc, #80]	; (41b050 <list_init+0x650>)
  41b000:	fb83 2300 	smull	r2, r3, r3, r0
  41b004:	17c2      	asrs	r2, r0, #31
  41b006:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b00a:	b212      	sxth	r2, r2
  41b00c:	e65e      	b.n	41accc <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b00e:	2000      	movs	r0, #0
  41b010:	4b0e      	ldr	r3, [pc, #56]	; (41b04c <list_init+0x64c>)
  41b012:	4798      	blx	r3
  41b014:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b018:	3050      	adds	r0, #80	; 0x50
  41b01a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b01e:	da01      	bge.n	41b024 <list_init+0x624>
  41b020:	2201      	movs	r2, #1
  41b022:	e680      	b.n	41ad26 <list_init+0x326>
  41b024:	2000      	movs	r0, #0
  41b026:	4b09      	ldr	r3, [pc, #36]	; (41b04c <list_init+0x64c>)
  41b028:	4798      	blx	r3
  41b02a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b02e:	3050      	adds	r0, #80	; 0x50
  41b030:	4b07      	ldr	r3, [pc, #28]	; (41b050 <list_init+0x650>)
  41b032:	fb83 2300 	smull	r2, r3, r3, r0
  41b036:	17c2      	asrs	r2, r0, #31
  41b038:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b03c:	b212      	sxth	r2, r2
  41b03e:	e672      	b.n	41ad26 <list_init+0x326>
  41b040:	00409f49 	.word	0x00409f49
  41b044:	204147a8 	.word	0x204147a8
  41b048:	00414975 	.word	0x00414975
  41b04c:	00414955 	.word	0x00414955
  41b050:	66666667 	.word	0x66666667
  41b054:	2000      	movs	r0, #0
  41b056:	4b71      	ldr	r3, [pc, #452]	; (41b21c <list_init+0x81c>)
  41b058:	4798      	blx	r3
  41b05a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b05e:	0040      	lsls	r0, r0, #1
  41b060:	3050      	adds	r0, #80	; 0x50
  41b062:	4b6f      	ldr	r3, [pc, #444]	; (41b220 <list_init+0x820>)
  41b064:	fb83 2300 	smull	r2, r3, r3, r0
  41b068:	17c2      	asrs	r2, r0, #31
  41b06a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b06e:	b212      	sxth	r2, r2
  41b070:	e659      	b.n	41ad26 <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b072:	2000      	movs	r0, #0
  41b074:	4b69      	ldr	r3, [pc, #420]	; (41b21c <list_init+0x81c>)
  41b076:	4798      	blx	r3
  41b078:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b07c:	3050      	adds	r0, #80	; 0x50
  41b07e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b082:	da01      	bge.n	41b088 <list_init+0x688>
  41b084:	2201      	movs	r2, #1
  41b086:	e667      	b.n	41ad58 <list_init+0x358>
  41b088:	2000      	movs	r0, #0
  41b08a:	4b64      	ldr	r3, [pc, #400]	; (41b21c <list_init+0x81c>)
  41b08c:	4798      	blx	r3
  41b08e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b092:	3050      	adds	r0, #80	; 0x50
  41b094:	4b62      	ldr	r3, [pc, #392]	; (41b220 <list_init+0x820>)
  41b096:	fb83 2300 	smull	r2, r3, r3, r0
  41b09a:	17c2      	asrs	r2, r0, #31
  41b09c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0a0:	b212      	sxth	r2, r2
  41b0a2:	e659      	b.n	41ad58 <list_init+0x358>
  41b0a4:	2000      	movs	r0, #0
  41b0a6:	4b5d      	ldr	r3, [pc, #372]	; (41b21c <list_init+0x81c>)
  41b0a8:	4798      	blx	r3
  41b0aa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0ae:	0040      	lsls	r0, r0, #1
  41b0b0:	3050      	adds	r0, #80	; 0x50
  41b0b2:	4b5b      	ldr	r3, [pc, #364]	; (41b220 <list_init+0x820>)
  41b0b4:	fb83 2300 	smull	r2, r3, r3, r0
  41b0b8:	17c2      	asrs	r2, r0, #31
  41b0ba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0be:	b212      	sxth	r2, r2
  41b0c0:	e64a      	b.n	41ad58 <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b0c2:	2000      	movs	r0, #0
  41b0c4:	4b55      	ldr	r3, [pc, #340]	; (41b21c <list_init+0x81c>)
  41b0c6:	4798      	blx	r3
  41b0c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0cc:	3050      	adds	r0, #80	; 0x50
  41b0ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b0d2:	da01      	bge.n	41b0d8 <list_init+0x6d8>
  41b0d4:	2201      	movs	r2, #1
  41b0d6:	e658      	b.n	41ad8a <list_init+0x38a>
  41b0d8:	2000      	movs	r0, #0
  41b0da:	4b50      	ldr	r3, [pc, #320]	; (41b21c <list_init+0x81c>)
  41b0dc:	4798      	blx	r3
  41b0de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0e2:	3050      	adds	r0, #80	; 0x50
  41b0e4:	4b4e      	ldr	r3, [pc, #312]	; (41b220 <list_init+0x820>)
  41b0e6:	fb83 2300 	smull	r2, r3, r3, r0
  41b0ea:	17c2      	asrs	r2, r0, #31
  41b0ec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0f0:	b212      	sxth	r2, r2
  41b0f2:	e64a      	b.n	41ad8a <list_init+0x38a>
  41b0f4:	2000      	movs	r0, #0
  41b0f6:	4b49      	ldr	r3, [pc, #292]	; (41b21c <list_init+0x81c>)
  41b0f8:	4798      	blx	r3
  41b0fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0fe:	0040      	lsls	r0, r0, #1
  41b100:	3050      	adds	r0, #80	; 0x50
  41b102:	4b47      	ldr	r3, [pc, #284]	; (41b220 <list_init+0x820>)
  41b104:	fb83 2300 	smull	r2, r3, r3, r0
  41b108:	17c2      	asrs	r2, r0, #31
  41b10a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b10e:	b212      	sxth	r2, r2
  41b110:	e63b      	b.n	41ad8a <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41b112:	2000      	movs	r0, #0
  41b114:	4b41      	ldr	r3, [pc, #260]	; (41b21c <list_init+0x81c>)
  41b116:	4798      	blx	r3
  41b118:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b11c:	3050      	adds	r0, #80	; 0x50
  41b11e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b122:	da01      	bge.n	41b128 <list_init+0x728>
  41b124:	2201      	movs	r2, #1
  41b126:	e649      	b.n	41adbc <list_init+0x3bc>
  41b128:	2000      	movs	r0, #0
  41b12a:	4b3c      	ldr	r3, [pc, #240]	; (41b21c <list_init+0x81c>)
  41b12c:	4798      	blx	r3
  41b12e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b132:	3050      	adds	r0, #80	; 0x50
  41b134:	4b3a      	ldr	r3, [pc, #232]	; (41b220 <list_init+0x820>)
  41b136:	fb83 2300 	smull	r2, r3, r3, r0
  41b13a:	17c2      	asrs	r2, r0, #31
  41b13c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b140:	b212      	sxth	r2, r2
  41b142:	e63b      	b.n	41adbc <list_init+0x3bc>
  41b144:	2000      	movs	r0, #0
  41b146:	4b35      	ldr	r3, [pc, #212]	; (41b21c <list_init+0x81c>)
  41b148:	4798      	blx	r3
  41b14a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b14e:	0040      	lsls	r0, r0, #1
  41b150:	3050      	adds	r0, #80	; 0x50
  41b152:	4b33      	ldr	r3, [pc, #204]	; (41b220 <list_init+0x820>)
  41b154:	fb83 2300 	smull	r2, r3, r3, r0
  41b158:	17c2      	asrs	r2, r0, #31
  41b15a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b15e:	b212      	sxth	r2, r2
  41b160:	e62c      	b.n	41adbc <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41b162:	2000      	movs	r0, #0
  41b164:	4b2d      	ldr	r3, [pc, #180]	; (41b21c <list_init+0x81c>)
  41b166:	4798      	blx	r3
  41b168:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b16c:	3050      	adds	r0, #80	; 0x50
  41b16e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b172:	da02      	bge.n	41b17a <list_init+0x77a>
  41b174:	f04f 32ff 	mov.w	r2, #4294967295
  41b178:	e63a      	b.n	41adf0 <list_init+0x3f0>
  41b17a:	2000      	movs	r0, #0
  41b17c:	4b27      	ldr	r3, [pc, #156]	; (41b21c <list_init+0x81c>)
  41b17e:	4798      	blx	r3
  41b180:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b184:	3050      	adds	r0, #80	; 0x50
  41b186:	4b26      	ldr	r3, [pc, #152]	; (41b220 <list_init+0x820>)
  41b188:	fb83 2300 	smull	r2, r3, r3, r0
  41b18c:	17c2      	asrs	r2, r0, #31
  41b18e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b192:	b212      	sxth	r2, r2
  41b194:	e62c      	b.n	41adf0 <list_init+0x3f0>
  41b196:	2000      	movs	r0, #0
  41b198:	4b20      	ldr	r3, [pc, #128]	; (41b21c <list_init+0x81c>)
  41b19a:	4798      	blx	r3
  41b19c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1a0:	0040      	lsls	r0, r0, #1
  41b1a2:	3050      	adds	r0, #80	; 0x50
  41b1a4:	4b1e      	ldr	r3, [pc, #120]	; (41b220 <list_init+0x820>)
  41b1a6:	fb83 2300 	smull	r2, r3, r3, r0
  41b1aa:	17c2      	asrs	r2, r0, #31
  41b1ac:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b1b0:	b212      	sxth	r2, r2
  41b1b2:	e61d      	b.n	41adf0 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41b1b4:	2000      	movs	r0, #0
  41b1b6:	4b19      	ldr	r3, [pc, #100]	; (41b21c <list_init+0x81c>)
  41b1b8:	4798      	blx	r3
  41b1ba:	3028      	adds	r0, #40	; 0x28
  41b1bc:	0040      	lsls	r0, r0, #1
  41b1be:	4b18      	ldr	r3, [pc, #96]	; (41b220 <list_init+0x820>)
  41b1c0:	fb83 2300 	smull	r2, r3, r3, r0
  41b1c4:	17c2      	asrs	r2, r0, #31
  41b1c6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b1ca:	b212      	sxth	r2, r2
  41b1cc:	e622      	b.n	41ae14 <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41b1ce:	2000      	movs	r0, #0
  41b1d0:	4b12      	ldr	r3, [pc, #72]	; (41b21c <list_init+0x81c>)
  41b1d2:	4798      	blx	r3
  41b1d4:	3028      	adds	r0, #40	; 0x28
  41b1d6:	0040      	lsls	r0, r0, #1
  41b1d8:	4b11      	ldr	r3, [pc, #68]	; (41b220 <list_init+0x820>)
  41b1da:	fb83 2300 	smull	r2, r3, r3, r0
  41b1de:	17c2      	asrs	r2, r0, #31
  41b1e0:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b1e4:	b212      	sxth	r2, r2
  41b1e6:	e628      	b.n	41ae3a <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41b1e8:	2000      	movs	r0, #0
  41b1ea:	4b0c      	ldr	r3, [pc, #48]	; (41b21c <list_init+0x81c>)
  41b1ec:	4798      	blx	r3
  41b1ee:	3028      	adds	r0, #40	; 0x28
  41b1f0:	0040      	lsls	r0, r0, #1
  41b1f2:	4b0b      	ldr	r3, [pc, #44]	; (41b220 <list_init+0x820>)
  41b1f4:	fb83 2300 	smull	r2, r3, r3, r0
  41b1f8:	17c2      	asrs	r2, r0, #31
  41b1fa:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b1fe:	b212      	sxth	r2, r2
  41b200:	e62e      	b.n	41ae60 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41b202:	2000      	movs	r0, #0
  41b204:	4b05      	ldr	r3, [pc, #20]	; (41b21c <list_init+0x81c>)
  41b206:	4798      	blx	r3
  41b208:	3028      	adds	r0, #40	; 0x28
  41b20a:	0040      	lsls	r0, r0, #1
  41b20c:	4b04      	ldr	r3, [pc, #16]	; (41b220 <list_init+0x820>)
  41b20e:	fb83 2300 	smull	r2, r3, r3, r0
  41b212:	17c2      	asrs	r2, r0, #31
  41b214:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41b218:	b212      	sxth	r2, r2
  41b21a:	e634      	b.n	41ae86 <list_init+0x486>
  41b21c:	00414955 	.word	0x00414955
  41b220:	66666667 	.word	0x66666667

0041b224 <ddlist_init>:
{
  41b224:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  41b226:	4c48      	ldr	r4, [pc, #288]	; (41b348 <ddlist_init+0x124>)
  41b228:	6820      	ldr	r0, [r4, #0]
  41b22a:	3058      	adds	r0, #88	; 0x58
  41b22c:	4b47      	ldr	r3, [pc, #284]	; (41b34c <ddlist_init+0x128>)
  41b22e:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b230:	6824      	ldr	r4, [r4, #0]
  41b232:	3458      	adds	r4, #88	; 0x58
  41b234:	2000      	movs	r0, #0
  41b236:	4b46      	ldr	r3, [pc, #280]	; (41b350 <ddlist_init+0x12c>)
  41b238:	4798      	blx	r3
  41b23a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b23e:	0080      	lsls	r0, r0, #2
  41b240:	3050      	adds	r0, #80	; 0x50
  41b242:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b246:	da4d      	bge.n	41b2e4 <ddlist_init+0xc0>
  41b248:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b24a:	f248 0181 	movw	r1, #32897	; 0x8081
  41b24e:	4620      	mov	r0, r4
  41b250:	4d40      	ldr	r5, [pc, #256]	; (41b354 <ddlist_init+0x130>)
  41b252:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41b254:	4c3c      	ldr	r4, [pc, #240]	; (41b348 <ddlist_init+0x124>)
  41b256:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41b258:	2201      	movs	r2, #1
  41b25a:	2102      	movs	r1, #2
  41b25c:	3058      	adds	r0, #88	; 0x58
  41b25e:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41b260:	6820      	ldr	r0, [r4, #0]
  41b262:	305c      	adds	r0, #92	; 0x5c
  41b264:	4b39      	ldr	r3, [pc, #228]	; (41b34c <ddlist_init+0x128>)
  41b266:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b268:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b26a:	22ff      	movs	r2, #255	; 0xff
  41b26c:	212c      	movs	r1, #44	; 0x2c
  41b26e:	305c      	adds	r0, #92	; 0x5c
  41b270:	4b39      	ldr	r3, [pc, #228]	; (41b358 <ddlist_init+0x134>)
  41b272:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b274:	6820      	ldr	r0, [r4, #0]
  41b276:	4d39      	ldr	r5, [pc, #228]	; (41b35c <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b278:	89aa      	ldrh	r2, [r5, #12]
  41b27a:	2129      	movs	r1, #41	; 0x29
  41b27c:	305c      	adds	r0, #92	; 0x5c
  41b27e:	4b38      	ldr	r3, [pc, #224]	; (41b360 <ddlist_init+0x13c>)
  41b280:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41b282:	6820      	ldr	r0, [r4, #0]
  41b284:	305c      	adds	r0, #92	; 0x5c
  41b286:	6a2b      	ldr	r3, [r5, #32]
  41b288:	f013 0f02 	tst.w	r3, #2
  41b28c:	d039      	beq.n	41b302 <ddlist_init+0xde>
  41b28e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b292:	f248 0189 	movw	r1, #32905	; 0x8089
  41b296:	4b32      	ldr	r3, [pc, #200]	; (41b360 <ddlist_init+0x13c>)
  41b298:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41b29a:	4b2b      	ldr	r3, [pc, #172]	; (41b348 <ddlist_init+0x124>)
  41b29c:	6818      	ldr	r0, [r3, #0]
  41b29e:	305c      	adds	r0, #92	; 0x5c
  41b2a0:	4b2e      	ldr	r3, [pc, #184]	; (41b35c <ddlist_init+0x138>)
  41b2a2:	6a1b      	ldr	r3, [r3, #32]
  41b2a4:	f013 0f02 	tst.w	r3, #2
  41b2a8:	d02e      	beq.n	41b308 <ddlist_init+0xe4>
  41b2aa:	f04f 0207 	mov.w	r2, #7
  41b2ae:	231d      	movs	r3, #29
  41b2b0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b2b4:	f363 220c 	bfi	r2, r3, #8, #5
  41b2b8:	2303      	movs	r3, #3
  41b2ba:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b2be:	f241 0129 	movw	r1, #4137	; 0x1029
  41b2c2:	4b27      	ldr	r3, [pc, #156]	; (41b360 <ddlist_init+0x13c>)
  41b2c4:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b2c6:	4b20      	ldr	r3, [pc, #128]	; (41b348 <ddlist_init+0x124>)
  41b2c8:	6818      	ldr	r0, [r3, #0]
  41b2ca:	305c      	adds	r0, #92	; 0x5c
  41b2cc:	4b23      	ldr	r3, [pc, #140]	; (41b35c <ddlist_init+0x138>)
  41b2ce:	6a1b      	ldr	r3, [r3, #32]
  41b2d0:	f013 0f02 	tst.w	r3, #2
  41b2d4:	d127      	bne.n	41b326 <ddlist_init+0x102>
  41b2d6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b2da:	f249 0189 	movw	r1, #37001	; 0x9089
  41b2de:	4b20      	ldr	r3, [pc, #128]	; (41b360 <ddlist_init+0x13c>)
  41b2e0:	4798      	blx	r3
  41b2e2:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41b2e4:	2000      	movs	r0, #0
  41b2e6:	4b1a      	ldr	r3, [pc, #104]	; (41b350 <ddlist_init+0x12c>)
  41b2e8:	4798      	blx	r3
  41b2ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b2ee:	0080      	lsls	r0, r0, #2
  41b2f0:	3050      	adds	r0, #80	; 0x50
  41b2f2:	4b1c      	ldr	r3, [pc, #112]	; (41b364 <ddlist_init+0x140>)
  41b2f4:	fb83 2300 	smull	r2, r3, r3, r0
  41b2f8:	17c2      	asrs	r2, r0, #31
  41b2fa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b2fe:	b212      	sxth	r2, r2
  41b300:	e7a3      	b.n	41b24a <ddlist_init+0x26>
  41b302:	f04f 32ff 	mov.w	r2, #4294967295
  41b306:	e7c4      	b.n	41b292 <ddlist_init+0x6e>
  41b308:	f04f 0200 	mov.w	r2, #0
  41b30c:	2302      	movs	r3, #2
  41b30e:	f363 0202 	bfi	r2, r3, #0, #3
  41b312:	2309      	movs	r3, #9
  41b314:	f363 02c7 	bfi	r2, r3, #3, #5
  41b318:	230a      	movs	r3, #10
  41b31a:	f363 220c 	bfi	r2, r3, #8, #5
  41b31e:	2303      	movs	r3, #3
  41b320:	f363 324f 	bfi	r2, r3, #13, #3
  41b324:	e7cb      	b.n	41b2be <ddlist_init+0x9a>
  41b326:	f04f 0200 	mov.w	r2, #0
  41b32a:	2301      	movs	r3, #1
  41b32c:	f363 0202 	bfi	r2, r3, #0, #3
  41b330:	2307      	movs	r3, #7
  41b332:	f363 02c7 	bfi	r2, r3, #3, #5
  41b336:	2308      	movs	r3, #8
  41b338:	f363 220c 	bfi	r2, r3, #8, #5
  41b33c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b340:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b344:	e7c9      	b.n	41b2da <ddlist_init+0xb6>
  41b346:	bf00      	nop
  41b348:	204147a8 	.word	0x204147a8
  41b34c:	0041851d 	.word	0x0041851d
  41b350:	00414955 	.word	0x00414955
  41b354:	00409f49 	.word	0x00409f49
  41b358:	0040a269 	.word	0x0040a269
  41b35c:	204147ac 	.word	0x204147ac
  41b360:	0040a0d9 	.word	0x0040a0d9
  41b364:	66666667 	.word	0x66666667

0041b368 <roller_init>:
{
  41b368:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  41b36a:	4c21      	ldr	r4, [pc, #132]	; (41b3f0 <roller_init+0x88>)
  41b36c:	6820      	ldr	r0, [r4, #0]
  41b36e:	308c      	adds	r0, #140	; 0x8c
  41b370:	4b20      	ldr	r3, [pc, #128]	; (41b3f4 <roller_init+0x8c>)
  41b372:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b374:	6824      	ldr	r4, [r4, #0]
  41b376:	348c      	adds	r4, #140	; 0x8c
  41b378:	2000      	movs	r0, #0
  41b37a:	4b1f      	ldr	r3, [pc, #124]	; (41b3f8 <roller_init+0x90>)
  41b37c:	4798      	blx	r3
  41b37e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b382:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b386:	3050      	adds	r0, #80	; 0x50
  41b388:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b38c:	da1f      	bge.n	41b3ce <roller_init+0x66>
  41b38e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41b390:	f248 0181 	movw	r1, #32897	; 0x8081
  41b394:	4620      	mov	r0, r4
  41b396:	4b19      	ldr	r3, [pc, #100]	; (41b3fc <roller_init+0x94>)
  41b398:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41b39a:	4c15      	ldr	r4, [pc, #84]	; (41b3f0 <roller_init+0x88>)
  41b39c:	6820      	ldr	r0, [r4, #0]
  41b39e:	3090      	adds	r0, #144	; 0x90
  41b3a0:	4b14      	ldr	r3, [pc, #80]	; (41b3f4 <roller_init+0x8c>)
  41b3a2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b3a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b3a6:	22ff      	movs	r2, #255	; 0xff
  41b3a8:	212c      	movs	r1, #44	; 0x2c
  41b3aa:	3090      	adds	r0, #144	; 0x90
  41b3ac:	4b14      	ldr	r3, [pc, #80]	; (41b400 <roller_init+0x98>)
  41b3ae:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41b3b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b3b2:	4b14      	ldr	r3, [pc, #80]	; (41b404 <roller_init+0x9c>)
  41b3b4:	899a      	ldrh	r2, [r3, #12]
  41b3b6:	2129      	movs	r1, #41	; 0x29
  41b3b8:	3090      	adds	r0, #144	; 0x90
  41b3ba:	4d13      	ldr	r5, [pc, #76]	; (41b408 <roller_init+0xa0>)
  41b3bc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41b3be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b3c0:	4b12      	ldr	r3, [pc, #72]	; (41b40c <roller_init+0xa4>)
  41b3c2:	881a      	ldrh	r2, [r3, #0]
  41b3c4:	f248 0189 	movw	r1, #32905	; 0x8089
  41b3c8:	3090      	adds	r0, #144	; 0x90
  41b3ca:	47a8      	blx	r5
  41b3cc:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41b3ce:	2000      	movs	r0, #0
  41b3d0:	4b09      	ldr	r3, [pc, #36]	; (41b3f8 <roller_init+0x90>)
  41b3d2:	4798      	blx	r3
  41b3d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b3d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b3dc:	3050      	adds	r0, #80	; 0x50
  41b3de:	4b0c      	ldr	r3, [pc, #48]	; (41b410 <roller_init+0xa8>)
  41b3e0:	fb83 2300 	smull	r2, r3, r3, r0
  41b3e4:	17c2      	asrs	r2, r0, #31
  41b3e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b3ea:	b212      	sxth	r2, r2
  41b3ec:	e7d0      	b.n	41b390 <roller_init+0x28>
  41b3ee:	bf00      	nop
  41b3f0:	204147a8 	.word	0x204147a8
  41b3f4:	0041851d 	.word	0x0041851d
  41b3f8:	00414955 	.word	0x00414955
  41b3fc:	00409f49 	.word	0x00409f49
  41b400:	0040a269 	.word	0x0040a269
  41b404:	204147ac 	.word	0x204147ac
  41b408:	0040a0d9 	.word	0x0040a0d9
  41b40c:	0042c3ac 	.word	0x0042c3ac
  41b410:	66666667 	.word	0x66666667

0041b414 <table_init>:
{
  41b414:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  41b416:	4c9d      	ldr	r4, [pc, #628]	; (41b68c <table_init+0x278>)
  41b418:	6820      	ldr	r0, [r4, #0]
  41b41a:	30a4      	adds	r0, #164	; 0xa4
  41b41c:	4b9c      	ldr	r3, [pc, #624]	; (41b690 <table_init+0x27c>)
  41b41e:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b420:	6820      	ldr	r0, [r4, #0]
  41b422:	30a4      	adds	r0, #164	; 0xa4
  41b424:	4b9b      	ldr	r3, [pc, #620]	; (41b694 <table_init+0x280>)
  41b426:	6a1b      	ldr	r3, [r3, #32]
  41b428:	f013 0f02 	tst.w	r3, #2
  41b42c:	d07e      	beq.n	41b52c <table_init+0x118>
  41b42e:	f04f 0200 	mov.w	r2, #0
  41b432:	2306      	movs	r3, #6
  41b434:	f363 0202 	bfi	r2, r3, #0, #3
  41b438:	231a      	movs	r3, #26
  41b43a:	f363 02c7 	bfi	r2, r3, #3, #5
  41b43e:	231c      	movs	r3, #28
  41b440:	f363 220c 	bfi	r2, r3, #8, #5
  41b444:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b448:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b44c:	2139      	movs	r1, #57	; 0x39
  41b44e:	4b92      	ldr	r3, [pc, #584]	; (41b698 <table_init+0x284>)
  41b450:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41b452:	4c8e      	ldr	r4, [pc, #568]	; (41b68c <table_init+0x278>)
  41b454:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b456:	2201      	movs	r2, #1
  41b458:	2130      	movs	r1, #48	; 0x30
  41b45a:	30a4      	adds	r0, #164	; 0xa4
  41b45c:	4d8f      	ldr	r5, [pc, #572]	; (41b69c <table_init+0x288>)
  41b45e:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41b460:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41b462:	2203      	movs	r2, #3
  41b464:	2131      	movs	r1, #49	; 0x31
  41b466:	30a4      	adds	r0, #164	; 0xa4
  41b468:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b46a:	6824      	ldr	r4, [r4, #0]
  41b46c:	34a4      	adds	r4, #164	; 0xa4
  41b46e:	2000      	movs	r0, #0
  41b470:	4b8b      	ldr	r3, [pc, #556]	; (41b6a0 <table_init+0x28c>)
  41b472:	4798      	blx	r3
  41b474:	2801      	cmp	r0, #1
  41b476:	d968      	bls.n	41b54a <table_init+0x136>
  41b478:	2000      	movs	r0, #0
  41b47a:	4b8a      	ldr	r3, [pc, #552]	; (41b6a4 <table_init+0x290>)
  41b47c:	4798      	blx	r3
  41b47e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b482:	0040      	lsls	r0, r0, #1
  41b484:	3050      	adds	r0, #80	; 0x50
  41b486:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b48a:	da77      	bge.n	41b57c <table_init+0x168>
  41b48c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b48e:	2112      	movs	r1, #18
  41b490:	4620      	mov	r0, r4
  41b492:	4b82      	ldr	r3, [pc, #520]	; (41b69c <table_init+0x288>)
  41b494:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b496:	4b7d      	ldr	r3, [pc, #500]	; (41b68c <table_init+0x278>)
  41b498:	681c      	ldr	r4, [r3, #0]
  41b49a:	34a4      	adds	r4, #164	; 0xa4
  41b49c:	2000      	movs	r0, #0
  41b49e:	4b80      	ldr	r3, [pc, #512]	; (41b6a0 <table_init+0x28c>)
  41b4a0:	4798      	blx	r3
  41b4a2:	2801      	cmp	r0, #1
  41b4a4:	d979      	bls.n	41b59a <table_init+0x186>
  41b4a6:	2000      	movs	r0, #0
  41b4a8:	4b7e      	ldr	r3, [pc, #504]	; (41b6a4 <table_init+0x290>)
  41b4aa:	4798      	blx	r3
  41b4ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4b0:	0040      	lsls	r0, r0, #1
  41b4b2:	3050      	adds	r0, #80	; 0x50
  41b4b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4b8:	f280 8088 	bge.w	41b5cc <table_init+0x1b8>
  41b4bc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b4be:	2113      	movs	r1, #19
  41b4c0:	4620      	mov	r0, r4
  41b4c2:	4b76      	ldr	r3, [pc, #472]	; (41b69c <table_init+0x288>)
  41b4c4:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b4c6:	4b71      	ldr	r3, [pc, #452]	; (41b68c <table_init+0x278>)
  41b4c8:	681c      	ldr	r4, [r3, #0]
  41b4ca:	34a4      	adds	r4, #164	; 0xa4
  41b4cc:	2000      	movs	r0, #0
  41b4ce:	4b74      	ldr	r3, [pc, #464]	; (41b6a0 <table_init+0x28c>)
  41b4d0:	4798      	blx	r3
  41b4d2:	2801      	cmp	r0, #1
  41b4d4:	f240 8089 	bls.w	41b5ea <table_init+0x1d6>
  41b4d8:	2000      	movs	r0, #0
  41b4da:	4b72      	ldr	r3, [pc, #456]	; (41b6a4 <table_init+0x290>)
  41b4dc:	4798      	blx	r3
  41b4de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4e2:	0040      	lsls	r0, r0, #1
  41b4e4:	3050      	adds	r0, #80	; 0x50
  41b4e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4ea:	f280 8097 	bge.w	41b61c <table_init+0x208>
  41b4ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b4f0:	2110      	movs	r1, #16
  41b4f2:	4620      	mov	r0, r4
  41b4f4:	4b69      	ldr	r3, [pc, #420]	; (41b69c <table_init+0x288>)
  41b4f6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b4f8:	4b64      	ldr	r3, [pc, #400]	; (41b68c <table_init+0x278>)
  41b4fa:	681c      	ldr	r4, [r3, #0]
  41b4fc:	34a4      	adds	r4, #164	; 0xa4
  41b4fe:	2000      	movs	r0, #0
  41b500:	4b67      	ldr	r3, [pc, #412]	; (41b6a0 <table_init+0x28c>)
  41b502:	4798      	blx	r3
  41b504:	2801      	cmp	r0, #1
  41b506:	f240 8098 	bls.w	41b63a <table_init+0x226>
  41b50a:	2000      	movs	r0, #0
  41b50c:	4b65      	ldr	r3, [pc, #404]	; (41b6a4 <table_init+0x290>)
  41b50e:	4798      	blx	r3
  41b510:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b514:	0040      	lsls	r0, r0, #1
  41b516:	3050      	adds	r0, #80	; 0x50
  41b518:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b51c:	f280 80a6 	bge.w	41b66c <table_init+0x258>
  41b520:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b522:	2111      	movs	r1, #17
  41b524:	4620      	mov	r0, r4
  41b526:	4b5d      	ldr	r3, [pc, #372]	; (41b69c <table_init+0x288>)
  41b528:	4798      	blx	r3
  41b52a:	bd38      	pop	{r3, r4, r5, pc}
  41b52c:	f04f 0200 	mov.w	r2, #0
  41b530:	2304      	movs	r3, #4
  41b532:	f363 0202 	bfi	r2, r3, #0, #3
  41b536:	2310      	movs	r3, #16
  41b538:	f363 02c7 	bfi	r2, r3, #3, #5
  41b53c:	2312      	movs	r3, #18
  41b53e:	f363 220c 	bfi	r2, r3, #8, #5
  41b542:	2302      	movs	r3, #2
  41b544:	f363 324f 	bfi	r2, r3, #13, #3
  41b548:	e780      	b.n	41b44c <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b54a:	2000      	movs	r0, #0
  41b54c:	4b55      	ldr	r3, [pc, #340]	; (41b6a4 <table_init+0x290>)
  41b54e:	4798      	blx	r3
  41b550:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b554:	3050      	adds	r0, #80	; 0x50
  41b556:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b55a:	da01      	bge.n	41b560 <table_init+0x14c>
  41b55c:	2201      	movs	r2, #1
  41b55e:	e796      	b.n	41b48e <table_init+0x7a>
  41b560:	2000      	movs	r0, #0
  41b562:	4b50      	ldr	r3, [pc, #320]	; (41b6a4 <table_init+0x290>)
  41b564:	4798      	blx	r3
  41b566:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b56a:	3050      	adds	r0, #80	; 0x50
  41b56c:	4b4e      	ldr	r3, [pc, #312]	; (41b6a8 <table_init+0x294>)
  41b56e:	fb83 2300 	smull	r2, r3, r3, r0
  41b572:	17c2      	asrs	r2, r0, #31
  41b574:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b578:	b212      	sxth	r2, r2
  41b57a:	e788      	b.n	41b48e <table_init+0x7a>
  41b57c:	2000      	movs	r0, #0
  41b57e:	4b49      	ldr	r3, [pc, #292]	; (41b6a4 <table_init+0x290>)
  41b580:	4798      	blx	r3
  41b582:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b586:	0040      	lsls	r0, r0, #1
  41b588:	3050      	adds	r0, #80	; 0x50
  41b58a:	4b47      	ldr	r3, [pc, #284]	; (41b6a8 <table_init+0x294>)
  41b58c:	fb83 2300 	smull	r2, r3, r3, r0
  41b590:	17c2      	asrs	r2, r0, #31
  41b592:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b596:	b212      	sxth	r2, r2
  41b598:	e779      	b.n	41b48e <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b59a:	2000      	movs	r0, #0
  41b59c:	4b41      	ldr	r3, [pc, #260]	; (41b6a4 <table_init+0x290>)
  41b59e:	4798      	blx	r3
  41b5a0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5a4:	3050      	adds	r0, #80	; 0x50
  41b5a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5aa:	da01      	bge.n	41b5b0 <table_init+0x19c>
  41b5ac:	2201      	movs	r2, #1
  41b5ae:	e786      	b.n	41b4be <table_init+0xaa>
  41b5b0:	2000      	movs	r0, #0
  41b5b2:	4b3c      	ldr	r3, [pc, #240]	; (41b6a4 <table_init+0x290>)
  41b5b4:	4798      	blx	r3
  41b5b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5ba:	3050      	adds	r0, #80	; 0x50
  41b5bc:	4b3a      	ldr	r3, [pc, #232]	; (41b6a8 <table_init+0x294>)
  41b5be:	fb83 2300 	smull	r2, r3, r3, r0
  41b5c2:	17c2      	asrs	r2, r0, #31
  41b5c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b5c8:	b212      	sxth	r2, r2
  41b5ca:	e778      	b.n	41b4be <table_init+0xaa>
  41b5cc:	2000      	movs	r0, #0
  41b5ce:	4b35      	ldr	r3, [pc, #212]	; (41b6a4 <table_init+0x290>)
  41b5d0:	4798      	blx	r3
  41b5d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5d6:	0040      	lsls	r0, r0, #1
  41b5d8:	3050      	adds	r0, #80	; 0x50
  41b5da:	4b33      	ldr	r3, [pc, #204]	; (41b6a8 <table_init+0x294>)
  41b5dc:	fb83 2300 	smull	r2, r3, r3, r0
  41b5e0:	17c2      	asrs	r2, r0, #31
  41b5e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b5e6:	b212      	sxth	r2, r2
  41b5e8:	e769      	b.n	41b4be <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b5ea:	2000      	movs	r0, #0
  41b5ec:	4b2d      	ldr	r3, [pc, #180]	; (41b6a4 <table_init+0x290>)
  41b5ee:	4798      	blx	r3
  41b5f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b5f4:	3050      	adds	r0, #80	; 0x50
  41b5f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b5fa:	da01      	bge.n	41b600 <table_init+0x1ec>
  41b5fc:	2201      	movs	r2, #1
  41b5fe:	e777      	b.n	41b4f0 <table_init+0xdc>
  41b600:	2000      	movs	r0, #0
  41b602:	4b28      	ldr	r3, [pc, #160]	; (41b6a4 <table_init+0x290>)
  41b604:	4798      	blx	r3
  41b606:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b60a:	3050      	adds	r0, #80	; 0x50
  41b60c:	4b26      	ldr	r3, [pc, #152]	; (41b6a8 <table_init+0x294>)
  41b60e:	fb83 2300 	smull	r2, r3, r3, r0
  41b612:	17c2      	asrs	r2, r0, #31
  41b614:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b618:	b212      	sxth	r2, r2
  41b61a:	e769      	b.n	41b4f0 <table_init+0xdc>
  41b61c:	2000      	movs	r0, #0
  41b61e:	4b21      	ldr	r3, [pc, #132]	; (41b6a4 <table_init+0x290>)
  41b620:	4798      	blx	r3
  41b622:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b626:	0040      	lsls	r0, r0, #1
  41b628:	3050      	adds	r0, #80	; 0x50
  41b62a:	4b1f      	ldr	r3, [pc, #124]	; (41b6a8 <table_init+0x294>)
  41b62c:	fb83 2300 	smull	r2, r3, r3, r0
  41b630:	17c2      	asrs	r2, r0, #31
  41b632:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b636:	b212      	sxth	r2, r2
  41b638:	e75a      	b.n	41b4f0 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41b63a:	2000      	movs	r0, #0
  41b63c:	4b19      	ldr	r3, [pc, #100]	; (41b6a4 <table_init+0x290>)
  41b63e:	4798      	blx	r3
  41b640:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b644:	3050      	adds	r0, #80	; 0x50
  41b646:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b64a:	da01      	bge.n	41b650 <table_init+0x23c>
  41b64c:	2201      	movs	r2, #1
  41b64e:	e768      	b.n	41b522 <table_init+0x10e>
  41b650:	2000      	movs	r0, #0
  41b652:	4b14      	ldr	r3, [pc, #80]	; (41b6a4 <table_init+0x290>)
  41b654:	4798      	blx	r3
  41b656:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b65a:	3050      	adds	r0, #80	; 0x50
  41b65c:	4b12      	ldr	r3, [pc, #72]	; (41b6a8 <table_init+0x294>)
  41b65e:	fb83 2300 	smull	r2, r3, r3, r0
  41b662:	17c2      	asrs	r2, r0, #31
  41b664:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b668:	b212      	sxth	r2, r2
  41b66a:	e75a      	b.n	41b522 <table_init+0x10e>
  41b66c:	2000      	movs	r0, #0
  41b66e:	4b0d      	ldr	r3, [pc, #52]	; (41b6a4 <table_init+0x290>)
  41b670:	4798      	blx	r3
  41b672:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b676:	0040      	lsls	r0, r0, #1
  41b678:	3050      	adds	r0, #80	; 0x50
  41b67a:	4b0b      	ldr	r3, [pc, #44]	; (41b6a8 <table_init+0x294>)
  41b67c:	fb83 2300 	smull	r2, r3, r3, r0
  41b680:	17c2      	asrs	r2, r0, #31
  41b682:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b686:	b212      	sxth	r2, r2
  41b688:	e74b      	b.n	41b522 <table_init+0x10e>
  41b68a:	bf00      	nop
  41b68c:	204147a8 	.word	0x204147a8
  41b690:	0041851d 	.word	0x0041851d
  41b694:	204147ac 	.word	0x204147ac
  41b698:	0040a0d9 	.word	0x0040a0d9
  41b69c:	00409f49 	.word	0x00409f49
  41b6a0:	00414975 	.word	0x00414975
  41b6a4:	00414955 	.word	0x00414955
  41b6a8:	66666667 	.word	0x66666667

0041b6ac <tabview_win_shared_init>:
{
  41b6ac:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41b6ae:	4cbe      	ldr	r4, [pc, #760]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b6b0:	6820      	ldr	r0, [r4, #0]
  41b6b2:	30ac      	adds	r0, #172	; 0xac
  41b6b4:	4bbd      	ldr	r3, [pc, #756]	; (41b9ac <tabview_win_shared_init+0x300>)
  41b6b6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b6b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b6ba:	22ff      	movs	r2, #255	; 0xff
  41b6bc:	212c      	movs	r1, #44	; 0x2c
  41b6be:	30ac      	adds	r0, #172	; 0xac
  41b6c0:	4bbb      	ldr	r3, [pc, #748]	; (41b9b0 <tabview_win_shared_init+0x304>)
  41b6c2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41b6c4:	6820      	ldr	r0, [r4, #0]
  41b6c6:	30ac      	adds	r0, #172	; 0xac
  41b6c8:	4bba      	ldr	r3, [pc, #744]	; (41b9b4 <tabview_win_shared_init+0x308>)
  41b6ca:	6a1b      	ldr	r3, [r3, #32]
  41b6cc:	f013 0f02 	tst.w	r3, #2
  41b6d0:	f000 8198 	beq.w	41ba04 <tabview_win_shared_init+0x358>
  41b6d4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b6d8:	2129      	movs	r1, #41	; 0x29
  41b6da:	4bb7      	ldr	r3, [pc, #732]	; (41b9b8 <tabview_win_shared_init+0x30c>)
  41b6dc:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41b6de:	4bb2      	ldr	r3, [pc, #712]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b6e0:	6818      	ldr	r0, [r3, #0]
  41b6e2:	30ac      	adds	r0, #172	; 0xac
  41b6e4:	4bb3      	ldr	r3, [pc, #716]	; (41b9b4 <tabview_win_shared_init+0x308>)
  41b6e6:	6a1b      	ldr	r3, [r3, #32]
  41b6e8:	f013 0f02 	tst.w	r3, #2
  41b6ec:	f000 8198 	beq.w	41ba20 <tabview_win_shared_init+0x374>
  41b6f0:	f04f 0200 	mov.w	r2, #0
  41b6f4:	2301      	movs	r3, #1
  41b6f6:	f363 0202 	bfi	r2, r3, #0, #3
  41b6fa:	2307      	movs	r3, #7
  41b6fc:	f363 02c7 	bfi	r2, r3, #3, #5
  41b700:	2308      	movs	r3, #8
  41b702:	f363 220c 	bfi	r2, r3, #8, #5
  41b706:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b70a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b70e:	f248 0189 	movw	r1, #32905	; 0x8089
  41b712:	4da9      	ldr	r5, [pc, #676]	; (41b9b8 <tabview_win_shared_init+0x30c>)
  41b714:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41b716:	4ca4      	ldr	r4, [pc, #656]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b718:	6820      	ldr	r0, [r4, #0]
  41b71a:	f04f 0200 	mov.w	r2, #0
  41b71e:	2304      	movs	r3, #4
  41b720:	f363 0202 	bfi	r2, r3, #0, #3
  41b724:	2312      	movs	r3, #18
  41b726:	f363 02c7 	bfi	r2, r3, #3, #5
  41b72a:	2313      	movs	r3, #19
  41b72c:	f363 220c 	bfi	r2, r3, #8, #5
  41b730:	2306      	movs	r3, #6
  41b732:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b736:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b73a:	30ac      	adds	r0, #172	; 0xac
  41b73c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41b73e:	6824      	ldr	r4, [r4, #0]
  41b740:	34ac      	adds	r4, #172	; 0xac
  41b742:	2000      	movs	r0, #0
  41b744:	4b9d      	ldr	r3, [pc, #628]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b746:	4798      	blx	r3
  41b748:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41b74c:	3050      	adds	r0, #80	; 0x50
  41b74e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b752:	f280 8171 	bge.w	41ba38 <tabview_win_shared_init+0x38c>
  41b756:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b758:	2110      	movs	r1, #16
  41b75a:	4620      	mov	r0, r4
  41b75c:	4b98      	ldr	r3, [pc, #608]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b75e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41b760:	4b91      	ldr	r3, [pc, #580]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b762:	681c      	ldr	r4, [r3, #0]
  41b764:	34ac      	adds	r4, #172	; 0xac
  41b766:	2000      	movs	r0, #0
  41b768:	4b94      	ldr	r3, [pc, #592]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b76a:	4798      	blx	r3
  41b76c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41b770:	3050      	adds	r0, #80	; 0x50
  41b772:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b776:	f280 816d 	bge.w	41ba54 <tabview_win_shared_init+0x3a8>
  41b77a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b77c:	2112      	movs	r1, #18
  41b77e:	4620      	mov	r0, r4
  41b780:	4b8f      	ldr	r3, [pc, #572]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b782:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41b784:	4b88      	ldr	r3, [pc, #544]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b786:	681c      	ldr	r4, [r3, #0]
  41b788:	34ac      	adds	r4, #172	; 0xac
  41b78a:	2000      	movs	r0, #0
  41b78c:	4b8b      	ldr	r3, [pc, #556]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b78e:	4798      	blx	r3
  41b790:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41b794:	3050      	adds	r0, #80	; 0x50
  41b796:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b79a:	f280 8169 	bge.w	41ba70 <tabview_win_shared_init+0x3c4>
  41b79e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b7a0:	2113      	movs	r1, #19
  41b7a2:	4620      	mov	r0, r4
  41b7a4:	4b86      	ldr	r3, [pc, #536]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b7a6:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41b7a8:	4c7f      	ldr	r4, [pc, #508]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b7aa:	6820      	ldr	r0, [r4, #0]
  41b7ac:	30a8      	adds	r0, #168	; 0xa8
  41b7ae:	4b7f      	ldr	r3, [pc, #508]	; (41b9ac <tabview_win_shared_init+0x300>)
  41b7b0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41b7b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b7b4:	227f      	movs	r2, #127	; 0x7f
  41b7b6:	f241 012c 	movw	r1, #4140	; 0x102c
  41b7ba:	30a8      	adds	r0, #168	; 0xa8
  41b7bc:	4b7c      	ldr	r3, [pc, #496]	; (41b9b0 <tabview_win_shared_init+0x304>)
  41b7be:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41b7c0:	6820      	ldr	r0, [r4, #0]
  41b7c2:	f04f 0200 	mov.w	r2, #0
  41b7c6:	2304      	movs	r3, #4
  41b7c8:	f363 0202 	bfi	r2, r3, #0, #3
  41b7cc:	2311      	movs	r3, #17
  41b7ce:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7d2:	f363 220c 	bfi	r2, r3, #8, #5
  41b7d6:	2302      	movs	r3, #2
  41b7d8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b7dc:	f241 0129 	movw	r1, #4137	; 0x1029
  41b7e0:	30a8      	adds	r0, #168	; 0xa8
  41b7e2:	4b75      	ldr	r3, [pc, #468]	; (41b9b8 <tabview_win_shared_init+0x30c>)
  41b7e4:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41b7e6:	6820      	ldr	r0, [r4, #0]
  41b7e8:	30a8      	adds	r0, #168	; 0xa8
  41b7ea:	4b72      	ldr	r3, [pc, #456]	; (41b9b4 <tabview_win_shared_init+0x308>)
  41b7ec:	6a1b      	ldr	r3, [r3, #32]
  41b7ee:	f013 0f02 	tst.w	r3, #2
  41b7f2:	f000 814b 	beq.w	41ba8c <tabview_win_shared_init+0x3e0>
  41b7f6:	f04f 0200 	mov.w	r2, #0
  41b7fa:	2301      	movs	r3, #1
  41b7fc:	f363 0202 	bfi	r2, r3, #0, #3
  41b800:	2307      	movs	r3, #7
  41b802:	f363 02c7 	bfi	r2, r3, #3, #5
  41b806:	2308      	movs	r3, #8
  41b808:	f363 220c 	bfi	r2, r3, #8, #5
  41b80c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b810:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b814:	f248 1189 	movw	r1, #33161	; 0x8189
  41b818:	4b67      	ldr	r3, [pc, #412]	; (41b9b8 <tabview_win_shared_init+0x30c>)
  41b81a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41b81c:	4b62      	ldr	r3, [pc, #392]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b81e:	681c      	ldr	r4, [r3, #0]
  41b820:	34a8      	adds	r4, #168	; 0xa8
  41b822:	2000      	movs	r0, #0
  41b824:	4b65      	ldr	r3, [pc, #404]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b826:	4798      	blx	r3
  41b828:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b82c:	0080      	lsls	r0, r0, #2
  41b82e:	3050      	adds	r0, #80	; 0x50
  41b830:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b834:	f280 8136 	bge.w	41baa4 <tabview_win_shared_init+0x3f8>
  41b838:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b83a:	2110      	movs	r1, #16
  41b83c:	4620      	mov	r0, r4
  41b83e:	4b60      	ldr	r3, [pc, #384]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b840:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41b842:	4b59      	ldr	r3, [pc, #356]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b844:	681c      	ldr	r4, [r3, #0]
  41b846:	34a8      	adds	r4, #168	; 0xa8
  41b848:	2000      	movs	r0, #0
  41b84a:	4b5c      	ldr	r3, [pc, #368]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b84c:	4798      	blx	r3
  41b84e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b852:	0080      	lsls	r0, r0, #2
  41b854:	3050      	adds	r0, #80	; 0x50
  41b856:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b85a:	f280 8132 	bge.w	41bac2 <tabview_win_shared_init+0x416>
  41b85e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b860:	2111      	movs	r1, #17
  41b862:	4620      	mov	r0, r4
  41b864:	4b56      	ldr	r3, [pc, #344]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b866:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41b868:	4c4f      	ldr	r4, [pc, #316]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b86a:	6820      	ldr	r0, [r4, #0]
  41b86c:	4e51      	ldr	r6, [pc, #324]	; (41b9b4 <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b86e:	89b2      	ldrh	r2, [r6, #12]
  41b870:	f248 2189 	movw	r1, #33417	; 0x8289
  41b874:	30a8      	adds	r0, #168	; 0xa8
  41b876:	4d50      	ldr	r5, [pc, #320]	; (41b9b8 <tabview_win_shared_init+0x30c>)
  41b878:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41b87a:	6820      	ldr	r0, [r4, #0]
  41b87c:	89f2      	ldrh	r2, [r6, #14]
  41b87e:	f248 4189 	movw	r1, #33929	; 0x8489
  41b882:	30a8      	adds	r0, #168	; 0xa8
  41b884:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41b886:	6820      	ldr	r0, [r4, #0]
  41b888:	30b0      	adds	r0, #176	; 0xb0
  41b88a:	4b48      	ldr	r3, [pc, #288]	; (41b9ac <tabview_win_shared_init+0x300>)
  41b88c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b88e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b890:	22ff      	movs	r2, #255	; 0xff
  41b892:	212c      	movs	r1, #44	; 0x2c
  41b894:	30b0      	adds	r0, #176	; 0xb0
  41b896:	4b46      	ldr	r3, [pc, #280]	; (41b9b0 <tabview_win_shared_init+0x304>)
  41b898:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41b89a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b89c:	89b2      	ldrh	r2, [r6, #12]
  41b89e:	2129      	movs	r1, #41	; 0x29
  41b8a0:	30b0      	adds	r0, #176	; 0xb0
  41b8a2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41b8a4:	6820      	ldr	r0, [r4, #0]
  41b8a6:	89f2      	ldrh	r2, [r6, #14]
  41b8a8:	f240 4129 	movw	r1, #1065	; 0x429
  41b8ac:	30b0      	adds	r0, #176	; 0xb0
  41b8ae:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41b8b0:	6824      	ldr	r4, [r4, #0]
  41b8b2:	34b0      	adds	r4, #176	; 0xb0
  41b8b4:	2000      	movs	r0, #0
  41b8b6:	4b41      	ldr	r3, [pc, #260]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b8b8:	4798      	blx	r3
  41b8ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b8be:	3050      	adds	r0, #80	; 0x50
  41b8c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b8c4:	f280 810c 	bge.w	41bae0 <tabview_win_shared_init+0x434>
  41b8c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41b8ca:	2103      	movs	r1, #3
  41b8cc:	4620      	mov	r0, r4
  41b8ce:	4d3c      	ldr	r5, [pc, #240]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b8d0:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b8d2:	4c35      	ldr	r4, [pc, #212]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b8d4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b8d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b8da:	2101      	movs	r1, #1
  41b8dc:	30b0      	adds	r0, #176	; 0xb0
  41b8de:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41b8e0:	6820      	ldr	r0, [r4, #0]
  41b8e2:	30b4      	adds	r0, #180	; 0xb4
  41b8e4:	4b31      	ldr	r3, [pc, #196]	; (41b9ac <tabview_win_shared_init+0x300>)
  41b8e6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41b8e8:	6824      	ldr	r4, [r4, #0]
  41b8ea:	34b4      	adds	r4, #180	; 0xb4
  41b8ec:	2000      	movs	r0, #0
  41b8ee:	4b35      	ldr	r3, [pc, #212]	; (41b9c4 <tabview_win_shared_init+0x318>)
  41b8f0:	4798      	blx	r3
  41b8f2:	2801      	cmp	r0, #1
  41b8f4:	f240 8102 	bls.w	41bafc <tabview_win_shared_init+0x450>
  41b8f8:	2000      	movs	r0, #0
  41b8fa:	4b30      	ldr	r3, [pc, #192]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b8fc:	4798      	blx	r3
  41b8fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b902:	0040      	lsls	r0, r0, #1
  41b904:	3050      	adds	r0, #80	; 0x50
  41b906:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b90a:	f280 8110 	bge.w	41bb2e <tabview_win_shared_init+0x482>
  41b90e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b910:	2110      	movs	r1, #16
  41b912:	4620      	mov	r0, r4
  41b914:	4b2a      	ldr	r3, [pc, #168]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b916:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41b918:	4b23      	ldr	r3, [pc, #140]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b91a:	681c      	ldr	r4, [r3, #0]
  41b91c:	34b4      	adds	r4, #180	; 0xb4
  41b91e:	2000      	movs	r0, #0
  41b920:	4b28      	ldr	r3, [pc, #160]	; (41b9c4 <tabview_win_shared_init+0x318>)
  41b922:	4798      	blx	r3
  41b924:	2801      	cmp	r0, #1
  41b926:	f240 8111 	bls.w	41bb4c <tabview_win_shared_init+0x4a0>
  41b92a:	2000      	movs	r0, #0
  41b92c:	4b23      	ldr	r3, [pc, #140]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b92e:	4798      	blx	r3
  41b930:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b934:	0040      	lsls	r0, r0, #1
  41b936:	3050      	adds	r0, #80	; 0x50
  41b938:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b93c:	f280 811f 	bge.w	41bb7e <tabview_win_shared_init+0x4d2>
  41b940:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b942:	2111      	movs	r1, #17
  41b944:	4620      	mov	r0, r4
  41b946:	4b1e      	ldr	r3, [pc, #120]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b948:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41b94a:	4b17      	ldr	r3, [pc, #92]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b94c:	681c      	ldr	r4, [r3, #0]
  41b94e:	34b4      	adds	r4, #180	; 0xb4
  41b950:	2000      	movs	r0, #0
  41b952:	4b1c      	ldr	r3, [pc, #112]	; (41b9c4 <tabview_win_shared_init+0x318>)
  41b954:	4798      	blx	r3
  41b956:	2801      	cmp	r0, #1
  41b958:	f240 8120 	bls.w	41bb9c <tabview_win_shared_init+0x4f0>
  41b95c:	2000      	movs	r0, #0
  41b95e:	4b17      	ldr	r3, [pc, #92]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b960:	4798      	blx	r3
  41b962:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b966:	0040      	lsls	r0, r0, #1
  41b968:	3050      	adds	r0, #80	; 0x50
  41b96a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b96e:	f280 812e 	bge.w	41bbce <tabview_win_shared_init+0x522>
  41b972:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b974:	2112      	movs	r1, #18
  41b976:	4620      	mov	r0, r4
  41b978:	4b11      	ldr	r3, [pc, #68]	; (41b9c0 <tabview_win_shared_init+0x314>)
  41b97a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41b97c:	4b0a      	ldr	r3, [pc, #40]	; (41b9a8 <tabview_win_shared_init+0x2fc>)
  41b97e:	681c      	ldr	r4, [r3, #0]
  41b980:	34b4      	adds	r4, #180	; 0xb4
  41b982:	2000      	movs	r0, #0
  41b984:	4b0f      	ldr	r3, [pc, #60]	; (41b9c4 <tabview_win_shared_init+0x318>)
  41b986:	4798      	blx	r3
  41b988:	2801      	cmp	r0, #1
  41b98a:	f240 812f 	bls.w	41bbec <tabview_win_shared_init+0x540>
  41b98e:	2000      	movs	r0, #0
  41b990:	4b0a      	ldr	r3, [pc, #40]	; (41b9bc <tabview_win_shared_init+0x310>)
  41b992:	4798      	blx	r3
  41b994:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b998:	0040      	lsls	r0, r0, #1
  41b99a:	3050      	adds	r0, #80	; 0x50
  41b99c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9a0:	f280 813d 	bge.w	41bc1e <tabview_win_shared_init+0x572>
  41b9a4:	2201      	movs	r2, #1
  41b9a6:	e00f      	b.n	41b9c8 <tabview_win_shared_init+0x31c>
  41b9a8:	204147a8 	.word	0x204147a8
  41b9ac:	0041851d 	.word	0x0041851d
  41b9b0:	0040a269 	.word	0x0040a269
  41b9b4:	204147ac 	.word	0x204147ac
  41b9b8:	0040a0d9 	.word	0x0040a0d9
  41b9bc:	00414955 	.word	0x00414955
  41b9c0:	00409f49 	.word	0x00409f49
  41b9c4:	00414975 	.word	0x00414975
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b9c8:	2113      	movs	r1, #19
  41b9ca:	4620      	mov	r0, r4
  41b9cc:	4baf      	ldr	r3, [pc, #700]	; (41bc8c <tabview_win_shared_init+0x5e0>)
  41b9ce:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41b9d0:	4baf      	ldr	r3, [pc, #700]	; (41bc90 <tabview_win_shared_init+0x5e4>)
  41b9d2:	681c      	ldr	r4, [r3, #0]
  41b9d4:	34b4      	adds	r4, #180	; 0xb4
  41b9d6:	2000      	movs	r0, #0
  41b9d8:	4bae      	ldr	r3, [pc, #696]	; (41bc94 <tabview_win_shared_init+0x5e8>)
  41b9da:	4798      	blx	r3
  41b9dc:	2801      	cmp	r0, #1
  41b9de:	f240 812d 	bls.w	41bc3c <tabview_win_shared_init+0x590>
  41b9e2:	2000      	movs	r0, #0
  41b9e4:	4bac      	ldr	r3, [pc, #688]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41b9e6:	4798      	blx	r3
  41b9e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b9ec:	0040      	lsls	r0, r0, #1
  41b9ee:	3050      	adds	r0, #80	; 0x50
  41b9f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b9f4:	f280 813b 	bge.w	41bc6e <tabview_win_shared_init+0x5c2>
  41b9f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b9fa:	2114      	movs	r1, #20
  41b9fc:	4620      	mov	r0, r4
  41b9fe:	4ba3      	ldr	r3, [pc, #652]	; (41bc8c <tabview_win_shared_init+0x5e0>)
  41ba00:	4798      	blx	r3
  41ba02:	bd70      	pop	{r4, r5, r6, pc}
  41ba04:	f04f 0200 	mov.w	r2, #0
  41ba08:	2303      	movs	r3, #3
  41ba0a:	f363 0202 	bfi	r2, r3, #0, #3
  41ba0e:	230b      	movs	r3, #11
  41ba10:	f363 02c7 	bfi	r2, r3, #3, #5
  41ba14:	230e      	movs	r3, #14
  41ba16:	f363 220c 	bfi	r2, r3, #8, #5
  41ba1a:	f36f 324f 	bfc	r2, #13, #3
  41ba1e:	e65b      	b.n	41b6d8 <tabview_win_shared_init+0x2c>
  41ba20:	f04f 0207 	mov.w	r2, #7
  41ba24:	231c      	movs	r3, #28
  41ba26:	f363 02c7 	bfi	r2, r3, #3, #5
  41ba2a:	231d      	movs	r3, #29
  41ba2c:	f363 220c 	bfi	r2, r3, #8, #5
  41ba30:	2302      	movs	r3, #2
  41ba32:	f363 324f 	bfi	r2, r3, #13, #3
  41ba36:	e66a      	b.n	41b70e <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ba38:	2000      	movs	r0, #0
  41ba3a:	4b97      	ldr	r3, [pc, #604]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41ba3c:	4798      	blx	r3
  41ba3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ba42:	3050      	adds	r0, #80	; 0x50
  41ba44:	4b95      	ldr	r3, [pc, #596]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41ba46:	fb83 2300 	smull	r2, r3, r3, r0
  41ba4a:	17c2      	asrs	r2, r0, #31
  41ba4c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba50:	b212      	sxth	r2, r2
  41ba52:	e681      	b.n	41b758 <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ba54:	2000      	movs	r0, #0
  41ba56:	4b90      	ldr	r3, [pc, #576]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41ba58:	4798      	blx	r3
  41ba5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ba5e:	3050      	adds	r0, #80	; 0x50
  41ba60:	4b8e      	ldr	r3, [pc, #568]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41ba62:	fb83 2300 	smull	r2, r3, r3, r0
  41ba66:	17c2      	asrs	r2, r0, #31
  41ba68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba6c:	b212      	sxth	r2, r2
  41ba6e:	e685      	b.n	41b77c <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ba70:	2000      	movs	r0, #0
  41ba72:	4b89      	ldr	r3, [pc, #548]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41ba74:	4798      	blx	r3
  41ba76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ba7a:	3050      	adds	r0, #80	; 0x50
  41ba7c:	4b87      	ldr	r3, [pc, #540]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41ba7e:	fb83 2300 	smull	r2, r3, r3, r0
  41ba82:	17c2      	asrs	r2, r0, #31
  41ba84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ba88:	b212      	sxth	r2, r2
  41ba8a:	e689      	b.n	41b7a0 <tabview_win_shared_init+0xf4>
  41ba8c:	f04f 0207 	mov.w	r2, #7
  41ba90:	231c      	movs	r3, #28
  41ba92:	f363 02c7 	bfi	r2, r3, #3, #5
  41ba96:	231d      	movs	r3, #29
  41ba98:	f363 220c 	bfi	r2, r3, #8, #5
  41ba9c:	2302      	movs	r3, #2
  41ba9e:	f363 324f 	bfi	r2, r3, #13, #3
  41baa2:	e6b7      	b.n	41b814 <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41baa4:	2000      	movs	r0, #0
  41baa6:	4b7c      	ldr	r3, [pc, #496]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41baa8:	4798      	blx	r3
  41baaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41baae:	0080      	lsls	r0, r0, #2
  41bab0:	3050      	adds	r0, #80	; 0x50
  41bab2:	4b7a      	ldr	r3, [pc, #488]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bab4:	fb83 2300 	smull	r2, r3, r3, r0
  41bab8:	17c2      	asrs	r2, r0, #31
  41baba:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41babe:	b212      	sxth	r2, r2
  41bac0:	e6bb      	b.n	41b83a <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41bac2:	2000      	movs	r0, #0
  41bac4:	4b74      	ldr	r3, [pc, #464]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bac6:	4798      	blx	r3
  41bac8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bacc:	0080      	lsls	r0, r0, #2
  41bace:	3050      	adds	r0, #80	; 0x50
  41bad0:	4b72      	ldr	r3, [pc, #456]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bad2:	fb83 2300 	smull	r2, r3, r3, r0
  41bad6:	17c2      	asrs	r2, r0, #31
  41bad8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41badc:	b212      	sxth	r2, r2
  41bade:	e6bf      	b.n	41b860 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41bae0:	2000      	movs	r0, #0
  41bae2:	4b6d      	ldr	r3, [pc, #436]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bae4:	4798      	blx	r3
  41bae6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41baea:	3050      	adds	r0, #80	; 0x50
  41baec:	4b6b      	ldr	r3, [pc, #428]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41baee:	fb83 2300 	smull	r2, r3, r3, r0
  41baf2:	17c2      	asrs	r2, r0, #31
  41baf4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41baf8:	b212      	sxth	r2, r2
  41bafa:	e6e6      	b.n	41b8ca <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bafc:	2000      	movs	r0, #0
  41bafe:	4b66      	ldr	r3, [pc, #408]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bb00:	4798      	blx	r3
  41bb02:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb06:	3050      	adds	r0, #80	; 0x50
  41bb08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb0c:	da01      	bge.n	41bb12 <tabview_win_shared_init+0x466>
  41bb0e:	2201      	movs	r2, #1
  41bb10:	e6fe      	b.n	41b910 <tabview_win_shared_init+0x264>
  41bb12:	2000      	movs	r0, #0
  41bb14:	4b60      	ldr	r3, [pc, #384]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bb16:	4798      	blx	r3
  41bb18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb1c:	3050      	adds	r0, #80	; 0x50
  41bb1e:	4b5f      	ldr	r3, [pc, #380]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bb20:	fb83 2300 	smull	r2, r3, r3, r0
  41bb24:	17c2      	asrs	r2, r0, #31
  41bb26:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb2a:	b212      	sxth	r2, r2
  41bb2c:	e6f0      	b.n	41b910 <tabview_win_shared_init+0x264>
  41bb2e:	2000      	movs	r0, #0
  41bb30:	4b59      	ldr	r3, [pc, #356]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bb32:	4798      	blx	r3
  41bb34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb38:	0040      	lsls	r0, r0, #1
  41bb3a:	3050      	adds	r0, #80	; 0x50
  41bb3c:	4b57      	ldr	r3, [pc, #348]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bb3e:	fb83 2300 	smull	r2, r3, r3, r0
  41bb42:	17c2      	asrs	r2, r0, #31
  41bb44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb48:	b212      	sxth	r2, r2
  41bb4a:	e6e1      	b.n	41b910 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bb4c:	2000      	movs	r0, #0
  41bb4e:	4b52      	ldr	r3, [pc, #328]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bb50:	4798      	blx	r3
  41bb52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb56:	3050      	adds	r0, #80	; 0x50
  41bb58:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb5c:	da01      	bge.n	41bb62 <tabview_win_shared_init+0x4b6>
  41bb5e:	2201      	movs	r2, #1
  41bb60:	e6ef      	b.n	41b942 <tabview_win_shared_init+0x296>
  41bb62:	2000      	movs	r0, #0
  41bb64:	4b4c      	ldr	r3, [pc, #304]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bb66:	4798      	blx	r3
  41bb68:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb6c:	3050      	adds	r0, #80	; 0x50
  41bb6e:	4b4b      	ldr	r3, [pc, #300]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bb70:	fb83 2300 	smull	r2, r3, r3, r0
  41bb74:	17c2      	asrs	r2, r0, #31
  41bb76:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb7a:	b212      	sxth	r2, r2
  41bb7c:	e6e1      	b.n	41b942 <tabview_win_shared_init+0x296>
  41bb7e:	2000      	movs	r0, #0
  41bb80:	4b45      	ldr	r3, [pc, #276]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bb82:	4798      	blx	r3
  41bb84:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bb88:	0040      	lsls	r0, r0, #1
  41bb8a:	3050      	adds	r0, #80	; 0x50
  41bb8c:	4b43      	ldr	r3, [pc, #268]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bb8e:	fb83 2300 	smull	r2, r3, r3, r0
  41bb92:	17c2      	asrs	r2, r0, #31
  41bb94:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bb98:	b212      	sxth	r2, r2
  41bb9a:	e6d2      	b.n	41b942 <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bb9c:	2000      	movs	r0, #0
  41bb9e:	4b3e      	ldr	r3, [pc, #248]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bba0:	4798      	blx	r3
  41bba2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bba6:	3050      	adds	r0, #80	; 0x50
  41bba8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bbac:	da01      	bge.n	41bbb2 <tabview_win_shared_init+0x506>
  41bbae:	2201      	movs	r2, #1
  41bbb0:	e6e0      	b.n	41b974 <tabview_win_shared_init+0x2c8>
  41bbb2:	2000      	movs	r0, #0
  41bbb4:	4b38      	ldr	r3, [pc, #224]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bbb6:	4798      	blx	r3
  41bbb8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbbc:	3050      	adds	r0, #80	; 0x50
  41bbbe:	4b37      	ldr	r3, [pc, #220]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bbc0:	fb83 2300 	smull	r2, r3, r3, r0
  41bbc4:	17c2      	asrs	r2, r0, #31
  41bbc6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bbca:	b212      	sxth	r2, r2
  41bbcc:	e6d2      	b.n	41b974 <tabview_win_shared_init+0x2c8>
  41bbce:	2000      	movs	r0, #0
  41bbd0:	4b31      	ldr	r3, [pc, #196]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bbd2:	4798      	blx	r3
  41bbd4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbd8:	0040      	lsls	r0, r0, #1
  41bbda:	3050      	adds	r0, #80	; 0x50
  41bbdc:	4b2f      	ldr	r3, [pc, #188]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bbde:	fb83 2300 	smull	r2, r3, r3, r0
  41bbe2:	17c2      	asrs	r2, r0, #31
  41bbe4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bbe8:	b212      	sxth	r2, r2
  41bbea:	e6c3      	b.n	41b974 <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bbec:	2000      	movs	r0, #0
  41bbee:	4b2a      	ldr	r3, [pc, #168]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bbf0:	4798      	blx	r3
  41bbf2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bbf6:	3050      	adds	r0, #80	; 0x50
  41bbf8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bbfc:	da01      	bge.n	41bc02 <tabview_win_shared_init+0x556>
  41bbfe:	2201      	movs	r2, #1
  41bc00:	e6e2      	b.n	41b9c8 <tabview_win_shared_init+0x31c>
  41bc02:	2000      	movs	r0, #0
  41bc04:	4b24      	ldr	r3, [pc, #144]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bc06:	4798      	blx	r3
  41bc08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc0c:	3050      	adds	r0, #80	; 0x50
  41bc0e:	4b23      	ldr	r3, [pc, #140]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bc10:	fb83 2300 	smull	r2, r3, r3, r0
  41bc14:	17c2      	asrs	r2, r0, #31
  41bc16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc1a:	b212      	sxth	r2, r2
  41bc1c:	e6d4      	b.n	41b9c8 <tabview_win_shared_init+0x31c>
  41bc1e:	2000      	movs	r0, #0
  41bc20:	4b1d      	ldr	r3, [pc, #116]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bc22:	4798      	blx	r3
  41bc24:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc28:	0040      	lsls	r0, r0, #1
  41bc2a:	3050      	adds	r0, #80	; 0x50
  41bc2c:	4b1b      	ldr	r3, [pc, #108]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bc2e:	fb83 2300 	smull	r2, r3, r3, r0
  41bc32:	17c2      	asrs	r2, r0, #31
  41bc34:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc38:	b212      	sxth	r2, r2
  41bc3a:	e6c5      	b.n	41b9c8 <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41bc3c:	2000      	movs	r0, #0
  41bc3e:	4b16      	ldr	r3, [pc, #88]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bc40:	4798      	blx	r3
  41bc42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc46:	3050      	adds	r0, #80	; 0x50
  41bc48:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc4c:	da01      	bge.n	41bc52 <tabview_win_shared_init+0x5a6>
  41bc4e:	2201      	movs	r2, #1
  41bc50:	e6d3      	b.n	41b9fa <tabview_win_shared_init+0x34e>
  41bc52:	2000      	movs	r0, #0
  41bc54:	4b10      	ldr	r3, [pc, #64]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bc56:	4798      	blx	r3
  41bc58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc5c:	3050      	adds	r0, #80	; 0x50
  41bc5e:	4b0f      	ldr	r3, [pc, #60]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bc60:	fb83 2300 	smull	r2, r3, r3, r0
  41bc64:	17c2      	asrs	r2, r0, #31
  41bc66:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc6a:	b212      	sxth	r2, r2
  41bc6c:	e6c5      	b.n	41b9fa <tabview_win_shared_init+0x34e>
  41bc6e:	2000      	movs	r0, #0
  41bc70:	4b09      	ldr	r3, [pc, #36]	; (41bc98 <tabview_win_shared_init+0x5ec>)
  41bc72:	4798      	blx	r3
  41bc74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bc78:	0040      	lsls	r0, r0, #1
  41bc7a:	3050      	adds	r0, #80	; 0x50
  41bc7c:	4b07      	ldr	r3, [pc, #28]	; (41bc9c <tabview_win_shared_init+0x5f0>)
  41bc7e:	fb83 2300 	smull	r2, r3, r3, r0
  41bc82:	17c2      	asrs	r2, r0, #31
  41bc84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bc88:	b212      	sxth	r2, r2
  41bc8a:	e6b6      	b.n	41b9fa <tabview_win_shared_init+0x34e>
  41bc8c:	00409f49 	.word	0x00409f49
  41bc90:	204147a8 	.word	0x204147a8
  41bc94:	00414975 	.word	0x00414975
  41bc98:	00414955 	.word	0x00414955
  41bc9c:	66666667 	.word	0x66666667

0041bca0 <led_init>:
{
  41bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41bca4:	4c3a      	ldr	r4, [pc, #232]	; (41bd90 <led_init+0xf0>)
  41bca6:	6820      	ldr	r0, [r4, #0]
  41bca8:	3070      	adds	r0, #112	; 0x70
  41bcaa:	4b3a      	ldr	r3, [pc, #232]	; (41bd94 <led_init+0xf4>)
  41bcac:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41bcae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bcb0:	22ff      	movs	r2, #255	; 0xff
  41bcb2:	212c      	movs	r1, #44	; 0x2c
  41bcb4:	3070      	adds	r0, #112	; 0x70
  41bcb6:	4d38      	ldr	r5, [pc, #224]	; (41bd98 <led_init+0xf8>)
  41bcb8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41bcba:	6820      	ldr	r0, [r4, #0]
  41bcbc:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41bdac <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bcc0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41bcc4:	2129      	movs	r1, #41	; 0x29
  41bcc6:	3070      	adds	r0, #112	; 0x70
  41bcc8:	4f34      	ldr	r7, [pc, #208]	; (41bd9c <led_init+0xfc>)
  41bcca:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41bccc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41bcce:	2202      	movs	r2, #2
  41bcd0:	2130      	movs	r1, #48	; 0x30
  41bcd2:	3070      	adds	r0, #112	; 0x70
  41bcd4:	4e32      	ldr	r6, [pc, #200]	; (41bda0 <led_init+0x100>)
  41bcd6:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41bcd8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41bcda:	227f      	movs	r2, #127	; 0x7f
  41bcdc:	213c      	movs	r1, #60	; 0x3c
  41bcde:	3070      	adds	r0, #112	; 0x70
  41bce0:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41bce2:	6825      	ldr	r5, [r4, #0]
  41bce4:	3570      	adds	r5, #112	; 0x70
  41bce6:	214c      	movs	r1, #76	; 0x4c
  41bce8:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41bcec:	4b2d      	ldr	r3, [pc, #180]	; (41bda4 <led_init+0x104>)
  41bcee:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41bcf0:	4602      	mov	r2, r0
  41bcf2:	2139      	movs	r1, #57	; 0x39
  41bcf4:	4628      	mov	r0, r5
  41bcf6:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41bcf8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41bcfa:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41bcfe:	2101      	movs	r1, #1
  41bd00:	3070      	adds	r0, #112	; 0x70
  41bd02:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41bd04:	6824      	ldr	r4, [r4, #0]
  41bd06:	3470      	adds	r4, #112	; 0x70
  41bd08:	2000      	movs	r0, #0
  41bd0a:	4b27      	ldr	r3, [pc, #156]	; (41bda8 <led_init+0x108>)
  41bd0c:	4798      	blx	r3
  41bd0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd12:	3050      	adds	r0, #80	; 0x50
  41bd14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd18:	da1e      	bge.n	41bd58 <led_init+0xb8>
  41bd1a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41bd1c:	2150      	movs	r1, #80	; 0x50
  41bd1e:	4620      	mov	r0, r4
  41bd20:	4b1f      	ldr	r3, [pc, #124]	; (41bda0 <led_init+0x100>)
  41bd22:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41bd24:	4c1a      	ldr	r4, [pc, #104]	; (41bd90 <led_init+0xf0>)
  41bd26:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41bd28:	4b20      	ldr	r3, [pc, #128]	; (41bdac <led_init+0x10c>)
  41bd2a:	899a      	ldrh	r2, [r3, #12]
  41bd2c:	2159      	movs	r1, #89	; 0x59
  41bd2e:	3070      	adds	r0, #112	; 0x70
  41bd30:	4b1a      	ldr	r3, [pc, #104]	; (41bd9c <led_init+0xfc>)
  41bd32:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41bd34:	6824      	ldr	r4, [r4, #0]
  41bd36:	3470      	adds	r4, #112	; 0x70
  41bd38:	2000      	movs	r0, #0
  41bd3a:	4b1b      	ldr	r3, [pc, #108]	; (41bda8 <led_init+0x108>)
  41bd3c:	4798      	blx	r3
  41bd3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bd42:	3050      	adds	r0, #80	; 0x50
  41bd44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd48:	da14      	bge.n	41bd74 <led_init+0xd4>
  41bd4a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41bd4c:	2153      	movs	r1, #83	; 0x53
  41bd4e:	4620      	mov	r0, r4
  41bd50:	4b13      	ldr	r3, [pc, #76]	; (41bda0 <led_init+0x100>)
  41bd52:	4798      	blx	r3
  41bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41bd58:	2000      	movs	r0, #0
  41bd5a:	4b13      	ldr	r3, [pc, #76]	; (41bda8 <led_init+0x108>)
  41bd5c:	4798      	blx	r3
  41bd5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd62:	3050      	adds	r0, #80	; 0x50
  41bd64:	4b12      	ldr	r3, [pc, #72]	; (41bdb0 <led_init+0x110>)
  41bd66:	fb83 2300 	smull	r2, r3, r3, r0
  41bd6a:	17c2      	asrs	r2, r0, #31
  41bd6c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd70:	b212      	sxth	r2, r2
  41bd72:	e7d3      	b.n	41bd1c <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41bd74:	2000      	movs	r0, #0
  41bd76:	4b0c      	ldr	r3, [pc, #48]	; (41bda8 <led_init+0x108>)
  41bd78:	4798      	blx	r3
  41bd7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bd7e:	3050      	adds	r0, #80	; 0x50
  41bd80:	4b0b      	ldr	r3, [pc, #44]	; (41bdb0 <led_init+0x110>)
  41bd82:	fb83 2300 	smull	r2, r3, r3, r0
  41bd86:	17c2      	asrs	r2, r0, #31
  41bd88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd8c:	b212      	sxth	r2, r2
  41bd8e:	e7dd      	b.n	41bd4c <led_init+0xac>
  41bd90:	204147a8 	.word	0x204147a8
  41bd94:	0041851d 	.word	0x0041851d
  41bd98:	0040a269 	.word	0x0040a269
  41bd9c:	0040a0d9 	.word	0x0040a0d9
  41bda0:	00409f49 	.word	0x00409f49
  41bda4:	00415979 	.word	0x00415979
  41bda8:	00414955 	.word	0x00414955
  41bdac:	204147ac 	.word	0x204147ac
  41bdb0:	66666667 	.word	0x66666667

0041bdb4 <basic_init>:
{
  41bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41bdb6:	4cc2      	ldr	r4, [pc, #776]	; (41c0c0 <basic_init+0x30c>)
  41bdb8:	6820      	ldr	r0, [r4, #0]
  41bdba:	4bc2      	ldr	r3, [pc, #776]	; (41c0c4 <basic_init+0x310>)
  41bdbc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bdbe:	22ff      	movs	r2, #255	; 0xff
  41bdc0:	212c      	movs	r1, #44	; 0x2c
  41bdc2:	6820      	ldr	r0, [r4, #0]
  41bdc4:	4bc0      	ldr	r3, [pc, #768]	; (41c0c8 <basic_init+0x314>)
  41bdc6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41bdc8:	6820      	ldr	r0, [r4, #0]
  41bdca:	4bc0      	ldr	r3, [pc, #768]	; (41c0cc <basic_init+0x318>)
  41bdcc:	6a1b      	ldr	r3, [r3, #32]
  41bdce:	f013 0f02 	tst.w	r3, #2
  41bdd2:	f000 8742 	beq.w	41cc5a <basic_init+0xea6>
  41bdd6:	f04f 0207 	mov.w	r2, #7
  41bdda:	231d      	movs	r3, #29
  41bddc:	f363 02c7 	bfi	r2, r3, #3, #5
  41bde0:	231e      	movs	r3, #30
  41bde2:	f363 220c 	bfi	r2, r3, #8, #5
  41bde6:	2303      	movs	r3, #3
  41bde8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bdec:	2129      	movs	r1, #41	; 0x29
  41bdee:	4bb8      	ldr	r3, [pc, #736]	; (41c0d0 <basic_init+0x31c>)
  41bdf0:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41bdf2:	4bb3      	ldr	r3, [pc, #716]	; (41c0c0 <basic_init+0x30c>)
  41bdf4:	6818      	ldr	r0, [r3, #0]
  41bdf6:	4bb5      	ldr	r3, [pc, #724]	; (41c0cc <basic_init+0x318>)
  41bdf8:	6a1b      	ldr	r3, [r3, #32]
  41bdfa:	f013 0f02 	tst.w	r3, #2
  41bdfe:	f000 873b 	beq.w	41cc78 <basic_init+0xec4>
  41be02:	f04f 0200 	mov.w	r2, #0
  41be06:	2301      	movs	r3, #1
  41be08:	f363 0202 	bfi	r2, r3, #0, #3
  41be0c:	2307      	movs	r3, #7
  41be0e:	f363 02c7 	bfi	r2, r3, #3, #5
  41be12:	2308      	movs	r3, #8
  41be14:	f363 220c 	bfi	r2, r3, #8, #5
  41be18:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41be1c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41be20:	f248 0189 	movw	r1, #32905	; 0x8089
  41be24:	4baa      	ldr	r3, [pc, #680]	; (41c0d0 <basic_init+0x31c>)
  41be26:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41be28:	4ba5      	ldr	r3, [pc, #660]	; (41c0c0 <basic_init+0x30c>)
  41be2a:	6818      	ldr	r0, [r3, #0]
  41be2c:	4ba7      	ldr	r3, [pc, #668]	; (41c0cc <basic_init+0x318>)
  41be2e:	6a1b      	ldr	r3, [r3, #32]
  41be30:	f013 0f02 	tst.w	r3, #2
  41be34:	f000 872d 	beq.w	41cc92 <basic_init+0xede>
  41be38:	f04f 0200 	mov.w	r2, #0
  41be3c:	2301      	movs	r3, #1
  41be3e:	f363 0202 	bfi	r2, r3, #0, #3
  41be42:	2307      	movs	r3, #7
  41be44:	f363 02c7 	bfi	r2, r3, #3, #5
  41be48:	2308      	movs	r3, #8
  41be4a:	f363 220c 	bfi	r2, r3, #8, #5
  41be4e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41be52:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41be56:	2179      	movs	r1, #121	; 0x79
  41be58:	4b9d      	ldr	r3, [pc, #628]	; (41c0d0 <basic_init+0x31c>)
  41be5a:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41be5c:	4b98      	ldr	r3, [pc, #608]	; (41c0c0 <basic_init+0x30c>)
  41be5e:	6818      	ldr	r0, [r3, #0]
  41be60:	4b9a      	ldr	r3, [pc, #616]	; (41c0cc <basic_init+0x318>)
  41be62:	6a1b      	ldr	r3, [r3, #32]
  41be64:	f013 0f02 	tst.w	r3, #2
  41be68:	f000 8720 	beq.w	41ccac <basic_init+0xef8>
  41be6c:	f04f 0200 	mov.w	r2, #0
  41be70:	2301      	movs	r3, #1
  41be72:	f363 0202 	bfi	r2, r3, #0, #3
  41be76:	2307      	movs	r3, #7
  41be78:	f363 02c7 	bfi	r2, r3, #3, #5
  41be7c:	2308      	movs	r3, #8
  41be7e:	f363 220c 	bfi	r2, r3, #8, #5
  41be82:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41be86:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41be8a:	f248 018a 	movw	r1, #32906	; 0x808a
  41be8e:	4e90      	ldr	r6, [pc, #576]	; (41c0d0 <basic_init+0x31c>)
  41be90:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41be92:	4c8b      	ldr	r4, [pc, #556]	; (41c0c0 <basic_init+0x30c>)
  41be94:	4d8d      	ldr	r5, [pc, #564]	; (41c0cc <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41be96:	89aa      	ldrh	r2, [r5, #12]
  41be98:	f248 018b 	movw	r1, #32907	; 0x808b
  41be9c:	6820      	ldr	r0, [r4, #0]
  41be9e:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41bea0:	696a      	ldr	r2, [r5, #20]
  41bea2:	217e      	movs	r1, #126	; 0x7e
  41bea4:	6820      	ldr	r0, [r4, #0]
  41bea6:	4b8b      	ldr	r3, [pc, #556]	; (41c0d4 <basic_init+0x320>)
  41bea8:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41beaa:	6820      	ldr	r0, [r4, #0]
  41beac:	3004      	adds	r0, #4
  41beae:	4b85      	ldr	r3, [pc, #532]	; (41c0c4 <basic_init+0x310>)
  41beb0:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41beb2:	6824      	ldr	r4, [r4, #0]
  41beb4:	3404      	adds	r4, #4
  41beb6:	2000      	movs	r0, #0
  41beb8:	4b87      	ldr	r3, [pc, #540]	; (41c0d8 <basic_init+0x324>)
  41beba:	4798      	blx	r3
  41bebc:	300a      	adds	r0, #10
  41bebe:	00c0      	lsls	r0, r0, #3
  41bec0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bec4:	f280 86ff 	bge.w	41ccc6 <basic_init+0xf12>
  41bec8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41beca:	2101      	movs	r1, #1
  41becc:	4620      	mov	r0, r4
  41bece:	4b83      	ldr	r3, [pc, #524]	; (41c0dc <basic_init+0x328>)
  41bed0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41bed2:	4c7b      	ldr	r4, [pc, #492]	; (41c0c0 <basic_init+0x30c>)
  41bed4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41bed6:	22ff      	movs	r2, #255	; 0xff
  41bed8:	212c      	movs	r1, #44	; 0x2c
  41beda:	3004      	adds	r0, #4
  41bedc:	4b7a      	ldr	r3, [pc, #488]	; (41c0c8 <basic_init+0x314>)
  41bede:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41bee0:	6820      	ldr	r0, [r4, #0]
  41bee2:	3004      	adds	r0, #4
  41bee4:	4b79      	ldr	r3, [pc, #484]	; (41c0cc <basic_init+0x318>)
  41bee6:	6a1b      	ldr	r3, [r3, #32]
  41bee8:	f013 0f02 	tst.w	r3, #2
  41beec:	f000 86f9 	beq.w	41cce2 <basic_init+0xf2e>
  41bef0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41bef4:	2129      	movs	r1, #41	; 0x29
  41bef6:	4b76      	ldr	r3, [pc, #472]	; (41c0d0 <basic_init+0x31c>)
  41bef8:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41befa:	4b71      	ldr	r3, [pc, #452]	; (41c0c0 <basic_init+0x30c>)
  41befc:	6818      	ldr	r0, [r3, #0]
  41befe:	3004      	adds	r0, #4
  41bf00:	4b72      	ldr	r3, [pc, #456]	; (41c0cc <basic_init+0x318>)
  41bf02:	6a1b      	ldr	r3, [r3, #32]
  41bf04:	f013 0f02 	tst.w	r3, #2
  41bf08:	f000 86fa 	beq.w	41cd00 <basic_init+0xf4c>
  41bf0c:	f04f 0200 	mov.w	r2, #0
  41bf10:	2306      	movs	r3, #6
  41bf12:	f363 0202 	bfi	r2, r3, #0, #3
  41bf16:	231a      	movs	r3, #26
  41bf18:	f363 02c7 	bfi	r2, r3, #3, #5
  41bf1c:	231c      	movs	r3, #28
  41bf1e:	f363 220c 	bfi	r2, r3, #8, #5
  41bf22:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bf26:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41bf2a:	2139      	movs	r1, #57	; 0x39
  41bf2c:	4b68      	ldr	r3, [pc, #416]	; (41c0d0 <basic_init+0x31c>)
  41bf2e:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41bf30:	4b66      	ldr	r3, [pc, #408]	; (41c0cc <basic_init+0x318>)
  41bf32:	6a1b      	ldr	r3, [r3, #32]
  41bf34:	f013 0f20 	tst.w	r3, #32
  41bf38:	f000 86f2 	beq.w	41cd20 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41bf3c:	4c60      	ldr	r4, [pc, #384]	; (41c0c0 <basic_init+0x30c>)
  41bf3e:	6820      	ldr	r0, [r4, #0]
  41bf40:	4b62      	ldr	r3, [pc, #392]	; (41c0cc <basic_init+0x318>)
  41bf42:	89da      	ldrh	r2, [r3, #14]
  41bf44:	f240 4139 	movw	r1, #1081	; 0x439
  41bf48:	3004      	adds	r0, #4
  41bf4a:	4b61      	ldr	r3, [pc, #388]	; (41c0d0 <basic_init+0x31c>)
  41bf4c:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41bf4e:	6824      	ldr	r4, [r4, #0]
  41bf50:	3404      	adds	r4, #4
  41bf52:	2000      	movs	r0, #0
  41bf54:	4b60      	ldr	r3, [pc, #384]	; (41c0d8 <basic_init+0x324>)
  41bf56:	4798      	blx	r3
  41bf58:	3028      	adds	r0, #40	; 0x28
  41bf5a:	0040      	lsls	r0, r0, #1
  41bf5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf60:	f280 86e9 	bge.w	41cd36 <basic_init+0xf82>
  41bf64:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41bf66:	2130      	movs	r1, #48	; 0x30
  41bf68:	4620      	mov	r0, r4
  41bf6a:	4d5c      	ldr	r5, [pc, #368]	; (41c0dc <basic_init+0x328>)
  41bf6c:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41bf6e:	4c54      	ldr	r4, [pc, #336]	; (41c0c0 <basic_init+0x30c>)
  41bf70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41bf72:	2201      	movs	r2, #1
  41bf74:	2133      	movs	r1, #51	; 0x33
  41bf76:	3004      	adds	r0, #4
  41bf78:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41bf7a:	6820      	ldr	r0, [r4, #0]
  41bf7c:	3004      	adds	r0, #4
  41bf7e:	4b53      	ldr	r3, [pc, #332]	; (41c0cc <basic_init+0x318>)
  41bf80:	6a1b      	ldr	r3, [r3, #32]
  41bf82:	f013 0f02 	tst.w	r3, #2
  41bf86:	f000 86e4 	beq.w	41cd52 <basic_init+0xf9e>
  41bf8a:	f04f 0200 	mov.w	r2, #0
  41bf8e:	2301      	movs	r3, #1
  41bf90:	f363 0202 	bfi	r2, r3, #0, #3
  41bf94:	2307      	movs	r3, #7
  41bf96:	f363 02c7 	bfi	r2, r3, #3, #5
  41bf9a:	2308      	movs	r3, #8
  41bf9c:	f363 220c 	bfi	r2, r3, #8, #5
  41bfa0:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bfa4:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bfa8:	f248 0189 	movw	r1, #32905	; 0x8089
  41bfac:	4b48      	ldr	r3, [pc, #288]	; (41c0d0 <basic_init+0x31c>)
  41bfae:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41bfb0:	4d43      	ldr	r5, [pc, #268]	; (41c0c0 <basic_init+0x30c>)
  41bfb2:	6828      	ldr	r0, [r5, #0]
  41bfb4:	4c45      	ldr	r4, [pc, #276]	; (41c0cc <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41bfb6:	6962      	ldr	r2, [r4, #20]
  41bfb8:	217e      	movs	r1, #126	; 0x7e
  41bfba:	3004      	adds	r0, #4
  41bfbc:	4b45      	ldr	r3, [pc, #276]	; (41c0d4 <basic_init+0x320>)
  41bfbe:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41bfc0:	6828      	ldr	r0, [r5, #0]
  41bfc2:	3004      	adds	r0, #4
  41bfc4:	6a23      	ldr	r3, [r4, #32]
  41bfc6:	f013 0f02 	tst.w	r3, #2
  41bfca:	f000 86c6 	beq.w	41cd5a <basic_init+0xfa6>
  41bfce:	f04f 0200 	mov.w	r2, #0
  41bfd2:	2301      	movs	r3, #1
  41bfd4:	f363 0202 	bfi	r2, r3, #0, #3
  41bfd8:	2307      	movs	r3, #7
  41bfda:	f363 02c7 	bfi	r2, r3, #3, #5
  41bfde:	2308      	movs	r3, #8
  41bfe0:	f363 220c 	bfi	r2, r3, #8, #5
  41bfe4:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41bfe8:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41bfec:	2179      	movs	r1, #121	; 0x79
  41bfee:	4b38      	ldr	r3, [pc, #224]	; (41c0d0 <basic_init+0x31c>)
  41bff0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41bff2:	4b33      	ldr	r3, [pc, #204]	; (41c0c0 <basic_init+0x30c>)
  41bff4:	6818      	ldr	r0, [r3, #0]
  41bff6:	3004      	adds	r0, #4
  41bff8:	4b34      	ldr	r3, [pc, #208]	; (41c0cc <basic_init+0x318>)
  41bffa:	6a1b      	ldr	r3, [r3, #32]
  41bffc:	f013 0f02 	tst.w	r3, #2
  41c000:	f000 86af 	beq.w	41cd62 <basic_init+0xfae>
  41c004:	f04f 0200 	mov.w	r2, #0
  41c008:	2301      	movs	r3, #1
  41c00a:	f363 0202 	bfi	r2, r3, #0, #3
  41c00e:	2307      	movs	r3, #7
  41c010:	f363 02c7 	bfi	r2, r3, #3, #5
  41c014:	2308      	movs	r3, #8
  41c016:	f363 220c 	bfi	r2, r3, #8, #5
  41c01a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c01e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c022:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c026:	4b2a      	ldr	r3, [pc, #168]	; (41c0d0 <basic_init+0x31c>)
  41c028:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41c02a:	4b25      	ldr	r3, [pc, #148]	; (41c0c0 <basic_init+0x30c>)
  41c02c:	6818      	ldr	r0, [r3, #0]
  41c02e:	3004      	adds	r0, #4
  41c030:	4b26      	ldr	r3, [pc, #152]	; (41c0cc <basic_init+0x318>)
  41c032:	6a1b      	ldr	r3, [r3, #32]
  41c034:	f013 0f02 	tst.w	r3, #2
  41c038:	f000 8697 	beq.w	41cd6a <basic_init+0xfb6>
  41c03c:	f04f 0200 	mov.w	r2, #0
  41c040:	2301      	movs	r3, #1
  41c042:	f363 0202 	bfi	r2, r3, #0, #3
  41c046:	2307      	movs	r3, #7
  41c048:	f363 02c7 	bfi	r2, r3, #3, #5
  41c04c:	2308      	movs	r3, #8
  41c04e:	f363 220c 	bfi	r2, r3, #8, #5
  41c052:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c056:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41c05a:	2199      	movs	r1, #153	; 0x99
  41c05c:	4b1c      	ldr	r3, [pc, #112]	; (41c0d0 <basic_init+0x31c>)
  41c05e:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41c060:	4c17      	ldr	r4, [pc, #92]	; (41c0c0 <basic_init+0x30c>)
  41c062:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41c064:	2201      	movs	r2, #1
  41c066:	2190      	movs	r1, #144	; 0x90
  41c068:	3004      	adds	r0, #4
  41c06a:	4b1c      	ldr	r3, [pc, #112]	; (41c0dc <basic_init+0x328>)
  41c06c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c06e:	6825      	ldr	r5, [r4, #0]
  41c070:	3504      	adds	r5, #4
  41c072:	2000      	movs	r0, #0
  41c074:	4b1a      	ldr	r3, [pc, #104]	; (41c0e0 <basic_init+0x32c>)
  41c076:	4798      	blx	r3
  41c078:	2801      	cmp	r0, #1
  41c07a:	f240 867a 	bls.w	41cd72 <basic_init+0xfbe>
  41c07e:	2000      	movs	r0, #0
  41c080:	4b15      	ldr	r3, [pc, #84]	; (41c0d8 <basic_init+0x324>)
  41c082:	4798      	blx	r3
  41c084:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c088:	0040      	lsls	r0, r0, #1
  41c08a:	3050      	adds	r0, #80	; 0x50
  41c08c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c090:	f280 868a 	bge.w	41cda8 <basic_init+0xff4>
  41c094:	2401      	movs	r4, #1
  41c096:	2000      	movs	r0, #0
  41c098:	4b0f      	ldr	r3, [pc, #60]	; (41c0d8 <basic_init+0x324>)
  41c09a:	4798      	blx	r3
  41c09c:	3028      	adds	r0, #40	; 0x28
  41c09e:	0040      	lsls	r0, r0, #1
  41c0a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c0a4:	f280 86a2 	bge.w	41cdec <basic_init+0x1038>
  41c0a8:	2201      	movs	r2, #1
  41c0aa:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41c0ac:	b212      	sxth	r2, r2
  41c0ae:	2112      	movs	r1, #18
  41c0b0:	4628      	mov	r0, r5
  41c0b2:	4b0a      	ldr	r3, [pc, #40]	; (41c0dc <basic_init+0x328>)
  41c0b4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c0b6:	4b02      	ldr	r3, [pc, #8]	; (41c0c0 <basic_init+0x30c>)
  41c0b8:	681d      	ldr	r5, [r3, #0]
  41c0ba:	3504      	adds	r5, #4
  41c0bc:	e012      	b.n	41c0e4 <basic_init+0x330>
  41c0be:	bf00      	nop
  41c0c0:	204147a8 	.word	0x204147a8
  41c0c4:	0041851d 	.word	0x0041851d
  41c0c8:	0040a269 	.word	0x0040a269
  41c0cc:	204147ac 	.word	0x204147ac
  41c0d0:	0040a0d9 	.word	0x0040a0d9
  41c0d4:	0040a3f9 	.word	0x0040a3f9
  41c0d8:	00414955 	.word	0x00414955
  41c0dc:	00409f49 	.word	0x00409f49
  41c0e0:	00414975 	.word	0x00414975
  41c0e4:	2000      	movs	r0, #0
  41c0e6:	4bc2      	ldr	r3, [pc, #776]	; (41c3f0 <basic_init+0x63c>)
  41c0e8:	4798      	blx	r3
  41c0ea:	2801      	cmp	r0, #1
  41c0ec:	f240 868c 	bls.w	41ce08 <basic_init+0x1054>
  41c0f0:	2000      	movs	r0, #0
  41c0f2:	4bc0      	ldr	r3, [pc, #768]	; (41c3f4 <basic_init+0x640>)
  41c0f4:	4798      	blx	r3
  41c0f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0fa:	0040      	lsls	r0, r0, #1
  41c0fc:	3050      	adds	r0, #80	; 0x50
  41c0fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c102:	f280 869c 	bge.w	41ce3e <basic_init+0x108a>
  41c106:	2401      	movs	r4, #1
  41c108:	2000      	movs	r0, #0
  41c10a:	4bba      	ldr	r3, [pc, #744]	; (41c3f4 <basic_init+0x640>)
  41c10c:	4798      	blx	r3
  41c10e:	3028      	adds	r0, #40	; 0x28
  41c110:	0040      	lsls	r0, r0, #1
  41c112:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c116:	f280 86a2 	bge.w	41ce5e <basic_init+0x10aa>
  41c11a:	2201      	movs	r2, #1
  41c11c:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41c11e:	b212      	sxth	r2, r2
  41c120:	2113      	movs	r1, #19
  41c122:	4628      	mov	r0, r5
  41c124:	4bb4      	ldr	r3, [pc, #720]	; (41c3f8 <basic_init+0x644>)
  41c126:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c128:	4bb4      	ldr	r3, [pc, #720]	; (41c3fc <basic_init+0x648>)
  41c12a:	681d      	ldr	r5, [r3, #0]
  41c12c:	3504      	adds	r5, #4
  41c12e:	2000      	movs	r0, #0
  41c130:	4baf      	ldr	r3, [pc, #700]	; (41c3f0 <basic_init+0x63c>)
  41c132:	4798      	blx	r3
  41c134:	2801      	cmp	r0, #1
  41c136:	f240 86a0 	bls.w	41ce7a <basic_init+0x10c6>
  41c13a:	2000      	movs	r0, #0
  41c13c:	4bad      	ldr	r3, [pc, #692]	; (41c3f4 <basic_init+0x640>)
  41c13e:	4798      	blx	r3
  41c140:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c144:	0040      	lsls	r0, r0, #1
  41c146:	3050      	adds	r0, #80	; 0x50
  41c148:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c14c:	f280 86b0 	bge.w	41ceb0 <basic_init+0x10fc>
  41c150:	2401      	movs	r4, #1
  41c152:	2000      	movs	r0, #0
  41c154:	4ba7      	ldr	r3, [pc, #668]	; (41c3f4 <basic_init+0x640>)
  41c156:	4798      	blx	r3
  41c158:	3028      	adds	r0, #40	; 0x28
  41c15a:	0040      	lsls	r0, r0, #1
  41c15c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c160:	f280 86b6 	bge.w	41ced0 <basic_init+0x111c>
  41c164:	2201      	movs	r2, #1
  41c166:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41c168:	b212      	sxth	r2, r2
  41c16a:	2110      	movs	r1, #16
  41c16c:	4628      	mov	r0, r5
  41c16e:	4ba2      	ldr	r3, [pc, #648]	; (41c3f8 <basic_init+0x644>)
  41c170:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c172:	4ba2      	ldr	r3, [pc, #648]	; (41c3fc <basic_init+0x648>)
  41c174:	681d      	ldr	r5, [r3, #0]
  41c176:	3504      	adds	r5, #4
  41c178:	2000      	movs	r0, #0
  41c17a:	4b9d      	ldr	r3, [pc, #628]	; (41c3f0 <basic_init+0x63c>)
  41c17c:	4798      	blx	r3
  41c17e:	2801      	cmp	r0, #1
  41c180:	f240 86b4 	bls.w	41ceec <basic_init+0x1138>
  41c184:	2000      	movs	r0, #0
  41c186:	4b9b      	ldr	r3, [pc, #620]	; (41c3f4 <basic_init+0x640>)
  41c188:	4798      	blx	r3
  41c18a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c18e:	0040      	lsls	r0, r0, #1
  41c190:	3050      	adds	r0, #80	; 0x50
  41c192:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c196:	f280 86c4 	bge.w	41cf22 <basic_init+0x116e>
  41c19a:	2401      	movs	r4, #1
  41c19c:	2000      	movs	r0, #0
  41c19e:	4b95      	ldr	r3, [pc, #596]	; (41c3f4 <basic_init+0x640>)
  41c1a0:	4798      	blx	r3
  41c1a2:	3028      	adds	r0, #40	; 0x28
  41c1a4:	0040      	lsls	r0, r0, #1
  41c1a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c1aa:	f280 86ca 	bge.w	41cf42 <basic_init+0x118e>
  41c1ae:	2201      	movs	r2, #1
  41c1b0:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41c1b2:	b212      	sxth	r2, r2
  41c1b4:	2111      	movs	r1, #17
  41c1b6:	4628      	mov	r0, r5
  41c1b8:	4b8f      	ldr	r3, [pc, #572]	; (41c3f8 <basic_init+0x644>)
  41c1ba:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41c1bc:	4b8f      	ldr	r3, [pc, #572]	; (41c3fc <basic_init+0x648>)
  41c1be:	681c      	ldr	r4, [r3, #0]
  41c1c0:	3404      	adds	r4, #4
  41c1c2:	2000      	movs	r0, #0
  41c1c4:	4b8a      	ldr	r3, [pc, #552]	; (41c3f0 <basic_init+0x63c>)
  41c1c6:	4798      	blx	r3
  41c1c8:	2801      	cmp	r0, #1
  41c1ca:	f240 86c8 	bls.w	41cf5e <basic_init+0x11aa>
  41c1ce:	2000      	movs	r0, #0
  41c1d0:	4b88      	ldr	r3, [pc, #544]	; (41c3f4 <basic_init+0x640>)
  41c1d2:	4798      	blx	r3
  41c1d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c1d8:	0040      	lsls	r0, r0, #1
  41c1da:	3050      	adds	r0, #80	; 0x50
  41c1dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c1e0:	f280 86d8 	bge.w	41cf94 <basic_init+0x11e0>
  41c1e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41c1e6:	2114      	movs	r1, #20
  41c1e8:	4620      	mov	r0, r4
  41c1ea:	4d83      	ldr	r5, [pc, #524]	; (41c3f8 <basic_init+0x644>)
  41c1ec:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41c1ee:	4c83      	ldr	r4, [pc, #524]	; (41c3fc <basic_init+0x648>)
  41c1f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41c1f2:	2200      	movs	r2, #0
  41c1f4:	21b0      	movs	r1, #176	; 0xb0
  41c1f6:	3004      	adds	r0, #4
  41c1f8:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41c1fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41c1fc:	2239      	movs	r2, #57	; 0x39
  41c1fe:	21b7      	movs	r1, #183	; 0xb7
  41c200:	3004      	adds	r0, #4
  41c202:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41c204:	6820      	ldr	r0, [r4, #0]
  41c206:	300c      	adds	r0, #12
  41c208:	4b7d      	ldr	r3, [pc, #500]	; (41c400 <basic_init+0x64c>)
  41c20a:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41c20c:	6820      	ldr	r0, [r4, #0]
  41c20e:	1d01      	adds	r1, r0, #4
  41c210:	300c      	adds	r0, #12
  41c212:	4b7c      	ldr	r3, [pc, #496]	; (41c404 <basic_init+0x650>)
  41c214:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41c216:	6820      	ldr	r0, [r4, #0]
  41c218:	300c      	adds	r0, #12
  41c21a:	4b7b      	ldr	r3, [pc, #492]	; (41c408 <basic_init+0x654>)
  41c21c:	6a1b      	ldr	r3, [r3, #32]
  41c21e:	f013 0f02 	tst.w	r3, #2
  41c222:	f000 86c7 	beq.w	41cfb4 <basic_init+0x1200>
  41c226:	f04f 0200 	mov.w	r2, #0
  41c22a:	2306      	movs	r3, #6
  41c22c:	f363 0202 	bfi	r2, r3, #0, #3
  41c230:	231a      	movs	r3, #26
  41c232:	f363 02c7 	bfi	r2, r3, #3, #5
  41c236:	231b      	movs	r3, #27
  41c238:	f363 220c 	bfi	r2, r3, #8, #5
  41c23c:	2305      	movs	r3, #5
  41c23e:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c242:	2129      	movs	r1, #41	; 0x29
  41c244:	4b71      	ldr	r3, [pc, #452]	; (41c40c <basic_init+0x658>)
  41c246:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41c248:	4b6c      	ldr	r3, [pc, #432]	; (41c3fc <basic_init+0x648>)
  41c24a:	6818      	ldr	r0, [r3, #0]
  41c24c:	300c      	adds	r0, #12
  41c24e:	4b6e      	ldr	r3, [pc, #440]	; (41c408 <basic_init+0x654>)
  41c250:	6a1b      	ldr	r3, [r3, #32]
  41c252:	f013 0f02 	tst.w	r3, #2
  41c256:	f000 86bc 	beq.w	41cfd2 <basic_init+0x121e>
  41c25a:	f04f 0207 	mov.w	r2, #7
  41c25e:	231b      	movs	r3, #27
  41c260:	f363 02c7 	bfi	r2, r3, #3, #5
  41c264:	231d      	movs	r3, #29
  41c266:	f363 220c 	bfi	r2, r3, #8, #5
  41c26a:	2301      	movs	r3, #1
  41c26c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c270:	2139      	movs	r1, #57	; 0x39
  41c272:	4b66      	ldr	r3, [pc, #408]	; (41c40c <basic_init+0x658>)
  41c274:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c276:	4b61      	ldr	r3, [pc, #388]	; (41c3fc <basic_init+0x648>)
  41c278:	6818      	ldr	r0, [r3, #0]
  41c27a:	300c      	adds	r0, #12
  41c27c:	4b62      	ldr	r3, [pc, #392]	; (41c408 <basic_init+0x654>)
  41c27e:	6a1b      	ldr	r3, [r3, #32]
  41c280:	f013 0f02 	tst.w	r3, #2
  41c284:	f000 86b3 	beq.w	41cfee <basic_init+0x123a>
  41c288:	f04f 0200 	mov.w	r2, #0
  41c28c:	2302      	movs	r3, #2
  41c28e:	f363 0202 	bfi	r2, r3, #0, #3
  41c292:	2306      	movs	r3, #6
  41c294:	f363 02c7 	bfi	r2, r3, #3, #5
  41c298:	2309      	movs	r3, #9
  41c29a:	f363 220c 	bfi	r2, r3, #8, #5
  41c29e:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c2a2:	f248 0189 	movw	r1, #32905	; 0x8089
  41c2a6:	4b59      	ldr	r3, [pc, #356]	; (41c40c <basic_init+0x658>)
  41c2a8:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c2aa:	4b54      	ldr	r3, [pc, #336]	; (41c3fc <basic_init+0x648>)
  41c2ac:	6818      	ldr	r0, [r3, #0]
  41c2ae:	300c      	adds	r0, #12
  41c2b0:	4b55      	ldr	r3, [pc, #340]	; (41c408 <basic_init+0x654>)
  41c2b2:	6a1b      	ldr	r3, [r3, #32]
  41c2b4:	f013 0f02 	tst.w	r3, #2
  41c2b8:	f000 86a9 	beq.w	41d00e <basic_init+0x125a>
  41c2bc:	f04f 0200 	mov.w	r2, #0
  41c2c0:	2302      	movs	r3, #2
  41c2c2:	f363 0202 	bfi	r2, r3, #0, #3
  41c2c6:	2306      	movs	r3, #6
  41c2c8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2cc:	2309      	movs	r3, #9
  41c2ce:	f363 220c 	bfi	r2, r3, #8, #5
  41c2d2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c2d6:	2179      	movs	r1, #121	; 0x79
  41c2d8:	4b4c      	ldr	r3, [pc, #304]	; (41c40c <basic_init+0x658>)
  41c2da:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c2dc:	4b47      	ldr	r3, [pc, #284]	; (41c3fc <basic_init+0x648>)
  41c2de:	6818      	ldr	r0, [r3, #0]
  41c2e0:	300c      	adds	r0, #12
  41c2e2:	4b49      	ldr	r3, [pc, #292]	; (41c408 <basic_init+0x654>)
  41c2e4:	6a1b      	ldr	r3, [r3, #32]
  41c2e6:	f013 0f02 	tst.w	r3, #2
  41c2ea:	f000 86a0 	beq.w	41d02e <basic_init+0x127a>
  41c2ee:	f04f 0200 	mov.w	r2, #0
  41c2f2:	2302      	movs	r3, #2
  41c2f4:	f363 0202 	bfi	r2, r3, #0, #3
  41c2f8:	2306      	movs	r3, #6
  41c2fa:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2fe:	2309      	movs	r3, #9
  41c300:	f363 220c 	bfi	r2, r3, #8, #5
  41c304:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c308:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c30c:	4b3f      	ldr	r3, [pc, #252]	; (41c40c <basic_init+0x658>)
  41c30e:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41c310:	4b3a      	ldr	r3, [pc, #232]	; (41c3fc <basic_init+0x648>)
  41c312:	6818      	ldr	r0, [r3, #0]
  41c314:	300c      	adds	r0, #12
  41c316:	4b3c      	ldr	r3, [pc, #240]	; (41c408 <basic_init+0x654>)
  41c318:	6a1b      	ldr	r3, [r3, #32]
  41c31a:	f013 0f02 	tst.w	r3, #2
  41c31e:	f000 8696 	beq.w	41d04e <basic_init+0x129a>
  41c322:	f04f 0200 	mov.w	r2, #0
  41c326:	2302      	movs	r3, #2
  41c328:	f363 0202 	bfi	r2, r3, #0, #3
  41c32c:	2306      	movs	r3, #6
  41c32e:	f363 02c7 	bfi	r2, r3, #3, #5
  41c332:	2309      	movs	r3, #9
  41c334:	f363 220c 	bfi	r2, r3, #8, #5
  41c338:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41c33c:	2199      	movs	r1, #153	; 0x99
  41c33e:	4b33      	ldr	r3, [pc, #204]	; (41c40c <basic_init+0x658>)
  41c340:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41c342:	4c2e      	ldr	r4, [pc, #184]	; (41c3fc <basic_init+0x648>)
  41c344:	6820      	ldr	r0, [r4, #0]
  41c346:	3008      	adds	r0, #8
  41c348:	4b2d      	ldr	r3, [pc, #180]	; (41c400 <basic_init+0x64c>)
  41c34a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41c34c:	6820      	ldr	r0, [r4, #0]
  41c34e:	3008      	adds	r0, #8
  41c350:	4b2d      	ldr	r3, [pc, #180]	; (41c408 <basic_init+0x654>)
  41c352:	6a1b      	ldr	r3, [r3, #32]
  41c354:	f013 0f02 	tst.w	r3, #2
  41c358:	f000 8689 	beq.w	41d06e <basic_init+0x12ba>
  41c35c:	f04f 0207 	mov.w	r2, #7
  41c360:	231d      	movs	r3, #29
  41c362:	f363 02c7 	bfi	r2, r3, #3, #5
  41c366:	f363 220c 	bfi	r2, r3, #8, #5
  41c36a:	2303      	movs	r3, #3
  41c36c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c370:	f241 0129 	movw	r1, #4137	; 0x1029
  41c374:	4d25      	ldr	r5, [pc, #148]	; (41c40c <basic_init+0x658>)
  41c376:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41c378:	4c20      	ldr	r4, [pc, #128]	; (41c3fc <basic_init+0x648>)
  41c37a:	6820      	ldr	r0, [r4, #0]
  41c37c:	4f22      	ldr	r7, [pc, #136]	; (41c408 <basic_init+0x654>)
  41c37e:	89ba      	ldrh	r2, [r7, #12]
  41c380:	f240 1129 	movw	r1, #297	; 0x129
  41c384:	3008      	adds	r0, #8
  41c386:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41c388:	6826      	ldr	r6, [r4, #0]
  41c38a:	3608      	adds	r6, #8
  41c38c:	2133      	movs	r1, #51	; 0x33
  41c38e:	89b8      	ldrh	r0, [r7, #12]
  41c390:	4b1f      	ldr	r3, [pc, #124]	; (41c410 <basic_init+0x65c>)
  41c392:	4798      	blx	r3
  41c394:	4602      	mov	r2, r0
  41c396:	f241 1129 	movw	r1, #4393	; 0x1129
  41c39a:	4630      	mov	r0, r6
  41c39c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41c39e:	6820      	ldr	r0, [r4, #0]
  41c3a0:	3008      	adds	r0, #8
  41c3a2:	6a3b      	ldr	r3, [r7, #32]
  41c3a4:	f013 0f02 	tst.w	r3, #2
  41c3a8:	f000 8671 	beq.w	41d08e <basic_init+0x12da>
  41c3ac:	f04f 32ff 	mov.w	r2, #4294967295
  41c3b0:	f242 0129 	movw	r1, #8233	; 0x2029
  41c3b4:	4f15      	ldr	r7, [pc, #84]	; (41c40c <basic_init+0x658>)
  41c3b6:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41c3b8:	4c10      	ldr	r4, [pc, #64]	; (41c3fc <basic_init+0x648>)
  41c3ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c3bc:	2200      	movs	r2, #0
  41c3be:	f44f 7198 	mov.w	r1, #304	; 0x130
  41c3c2:	3008      	adds	r0, #8
  41c3c4:	4b0c      	ldr	r3, [pc, #48]	; (41c3f8 <basic_init+0x644>)
  41c3c6:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41c3c8:	6825      	ldr	r5, [r4, #0]
  41c3ca:	3508      	adds	r5, #8
  41c3cc:	4e0e      	ldr	r6, [pc, #56]	; (41c408 <basic_init+0x654>)
  41c3ce:	2133      	movs	r1, #51	; 0x33
  41c3d0:	89b0      	ldrh	r0, [r6, #12]
  41c3d2:	4b0f      	ldr	r3, [pc, #60]	; (41c410 <basic_init+0x65c>)
  41c3d4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c3d6:	4602      	mov	r2, r0
  41c3d8:	f241 2139 	movw	r1, #4665	; 0x1239
  41c3dc:	4628      	mov	r0, r5
  41c3de:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41c3e0:	6820      	ldr	r0, [r4, #0]
  41c3e2:	3008      	adds	r0, #8
  41c3e4:	6a33      	ldr	r3, [r6, #32]
  41c3e6:	f013 0f02 	tst.w	r3, #2
  41c3ea:	f000 865f 	beq.w	41d0ac <basic_init+0x12f8>
  41c3ee:	e011      	b.n	41c414 <basic_init+0x660>
  41c3f0:	00414975 	.word	0x00414975
  41c3f4:	00414955 	.word	0x00414955
  41c3f8:	00409f49 	.word	0x00409f49
  41c3fc:	204147a8 	.word	0x204147a8
  41c400:	0041851d 	.word	0x0041851d
  41c404:	00409de5 	.word	0x00409de5
  41c408:	204147ac 	.word	0x204147ac
  41c40c:	0040a0d9 	.word	0x0040a0d9
  41c410:	00415a11 	.word	0x00415a11
  41c414:	f04f 0200 	mov.w	r2, #0
  41c418:	2306      	movs	r3, #6
  41c41a:	f363 0202 	bfi	r2, r3, #0, #3
  41c41e:	2319      	movs	r3, #25
  41c420:	f363 02c7 	bfi	r2, r3, #3, #5
  41c424:	f363 220c 	bfi	r2, r3, #8, #5
  41c428:	2303      	movs	r3, #3
  41c42a:	f363 324f 	bfi	r2, r3, #13, #3
  41c42e:	f241 0139 	movw	r1, #4153	; 0x1039
  41c432:	4bc9      	ldr	r3, [pc, #804]	; (41c758 <basic_init+0x9a4>)
  41c434:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41c436:	4bc9      	ldr	r3, [pc, #804]	; (41c75c <basic_init+0x9a8>)
  41c438:	6818      	ldr	r0, [r3, #0]
  41c43a:	3008      	adds	r0, #8
  41c43c:	4bc8      	ldr	r3, [pc, #800]	; (41c760 <basic_init+0x9ac>)
  41c43e:	6a1b      	ldr	r3, [r3, #32]
  41c440:	f013 0f02 	tst.w	r3, #2
  41c444:	f000 8642 	beq.w	41d0cc <basic_init+0x1318>
  41c448:	f04f 0200 	mov.w	r2, #0
  41c44c:	2301      	movs	r3, #1
  41c44e:	f363 0202 	bfi	r2, r3, #0, #3
  41c452:	2307      	movs	r3, #7
  41c454:	f363 02c7 	bfi	r2, r3, #3, #5
  41c458:	2308      	movs	r3, #8
  41c45a:	f363 220c 	bfi	r2, r3, #8, #5
  41c45e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c462:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c466:	f240 1139 	movw	r1, #313	; 0x139
  41c46a:	4bbb      	ldr	r3, [pc, #748]	; (41c758 <basic_init+0x9a4>)
  41c46c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41c46e:	4bbb      	ldr	r3, [pc, #748]	; (41c75c <basic_init+0x9a8>)
  41c470:	6818      	ldr	r0, [r3, #0]
  41c472:	3008      	adds	r0, #8
  41c474:	4bba      	ldr	r3, [pc, #744]	; (41c760 <basic_init+0x9ac>)
  41c476:	6a1b      	ldr	r3, [r3, #32]
  41c478:	f013 0f02 	tst.w	r3, #2
  41c47c:	f000 8636 	beq.w	41d0ec <basic_init+0x1338>
  41c480:	f04f 0200 	mov.w	r2, #0
  41c484:	2301      	movs	r3, #1
  41c486:	f363 0202 	bfi	r2, r3, #0, #3
  41c48a:	2307      	movs	r3, #7
  41c48c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c490:	2308      	movs	r3, #8
  41c492:	f363 220c 	bfi	r2, r3, #8, #5
  41c496:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c49a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c49e:	f241 1139 	movw	r1, #4409	; 0x1139
  41c4a2:	4bad      	ldr	r3, [pc, #692]	; (41c758 <basic_init+0x9a4>)
  41c4a4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41c4a6:	4bad      	ldr	r3, [pc, #692]	; (41c75c <basic_init+0x9a8>)
  41c4a8:	6818      	ldr	r0, [r3, #0]
  41c4aa:	3008      	adds	r0, #8
  41c4ac:	4bac      	ldr	r3, [pc, #688]	; (41c760 <basic_init+0x9ac>)
  41c4ae:	6a1b      	ldr	r3, [r3, #32]
  41c4b0:	f013 0f02 	tst.w	r3, #2
  41c4b4:	f000 862a 	beq.w	41d10c <basic_init+0x1358>
  41c4b8:	f04f 0200 	mov.w	r2, #0
  41c4bc:	2306      	movs	r3, #6
  41c4be:	f363 0202 	bfi	r2, r3, #0, #3
  41c4c2:	231a      	movs	r3, #26
  41c4c4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c4c8:	231c      	movs	r3, #28
  41c4ca:	f363 220c 	bfi	r2, r3, #8, #5
  41c4ce:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c4d2:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41c4d6:	f242 0139 	movw	r1, #8249	; 0x2039
  41c4da:	4b9f      	ldr	r3, [pc, #636]	; (41c758 <basic_init+0x9a4>)
  41c4dc:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41c4de:	4b9f      	ldr	r3, [pc, #636]	; (41c75c <basic_init+0x9a8>)
  41c4e0:	6818      	ldr	r0, [r3, #0]
  41c4e2:	3008      	adds	r0, #8
  41c4e4:	4b9e      	ldr	r3, [pc, #632]	; (41c760 <basic_init+0x9ac>)
  41c4e6:	6a1b      	ldr	r3, [r3, #32]
  41c4e8:	f013 0f02 	tst.w	r3, #2
  41c4ec:	f000 861e 	beq.w	41d12c <basic_init+0x1378>
  41c4f0:	f04f 0200 	mov.w	r2, #0
  41c4f4:	2301      	movs	r3, #1
  41c4f6:	f363 0202 	bfi	r2, r3, #0, #3
  41c4fa:	2307      	movs	r3, #7
  41c4fc:	f363 02c7 	bfi	r2, r3, #3, #5
  41c500:	2308      	movs	r3, #8
  41c502:	f363 220c 	bfi	r2, r3, #8, #5
  41c506:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c50a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c50e:	f249 0189 	movw	r1, #37001	; 0x9089
  41c512:	4b91      	ldr	r3, [pc, #580]	; (41c758 <basic_init+0x9a4>)
  41c514:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41c516:	4b91      	ldr	r3, [pc, #580]	; (41c75c <basic_init+0x9a8>)
  41c518:	6818      	ldr	r0, [r3, #0]
  41c51a:	3008      	adds	r0, #8
  41c51c:	4b90      	ldr	r3, [pc, #576]	; (41c760 <basic_init+0x9ac>)
  41c51e:	6a1b      	ldr	r3, [r3, #32]
  41c520:	f013 0f02 	tst.w	r3, #2
  41c524:	f000 8606 	beq.w	41d134 <basic_init+0x1380>
  41c528:	f04f 32ff 	mov.w	r2, #4294967295
  41c52c:	f248 1189 	movw	r1, #33161	; 0x8189
  41c530:	4b89      	ldr	r3, [pc, #548]	; (41c758 <basic_init+0x9a4>)
  41c532:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41c534:	4b89      	ldr	r3, [pc, #548]	; (41c75c <basic_init+0x9a8>)
  41c536:	6818      	ldr	r0, [r3, #0]
  41c538:	3008      	adds	r0, #8
  41c53a:	4b89      	ldr	r3, [pc, #548]	; (41c760 <basic_init+0x9ac>)
  41c53c:	6a1b      	ldr	r3, [r3, #32]
  41c53e:	f013 0f02 	tst.w	r3, #2
  41c542:	f000 85fb 	beq.w	41d13c <basic_init+0x1388>
  41c546:	f04f 32ff 	mov.w	r2, #4294967295
  41c54a:	f249 1189 	movw	r1, #37257	; 0x9189
  41c54e:	4b82      	ldr	r3, [pc, #520]	; (41c758 <basic_init+0x9a4>)
  41c550:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41c552:	4b82      	ldr	r3, [pc, #520]	; (41c75c <basic_init+0x9a8>)
  41c554:	6818      	ldr	r0, [r3, #0]
  41c556:	3008      	adds	r0, #8
  41c558:	4b81      	ldr	r3, [pc, #516]	; (41c760 <basic_init+0x9ac>)
  41c55a:	6a1b      	ldr	r3, [r3, #32]
  41c55c:	f013 0f02 	tst.w	r3, #2
  41c560:	f000 85f0 	beq.w	41d144 <basic_init+0x1390>
  41c564:	f04f 0200 	mov.w	r2, #0
  41c568:	2305      	movs	r3, #5
  41c56a:	f363 0202 	bfi	r2, r3, #0, #3
  41c56e:	2315      	movs	r3, #21
  41c570:	f363 02c7 	bfi	r2, r3, #3, #5
  41c574:	f363 220c 	bfi	r2, r3, #8, #5
  41c578:	2302      	movs	r3, #2
  41c57a:	f363 324f 	bfi	r2, r3, #13, #3
  41c57e:	f24a 0189 	movw	r1, #41097	; 0xa089
  41c582:	4b75      	ldr	r3, [pc, #468]	; (41c758 <basic_init+0x9a4>)
  41c584:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41c586:	4b75      	ldr	r3, [pc, #468]	; (41c75c <basic_init+0x9a8>)
  41c588:	6818      	ldr	r0, [r3, #0]
  41c58a:	3008      	adds	r0, #8
  41c58c:	4b74      	ldr	r3, [pc, #464]	; (41c760 <basic_init+0x9ac>)
  41c58e:	6a1b      	ldr	r3, [r3, #32]
  41c590:	f013 0f02 	tst.w	r3, #2
  41c594:	f000 85e5 	beq.w	41d162 <basic_init+0x13ae>
  41c598:	f04f 0200 	mov.w	r2, #0
  41c59c:	2301      	movs	r3, #1
  41c59e:	f363 0202 	bfi	r2, r3, #0, #3
  41c5a2:	2307      	movs	r3, #7
  41c5a4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c5a8:	2308      	movs	r3, #8
  41c5aa:	f363 220c 	bfi	r2, r3, #8, #5
  41c5ae:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41c5b2:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c5b6:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41c5ba:	4b67      	ldr	r3, [pc, #412]	; (41c758 <basic_init+0x9a4>)
  41c5bc:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41c5be:	4b67      	ldr	r3, [pc, #412]	; (41c75c <basic_init+0x9a8>)
  41c5c0:	6818      	ldr	r0, [r3, #0]
  41c5c2:	3008      	adds	r0, #8
  41c5c4:	4b66      	ldr	r3, [pc, #408]	; (41c760 <basic_init+0x9ac>)
  41c5c6:	6a1b      	ldr	r3, [r3, #32]
  41c5c8:	f013 0f02 	tst.w	r3, #2
  41c5cc:	f000 85d2 	beq.w	41d174 <basic_init+0x13c0>
  41c5d0:	f04f 32ff 	mov.w	r2, #4294967295
  41c5d4:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41c5d8:	4b5f      	ldr	r3, [pc, #380]	; (41c758 <basic_init+0x9a4>)
  41c5da:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41c5dc:	4b5f      	ldr	r3, [pc, #380]	; (41c75c <basic_init+0x9a8>)
  41c5de:	6818      	ldr	r0, [r3, #0]
  41c5e0:	3008      	adds	r0, #8
  41c5e2:	4b5f      	ldr	r3, [pc, #380]	; (41c760 <basic_init+0x9ac>)
  41c5e4:	6a1b      	ldr	r3, [r3, #32]
  41c5e6:	f013 0f02 	tst.w	r3, #2
  41c5ea:	f000 85c7 	beq.w	41d17c <basic_init+0x13c8>
  41c5ee:	f04f 32ff 	mov.w	r2, #4294967295
  41c5f2:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41c5f6:	4b58      	ldr	r3, [pc, #352]	; (41c758 <basic_init+0x9a4>)
  41c5f8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41c5fa:	4b58      	ldr	r3, [pc, #352]	; (41c75c <basic_init+0x9a8>)
  41c5fc:	6818      	ldr	r0, [r3, #0]
  41c5fe:	3008      	adds	r0, #8
  41c600:	4b57      	ldr	r3, [pc, #348]	; (41c760 <basic_init+0x9ac>)
  41c602:	6a1b      	ldr	r3, [r3, #32]
  41c604:	f013 0f02 	tst.w	r3, #2
  41c608:	f000 85bc 	beq.w	41d184 <basic_init+0x13d0>
  41c60c:	f04f 0200 	mov.w	r2, #0
  41c610:	2305      	movs	r3, #5
  41c612:	f363 0202 	bfi	r2, r3, #0, #3
  41c616:	2315      	movs	r3, #21
  41c618:	f363 02c7 	bfi	r2, r3, #3, #5
  41c61c:	f363 220c 	bfi	r2, r3, #8, #5
  41c620:	2302      	movs	r3, #2
  41c622:	f363 324f 	bfi	r2, r3, #13, #3
  41c626:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41c62a:	4b4b      	ldr	r3, [pc, #300]	; (41c758 <basic_init+0x9a4>)
  41c62c:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41c62e:	4c4b      	ldr	r4, [pc, #300]	; (41c75c <basic_init+0x9a8>)
  41c630:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41c632:	2229      	movs	r2, #41	; 0x29
  41c634:	21b6      	movs	r1, #182	; 0xb6
  41c636:	3008      	adds	r0, #8
  41c638:	4d4a      	ldr	r5, [pc, #296]	; (41c764 <basic_init+0x9b0>)
  41c63a:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41c63c:	6820      	ldr	r0, [r4, #0]
  41c63e:	3010      	adds	r0, #16
  41c640:	4b49      	ldr	r3, [pc, #292]	; (41c768 <basic_init+0x9b4>)
  41c642:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41c644:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41c646:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41c64a:	2101      	movs	r1, #1
  41c64c:	3010      	adds	r0, #16
  41c64e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41c650:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41c652:	22ff      	movs	r2, #255	; 0xff
  41c654:	212c      	movs	r1, #44	; 0x2c
  41c656:	3010      	adds	r0, #16
  41c658:	4b44      	ldr	r3, [pc, #272]	; (41c76c <basic_init+0x9b8>)
  41c65a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41c65c:	6820      	ldr	r0, [r4, #0]
  41c65e:	3010      	adds	r0, #16
  41c660:	4b3f      	ldr	r3, [pc, #252]	; (41c760 <basic_init+0x9ac>)
  41c662:	6a1b      	ldr	r3, [r3, #32]
  41c664:	f013 0f02 	tst.w	r3, #2
  41c668:	f000 859b 	beq.w	41d1a2 <basic_init+0x13ee>
  41c66c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41c670:	2129      	movs	r1, #41	; 0x29
  41c672:	4b39      	ldr	r3, [pc, #228]	; (41c758 <basic_init+0x9a4>)
  41c674:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41c676:	4b39      	ldr	r3, [pc, #228]	; (41c75c <basic_init+0x9a8>)
  41c678:	6818      	ldr	r0, [r3, #0]
  41c67a:	3010      	adds	r0, #16
  41c67c:	4b38      	ldr	r3, [pc, #224]	; (41c760 <basic_init+0x9ac>)
  41c67e:	6a1b      	ldr	r3, [r3, #32]
  41c680:	f013 0f02 	tst.w	r3, #2
  41c684:	f000 859c 	beq.w	41d1c0 <basic_init+0x140c>
  41c688:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41c68c:	4a34      	ldr	r2, [pc, #208]	; (41c760 <basic_init+0x9ac>)
  41c68e:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41c690:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41c694:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41c698:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41c69c:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41c6a0:	25cc      	movs	r5, #204	; 0xcc
  41c6a2:	fb05 1202 	mla	r2, r5, r2, r1
  41c6a6:	3280      	adds	r2, #128	; 0x80
  41c6a8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41c6ac:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41c6b0:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41c6b4:	f04f 0200 	mov.w	r2, #0
  41c6b8:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41c6bc:	f004 0607 	and.w	r6, r4, #7
  41c6c0:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41c6c4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41c6c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41c6cc:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41c6d0:	f003 0707 	and.w	r7, r3, #7
  41c6d4:	0b59      	lsrs	r1, r3, #13
  41c6d6:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41c6da:	fb05 6101 	mla	r1, r5, r1, r6
  41c6de:	3180      	adds	r1, #128	; 0x80
  41c6e0:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41c6e4:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41c6e8:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41c6ec:	f366 0202 	bfi	r2, r6, #0, #3
  41c6f0:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41c6f4:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41c6f8:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41c6fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41c700:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41c704:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41c708:	fb05 4303 	mla	r3, r5, r3, r4
  41c70c:	3380      	adds	r3, #128	; 0x80
  41c70e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41c712:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41c716:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41c71a:	f363 220c 	bfi	r2, r3, #8, #5
  41c71e:	f241 0129 	movw	r1, #4137	; 0x1029
  41c722:	4d0d      	ldr	r5, [pc, #52]	; (41c758 <basic_init+0x9a4>)
  41c724:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41c726:	4c0d      	ldr	r4, [pc, #52]	; (41c75c <basic_init+0x9a8>)
  41c728:	6820      	ldr	r0, [r4, #0]
  41c72a:	4f0d      	ldr	r7, [pc, #52]	; (41c760 <basic_init+0x9ac>)
  41c72c:	89ba      	ldrh	r2, [r7, #12]
  41c72e:	f240 1129 	movw	r1, #297	; 0x129
  41c732:	3010      	adds	r0, #16
  41c734:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41c736:	6826      	ldr	r6, [r4, #0]
  41c738:	3610      	adds	r6, #16
  41c73a:	214c      	movs	r1, #76	; 0x4c
  41c73c:	89b8      	ldrh	r0, [r7, #12]
  41c73e:	4b0c      	ldr	r3, [pc, #48]	; (41c770 <basic_init+0x9bc>)
  41c740:	4798      	blx	r3
  41c742:	4602      	mov	r2, r0
  41c744:	f241 1129 	movw	r1, #4393	; 0x1129
  41c748:	4630      	mov	r0, r6
  41c74a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41c74c:	6820      	ldr	r0, [r4, #0]
  41c74e:	3010      	adds	r0, #16
  41c750:	6a3b      	ldr	r3, [r7, #32]
  41c752:	f013 0f02 	tst.w	r3, #2
  41c756:	e00d      	b.n	41c774 <basic_init+0x9c0>
  41c758:	0040a0d9 	.word	0x0040a0d9
  41c75c:	204147a8 	.word	0x204147a8
  41c760:	204147ac 	.word	0x204147ac
  41c764:	00409f49 	.word	0x00409f49
  41c768:	0041851d 	.word	0x0041851d
  41c76c:	0040a269 	.word	0x0040a269
  41c770:	00415a11 	.word	0x00415a11
  41c774:	f000 8575 	beq.w	41d262 <basic_init+0x14ae>
  41c778:	f04f 32ff 	mov.w	r2, #4294967295
  41c77c:	f242 0129 	movw	r1, #8233	; 0x2029
  41c780:	4bc7      	ldr	r3, [pc, #796]	; (41caa0 <basic_init+0xcec>)
  41c782:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41c784:	4bc7      	ldr	r3, [pc, #796]	; (41caa4 <basic_init+0xcf0>)
  41c786:	6818      	ldr	r0, [r3, #0]
  41c788:	3010      	adds	r0, #16
  41c78a:	4bc7      	ldr	r3, [pc, #796]	; (41caa8 <basic_init+0xcf4>)
  41c78c:	6a1b      	ldr	r3, [r3, #32]
  41c78e:	f013 0f02 	tst.w	r3, #2
  41c792:	f000 8575 	beq.w	41d280 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41c796:	f04f 0200 	mov.w	r2, #0
  41c79a:	2306      	movs	r3, #6
  41c79c:	f363 0202 	bfi	r2, r3, #0, #3
  41c7a0:	2319      	movs	r3, #25
  41c7a2:	f363 02c7 	bfi	r2, r3, #3, #5
  41c7a6:	f363 220c 	bfi	r2, r3, #8, #5
  41c7aa:	2303      	movs	r3, #3
  41c7ac:	f363 324f 	bfi	r2, r3, #13, #3
  41c7b0:	f242 1129 	movw	r1, #8489	; 0x2129
  41c7b4:	4eba      	ldr	r6, [pc, #744]	; (41caa0 <basic_init+0xcec>)
  41c7b6:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41c7b8:	4dba      	ldr	r5, [pc, #744]	; (41caa4 <basic_init+0xcf0>)
  41c7ba:	6828      	ldr	r0, [r5, #0]
  41c7bc:	4cba      	ldr	r4, [pc, #744]	; (41caa8 <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c7be:	89a2      	ldrh	r2, [r4, #12]
  41c7c0:	2139      	movs	r1, #57	; 0x39
  41c7c2:	3010      	adds	r0, #16
  41c7c4:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41c7c6:	6828      	ldr	r0, [r5, #0]
  41c7c8:	89a2      	ldrh	r2, [r4, #12]
  41c7ca:	f241 0139 	movw	r1, #4153	; 0x1039
  41c7ce:	3010      	adds	r0, #16
  41c7d0:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41c7d2:	6828      	ldr	r0, [r5, #0]
  41c7d4:	3010      	adds	r0, #16
  41c7d6:	6a23      	ldr	r3, [r4, #32]
  41c7d8:	f013 0f02 	tst.w	r3, #2
  41c7dc:	f000 855f 	beq.w	41d29e <basic_init+0x14ea>
  41c7e0:	f04f 0200 	mov.w	r2, #0
  41c7e4:	2304      	movs	r3, #4
  41c7e6:	f363 0202 	bfi	r2, r3, #0, #3
  41c7ea:	2311      	movs	r3, #17
  41c7ec:	f363 02c7 	bfi	r2, r3, #3, #5
  41c7f0:	f363 220c 	bfi	r2, r3, #8, #5
  41c7f4:	2302      	movs	r3, #2
  41c7f6:	f363 324f 	bfi	r2, r3, #13, #3
  41c7fa:	f242 0139 	movw	r1, #8249	; 0x2039
  41c7fe:	4ba8      	ldr	r3, [pc, #672]	; (41caa0 <basic_init+0xcec>)
  41c800:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41c802:	4ba8      	ldr	r3, [pc, #672]	; (41caa4 <basic_init+0xcf0>)
  41c804:	681c      	ldr	r4, [r3, #0]
  41c806:	3410      	adds	r4, #16
  41c808:	2000      	movs	r0, #0
  41c80a:	4ba8      	ldr	r3, [pc, #672]	; (41caac <basic_init+0xcf8>)
  41c80c:	4798      	blx	r3
  41c80e:	3028      	adds	r0, #40	; 0x28
  41c810:	0040      	lsls	r0, r0, #1
  41c812:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c816:	f280 8550 	bge.w	41d2ba <basic_init+0x1506>
  41c81a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41c81c:	2130      	movs	r1, #48	; 0x30
  41c81e:	4620      	mov	r0, r4
  41c820:	4ba3      	ldr	r3, [pc, #652]	; (41cab0 <basic_init+0xcfc>)
  41c822:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41c824:	4c9f      	ldr	r4, [pc, #636]	; (41caa4 <basic_init+0xcf0>)
  41c826:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41c828:	2200      	movs	r2, #0
  41c82a:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41c82e:	3010      	adds	r0, #16
  41c830:	4ba0      	ldr	r3, [pc, #640]	; (41cab4 <basic_init+0xd00>)
  41c832:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41c834:	6820      	ldr	r0, [r4, #0]
  41c836:	3010      	adds	r0, #16
  41c838:	4b9b      	ldr	r3, [pc, #620]	; (41caa8 <basic_init+0xcf4>)
  41c83a:	6a1b      	ldr	r3, [r3, #32]
  41c83c:	f013 0f02 	tst.w	r3, #2
  41c840:	f000 8549 	beq.w	41d2d6 <basic_init+0x1522>
  41c844:	f04f 0200 	mov.w	r2, #0
  41c848:	2302      	movs	r3, #2
  41c84a:	f363 0202 	bfi	r2, r3, #0, #3
  41c84e:	2306      	movs	r3, #6
  41c850:	f363 02c7 	bfi	r2, r3, #3, #5
  41c854:	2309      	movs	r3, #9
  41c856:	f363 220c 	bfi	r2, r3, #8, #5
  41c85a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41c85e:	f248 0189 	movw	r1, #32905	; 0x8089
  41c862:	4b8f      	ldr	r3, [pc, #572]	; (41caa0 <basic_init+0xcec>)
  41c864:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41c866:	4b8f      	ldr	r3, [pc, #572]	; (41caa4 <basic_init+0xcf0>)
  41c868:	6818      	ldr	r0, [r3, #0]
  41c86a:	3010      	adds	r0, #16
  41c86c:	4b8e      	ldr	r3, [pc, #568]	; (41caa8 <basic_init+0xcf4>)
  41c86e:	6a1b      	ldr	r3, [r3, #32]
  41c870:	f013 0f02 	tst.w	r3, #2
  41c874:	f000 8533 	beq.w	41d2de <basic_init+0x152a>
  41c878:	f04f 0200 	mov.w	r2, #0
  41c87c:	2302      	movs	r3, #2
  41c87e:	f363 0202 	bfi	r2, r3, #0, #3
  41c882:	2306      	movs	r3, #6
  41c884:	f363 02c7 	bfi	r2, r3, #3, #5
  41c888:	2309      	movs	r3, #9
  41c88a:	f363 220c 	bfi	r2, r3, #8, #5
  41c88e:	f36f 324f 	bfc	r2, #13, #3
  41c892:	f249 0189 	movw	r1, #37001	; 0x9089
  41c896:	4d82      	ldr	r5, [pc, #520]	; (41caa0 <basic_init+0xcec>)
  41c898:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41c89a:	4c82      	ldr	r4, [pc, #520]	; (41caa4 <basic_init+0xcf0>)
  41c89c:	6820      	ldr	r0, [r4, #0]
  41c89e:	f04f 32ff 	mov.w	r2, #4294967295
  41c8a2:	f248 1189 	movw	r1, #33161	; 0x8189
  41c8a6:	3010      	adds	r0, #16
  41c8a8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41c8aa:	6820      	ldr	r0, [r4, #0]
  41c8ac:	f04f 32ff 	mov.w	r2, #4294967295
  41c8b0:	f249 1189 	movw	r1, #37257	; 0x9189
  41c8b4:	3010      	adds	r0, #16
  41c8b6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41c8b8:	6820      	ldr	r0, [r4, #0]
  41c8ba:	3010      	adds	r0, #16
  41c8bc:	4b7a      	ldr	r3, [pc, #488]	; (41caa8 <basic_init+0xcf4>)
  41c8be:	6a1b      	ldr	r3, [r3, #32]
  41c8c0:	f013 0f02 	tst.w	r3, #2
  41c8c4:	f000 850f 	beq.w	41d2e6 <basic_init+0x1532>
  41c8c8:	f04f 0200 	mov.w	r2, #0
  41c8cc:	2304      	movs	r3, #4
  41c8ce:	f363 0202 	bfi	r2, r3, #0, #3
  41c8d2:	2311      	movs	r3, #17
  41c8d4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c8d8:	f363 220c 	bfi	r2, r3, #8, #5
  41c8dc:	2302      	movs	r3, #2
  41c8de:	f363 324f 	bfi	r2, r3, #13, #3
  41c8e2:	f24a 0189 	movw	r1, #41097	; 0xa089
  41c8e6:	4b6e      	ldr	r3, [pc, #440]	; (41caa0 <basic_init+0xcec>)
  41c8e8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41c8ea:	4b6e      	ldr	r3, [pc, #440]	; (41caa4 <basic_init+0xcf0>)
  41c8ec:	6818      	ldr	r0, [r3, #0]
  41c8ee:	3010      	adds	r0, #16
  41c8f0:	4b6d      	ldr	r3, [pc, #436]	; (41caa8 <basic_init+0xcf4>)
  41c8f2:	6a1b      	ldr	r3, [r3, #32]
  41c8f4:	f013 0f02 	tst.w	r3, #2
  41c8f8:	f000 8504 	beq.w	41d304 <basic_init+0x1550>
  41c8fc:	f04f 0200 	mov.w	r2, #0
  41c900:	2302      	movs	r3, #2
  41c902:	f363 0202 	bfi	r2, r3, #0, #3
  41c906:	2306      	movs	r3, #6
  41c908:	f363 02c7 	bfi	r2, r3, #3, #5
  41c90c:	2309      	movs	r3, #9
  41c90e:	f363 220c 	bfi	r2, r3, #8, #5
  41c912:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41c916:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41c91a:	4b61      	ldr	r3, [pc, #388]	; (41caa0 <basic_init+0xcec>)
  41c91c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41c91e:	4b61      	ldr	r3, [pc, #388]	; (41caa4 <basic_init+0xcf0>)
  41c920:	6818      	ldr	r0, [r3, #0]
  41c922:	3010      	adds	r0, #16
  41c924:	4b60      	ldr	r3, [pc, #384]	; (41caa8 <basic_init+0xcf4>)
  41c926:	6a1b      	ldr	r3, [r3, #32]
  41c928:	f013 0f02 	tst.w	r3, #2
  41c92c:	f000 84ee 	beq.w	41d30c <basic_init+0x1558>
  41c930:	f04f 0200 	mov.w	r2, #0
  41c934:	2302      	movs	r3, #2
  41c936:	f363 0202 	bfi	r2, r3, #0, #3
  41c93a:	2306      	movs	r3, #6
  41c93c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c940:	2309      	movs	r3, #9
  41c942:	f363 220c 	bfi	r2, r3, #8, #5
  41c946:	f36f 324f 	bfc	r2, #13, #3
  41c94a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41c94e:	4d54      	ldr	r5, [pc, #336]	; (41caa0 <basic_init+0xcec>)
  41c950:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41c952:	4c54      	ldr	r4, [pc, #336]	; (41caa4 <basic_init+0xcf0>)
  41c954:	6820      	ldr	r0, [r4, #0]
  41c956:	f04f 32ff 	mov.w	r2, #4294967295
  41c95a:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41c95e:	3010      	adds	r0, #16
  41c960:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41c962:	6820      	ldr	r0, [r4, #0]
  41c964:	f04f 32ff 	mov.w	r2, #4294967295
  41c968:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41c96c:	3010      	adds	r0, #16
  41c96e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41c970:	6820      	ldr	r0, [r4, #0]
  41c972:	3010      	adds	r0, #16
  41c974:	4b4c      	ldr	r3, [pc, #304]	; (41caa8 <basic_init+0xcf4>)
  41c976:	6a1b      	ldr	r3, [r3, #32]
  41c978:	f013 0f02 	tst.w	r3, #2
  41c97c:	f000 84ca 	beq.w	41d314 <basic_init+0x1560>
  41c980:	f04f 0200 	mov.w	r2, #0
  41c984:	2304      	movs	r3, #4
  41c986:	f363 0202 	bfi	r2, r3, #0, #3
  41c98a:	2311      	movs	r3, #17
  41c98c:	f363 02c7 	bfi	r2, r3, #3, #5
  41c990:	f363 220c 	bfi	r2, r3, #8, #5
  41c994:	2302      	movs	r3, #2
  41c996:	f363 324f 	bfi	r2, r3, #13, #3
  41c99a:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41c99e:	4b40      	ldr	r3, [pc, #256]	; (41caa0 <basic_init+0xcec>)
  41c9a0:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41c9a2:	4b40      	ldr	r3, [pc, #256]	; (41caa4 <basic_init+0xcf0>)
  41c9a4:	6818      	ldr	r0, [r3, #0]
  41c9a6:	3010      	adds	r0, #16
  41c9a8:	4b3f      	ldr	r3, [pc, #252]	; (41caa8 <basic_init+0xcf4>)
  41c9aa:	6a1b      	ldr	r3, [r3, #32]
  41c9ac:	f013 0f02 	tst.w	r3, #2
  41c9b0:	f000 84bf 	beq.w	41d332 <basic_init+0x157e>
  41c9b4:	f04f 0200 	mov.w	r2, #0
  41c9b8:	2302      	movs	r3, #2
  41c9ba:	f363 0202 	bfi	r2, r3, #0, #3
  41c9be:	2306      	movs	r3, #6
  41c9c0:	f363 02c7 	bfi	r2, r3, #3, #5
  41c9c4:	2309      	movs	r3, #9
  41c9c6:	f363 220c 	bfi	r2, r3, #8, #5
  41c9ca:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41c9ce:	2179      	movs	r1, #121	; 0x79
  41c9d0:	4b33      	ldr	r3, [pc, #204]	; (41caa0 <basic_init+0xcec>)
  41c9d2:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41c9d4:	4b33      	ldr	r3, [pc, #204]	; (41caa4 <basic_init+0xcf0>)
  41c9d6:	6818      	ldr	r0, [r3, #0]
  41c9d8:	3010      	adds	r0, #16
  41c9da:	4b33      	ldr	r3, [pc, #204]	; (41caa8 <basic_init+0xcf4>)
  41c9dc:	6a1b      	ldr	r3, [r3, #32]
  41c9de:	f013 0f02 	tst.w	r3, #2
  41c9e2:	f000 84aa 	beq.w	41d33a <basic_init+0x1586>
  41c9e6:	f04f 0200 	mov.w	r2, #0
  41c9ea:	2302      	movs	r3, #2
  41c9ec:	f363 0202 	bfi	r2, r3, #0, #3
  41c9f0:	2306      	movs	r3, #6
  41c9f2:	f363 02c7 	bfi	r2, r3, #3, #5
  41c9f6:	2309      	movs	r3, #9
  41c9f8:	f363 220c 	bfi	r2, r3, #8, #5
  41c9fc:	f36f 324f 	bfc	r2, #13, #3
  41ca00:	f241 0179 	movw	r1, #4217	; 0x1079
  41ca04:	4d26      	ldr	r5, [pc, #152]	; (41caa0 <basic_init+0xcec>)
  41ca06:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41ca08:	4c26      	ldr	r4, [pc, #152]	; (41caa4 <basic_init+0xcf0>)
  41ca0a:	6820      	ldr	r0, [r4, #0]
  41ca0c:	f04f 32ff 	mov.w	r2, #4294967295
  41ca10:	f240 1179 	movw	r1, #377	; 0x179
  41ca14:	3010      	adds	r0, #16
  41ca16:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41ca18:	6820      	ldr	r0, [r4, #0]
  41ca1a:	f04f 32ff 	mov.w	r2, #4294967295
  41ca1e:	f241 1179 	movw	r1, #4473	; 0x1179
  41ca22:	3010      	adds	r0, #16
  41ca24:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41ca26:	6820      	ldr	r0, [r4, #0]
  41ca28:	3010      	adds	r0, #16
  41ca2a:	4b1f      	ldr	r3, [pc, #124]	; (41caa8 <basic_init+0xcf4>)
  41ca2c:	6a1b      	ldr	r3, [r3, #32]
  41ca2e:	f013 0f02 	tst.w	r3, #2
  41ca32:	f000 8486 	beq.w	41d342 <basic_init+0x158e>
  41ca36:	f04f 0200 	mov.w	r2, #0
  41ca3a:	2304      	movs	r3, #4
  41ca3c:	f363 0202 	bfi	r2, r3, #0, #3
  41ca40:	2311      	movs	r3, #17
  41ca42:	f363 02c7 	bfi	r2, r3, #3, #5
  41ca46:	f363 220c 	bfi	r2, r3, #8, #5
  41ca4a:	2302      	movs	r3, #2
  41ca4c:	f363 324f 	bfi	r2, r3, #13, #3
  41ca50:	f242 0179 	movw	r1, #8313	; 0x2079
  41ca54:	4b12      	ldr	r3, [pc, #72]	; (41caa0 <basic_init+0xcec>)
  41ca56:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41ca58:	4b12      	ldr	r3, [pc, #72]	; (41caa4 <basic_init+0xcf0>)
  41ca5a:	681c      	ldr	r4, [r3, #0]
  41ca5c:	3410      	adds	r4, #16
  41ca5e:	2000      	movs	r0, #0
  41ca60:	4b12      	ldr	r3, [pc, #72]	; (41caac <basic_init+0xcf8>)
  41ca62:	4798      	blx	r3
  41ca64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ca68:	00c0      	lsls	r0, r0, #3
  41ca6a:	3050      	adds	r0, #80	; 0x50
  41ca6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ca70:	f280 8476 	bge.w	41d360 <basic_init+0x15ac>
  41ca74:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ca76:	2112      	movs	r1, #18
  41ca78:	4620      	mov	r0, r4
  41ca7a:	4b0d      	ldr	r3, [pc, #52]	; (41cab0 <basic_init+0xcfc>)
  41ca7c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41ca7e:	4b09      	ldr	r3, [pc, #36]	; (41caa4 <basic_init+0xcf0>)
  41ca80:	681c      	ldr	r4, [r3, #0]
  41ca82:	3410      	adds	r4, #16
  41ca84:	2000      	movs	r0, #0
  41ca86:	4b09      	ldr	r3, [pc, #36]	; (41caac <basic_init+0xcf8>)
  41ca88:	4798      	blx	r3
  41ca8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ca8e:	00c0      	lsls	r0, r0, #3
  41ca90:	3050      	adds	r0, #80	; 0x50
  41ca92:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ca96:	f280 8473 	bge.w	41d380 <basic_init+0x15cc>
  41ca9a:	2201      	movs	r2, #1
  41ca9c:	e00c      	b.n	41cab8 <basic_init+0xd04>
  41ca9e:	bf00      	nop
  41caa0:	0040a0d9 	.word	0x0040a0d9
  41caa4:	204147a8 	.word	0x204147a8
  41caa8:	204147ac 	.word	0x204147ac
  41caac:	00414955 	.word	0x00414955
  41cab0:	00409f49 	.word	0x00409f49
  41cab4:	0040a269 	.word	0x0040a269
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cab8:	2113      	movs	r1, #19
  41caba:	4620      	mov	r0, r4
  41cabc:	4bc2      	ldr	r3, [pc, #776]	; (41cdc8 <basic_init+0x1014>)
  41cabe:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41cac0:	4bc2      	ldr	r3, [pc, #776]	; (41cdcc <basic_init+0x1018>)
  41cac2:	681c      	ldr	r4, [r3, #0]
  41cac4:	3410      	adds	r4, #16
  41cac6:	2000      	movs	r0, #0
  41cac8:	4bc1      	ldr	r3, [pc, #772]	; (41cdd0 <basic_init+0x101c>)
  41caca:	4798      	blx	r3
  41cacc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cad0:	3050      	adds	r0, #80	; 0x50
  41cad2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cad6:	f280 8463 	bge.w	41d3a0 <basic_init+0x15ec>
  41cada:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cadc:	2110      	movs	r1, #16
  41cade:	4620      	mov	r0, r4
  41cae0:	4bb9      	ldr	r3, [pc, #740]	; (41cdc8 <basic_init+0x1014>)
  41cae2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41cae4:	4bb9      	ldr	r3, [pc, #740]	; (41cdcc <basic_init+0x1018>)
  41cae6:	681c      	ldr	r4, [r3, #0]
  41cae8:	3410      	adds	r4, #16
  41caea:	2000      	movs	r0, #0
  41caec:	4bb8      	ldr	r3, [pc, #736]	; (41cdd0 <basic_init+0x101c>)
  41caee:	4798      	blx	r3
  41caf0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41caf4:	3050      	adds	r0, #80	; 0x50
  41caf6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cafa:	f280 8460 	bge.w	41d3be <basic_init+0x160a>
  41cafe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cb00:	2111      	movs	r1, #17
  41cb02:	4620      	mov	r0, r4
  41cb04:	4bb0      	ldr	r3, [pc, #704]	; (41cdc8 <basic_init+0x1014>)
  41cb06:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41cb08:	4bb0      	ldr	r3, [pc, #704]	; (41cdcc <basic_init+0x1018>)
  41cb0a:	681c      	ldr	r4, [r3, #0]
  41cb0c:	3410      	adds	r4, #16
  41cb0e:	2000      	movs	r0, #0
  41cb10:	4baf      	ldr	r3, [pc, #700]	; (41cdd0 <basic_init+0x101c>)
  41cb12:	4798      	blx	r3
  41cb14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cb18:	0080      	lsls	r0, r0, #2
  41cb1a:	3050      	adds	r0, #80	; 0x50
  41cb1c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cb20:	f280 845c 	bge.w	41d3dc <basic_init+0x1628>
  41cb24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41cb26:	2114      	movs	r1, #20
  41cb28:	4620      	mov	r0, r4
  41cb2a:	4ba7      	ldr	r3, [pc, #668]	; (41cdc8 <basic_init+0x1014>)
  41cb2c:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41cb2e:	4ba7      	ldr	r3, [pc, #668]	; (41cdcc <basic_init+0x1018>)
  41cb30:	681c      	ldr	r4, [r3, #0]
  41cb32:	3410      	adds	r4, #16
  41cb34:	4ba7      	ldr	r3, [pc, #668]	; (41cdd4 <basic_init+0x1020>)
  41cb36:	6a1b      	ldr	r3, [r3, #32]
  41cb38:	f013 0f20 	tst.w	r3, #32
  41cb3c:	f000 845e 	beq.w	41d3fc <basic_init+0x1648>
  41cb40:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41cb42:	2140      	movs	r1, #64	; 0x40
  41cb44:	4620      	mov	r0, r4
  41cb46:	4da0      	ldr	r5, [pc, #640]	; (41cdc8 <basic_init+0x1014>)
  41cb48:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41cb4a:	4ca0      	ldr	r4, [pc, #640]	; (41cdcc <basic_init+0x1018>)
  41cb4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41cb4e:	2200      	movs	r2, #0
  41cb50:	214c      	movs	r1, #76	; 0x4c
  41cb52:	3010      	adds	r0, #16
  41cb54:	4ea0      	ldr	r6, [pc, #640]	; (41cdd8 <basic_init+0x1024>)
  41cb56:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41cb58:	6820      	ldr	r0, [r4, #0]
  41cb5a:	227f      	movs	r2, #127	; 0x7f
  41cb5c:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41cb60:	3010      	adds	r0, #16
  41cb62:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41cb64:	6820      	ldr	r0, [r4, #0]
  41cb66:	4f9b      	ldr	r7, [pc, #620]	; (41cdd4 <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41cb68:	89ba      	ldrh	r2, [r7, #12]
  41cb6a:	2149      	movs	r1, #73	; 0x49
  41cb6c:	3010      	adds	r0, #16
  41cb6e:	4e9b      	ldr	r6, [pc, #620]	; (41cddc <basic_init+0x1028>)
  41cb70:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41cb72:	6820      	ldr	r0, [r4, #0]
  41cb74:	89fa      	ldrh	r2, [r7, #14]
  41cb76:	f240 4149 	movw	r1, #1097	; 0x449
  41cb7a:	3010      	adds	r0, #16
  41cb7c:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41cb7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41cb80:	2200      	movs	r2, #0
  41cb82:	21b0      	movs	r1, #176	; 0xb0
  41cb84:	3010      	adds	r0, #16
  41cb86:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41cb88:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41cb8a:	223c      	movs	r2, #60	; 0x3c
  41cb8c:	21b5      	movs	r1, #181	; 0xb5
  41cb8e:	3010      	adds	r0, #16
  41cb90:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41cb92:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41cb94:	2229      	movs	r2, #41	; 0x29
  41cb96:	21b6      	movs	r1, #182	; 0xb6
  41cb98:	3010      	adds	r0, #16
  41cb9a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41cb9c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41cb9e:	224c      	movs	r2, #76	; 0x4c
  41cba0:	21b7      	movs	r1, #183	; 0xb7
  41cba2:	3010      	adds	r0, #16
  41cba4:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41cba6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41cba8:	2200      	movs	r2, #0
  41cbaa:	21b1      	movs	r1, #177	; 0xb1
  41cbac:	3010      	adds	r0, #16
  41cbae:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41cbb0:	6820      	ldr	r0, [r4, #0]
  41cbb2:	2200      	movs	r2, #0
  41cbb4:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41cbb8:	3010      	adds	r0, #16
  41cbba:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41cbbc:	6820      	ldr	r0, [r4, #0]
  41cbbe:	3014      	adds	r0, #20
  41cbc0:	4b87      	ldr	r3, [pc, #540]	; (41cde0 <basic_init+0x102c>)
  41cbc2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41cbc4:	6824      	ldr	r4, [r4, #0]
  41cbc6:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41cbc8:	2000      	movs	r0, #0
  41cbca:	4b86      	ldr	r3, [pc, #536]	; (41cde4 <basic_init+0x1030>)
  41cbcc:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41cbce:	2801      	cmp	r0, #1
  41cbd0:	f240 842d 	bls.w	41d42e <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41cbd4:	2000      	movs	r0, #0
  41cbd6:	4b7e      	ldr	r3, [pc, #504]	; (41cdd0 <basic_init+0x101c>)
  41cbd8:	4798      	blx	r3
  41cbda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cbde:	00c0      	lsls	r0, r0, #3
  41cbe0:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41cbe2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cbe6:	f280 843f 	bge.w	41d468 <basic_init+0x16b4>
  41cbea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41cbec:	2114      	movs	r1, #20
  41cbee:	4620      	mov	r0, r4
  41cbf0:	4b75      	ldr	r3, [pc, #468]	; (41cdc8 <basic_init+0x1014>)
  41cbf2:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41cbf4:	4b75      	ldr	r3, [pc, #468]	; (41cdcc <basic_init+0x1018>)
  41cbf6:	6818      	ldr	r0, [r3, #0]
  41cbf8:	3018      	adds	r0, #24
  41cbfa:	4b79      	ldr	r3, [pc, #484]	; (41cde0 <basic_init+0x102c>)
  41cbfc:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41cbfe:	2000      	movs	r0, #0
  41cc00:	4b78      	ldr	r3, [pc, #480]	; (41cde4 <basic_init+0x1030>)
  41cc02:	4798      	blx	r3
  41cc04:	2801      	cmp	r0, #1
  41cc06:	f240 843f 	bls.w	41d488 <basic_init+0x16d4>
  41cc0a:	2000      	movs	r0, #0
  41cc0c:	4b70      	ldr	r3, [pc, #448]	; (41cdd0 <basic_init+0x101c>)
  41cc0e:	4798      	blx	r3
  41cc10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41cc14:	0080      	lsls	r0, r0, #2
  41cc16:	3050      	adds	r0, #80	; 0x50
  41cc18:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cc1c:	f280 8451 	bge.w	41d4c2 <basic_init+0x170e>
  41cc20:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41cc22:	4e6a      	ldr	r6, [pc, #424]	; (41cdcc <basic_init+0x1018>)
  41cc24:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cc26:	4622      	mov	r2, r4
  41cc28:	2112      	movs	r1, #18
  41cc2a:	3018      	adds	r0, #24
  41cc2c:	4d66      	ldr	r5, [pc, #408]	; (41cdc8 <basic_init+0x1014>)
  41cc2e:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41cc30:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cc32:	4622      	mov	r2, r4
  41cc34:	2113      	movs	r1, #19
  41cc36:	3018      	adds	r0, #24
  41cc38:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41cc3a:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cc3c:	4622      	mov	r2, r4
  41cc3e:	2110      	movs	r1, #16
  41cc40:	3018      	adds	r0, #24
  41cc42:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41cc44:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cc46:	4622      	mov	r2, r4
  41cc48:	2111      	movs	r1, #17
  41cc4a:	3018      	adds	r0, #24
  41cc4c:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41cc4e:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41cc50:	4622      	mov	r2, r4
  41cc52:	2114      	movs	r1, #20
  41cc54:	3018      	adds	r0, #24
  41cc56:	47a8      	blx	r5
  41cc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41cc5a:	2302      	movs	r3, #2
  41cc5c:	f04f 0200 	mov.w	r2, #0
  41cc60:	f363 0202 	bfi	r2, r3, #0, #3
  41cc64:	2108      	movs	r1, #8
  41cc66:	f361 02c7 	bfi	r2, r1, #3, #5
  41cc6a:	210b      	movs	r1, #11
  41cc6c:	f361 220c 	bfi	r2, r1, #8, #5
  41cc70:	f363 324f 	bfi	r2, r3, #13, #3
  41cc74:	f7ff b8ba 	b.w	41bdec <basic_init+0x38>
  41cc78:	f04f 0207 	mov.w	r2, #7
  41cc7c:	231c      	movs	r3, #28
  41cc7e:	f363 02c7 	bfi	r2, r3, #3, #5
  41cc82:	231d      	movs	r3, #29
  41cc84:	f363 220c 	bfi	r2, r3, #8, #5
  41cc88:	2302      	movs	r3, #2
  41cc8a:	f363 324f 	bfi	r2, r3, #13, #3
  41cc8e:	f7ff b8c7 	b.w	41be20 <basic_init+0x6c>
  41cc92:	f04f 0207 	mov.w	r2, #7
  41cc96:	231c      	movs	r3, #28
  41cc98:	f363 02c7 	bfi	r2, r3, #3, #5
  41cc9c:	231d      	movs	r3, #29
  41cc9e:	f363 220c 	bfi	r2, r3, #8, #5
  41cca2:	2302      	movs	r3, #2
  41cca4:	f363 324f 	bfi	r2, r3, #13, #3
  41cca8:	f7ff b8d5 	b.w	41be56 <basic_init+0xa2>
  41ccac:	f04f 0207 	mov.w	r2, #7
  41ccb0:	231c      	movs	r3, #28
  41ccb2:	f363 02c7 	bfi	r2, r3, #3, #5
  41ccb6:	231d      	movs	r3, #29
  41ccb8:	f363 220c 	bfi	r2, r3, #8, #5
  41ccbc:	2302      	movs	r3, #2
  41ccbe:	f363 324f 	bfi	r2, r3, #13, #3
  41ccc2:	f7ff b8e2 	b.w	41be8a <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41ccc6:	2000      	movs	r0, #0
  41ccc8:	4b41      	ldr	r3, [pc, #260]	; (41cdd0 <basic_init+0x101c>)
  41ccca:	4798      	blx	r3
  41cccc:	300a      	adds	r0, #10
  41ccce:	00c0      	lsls	r0, r0, #3
  41ccd0:	4b45      	ldr	r3, [pc, #276]	; (41cde8 <basic_init+0x1034>)
  41ccd2:	fb83 2300 	smull	r2, r3, r3, r0
  41ccd6:	17c2      	asrs	r2, r0, #31
  41ccd8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ccdc:	b212      	sxth	r2, r2
  41ccde:	f7ff b8f4 	b.w	41beca <basic_init+0x116>
  41cce2:	f04f 0200 	mov.w	r2, #0
  41cce6:	2303      	movs	r3, #3
  41cce8:	f363 0202 	bfi	r2, r3, #0, #3
  41ccec:	230b      	movs	r3, #11
  41ccee:	f363 02c7 	bfi	r2, r3, #3, #5
  41ccf2:	230e      	movs	r3, #14
  41ccf4:	f363 220c 	bfi	r2, r3, #8, #5
  41ccf8:	f36f 324f 	bfc	r2, #13, #3
  41ccfc:	f7ff b8fa 	b.w	41bef4 <basic_init+0x140>
  41cd00:	f04f 0200 	mov.w	r2, #0
  41cd04:	2304      	movs	r3, #4
  41cd06:	f363 0202 	bfi	r2, r3, #0, #3
  41cd0a:	2310      	movs	r3, #16
  41cd0c:	f363 02c7 	bfi	r2, r3, #3, #5
  41cd10:	2312      	movs	r3, #18
  41cd12:	f363 220c 	bfi	r2, r3, #8, #5
  41cd16:	2302      	movs	r3, #2
  41cd18:	f363 324f 	bfi	r2, r3, #13, #3
  41cd1c:	f7ff b905 	b.w	41bf2a <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41cd20:	4b2a      	ldr	r3, [pc, #168]	; (41cdcc <basic_init+0x1018>)
  41cd22:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41cd24:	4b2b      	ldr	r3, [pc, #172]	; (41cdd4 <basic_init+0x1020>)
  41cd26:	899a      	ldrh	r2, [r3, #12]
  41cd28:	f240 2139 	movw	r1, #569	; 0x239
  41cd2c:	3004      	adds	r0, #4
  41cd2e:	4b2b      	ldr	r3, [pc, #172]	; (41cddc <basic_init+0x1028>)
  41cd30:	4798      	blx	r3
  41cd32:	f7ff b903 	b.w	41bf3c <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41cd36:	2000      	movs	r0, #0
  41cd38:	4b25      	ldr	r3, [pc, #148]	; (41cdd0 <basic_init+0x101c>)
  41cd3a:	4798      	blx	r3
  41cd3c:	3028      	adds	r0, #40	; 0x28
  41cd3e:	0040      	lsls	r0, r0, #1
  41cd40:	4b29      	ldr	r3, [pc, #164]	; (41cde8 <basic_init+0x1034>)
  41cd42:	fb83 2300 	smull	r2, r3, r3, r0
  41cd46:	17c2      	asrs	r2, r0, #31
  41cd48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cd4c:	b212      	sxth	r2, r2
  41cd4e:	f7ff b90a 	b.w	41bf66 <basic_init+0x1b2>
  41cd52:	f04f 32ff 	mov.w	r2, #4294967295
  41cd56:	f7ff b927 	b.w	41bfa8 <basic_init+0x1f4>
  41cd5a:	f04f 32ff 	mov.w	r2, #4294967295
  41cd5e:	f7ff b945 	b.w	41bfec <basic_init+0x238>
  41cd62:	f04f 32ff 	mov.w	r2, #4294967295
  41cd66:	f7ff b95c 	b.w	41c022 <basic_init+0x26e>
  41cd6a:	f04f 32ff 	mov.w	r2, #4294967295
  41cd6e:	f7ff b974 	b.w	41c05a <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41cd72:	2000      	movs	r0, #0
  41cd74:	4b16      	ldr	r3, [pc, #88]	; (41cdd0 <basic_init+0x101c>)
  41cd76:	4798      	blx	r3
  41cd78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cd7c:	3050      	adds	r0, #80	; 0x50
  41cd7e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cd82:	da02      	bge.n	41cd8a <basic_init+0xfd6>
  41cd84:	2401      	movs	r4, #1
  41cd86:	f7ff b986 	b.w	41c096 <basic_init+0x2e2>
  41cd8a:	2000      	movs	r0, #0
  41cd8c:	4b10      	ldr	r3, [pc, #64]	; (41cdd0 <basic_init+0x101c>)
  41cd8e:	4798      	blx	r3
  41cd90:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cd94:	3050      	adds	r0, #80	; 0x50
  41cd96:	4a14      	ldr	r2, [pc, #80]	; (41cde8 <basic_init+0x1034>)
  41cd98:	fb82 3200 	smull	r3, r2, r2, r0
  41cd9c:	17c4      	asrs	r4, r0, #31
  41cd9e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41cda2:	b2a4      	uxth	r4, r4
  41cda4:	f7ff b977 	b.w	41c096 <basic_init+0x2e2>
  41cda8:	2000      	movs	r0, #0
  41cdaa:	4b09      	ldr	r3, [pc, #36]	; (41cdd0 <basic_init+0x101c>)
  41cdac:	4798      	blx	r3
  41cdae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cdb2:	0040      	lsls	r0, r0, #1
  41cdb4:	3050      	adds	r0, #80	; 0x50
  41cdb6:	4a0c      	ldr	r2, [pc, #48]	; (41cde8 <basic_init+0x1034>)
  41cdb8:	fb82 3200 	smull	r3, r2, r2, r0
  41cdbc:	17c4      	asrs	r4, r0, #31
  41cdbe:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41cdc2:	b2a4      	uxth	r4, r4
  41cdc4:	f7ff b967 	b.w	41c096 <basic_init+0x2e2>
  41cdc8:	00409f49 	.word	0x00409f49
  41cdcc:	204147a8 	.word	0x204147a8
  41cdd0:	00414955 	.word	0x00414955
  41cdd4:	204147ac 	.word	0x204147ac
  41cdd8:	0040a269 	.word	0x0040a269
  41cddc:	0040a0d9 	.word	0x0040a0d9
  41cde0:	0041851d 	.word	0x0041851d
  41cde4:	00414975 	.word	0x00414975
  41cde8:	66666667 	.word	0x66666667
  41cdec:	2000      	movs	r0, #0
  41cdee:	4bdf      	ldr	r3, [pc, #892]	; (41d16c <basic_init+0x13b8>)
  41cdf0:	4798      	blx	r3
  41cdf2:	3028      	adds	r0, #40	; 0x28
  41cdf4:	0040      	lsls	r0, r0, #1
  41cdf6:	4bde      	ldr	r3, [pc, #888]	; (41d170 <basic_init+0x13bc>)
  41cdf8:	fb83 2300 	smull	r2, r3, r3, r0
  41cdfc:	17c2      	asrs	r2, r0, #31
  41cdfe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ce02:	b292      	uxth	r2, r2
  41ce04:	f7ff b951 	b.w	41c0aa <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41ce08:	2000      	movs	r0, #0
  41ce0a:	4bd8      	ldr	r3, [pc, #864]	; (41d16c <basic_init+0x13b8>)
  41ce0c:	4798      	blx	r3
  41ce0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ce12:	3050      	adds	r0, #80	; 0x50
  41ce14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ce18:	da02      	bge.n	41ce20 <basic_init+0x106c>
  41ce1a:	2401      	movs	r4, #1
  41ce1c:	f7ff b974 	b.w	41c108 <basic_init+0x354>
  41ce20:	2000      	movs	r0, #0
  41ce22:	4bd2      	ldr	r3, [pc, #840]	; (41d16c <basic_init+0x13b8>)
  41ce24:	4798      	blx	r3
  41ce26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ce2a:	3050      	adds	r0, #80	; 0x50
  41ce2c:	4ad0      	ldr	r2, [pc, #832]	; (41d170 <basic_init+0x13bc>)
  41ce2e:	fb82 3200 	smull	r3, r2, r2, r0
  41ce32:	17c4      	asrs	r4, r0, #31
  41ce34:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41ce38:	b2a4      	uxth	r4, r4
  41ce3a:	f7ff b965 	b.w	41c108 <basic_init+0x354>
  41ce3e:	2000      	movs	r0, #0
  41ce40:	4bca      	ldr	r3, [pc, #808]	; (41d16c <basic_init+0x13b8>)
  41ce42:	4798      	blx	r3
  41ce44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ce48:	0040      	lsls	r0, r0, #1
  41ce4a:	3050      	adds	r0, #80	; 0x50
  41ce4c:	4ac8      	ldr	r2, [pc, #800]	; (41d170 <basic_init+0x13bc>)
  41ce4e:	fb82 3200 	smull	r3, r2, r2, r0
  41ce52:	17c4      	asrs	r4, r0, #31
  41ce54:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41ce58:	b2a4      	uxth	r4, r4
  41ce5a:	f7ff b955 	b.w	41c108 <basic_init+0x354>
  41ce5e:	2000      	movs	r0, #0
  41ce60:	4bc2      	ldr	r3, [pc, #776]	; (41d16c <basic_init+0x13b8>)
  41ce62:	4798      	blx	r3
  41ce64:	3028      	adds	r0, #40	; 0x28
  41ce66:	0040      	lsls	r0, r0, #1
  41ce68:	4bc1      	ldr	r3, [pc, #772]	; (41d170 <basic_init+0x13bc>)
  41ce6a:	fb83 2300 	smull	r2, r3, r3, r0
  41ce6e:	17c2      	asrs	r2, r0, #31
  41ce70:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ce74:	b292      	uxth	r2, r2
  41ce76:	f7ff b951 	b.w	41c11c <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41ce7a:	2000      	movs	r0, #0
  41ce7c:	4bbb      	ldr	r3, [pc, #748]	; (41d16c <basic_init+0x13b8>)
  41ce7e:	4798      	blx	r3
  41ce80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ce84:	3050      	adds	r0, #80	; 0x50
  41ce86:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ce8a:	da02      	bge.n	41ce92 <basic_init+0x10de>
  41ce8c:	2401      	movs	r4, #1
  41ce8e:	f7ff b960 	b.w	41c152 <basic_init+0x39e>
  41ce92:	2000      	movs	r0, #0
  41ce94:	4bb5      	ldr	r3, [pc, #724]	; (41d16c <basic_init+0x13b8>)
  41ce96:	4798      	blx	r3
  41ce98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ce9c:	3050      	adds	r0, #80	; 0x50
  41ce9e:	4ab4      	ldr	r2, [pc, #720]	; (41d170 <basic_init+0x13bc>)
  41cea0:	fb82 3200 	smull	r3, r2, r2, r0
  41cea4:	17c4      	asrs	r4, r0, #31
  41cea6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41ceaa:	b2a4      	uxth	r4, r4
  41ceac:	f7ff b951 	b.w	41c152 <basic_init+0x39e>
  41ceb0:	2000      	movs	r0, #0
  41ceb2:	4bae      	ldr	r3, [pc, #696]	; (41d16c <basic_init+0x13b8>)
  41ceb4:	4798      	blx	r3
  41ceb6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ceba:	0040      	lsls	r0, r0, #1
  41cebc:	3050      	adds	r0, #80	; 0x50
  41cebe:	4aac      	ldr	r2, [pc, #688]	; (41d170 <basic_init+0x13bc>)
  41cec0:	fb82 3200 	smull	r3, r2, r2, r0
  41cec4:	17c4      	asrs	r4, r0, #31
  41cec6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41ceca:	b2a4      	uxth	r4, r4
  41cecc:	f7ff b941 	b.w	41c152 <basic_init+0x39e>
  41ced0:	2000      	movs	r0, #0
  41ced2:	4ba6      	ldr	r3, [pc, #664]	; (41d16c <basic_init+0x13b8>)
  41ced4:	4798      	blx	r3
  41ced6:	3028      	adds	r0, #40	; 0x28
  41ced8:	0040      	lsls	r0, r0, #1
  41ceda:	4ba5      	ldr	r3, [pc, #660]	; (41d170 <basic_init+0x13bc>)
  41cedc:	fb83 2300 	smull	r2, r3, r3, r0
  41cee0:	17c2      	asrs	r2, r0, #31
  41cee2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cee6:	b292      	uxth	r2, r2
  41cee8:	f7ff b93d 	b.w	41c166 <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41ceec:	2000      	movs	r0, #0
  41ceee:	4b9f      	ldr	r3, [pc, #636]	; (41d16c <basic_init+0x13b8>)
  41cef0:	4798      	blx	r3
  41cef2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cef6:	3050      	adds	r0, #80	; 0x50
  41cef8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cefc:	da02      	bge.n	41cf04 <basic_init+0x1150>
  41cefe:	2401      	movs	r4, #1
  41cf00:	f7ff b94c 	b.w	41c19c <basic_init+0x3e8>
  41cf04:	2000      	movs	r0, #0
  41cf06:	4b99      	ldr	r3, [pc, #612]	; (41d16c <basic_init+0x13b8>)
  41cf08:	4798      	blx	r3
  41cf0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf0e:	3050      	adds	r0, #80	; 0x50
  41cf10:	4a97      	ldr	r2, [pc, #604]	; (41d170 <basic_init+0x13bc>)
  41cf12:	fb82 3200 	smull	r3, r2, r2, r0
  41cf16:	17c4      	asrs	r4, r0, #31
  41cf18:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41cf1c:	b2a4      	uxth	r4, r4
  41cf1e:	f7ff b93d 	b.w	41c19c <basic_init+0x3e8>
  41cf22:	2000      	movs	r0, #0
  41cf24:	4b91      	ldr	r3, [pc, #580]	; (41d16c <basic_init+0x13b8>)
  41cf26:	4798      	blx	r3
  41cf28:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf2c:	0040      	lsls	r0, r0, #1
  41cf2e:	3050      	adds	r0, #80	; 0x50
  41cf30:	4a8f      	ldr	r2, [pc, #572]	; (41d170 <basic_init+0x13bc>)
  41cf32:	fb82 3200 	smull	r3, r2, r2, r0
  41cf36:	17c4      	asrs	r4, r0, #31
  41cf38:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41cf3c:	b2a4      	uxth	r4, r4
  41cf3e:	f7ff b92d 	b.w	41c19c <basic_init+0x3e8>
  41cf42:	2000      	movs	r0, #0
  41cf44:	4b89      	ldr	r3, [pc, #548]	; (41d16c <basic_init+0x13b8>)
  41cf46:	4798      	blx	r3
  41cf48:	3028      	adds	r0, #40	; 0x28
  41cf4a:	0040      	lsls	r0, r0, #1
  41cf4c:	4b88      	ldr	r3, [pc, #544]	; (41d170 <basic_init+0x13bc>)
  41cf4e:	fb83 2300 	smull	r2, r3, r3, r0
  41cf52:	17c2      	asrs	r2, r0, #31
  41cf54:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cf58:	b292      	uxth	r2, r2
  41cf5a:	f7ff b929 	b.w	41c1b0 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41cf5e:	2000      	movs	r0, #0
  41cf60:	4b82      	ldr	r3, [pc, #520]	; (41d16c <basic_init+0x13b8>)
  41cf62:	4798      	blx	r3
  41cf64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf68:	3050      	adds	r0, #80	; 0x50
  41cf6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41cf6e:	da02      	bge.n	41cf76 <basic_init+0x11c2>
  41cf70:	2201      	movs	r2, #1
  41cf72:	f7ff b938 	b.w	41c1e6 <basic_init+0x432>
  41cf76:	2000      	movs	r0, #0
  41cf78:	4b7c      	ldr	r3, [pc, #496]	; (41d16c <basic_init+0x13b8>)
  41cf7a:	4798      	blx	r3
  41cf7c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf80:	3050      	adds	r0, #80	; 0x50
  41cf82:	4b7b      	ldr	r3, [pc, #492]	; (41d170 <basic_init+0x13bc>)
  41cf84:	fb83 2300 	smull	r2, r3, r3, r0
  41cf88:	17c2      	asrs	r2, r0, #31
  41cf8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cf8e:	b212      	sxth	r2, r2
  41cf90:	f7ff b929 	b.w	41c1e6 <basic_init+0x432>
  41cf94:	2000      	movs	r0, #0
  41cf96:	4b75      	ldr	r3, [pc, #468]	; (41d16c <basic_init+0x13b8>)
  41cf98:	4798      	blx	r3
  41cf9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41cf9e:	0040      	lsls	r0, r0, #1
  41cfa0:	3050      	adds	r0, #80	; 0x50
  41cfa2:	4b73      	ldr	r3, [pc, #460]	; (41d170 <basic_init+0x13bc>)
  41cfa4:	fb83 2300 	smull	r2, r3, r3, r0
  41cfa8:	17c2      	asrs	r2, r0, #31
  41cfaa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41cfae:	b212      	sxth	r2, r2
  41cfb0:	f7ff b919 	b.w	41c1e6 <basic_init+0x432>
  41cfb4:	2302      	movs	r3, #2
  41cfb6:	f04f 0200 	mov.w	r2, #0
  41cfba:	f363 0202 	bfi	r2, r3, #0, #3
  41cfbe:	2108      	movs	r1, #8
  41cfc0:	f361 02c7 	bfi	r2, r1, #3, #5
  41cfc4:	2109      	movs	r1, #9
  41cfc6:	f361 220c 	bfi	r2, r1, #8, #5
  41cfca:	f363 324f 	bfi	r2, r3, #13, #3
  41cfce:	f7ff b938 	b.w	41c242 <basic_init+0x48e>
  41cfd2:	f04f 0200 	mov.w	r2, #0
  41cfd6:	2302      	movs	r3, #2
  41cfd8:	f363 0202 	bfi	r2, r3, #0, #3
  41cfdc:	2308      	movs	r3, #8
  41cfde:	f363 02c7 	bfi	r2, r3, #3, #5
  41cfe2:	f363 220c 	bfi	r2, r3, #8, #5
  41cfe6:	f36f 324f 	bfc	r2, #13, #3
  41cfea:	f7ff b941 	b.w	41c270 <basic_init+0x4bc>
  41cfee:	f04f 0200 	mov.w	r2, #0
  41cff2:	2305      	movs	r3, #5
  41cff4:	f363 0202 	bfi	r2, r3, #0, #3
  41cff8:	2314      	movs	r3, #20
  41cffa:	f363 02c7 	bfi	r2, r3, #3, #5
  41cffe:	2315      	movs	r3, #21
  41d000:	f363 220c 	bfi	r2, r3, #8, #5
  41d004:	2302      	movs	r3, #2
  41d006:	f363 324f 	bfi	r2, r3, #13, #3
  41d00a:	f7ff b94a 	b.w	41c2a2 <basic_init+0x4ee>
  41d00e:	f04f 0200 	mov.w	r2, #0
  41d012:	2305      	movs	r3, #5
  41d014:	f363 0202 	bfi	r2, r3, #0, #3
  41d018:	2314      	movs	r3, #20
  41d01a:	f363 02c7 	bfi	r2, r3, #3, #5
  41d01e:	2315      	movs	r3, #21
  41d020:	f363 220c 	bfi	r2, r3, #8, #5
  41d024:	2302      	movs	r3, #2
  41d026:	f363 324f 	bfi	r2, r3, #13, #3
  41d02a:	f7ff b954 	b.w	41c2d6 <basic_init+0x522>
  41d02e:	f04f 0200 	mov.w	r2, #0
  41d032:	2305      	movs	r3, #5
  41d034:	f363 0202 	bfi	r2, r3, #0, #3
  41d038:	2314      	movs	r3, #20
  41d03a:	f363 02c7 	bfi	r2, r3, #3, #5
  41d03e:	2315      	movs	r3, #21
  41d040:	f363 220c 	bfi	r2, r3, #8, #5
  41d044:	2302      	movs	r3, #2
  41d046:	f363 324f 	bfi	r2, r3, #13, #3
  41d04a:	f7ff b95d 	b.w	41c308 <basic_init+0x554>
  41d04e:	f04f 0200 	mov.w	r2, #0
  41d052:	2305      	movs	r3, #5
  41d054:	f363 0202 	bfi	r2, r3, #0, #3
  41d058:	2314      	movs	r3, #20
  41d05a:	f363 02c7 	bfi	r2, r3, #3, #5
  41d05e:	2315      	movs	r3, #21
  41d060:	f363 220c 	bfi	r2, r3, #8, #5
  41d064:	2302      	movs	r3, #2
  41d066:	f363 324f 	bfi	r2, r3, #13, #3
  41d06a:	f7ff b967 	b.w	41c33c <basic_init+0x588>
  41d06e:	f04f 0200 	mov.w	r2, #0
  41d072:	2302      	movs	r3, #2
  41d074:	f363 0202 	bfi	r2, r3, #0, #3
  41d078:	2309      	movs	r3, #9
  41d07a:	f363 02c7 	bfi	r2, r3, #3, #5
  41d07e:	230a      	movs	r3, #10
  41d080:	f363 220c 	bfi	r2, r3, #8, #5
  41d084:	2303      	movs	r3, #3
  41d086:	f363 324f 	bfi	r2, r3, #13, #3
  41d08a:	f7ff b971 	b.w	41c370 <basic_init+0x5bc>
  41d08e:	f04f 0200 	mov.w	r2, #0
  41d092:	2303      	movs	r3, #3
  41d094:	f363 0202 	bfi	r2, r3, #0, #3
  41d098:	230b      	movs	r3, #11
  41d09a:	f363 02c7 	bfi	r2, r3, #3, #5
  41d09e:	230e      	movs	r3, #14
  41d0a0:	f363 220c 	bfi	r2, r3, #8, #5
  41d0a4:	f36f 324f 	bfc	r2, #13, #3
  41d0a8:	f7ff b982 	b.w	41c3b0 <basic_init+0x5fc>
  41d0ac:	f04f 0200 	mov.w	r2, #0
  41d0b0:	2303      	movs	r3, #3
  41d0b2:	f363 0202 	bfi	r2, r3, #0, #3
  41d0b6:	230b      	movs	r3, #11
  41d0b8:	f363 02c7 	bfi	r2, r3, #3, #5
  41d0bc:	230d      	movs	r3, #13
  41d0be:	f363 220c 	bfi	r2, r3, #8, #5
  41d0c2:	2301      	movs	r3, #1
  41d0c4:	f363 324f 	bfi	r2, r3, #13, #3
  41d0c8:	f7ff b9b1 	b.w	41c42e <basic_init+0x67a>
  41d0cc:	f04f 0200 	mov.w	r2, #0
  41d0d0:	2303      	movs	r3, #3
  41d0d2:	f363 0202 	bfi	r2, r3, #0, #3
  41d0d6:	230b      	movs	r3, #11
  41d0d8:	f363 02c7 	bfi	r2, r3, #3, #5
  41d0dc:	230d      	movs	r3, #13
  41d0de:	f363 220c 	bfi	r2, r3, #8, #5
  41d0e2:	2301      	movs	r3, #1
  41d0e4:	f363 324f 	bfi	r2, r3, #13, #3
  41d0e8:	f7ff b9bd 	b.w	41c466 <basic_init+0x6b2>
  41d0ec:	f04f 0200 	mov.w	r2, #0
  41d0f0:	2303      	movs	r3, #3
  41d0f2:	f363 0202 	bfi	r2, r3, #0, #3
  41d0f6:	230b      	movs	r3, #11
  41d0f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41d0fc:	230d      	movs	r3, #13
  41d0fe:	f363 220c 	bfi	r2, r3, #8, #5
  41d102:	2301      	movs	r3, #1
  41d104:	f363 324f 	bfi	r2, r3, #13, #3
  41d108:	f7ff b9c9 	b.w	41c49e <basic_init+0x6ea>
  41d10c:	f04f 0200 	mov.w	r2, #0
  41d110:	2303      	movs	r3, #3
  41d112:	f363 0202 	bfi	r2, r3, #0, #3
  41d116:	230b      	movs	r3, #11
  41d118:	f363 02c7 	bfi	r2, r3, #3, #5
  41d11c:	230d      	movs	r3, #13
  41d11e:	f363 220c 	bfi	r2, r3, #8, #5
  41d122:	2301      	movs	r3, #1
  41d124:	f363 324f 	bfi	r2, r3, #13, #3
  41d128:	f7ff b9d5 	b.w	41c4d6 <basic_init+0x722>
  41d12c:	f04f 32ff 	mov.w	r2, #4294967295
  41d130:	f7ff b9ed 	b.w	41c50e <basic_init+0x75a>
  41d134:	f04f 32ff 	mov.w	r2, #4294967295
  41d138:	f7ff b9f8 	b.w	41c52c <basic_init+0x778>
  41d13c:	f04f 32ff 	mov.w	r2, #4294967295
  41d140:	f7ff ba03 	b.w	41c54a <basic_init+0x796>
  41d144:	f04f 0200 	mov.w	r2, #0
  41d148:	2304      	movs	r3, #4
  41d14a:	f363 0202 	bfi	r2, r3, #0, #3
  41d14e:	2313      	movs	r3, #19
  41d150:	f363 02c7 	bfi	r2, r3, #3, #5
  41d154:	f363 220c 	bfi	r2, r3, #8, #5
  41d158:	2306      	movs	r3, #6
  41d15a:	f363 324f 	bfi	r2, r3, #13, #3
  41d15e:	f7ff ba0e 	b.w	41c57e <basic_init+0x7ca>
  41d162:	f04f 32ff 	mov.w	r2, #4294967295
  41d166:	f7ff ba26 	b.w	41c5b6 <basic_init+0x802>
  41d16a:	bf00      	nop
  41d16c:	00414955 	.word	0x00414955
  41d170:	66666667 	.word	0x66666667
  41d174:	f04f 32ff 	mov.w	r2, #4294967295
  41d178:	f7ff ba2c 	b.w	41c5d4 <basic_init+0x820>
  41d17c:	f04f 32ff 	mov.w	r2, #4294967295
  41d180:	f7ff ba37 	b.w	41c5f2 <basic_init+0x83e>
  41d184:	f04f 0200 	mov.w	r2, #0
  41d188:	2304      	movs	r3, #4
  41d18a:	f363 0202 	bfi	r2, r3, #0, #3
  41d18e:	2313      	movs	r3, #19
  41d190:	f363 02c7 	bfi	r2, r3, #3, #5
  41d194:	f363 220c 	bfi	r2, r3, #8, #5
  41d198:	2306      	movs	r3, #6
  41d19a:	f363 324f 	bfi	r2, r3, #13, #3
  41d19e:	f7ff ba42 	b.w	41c626 <basic_init+0x872>
  41d1a2:	f04f 0200 	mov.w	r2, #0
  41d1a6:	2303      	movs	r3, #3
  41d1a8:	f363 0202 	bfi	r2, r3, #0, #3
  41d1ac:	230b      	movs	r3, #11
  41d1ae:	f363 02c7 	bfi	r2, r3, #3, #5
  41d1b2:	230e      	movs	r3, #14
  41d1b4:	f363 220c 	bfi	r2, r3, #8, #5
  41d1b8:	f36f 324f 	bfc	r2, #13, #3
  41d1bc:	f7ff ba58 	b.w	41c670 <basic_init+0x8bc>
  41d1c0:	f04f 0400 	mov.w	r4, #0
  41d1c4:	2303      	movs	r3, #3
  41d1c6:	f363 0402 	bfi	r4, r3, #0, #3
  41d1ca:	230b      	movs	r3, #11
  41d1cc:	f363 04c7 	bfi	r4, r3, #3, #5
  41d1d0:	230e      	movs	r3, #14
  41d1d2:	f363 240c 	bfi	r4, r3, #8, #5
  41d1d6:	f36f 344f 	bfc	r4, #13, #3
  41d1da:	4bc2      	ldr	r3, [pc, #776]	; (41d4e4 <basic_init+0x1730>)
  41d1dc:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41d1de:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41d1e2:	264c      	movs	r6, #76	; 0x4c
  41d1e4:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41d1e8:	25b3      	movs	r5, #179	; 0xb3
  41d1ea:	fb05 f101 	mul.w	r1, r5, r1
  41d1ee:	fb06 1202 	mla	r2, r6, r2, r1
  41d1f2:	3280      	adds	r2, #128	; 0x80
  41d1f4:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41d1f8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41d1fc:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41d200:	f04f 0200 	mov.w	r2, #0
  41d204:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41d208:	f003 0707 	and.w	r7, r3, #7
  41d20c:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41d210:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41d214:	f004 0707 	and.w	r7, r4, #7
  41d218:	00ff      	lsls	r7, r7, #3
  41d21a:	fb05 f707 	mul.w	r7, r5, r7
  41d21e:	fb06 7101 	mla	r1, r6, r1, r7
  41d222:	3180      	adds	r1, #128	; 0x80
  41d224:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41d228:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41d22c:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41d230:	f367 0202 	bfi	r2, r7, #0, #3
  41d234:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41d238:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41d23c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41d240:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41d244:	fb05 f404 	mul.w	r4, r5, r4
  41d248:	fb06 4303 	mla	r3, r6, r3, r4
  41d24c:	3380      	adds	r3, #128	; 0x80
  41d24e:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41d252:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41d256:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41d25a:	f363 220c 	bfi	r2, r3, #8, #5
  41d25e:	f7ff ba5e 	b.w	41c71e <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41d262:	f04f 0200 	mov.w	r2, #0
  41d266:	2303      	movs	r3, #3
  41d268:	f363 0202 	bfi	r2, r3, #0, #3
  41d26c:	230b      	movs	r3, #11
  41d26e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d272:	230e      	movs	r3, #14
  41d274:	f363 220c 	bfi	r2, r3, #8, #5
  41d278:	f36f 324f 	bfc	r2, #13, #3
  41d27c:	f7ff ba7e 	b.w	41c77c <basic_init+0x9c8>
  41d280:	f04f 0200 	mov.w	r2, #0
  41d284:	2304      	movs	r3, #4
  41d286:	f363 0202 	bfi	r2, r3, #0, #3
  41d28a:	2311      	movs	r3, #17
  41d28c:	f363 02c7 	bfi	r2, r3, #3, #5
  41d290:	f363 220c 	bfi	r2, r3, #8, #5
  41d294:	2302      	movs	r3, #2
  41d296:	f363 324f 	bfi	r2, r3, #13, #3
  41d29a:	f7ff ba89 	b.w	41c7b0 <basic_init+0x9fc>
  41d29e:	f04f 0200 	mov.w	r2, #0
  41d2a2:	2302      	movs	r3, #2
  41d2a4:	f363 0202 	bfi	r2, r3, #0, #3
  41d2a8:	2308      	movs	r3, #8
  41d2aa:	f363 02c7 	bfi	r2, r3, #3, #5
  41d2ae:	f363 220c 	bfi	r2, r3, #8, #5
  41d2b2:	f36f 324f 	bfc	r2, #13, #3
  41d2b6:	f7ff baa0 	b.w	41c7fa <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41d2ba:	2000      	movs	r0, #0
  41d2bc:	4b8a      	ldr	r3, [pc, #552]	; (41d4e8 <basic_init+0x1734>)
  41d2be:	4798      	blx	r3
  41d2c0:	3028      	adds	r0, #40	; 0x28
  41d2c2:	0040      	lsls	r0, r0, #1
  41d2c4:	4b89      	ldr	r3, [pc, #548]	; (41d4ec <basic_init+0x1738>)
  41d2c6:	fb83 2300 	smull	r2, r3, r3, r0
  41d2ca:	17c2      	asrs	r2, r0, #31
  41d2cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d2d0:	b212      	sxth	r2, r2
  41d2d2:	f7ff baa3 	b.w	41c81c <basic_init+0xa68>
  41d2d6:	f04f 32ff 	mov.w	r2, #4294967295
  41d2da:	f7ff bac0 	b.w	41c85e <basic_init+0xaaa>
  41d2de:	f04f 32ff 	mov.w	r2, #4294967295
  41d2e2:	f7ff bad6 	b.w	41c892 <basic_init+0xade>
  41d2e6:	f04f 0200 	mov.w	r2, #0
  41d2ea:	2304      	movs	r3, #4
  41d2ec:	f363 0202 	bfi	r2, r3, #0, #3
  41d2f0:	2311      	movs	r3, #17
  41d2f2:	f363 02c7 	bfi	r2, r3, #3, #5
  41d2f6:	f363 220c 	bfi	r2, r3, #8, #5
  41d2fa:	2302      	movs	r3, #2
  41d2fc:	f363 324f 	bfi	r2, r3, #13, #3
  41d300:	f7ff baef 	b.w	41c8e2 <basic_init+0xb2e>
  41d304:	f04f 32ff 	mov.w	r2, #4294967295
  41d308:	f7ff bb05 	b.w	41c916 <basic_init+0xb62>
  41d30c:	f04f 32ff 	mov.w	r2, #4294967295
  41d310:	f7ff bb1b 	b.w	41c94a <basic_init+0xb96>
  41d314:	f04f 0200 	mov.w	r2, #0
  41d318:	2304      	movs	r3, #4
  41d31a:	f363 0202 	bfi	r2, r3, #0, #3
  41d31e:	2311      	movs	r3, #17
  41d320:	f363 02c7 	bfi	r2, r3, #3, #5
  41d324:	f363 220c 	bfi	r2, r3, #8, #5
  41d328:	2302      	movs	r3, #2
  41d32a:	f363 324f 	bfi	r2, r3, #13, #3
  41d32e:	f7ff bb34 	b.w	41c99a <basic_init+0xbe6>
  41d332:	f04f 32ff 	mov.w	r2, #4294967295
  41d336:	f7ff bb4a 	b.w	41c9ce <basic_init+0xc1a>
  41d33a:	f04f 32ff 	mov.w	r2, #4294967295
  41d33e:	f7ff bb5f 	b.w	41ca00 <basic_init+0xc4c>
  41d342:	f04f 0200 	mov.w	r2, #0
  41d346:	2304      	movs	r3, #4
  41d348:	f363 0202 	bfi	r2, r3, #0, #3
  41d34c:	2311      	movs	r3, #17
  41d34e:	f363 02c7 	bfi	r2, r3, #3, #5
  41d352:	f363 220c 	bfi	r2, r3, #8, #5
  41d356:	2302      	movs	r3, #2
  41d358:	f363 324f 	bfi	r2, r3, #13, #3
  41d35c:	f7ff bb78 	b.w	41ca50 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41d360:	2000      	movs	r0, #0
  41d362:	4b61      	ldr	r3, [pc, #388]	; (41d4e8 <basic_init+0x1734>)
  41d364:	4798      	blx	r3
  41d366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d36a:	00c0      	lsls	r0, r0, #3
  41d36c:	3050      	adds	r0, #80	; 0x50
  41d36e:	4b5f      	ldr	r3, [pc, #380]	; (41d4ec <basic_init+0x1738>)
  41d370:	fb83 2300 	smull	r2, r3, r3, r0
  41d374:	17c2      	asrs	r2, r0, #31
  41d376:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d37a:	b212      	sxth	r2, r2
  41d37c:	f7ff bb7b 	b.w	41ca76 <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41d380:	2000      	movs	r0, #0
  41d382:	4b59      	ldr	r3, [pc, #356]	; (41d4e8 <basic_init+0x1734>)
  41d384:	4798      	blx	r3
  41d386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d38a:	00c0      	lsls	r0, r0, #3
  41d38c:	3050      	adds	r0, #80	; 0x50
  41d38e:	4b57      	ldr	r3, [pc, #348]	; (41d4ec <basic_init+0x1738>)
  41d390:	fb83 2300 	smull	r2, r3, r3, r0
  41d394:	17c2      	asrs	r2, r0, #31
  41d396:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d39a:	b212      	sxth	r2, r2
  41d39c:	f7ff bb8c 	b.w	41cab8 <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d3a0:	2000      	movs	r0, #0
  41d3a2:	4b51      	ldr	r3, [pc, #324]	; (41d4e8 <basic_init+0x1734>)
  41d3a4:	4798      	blx	r3
  41d3a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d3aa:	3050      	adds	r0, #80	; 0x50
  41d3ac:	4b4f      	ldr	r3, [pc, #316]	; (41d4ec <basic_init+0x1738>)
  41d3ae:	fb83 2300 	smull	r2, r3, r3, r0
  41d3b2:	17c2      	asrs	r2, r0, #31
  41d3b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d3b8:	b212      	sxth	r2, r2
  41d3ba:	f7ff bb8f 	b.w	41cadc <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41d3be:	2000      	movs	r0, #0
  41d3c0:	4b49      	ldr	r3, [pc, #292]	; (41d4e8 <basic_init+0x1734>)
  41d3c2:	4798      	blx	r3
  41d3c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41d3c8:	3050      	adds	r0, #80	; 0x50
  41d3ca:	4b48      	ldr	r3, [pc, #288]	; (41d4ec <basic_init+0x1738>)
  41d3cc:	fb83 2300 	smull	r2, r3, r3, r0
  41d3d0:	17c2      	asrs	r2, r0, #31
  41d3d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d3d6:	b212      	sxth	r2, r2
  41d3d8:	f7ff bb92 	b.w	41cb00 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41d3dc:	2000      	movs	r0, #0
  41d3de:	4b42      	ldr	r3, [pc, #264]	; (41d4e8 <basic_init+0x1734>)
  41d3e0:	4798      	blx	r3
  41d3e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d3e6:	0080      	lsls	r0, r0, #2
  41d3e8:	3050      	adds	r0, #80	; 0x50
  41d3ea:	4b40      	ldr	r3, [pc, #256]	; (41d4ec <basic_init+0x1738>)
  41d3ec:	fb83 2300 	smull	r2, r3, r3, r0
  41d3f0:	17c2      	asrs	r2, r0, #31
  41d3f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d3f6:	b212      	sxth	r2, r2
  41d3f8:	f7ff bb95 	b.w	41cb26 <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41d3fc:	2000      	movs	r0, #0
  41d3fe:	4b3a      	ldr	r3, [pc, #232]	; (41d4e8 <basic_init+0x1734>)
  41d400:	4798      	blx	r3
  41d402:	3028      	adds	r0, #40	; 0x28
  41d404:	0040      	lsls	r0, r0, #1
  41d406:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d40a:	da02      	bge.n	41d412 <basic_init+0x165e>
  41d40c:	2201      	movs	r2, #1
  41d40e:	f7ff bb98 	b.w	41cb42 <basic_init+0xd8e>
  41d412:	2000      	movs	r0, #0
  41d414:	4b34      	ldr	r3, [pc, #208]	; (41d4e8 <basic_init+0x1734>)
  41d416:	4798      	blx	r3
  41d418:	3028      	adds	r0, #40	; 0x28
  41d41a:	0040      	lsls	r0, r0, #1
  41d41c:	4b33      	ldr	r3, [pc, #204]	; (41d4ec <basic_init+0x1738>)
  41d41e:	fb83 2300 	smull	r2, r3, r3, r0
  41d422:	17c2      	asrs	r2, r0, #31
  41d424:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41d428:	b212      	sxth	r2, r2
  41d42a:	f7ff bb8a 	b.w	41cb42 <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d42e:	2000      	movs	r0, #0
  41d430:	4b2d      	ldr	r3, [pc, #180]	; (41d4e8 <basic_init+0x1734>)
  41d432:	4798      	blx	r3
  41d434:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d438:	0080      	lsls	r0, r0, #2
  41d43a:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d43c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d440:	da02      	bge.n	41d448 <basic_init+0x1694>
  41d442:	2201      	movs	r2, #1
  41d444:	f7ff bbd2 	b.w	41cbec <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d448:	2000      	movs	r0, #0
  41d44a:	4b27      	ldr	r3, [pc, #156]	; (41d4e8 <basic_init+0x1734>)
  41d44c:	4798      	blx	r3
  41d44e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d452:	0080      	lsls	r0, r0, #2
  41d454:	3050      	adds	r0, #80	; 0x50
  41d456:	4b25      	ldr	r3, [pc, #148]	; (41d4ec <basic_init+0x1738>)
  41d458:	fb83 2300 	smull	r2, r3, r3, r0
  41d45c:	17c2      	asrs	r2, r0, #31
  41d45e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d462:	b212      	sxth	r2, r2
  41d464:	f7ff bbc2 	b.w	41cbec <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41d468:	2000      	movs	r0, #0
  41d46a:	4b1f      	ldr	r3, [pc, #124]	; (41d4e8 <basic_init+0x1734>)
  41d46c:	4798      	blx	r3
  41d46e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d472:	00c0      	lsls	r0, r0, #3
  41d474:	3050      	adds	r0, #80	; 0x50
  41d476:	4b1d      	ldr	r3, [pc, #116]	; (41d4ec <basic_init+0x1738>)
  41d478:	fb83 2300 	smull	r2, r3, r3, r0
  41d47c:	17c2      	asrs	r2, r0, #31
  41d47e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41d482:	b212      	sxth	r2, r2
  41d484:	f7ff bbb2 	b.w	41cbec <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41d488:	2000      	movs	r0, #0
  41d48a:	4b17      	ldr	r3, [pc, #92]	; (41d4e8 <basic_init+0x1734>)
  41d48c:	4798      	blx	r3
  41d48e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d492:	0040      	lsls	r0, r0, #1
  41d494:	3050      	adds	r0, #80	; 0x50
  41d496:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41d49a:	da02      	bge.n	41d4a2 <basic_init+0x16ee>
  41d49c:	2401      	movs	r4, #1
  41d49e:	f7ff bbc0 	b.w	41cc22 <basic_init+0xe6e>
  41d4a2:	2000      	movs	r0, #0
  41d4a4:	4b10      	ldr	r3, [pc, #64]	; (41d4e8 <basic_init+0x1734>)
  41d4a6:	4798      	blx	r3
  41d4a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d4ac:	0040      	lsls	r0, r0, #1
  41d4ae:	3050      	adds	r0, #80	; 0x50
  41d4b0:	4b0e      	ldr	r3, [pc, #56]	; (41d4ec <basic_init+0x1738>)
  41d4b2:	fb83 2300 	smull	r2, r3, r3, r0
  41d4b6:	17c4      	asrs	r4, r0, #31
  41d4b8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41d4bc:	b224      	sxth	r4, r4
  41d4be:	f7ff bbb0 	b.w	41cc22 <basic_init+0xe6e>
  41d4c2:	2000      	movs	r0, #0
  41d4c4:	4b08      	ldr	r3, [pc, #32]	; (41d4e8 <basic_init+0x1734>)
  41d4c6:	4798      	blx	r3
  41d4c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41d4cc:	0080      	lsls	r0, r0, #2
  41d4ce:	3050      	adds	r0, #80	; 0x50
  41d4d0:	4b06      	ldr	r3, [pc, #24]	; (41d4ec <basic_init+0x1738>)
  41d4d2:	fb83 2300 	smull	r2, r3, r3, r0
  41d4d6:	17c4      	asrs	r4, r0, #31
  41d4d8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41d4dc:	b224      	sxth	r4, r4
  41d4de:	f7ff bba0 	b.w	41cc22 <basic_init+0xe6e>
  41d4e2:	bf00      	nop
  41d4e4:	204147ac 	.word	0x204147ac
  41d4e8:	00414955 	.word	0x00414955
  41d4ec:	66666667 	.word	0x66666667

0041d4f0 <lv_theme_material_init>:
{
  41d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41d4f4:	4680      	mov	r8, r0
  41d4f6:	460f      	mov	r7, r1
  41d4f8:	4615      	mov	r5, r2
  41d4fa:	461e      	mov	r6, r3
    if(!inited) {
  41d4fc:	4b27      	ldr	r3, [pc, #156]	; (41d59c <lv_theme_material_init+0xac>)
  41d4fe:	781b      	ldrb	r3, [r3, #0]
  41d500:	2b00      	cmp	r3, #0
  41d502:	d043      	beq.n	41d58c <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41d504:	4c26      	ldr	r4, [pc, #152]	; (41d5a0 <lv_theme_material_init+0xb0>)
  41d506:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41d50a:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41d50c:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41d50e:	9b06      	ldr	r3, [sp, #24]
  41d510:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41d512:	9b07      	ldr	r3, [sp, #28]
  41d514:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41d516:	9b08      	ldr	r3, [sp, #32]
  41d518:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41d51a:	6225      	str	r5, [r4, #32]
    basic_init();
  41d51c:	4b21      	ldr	r3, [pc, #132]	; (41d5a4 <lv_theme_material_init+0xb4>)
  41d51e:	4798      	blx	r3
    bar_init();
  41d520:	4b21      	ldr	r3, [pc, #132]	; (41d5a8 <lv_theme_material_init+0xb8>)
  41d522:	4798      	blx	r3
    led_init();
  41d524:	4b21      	ldr	r3, [pc, #132]	; (41d5ac <lv_theme_material_init+0xbc>)
  41d526:	4798      	blx	r3
    slider_init();
  41d528:	4b21      	ldr	r3, [pc, #132]	; (41d5b0 <lv_theme_material_init+0xc0>)
  41d52a:	4798      	blx	r3
    switch_init();
  41d52c:	4b21      	ldr	r3, [pc, #132]	; (41d5b4 <lv_theme_material_init+0xc4>)
  41d52e:	4798      	blx	r3
    linemeter_init();
  41d530:	4b21      	ldr	r3, [pc, #132]	; (41d5b8 <lv_theme_material_init+0xc8>)
  41d532:	4798      	blx	r3
    gauge_init();
  41d534:	4b21      	ldr	r3, [pc, #132]	; (41d5bc <lv_theme_material_init+0xcc>)
  41d536:	4798      	blx	r3
    arc_init();
  41d538:	4b21      	ldr	r3, [pc, #132]	; (41d5c0 <lv_theme_material_init+0xd0>)
  41d53a:	4798      	blx	r3
    chart_init();
  41d53c:	4b21      	ldr	r3, [pc, #132]	; (41d5c4 <lv_theme_material_init+0xd4>)
  41d53e:	4798      	blx	r3
    calendar_init();
  41d540:	4b21      	ldr	r3, [pc, #132]	; (41d5c8 <lv_theme_material_init+0xd8>)
  41d542:	4798      	blx	r3
    cpicker_init();
  41d544:	4b21      	ldr	r3, [pc, #132]	; (41d5cc <lv_theme_material_init+0xdc>)
  41d546:	4798      	blx	r3
    checkbox_init();
  41d548:	4b21      	ldr	r3, [pc, #132]	; (41d5d0 <lv_theme_material_init+0xe0>)
  41d54a:	4798      	blx	r3
    keyboard_init();
  41d54c:	4b21      	ldr	r3, [pc, #132]	; (41d5d4 <lv_theme_material_init+0xe4>)
  41d54e:	4798      	blx	r3
    msgbox_init();
  41d550:	4b21      	ldr	r3, [pc, #132]	; (41d5d8 <lv_theme_material_init+0xe8>)
  41d552:	4798      	blx	r3
    page_init();
  41d554:	4b21      	ldr	r3, [pc, #132]	; (41d5dc <lv_theme_material_init+0xec>)
  41d556:	4798      	blx	r3
    textarea_init();
  41d558:	4b21      	ldr	r3, [pc, #132]	; (41d5e0 <lv_theme_material_init+0xf0>)
  41d55a:	4798      	blx	r3
    spinbox_init();
  41d55c:	4b21      	ldr	r3, [pc, #132]	; (41d5e4 <lv_theme_material_init+0xf4>)
  41d55e:	4798      	blx	r3
    list_init();
  41d560:	4b21      	ldr	r3, [pc, #132]	; (41d5e8 <lv_theme_material_init+0xf8>)
  41d562:	4798      	blx	r3
    ddlist_init();
  41d564:	4b21      	ldr	r3, [pc, #132]	; (41d5ec <lv_theme_material_init+0xfc>)
  41d566:	4798      	blx	r3
    roller_init();
  41d568:	4b21      	ldr	r3, [pc, #132]	; (41d5f0 <lv_theme_material_init+0x100>)
  41d56a:	4798      	blx	r3
    table_init();
  41d56c:	4b21      	ldr	r3, [pc, #132]	; (41d5f4 <lv_theme_material_init+0x104>)
  41d56e:	4798      	blx	r3
    tabview_win_shared_init();
  41d570:	4b21      	ldr	r3, [pc, #132]	; (41d5f8 <lv_theme_material_init+0x108>)
  41d572:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41d574:	2000      	movs	r0, #0
  41d576:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41d578:	4b20      	ldr	r3, [pc, #128]	; (41d5fc <lv_theme_material_init+0x10c>)
  41d57a:	6023      	str	r3, [r4, #0]
    inited = true;
  41d57c:	2201      	movs	r2, #1
  41d57e:	4b07      	ldr	r3, [pc, #28]	; (41d59c <lv_theme_material_init+0xac>)
  41d580:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41d582:	4b1f      	ldr	r3, [pc, #124]	; (41d600 <lv_theme_material_init+0x110>)
  41d584:	4798      	blx	r3
}
  41d586:	4620      	mov	r0, r4
  41d588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41d58c:	20c0      	movs	r0, #192	; 0xc0
  41d58e:	4b1d      	ldr	r3, [pc, #116]	; (41d604 <lv_theme_material_init+0x114>)
  41d590:	4798      	blx	r3
  41d592:	4b1d      	ldr	r3, [pc, #116]	; (41d608 <lv_theme_material_init+0x118>)
  41d594:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41d596:	4b1d      	ldr	r3, [pc, #116]	; (41d60c <lv_theme_material_init+0x11c>)
  41d598:	6018      	str	r0, [r3, #0]
  41d59a:	e7b3      	b.n	41d504 <lv_theme_material_init+0x14>
  41d59c:	204147a4 	.word	0x204147a4
  41d5a0:	204147ac 	.word	0x204147ac
  41d5a4:	0041bdb5 	.word	0x0041bdb5
  41d5a8:	0041853d 	.word	0x0041853d
  41d5ac:	0041bca1 	.word	0x0041bca1
  41d5b0:	00418721 	.word	0x00418721
  41d5b4:	004189d5 	.word	0x004189d5
  41d5b8:	00418b19 	.word	0x00418b19
  41d5bc:	00418d61 	.word	0x00418d61
  41d5c0:	00419271 	.word	0x00419271
  41d5c4:	004193dd 	.word	0x004193dd
  41d5c8:	00419665 	.word	0x00419665
  41d5cc:	00419dfd 	.word	0x00419dfd
  41d5d0:	0041a08d 	.word	0x0041a08d
  41d5d4:	0041a3b5 	.word	0x0041a3b5
  41d5d8:	0041a5ad 	.word	0x0041a5ad
  41d5dc:	0041a651 	.word	0x0041a651
  41d5e0:	0041a7dd 	.word	0x0041a7dd
  41d5e4:	0041a925 	.word	0x0041a925
  41d5e8:	0041aa01 	.word	0x0041aa01
  41d5ec:	0041b225 	.word	0x0041b225
  41d5f0:	0041b369 	.word	0x0041b369
  41d5f4:	0041b415 	.word	0x0041b415
  41d5f8:	0041b6ad 	.word	0x0041b6ad
  41d5fc:	00417ef5 	.word	0x00417ef5
  41d600:	004078b1 	.word	0x004078b1
  41d604:	00416189 	.word	0x00416189
  41d608:	2043a270 	.word	0x2043a270
  41d60c:	204147a8 	.word	0x204147a8

0041d610 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
  41d610:	b508      	push	{r3, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
  41d612:	2a02      	cmp	r2, #2
  41d614:	d004      	beq.n	41d620 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41d616:	b13a      	cbz	r2, 41d628 <lv_btn_design+0x18>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
  41d618:	2a01      	cmp	r2, #1
  41d61a:	d00a      	beq.n	41d632 <lv_btn_design+0x22>
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
  41d61c:	2000      	movs	r0, #0
}
  41d61e:	bd08      	pop	{r3, pc}
        return ancestor_design(btn, clip_area, mode);
  41d620:	4b06      	ldr	r3, [pc, #24]	; (41d63c <lv_btn_design+0x2c>)
  41d622:	681b      	ldr	r3, [r3, #0]
  41d624:	4798      	blx	r3
  41d626:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41d628:	4b04      	ldr	r3, [pc, #16]	; (41d63c <lv_btn_design+0x2c>)
  41d62a:	681b      	ldr	r3, [r3, #0]
  41d62c:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41d62e:	2000      	movs	r0, #0
  41d630:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41d632:	4b02      	ldr	r3, [pc, #8]	; (41d63c <lv_btn_design+0x2c>)
  41d634:	681b      	ldr	r3, [r3, #0]
  41d636:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41d638:	2000      	movs	r0, #0
  41d63a:	bd08      	pop	{r3, pc}
  41d63c:	204147d4 	.word	0x204147d4

0041d640 <lv_btn_create>:
{
  41d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41d642:	4607      	mov	r7, r0
  41d644:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
  41d646:	4b31      	ldr	r3, [pc, #196]	; (41d70c <lv_btn_create+0xcc>)
  41d648:	4798      	blx	r3
  41d64a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
  41d64c:	4b30      	ldr	r3, [pc, #192]	; (41d710 <lv_btn_create+0xd0>)
  41d64e:	4798      	blx	r3
  41d650:	b1a8      	cbz	r0, 41d67e <lv_btn_create+0x3e>
    if(btn == NULL) return NULL;
  41d652:	2c00      	cmp	r4, #0
  41d654:	d045      	beq.n	41d6e2 <lv_btn_create+0xa2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41d656:	4b2f      	ldr	r3, [pc, #188]	; (41d714 <lv_btn_create+0xd4>)
  41d658:	681b      	ldr	r3, [r3, #0]
  41d65a:	b1b3      	cbz	r3, 41d68a <lv_btn_create+0x4a>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41d65c:	4b2e      	ldr	r3, [pc, #184]	; (41d718 <lv_btn_create+0xd8>)
  41d65e:	681b      	ldr	r3, [r3, #0]
  41d660:	b1cb      	cbz	r3, 41d696 <lv_btn_create+0x56>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
  41d662:	2103      	movs	r1, #3
  41d664:	4620      	mov	r0, r4
  41d666:	4b2d      	ldr	r3, [pc, #180]	; (41d71c <lv_btn_create+0xdc>)
  41d668:	4798      	blx	r3
  41d66a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41d66c:	4b28      	ldr	r3, [pc, #160]	; (41d710 <lv_btn_create+0xd0>)
  41d66e:	4798      	blx	r3
  41d670:	b9b8      	cbnz	r0, 41d6a2 <lv_btn_create+0x62>
  41d672:	462a      	mov	r2, r5
  41d674:	2300      	movs	r3, #0
  41d676:	482a      	ldr	r0, [pc, #168]	; (41d720 <lv_btn_create+0xe0>)
  41d678:	492a      	ldr	r1, [pc, #168]	; (41d724 <lv_btn_create+0xe4>)
  41d67a:	4788      	blx	r1
  41d67c:	e7fe      	b.n	41d67c <lv_btn_create+0x3c>
    LV_ASSERT_MEM(btn);
  41d67e:	4622      	mov	r2, r4
  41d680:	2300      	movs	r3, #0
  41d682:	4827      	ldr	r0, [pc, #156]	; (41d720 <lv_btn_create+0xe0>)
  41d684:	4927      	ldr	r1, [pc, #156]	; (41d724 <lv_btn_create+0xe4>)
  41d686:	4788      	blx	r1
  41d688:	e7fe      	b.n	41d688 <lv_btn_create+0x48>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41d68a:	4620      	mov	r0, r4
  41d68c:	4b26      	ldr	r3, [pc, #152]	; (41d728 <lv_btn_create+0xe8>)
  41d68e:	4798      	blx	r3
  41d690:	4b20      	ldr	r3, [pc, #128]	; (41d714 <lv_btn_create+0xd4>)
  41d692:	6018      	str	r0, [r3, #0]
  41d694:	e7e2      	b.n	41d65c <lv_btn_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41d696:	4620      	mov	r0, r4
  41d698:	4b24      	ldr	r3, [pc, #144]	; (41d72c <lv_btn_create+0xec>)
  41d69a:	4798      	blx	r3
  41d69c:	4b1e      	ldr	r3, [pc, #120]	; (41d718 <lv_btn_create+0xd8>)
  41d69e:	6018      	str	r0, [r3, #0]
  41d6a0:	e7df      	b.n	41d662 <lv_btn_create+0x22>
    if(ext == NULL) {
  41d6a2:	b305      	cbz	r5, 41d6e6 <lv_btn_create+0xa6>
    ext->checkable = 0;
  41d6a4:	78ab      	ldrb	r3, [r5, #2]
  41d6a6:	f36f 0300 	bfc	r3, #0, #1
  41d6aa:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
  41d6ac:	4920      	ldr	r1, [pc, #128]	; (41d730 <lv_btn_create+0xf0>)
  41d6ae:	4620      	mov	r0, r4
  41d6b0:	4b20      	ldr	r3, [pc, #128]	; (41d734 <lv_btn_create+0xf4>)
  41d6b2:	4798      	blx	r3
    lv_obj_set_design_cb(btn, lv_btn_design);
  41d6b4:	4920      	ldr	r1, [pc, #128]	; (41d738 <lv_btn_create+0xf8>)
  41d6b6:	4620      	mov	r0, r4
  41d6b8:	4b20      	ldr	r3, [pc, #128]	; (41d73c <lv_btn_create+0xfc>)
  41d6ba:	4798      	blx	r3
    if(copy == NULL) {
  41d6bc:	b9c6      	cbnz	r6, 41d6f0 <lv_btn_create+0xb0>
        if(par) {
  41d6be:	b147      	cbz	r7, 41d6d2 <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
  41d6c0:	2231      	movs	r2, #49	; 0x31
  41d6c2:	2194      	movs	r1, #148	; 0x94
  41d6c4:	4620      	mov	r0, r4
  41d6c6:	4b1e      	ldr	r3, [pc, #120]	; (41d740 <lv_btn_create+0x100>)
  41d6c8:	4798      	blx	r3
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
  41d6ca:	2101      	movs	r1, #1
  41d6cc:	4620      	mov	r0, r4
  41d6ce:	4b1d      	ldr	r3, [pc, #116]	; (41d744 <lv_btn_create+0x104>)
  41d6d0:	4798      	blx	r3
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
  41d6d2:	2101      	movs	r1, #1
  41d6d4:	4620      	mov	r0, r4
  41d6d6:	4b1c      	ldr	r3, [pc, #112]	; (41d748 <lv_btn_create+0x108>)
  41d6d8:	4798      	blx	r3
        lv_theme_apply(btn, LV_THEME_BTN);
  41d6da:	2105      	movs	r1, #5
  41d6dc:	4620      	mov	r0, r4
  41d6de:	4b1b      	ldr	r3, [pc, #108]	; (41d74c <lv_btn_create+0x10c>)
  41d6e0:	4798      	blx	r3
}
  41d6e2:	4620      	mov	r0, r4
  41d6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btn);
  41d6e6:	4620      	mov	r0, r4
  41d6e8:	4b19      	ldr	r3, [pc, #100]	; (41d750 <lv_btn_create+0x110>)
  41d6ea:	4798      	blx	r3
        return NULL;
  41d6ec:	2400      	movs	r4, #0
  41d6ee:	e7f8      	b.n	41d6e2 <lv_btn_create+0xa2>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41d6f0:	4630      	mov	r0, r6
  41d6f2:	4b18      	ldr	r3, [pc, #96]	; (41d754 <lv_btn_create+0x114>)
  41d6f4:	4798      	blx	r3
        ext->checkable             = copy_ext->checkable;
  41d6f6:	7882      	ldrb	r2, [r0, #2]
  41d6f8:	78ab      	ldrb	r3, [r5, #2]
  41d6fa:	f362 0300 	bfi	r3, r2, #0, #1
  41d6fe:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41d700:	22ff      	movs	r2, #255	; 0xff
  41d702:	4611      	mov	r1, r2
  41d704:	4620      	mov	r0, r4
  41d706:	4b14      	ldr	r3, [pc, #80]	; (41d758 <lv_btn_create+0x118>)
  41d708:	4798      	blx	r3
  41d70a:	e7ea      	b.n	41d6e2 <lv_btn_create+0xa2>
  41d70c:	0041df65 	.word	0x0041df65
  41d710:	00415a81 	.word	0x00415a81
  41d714:	204147d8 	.word	0x204147d8
  41d718:	204147d4 	.word	0x204147d4
  41d71c:	00405751 	.word	0x00405751
  41d720:	00428c94 	.word	0x00428c94
  41d724:	00415a8d 	.word	0x00415a8d
  41d728:	00407dd5 	.word	0x00407dd5
  41d72c:	00407dfd 	.word	0x00407dfd
  41d730:	0041d831 	.word	0x0041d831
  41d734:	004056ed 	.word	0x004056ed
  41d738:	0041d611 	.word	0x0041d611
  41d73c:	00405729 	.word	0x00405729
  41d740:	00406a49 	.word	0x00406a49
  41d744:	0041e095 	.word	0x0041e095
  41d748:	0040552d 	.word	0x0040552d
  41d74c:	00417ec5 	.word	0x00417ec5
  41d750:	00407f85 	.word	0x00407f85
  41d754:	00407e25 	.word	0x00407e25
  41d758:	00407671 	.word	0x00407671

0041d75c <lv_btn_set_state>:
{
  41d75c:	b538      	push	{r3, r4, r5, lr}
  41d75e:	4604      	mov	r4, r0
  41d760:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41d762:	4b21      	ldr	r3, [pc, #132]	; (41d7e8 <lv_btn_set_state+0x8c>)
  41d764:	4798      	blx	r3
  41d766:	b130      	cbz	r0, 41d776 <lv_btn_set_state+0x1a>
    switch(state) {
  41d768:	2d05      	cmp	r5, #5
  41d76a:	d83b      	bhi.n	41d7e4 <lv_btn_set_state+0x88>
  41d76c:	e8df f005 	tbb	[pc, r5]
  41d770:	17290e09 	.word	0x17290e09
  41d774:	3220      	.short	0x3220
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41d776:	4622      	mov	r2, r4
  41d778:	2300      	movs	r3, #0
  41d77a:	481c      	ldr	r0, [pc, #112]	; (41d7ec <lv_btn_set_state+0x90>)
  41d77c:	491c      	ldr	r1, [pc, #112]	; (41d7f0 <lv_btn_set_state+0x94>)
  41d77e:	4788      	blx	r1
  41d780:	e7fe      	b.n	41d780 <lv_btn_set_state+0x24>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
  41d782:	2131      	movs	r1, #49	; 0x31
  41d784:	4620      	mov	r0, r4
  41d786:	4b1b      	ldr	r3, [pc, #108]	; (41d7f4 <lv_btn_set_state+0x98>)
  41d788:	4798      	blx	r3
            break;
  41d78a:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
  41d78c:	2121      	movs	r1, #33	; 0x21
  41d78e:	4620      	mov	r0, r4
  41d790:	4b18      	ldr	r3, [pc, #96]	; (41d7f4 <lv_btn_set_state+0x98>)
  41d792:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_PRESSED);
  41d794:	2110      	movs	r1, #16
  41d796:	4620      	mov	r0, r4
  41d798:	4b17      	ldr	r3, [pc, #92]	; (41d7f8 <lv_btn_set_state+0x9c>)
  41d79a:	4798      	blx	r3
            break;
  41d79c:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_CHECKED);
  41d79e:	2101      	movs	r1, #1
  41d7a0:	4620      	mov	r0, r4
  41d7a2:	4b15      	ldr	r3, [pc, #84]	; (41d7f8 <lv_btn_set_state+0x9c>)
  41d7a4:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
  41d7a6:	2130      	movs	r1, #48	; 0x30
  41d7a8:	4620      	mov	r0, r4
  41d7aa:	4b12      	ldr	r3, [pc, #72]	; (41d7f4 <lv_btn_set_state+0x98>)
  41d7ac:	4798      	blx	r3
            break;
  41d7ae:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41d7b0:	2111      	movs	r1, #17
  41d7b2:	4620      	mov	r0, r4
  41d7b4:	4b10      	ldr	r3, [pc, #64]	; (41d7f8 <lv_btn_set_state+0x9c>)
  41d7b6:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
  41d7b8:	2120      	movs	r1, #32
  41d7ba:	4620      	mov	r0, r4
  41d7bc:	4b0d      	ldr	r3, [pc, #52]	; (41d7f4 <lv_btn_set_state+0x98>)
  41d7be:	4798      	blx	r3
            break;
  41d7c0:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41d7c2:	2111      	movs	r1, #17
  41d7c4:	4620      	mov	r0, r4
  41d7c6:	4b0b      	ldr	r3, [pc, #44]	; (41d7f4 <lv_btn_set_state+0x98>)
  41d7c8:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED);
  41d7ca:	2120      	movs	r1, #32
  41d7cc:	4620      	mov	r0, r4
  41d7ce:	4b0a      	ldr	r3, [pc, #40]	; (41d7f8 <lv_btn_set_state+0x9c>)
  41d7d0:	4798      	blx	r3
            break;
  41d7d2:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
  41d7d4:	2110      	movs	r1, #16
  41d7d6:	4620      	mov	r0, r4
  41d7d8:	4b06      	ldr	r3, [pc, #24]	; (41d7f4 <lv_btn_set_state+0x98>)
  41d7da:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
  41d7dc:	2121      	movs	r1, #33	; 0x21
  41d7de:	4620      	mov	r0, r4
  41d7e0:	4b05      	ldr	r3, [pc, #20]	; (41d7f8 <lv_btn_set_state+0x9c>)
  41d7e2:	4798      	blx	r3
  41d7e4:	bd38      	pop	{r3, r4, r5, pc}
  41d7e6:	bf00      	nop
  41d7e8:	00415a81 	.word	0x00415a81
  41d7ec:	00428ca8 	.word	0x00428ca8
  41d7f0:	00415a8d 	.word	0x00415a8d
  41d7f4:	00408d7d 	.word	0x00408d7d
  41d7f8:	00408d41 	.word	0x00408d41

0041d7fc <lv_btn_get_checkable>:
{
  41d7fc:	b510      	push	{r4, lr}
  41d7fe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41d800:	4b07      	ldr	r3, [pc, #28]	; (41d820 <lv_btn_get_checkable+0x24>)
  41d802:	4798      	blx	r3
  41d804:	b928      	cbnz	r0, 41d812 <lv_btn_get_checkable+0x16>
  41d806:	4622      	mov	r2, r4
  41d808:	2300      	movs	r3, #0
  41d80a:	4806      	ldr	r0, [pc, #24]	; (41d824 <lv_btn_get_checkable+0x28>)
  41d80c:	4906      	ldr	r1, [pc, #24]	; (41d828 <lv_btn_get_checkable+0x2c>)
  41d80e:	4788      	blx	r1
  41d810:	e7fe      	b.n	41d810 <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41d812:	4620      	mov	r0, r4
  41d814:	4b05      	ldr	r3, [pc, #20]	; (41d82c <lv_btn_get_checkable+0x30>)
  41d816:	4798      	blx	r3
    return ext->checkable != 0 ? true : false;
  41d818:	7880      	ldrb	r0, [r0, #2]
}
  41d81a:	f000 0001 	and.w	r0, r0, #1
  41d81e:	bd10      	pop	{r4, pc}
  41d820:	00415a81 	.word	0x00415a81
  41d824:	00428ca8 	.word	0x00428ca8
  41d828:	00415a8d 	.word	0x00415a8d
  41d82c:	00407e25 	.word	0x00407e25

0041d830 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
  41d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41d834:	b082      	sub	sp, #8
  41d836:	4606      	mov	r6, r0
  41d838:	460d      	mov	r5, r1
  41d83a:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
  41d83c:	4b36      	ldr	r3, [pc, #216]	; (41d918 <lv_btn_signal+0xe8>)
  41d83e:	681b      	ldr	r3, [r3, #0]
  41d840:	4798      	blx	r3
  41d842:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41d844:	2801      	cmp	r0, #1
  41d846:	d003      	beq.n	41d850 <lv_btn_signal+0x20>
        }
#endif
    }

    return res;
}
  41d848:	4620      	mov	r0, r4
  41d84a:	b002      	add	sp, #8
  41d84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41d850:	2d07      	cmp	r5, #7
  41d852:	d023      	beq.n	41d89c <lv_btn_signal+0x6c>
    bool tgl           = lv_btn_get_checkable(btn);
  41d854:	4630      	mov	r0, r6
  41d856:	4b31      	ldr	r3, [pc, #196]	; (41d91c <lv_btn_signal+0xec>)
  41d858:	4798      	blx	r3
  41d85a:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
  41d85c:	2d0e      	cmp	r5, #14
  41d85e:	d023      	beq.n	41d8a8 <lv_btn_signal+0x78>
    else if(sign == LV_SIGNAL_CONTROL) {
  41d860:	2d18      	cmp	r5, #24
  41d862:	d1f1      	bne.n	41d848 <lv_btn_signal+0x18>
        char c = *((char *)param);
  41d864:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  41d866:	2b11      	cmp	r3, #17
  41d868:	bf18      	it	ne
  41d86a:	2b13      	cmpne	r3, #19
  41d86c:	d040      	beq.n	41d8f0 <lv_btn_signal+0xc0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  41d86e:	2b12      	cmp	r3, #18
  41d870:	bf18      	it	ne
  41d872:	2b14      	cmpne	r3, #20
  41d874:	d1e8      	bne.n	41d848 <lv_btn_signal+0x18>
            if(lv_btn_get_checkable(btn)) {
  41d876:	4630      	mov	r0, r6
  41d878:	4b28      	ldr	r3, [pc, #160]	; (41d91c <lv_btn_signal+0xec>)
  41d87a:	4798      	blx	r3
  41d87c:	2800      	cmp	r0, #0
  41d87e:	d0e3      	beq.n	41d848 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41d880:	2100      	movs	r1, #0
  41d882:	4630      	mov	r0, r6
  41d884:	4b26      	ldr	r3, [pc, #152]	; (41d920 <lv_btn_signal+0xf0>)
  41d886:	4798      	blx	r3
                uint32_t state = 0;
  41d888:	aa02      	add	r2, sp, #8
  41d88a:	2300      	movs	r3, #0
  41d88c:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41d890:	2110      	movs	r1, #16
  41d892:	4630      	mov	r0, r6
  41d894:	4b23      	ldr	r3, [pc, #140]	; (41d924 <lv_btn_signal+0xf4>)
  41d896:	4798      	blx	r3
  41d898:	4604      	mov	r4, r0
  41d89a:	e7d5      	b.n	41d848 <lv_btn_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41d89c:	4922      	ldr	r1, [pc, #136]	; (41d928 <lv_btn_signal+0xf8>)
  41d89e:	4638      	mov	r0, r7
  41d8a0:	4b22      	ldr	r3, [pc, #136]	; (41d92c <lv_btn_signal+0xfc>)
  41d8a2:	4798      	blx	r3
  41d8a4:	4604      	mov	r4, r0
  41d8a6:	e7cf      	b.n	41d848 <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && tgl) {
  41d8a8:	4638      	mov	r0, r7
  41d8aa:	4b21      	ldr	r3, [pc, #132]	; (41d930 <lv_btn_signal+0x100>)
  41d8ac:	4798      	blx	r3
  41d8ae:	2800      	cmp	r0, #0
  41d8b0:	d1ca      	bne.n	41d848 <lv_btn_signal+0x18>
  41d8b2:	f1b8 0f00 	cmp.w	r8, #0
  41d8b6:	d0c7      	beq.n	41d848 <lv_btn_signal+0x18>
            uint32_t toggled = 0;
  41d8b8:	2100      	movs	r1, #0
  41d8ba:	9101      	str	r1, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41d8bc:	4630      	mov	r0, r6
  41d8be:	4b1d      	ldr	r3, [pc, #116]	; (41d934 <lv_btn_signal+0x104>)
  41d8c0:	4798      	blx	r3
  41d8c2:	f010 0f01 	tst.w	r0, #1
  41d8c6:	d00c      	beq.n	41d8e2 <lv_btn_signal+0xb2>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41d8c8:	2100      	movs	r1, #0
  41d8ca:	4630      	mov	r0, r6
  41d8cc:	4b14      	ldr	r3, [pc, #80]	; (41d920 <lv_btn_signal+0xf0>)
  41d8ce:	4798      	blx	r3
                toggled = 0;
  41d8d0:	2300      	movs	r3, #0
  41d8d2:	9301      	str	r3, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
  41d8d4:	aa01      	add	r2, sp, #4
  41d8d6:	2110      	movs	r1, #16
  41d8d8:	4630      	mov	r0, r6
  41d8da:	4b12      	ldr	r3, [pc, #72]	; (41d924 <lv_btn_signal+0xf4>)
  41d8dc:	4798      	blx	r3
  41d8de:	4604      	mov	r4, r0
  41d8e0:	e7b2      	b.n	41d848 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41d8e2:	2103      	movs	r1, #3
  41d8e4:	4630      	mov	r0, r6
  41d8e6:	4b0e      	ldr	r3, [pc, #56]	; (41d920 <lv_btn_signal+0xf0>)
  41d8e8:	4798      	blx	r3
                toggled = 1;
  41d8ea:	2301      	movs	r3, #1
  41d8ec:	9301      	str	r3, [sp, #4]
  41d8ee:	e7f1      	b.n	41d8d4 <lv_btn_signal+0xa4>
            if(lv_btn_get_checkable(btn)) {
  41d8f0:	4630      	mov	r0, r6
  41d8f2:	4b0a      	ldr	r3, [pc, #40]	; (41d91c <lv_btn_signal+0xec>)
  41d8f4:	4798      	blx	r3
  41d8f6:	2800      	cmp	r0, #0
  41d8f8:	d0a6      	beq.n	41d848 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41d8fa:	2103      	movs	r1, #3
  41d8fc:	4630      	mov	r0, r6
  41d8fe:	4b08      	ldr	r3, [pc, #32]	; (41d920 <lv_btn_signal+0xf0>)
  41d900:	4798      	blx	r3
                uint32_t state = 1;
  41d902:	aa02      	add	r2, sp, #8
  41d904:	2301      	movs	r3, #1
  41d906:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41d90a:	2110      	movs	r1, #16
  41d90c:	4630      	mov	r0, r6
  41d90e:	4b05      	ldr	r3, [pc, #20]	; (41d924 <lv_btn_signal+0xf4>)
  41d910:	4798      	blx	r3
  41d912:	4604      	mov	r4, r0
  41d914:	e798      	b.n	41d848 <lv_btn_signal+0x18>
  41d916:	bf00      	nop
  41d918:	204147d8 	.word	0x204147d8
  41d91c:	0041d7fd 	.word	0x0041d7fd
  41d920:	0041d75d 	.word	0x0041d75d
  41d924:	004056ad 	.word	0x004056ad
  41d928:	0042c3bc 	.word	0x0042c3bc
  41d92c:	004080b1 	.word	0x004080b1
  41d930:	00404b51 	.word	0x00404b51
  41d934:	00406bf1 	.word	0x00406bf1

0041d938 <lv_cont_get_style>:
}

static lv_style_list_t * lv_cont_get_style(lv_obj_t * cont, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  41d938:	b909      	cbnz	r1, 41d93e <lv_cont_get_style+0x6>
        case LV_CONT_PART_MAIN:
            style_dsc_p = &cont->style_list;
  41d93a:	3028      	adds	r0, #40	; 0x28
            break;
  41d93c:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  41d93e:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  41d940:	4770      	bx	lr
	...

0041d944 <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
  41d944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41d948:	b083      	sub	sp, #12
  41d94a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d94c:	2214      	movs	r2, #20
  41d94e:	2100      	movs	r1, #0
  41d950:	4b3c      	ldr	r3, [pc, #240]	; (41da44 <lv_cont_layout_center+0x100>)
  41d952:	4798      	blx	r3
  41d954:	4607      	mov	r7, r0
    lv_obj_t * child;
    uint32_t obj_num         = 0;
    lv_coord_t h_tot         = 0;

    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    _LV_LL_READ(cont->child_ll, child) {
  41d956:	1d35      	adds	r5, r6, #4
  41d958:	4628      	mov	r0, r5
  41d95a:	4b3b      	ldr	r3, [pc, #236]	; (41da48 <lv_cont_layout_center+0x104>)
  41d95c:	4798      	blx	r3
  41d95e:	4604      	mov	r4, r0
    lv_coord_t h_tot         = 0;
  41d960:	f04f 0800 	mov.w	r8, #0
    uint32_t obj_num         = 0;
  41d964:	46c1      	mov	r9, r8
    _LV_LL_READ(cont->child_ll, child) {
  41d966:	e004      	b.n	41d972 <lv_cont_layout_center+0x2e>
  41d968:	4621      	mov	r1, r4
  41d96a:	4628      	mov	r0, r5
  41d96c:	4b37      	ldr	r3, [pc, #220]	; (41da4c <lv_cont_layout_center+0x108>)
  41d96e:	4798      	blx	r3
  41d970:	4604      	mov	r4, r0
  41d972:	b1a4      	cbz	r4, 41d99e <lv_cont_layout_center+0x5a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41d974:	4620      	mov	r0, r4
  41d976:	4b36      	ldr	r3, [pc, #216]	; (41da50 <lv_cont_layout_center+0x10c>)
  41d978:	4798      	blx	r3
  41d97a:	2800      	cmp	r0, #0
  41d97c:	d1f4      	bne.n	41d968 <lv_cont_layout_center+0x24>
  41d97e:	2104      	movs	r1, #4
  41d980:	4620      	mov	r0, r4
  41d982:	4b34      	ldr	r3, [pc, #208]	; (41da54 <lv_cont_layout_center+0x110>)
  41d984:	4798      	blx	r3
  41d986:	2800      	cmp	r0, #0
  41d988:	d1ee      	bne.n	41d968 <lv_cont_layout_center+0x24>
        h_tot += lv_obj_get_height(child) + inner;
  41d98a:	4620      	mov	r0, r4
  41d98c:	4b32      	ldr	r3, [pc, #200]	; (41da58 <lv_cont_layout_center+0x114>)
  41d98e:	4798      	blx	r3
  41d990:	4438      	add	r0, r7
  41d992:	4480      	add	r8, r0
  41d994:	fa0f f888 	sxth.w	r8, r8
        obj_num++;
  41d998:	f109 0901 	add.w	r9, r9, #1
  41d99c:	e7e4      	b.n	41d968 <lv_cont_layout_center+0x24>
    }

    if(obj_num == 0) return;
  41d99e:	f1b9 0f00 	cmp.w	r9, #0
  41d9a2:	d102      	bne.n	41d9aa <lv_cont_layout_center+0x66>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
        last_cord += lv_obj_get_height(child) + inner;
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
}
  41d9a4:	b003      	add	sp, #12
  41d9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    h_tot -= inner;
  41d9aa:	eba8 0807 	sub.w	r8, r8, r7
  41d9ae:	fa0f f888 	sxth.w	r8, r8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41d9b2:	2101      	movs	r1, #1
  41d9b4:	4630      	mov	r0, r6
  41d9b6:	4b29      	ldr	r3, [pc, #164]	; (41da5c <lv_cont_layout_center+0x118>)
  41d9b8:	4798      	blx	r3
    lv_coord_t last_cord = -(h_tot / 2);
  41d9ba:	4643      	mov	r3, r8
  41d9bc:	f1b8 0f00 	cmp.w	r8, #0
  41d9c0:	db0a      	blt.n	41d9d8 <lv_cont_layout_center+0x94>
  41d9c2:	ea4f 0863 	mov.w	r8, r3, asr #1
  41d9c6:	f1c8 0800 	rsb	r8, r8, #0
  41d9ca:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41d9ce:	4628      	mov	r0, r5
  41d9d0:	4b23      	ldr	r3, [pc, #140]	; (41da60 <lv_cont_layout_center+0x11c>)
  41d9d2:	4798      	blx	r3
  41d9d4:	4604      	mov	r4, r0
  41d9d6:	e019      	b.n	41da0c <lv_cont_layout_center+0xc8>
    lv_coord_t last_cord = -(h_tot / 2);
  41d9d8:	f108 0301 	add.w	r3, r8, #1
  41d9dc:	e7f1      	b.n	41d9c2 <lv_cont_layout_center+0x7e>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  41d9de:	eb08 0363 	add.w	r3, r8, r3, asr #1
  41d9e2:	b21b      	sxth	r3, r3
  41d9e4:	9300      	str	r3, [sp, #0]
  41d9e6:	2300      	movs	r3, #0
  41d9e8:	461a      	mov	r2, r3
  41d9ea:	4631      	mov	r1, r6
  41d9ec:	4620      	mov	r0, r4
  41d9ee:	f8df 907c 	ldr.w	r9, [pc, #124]	; 41da6c <lv_cont_layout_center+0x128>
  41d9f2:	47c8      	blx	r9
        last_cord += lv_obj_get_height(child) + inner;
  41d9f4:	4620      	mov	r0, r4
  41d9f6:	4b18      	ldr	r3, [pc, #96]	; (41da58 <lv_cont_layout_center+0x114>)
  41d9f8:	4798      	blx	r3
  41d9fa:	4438      	add	r0, r7
  41d9fc:	4480      	add	r8, r0
  41d9fe:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41da02:	4621      	mov	r1, r4
  41da04:	4628      	mov	r0, r5
  41da06:	4b17      	ldr	r3, [pc, #92]	; (41da64 <lv_cont_layout_center+0x120>)
  41da08:	4798      	blx	r3
  41da0a:	4604      	mov	r4, r0
  41da0c:	b1a4      	cbz	r4, 41da38 <lv_cont_layout_center+0xf4>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41da0e:	4620      	mov	r0, r4
  41da10:	4b0f      	ldr	r3, [pc, #60]	; (41da50 <lv_cont_layout_center+0x10c>)
  41da12:	4798      	blx	r3
  41da14:	2800      	cmp	r0, #0
  41da16:	d1f4      	bne.n	41da02 <lv_cont_layout_center+0xbe>
  41da18:	2104      	movs	r1, #4
  41da1a:	4620      	mov	r0, r4
  41da1c:	4b0d      	ldr	r3, [pc, #52]	; (41da54 <lv_cont_layout_center+0x110>)
  41da1e:	4798      	blx	r3
  41da20:	2800      	cmp	r0, #0
  41da22:	d1ee      	bne.n	41da02 <lv_cont_layout_center+0xbe>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  41da24:	4620      	mov	r0, r4
  41da26:	4b0c      	ldr	r3, [pc, #48]	; (41da58 <lv_cont_layout_center+0x114>)
  41da28:	4798      	blx	r3
  41da2a:	fa1f f888 	uxth.w	r8, r8
  41da2e:	4603      	mov	r3, r0
  41da30:	2800      	cmp	r0, #0
  41da32:	dad4      	bge.n	41d9de <lv_cont_layout_center+0x9a>
  41da34:	1c43      	adds	r3, r0, #1
  41da36:	e7d2      	b.n	41d9de <lv_cont_layout_center+0x9a>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41da38:	2101      	movs	r1, #1
  41da3a:	4630      	mov	r0, r6
  41da3c:	4b0a      	ldr	r3, [pc, #40]	; (41da68 <lv_cont_layout_center+0x124>)
  41da3e:	4798      	blx	r3
  41da40:	e7b0      	b.n	41d9a4 <lv_cont_layout_center+0x60>
  41da42:	bf00      	nop
  41da44:	00407255 	.word	0x00407255
  41da48:	00415d91 	.word	0x00415d91
  41da4c:	00415da5 	.word	0x00415da5
  41da50:	00405bd9 	.word	0x00405bd9
  41da54:	00406bbd 	.word	0x00406bbd
  41da58:	004059c1 	.word	0x004059c1
  41da5c:	00405561 	.word	0x00405561
  41da60:	00415d9b 	.word	0x00415d9b
  41da64:	00415db3 	.word	0x00415db3
  41da68:	00405591 	.word	0x00405591
  41da6c:	00406011 	.word	0x00406011

0041da70 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
  41da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41da74:	b083      	sub	sp, #12
  41da76:	4680      	mov	r8, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
  41da78:	4b2d      	ldr	r3, [pc, #180]	; (41db30 <lv_cont_layout_grid+0xc0>)
  41da7a:	4798      	blx	r3
  41da7c:	9000      	str	r0, [sp, #0]
  41da7e:	2214      	movs	r2, #20
  41da80:	2100      	movs	r1, #0
  41da82:	4640      	mov	r0, r8
  41da84:	4c2b      	ldr	r4, [pc, #172]	; (41db34 <lv_cont_layout_grid+0xc4>)
  41da86:	47a0      	blx	r4
  41da88:	4681      	mov	r9, r0
    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
  41da8a:	2100      	movs	r1, #0
  41da8c:	4640      	mov	r0, r8
  41da8e:	4b2a      	ldr	r3, [pc, #168]	; (41db38 <lv_cont_layout_grid+0xc8>)
  41da90:	4798      	blx	r3
  41da92:	4b2a      	ldr	r3, [pc, #168]	; (41db3c <lv_cont_layout_grid+0xcc>)
  41da94:	4798      	blx	r3
  41da96:	fa1f f989 	uxth.w	r9, r9
  41da9a:	fa19 f080 	uxtah	r0, r9, r0
  41da9e:	fa1f fb80 	uxth.w	fp, r0

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41daa2:	2101      	movs	r1, #1
  41daa4:	4640      	mov	r0, r8
  41daa6:	4b26      	ldr	r3, [pc, #152]	; (41db40 <lv_cont_layout_grid+0xd0>)
  41daa8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41daaa:	2212      	movs	r2, #18
  41daac:	2100      	movs	r1, #0
  41daae:	4640      	mov	r0, r8
  41dab0:	47a0      	blx	r4
  41dab2:	4606      	mov	r6, r0
  41dab4:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41dab6:	2210      	movs	r2, #16
  41dab8:	2100      	movs	r1, #0
  41daba:	4640      	mov	r0, r8
  41dabc:	47a0      	blx	r4
  41dabe:	4682      	mov	sl, r0
    /* Align the children */
    lv_coord_t left = lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
    lv_coord_t act_x = left;
    lv_coord_t act_y = lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
    lv_obj_t * child;
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41dac0:	f108 0504 	add.w	r5, r8, #4
  41dac4:	4628      	mov	r0, r5
  41dac6:	4b1f      	ldr	r3, [pc, #124]	; (41db44 <lv_cont_layout_grid+0xd4>)
  41dac8:	4798      	blx	r3
  41daca:	4604      	mov	r4, r0
  41dacc:	e00d      	b.n	41daea <lv_cont_layout_grid+0x7a>
        if(act_x + obj_w > w_fit + left) {
            act_x = left;
            act_y += y_ofs;
        }

        lv_obj_set_pos(child, act_x, act_y);
  41dace:	4652      	mov	r2, sl
  41dad0:	4631      	mov	r1, r6
  41dad2:	4620      	mov	r0, r4
  41dad4:	4b1c      	ldr	r3, [pc, #112]	; (41db48 <lv_cont_layout_grid+0xd8>)
  41dad6:	4798      	blx	r3
        act_x += inner + obj_w;
  41dad8:	444f      	add	r7, r9
  41dada:	fa16 f687 	uxtah	r6, r6, r7
  41dade:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41dae0:	4621      	mov	r1, r4
  41dae2:	4628      	mov	r0, r5
  41dae4:	4b19      	ldr	r3, [pc, #100]	; (41db4c <lv_cont_layout_grid+0xdc>)
  41dae6:	4798      	blx	r3
  41dae8:	4604      	mov	r4, r0
  41daea:	b1cc      	cbz	r4, 41db20 <lv_cont_layout_grid+0xb0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41daec:	4620      	mov	r0, r4
  41daee:	4b18      	ldr	r3, [pc, #96]	; (41db50 <lv_cont_layout_grid+0xe0>)
  41daf0:	4798      	blx	r3
  41daf2:	2800      	cmp	r0, #0
  41daf4:	d1f4      	bne.n	41dae0 <lv_cont_layout_grid+0x70>
  41daf6:	2104      	movs	r1, #4
  41daf8:	4620      	mov	r0, r4
  41dafa:	4b16      	ldr	r3, [pc, #88]	; (41db54 <lv_cont_layout_grid+0xe4>)
  41dafc:	4798      	blx	r3
  41dafe:	2800      	cmp	r0, #0
  41db00:	d1ee      	bne.n	41dae0 <lv_cont_layout_grid+0x70>
        lv_coord_t obj_w = lv_obj_get_width(child);
  41db02:	4620      	mov	r0, r4
  41db04:	4b14      	ldr	r3, [pc, #80]	; (41db58 <lv_cont_layout_grid+0xe8>)
  41db06:	4798      	blx	r3
  41db08:	4607      	mov	r7, r0
        if(act_x + obj_w > w_fit + left) {
  41db0a:	1832      	adds	r2, r6, r0
  41db0c:	9800      	ldr	r0, [sp, #0]
  41db0e:	9901      	ldr	r1, [sp, #4]
  41db10:	1843      	adds	r3, r0, r1
  41db12:	429a      	cmp	r2, r3
  41db14:	dddb      	ble.n	41dace <lv_cont_layout_grid+0x5e>
            act_y += y_ofs;
  41db16:	44da      	add	sl, fp
  41db18:	fa0f fa8a 	sxth.w	sl, sl
            act_x = left;
  41db1c:	460e      	mov	r6, r1
  41db1e:	e7d6      	b.n	41dace <lv_cont_layout_grid+0x5e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41db20:	2101      	movs	r1, #1
  41db22:	4640      	mov	r0, r8
  41db24:	4b0d      	ldr	r3, [pc, #52]	; (41db5c <lv_cont_layout_grid+0xec>)
  41db26:	4798      	blx	r3
}
  41db28:	b003      	add	sp, #12
  41db2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41db2e:	bf00      	nop
  41db30:	00407491 	.word	0x00407491
  41db34:	00407255 	.word	0x00407255
  41db38:	00405891 	.word	0x00405891
  41db3c:	004059c1 	.word	0x004059c1
  41db40:	00405561 	.word	0x00405561
  41db44:	00415d9b 	.word	0x00415d9b
  41db48:	00405e4d 	.word	0x00405e4d
  41db4c:	00415db3 	.word	0x00415db3
  41db50:	00405bd9 	.word	0x00405bd9
  41db54:	00406bbd 	.word	0x00406bbd
  41db58:	00405991 	.word	0x00405991
  41db5c:	00405591 	.word	0x00405591

0041db60 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
  41db60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41db64:	b089      	sub	sp, #36	; 0x24
  41db66:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  41db68:	2101      	movs	r1, #1
  41db6a:	4bc2      	ldr	r3, [pc, #776]	; (41de74 <lv_cont_refr_autofit+0x314>)
  41db6c:	4798      	blx	r3
  41db6e:	b110      	cbz	r0, 41db76 <lv_cont_refr_autofit+0x16>
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
}
  41db70:	b009      	add	sp, #36	; 0x24
  41db72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41db76:	4620      	mov	r0, r4
  41db78:	4bbf      	ldr	r3, [pc, #764]	; (41de78 <lv_cont_refr_autofit+0x318>)
  41db7a:	4798      	blx	r3
  41db7c:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
  41db7e:	7803      	ldrb	r3, [r0, #0]
  41db80:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  41db84:	d103      	bne.n	41db8e <lv_cont_refr_autofit+0x2e>
  41db86:	7843      	ldrb	r3, [r0, #1]
  41db88:	f013 0f0f 	tst.w	r3, #15
  41db8c:	d0f0      	beq.n	41db70 <lv_cont_refr_autofit+0x10>
    recursion_level++;
  41db8e:	4abb      	ldr	r2, [pc, #748]	; (41de7c <lv_cont_refr_autofit+0x31c>)
  41db90:	6813      	ldr	r3, [r2, #0]
  41db92:	3301      	adds	r3, #1
  41db94:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
  41db96:	2b0a      	cmp	r3, #10
  41db98:	dd04      	ble.n	41dba4 <lv_cont_refr_autofit+0x44>
    recursion_level--;
  41db9a:	4ab8      	ldr	r2, [pc, #736]	; (41de7c <lv_cont_refr_autofit+0x31c>)
  41db9c:	6813      	ldr	r3, [r2, #0]
  41db9e:	3b01      	subs	r3, #1
  41dba0:	6013      	str	r3, [r2, #0]
  41dba2:	e7e5      	b.n	41db70 <lv_cont_refr_autofit+0x10>
        lv_obj_t * par               = lv_obj_get_parent(cont);
  41dba4:	4620      	mov	r0, r4
  41dba6:	4bb6      	ldr	r3, [pc, #728]	; (41de80 <lv_cont_refr_autofit+0x320>)
  41dba8:	4798      	blx	r3
  41dbaa:	4680      	mov	r8, r0
        lv_area_copy(&parent_area, &par->coords);
  41dbac:	f100 0110 	add.w	r1, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
  41dbb0:	aa04      	add	r2, sp, #16
  41dbb2:	2308      	movs	r3, #8
  41dbb4:	e004      	b.n	41dbc0 <lv_cont_refr_autofit+0x60>
        *d8 = *s8;
  41dbb6:	f811 0b01 	ldrb.w	r0, [r1], #1
  41dbba:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41dbbe:	3b01      	subs	r3, #1
    while(len) {
  41dbc0:	2b00      	cmp	r3, #0
  41dbc2:	d1f8      	bne.n	41dbb6 <lv_cont_refr_autofit+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41dbc4:	2212      	movs	r2, #18
  41dbc6:	2100      	movs	r1, #0
  41dbc8:	4640      	mov	r0, r8
  41dbca:	4eae      	ldr	r6, [pc, #696]	; (41de84 <lv_cont_refr_autofit+0x324>)
  41dbcc:	47b0      	blx	r6
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
  41dbce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41dbd2:	fa13 f080 	uxtah	r0, r3, r0
  41dbd6:	f8ad 0010 	strh.w	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41dbda:	2213      	movs	r2, #19
  41dbdc:	2100      	movs	r1, #0
  41dbde:	4640      	mov	r0, r8
  41dbe0:	47b0      	blx	r6
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
  41dbe2:	b280      	uxth	r0, r0
  41dbe4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  41dbe8:	1a18      	subs	r0, r3, r0
  41dbea:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41dbee:	2210      	movs	r2, #16
  41dbf0:	2100      	movs	r1, #0
  41dbf2:	4640      	mov	r0, r8
  41dbf4:	47b0      	blx	r6
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
  41dbf6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  41dbfa:	fa13 f080 	uxtah	r0, r3, r0
  41dbfe:	f8ad 0012 	strh.w	r0, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41dc02:	2211      	movs	r2, #17
  41dc04:	2100      	movs	r1, #0
  41dc06:	4640      	mov	r0, r8
  41dc08:	47b0      	blx	r6
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
  41dc0a:	b280      	uxth	r0, r0
  41dc0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  41dc10:	1a18      	subs	r0, r3, r0
  41dc12:	f8ad 0016 	strh.w	r0, [sp, #22]
        lv_obj_get_coords(cont, &ori);
  41dc16:	a902      	add	r1, sp, #8
  41dc18:	4620      	mov	r0, r4
  41dc1a:	4e9b      	ldr	r6, [pc, #620]	; (41de88 <lv_cont_refr_autofit+0x328>)
  41dc1c:	47b0      	blx	r6
        lv_obj_get_coords(cont, &tight_area);
  41dc1e:	4669      	mov	r1, sp
  41dc20:	4620      	mov	r0, r4
  41dc22:	47b0      	blx	r6
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
  41dc24:	1d26      	adds	r6, r4, #4
  41dc26:	4630      	mov	r0, r6
  41dc28:	4b98      	ldr	r3, [pc, #608]	; (41de8c <lv_cont_refr_autofit+0x32c>)
  41dc2a:	4798      	blx	r3
  41dc2c:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
  41dc30:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
  41dc34:	d103      	bne.n	41dc3e <lv_cont_refr_autofit+0xde>
        lv_area_copy(&parent_area, &par->coords);
  41dc36:	a902      	add	r1, sp, #8
  41dc38:	aa06      	add	r2, sp, #24
  41dc3a:	2308      	movs	r3, #8
  41dc3c:	e09c      	b.n	41dd78 <lv_cont_refr_autofit+0x218>
            tight_area.x1 = LV_COORD_MAX;
  41dc3e:	f647 4318 	movw	r3, #31768	; 0x7c18
  41dc42:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_COORD_MAX;
  41dc46:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_COORD_MIN;
  41dc4a:	f248 33e8 	movw	r3, #33768	; 0x83e8
  41dc4e:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_COORD_MIN;
  41dc52:	f8ad 3006 	strh.w	r3, [sp, #6]
            _LV_LL_READ(cont->child_ll, child_i) {
  41dc56:	4630      	mov	r0, r6
  41dc58:	4b8d      	ldr	r3, [pc, #564]	; (41de90 <lv_cont_refr_autofit+0x330>)
  41dc5a:	4798      	blx	r3
  41dc5c:	4607      	mov	r7, r0
  41dc5e:	e004      	b.n	41dc6a <lv_cont_refr_autofit+0x10a>
  41dc60:	4639      	mov	r1, r7
  41dc62:	4630      	mov	r0, r6
  41dc64:	4b8b      	ldr	r3, [pc, #556]	; (41de94 <lv_cont_refr_autofit+0x334>)
  41dc66:	4798      	blx	r3
  41dc68:	4607      	mov	r7, r0
  41dc6a:	2f00      	cmp	r7, #0
  41dc6c:	d055      	beq.n	41dd1a <lv_cont_refr_autofit+0x1ba>
                if(lv_obj_get_hidden(child_i) != false) continue;
  41dc6e:	4638      	mov	r0, r7
  41dc70:	4b89      	ldr	r3, [pc, #548]	; (41de98 <lv_cont_refr_autofit+0x338>)
  41dc72:	4798      	blx	r3
  41dc74:	2800      	cmp	r0, #0
  41dc76:	d1f3      	bne.n	41dc60 <lv_cont_refr_autofit+0x100>
                if(ext->fit_left != LV_FIT_PARENT) {
  41dc78:	782b      	ldrb	r3, [r5, #0]
  41dc7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
  41dc7e:	2b20      	cmp	r3, #32
  41dc80:	d00e      	beq.n	41dca0 <lv_cont_refr_autofit+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41dc82:	2217      	movs	r2, #23
  41dc84:	2100      	movs	r1, #0
  41dc86:	4638      	mov	r0, r7
  41dc88:	4b7e      	ldr	r3, [pc, #504]	; (41de84 <lv_cont_refr_autofit+0x324>)
  41dc8a:	4798      	blx	r3
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
  41dc8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
  41dc90:	1a18      	subs	r0, r3, r0
  41dc92:	f9bd 3000 	ldrsh.w	r3, [sp]
  41dc96:	4298      	cmp	r0, r3
  41dc98:	bfa8      	it	ge
  41dc9a:	4618      	movge	r0, r3
  41dc9c:	f8ad 0000 	strh.w	r0, [sp]
                if(ext->fit_right != LV_FIT_PARENT) {
  41dca0:	782b      	ldrb	r3, [r5, #0]
  41dca2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  41dca6:	2b80      	cmp	r3, #128	; 0x80
  41dca8:	d00e      	beq.n	41dcc8 <lv_cont_refr_autofit+0x168>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41dcaa:	2218      	movs	r2, #24
  41dcac:	2100      	movs	r1, #0
  41dcae:	4638      	mov	r0, r7
  41dcb0:	4b74      	ldr	r3, [pc, #464]	; (41de84 <lv_cont_refr_autofit+0x324>)
  41dcb2:	4798      	blx	r3
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
  41dcb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  41dcb8:	4418      	add	r0, r3
  41dcba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  41dcbe:	4298      	cmp	r0, r3
  41dcc0:	bfb8      	it	lt
  41dcc2:	4618      	movlt	r0, r3
  41dcc4:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->fit_top != LV_FIT_PARENT) {
  41dcc8:	786b      	ldrb	r3, [r5, #1]
  41dcca:	f003 0303 	and.w	r3, r3, #3
  41dcce:	2b02      	cmp	r3, #2
  41dcd0:	d00e      	beq.n	41dcf0 <lv_cont_refr_autofit+0x190>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41dcd2:	2215      	movs	r2, #21
  41dcd4:	2100      	movs	r1, #0
  41dcd6:	4638      	mov	r0, r7
  41dcd8:	4b6a      	ldr	r3, [pc, #424]	; (41de84 <lv_cont_refr_autofit+0x324>)
  41dcda:	4798      	blx	r3
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
  41dcdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  41dce0:	1a18      	subs	r0, r3, r0
  41dce2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  41dce6:	4298      	cmp	r0, r3
  41dce8:	bfa8      	it	ge
  41dcea:	4618      	movge	r0, r3
  41dcec:	f8ad 0002 	strh.w	r0, [sp, #2]
                if(ext->fit_bottom != LV_FIT_PARENT) {
  41dcf0:	786b      	ldrb	r3, [r5, #1]
  41dcf2:	f003 030c 	and.w	r3, r3, #12
  41dcf6:	2b08      	cmp	r3, #8
  41dcf8:	d0b2      	beq.n	41dc60 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41dcfa:	2216      	movs	r2, #22
  41dcfc:	2100      	movs	r1, #0
  41dcfe:	4638      	mov	r0, r7
  41dd00:	4b60      	ldr	r3, [pc, #384]	; (41de84 <lv_cont_refr_autofit+0x324>)
  41dd02:	4798      	blx	r3
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
  41dd04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  41dd08:	4418      	add	r0, r3
  41dd0a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  41dd0e:	4298      	cmp	r0, r3
  41dd10:	bfb8      	it	lt
  41dd12:	4618      	movlt	r0, r3
  41dd14:	f8ad 0006 	strh.w	r0, [sp, #6]
  41dd18:	e7a2      	b.n	41dc60 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41dd1a:	2212      	movs	r2, #18
  41dd1c:	2100      	movs	r1, #0
  41dd1e:	4620      	mov	r0, r4
  41dd20:	4f58      	ldr	r7, [pc, #352]	; (41de84 <lv_cont_refr_autofit+0x324>)
  41dd22:	47b8      	blx	r7
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
  41dd24:	b280      	uxth	r0, r0
  41dd26:	f8bd 3000 	ldrh.w	r3, [sp]
  41dd2a:	1a18      	subs	r0, r3, r0
  41dd2c:	f8ad 0000 	strh.w	r0, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41dd30:	2213      	movs	r2, #19
  41dd32:	2100      	movs	r1, #0
  41dd34:	4620      	mov	r0, r4
  41dd36:	47b8      	blx	r7
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  41dd38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  41dd3c:	fa13 f080 	uxtah	r0, r3, r0
  41dd40:	f8ad 0004 	strh.w	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41dd44:	2210      	movs	r2, #16
  41dd46:	2100      	movs	r1, #0
  41dd48:	4620      	mov	r0, r4
  41dd4a:	47b8      	blx	r7
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
  41dd4c:	b280      	uxth	r0, r0
  41dd4e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41dd52:	1a18      	subs	r0, r3, r0
  41dd54:	f8ad 0002 	strh.w	r0, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41dd58:	2211      	movs	r2, #17
  41dd5a:	2100      	movs	r1, #0
  41dd5c:	4620      	mov	r0, r4
  41dd5e:	47b8      	blx	r7
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  41dd60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  41dd64:	fa13 f080 	uxtah	r0, r3, r0
  41dd68:	f8ad 0006 	strh.w	r0, [sp, #6]
  41dd6c:	e763      	b.n	41dc36 <lv_cont_refr_autofit+0xd6>
        *d8 = *s8;
  41dd6e:	f811 0b01 	ldrb.w	r0, [r1], #1
  41dd72:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41dd76:	3b01      	subs	r3, #1
    while(len) {
  41dd78:	2b00      	cmp	r3, #0
  41dd7a:	d1f8      	bne.n	41dd6e <lv_cont_refr_autofit+0x20e>
        switch(ext->fit_left) {
  41dd7c:	782b      	ldrb	r3, [r5, #0]
  41dd7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41dd82:	2b02      	cmp	r3, #2
  41dd84:	d037      	beq.n	41ddf6 <lv_cont_refr_autofit+0x296>
  41dd86:	d83b      	bhi.n	41de00 <lv_cont_refr_autofit+0x2a0>
  41dd88:	2b01      	cmp	r3, #1
  41dd8a:	d103      	bne.n	41dd94 <lv_cont_refr_autofit+0x234>
                new_area.x1 = tight_area.x1;
  41dd8c:	f9bd 3000 	ldrsh.w	r3, [sp]
  41dd90:	f8ad 3018 	strh.w	r3, [sp, #24]
        switch(ext->fit_right) {
  41dd94:	782b      	ldrb	r3, [r5, #0]
  41dd96:	099b      	lsrs	r3, r3, #6
  41dd98:	2b02      	cmp	r3, #2
  41dd9a:	d041      	beq.n	41de20 <lv_cont_refr_autofit+0x2c0>
  41dd9c:	d845      	bhi.n	41de2a <lv_cont_refr_autofit+0x2ca>
  41dd9e:	2b01      	cmp	r3, #1
  41dda0:	d103      	bne.n	41ddaa <lv_cont_refr_autofit+0x24a>
                new_area.x2 = tight_area.x2;
  41dda2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  41dda6:	f8ad 301c 	strh.w	r3, [sp, #28]
        switch(ext->fit_top) {
  41ddaa:	786b      	ldrb	r3, [r5, #1]
  41ddac:	f003 0303 	and.w	r3, r3, #3
  41ddb0:	2b02      	cmp	r3, #2
  41ddb2:	d04a      	beq.n	41de4a <lv_cont_refr_autofit+0x2ea>
  41ddb4:	d84e      	bhi.n	41de54 <lv_cont_refr_autofit+0x2f4>
  41ddb6:	2b01      	cmp	r3, #1
  41ddb8:	d103      	bne.n	41ddc2 <lv_cont_refr_autofit+0x262>
                new_area.y1 = tight_area.y1;
  41ddba:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  41ddbe:	f8ad 301a 	strh.w	r3, [sp, #26]
        switch(ext->fit_bottom) {
  41ddc2:	786b      	ldrb	r3, [r5, #1]
  41ddc4:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41ddc8:	2b02      	cmp	r3, #2
  41ddca:	d069      	beq.n	41dea0 <lv_cont_refr_autofit+0x340>
  41ddcc:	d86d      	bhi.n	41deaa <lv_cont_refr_autofit+0x34a>
  41ddce:	2b01      	cmp	r3, #1
  41ddd0:	d103      	bne.n	41ddda <lv_cont_refr_autofit+0x27a>
                new_area.y2 = tight_area.y2;
  41ddd2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  41ddd6:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41ddda:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  41ddde:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  41dde2:	429a      	cmp	r2, r3
  41dde4:	d071      	beq.n	41deca <lv_cont_refr_autofit+0x36a>
            lv_obj_invalidate(cont);
  41dde6:	4620      	mov	r0, r4
  41dde8:	4b2c      	ldr	r3, [pc, #176]	; (41de9c <lv_cont_refr_autofit+0x33c>)
  41ddea:	4798      	blx	r3
            lv_area_copy(&cont->coords, &new_area);
  41ddec:	f104 0110 	add.w	r1, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  41ddf0:	aa06      	add	r2, sp, #24
  41ddf2:	2308      	movs	r3, #8
  41ddf4:	e082      	b.n	41defc <lv_cont_refr_autofit+0x39c>
                new_area.x1 = parent_area.x1;
  41ddf6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41ddfa:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  41ddfe:	e7c9      	b.n	41dd94 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  41de00:	f1b9 0f00 	cmp.w	r9, #0
  41de04:	d009      	beq.n	41de1a <lv_cont_refr_autofit+0x2ba>
  41de06:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41de0a:	f9bd 2000 	ldrsh.w	r2, [sp]
  41de0e:	4293      	cmp	r3, r2
  41de10:	bfa8      	it	ge
  41de12:	4613      	movge	r3, r2
  41de14:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  41de18:	e7bc      	b.n	41dd94 <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  41de1a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41de1e:	e7f9      	b.n	41de14 <lv_cont_refr_autofit+0x2b4>
                new_area.x2 = parent_area.x2;
  41de20:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41de24:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  41de28:	e7bf      	b.n	41ddaa <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  41de2a:	f1b9 0f00 	cmp.w	r9, #0
  41de2e:	d009      	beq.n	41de44 <lv_cont_refr_autofit+0x2e4>
  41de30:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41de34:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  41de38:	4293      	cmp	r3, r2
  41de3a:	bfb8      	it	lt
  41de3c:	4613      	movlt	r3, r2
  41de3e:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  41de42:	e7b2      	b.n	41ddaa <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  41de44:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41de48:	e7f9      	b.n	41de3e <lv_cont_refr_autofit+0x2de>
                new_area.y1 = parent_area.y1;
  41de4a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41de4e:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  41de52:	e7b6      	b.n	41ddc2 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  41de54:	f1b9 0f00 	cmp.w	r9, #0
  41de58:	d009      	beq.n	41de6e <lv_cont_refr_autofit+0x30e>
  41de5a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41de5e:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  41de62:	4293      	cmp	r3, r2
  41de64:	bfa8      	it	ge
  41de66:	4613      	movge	r3, r2
  41de68:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  41de6c:	e7a9      	b.n	41ddc2 <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  41de6e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41de72:	e7f9      	b.n	41de68 <lv_cont_refr_autofit+0x308>
  41de74:	00406bbd 	.word	0x00406bbd
  41de78:	00407e25 	.word	0x00407e25
  41de7c:	204147e4 	.word	0x204147e4
  41de80:	004057bd 	.word	0x004057bd
  41de84:	00407255 	.word	0x00407255
  41de88:	004058d1 	.word	0x004058d1
  41de8c:	00415ffd 	.word	0x00415ffd
  41de90:	00415d91 	.word	0x00415d91
  41de94:	00415da5 	.word	0x00415da5
  41de98:	00405bd9 	.word	0x00405bd9
  41de9c:	00405d69 	.word	0x00405d69
                new_area.y2 = parent_area.y2;
  41dea0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41dea4:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  41dea8:	e797      	b.n	41ddda <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  41deaa:	f1b9 0f00 	cmp.w	r9, #0
  41deae:	d009      	beq.n	41dec4 <lv_cont_refr_autofit+0x364>
  41deb0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41deb4:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  41deb8:	4293      	cmp	r3, r2
  41deba:	bfb8      	it	lt
  41debc:	4613      	movlt	r3, r2
  41debe:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  41dec2:	e78a      	b.n	41ddda <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  41dec4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41dec8:	e7f9      	b.n	41debe <lv_cont_refr_autofit+0x35e>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41deca:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  41dece:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  41ded2:	429a      	cmp	r2, r3
  41ded4:	d187      	bne.n	41dde6 <lv_cont_refr_autofit+0x286>
  41ded6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  41deda:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  41dede:	429a      	cmp	r2, r3
  41dee0:	d181      	bne.n	41dde6 <lv_cont_refr_autofit+0x286>
           cont->coords.y2 != new_area.y2) {
  41dee2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  41dee6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41deea:	429a      	cmp	r2, r3
  41deec:	f47f af7b 	bne.w	41dde6 <lv_cont_refr_autofit+0x286>
  41def0:	e653      	b.n	41db9a <lv_cont_refr_autofit+0x3a>
        *d8 = *s8;
  41def2:	f812 0b01 	ldrb.w	r0, [r2], #1
  41def6:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  41defa:	3b01      	subs	r3, #1
    while(len) {
  41defc:	2b00      	cmp	r3, #0
  41defe:	d1f8      	bne.n	41def2 <lv_cont_refr_autofit+0x392>
            lv_obj_invalidate(cont);
  41df00:	4620      	mov	r0, r4
  41df02:	4b13      	ldr	r3, [pc, #76]	; (41df50 <lv_cont_refr_autofit+0x3f0>)
  41df04:	4798      	blx	r3
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
  41df06:	69e3      	ldr	r3, [r4, #28]
  41df08:	aa02      	add	r2, sp, #8
  41df0a:	2102      	movs	r1, #2
  41df0c:	4620      	mov	r0, r4
  41df0e:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
  41df10:	f8d8 301c 	ldr.w	r3, [r8, #28]
  41df14:	4622      	mov	r2, r4
  41df16:	2101      	movs	r1, #1
  41df18:	4640      	mov	r0, r8
  41df1a:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
  41df1c:	4620      	mov	r0, r4
  41df1e:	4b0d      	ldr	r3, [pc, #52]	; (41df54 <lv_cont_refr_autofit+0x3f4>)
  41df20:	4798      	blx	r3
  41df22:	b920      	cbnz	r0, 41df2e <lv_cont_refr_autofit+0x3ce>
            _LV_LL_READ(cont->child_ll, child_i) {
  41df24:	4630      	mov	r0, r6
  41df26:	4b0c      	ldr	r3, [pc, #48]	; (41df58 <lv_cont_refr_autofit+0x3f8>)
  41df28:	4798      	blx	r3
  41df2a:	4604      	mov	r4, r0
  41df2c:	e00d      	b.n	41df4a <lv_cont_refr_autofit+0x3ea>
                lv_obj_realign(cont);
  41df2e:	4620      	mov	r0, r4
  41df30:	4b0a      	ldr	r3, [pc, #40]	; (41df5c <lv_cont_refr_autofit+0x3fc>)
  41df32:	4798      	blx	r3
  41df34:	e7f6      	b.n	41df24 <lv_cont_refr_autofit+0x3c4>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  41df36:	69e3      	ldr	r3, [r4, #28]
  41df38:	aa02      	add	r2, sp, #8
  41df3a:	2103      	movs	r1, #3
  41df3c:	4620      	mov	r0, r4
  41df3e:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
  41df40:	4621      	mov	r1, r4
  41df42:	4630      	mov	r0, r6
  41df44:	4b06      	ldr	r3, [pc, #24]	; (41df60 <lv_cont_refr_autofit+0x400>)
  41df46:	4798      	blx	r3
  41df48:	4604      	mov	r4, r0
  41df4a:	2c00      	cmp	r4, #0
  41df4c:	d1f3      	bne.n	41df36 <lv_cont_refr_autofit+0x3d6>
  41df4e:	e624      	b.n	41db9a <lv_cont_refr_autofit+0x3a>
  41df50:	00405d69 	.word	0x00405d69
  41df54:	004059f1 	.word	0x004059f1
  41df58:	00415d91 	.word	0x00415d91
  41df5c:	00406485 	.word	0x00406485
  41df60:	00415da5 	.word	0x00415da5

0041df64 <lv_cont_create>:
{
  41df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41df66:	4607      	mov	r7, r0
  41df68:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
  41df6a:	4b3b      	ldr	r3, [pc, #236]	; (41e058 <lv_cont_create+0xf4>)
  41df6c:	4798      	blx	r3
  41df6e:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
  41df70:	4b3a      	ldr	r3, [pc, #232]	; (41e05c <lv_cont_create+0xf8>)
  41df72:	4798      	blx	r3
  41df74:	b1c8      	cbz	r0, 41dfaa <lv_cont_create+0x46>
    if(cont == NULL) return NULL;
  41df76:	2d00      	cmp	r5, #0
  41df78:	d065      	beq.n	41e046 <lv_cont_create+0xe2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  41df7a:	4b39      	ldr	r3, [pc, #228]	; (41e060 <lv_cont_create+0xfc>)
  41df7c:	681b      	ldr	r3, [r3, #0]
  41df7e:	b1d3      	cbz	r3, 41dfb6 <lv_cont_create+0x52>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  41df80:	4b38      	ldr	r3, [pc, #224]	; (41e064 <lv_cont_create+0x100>)
  41df82:	681b      	ldr	r3, [r3, #0]
  41df84:	b1eb      	cbz	r3, 41dfc2 <lv_cont_create+0x5e>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
  41df86:	2102      	movs	r1, #2
  41df88:	4628      	mov	r0, r5
  41df8a:	4b37      	ldr	r3, [pc, #220]	; (41e068 <lv_cont_create+0x104>)
  41df8c:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41df8e:	4628      	mov	r0, r5
  41df90:	4b36      	ldr	r3, [pc, #216]	; (41e06c <lv_cont_create+0x108>)
  41df92:	4798      	blx	r3
    if(ext == NULL) {
  41df94:	4604      	mov	r4, r0
  41df96:	b1d0      	cbz	r0, 41dfce <lv_cont_create+0x6a>
    LV_ASSERT_MEM(ext);
  41df98:	4b30      	ldr	r3, [pc, #192]	; (41e05c <lv_cont_create+0xf8>)
  41df9a:	4798      	blx	r3
  41df9c:	b9e0      	cbnz	r0, 41dfd8 <lv_cont_create+0x74>
  41df9e:	4622      	mov	r2, r4
  41dfa0:	2300      	movs	r3, #0
  41dfa2:	4833      	ldr	r0, [pc, #204]	; (41e070 <lv_cont_create+0x10c>)
  41dfa4:	4933      	ldr	r1, [pc, #204]	; (41e074 <lv_cont_create+0x110>)
  41dfa6:	4788      	blx	r1
  41dfa8:	e7fe      	b.n	41dfa8 <lv_cont_create+0x44>
    LV_ASSERT_MEM(cont);
  41dfaa:	462a      	mov	r2, r5
  41dfac:	2300      	movs	r3, #0
  41dfae:	4830      	ldr	r0, [pc, #192]	; (41e070 <lv_cont_create+0x10c>)
  41dfb0:	4930      	ldr	r1, [pc, #192]	; (41e074 <lv_cont_create+0x110>)
  41dfb2:	4788      	blx	r1
  41dfb4:	e7fe      	b.n	41dfb4 <lv_cont_create+0x50>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  41dfb6:	4628      	mov	r0, r5
  41dfb8:	4b2f      	ldr	r3, [pc, #188]	; (41e078 <lv_cont_create+0x114>)
  41dfba:	4798      	blx	r3
  41dfbc:	4b28      	ldr	r3, [pc, #160]	; (41e060 <lv_cont_create+0xfc>)
  41dfbe:	6018      	str	r0, [r3, #0]
  41dfc0:	e7de      	b.n	41df80 <lv_cont_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  41dfc2:	4628      	mov	r0, r5
  41dfc4:	4b2d      	ldr	r3, [pc, #180]	; (41e07c <lv_cont_create+0x118>)
  41dfc6:	4798      	blx	r3
  41dfc8:	4b26      	ldr	r3, [pc, #152]	; (41e064 <lv_cont_create+0x100>)
  41dfca:	6018      	str	r0, [r3, #0]
  41dfcc:	e7db      	b.n	41df86 <lv_cont_create+0x22>
        lv_obj_del(cont);
  41dfce:	4628      	mov	r0, r5
  41dfd0:	4b2b      	ldr	r3, [pc, #172]	; (41e080 <lv_cont_create+0x11c>)
  41dfd2:	4798      	blx	r3
        return NULL;
  41dfd4:	2500      	movs	r5, #0
  41dfd6:	e036      	b.n	41e046 <lv_cont_create+0xe2>
    ext->fit_left   = LV_FIT_NONE;
  41dfd8:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
  41dfda:	7862      	ldrb	r2, [r4, #1]
    ext->fit_bottom = LV_FIT_NONE;
  41dfdc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  41dfe0:	f36f 0283 	bfc	r2, #2, #2
  41dfe4:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
  41dfe6:	f003 030f 	and.w	r3, r3, #15
  41dfea:	f36f 0303 	bfc	r3, #0, #4
  41dfee:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
  41dff0:	4924      	ldr	r1, [pc, #144]	; (41e084 <lv_cont_create+0x120>)
  41dff2:	4628      	mov	r0, r5
  41dff4:	4b24      	ldr	r3, [pc, #144]	; (41e088 <lv_cont_create+0x124>)
  41dff6:	4798      	blx	r3
    if(copy == NULL) {
  41dff8:	b33e      	cbz	r6, 41e04a <lv_cont_create+0xe6>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41dffa:	4630      	mov	r0, r6
  41dffc:	4b1b      	ldr	r3, [pc, #108]	; (41e06c <lv_cont_create+0x108>)
  41dffe:	4798      	blx	r3
        ext->fit_left            = copy_ext->fit_left;
  41e000:	7803      	ldrb	r3, [r0, #0]
  41e002:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41e006:	7822      	ldrb	r2, [r4, #0]
  41e008:	f363 1205 	bfi	r2, r3, #4, #2
  41e00c:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
  41e00e:	7803      	ldrb	r3, [r0, #0]
  41e010:	099b      	lsrs	r3, r3, #6
  41e012:	b2d2      	uxtb	r2, r2
  41e014:	f363 1287 	bfi	r2, r3, #6, #2
  41e018:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
  41e01a:	7842      	ldrb	r2, [r0, #1]
  41e01c:	7863      	ldrb	r3, [r4, #1]
  41e01e:	f362 0301 	bfi	r3, r2, #0, #2
  41e022:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
  41e024:	7843      	ldrb	r3, [r0, #1]
  41e026:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41e02a:	7862      	ldrb	r2, [r4, #1]
  41e02c:	f363 0283 	bfi	r2, r3, #2, #2
  41e030:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
  41e032:	7802      	ldrb	r2, [r0, #0]
  41e034:	7823      	ldrb	r3, [r4, #0]
  41e036:	f362 0303 	bfi	r3, r2, #0, #4
  41e03a:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41e03c:	22ff      	movs	r2, #255	; 0xff
  41e03e:	4611      	mov	r1, r2
  41e040:	4628      	mov	r0, r5
  41e042:	4b12      	ldr	r3, [pc, #72]	; (41e08c <lv_cont_create+0x128>)
  41e044:	4798      	blx	r3
}
  41e046:	4628      	mov	r0, r5
  41e048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(par != NULL) {
  41e04a:	2f00      	cmp	r7, #0
  41e04c:	d0fb      	beq.n	41e046 <lv_cont_create+0xe2>
            lv_theme_apply(cont, LV_THEME_CONT);
  41e04e:	210b      	movs	r1, #11
  41e050:	4628      	mov	r0, r5
  41e052:	4b0f      	ldr	r3, [pc, #60]	; (41e090 <lv_cont_create+0x12c>)
  41e054:	4798      	blx	r3
  41e056:	e7f6      	b.n	41e046 <lv_cont_create+0xe2>
  41e058:	00406625 	.word	0x00406625
  41e05c:	00415a81 	.word	0x00415a81
  41e060:	204147e0 	.word	0x204147e0
  41e064:	204147dc 	.word	0x204147dc
  41e068:	00405751 	.word	0x00405751
  41e06c:	00407e25 	.word	0x00407e25
  41e070:	00428c94 	.word	0x00428c94
  41e074:	00415a8d 	.word	0x00415a8d
  41e078:	00407dd5 	.word	0x00407dd5
  41e07c:	00407dfd 	.word	0x00407dfd
  41e080:	00407f85 	.word	0x00407f85
  41e084:	0041e78d 	.word	0x0041e78d
  41e088:	004056ed 	.word	0x004056ed
  41e08c:	00407671 	.word	0x00407671
  41e090:	00417ec5 	.word	0x00417ec5

0041e094 <lv_cont_set_layout>:
{
  41e094:	b538      	push	{r3, r4, r5, lr}
  41e096:	4604      	mov	r4, r0
  41e098:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41e09a:	4b0d      	ldr	r3, [pc, #52]	; (41e0d0 <lv_cont_set_layout+0x3c>)
  41e09c:	4798      	blx	r3
  41e09e:	b928      	cbnz	r0, 41e0ac <lv_cont_set_layout+0x18>
  41e0a0:	4622      	mov	r2, r4
  41e0a2:	2300      	movs	r3, #0
  41e0a4:	480b      	ldr	r0, [pc, #44]	; (41e0d4 <lv_cont_set_layout+0x40>)
  41e0a6:	490c      	ldr	r1, [pc, #48]	; (41e0d8 <lv_cont_set_layout+0x44>)
  41e0a8:	4788      	blx	r1
  41e0aa:	e7fe      	b.n	41e0aa <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e0ac:	4620      	mov	r0, r4
  41e0ae:	4b0b      	ldr	r3, [pc, #44]	; (41e0dc <lv_cont_set_layout+0x48>)
  41e0b0:	4798      	blx	r3
    if(ext->layout == layout) return;
  41e0b2:	7803      	ldrb	r3, [r0, #0]
  41e0b4:	f003 030f 	and.w	r3, r3, #15
  41e0b8:	42ab      	cmp	r3, r5
  41e0ba:	d008      	beq.n	41e0ce <lv_cont_set_layout+0x3a>
    ext->layout = layout;
  41e0bc:	7803      	ldrb	r3, [r0, #0]
  41e0be:	f365 0303 	bfi	r3, r5, #0, #4
  41e0c2:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  41e0c4:	69e3      	ldr	r3, [r4, #28]
  41e0c6:	2200      	movs	r2, #0
  41e0c8:	2101      	movs	r1, #1
  41e0ca:	4620      	mov	r0, r4
  41e0cc:	4798      	blx	r3
  41e0ce:	bd38      	pop	{r3, r4, r5, pc}
  41e0d0:	00415a81 	.word	0x00415a81
  41e0d4:	00428ca8 	.word	0x00428ca8
  41e0d8:	00415a8d 	.word	0x00415a8d
  41e0dc:	00407e25 	.word	0x00407e25

0041e0e0 <lv_cont_get_layout>:
{
  41e0e0:	b510      	push	{r4, lr}
  41e0e2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41e0e4:	4b07      	ldr	r3, [pc, #28]	; (41e104 <lv_cont_get_layout+0x24>)
  41e0e6:	4798      	blx	r3
  41e0e8:	b928      	cbnz	r0, 41e0f6 <lv_cont_get_layout+0x16>
  41e0ea:	4622      	mov	r2, r4
  41e0ec:	2300      	movs	r3, #0
  41e0ee:	4806      	ldr	r0, [pc, #24]	; (41e108 <lv_cont_get_layout+0x28>)
  41e0f0:	4906      	ldr	r1, [pc, #24]	; (41e10c <lv_cont_get_layout+0x2c>)
  41e0f2:	4788      	blx	r1
  41e0f4:	e7fe      	b.n	41e0f4 <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41e0f6:	4620      	mov	r0, r4
  41e0f8:	4b05      	ldr	r3, [pc, #20]	; (41e110 <lv_cont_get_layout+0x30>)
  41e0fa:	4798      	blx	r3
    return ext->layout;
  41e0fc:	7800      	ldrb	r0, [r0, #0]
}
  41e0fe:	f000 000f 	and.w	r0, r0, #15
  41e102:	bd10      	pop	{r4, pc}
  41e104:	00415a81 	.word	0x00415a81
  41e108:	00428ca8 	.word	0x00428ca8
  41e10c:	00415a8d 	.word	0x00415a8d
  41e110:	00407e25 	.word	0x00407e25

0041e114 <lv_cont_layout_col>:
{
  41e114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e118:	b085      	sub	sp, #20
  41e11a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e11c:	2212      	movs	r2, #18
  41e11e:	2100      	movs	r1, #0
  41e120:	4c3c      	ldr	r4, [pc, #240]	; (41e214 <lv_cont_layout_col+0x100>)
  41e122:	47a0      	blx	r4
  41e124:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e126:	2213      	movs	r2, #19
  41e128:	2100      	movs	r1, #0
  41e12a:	4648      	mov	r0, r9
  41e12c:	47a0      	blx	r4
  41e12e:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e130:	2210      	movs	r2, #16
  41e132:	2100      	movs	r1, #0
  41e134:	4648      	mov	r0, r9
  41e136:	47a0      	blx	r4
  41e138:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e13a:	2214      	movs	r2, #20
  41e13c:	2100      	movs	r1, #0
  41e13e:	4648      	mov	r0, r9
  41e140:	47a0      	blx	r4
  41e142:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
  41e144:	4648      	mov	r0, r9
  41e146:	4b34      	ldr	r3, [pc, #208]	; (41e218 <lv_cont_layout_col+0x104>)
  41e148:	4798      	blx	r3
    switch(type) {
  41e14a:	2803      	cmp	r0, #3
  41e14c:	d01c      	beq.n	41e188 <lv_cont_layout_col+0x74>
  41e14e:	2804      	cmp	r0, #4
  41e150:	d013      	beq.n	41e17a <lv_cont_layout_col+0x66>
  41e152:	2802      	cmp	r0, #2
  41e154:	d004      	beq.n	41e160 <lv_cont_layout_col+0x4c>
            hpad_corr = 0;
  41e156:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_LEFT;
  41e15a:	2301      	movs	r3, #1
  41e15c:	9303      	str	r3, [sp, #12]
            break;
  41e15e:	e001      	b.n	41e164 <lv_cont_layout_col+0x50>
            align     = LV_ALIGN_IN_TOP_LEFT;
  41e160:	2301      	movs	r3, #1
  41e162:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41e164:	2101      	movs	r1, #1
  41e166:	4648      	mov	r0, r9
  41e168:	4b2c      	ldr	r3, [pc, #176]	; (41e21c <lv_cont_layout_col+0x108>)
  41e16a:	4798      	blx	r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e16c:	f109 0804 	add.w	r8, r9, #4
  41e170:	4640      	mov	r0, r8
  41e172:	4b2b      	ldr	r3, [pc, #172]	; (41e220 <lv_cont_layout_col+0x10c>)
  41e174:	4798      	blx	r3
  41e176:	4604      	mov	r4, r0
  41e178:	e010      	b.n	41e19c <lv_cont_layout_col+0x88>
            hpad_corr = -right;
  41e17a:	f1c6 0a00 	rsb	sl, r6, #0
  41e17e:	fa0f fa8a 	sxth.w	sl, sl
            align     = LV_ALIGN_IN_TOP_RIGHT;
  41e182:	2303      	movs	r3, #3
  41e184:	9303      	str	r3, [sp, #12]
            break;
  41e186:	e7ed      	b.n	41e164 <lv_cont_layout_col+0x50>
            hpad_corr = 0;
  41e188:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_MID;
  41e18c:	2302      	movs	r3, #2
  41e18e:	9303      	str	r3, [sp, #12]
  41e190:	e7e8      	b.n	41e164 <lv_cont_layout_col+0x50>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e192:	4621      	mov	r1, r4
  41e194:	4640      	mov	r0, r8
  41e196:	4b23      	ldr	r3, [pc, #140]	; (41e224 <lv_cont_layout_col+0x110>)
  41e198:	4798      	blx	r3
  41e19a:	4604      	mov	r4, r0
  41e19c:	2c00      	cmp	r4, #0
  41e19e:	d031      	beq.n	41e204 <lv_cont_layout_col+0xf0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e1a0:	4620      	mov	r0, r4
  41e1a2:	4b21      	ldr	r3, [pc, #132]	; (41e228 <lv_cont_layout_col+0x114>)
  41e1a4:	4798      	blx	r3
  41e1a6:	2800      	cmp	r0, #0
  41e1a8:	d1f3      	bne.n	41e192 <lv_cont_layout_col+0x7e>
  41e1aa:	2104      	movs	r1, #4
  41e1ac:	4620      	mov	r0, r4
  41e1ae:	4b1f      	ldr	r3, [pc, #124]	; (41e22c <lv_cont_layout_col+0x118>)
  41e1b0:	4798      	blx	r3
  41e1b2:	2800      	cmp	r0, #0
  41e1b4:	d1ed      	bne.n	41e192 <lv_cont_layout_col+0x7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41e1b6:	2215      	movs	r2, #21
  41e1b8:	2100      	movs	r1, #0
  41e1ba:	4620      	mov	r0, r4
  41e1bc:	f8df b054 	ldr.w	fp, [pc, #84]	; 41e214 <lv_cont_layout_col+0x100>
  41e1c0:	47d8      	blx	fp
  41e1c2:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41e1c4:	2216      	movs	r2, #22
  41e1c6:	2100      	movs	r1, #0
  41e1c8:	4620      	mov	r0, r4
  41e1ca:	47d8      	blx	fp
  41e1cc:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41e1ce:	2217      	movs	r2, #23
  41e1d0:	2100      	movs	r1, #0
  41e1d2:	4620      	mov	r0, r4
  41e1d4:	47d8      	blx	fp
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
  41e1d6:	eb0a 0300 	add.w	r3, sl, r0
  41e1da:	b2ad      	uxth	r5, r5
  41e1dc:	19aa      	adds	r2, r5, r6
  41e1de:	b212      	sxth	r2, r2
  41e1e0:	9200      	str	r2, [sp, #0]
  41e1e2:	b21b      	sxth	r3, r3
  41e1e4:	9a03      	ldr	r2, [sp, #12]
  41e1e6:	4649      	mov	r1, r9
  41e1e8:	4620      	mov	r0, r4
  41e1ea:	f8df b04c 	ldr.w	fp, [pc, #76]	; 41e238 <lv_cont_layout_col+0x124>
  41e1ee:	47d8      	blx	fp
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
  41e1f0:	4620      	mov	r0, r4
  41e1f2:	4b0f      	ldr	r3, [pc, #60]	; (41e230 <lv_cont_layout_col+0x11c>)
  41e1f4:	4798      	blx	r3
  41e1f6:	9b02      	ldr	r3, [sp, #8]
  41e1f8:	4418      	add	r0, r3
  41e1fa:	4406      	add	r6, r0
  41e1fc:	443e      	add	r6, r7
  41e1fe:	4435      	add	r5, r6
  41e200:	b22d      	sxth	r5, r5
  41e202:	e7c6      	b.n	41e192 <lv_cont_layout_col+0x7e>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41e204:	2101      	movs	r1, #1
  41e206:	4648      	mov	r0, r9
  41e208:	4b0a      	ldr	r3, [pc, #40]	; (41e234 <lv_cont_layout_col+0x120>)
  41e20a:	4798      	blx	r3
}
  41e20c:	b005      	add	sp, #20
  41e20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e212:	bf00      	nop
  41e214:	00407255 	.word	0x00407255
  41e218:	0041e0e1 	.word	0x0041e0e1
  41e21c:	00405561 	.word	0x00405561
  41e220:	00415d9b 	.word	0x00415d9b
  41e224:	00415db3 	.word	0x00415db3
  41e228:	00405bd9 	.word	0x00405bd9
  41e22c:	00406bbd 	.word	0x00406bbd
  41e230:	004059c1 	.word	0x004059c1
  41e234:	00405591 	.word	0x00405591
  41e238:	00406011 	.word	0x00406011

0041e23c <lv_cont_layout_row>:
{
  41e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e240:	b085      	sub	sp, #20
  41e242:	4607      	mov	r7, r0
    lv_layout_t type = lv_cont_get_layout(cont);
  41e244:	4b4d      	ldr	r3, [pc, #308]	; (41e37c <lv_cont_layout_row+0x140>)
  41e246:	4798      	blx	r3
  41e248:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
  41e24a:	4638      	mov	r0, r7
  41e24c:	4b4c      	ldr	r3, [pc, #304]	; (41e380 <lv_cont_layout_row+0x144>)
  41e24e:	4798      	blx	r3
  41e250:	4680      	mov	r8, r0
    switch(type) {
  41e252:	2c06      	cmp	r4, #6
  41e254:	d031      	beq.n	41e2ba <lv_cont_layout_row+0x7e>
  41e256:	2c07      	cmp	r4, #7
  41e258:	d03b      	beq.n	41e2d2 <lv_cont_layout_row+0x96>
  41e25a:	2c05      	cmp	r4, #5
  41e25c:	d006      	beq.n	41e26c <lv_cont_layout_row+0x30>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41e25e:	2801      	cmp	r0, #1
  41e260:	d04b      	beq.n	41e2fa <lv_cont_layout_row+0xbe>
            vpad_corr = 0;
  41e262:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41e266:	2301      	movs	r3, #1
  41e268:	9303      	str	r3, [sp, #12]
  41e26a:	e00a      	b.n	41e282 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e26c:	2210      	movs	r2, #16
  41e26e:	2100      	movs	r1, #0
  41e270:	4638      	mov	r0, r7
  41e272:	4b44      	ldr	r3, [pc, #272]	; (41e384 <lv_cont_layout_row+0x148>)
  41e274:	4798      	blx	r3
  41e276:	4681      	mov	r9, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41e278:	f1b8 0f01 	cmp.w	r8, #1
  41e27c:	d01a      	beq.n	41e2b4 <lv_cont_layout_row+0x78>
  41e27e:	2301      	movs	r3, #1
  41e280:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41e282:	2101      	movs	r1, #1
  41e284:	4638      	mov	r0, r7
  41e286:	4b40      	ldr	r3, [pc, #256]	; (41e388 <lv_cont_layout_row+0x14c>)
  41e288:	4798      	blx	r3
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  41e28a:	f1b8 0f01 	cmp.w	r8, #1
  41e28e:	d039      	beq.n	41e304 <lv_cont_layout_row+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e290:	2212      	movs	r2, #18
  41e292:	2100      	movs	r1, #0
  41e294:	4638      	mov	r0, r7
  41e296:	4b3b      	ldr	r3, [pc, #236]	; (41e384 <lv_cont_layout_row+0x148>)
  41e298:	4798      	blx	r3
  41e29a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e29c:	2214      	movs	r2, #20
  41e29e:	2100      	movs	r1, #0
  41e2a0:	4638      	mov	r0, r7
  41e2a2:	4b38      	ldr	r3, [pc, #224]	; (41e384 <lv_cont_layout_row+0x148>)
  41e2a4:	4798      	blx	r3
  41e2a6:	4682      	mov	sl, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e2a8:	1d3d      	adds	r5, r7, #4
  41e2aa:	4628      	mov	r0, r5
  41e2ac:	4b37      	ldr	r3, [pc, #220]	; (41e38c <lv_cont_layout_row+0x150>)
  41e2ae:	4798      	blx	r3
  41e2b0:	4604      	mov	r4, r0
  41e2b2:	e043      	b.n	41e33c <lv_cont_layout_row+0x100>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41e2b4:	2303      	movs	r3, #3
  41e2b6:	9303      	str	r3, [sp, #12]
  41e2b8:	e7e3      	b.n	41e282 <lv_cont_layout_row+0x46>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41e2ba:	2801      	cmp	r0, #1
  41e2bc:	d004      	beq.n	41e2c8 <lv_cont_layout_row+0x8c>
            vpad_corr = 0;
  41e2be:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41e2c2:	2307      	movs	r3, #7
  41e2c4:	9303      	str	r3, [sp, #12]
  41e2c6:	e7dc      	b.n	41e282 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  41e2c8:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41e2cc:	2308      	movs	r3, #8
  41e2ce:	9303      	str	r3, [sp, #12]
  41e2d0:	e7d7      	b.n	41e282 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e2d2:	2211      	movs	r2, #17
  41e2d4:	2100      	movs	r1, #0
  41e2d6:	4638      	mov	r0, r7
  41e2d8:	4b2a      	ldr	r3, [pc, #168]	; (41e384 <lv_cont_layout_row+0x148>)
  41e2da:	4798      	blx	r3
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  41e2dc:	fa1f f980 	uxth.w	r9, r0
  41e2e0:	f1c9 0900 	rsb	r9, r9, #0
  41e2e4:	fa0f f989 	sxth.w	r9, r9
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  41e2e8:	f1b8 0f01 	cmp.w	r8, #1
  41e2ec:	d002      	beq.n	41e2f4 <lv_cont_layout_row+0xb8>
  41e2ee:	2304      	movs	r3, #4
  41e2f0:	9303      	str	r3, [sp, #12]
  41e2f2:	e7c6      	b.n	41e282 <lv_cont_layout_row+0x46>
  41e2f4:	2306      	movs	r3, #6
  41e2f6:	9303      	str	r3, [sp, #12]
  41e2f8:	e7c3      	b.n	41e282 <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  41e2fa:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41e2fe:	2303      	movs	r3, #3
  41e300:	9303      	str	r3, [sp, #12]
  41e302:	e7be      	b.n	41e282 <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e304:	2213      	movs	r2, #19
  41e306:	2100      	movs	r1, #0
  41e308:	4638      	mov	r0, r7
  41e30a:	4b1e      	ldr	r3, [pc, #120]	; (41e384 <lv_cont_layout_row+0x148>)
  41e30c:	4798      	blx	r3
  41e30e:	4606      	mov	r6, r0
  41e310:	e7c4      	b.n	41e29c <lv_cont_layout_row+0x60>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  41e312:	4273      	negs	r3, r6
  41e314:	f8cd 9000 	str.w	r9, [sp]
  41e318:	b21b      	sxth	r3, r3
  41e31a:	9a03      	ldr	r2, [sp, #12]
  41e31c:	4639      	mov	r1, r7
  41e31e:	4620      	mov	r0, r4
  41e320:	f8df b080 	ldr.w	fp, [pc, #128]	; 41e3a4 <lv_cont_layout_row+0x168>
  41e324:	47d8      	blx	fp
        last_cord += lv_obj_get_width(child) + inner;
  41e326:	4620      	mov	r0, r4
  41e328:	4b19      	ldr	r3, [pc, #100]	; (41e390 <lv_cont_layout_row+0x154>)
  41e32a:	4798      	blx	r3
  41e32c:	4450      	add	r0, sl
  41e32e:	4406      	add	r6, r0
  41e330:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41e332:	4621      	mov	r1, r4
  41e334:	4628      	mov	r0, r5
  41e336:	4b17      	ldr	r3, [pc, #92]	; (41e394 <lv_cont_layout_row+0x158>)
  41e338:	4798      	blx	r3
  41e33a:	4604      	mov	r4, r0
  41e33c:	b1bc      	cbz	r4, 41e36e <lv_cont_layout_row+0x132>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41e33e:	4620      	mov	r0, r4
  41e340:	4b15      	ldr	r3, [pc, #84]	; (41e398 <lv_cont_layout_row+0x15c>)
  41e342:	4798      	blx	r3
  41e344:	2800      	cmp	r0, #0
  41e346:	d1f4      	bne.n	41e332 <lv_cont_layout_row+0xf6>
  41e348:	2104      	movs	r1, #4
  41e34a:	4620      	mov	r0, r4
  41e34c:	4b13      	ldr	r3, [pc, #76]	; (41e39c <lv_cont_layout_row+0x160>)
  41e34e:	4798      	blx	r3
  41e350:	2800      	cmp	r0, #0
  41e352:	d1ee      	bne.n	41e332 <lv_cont_layout_row+0xf6>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  41e354:	f1b8 0f01 	cmp.w	r8, #1
  41e358:	d0db      	beq.n	41e312 <lv_cont_layout_row+0xd6>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
  41e35a:	f8cd 9000 	str.w	r9, [sp]
  41e35e:	4633      	mov	r3, r6
  41e360:	9a03      	ldr	r2, [sp, #12]
  41e362:	4639      	mov	r1, r7
  41e364:	4620      	mov	r0, r4
  41e366:	f8df b03c 	ldr.w	fp, [pc, #60]	; 41e3a4 <lv_cont_layout_row+0x168>
  41e36a:	47d8      	blx	fp
  41e36c:	e7db      	b.n	41e326 <lv_cont_layout_row+0xea>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41e36e:	2101      	movs	r1, #1
  41e370:	4638      	mov	r0, r7
  41e372:	4b0b      	ldr	r3, [pc, #44]	; (41e3a0 <lv_cont_layout_row+0x164>)
  41e374:	4798      	blx	r3
}
  41e376:	b005      	add	sp, #20
  41e378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e37c:	0041e0e1 	.word	0x0041e0e1
  41e380:	004065fd 	.word	0x004065fd
  41e384:	00407255 	.word	0x00407255
  41e388:	00405561 	.word	0x00405561
  41e38c:	00415d9b 	.word	0x00415d9b
  41e390:	00405991 	.word	0x00405991
  41e394:	00415db3 	.word	0x00415db3
  41e398:	00405bd9 	.word	0x00405bd9
  41e39c:	00406bbd 	.word	0x00406bbd
  41e3a0:	00405591 	.word	0x00405591
  41e3a4:	00406011 	.word	0x00406011

0041e3a8 <lv_cont_layout_pretty>:
{
  41e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e3ac:	b08d      	sub	sp, #52	; 0x34
  41e3ae:	4604      	mov	r4, r0
  41e3b0:	9006      	str	r0, [sp, #24]
    lv_layout_t type = lv_cont_get_layout(cont);
  41e3b2:	4bac      	ldr	r3, [pc, #688]	; (41e664 <lv_cont_layout_pretty+0x2bc>)
  41e3b4:	4798      	blx	r3
  41e3b6:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t w_obj         = lv_obj_get_width(cont);
  41e3b8:	4620      	mov	r0, r4
  41e3ba:	4bab      	ldr	r3, [pc, #684]	; (41e668 <lv_cont_layout_pretty+0x2c0>)
  41e3bc:	4798      	blx	r3
  41e3be:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e3c0:	2210      	movs	r2, #16
  41e3c2:	2100      	movs	r1, #0
  41e3c4:	4620      	mov	r0, r4
  41e3c6:	4ba9      	ldr	r3, [pc, #676]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e3c8:	4798      	blx	r3
  41e3ca:	9004      	str	r0, [sp, #16]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
  41e3cc:	4623      	mov	r3, r4
  41e3ce:	3304      	adds	r3, #4
  41e3d0:	9302      	str	r3, [sp, #8]
  41e3d2:	4618      	mov	r0, r3
  41e3d4:	4ba6      	ldr	r3, [pc, #664]	; (41e670 <lv_cont_layout_pretty+0x2c8>)
  41e3d6:	4798      	blx	r3
    if(child_rs == NULL) return;                /*Return if no child*/
  41e3d8:	2800      	cmp	r0, #0
  41e3da:	f000 8184 	beq.w	41e6e6 <lv_cont_layout_pretty+0x33e>
  41e3de:	4625      	mov	r5, r4
  41e3e0:	4682      	mov	sl, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41e3e2:	2101      	movs	r1, #1
  41e3e4:	4620      	mov	r0, r4
  41e3e6:	4ba3      	ldr	r3, [pc, #652]	; (41e674 <lv_cont_layout_pretty+0x2cc>)
  41e3e8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e3ea:	2212      	movs	r2, #18
  41e3ec:	2100      	movs	r1, #0
  41e3ee:	4620      	mov	r0, r4
  41e3f0:	4c9e      	ldr	r4, [pc, #632]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e3f2:	47a0      	blx	r4
  41e3f4:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e3f6:	2213      	movs	r2, #19
  41e3f8:	2100      	movs	r1, #0
  41e3fa:	4628      	mov	r0, r5
  41e3fc:	47a0      	blx	r4
  41e3fe:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41e400:	2214      	movs	r2, #20
  41e402:	2100      	movs	r1, #0
  41e404:	4628      	mov	r0, r5
  41e406:	47a0      	blx	r4
  41e408:	4683      	mov	fp, r0
    while(child_rs != NULL) {
  41e40a:	e08a      	b.n	41e522 <lv_cont_layout_pretty+0x17a>
  41e40c:	464d      	mov	r5, r9
                    if(child_rc != NULL && obj_num != 0) {
  41e40e:	2c00      	cmp	r4, #0
  41e410:	bf18      	it	ne
  41e412:	2f00      	cmpne	r7, #0
  41e414:	d056      	beq.n	41e4c4 <lv_cont_layout_pretty+0x11c>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
  41e416:	4621      	mov	r1, r4
  41e418:	9802      	ldr	r0, [sp, #8]
  41e41a:	4b97      	ldr	r3, [pc, #604]	; (41e678 <lv_cont_layout_pretty+0x2d0>)
  41e41c:	4798      	blx	r3
  41e41e:	4604      	mov	r4, r0
  41e420:	e050      	b.n	41e4c4 <lv_cont_layout_pretty+0x11c>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
  41e422:	4621      	mov	r1, r4
  41e424:	9802      	ldr	r0, [sp, #8]
  41e426:	4b95      	ldr	r3, [pc, #596]	; (41e67c <lv_cont_layout_pretty+0x2d4>)
  41e428:	4798      	blx	r3
  41e42a:	4604      	mov	r4, r0
            if(obj_num == 0)
  41e42c:	b907      	cbnz	r7, 41e430 <lv_cont_layout_pretty+0x88>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
  41e42e:	4682      	mov	sl, r0
        } while(child_rc != NULL);
  41e430:	2c00      	cmp	r4, #0
  41e432:	d046      	beq.n	41e4c2 <lv_cont_layout_pretty+0x11a>
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  41e434:	4620      	mov	r0, r4
  41e436:	4b92      	ldr	r3, [pc, #584]	; (41e680 <lv_cont_layout_pretty+0x2d8>)
  41e438:	4798      	blx	r3
  41e43a:	2800      	cmp	r0, #0
  41e43c:	d1f1      	bne.n	41e422 <lv_cont_layout_pretty+0x7a>
  41e43e:	2104      	movs	r1, #4
  41e440:	4620      	mov	r0, r4
  41e442:	4b90      	ldr	r3, [pc, #576]	; (41e684 <lv_cont_layout_pretty+0x2dc>)
  41e444:	4798      	blx	r3
  41e446:	2800      	cmp	r0, #0
  41e448:	d1eb      	bne.n	41e422 <lv_cont_layout_pretty+0x7a>
                lv_coord_t w = lv_obj_get_width(child_rc);
  41e44a:	4620      	mov	r0, r4
  41e44c:	4b86      	ldr	r3, [pc, #536]	; (41e668 <lv_cont_layout_pretty+0x2c0>)
  41e44e:	4798      	blx	r3
  41e450:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41e452:	2217      	movs	r2, #23
  41e454:	2100      	movs	r1, #0
  41e456:	4620      	mov	r0, r4
  41e458:	4d84      	ldr	r5, [pc, #528]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e45a:	47a8      	blx	r5
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
  41e45c:	fa16 f680 	uxtah	r6, r6, r0
  41e460:	b2b6      	uxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41e462:	2218      	movs	r2, #24
  41e464:	2100      	movs	r1, #0
  41e466:	4620      	mov	r0, r4
  41e468:	47a8      	blx	r5
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
  41e46a:	fa16 f080 	uxtah	r0, r6, r0
  41e46e:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
  41e470:	fa09 f380 	sxtah	r3, r9, r0
  41e474:	9a03      	ldr	r2, [sp, #12]
  41e476:	4293      	cmp	r3, r2
  41e478:	dcc8      	bgt.n	41e40c <lv_cont_layout_pretty+0x64>
                w_row += w + pinner; /*Add the object width + inner padding*/
  41e47a:	4458      	add	r0, fp
  41e47c:	fa19 f980 	uxtah	r9, r9, r0
  41e480:	fa0f f989 	sxth.w	r9, r9
                lv_coord_t h = lv_obj_get_height(child_rc);
  41e484:	4620      	mov	r0, r4
  41e486:	4b80      	ldr	r3, [pc, #512]	; (41e688 <lv_cont_layout_pretty+0x2e0>)
  41e488:	4798      	blx	r3
  41e48a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41e48c:	2215      	movs	r2, #21
  41e48e:	2100      	movs	r1, #0
  41e490:	4620      	mov	r0, r4
  41e492:	4e76      	ldr	r6, [pc, #472]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e494:	47b0      	blx	r6
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
  41e496:	fa15 f580 	uxtah	r5, r5, r0
  41e49a:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41e49c:	2216      	movs	r2, #22
  41e49e:	2100      	movs	r1, #0
  41e4a0:	4620      	mov	r0, r4
  41e4a2:	47b0      	blx	r6
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  41e4a4:	fa15 f080 	uxtah	r0, r5, r0
  41e4a8:	b200      	sxth	r0, r0
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
  41e4aa:	4580      	cmp	r8, r0
  41e4ac:	bfb8      	it	lt
  41e4ae:	4680      	movlt	r8, r0
                obj_num++;
  41e4b0:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
  41e4b2:	2108      	movs	r1, #8
  41e4b4:	4620      	mov	r0, r4
  41e4b6:	4b73      	ldr	r3, [pc, #460]	; (41e684 <lv_cont_layout_pretty+0x2dc>)
  41e4b8:	4798      	blx	r3
  41e4ba:	2800      	cmp	r0, #0
  41e4bc:	d0b1      	beq.n	41e422 <lv_cont_layout_pretty+0x7a>
  41e4be:	464d      	mov	r5, r9
  41e4c0:	e000      	b.n	41e4c4 <lv_cont_layout_pretty+0x11c>
  41e4c2:	464d      	mov	r5, r9
        if(obj_num == 0) {
  41e4c4:	2f00      	cmp	r7, #0
  41e4c6:	d139      	bne.n	41e53c <lv_cont_layout_pretty+0x194>
            if(child_rc != NULL) {
  41e4c8:	b1e4      	cbz	r4, 41e504 <lv_cont_layout_pretty+0x15c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41e4ca:	2215      	movs	r2, #21
  41e4cc:	2100      	movs	r1, #0
  41e4ce:	4620      	mov	r0, r4
  41e4d0:	4e66      	ldr	r6, [pc, #408]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e4d2:	47b0      	blx	r6
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
  41e4d4:	b285      	uxth	r5, r0
  41e4d6:	9b04      	ldr	r3, [sp, #16]
  41e4d8:	18eb      	adds	r3, r5, r3
  41e4da:	b21b      	sxth	r3, r3
  41e4dc:	9300      	str	r3, [sp, #0]
  41e4de:	2300      	movs	r3, #0
  41e4e0:	2202      	movs	r2, #2
  41e4e2:	9906      	ldr	r1, [sp, #24]
  41e4e4:	4620      	mov	r0, r4
  41e4e6:	4f69      	ldr	r7, [pc, #420]	; (41e68c <lv_cont_layout_pretty+0x2e4>)
  41e4e8:	47b8      	blx	r7
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
  41e4ea:	4620      	mov	r0, r4
  41e4ec:	4b66      	ldr	r3, [pc, #408]	; (41e688 <lv_cont_layout_pretty+0x2e0>)
  41e4ee:	4798      	blx	r3
                h_row += mtop;
  41e4f0:	4405      	add	r5, r0
  41e4f2:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41e4f4:	2216      	movs	r2, #22
  41e4f6:	2100      	movs	r1, #0
  41e4f8:	4620      	mov	r0, r4
  41e4fa:	47b0      	blx	r6
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  41e4fc:	fa15 f080 	uxtah	r0, r5, r0
  41e500:	fa0f f880 	sxth.w	r8, r0
        if(child_rc == NULL) break;
  41e504:	2c00      	cmp	r4, #0
  41e506:	f000 80ea 	beq.w	41e6de <lv_cont_layout_pretty+0x336>
        act_y += pinner + h_row;           /*y increment*/
  41e50a:	44d8      	add	r8, fp
  41e50c:	9b04      	ldr	r3, [sp, #16]
  41e50e:	fa13 f888 	uxtah	r8, r3, r8
  41e512:	fa0f f388 	sxth.w	r3, r8
  41e516:	9304      	str	r3, [sp, #16]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
  41e518:	4621      	mov	r1, r4
  41e51a:	9802      	ldr	r0, [sp, #8]
  41e51c:	4b57      	ldr	r3, [pc, #348]	; (41e67c <lv_cont_layout_pretty+0x2d4>)
  41e51e:	4798      	blx	r3
  41e520:	4682      	mov	sl, r0
    while(child_rs != NULL) {
  41e522:	f1ba 0f00 	cmp.w	sl, #0
  41e526:	f000 80da 	beq.w	41e6de <lv_cont_layout_pretty+0x336>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  41e52a:	9b05      	ldr	r3, [sp, #20]
  41e52c:	9a07      	ldr	r2, [sp, #28]
  41e52e:	189d      	adds	r5, r3, r2
  41e530:	b22d      	sxth	r5, r5
  41e532:	4654      	mov	r4, sl
        uint32_t obj_num = 0;
  41e534:	2700      	movs	r7, #0
        lv_coord_t h_row = 0;
  41e536:	46b8      	mov	r8, r7
  41e538:	46a9      	mov	r9, r5
  41e53a:	e77b      	b.n	41e434 <lv_cont_layout_pretty+0x8c>
        else if(obj_num == 1) {
  41e53c:	2f01      	cmp	r7, #1
  41e53e:	d015      	beq.n	41e56c <lv_cont_layout_pretty+0x1c4>
            w_row -= pinner * obj_num;
  41e540:	fb1b f307 	smulbb	r3, fp, r7
  41e544:	1aeb      	subs	r3, r5, r3
  41e546:	b21b      	sxth	r3, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
  41e548:	9a03      	ldr	r2, [sp, #12]
  41e54a:	1ad3      	subs	r3, r2, r3
  41e54c:	3f01      	subs	r7, #1
  41e54e:	fbb3 f7f7 	udiv	r7, r3, r7
  41e552:	b23d      	sxth	r5, r7
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
  41e554:	9806      	ldr	r0, [sp, #24]
  41e556:	4b4e      	ldr	r3, [pc, #312]	; (41e690 <lv_cont_layout_pretty+0x2e8>)
  41e558:	4798      	blx	r3
  41e55a:	2801      	cmp	r0, #1
  41e55c:	d017      	beq.n	41e58e <lv_cont_layout_pretty+0x1e6>
                inv = 1;
  41e55e:	2301      	movs	r3, #1
  41e560:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_LEFT;
  41e562:	9309      	str	r3, [sp, #36]	; 0x24
                align = LV_ALIGN_IN_TOP_RIGHT;
  41e564:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41e568:	4656      	mov	r6, sl
  41e56a:	e03e      	b.n	41e5ea <lv_cont_layout_pretty+0x242>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41e56c:	2215      	movs	r2, #21
  41e56e:	2100      	movs	r1, #0
  41e570:	4650      	mov	r0, sl
  41e572:	4b3e      	ldr	r3, [pc, #248]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e574:	4798      	blx	r3
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
  41e576:	9b04      	ldr	r3, [sp, #16]
  41e578:	fa13 f380 	uxtah	r3, r3, r0
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
  41e57c:	b21b      	sxth	r3, r3
  41e57e:	9300      	str	r3, [sp, #0]
  41e580:	2300      	movs	r3, #0
  41e582:	2202      	movs	r2, #2
  41e584:	9906      	ldr	r1, [sp, #24]
  41e586:	4650      	mov	r0, sl
  41e588:	4d40      	ldr	r5, [pc, #256]	; (41e68c <lv_cont_layout_pretty+0x2e4>)
  41e58a:	47a8      	blx	r5
  41e58c:	e7ba      	b.n	41e504 <lv_cont_layout_pretty+0x15c>
                inv = -1;
  41e58e:	f04f 33ff 	mov.w	r3, #4294967295
  41e592:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_RIGHT;
  41e594:	2303      	movs	r3, #3
  41e596:	9309      	str	r3, [sp, #36]	; 0x24
  41e598:	e7e4      	b.n	41e564 <lv_cont_layout_pretty+0x1bc>
                                         inv * (act_x + mleft),
  41e59a:	eb09 0a07 	add.w	sl, r9, r7
  41e59e:	2215      	movs	r2, #21
  41e5a0:	2100      	movs	r1, #0
  41e5a2:	4630      	mov	r0, r6
  41e5a4:	4b31      	ldr	r3, [pc, #196]	; (41e66c <lv_cont_layout_pretty+0x2c4>)
  41e5a6:	4798      	blx	r3
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
  41e5a8:	9b04      	ldr	r3, [sp, #16]
  41e5aa:	fa13 f280 	uxtah	r2, r3, r0
                            lv_obj_align(child_tmp, cont, align,
  41e5ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  41e5b2:	fb1a f303 	smulbb	r3, sl, r3
  41e5b6:	b212      	sxth	r2, r2
  41e5b8:	9200      	str	r2, [sp, #0]
  41e5ba:	b21b      	sxth	r3, r3
  41e5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41e5be:	9906      	ldr	r1, [sp, #24]
  41e5c0:	4630      	mov	r0, r6
  41e5c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 41e68c <lv_cont_layout_pretty+0x2e4>
  41e5c6:	47d0      	blx	sl
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
  41e5c8:	4630      	mov	r0, r6
  41e5ca:	4b27      	ldr	r3, [pc, #156]	; (41e668 <lv_cont_layout_pretty+0x2c0>)
  41e5cc:	4798      	blx	r3
  41e5ce:	182b      	adds	r3, r5, r0
  41e5d0:	443b      	add	r3, r7
  41e5d2:	9a08      	ldr	r2, [sp, #32]
  41e5d4:	441a      	add	r2, r3
  41e5d6:	4491      	add	r9, r2
  41e5d8:	fa0f f989 	sxth.w	r9, r9
                if(child_tmp == child_rc) break;
  41e5dc:	42b4      	cmp	r4, r6
  41e5de:	d091      	beq.n	41e504 <lv_cont_layout_pretty+0x15c>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
  41e5e0:	4631      	mov	r1, r6
  41e5e2:	9802      	ldr	r0, [sp, #8]
  41e5e4:	4b25      	ldr	r3, [pc, #148]	; (41e67c <lv_cont_layout_pretty+0x2d4>)
  41e5e6:	4798      	blx	r3
  41e5e8:	4606      	mov	r6, r0
            while(child_tmp != NULL) {
  41e5ea:	2e00      	cmp	r6, #0
  41e5ec:	d08a      	beq.n	41e504 <lv_cont_layout_pretty+0x15c>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
  41e5ee:	4630      	mov	r0, r6
  41e5f0:	4b23      	ldr	r3, [pc, #140]	; (41e680 <lv_cont_layout_pretty+0x2d8>)
  41e5f2:	4798      	blx	r3
  41e5f4:	2800      	cmp	r0, #0
  41e5f6:	d1f1      	bne.n	41e5dc <lv_cont_layout_pretty+0x234>
  41e5f8:	2104      	movs	r1, #4
  41e5fa:	4630      	mov	r0, r6
  41e5fc:	4b21      	ldr	r3, [pc, #132]	; (41e684 <lv_cont_layout_pretty+0x2dc>)
  41e5fe:	4798      	blx	r3
  41e600:	2800      	cmp	r0, #0
  41e602:	d1eb      	bne.n	41e5dc <lv_cont_layout_pretty+0x234>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41e604:	2217      	movs	r2, #23
  41e606:	2100      	movs	r1, #0
  41e608:	4630      	mov	r0, r6
  41e60a:	f8df a060 	ldr.w	sl, [pc, #96]	; 41e66c <lv_cont_layout_pretty+0x2c4>
  41e60e:	47d0      	blx	sl
  41e610:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41e612:	2218      	movs	r2, #24
  41e614:	2100      	movs	r1, #0
  41e616:	4630      	mov	r0, r6
  41e618:	47d0      	blx	sl
  41e61a:	9008      	str	r0, [sp, #32]
                    switch(type) {
  41e61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41e61e:	2b09      	cmp	r3, #9
  41e620:	d004      	beq.n	41e62c <lv_cont_layout_pretty+0x284>
  41e622:	2b0a      	cmp	r3, #10
  41e624:	d036      	beq.n	41e694 <lv_cont_layout_pretty+0x2ec>
  41e626:	2b08      	cmp	r3, #8
  41e628:	d1ce      	bne.n	41e5c8 <lv_cont_layout_pretty+0x220>
  41e62a:	e7b6      	b.n	41e59a <lv_cont_layout_pretty+0x1f2>
                                         inv * (act_x + mleft),
  41e62c:	eb09 0a07 	add.w	sl, r9, r7
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  41e630:	4630      	mov	r0, r6
  41e632:	4b15      	ldr	r3, [pc, #84]	; (41e688 <lv_cont_layout_pretty+0x2e0>)
  41e634:	4798      	blx	r3
  41e636:	ebb8 0000 	subs.w	r0, r8, r0
  41e63a:	d410      	bmi.n	41e65e <lv_cont_layout_pretty+0x2b6>
  41e63c:	9b04      	ldr	r3, [sp, #16]
  41e63e:	eb03 0260 	add.w	r2, r3, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
  41e642:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  41e646:	fb1a f303 	smulbb	r3, sl, r3
  41e64a:	b212      	sxth	r2, r2
  41e64c:	9200      	str	r2, [sp, #0]
  41e64e:	b21b      	sxth	r3, r3
  41e650:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41e652:	9906      	ldr	r1, [sp, #24]
  41e654:	4630      	mov	r0, r6
  41e656:	f8df a034 	ldr.w	sl, [pc, #52]	; 41e68c <lv_cont_layout_pretty+0x2e4>
  41e65a:	47d0      	blx	sl
                            break;
  41e65c:	e7b4      	b.n	41e5c8 <lv_cont_layout_pretty+0x220>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  41e65e:	3001      	adds	r0, #1
  41e660:	e7ec      	b.n	41e63c <lv_cont_layout_pretty+0x294>
  41e662:	bf00      	nop
  41e664:	0041e0e1 	.word	0x0041e0e1
  41e668:	00405991 	.word	0x00405991
  41e66c:	00407255 	.word	0x00407255
  41e670:	00415d9b 	.word	0x00415d9b
  41e674:	00405561 	.word	0x00405561
  41e678:	00415da5 	.word	0x00415da5
  41e67c:	00415db3 	.word	0x00415db3
  41e680:	00405bd9 	.word	0x00405bd9
  41e684:	00406bbd 	.word	0x00406bbd
  41e688:	004059c1 	.word	0x004059c1
  41e68c:	00406011 	.word	0x00406011
  41e690:	004065fd 	.word	0x004065fd
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  41e694:	9b04      	ldr	r3, [sp, #16]
  41e696:	eb03 0a08 	add.w	sl, r3, r8
  41e69a:	fa1f fa8a 	uxth.w	sl, sl
  41e69e:	4630      	mov	r0, r6
  41e6a0:	4b12      	ldr	r3, [pc, #72]	; (41e6ec <lv_cont_layout_pretty+0x344>)
  41e6a2:	4798      	blx	r3
  41e6a4:	b280      	uxth	r0, r0
  41e6a6:	ebaa 0a00 	sub.w	sl, sl, r0
  41e6aa:	fa1f fa8a 	uxth.w	sl, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41e6ae:	2216      	movs	r2, #22
  41e6b0:	2100      	movs	r1, #0
  41e6b2:	4630      	mov	r0, r6
  41e6b4:	4b0e      	ldr	r3, [pc, #56]	; (41e6f0 <lv_cont_layout_pretty+0x348>)
  41e6b6:	4798      	blx	r3
  41e6b8:	b282      	uxth	r2, r0
  41e6ba:	ebaa 0202 	sub.w	r2, sl, r2
                            lv_obj_align(child_tmp, cont, align,
  41e6be:	eb09 0307 	add.w	r3, r9, r7
  41e6c2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  41e6c6:	fb13 f301 	smulbb	r3, r3, r1
  41e6ca:	b212      	sxth	r2, r2
  41e6cc:	9200      	str	r2, [sp, #0]
  41e6ce:	b21b      	sxth	r3, r3
  41e6d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41e6d2:	9906      	ldr	r1, [sp, #24]
  41e6d4:	4630      	mov	r0, r6
  41e6d6:	f8df a020 	ldr.w	sl, [pc, #32]	; 41e6f8 <lv_cont_layout_pretty+0x350>
  41e6da:	47d0      	blx	sl
                            break;
  41e6dc:	e774      	b.n	41e5c8 <lv_cont_layout_pretty+0x220>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41e6de:	2101      	movs	r1, #1
  41e6e0:	9806      	ldr	r0, [sp, #24]
  41e6e2:	4b04      	ldr	r3, [pc, #16]	; (41e6f4 <lv_cont_layout_pretty+0x34c>)
  41e6e4:	4798      	blx	r3
}
  41e6e6:	b00d      	add	sp, #52	; 0x34
  41e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41e6ec:	004059c1 	.word	0x004059c1
  41e6f0:	00407255 	.word	0x00407255
  41e6f4:	00405591 	.word	0x00405591
  41e6f8:	00406011 	.word	0x00406011

0041e6fc <lv_cont_refr_layout>:
{
  41e6fc:	b538      	push	{r3, r4, r5, lr}
  41e6fe:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  41e700:	2101      	movs	r1, #1
  41e702:	4b1a      	ldr	r3, [pc, #104]	; (41e76c <lv_cont_refr_layout+0x70>)
  41e704:	4798      	blx	r3
  41e706:	b100      	cbz	r0, 41e70a <lv_cont_refr_layout+0xe>
  41e708:	bd38      	pop	{r3, r4, r5, pc}
    lv_layout_t type = lv_cont_get_layout(cont);
  41e70a:	4620      	mov	r0, r4
  41e70c:	4b18      	ldr	r3, [pc, #96]	; (41e770 <lv_cont_refr_layout+0x74>)
  41e70e:	4798      	blx	r3
  41e710:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
  41e712:	2100      	movs	r1, #0
  41e714:	4620      	mov	r0, r4
  41e716:	4b17      	ldr	r3, [pc, #92]	; (41e774 <lv_cont_refr_layout+0x78>)
  41e718:	4798      	blx	r3
  41e71a:	2800      	cmp	r0, #0
  41e71c:	d0f4      	beq.n	41e708 <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_OFF) return;
  41e71e:	2d00      	cmp	r5, #0
  41e720:	d0f2      	beq.n	41e708 <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_CENTER) {
  41e722:	2d01      	cmp	r5, #1
  41e724:	d012      	beq.n	41e74c <lv_cont_refr_layout+0x50>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
  41e726:	1eab      	subs	r3, r5, #2
  41e728:	b2db      	uxtb	r3, r3
  41e72a:	2b02      	cmp	r3, #2
  41e72c:	d912      	bls.n	41e754 <lv_cont_refr_layout+0x58>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
  41e72e:	1f6b      	subs	r3, r5, #5
  41e730:	b2db      	uxtb	r3, r3
  41e732:	2b02      	cmp	r3, #2
  41e734:	d912      	bls.n	41e75c <lv_cont_refr_layout+0x60>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
  41e736:	f1a5 0308 	sub.w	r3, r5, #8
  41e73a:	b2db      	uxtb	r3, r3
  41e73c:	2b02      	cmp	r3, #2
  41e73e:	d911      	bls.n	41e764 <lv_cont_refr_layout+0x68>
    else if(type == LV_LAYOUT_GRID) {
  41e740:	2d0b      	cmp	r5, #11
  41e742:	d1e1      	bne.n	41e708 <lv_cont_refr_layout+0xc>
        lv_cont_layout_grid(cont);
  41e744:	4620      	mov	r0, r4
  41e746:	4b0c      	ldr	r3, [pc, #48]	; (41e778 <lv_cont_refr_layout+0x7c>)
  41e748:	4798      	blx	r3
  41e74a:	e7dd      	b.n	41e708 <lv_cont_refr_layout+0xc>
        lv_cont_layout_center(cont);
  41e74c:	4620      	mov	r0, r4
  41e74e:	4b0b      	ldr	r3, [pc, #44]	; (41e77c <lv_cont_refr_layout+0x80>)
  41e750:	4798      	blx	r3
  41e752:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_col(cont);
  41e754:	4620      	mov	r0, r4
  41e756:	4b0a      	ldr	r3, [pc, #40]	; (41e780 <lv_cont_refr_layout+0x84>)
  41e758:	4798      	blx	r3
  41e75a:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_row(cont);
  41e75c:	4620      	mov	r0, r4
  41e75e:	4b09      	ldr	r3, [pc, #36]	; (41e784 <lv_cont_refr_layout+0x88>)
  41e760:	4798      	blx	r3
  41e762:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_pretty(cont);
  41e764:	4620      	mov	r0, r4
  41e766:	4b08      	ldr	r3, [pc, #32]	; (41e788 <lv_cont_refr_layout+0x8c>)
  41e768:	4798      	blx	r3
  41e76a:	bd38      	pop	{r3, r4, r5, pc}
  41e76c:	00406bbd 	.word	0x00406bbd
  41e770:	0041e0e1 	.word	0x0041e0e1
  41e774:	00405891 	.word	0x00405891
  41e778:	0041da71 	.word	0x0041da71
  41e77c:	0041d945 	.word	0x0041d945
  41e780:	0041e115 	.word	0x0041e115
  41e784:	0041e23d 	.word	0x0041e23d
  41e788:	0041e3a9 	.word	0x0041e3a9

0041e78c <lv_cont_signal>:
{
  41e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e78e:	4607      	mov	r7, r0
  41e790:	460c      	mov	r4, r1
  41e792:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41e794:	2908      	cmp	r1, #8
  41e796:	d013      	beq.n	41e7c0 <lv_cont_signal+0x34>
    res = ancestor_signal(cont, sign, param);
  41e798:	4b2a      	ldr	r3, [pc, #168]	; (41e844 <lv_cont_signal+0xb8>)
  41e79a:	681b      	ldr	r3, [r3, #0]
  41e79c:	4798      	blx	r3
  41e79e:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41e7a0:	2801      	cmp	r0, #1
  41e7a2:	d113      	bne.n	41e7cc <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e7a4:	2c07      	cmp	r4, #7
  41e7a6:	d01b      	beq.n	41e7e0 <lv_cont_signal+0x54>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
  41e7a8:	2c04      	cmp	r4, #4
  41e7aa:	d01f      	beq.n	41e7ec <lv_cont_signal+0x60>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
  41e7ac:	2c01      	cmp	r4, #1
  41e7ae:	d024      	beq.n	41e7fa <lv_cont_signal+0x6e>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41e7b0:	2c02      	cmp	r4, #2
  41e7b2:	d029      	beq.n	41e808 <lv_cont_signal+0x7c>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  41e7b4:	2c03      	cmp	r4, #3
  41e7b6:	d109      	bne.n	41e7cc <lv_cont_signal+0x40>
        lv_cont_refr_autofit(cont);
  41e7b8:	4638      	mov	r0, r7
  41e7ba:	4b23      	ldr	r3, [pc, #140]	; (41e848 <lv_cont_signal+0xbc>)
  41e7bc:	4798      	blx	r3
  41e7be:	e005      	b.n	41e7cc <lv_cont_signal+0x40>
        info->result = lv_cont_get_style(cont, info->part);
  41e7c0:	7811      	ldrb	r1, [r2, #0]
  41e7c2:	4b22      	ldr	r3, [pc, #136]	; (41e84c <lv_cont_signal+0xc0>)
  41e7c4:	4798      	blx	r3
  41e7c6:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41e7c8:	b110      	cbz	r0, 41e7d0 <lv_cont_signal+0x44>
  41e7ca:	2601      	movs	r6, #1
}
  41e7cc:	4630      	mov	r0, r6
  41e7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else return ancestor_signal(cont, sign, param);
  41e7d0:	4b1c      	ldr	r3, [pc, #112]	; (41e844 <lv_cont_signal+0xb8>)
  41e7d2:	681b      	ldr	r3, [r3, #0]
  41e7d4:	462a      	mov	r2, r5
  41e7d6:	4621      	mov	r1, r4
  41e7d8:	4638      	mov	r0, r7
  41e7da:	4798      	blx	r3
  41e7dc:	4606      	mov	r6, r0
  41e7de:	e7f5      	b.n	41e7cc <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e7e0:	491b      	ldr	r1, [pc, #108]	; (41e850 <lv_cont_signal+0xc4>)
  41e7e2:	4628      	mov	r0, r5
  41e7e4:	4b1b      	ldr	r3, [pc, #108]	; (41e854 <lv_cont_signal+0xc8>)
  41e7e6:	4798      	blx	r3
  41e7e8:	4606      	mov	r6, r0
  41e7ea:	e7ef      	b.n	41e7cc <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  41e7ec:	4638      	mov	r0, r7
  41e7ee:	4b1a      	ldr	r3, [pc, #104]	; (41e858 <lv_cont_signal+0xcc>)
  41e7f0:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  41e7f2:	4638      	mov	r0, r7
  41e7f4:	4b14      	ldr	r3, [pc, #80]	; (41e848 <lv_cont_signal+0xbc>)
  41e7f6:	4798      	blx	r3
  41e7f8:	e7e8      	b.n	41e7cc <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  41e7fa:	4638      	mov	r0, r7
  41e7fc:	4b16      	ldr	r3, [pc, #88]	; (41e858 <lv_cont_signal+0xcc>)
  41e7fe:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  41e800:	4638      	mov	r0, r7
  41e802:	4b11      	ldr	r3, [pc, #68]	; (41e848 <lv_cont_signal+0xbc>)
  41e804:	4798      	blx	r3
  41e806:	e7e1      	b.n	41e7cc <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  41e808:	4638      	mov	r0, r7
  41e80a:	4b14      	ldr	r3, [pc, #80]	; (41e85c <lv_cont_signal+0xd0>)
  41e80c:	4798      	blx	r3
  41e80e:	88ab      	ldrh	r3, [r5, #4]
  41e810:	882a      	ldrh	r2, [r5, #0]
  41e812:	1a9b      	subs	r3, r3, r2
  41e814:	b29b      	uxth	r3, r3
  41e816:	3301      	adds	r3, #1
  41e818:	b21b      	sxth	r3, r3
  41e81a:	4298      	cmp	r0, r3
  41e81c:	d006      	beq.n	41e82c <lv_cont_signal+0xa0>
            lv_cont_refr_layout(cont);
  41e81e:	4638      	mov	r0, r7
  41e820:	4b0d      	ldr	r3, [pc, #52]	; (41e858 <lv_cont_signal+0xcc>)
  41e822:	4798      	blx	r3
            lv_cont_refr_autofit(cont);
  41e824:	4638      	mov	r0, r7
  41e826:	4b08      	ldr	r3, [pc, #32]	; (41e848 <lv_cont_signal+0xbc>)
  41e828:	4798      	blx	r3
  41e82a:	e7cf      	b.n	41e7cc <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  41e82c:	4638      	mov	r0, r7
  41e82e:	4b0c      	ldr	r3, [pc, #48]	; (41e860 <lv_cont_signal+0xd4>)
  41e830:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41e832:	88eb      	ldrh	r3, [r5, #6]
  41e834:	886a      	ldrh	r2, [r5, #2]
  41e836:	1a9b      	subs	r3, r3, r2
  41e838:	b29b      	uxth	r3, r3
  41e83a:	3301      	adds	r3, #1
  41e83c:	b21b      	sxth	r3, r3
  41e83e:	4298      	cmp	r0, r3
  41e840:	d1ed      	bne.n	41e81e <lv_cont_signal+0x92>
  41e842:	e7c3      	b.n	41e7cc <lv_cont_signal+0x40>
  41e844:	204147e0 	.word	0x204147e0
  41e848:	0041db61 	.word	0x0041db61
  41e84c:	0041d939 	.word	0x0041d939
  41e850:	0042c3c4 	.word	0x0042c3c4
  41e854:	004080b1 	.word	0x004080b1
  41e858:	0041e6fd 	.word	0x0041e6fd
  41e85c:	00405991 	.word	0x00405991
  41e860:	004059c1 	.word	0x004059c1

0041e864 <lv_img_get_style>:
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  41e864:	b909      	cbnz	r1, 41e86a <lv_img_get_style+0x6>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
  41e866:	3028      	adds	r0, #40	; 0x28
            break;
  41e868:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  41e86a:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  41e86c:	4770      	bx	lr
	...

0041e870 <lv_img_design>:
{
  41e870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e874:	b0af      	sub	sp, #188	; 0xbc
  41e876:	4604      	mov	r4, r0
  41e878:	9103      	str	r1, [sp, #12]
  41e87a:	4617      	mov	r7, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
  41e87c:	4ba2      	ldr	r3, [pc, #648]	; (41eb08 <lv_img_design+0x298>)
  41e87e:	4798      	blx	r3
  41e880:	4605      	mov	r5, r0
    if(mode == LV_DESIGN_COVER_CHK) {
  41e882:	2f02      	cmp	r7, #2
  41e884:	d00e      	beq.n	41e8a4 <lv_img_design+0x34>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41e886:	2f00      	cmp	r7, #0
  41e888:	f040 825d 	bne.w	41ed46 <lv_img_design+0x4d6>
        if(ext->h == 0 || ext->w == 0) return true;
  41e88c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  41e890:	2b00      	cmp	r3, #0
  41e892:	f000 8256 	beq.w	41ed42 <lv_img_design+0x4d2>
  41e896:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  41e89a:	2b00      	cmp	r3, #0
  41e89c:	f040 8087 	bne.w	41e9ae <lv_img_design+0x13e>
  41e8a0:	2001      	movs	r0, #1
  41e8a2:	e253      	b.n	41ed4c <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41e8a4:	2202      	movs	r2, #2
  41e8a6:	2100      	movs	r1, #0
  41e8a8:	4620      	mov	r0, r4
  41e8aa:	4b98      	ldr	r3, [pc, #608]	; (41eb0c <lv_img_design+0x29c>)
  41e8ac:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  41e8ae:	b108      	cbz	r0, 41e8b4 <lv_img_design+0x44>
  41e8b0:	2003      	movs	r0, #3
  41e8b2:	e24b      	b.n	41ed4c <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  41e8b4:	7d2a      	ldrb	r2, [r5, #20]
  41e8b6:	f002 0303 	and.w	r3, r2, #3
  41e8ba:	3b02      	subs	r3, #2
  41e8bc:	b2db      	uxtb	r3, r3
  41e8be:	2b01      	cmp	r3, #1
  41e8c0:	f240 82f6 	bls.w	41eeb0 <lv_img_design+0x640>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
  41e8c4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  41e8c8:	2a20      	cmp	r2, #32
  41e8ca:	bf18      	it	ne
  41e8cc:	2a08      	cmpne	r2, #8
  41e8ce:	d001      	beq.n	41e8d4 <lv_img_design+0x64>
  41e8d0:	2002      	movs	r0, #2
  41e8d2:	e23b      	b.n	41ed4c <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  41e8d4:	f248 02ac 	movw	r2, #32940	; 0x80ac
  41e8d8:	2100      	movs	r1, #0
  41e8da:	4620      	mov	r0, r4
  41e8dc:	4b8c      	ldr	r3, [pc, #560]	; (41eb10 <lv_img_design+0x2a0>)
  41e8de:	4798      	blx	r3
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
  41e8e0:	28ff      	cmp	r0, #255	; 0xff
  41e8e2:	d001      	beq.n	41e8e8 <lv_img_design+0x78>
  41e8e4:	2002      	movs	r0, #2
  41e8e6:	e231      	b.n	41ed4c <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41e8e8:	2206      	movs	r2, #6
  41e8ea:	2100      	movs	r1, #0
  41e8ec:	4620      	mov	r0, r4
  41e8ee:	4b87      	ldr	r3, [pc, #540]	; (41eb0c <lv_img_design+0x29c>)
  41e8f0:	4798      	blx	r3
        angle_final += ext->angle;
  41e8f2:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
  41e8f4:	42d8      	cmn	r0, r3
  41e8f6:	d001      	beq.n	41e8fc <lv_img_design+0x8c>
  41e8f8:	2002      	movs	r0, #2
  41e8fa:	e227      	b.n	41ed4c <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41e8fc:	2207      	movs	r2, #7
  41e8fe:	2100      	movs	r1, #0
  41e900:	4620      	mov	r0, r4
  41e902:	4b82      	ldr	r3, [pc, #520]	; (41eb0c <lv_img_design+0x29c>)
  41e904:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
  41e906:	8a6b      	ldrh	r3, [r5, #18]
  41e908:	fb03 f300 	mul.w	r3, r3, r0
  41e90c:	121f      	asrs	r7, r3, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
  41e90e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  41e912:	d02e      	beq.n	41e972 <lv_img_design+0x102>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
  41e914:	4620      	mov	r0, r4
  41e916:	4b7f      	ldr	r3, [pc, #508]	; (41eb14 <lv_img_design+0x2a4>)
  41e918:	4798      	blx	r3
  41e91a:	4680      	mov	r8, r0
  41e91c:	4620      	mov	r0, r4
  41e91e:	4b7e      	ldr	r3, [pc, #504]	; (41eb18 <lv_img_design+0x2a8>)
  41e920:	4798      	blx	r3
  41e922:	350e      	adds	r5, #14
  41e924:	9501      	str	r5, [sp, #4]
  41e926:	b2bf      	uxth	r7, r7
  41e928:	9700      	str	r7, [sp, #0]
  41e92a:	2300      	movs	r3, #0
  41e92c:	4602      	mov	r2, r0
  41e92e:	4641      	mov	r1, r8
  41e930:	a819      	add	r0, sp, #100	; 0x64
  41e932:	4d7a      	ldr	r5, [pc, #488]	; (41eb1c <lv_img_design+0x2ac>)
  41e934:	47a8      	blx	r5
            a.x1 += img->coords.x1;
  41e936:	8a22      	ldrh	r2, [r4, #16]
  41e938:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41e93c:	4413      	add	r3, r2
  41e93e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
  41e942:	8a63      	ldrh	r3, [r4, #18]
  41e944:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
  41e948:	4419      	add	r1, r3
  41e94a:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
  41e94e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  41e952:	440a      	add	r2, r1
  41e954:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
  41e958:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  41e95c:	4413      	add	r3, r2
  41e95e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  41e962:	2200      	movs	r2, #0
  41e964:	a919      	add	r1, sp, #100	; 0x64
  41e966:	9803      	ldr	r0, [sp, #12]
  41e968:	4b6d      	ldr	r3, [pc, #436]	; (41eb20 <lv_img_design+0x2b0>)
  41e96a:	4798      	blx	r3
  41e96c:	b950      	cbnz	r0, 41e984 <lv_img_design+0x114>
  41e96e:	2002      	movs	r0, #2
  41e970:	e1ec      	b.n	41ed4c <lv_img_design+0x4dc>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  41e972:	2200      	movs	r2, #0
  41e974:	f104 0110 	add.w	r1, r4, #16
  41e978:	9803      	ldr	r0, [sp, #12]
  41e97a:	4b69      	ldr	r3, [pc, #420]	; (41eb20 <lv_img_design+0x2b0>)
  41e97c:	4798      	blx	r3
  41e97e:	b908      	cbnz	r0, 41e984 <lv_img_design+0x114>
  41e980:	2002      	movs	r0, #2
  41e982:	e1e3      	b.n	41ed4c <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  41e984:	2220      	movs	r2, #32
  41e986:	2100      	movs	r1, #0
  41e988:	4620      	mov	r0, r4
  41e98a:	4b60      	ldr	r3, [pc, #384]	; (41eb0c <lv_img_design+0x29c>)
  41e98c:	4798      	blx	r3
  41e98e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41e990:	2800      	cmp	r0, #0
  41e992:	f040 828f 	bne.w	41eeb4 <lv_img_design+0x644>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  41e996:	f248 02a0 	movw	r2, #32928	; 0x80a0
  41e99a:	2100      	movs	r1, #0
  41e99c:	4620      	mov	r0, r4
  41e99e:	4b5b      	ldr	r3, [pc, #364]	; (41eb0c <lv_img_design+0x29c>)
  41e9a0:	4798      	blx	r3
  41e9a2:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41e9a4:	2800      	cmp	r0, #0
  41e9a6:	f000 8287 	beq.w	41eeb8 <lv_img_design+0x648>
  41e9aa:	2002      	movs	r0, #2
  41e9ac:	e1ce      	b.n	41ed4c <lv_img_design+0x4dc>
        lv_draw_rect_dsc_init(&bg_dsc);
  41e9ae:	a819      	add	r0, sp, #100	; 0x64
  41e9b0:	4b5c      	ldr	r3, [pc, #368]	; (41eb24 <lv_img_design+0x2b4>)
  41e9b2:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
  41e9b4:	aa19      	add	r2, sp, #100	; 0x64
  41e9b6:	2100      	movs	r1, #0
  41e9b8:	4620      	mov	r0, r4
  41e9ba:	4b5b      	ldr	r3, [pc, #364]	; (41eb28 <lv_img_design+0x2b8>)
  41e9bc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41e9be:	2233      	movs	r2, #51	; 0x33
  41e9c0:	2100      	movs	r1, #0
  41e9c2:	4620      	mov	r0, r4
  41e9c4:	4b51      	ldr	r3, [pc, #324]	; (41eb0c <lv_img_design+0x29c>)
  41e9c6:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  41e9c8:	b110      	cbz	r0, 41e9d0 <lv_img_design+0x160>
            bg_dsc.border_opa = LV_OPA_TRANSP;
  41e9ca:	2300      	movs	r3, #0
  41e9cc:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41e9d0:	2207      	movs	r2, #7
  41e9d2:	2100      	movs	r1, #0
  41e9d4:	4620      	mov	r0, r4
  41e9d6:	4e4d      	ldr	r6, [pc, #308]	; (41eb0c <lv_img_design+0x29c>)
  41e9d8:	47b0      	blx	r6
        zoom_final = (zoom_final * ext->zoom) >> 8;
  41e9da:	8a6f      	ldrh	r7, [r5, #18]
  41e9dc:	fb07 f700 	mul.w	r7, r7, r0
  41e9e0:	123f      	asrs	r7, r7, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41e9e2:	2206      	movs	r2, #6
  41e9e4:	2100      	movs	r1, #0
  41e9e6:	4620      	mov	r0, r4
  41e9e8:	47b0      	blx	r6
        angle_final += ext->angle;
  41e9ea:	89ab      	ldrh	r3, [r5, #12]
  41e9ec:	18c3      	adds	r3, r0, r3
  41e9ee:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(img);
  41e9f0:	4620      	mov	r0, r4
  41e9f2:	4b48      	ldr	r3, [pc, #288]	; (41eb14 <lv_img_design+0x2a4>)
  41e9f4:	4798      	blx	r3
  41e9f6:	4680      	mov	r8, r0
  41e9f8:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
  41e9fa:	4620      	mov	r0, r4
  41e9fc:	4b46      	ldr	r3, [pc, #280]	; (41eb18 <lv_img_design+0x2a8>)
  41e9fe:	4798      	blx	r3
  41ea00:	4602      	mov	r2, r0
  41ea02:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  41ea04:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41ea08:	9307      	str	r3, [sp, #28]
  41ea0a:	fa1f f987 	uxth.w	r9, r7
                                         angle_final, zoom_final, &ext->pivot);
  41ea0e:	f105 0a0e 	add.w	sl, r5, #14
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  41ea12:	f8cd a004 	str.w	sl, [sp, #4]
  41ea16:	f8cd 9000 	str.w	r9, [sp]
  41ea1a:	4641      	mov	r1, r8
  41ea1c:	a808      	add	r0, sp, #32
  41ea1e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 41eb1c <lv_img_design+0x2ac>
  41ea22:	47d8      	blx	fp
        bg_coords.x1 += img->coords.x1;
  41ea24:	8a22      	ldrh	r2, [r4, #16]
  41ea26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  41ea2a:	4413      	add	r3, r2
  41ea2c:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
  41ea30:	8a63      	ldrh	r3, [r4, #18]
  41ea32:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  41ea36:	4419      	add	r1, r3
  41ea38:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
  41ea3c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  41ea40:	440a      	add	r2, r1
  41ea42:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
  41ea46:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  41ea4a:	4413      	add	r3, r2
  41ea4c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ea50:	2212      	movs	r2, #18
  41ea52:	2100      	movs	r1, #0
  41ea54:	4620      	mov	r0, r4
  41ea56:	47b0      	blx	r6
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  41ea58:	b280      	uxth	r0, r0
  41ea5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  41ea5e:	1a18      	subs	r0, r3, r0
  41ea60:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ea64:	2213      	movs	r2, #19
  41ea66:	2100      	movs	r1, #0
  41ea68:	4620      	mov	r0, r4
  41ea6a:	47b0      	blx	r6
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  41ea6c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41ea70:	fa13 f080 	uxtah	r0, r3, r0
  41ea74:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ea78:	2210      	movs	r2, #16
  41ea7a:	2100      	movs	r1, #0
  41ea7c:	4620      	mov	r0, r4
  41ea7e:	47b0      	blx	r6
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  41ea80:	b280      	uxth	r0, r0
  41ea82:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  41ea86:	1a18      	subs	r0, r3, r0
  41ea88:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ea8c:	2211      	movs	r2, #17
  41ea8e:	2100      	movs	r1, #0
  41ea90:	4620      	mov	r0, r4
  41ea92:	47b0      	blx	r6
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  41ea94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  41ea98:	fa13 f080 	uxtah	r0, r3, r0
  41ea9c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
  41eaa0:	aa19      	add	r2, sp, #100	; 0x64
  41eaa2:	9903      	ldr	r1, [sp, #12]
  41eaa4:	a808      	add	r0, sp, #32
  41eaa6:	4b21      	ldr	r3, [pc, #132]	; (41eb2c <lv_img_design+0x2bc>)
  41eaa8:	4798      	blx	r3
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
  41eaaa:	b90f      	cbnz	r7, 41eab0 <lv_img_design+0x240>
  41eaac:	2000      	movs	r0, #0
  41eaae:	e14d      	b.n	41ed4c <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41eab0:	2202      	movs	r2, #2
  41eab2:	2100      	movs	r1, #0
  41eab4:	4620      	mov	r0, r4
  41eab6:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  41eab8:	b980      	cbnz	r0, 41eadc <lv_img_design+0x26c>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
  41eaba:	7d2b      	ldrb	r3, [r5, #20]
  41eabc:	f003 0303 	and.w	r3, r3, #3
  41eac0:	2b01      	cmp	r3, #1
  41eac2:	d93d      	bls.n	41eb40 <lv_img_design+0x2d0>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  41eac4:	2b02      	cmp	r3, #2
  41eac6:	f000 8122 	beq.w	41ed0e <lv_img_design+0x49e>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
  41eaca:	2300      	movs	r3, #0
  41eacc:	461a      	mov	r2, r3
  41eace:	9903      	ldr	r1, [sp, #12]
  41ead0:	f104 0010 	add.w	r0, r4, #16
  41ead4:	4c16      	ldr	r4, [pc, #88]	; (41eb30 <lv_img_design+0x2c0>)
  41ead6:	47a0      	blx	r4
    return LV_DESIGN_RES_OK;
  41ead8:	2000      	movs	r0, #0
  41eada:	e137      	b.n	41ed4c <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  41eadc:	201c      	movs	r0, #28
  41eade:	4b15      	ldr	r3, [pc, #84]	; (41eb34 <lv_img_design+0x2c4>)
  41eae0:	4798      	blx	r3
  41eae2:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41eae4:	2201      	movs	r2, #1
  41eae6:	2100      	movs	r1, #0
  41eae8:	4620      	mov	r0, r4
  41eaea:	47b0      	blx	r6
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
  41eaec:	2300      	movs	r3, #0
  41eaee:	4602      	mov	r2, r0
  41eaf0:	a908      	add	r1, sp, #32
  41eaf2:	4658      	mov	r0, fp
  41eaf4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 41eb3c <lv_img_design+0x2cc>
  41eaf8:	47c0      	blx	r8
            lv_draw_mask_add(mp, img + 8);
  41eafa:	f504 7118 	add.w	r1, r4, #608	; 0x260
  41eafe:	4658      	mov	r0, fp
  41eb00:	4b0d      	ldr	r3, [pc, #52]	; (41eb38 <lv_img_design+0x2c8>)
  41eb02:	4798      	blx	r3
  41eb04:	e7d9      	b.n	41eaba <lv_img_design+0x24a>
  41eb06:	bf00      	nop
  41eb08:	00407e25 	.word	0x00407e25
  41eb0c:	00407255 	.word	0x00407255
  41eb10:	00406cc9 	.word	0x00406cc9
  41eb14:	00405991 	.word	0x00405991
  41eb18:	004059c1 	.word	0x004059c1
  41eb1c:	00412471 	.word	0x00412471
  41eb20:	00415431 	.word	0x00415431
  41eb24:	00412065 	.word	0x00412065
  41eb28:	004080cd 	.word	0x004080cd
  41eb2c:	004120b1 	.word	0x004120b1
  41eb30:	0040d345 	.word	0x0040d345
  41eb34:	00416531 	.word	0x00416531
  41eb38:	0040f7f1 	.word	0x0040f7f1
  41eb3c:	0040fa6d 	.word	0x0040fa6d
            lv_draw_img_dsc_init(&img_dsc);
  41eb40:	a810      	add	r0, sp, #64	; 0x40
  41eb42:	4b8e      	ldr	r3, [pc, #568]	; (41ed7c <lv_img_design+0x50c>)
  41eb44:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
  41eb46:	aa10      	add	r2, sp, #64	; 0x40
  41eb48:	2100      	movs	r1, #0
  41eb4a:	4620      	mov	r0, r4
  41eb4c:	4b8c      	ldr	r3, [pc, #560]	; (41ed80 <lv_img_design+0x510>)
  41eb4e:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
  41eb50:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  41eb54:	f1b9 0f00 	cmp.w	r9, #0
  41eb58:	f000 80d7 	beq.w	41ed0a <lv_img_design+0x49a>
            img_dsc.angle = angle_final;
  41eb5c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41eb60:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            img_dsc.pivot.x = ext->pivot.x;
  41eb64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  41eb68:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
  41eb6c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  41eb70:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
  41eb74:	7d6a      	ldrb	r2, [r5, #21]
  41eb76:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
  41eb7a:	f362 0300 	bfi	r3, r2, #0, #1
  41eb7e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
  41eb82:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
  41eb86:	fb08 f807 	mul.w	r8, r8, r7
  41eb8a:	ea4f 2828 	mov.w	r8, r8, asr #8
  41eb8e:	fa0f f388 	sxth.w	r3, r8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
  41eb92:	2b00      	cmp	r3, #0
  41eb94:	f340 80b9 	ble.w	41ed0a <lv_img_design+0x49a>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
  41eb98:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
  41eb9c:	fb0b fb07 	mul.w	fp, fp, r7
  41eba0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
  41eba4:	fa0f f38b 	sxth.w	r3, fp
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
  41eba8:	2b00      	cmp	r3, #0
  41ebaa:	f340 80ae 	ble.w	41ed0a <lv_img_design+0x49a>
            lv_obj_get_coords(img, &zoomed_coords);
  41ebae:	a90a      	add	r1, sp, #40	; 0x28
  41ebb0:	4620      	mov	r0, r4
  41ebb2:	4b74      	ldr	r3, [pc, #464]	; (41ed84 <lv_img_design+0x514>)
  41ebb4:	4798      	blx	r3
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
  41ebb6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41ebba:	fb03 f307 	mul.w	r3, r3, r7
  41ebbe:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  41ebc2:	eb01 2123 	add.w	r1, r1, r3, asr #8
  41ebc6:	b289      	uxth	r1, r1
  41ebc8:	fa0f fe81 	sxth.w	lr, r1
  41ebcc:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
  41ebd0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  41ebd4:	fb03 f307 	mul.w	r3, r3, r7
  41ebd8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
  41ebdc:	eb02 2223 	add.w	r2, r2, r3, asr #8
  41ebe0:	b292      	uxth	r2, r2
  41ebe2:	b210      	sxth	r0, r2
  41ebe4:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
  41ebe8:	9b05      	ldr	r3, [sp, #20]
  41ebea:	3b01      	subs	r3, #1
  41ebec:	fb03 f307 	mul.w	r3, r3, r7
  41ebf0:	eb01 2323 	add.w	r3, r1, r3, asr #8
  41ebf4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
  41ebf8:	9b06      	ldr	r3, [sp, #24]
  41ebfa:	3b01      	subs	r3, #1
  41ebfc:	fb03 f307 	mul.w	r3, r3, r7
  41ec00:	eb02 2323 	add.w	r3, r2, r3, asr #8
  41ec04:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
  41ec08:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  41ec0c:	459e      	cmp	lr, r3
  41ec0e:	dd03      	ble.n	41ec18 <lv_img_design+0x3a8>
  41ec10:	892b      	ldrh	r3, [r5, #8]
  41ec12:	1ac9      	subs	r1, r1, r3
  41ec14:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
  41ec18:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  41ec1c:	4298      	cmp	r0, r3
  41ec1e:	dd03      	ble.n	41ec28 <lv_img_design+0x3b8>
  41ec20:	896b      	ldrh	r3, [r5, #10]
  41ec22:	1ad2      	subs	r2, r2, r3
  41ec24:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
  41ec28:	4620      	mov	r0, r4
  41ec2a:	4b57      	ldr	r3, [pc, #348]	; (41ed88 <lv_img_design+0x518>)
  41ec2c:	4798      	blx	r3
  41ec2e:	4607      	mov	r7, r0
  41ec30:	4620      	mov	r0, r4
  41ec32:	4b56      	ldr	r3, [pc, #344]	; (41ed8c <lv_img_design+0x51c>)
  41ec34:	4798      	blx	r3
  41ec36:	f8cd a004 	str.w	sl, [sp, #4]
  41ec3a:	f8cd 9000 	str.w	r9, [sp]
  41ec3e:	9b07      	ldr	r3, [sp, #28]
  41ec40:	4602      	mov	r2, r0
  41ec42:	4639      	mov	r1, r7
  41ec44:	a80c      	add	r0, sp, #48	; 0x30
  41ec46:	4f52      	ldr	r7, [pc, #328]	; (41ed90 <lv_img_design+0x520>)
  41ec48:	47b8      	blx	r7
            clip_real.x1 += img->coords.x1;
  41ec4a:	8a23      	ldrh	r3, [r4, #16]
  41ec4c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41ec50:	441a      	add	r2, r3
  41ec52:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
  41ec56:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  41ec5a:	4413      	add	r3, r2
  41ec5c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
  41ec60:	8a63      	ldrh	r3, [r4, #18]
  41ec62:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
  41ec66:	441a      	add	r2, r3
  41ec68:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
  41ec6c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  41ec70:	4413      	add	r3, r2
  41ec72:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
  41ec76:	9a03      	ldr	r2, [sp, #12]
  41ec78:	a90c      	add	r1, sp, #48	; 0x30
  41ec7a:	4608      	mov	r0, r1
  41ec7c:	4b45      	ldr	r3, [pc, #276]	; (41ed94 <lv_img_design+0x524>)
  41ec7e:	4798      	blx	r3
  41ec80:	2800      	cmp	r0, #0
  41ec82:	d042      	beq.n	41ed0a <lv_img_design+0x49a>
            coords_tmp.y1 = zoomed_coords.y1;
  41ec84:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  41ec88:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
  41ec8c:	896a      	ldrh	r2, [r5, #10]
  41ec8e:	fa12 f383 	uxtah	r3, r2, r3
  41ec92:	b29b      	uxth	r3, r3
  41ec94:	3b01      	subs	r3, #1
  41ec96:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  41ec9a:	e023      	b.n	41ece4 <lv_img_design+0x474>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
  41ec9c:	ab10      	add	r3, sp, #64	; 0x40
  41ec9e:	682a      	ldr	r2, [r5, #0]
  41eca0:	a90c      	add	r1, sp, #48	; 0x30
  41eca2:	a80e      	add	r0, sp, #56	; 0x38
  41eca4:	4c3c      	ldr	r4, [pc, #240]	; (41ed98 <lv_img_design+0x528>)
  41eca6:	47a0      	blx	r4
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  41eca8:	fa1f f388 	uxth.w	r3, r8
  41ecac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  41ecb0:	441a      	add	r2, r3
  41ecb2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  41ecb6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  41ecba:	4413      	add	r3, r2
  41ecbc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  41ecc0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  41ecc4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  41ecc8:	429a      	cmp	r2, r3
  41ecca:	dbe7      	blt.n	41ec9c <lv_img_design+0x42c>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  41eccc:	fa1f f38b 	uxth.w	r3, fp
  41ecd0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  41ecd4:	441a      	add	r2, r3
  41ecd6:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  41ecda:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  41ecde:	4413      	add	r3, r2
  41ece0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  41ece4:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  41ece8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  41ecec:	429a      	cmp	r2, r3
  41ecee:	f6bf aef3 	bge.w	41ead8 <lv_img_design+0x268>
                coords_tmp.x1 = zoomed_coords.x1;
  41ecf2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  41ecf6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
  41ecfa:	892a      	ldrh	r2, [r5, #8]
  41ecfc:	fa12 f383 	uxtah	r3, r2, r3
  41ed00:	b29b      	uxth	r3, r3
  41ed02:	3b01      	subs	r3, #1
  41ed04:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  41ed08:	e7da      	b.n	41ecc0 <lv_img_design+0x450>
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  41ed0a:	2000      	movs	r0, #0
  41ed0c:	e01e      	b.n	41ed4c <lv_img_design+0x4dc>
            lv_draw_label_dsc_init(&label_dsc);
  41ed0e:	a810      	add	r0, sp, #64	; 0x40
  41ed10:	4b22      	ldr	r3, [pc, #136]	; (41ed9c <lv_img_design+0x52c>)
  41ed12:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
  41ed14:	aa10      	add	r2, sp, #64	; 0x40
  41ed16:	2100      	movs	r1, #0
  41ed18:	4620      	mov	r0, r4
  41ed1a:	4b21      	ldr	r3, [pc, #132]	; (41eda0 <lv_img_design+0x530>)
  41ed1c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41ed1e:	f248 02a9 	movw	r2, #32937	; 0x80a9
  41ed22:	2100      	movs	r1, #0
  41ed24:	4620      	mov	r0, r4
  41ed26:	4b1f      	ldr	r3, [pc, #124]	; (41eda4 <lv_img_design+0x534>)
  41ed28:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
  41ed2a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
  41ed2e:	682b      	ldr	r3, [r5, #0]
  41ed30:	2200      	movs	r2, #0
  41ed32:	9200      	str	r2, [sp, #0]
  41ed34:	aa10      	add	r2, sp, #64	; 0x40
  41ed36:	9903      	ldr	r1, [sp, #12]
  41ed38:	f104 0010 	add.w	r0, r4, #16
  41ed3c:	4c1a      	ldr	r4, [pc, #104]	; (41eda8 <lv_img_design+0x538>)
  41ed3e:	47a0      	blx	r4
  41ed40:	e6ca      	b.n	41ead8 <lv_img_design+0x268>
        if(ext->h == 0 || ext->w == 0) return true;
  41ed42:	2001      	movs	r0, #1
  41ed44:	e002      	b.n	41ed4c <lv_img_design+0x4dc>
    else if(mode == LV_DESIGN_DRAW_POST) {
  41ed46:	2f01      	cmp	r7, #1
  41ed48:	d003      	beq.n	41ed52 <lv_img_design+0x4e2>
    return LV_DESIGN_RES_OK;
  41ed4a:	2000      	movs	r0, #0
}
  41ed4c:	b02f      	add	sp, #188	; 0xbc
  41ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41ed52:	2202      	movs	r2, #2
  41ed54:	2100      	movs	r1, #0
  41ed56:	4620      	mov	r0, r4
  41ed58:	4b14      	ldr	r3, [pc, #80]	; (41edac <lv_img_design+0x53c>)
  41ed5a:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  41ed5c:	b938      	cbnz	r0, 41ed6e <lv_img_design+0x4fe>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41ed5e:	2233      	movs	r2, #51	; 0x33
  41ed60:	2100      	movs	r1, #0
  41ed62:	4620      	mov	r0, r4
  41ed64:	4b11      	ldr	r3, [pc, #68]	; (41edac <lv_img_design+0x53c>)
  41ed66:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  41ed68:	bb30      	cbnz	r0, 41edb8 <lv_img_design+0x548>
    return LV_DESIGN_RES_OK;
  41ed6a:	2000      	movs	r0, #0
  41ed6c:	e7ee      	b.n	41ed4c <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
  41ed6e:	f504 7018 	add.w	r0, r4, #608	; 0x260
  41ed72:	4b0f      	ldr	r3, [pc, #60]	; (41edb0 <lv_img_design+0x540>)
  41ed74:	4798      	blx	r3
            _lv_mem_buf_release(param);
  41ed76:	4b0f      	ldr	r3, [pc, #60]	; (41edb4 <lv_img_design+0x544>)
  41ed78:	4798      	blx	r3
  41ed7a:	e7f0      	b.n	41ed5e <lv_img_design+0x4ee>
  41ed7c:	0040d099 	.word	0x0040d099
  41ed80:	004087c5 	.word	0x004087c5
  41ed84:	004058d1 	.word	0x004058d1
  41ed88:	00405991 	.word	0x00405991
  41ed8c:	004059c1 	.word	0x004059c1
  41ed90:	00412471 	.word	0x00412471
  41ed94:	004151bb 	.word	0x004151bb
  41ed98:	0040d345 	.word	0x0040d345
  41ed9c:	0040dc2d 	.word	0x0040dc2d
  41eda0:	004086fd 	.word	0x004086fd
  41eda4:	00406c41 	.word	0x00406c41
  41eda8:	0040dc75 	.word	0x0040dc75
  41edac:	00407255 	.word	0x00407255
  41edb0:	0040f899 	.word	0x0040f899
  41edb4:	004162e1 	.word	0x004162e1
            lv_draw_rect_dsc_init(&draw_dsc);
  41edb8:	a819      	add	r0, sp, #100	; 0x64
  41edba:	4b40      	ldr	r3, [pc, #256]	; (41eebc <lv_img_design+0x64c>)
  41edbc:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  41edbe:	2700      	movs	r7, #0
  41edc0:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  41edc4:	f88d 709a 	strb.w	r7, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  41edc8:	f88d 708e 	strb.w	r7, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
  41edcc:	aa19      	add	r2, sp, #100	; 0x64
  41edce:	4639      	mov	r1, r7
  41edd0:	4620      	mov	r0, r4
  41edd2:	4b3b      	ldr	r3, [pc, #236]	; (41eec0 <lv_img_design+0x650>)
  41edd4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41edd6:	2207      	movs	r2, #7
  41edd8:	4639      	mov	r1, r7
  41edda:	4620      	mov	r0, r4
  41eddc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 41eecc <lv_img_design+0x65c>
  41ede0:	47c8      	blx	r9
            zoom_final = (zoom_final * ext->zoom) >> 8;
  41ede2:	f8b5 8012 	ldrh.w	r8, [r5, #18]
  41ede6:	fb08 f800 	mul.w	r8, r8, r0
  41edea:	ea4f 2828 	mov.w	r8, r8, asr #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41edee:	2206      	movs	r2, #6
  41edf0:	4639      	mov	r1, r7
  41edf2:	4620      	mov	r0, r4
  41edf4:	47c8      	blx	r9
            angle_final += ext->angle;
  41edf6:	89ab      	ldrh	r3, [r5, #12]
  41edf8:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41edfa:	8aa1      	ldrh	r1, [r4, #20]
  41edfc:	8a22      	ldrh	r2, [r4, #16]
  41edfe:	1a89      	subs	r1, r1, r2
  41ee00:	b289      	uxth	r1, r1
  41ee02:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41ee04:	8ae2      	ldrh	r2, [r4, #22]
  41ee06:	8a60      	ldrh	r0, [r4, #18]
  41ee08:	1a12      	subs	r2, r2, r0
  41ee0a:	b292      	uxth	r2, r2
  41ee0c:	3201      	adds	r2, #1
                                             angle_final, zoom_final, &ext->pivot);
  41ee0e:	350e      	adds	r5, #14
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
  41ee10:	9501      	str	r5, [sp, #4]
  41ee12:	fa1f f088 	uxth.w	r0, r8
  41ee16:	9000      	str	r0, [sp, #0]
  41ee18:	b21b      	sxth	r3, r3
  41ee1a:	b212      	sxth	r2, r2
  41ee1c:	b209      	sxth	r1, r1
  41ee1e:	a810      	add	r0, sp, #64	; 0x40
  41ee20:	4d28      	ldr	r5, [pc, #160]	; (41eec4 <lv_img_design+0x654>)
  41ee22:	47a8      	blx	r5
            bg_coords.x1 += img->coords.x1;
  41ee24:	8a22      	ldrh	r2, [r4, #16]
  41ee26:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41ee2a:	4413      	add	r3, r2
  41ee2c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
  41ee30:	8a63      	ldrh	r3, [r4, #18]
  41ee32:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  41ee36:	4419      	add	r1, r3
  41ee38:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
  41ee3c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  41ee40:	440a      	add	r2, r1
  41ee42:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
  41ee46:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  41ee4a:	4413      	add	r3, r2
  41ee4c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ee50:	2212      	movs	r2, #18
  41ee52:	4639      	mov	r1, r7
  41ee54:	4620      	mov	r0, r4
  41ee56:	47c8      	blx	r9
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  41ee58:	b280      	uxth	r0, r0
  41ee5a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41ee5e:	1a18      	subs	r0, r3, r0
  41ee60:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ee64:	2213      	movs	r2, #19
  41ee66:	4639      	mov	r1, r7
  41ee68:	4620      	mov	r0, r4
  41ee6a:	47c8      	blx	r9
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  41ee6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  41ee70:	fa13 f080 	uxtah	r0, r3, r0
  41ee74:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ee78:	2210      	movs	r2, #16
  41ee7a:	4639      	mov	r1, r7
  41ee7c:	4620      	mov	r0, r4
  41ee7e:	47c8      	blx	r9
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  41ee80:	b280      	uxth	r0, r0
  41ee82:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  41ee86:	1a18      	subs	r0, r3, r0
  41ee88:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ee8c:	2211      	movs	r2, #17
  41ee8e:	4639      	mov	r1, r7
  41ee90:	4620      	mov	r0, r4
  41ee92:	47c8      	blx	r9
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  41ee94:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  41ee98:	fa13 f080 	uxtah	r0, r3, r0
  41ee9c:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
  41eea0:	aa19      	add	r2, sp, #100	; 0x64
  41eea2:	9903      	ldr	r1, [sp, #12]
  41eea4:	f104 0010 	add.w	r0, r4, #16
  41eea8:	4b07      	ldr	r3, [pc, #28]	; (41eec8 <lv_img_design+0x658>)
  41eeaa:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41eeac:	4638      	mov	r0, r7
  41eeae:	e74d      	b.n	41ed4c <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  41eeb0:	2002      	movs	r0, #2
  41eeb2:	e74b      	b.n	41ed4c <lv_img_design+0x4dc>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41eeb4:	2002      	movs	r0, #2
  41eeb6:	e749      	b.n	41ed4c <lv_img_design+0x4dc>
        return LV_DESIGN_RES_COVER;
  41eeb8:	2001      	movs	r0, #1
  41eeba:	e747      	b.n	41ed4c <lv_img_design+0x4dc>
  41eebc:	00412065 	.word	0x00412065
  41eec0:	004080cd 	.word	0x004080cd
  41eec4:	00412471 	.word	0x00412471
  41eec8:	004120b1 	.word	0x004120b1
  41eecc:	00407255 	.word	0x00407255

0041eed0 <lv_img_get_auto_size>:
{
  41eed0:	b510      	push	{r4, lr}
  41eed2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  41eed4:	4b07      	ldr	r3, [pc, #28]	; (41eef4 <lv_img_get_auto_size+0x24>)
  41eed6:	4798      	blx	r3
  41eed8:	b928      	cbnz	r0, 41eee6 <lv_img_get_auto_size+0x16>
  41eeda:	4622      	mov	r2, r4
  41eedc:	2300      	movs	r3, #0
  41eede:	4806      	ldr	r0, [pc, #24]	; (41eef8 <lv_img_get_auto_size+0x28>)
  41eee0:	4906      	ldr	r1, [pc, #24]	; (41eefc <lv_img_get_auto_size+0x2c>)
  41eee2:	4788      	blx	r1
  41eee4:	e7fe      	b.n	41eee4 <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  41eee6:	4620      	mov	r0, r4
  41eee8:	4b05      	ldr	r3, [pc, #20]	; (41ef00 <lv_img_get_auto_size+0x30>)
  41eeea:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
  41eeec:	7d00      	ldrb	r0, [r0, #20]
}
  41eeee:	f3c0 0080 	ubfx	r0, r0, #2, #1
  41eef2:	bd10      	pop	{r4, pc}
  41eef4:	00415a81 	.word	0x00415a81
  41eef8:	00428ca8 	.word	0x00428ca8
  41eefc:	00415a8d 	.word	0x00415a8d
  41ef00:	00407e25 	.word	0x00407e25

0041ef04 <lv_img_set_src>:
{
  41ef04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41ef08:	b086      	sub	sp, #24
  41ef0a:	4605      	mov	r5, r0
  41ef0c:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  41ef0e:	4b63      	ldr	r3, [pc, #396]	; (41f09c <lv_img_set_src+0x198>)
  41ef10:	4798      	blx	r3
  41ef12:	b928      	cbnz	r0, 41ef20 <lv_img_set_src+0x1c>
  41ef14:	462a      	mov	r2, r5
  41ef16:	2300      	movs	r3, #0
  41ef18:	4861      	ldr	r0, [pc, #388]	; (41f0a0 <lv_img_set_src+0x19c>)
  41ef1a:	4962      	ldr	r1, [pc, #392]	; (41f0a4 <lv_img_set_src+0x1a0>)
  41ef1c:	4788      	blx	r1
  41ef1e:	e7fe      	b.n	41ef1e <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
  41ef20:	4630      	mov	r0, r6
  41ef22:	4b61      	ldr	r3, [pc, #388]	; (41f0a8 <lv_img_set_src+0x1a4>)
  41ef24:	4798      	blx	r3
  41ef26:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
  41ef28:	4628      	mov	r0, r5
  41ef2a:	4b60      	ldr	r3, [pc, #384]	; (41f0ac <lv_img_set_src+0x1a8>)
  41ef2c:	4798      	blx	r3
  41ef2e:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
  41ef30:	2f03      	cmp	r7, #3
  41ef32:	d06e      	beq.n	41f012 <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src_img, &header);
  41ef34:	a905      	add	r1, sp, #20
  41ef36:	4630      	mov	r0, r6
  41ef38:	4b5d      	ldr	r3, [pc, #372]	; (41f0b0 <lv_img_set_src+0x1ac>)
  41ef3a:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  41ef3c:	2f00      	cmp	r7, #0
  41ef3e:	d17b      	bne.n	41f038 <lv_img_set_src+0x134>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41ef40:	7d23      	ldrb	r3, [r4, #20]
  41ef42:	f003 0303 	and.w	r3, r3, #3
  41ef46:	3b01      	subs	r3, #1
  41ef48:	b2db      	uxtb	r3, r3
  41ef4a:	2b01      	cmp	r3, #1
  41ef4c:	d802      	bhi.n	41ef54 <lv_img_set_src+0x50>
            lv_mem_free(ext->src);
  41ef4e:	6820      	ldr	r0, [r4, #0]
  41ef50:	4b58      	ldr	r3, [pc, #352]	; (41f0b4 <lv_img_set_src+0x1b0>)
  41ef52:	4798      	blx	r3
        ext->src = src_img;
  41ef54:	6026      	str	r6, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
  41ef56:	2f02      	cmp	r7, #2
  41ef58:	d12c      	bne.n	41efb4 <lv_img_set_src+0xb0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41ef5a:	f248 028e 	movw	r2, #32910	; 0x808e
  41ef5e:	2100      	movs	r1, #0
  41ef60:	4628      	mov	r0, r5
  41ef62:	4b55      	ldr	r3, [pc, #340]	; (41f0b8 <lv_img_set_src+0x1b4>)
  41ef64:	4798      	blx	r3
  41ef66:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41ef68:	f248 0280 	movw	r2, #32896	; 0x8080
  41ef6c:	2100      	movs	r1, #0
  41ef6e:	4628      	mov	r0, r5
  41ef70:	f8df 816c 	ldr.w	r8, [pc, #364]	; 41f0e0 <lv_img_set_src+0x1dc>
  41ef74:	47c0      	blx	r8
  41ef76:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41ef78:	f248 0281 	movw	r2, #32897	; 0x8081
  41ef7c:	2100      	movs	r1, #0
  41ef7e:	4628      	mov	r0, r5
  41ef80:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
  41ef82:	2300      	movs	r3, #0
  41ef84:	9302      	str	r3, [sp, #8]
  41ef86:	f647 4318 	movw	r3, #31768	; 0x7c18
  41ef8a:	9301      	str	r3, [sp, #4]
  41ef8c:	9000      	str	r0, [sp, #0]
  41ef8e:	4653      	mov	r3, sl
  41ef90:	464a      	mov	r2, r9
  41ef92:	4631      	mov	r1, r6
  41ef94:	a804      	add	r0, sp, #16
  41ef96:	4e49      	ldr	r6, [pc, #292]	; (41f0bc <lv_img_set_src+0x1b8>)
  41ef98:	47b0      	blx	r6
        header.w = size.x;
  41ef9a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41ef9e:	9b05      	ldr	r3, [sp, #20]
  41efa0:	f362 2394 	bfi	r3, r2, #10, #11
  41efa4:	9305      	str	r3, [sp, #20]
        header.h = size.y;
  41efa6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41efaa:	0c1b      	lsrs	r3, r3, #16
  41efac:	f362 134f 	bfi	r3, r2, #5, #11
  41efb0:	f8ad 3016 	strh.w	r3, [sp, #22]
    ext->src_type = src_type;
  41efb4:	7d21      	ldrb	r1, [r4, #20]
  41efb6:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
  41efba:	9b05      	ldr	r3, [sp, #20]
  41efbc:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41efc0:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
  41efc2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
  41efc6:	f3c0 104a 	ubfx	r0, r0, #5, #11
  41efca:	b282      	uxth	r2, r0
  41efcc:	8160      	strh	r0, [r4, #10]
    ext->cf       = header.cf;
  41efce:	f89d 0014 	ldrb.w	r0, [sp, #20]
  41efd2:	f360 01c7 	bfi	r1, r0, #3, #5
  41efd6:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
  41efd8:	f3c3 0349 	ubfx	r3, r3, #1, #10
  41efdc:	81e3      	strh	r3, [r4, #14]
    ext->pivot.y = header.h / 2;
  41efde:	1053      	asrs	r3, r2, #1
  41efe0:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
  41efe2:	4628      	mov	r0, r5
  41efe4:	4b36      	ldr	r3, [pc, #216]	; (41f0c0 <lv_img_set_src+0x1bc>)
  41efe6:	4798      	blx	r3
  41efe8:	b130      	cbz	r0, 41eff8 <lv_img_set_src+0xf4>
        lv_obj_set_size(img, ext->w, ext->h);
  41efea:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  41efee:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  41eff2:	4628      	mov	r0, r5
  41eff4:	4b33      	ldr	r3, [pc, #204]	; (41f0c4 <lv_img_set_src+0x1c0>)
  41eff6:	4798      	blx	r3
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
  41eff8:	89a3      	ldrh	r3, [r4, #12]
  41effa:	b91b      	cbnz	r3, 41f004 <lv_img_set_src+0x100>
  41effc:	8a63      	ldrh	r3, [r4, #18]
  41effe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  41f002:	d002      	beq.n	41f00a <lv_img_set_src+0x106>
  41f004:	4628      	mov	r0, r5
  41f006:	4b30      	ldr	r3, [pc, #192]	; (41f0c8 <lv_img_set_src+0x1c4>)
  41f008:	4798      	blx	r3
    lv_obj_invalidate(img);
  41f00a:	4628      	mov	r0, r5
  41f00c:	4b2f      	ldr	r3, [pc, #188]	; (41f0cc <lv_img_set_src+0x1c8>)
  41f00e:	4798      	blx	r3
  41f010:	e00f      	b.n	41f032 <lv_img_set_src+0x12e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
  41f012:	7d03      	ldrb	r3, [r0, #20]
  41f014:	f003 0303 	and.w	r3, r3, #3
  41f018:	3b01      	subs	r3, #1
  41f01a:	b2db      	uxtb	r3, r3
  41f01c:	2b01      	cmp	r3, #1
  41f01e:	d802      	bhi.n	41f026 <lv_img_set_src+0x122>
            lv_mem_free(ext->src);
  41f020:	6800      	ldr	r0, [r0, #0]
  41f022:	4b24      	ldr	r3, [pc, #144]	; (41f0b4 <lv_img_set_src+0x1b0>)
  41f024:	4798      	blx	r3
        ext->src      = NULL;
  41f026:	2300      	movs	r3, #0
  41f028:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
  41f02a:	7d23      	ldrb	r3, [r4, #20]
  41f02c:	f043 0303 	orr.w	r3, r3, #3
  41f030:	7523      	strb	r3, [r4, #20]
}
  41f032:	b006      	add	sp, #24
  41f034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
  41f038:	1e7b      	subs	r3, r7, #1
  41f03a:	b2db      	uxtb	r3, r3
  41f03c:	2b01      	cmp	r3, #1
  41f03e:	d88a      	bhi.n	41ef56 <lv_img_set_src+0x52>
        if(ext->src != src_img) {
  41f040:	f8d4 8000 	ldr.w	r8, [r4]
  41f044:	4546      	cmp	r6, r8
  41f046:	d086      	beq.n	41ef56 <lv_img_set_src+0x52>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41f048:	7d23      	ldrb	r3, [r4, #20]
  41f04a:	f003 0303 	and.w	r3, r3, #3
  41f04e:	3b01      	subs	r3, #1
  41f050:	b2db      	uxtb	r3, r3
  41f052:	2b01      	cmp	r3, #1
  41f054:	d901      	bls.n	41f05a <lv_img_set_src+0x156>
            const void * old_src = NULL;
  41f056:	f04f 0800 	mov.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
  41f05a:	4630      	mov	r0, r6
  41f05c:	4b1c      	ldr	r3, [pc, #112]	; (41f0d0 <lv_img_set_src+0x1cc>)
  41f05e:	4798      	blx	r3
  41f060:	3001      	adds	r0, #1
  41f062:	4b1c      	ldr	r3, [pc, #112]	; (41f0d4 <lv_img_set_src+0x1d0>)
  41f064:	4798      	blx	r3
  41f066:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
  41f068:	4b0c      	ldr	r3, [pc, #48]	; (41f09c <lv_img_set_src+0x198>)
  41f06a:	4798      	blx	r3
  41f06c:	b928      	cbnz	r0, 41f07a <lv_img_set_src+0x176>
  41f06e:	464a      	mov	r2, r9
  41f070:	2300      	movs	r3, #0
  41f072:	4819      	ldr	r0, [pc, #100]	; (41f0d8 <lv_img_set_src+0x1d4>)
  41f074:	490b      	ldr	r1, [pc, #44]	; (41f0a4 <lv_img_set_src+0x1a0>)
  41f076:	4788      	blx	r1
  41f078:	e7fe      	b.n	41f078 <lv_img_set_src+0x174>
            if(new_str == NULL) return;
  41f07a:	f1b9 0f00 	cmp.w	r9, #0
  41f07e:	d0d8      	beq.n	41f032 <lv_img_set_src+0x12e>
            strcpy(new_str, src_img);
  41f080:	4631      	mov	r1, r6
  41f082:	4648      	mov	r0, r9
  41f084:	4b15      	ldr	r3, [pc, #84]	; (41f0dc <lv_img_set_src+0x1d8>)
  41f086:	4798      	blx	r3
            ext->src = new_str;
  41f088:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
  41f08c:	f1b8 0f00 	cmp.w	r8, #0
  41f090:	f43f af61 	beq.w	41ef56 <lv_img_set_src+0x52>
  41f094:	4640      	mov	r0, r8
  41f096:	4b07      	ldr	r3, [pc, #28]	; (41f0b4 <lv_img_set_src+0x1b0>)
  41f098:	4798      	blx	r3
  41f09a:	e75c      	b.n	41ef56 <lv_img_set_src+0x52>
  41f09c:	00415a81 	.word	0x00415a81
  41f0a0:	00428ca8 	.word	0x00428ca8
  41f0a4:	00415a8d 	.word	0x00415a8d
  41f0a8:	0040d385 	.word	0x0040d385
  41f0ac:	00407e25 	.word	0x00407e25
  41f0b0:	00413511 	.word	0x00413511
  41f0b4:	0041624d 	.word	0x0041624d
  41f0b8:	0040714d 	.word	0x0040714d
  41f0bc:	00417a51 	.word	0x00417a51
  41f0c0:	0041eed1 	.word	0x0041eed1
  41f0c4:	00406a49 	.word	0x00406a49
  41f0c8:	0040578d 	.word	0x0040578d
  41f0cc:	00405d69 	.word	0x00405d69
  41f0d0:	00423b81 	.word	0x00423b81
  41f0d4:	00416189 	.word	0x00416189
  41f0d8:	00428c94 	.word	0x00428c94
  41f0dc:	00423a9d 	.word	0x00423a9d
  41f0e0:	00407255 	.word	0x00407255

0041f0e4 <lv_img_create>:
{
  41f0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41f0e8:	4680      	mov	r8, r0
  41f0ea:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
  41f0ec:	4b4c      	ldr	r3, [pc, #304]	; (41f220 <lv_img_create+0x13c>)
  41f0ee:	4798      	blx	r3
  41f0f0:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
  41f0f2:	4b4c      	ldr	r3, [pc, #304]	; (41f224 <lv_img_create+0x140>)
  41f0f4:	4798      	blx	r3
  41f0f6:	b190      	cbz	r0, 41f11e <lv_img_create+0x3a>
    if(img == NULL) return NULL;
  41f0f8:	2d00      	cmp	r5, #0
  41f0fa:	d070      	beq.n	41f1de <lv_img_create+0xfa>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  41f0fc:	4b4a      	ldr	r3, [pc, #296]	; (41f228 <lv_img_create+0x144>)
  41f0fe:	681b      	ldr	r3, [r3, #0]
  41f100:	b19b      	cbz	r3, 41f12a <lv_img_create+0x46>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
  41f102:	2118      	movs	r1, #24
  41f104:	4628      	mov	r0, r5
  41f106:	4b49      	ldr	r3, [pc, #292]	; (41f22c <lv_img_create+0x148>)
  41f108:	4798      	blx	r3
  41f10a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  41f10c:	4b45      	ldr	r3, [pc, #276]	; (41f224 <lv_img_create+0x140>)
  41f10e:	4798      	blx	r3
  41f110:	b988      	cbnz	r0, 41f136 <lv_img_create+0x52>
  41f112:	4622      	mov	r2, r4
  41f114:	2300      	movs	r3, #0
  41f116:	4846      	ldr	r0, [pc, #280]	; (41f230 <lv_img_create+0x14c>)
  41f118:	4946      	ldr	r1, [pc, #280]	; (41f234 <lv_img_create+0x150>)
  41f11a:	4788      	blx	r1
  41f11c:	e7fe      	b.n	41f11c <lv_img_create+0x38>
    LV_ASSERT_MEM(img);
  41f11e:	462a      	mov	r2, r5
  41f120:	2300      	movs	r3, #0
  41f122:	4843      	ldr	r0, [pc, #268]	; (41f230 <lv_img_create+0x14c>)
  41f124:	4943      	ldr	r1, [pc, #268]	; (41f234 <lv_img_create+0x150>)
  41f126:	4788      	blx	r1
  41f128:	e7fe      	b.n	41f128 <lv_img_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  41f12a:	4628      	mov	r0, r5
  41f12c:	4b42      	ldr	r3, [pc, #264]	; (41f238 <lv_img_create+0x154>)
  41f12e:	4798      	blx	r3
  41f130:	4b3d      	ldr	r3, [pc, #244]	; (41f228 <lv_img_create+0x144>)
  41f132:	6018      	str	r0, [r3, #0]
  41f134:	e7e5      	b.n	41f102 <lv_img_create+0x1e>
    if(ext == NULL) {
  41f136:	2c00      	cmp	r4, #0
  41f138:	d054      	beq.n	41f1e4 <lv_img_create+0x100>
    ext->src       = NULL;
  41f13a:	2600      	movs	r6, #0
  41f13c:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
  41f13e:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
  41f140:	f043 0303 	orr.w	r3, r3, #3
  41f144:	f366 03c7 	bfi	r3, r6, #3, #5
  41f148:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
  41f14a:	4628      	mov	r0, r5
  41f14c:	4b3b      	ldr	r3, [pc, #236]	; (41f23c <lv_img_create+0x158>)
  41f14e:	4798      	blx	r3
  41f150:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
  41f152:	4628      	mov	r0, r5
  41f154:	4b3a      	ldr	r3, [pc, #232]	; (41f240 <lv_img_create+0x15c>)
  41f156:	4798      	blx	r3
  41f158:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
  41f15a:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
  41f15c:	f44f 7380 	mov.w	r3, #256	; 0x100
  41f160:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
  41f162:	7d63      	ldrb	r3, [r4, #21]
  41f164:	f043 0301 	orr.w	r3, r3, #1
  41f168:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
  41f16a:	7d23      	ldrb	r3, [r4, #20]
  41f16c:	f043 0304 	orr.w	r3, r3, #4
  41f170:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
  41f172:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
  41f174:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
  41f176:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
  41f178:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
  41f17a:	4932      	ldr	r1, [pc, #200]	; (41f244 <lv_img_create+0x160>)
  41f17c:	4628      	mov	r0, r5
  41f17e:	4b32      	ldr	r3, [pc, #200]	; (41f248 <lv_img_create+0x164>)
  41f180:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
  41f182:	4932      	ldr	r1, [pc, #200]	; (41f24c <lv_img_create+0x168>)
  41f184:	4628      	mov	r0, r5
  41f186:	4b32      	ldr	r3, [pc, #200]	; (41f250 <lv_img_create+0x16c>)
  41f188:	4798      	blx	r3
    if(copy == NULL) {
  41f18a:	2f00      	cmp	r7, #0
  41f18c:	d02f      	beq.n	41f1ee <lv_img_create+0x10a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41f18e:	4638      	mov	r0, r7
  41f190:	4b30      	ldr	r3, [pc, #192]	; (41f254 <lv_img_create+0x170>)
  41f192:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
  41f194:	7d03      	ldrb	r3, [r0, #20]
  41f196:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41f19a:	7d22      	ldrb	r2, [r4, #20]
  41f19c:	f363 0282 	bfi	r2, r3, #2, #1
  41f1a0:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
  41f1a2:	8a43      	ldrh	r3, [r0, #18]
  41f1a4:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
  41f1a6:	8983      	ldrh	r3, [r0, #12]
  41f1a8:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
  41f1aa:	7d42      	ldrb	r2, [r0, #21]
  41f1ac:	7d63      	ldrb	r3, [r4, #21]
  41f1ae:	f362 0300 	bfi	r3, r2, #0, #1
  41f1b2:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
  41f1b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  41f1b8:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
  41f1ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  41f1be:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
  41f1c0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  41f1c4:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
  41f1c6:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  41f1ca:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
  41f1cc:	6801      	ldr	r1, [r0, #0]
  41f1ce:	4628      	mov	r0, r5
  41f1d0:	4b21      	ldr	r3, [pc, #132]	; (41f258 <lv_img_create+0x174>)
  41f1d2:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41f1d4:	22ff      	movs	r2, #255	; 0xff
  41f1d6:	4611      	mov	r1, r2
  41f1d8:	4628      	mov	r0, r5
  41f1da:	4b20      	ldr	r3, [pc, #128]	; (41f25c <lv_img_create+0x178>)
  41f1dc:	4798      	blx	r3
}
  41f1de:	4628      	mov	r0, r5
  41f1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
  41f1e4:	4628      	mov	r0, r5
  41f1e6:	4b1e      	ldr	r3, [pc, #120]	; (41f260 <lv_img_create+0x17c>)
  41f1e8:	4798      	blx	r3
        return NULL;
  41f1ea:	2500      	movs	r5, #0
  41f1ec:	e7f7      	b.n	41f1de <lv_img_create+0xfa>
        lv_theme_apply(img, LV_THEME_IMAGE);
  41f1ee:	210f      	movs	r1, #15
  41f1f0:	4628      	mov	r0, r5
  41f1f2:	4b1c      	ldr	r3, [pc, #112]	; (41f264 <lv_img_create+0x180>)
  41f1f4:	4798      	blx	r3
        lv_obj_set_click(img, false);
  41f1f6:	4631      	mov	r1, r6
  41f1f8:	4628      	mov	r0, r5
  41f1fa:	4b1b      	ldr	r3, [pc, #108]	; (41f268 <lv_img_create+0x184>)
  41f1fc:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
  41f1fe:	2101      	movs	r1, #1
  41f200:	4628      	mov	r0, r5
  41f202:	4b1a      	ldr	r3, [pc, #104]	; (41f26c <lv_img_create+0x188>)
  41f204:	4798      	blx	r3
        if(par != NULL) {
  41f206:	f1b8 0f00 	cmp.w	r8, #0
  41f20a:	d004      	beq.n	41f216 <lv_img_create+0x132>
            ext->auto_size = 1;
  41f20c:	7d23      	ldrb	r3, [r4, #20]
  41f20e:	f043 0304 	orr.w	r3, r3, #4
  41f212:	7523      	strb	r3, [r4, #20]
  41f214:	e7e3      	b.n	41f1de <lv_img_create+0xfa>
            ext->auto_size = 0;
  41f216:	7d23      	ldrb	r3, [r4, #20]
  41f218:	f36f 0382 	bfc	r3, #2, #1
  41f21c:	7523      	strb	r3, [r4, #20]
  41f21e:	e7de      	b.n	41f1de <lv_img_create+0xfa>
  41f220:	00406625 	.word	0x00406625
  41f224:	00415a81 	.word	0x00415a81
  41f228:	204147e8 	.word	0x204147e8
  41f22c:	00405751 	.word	0x00405751
  41f230:	00428c94 	.word	0x00428c94
  41f234:	00415a8d 	.word	0x00415a8d
  41f238:	00407dd5 	.word	0x00407dd5
  41f23c:	00405991 	.word	0x00405991
  41f240:	004059c1 	.word	0x004059c1
  41f244:	0041f271 	.word	0x0041f271
  41f248:	004056ed 	.word	0x004056ed
  41f24c:	0041e871 	.word	0x0041e871
  41f250:	00405729 	.word	0x00405729
  41f254:	00407e25 	.word	0x00407e25
  41f258:	0041ef05 	.word	0x0041ef05
  41f25c:	00407671 	.word	0x00407671
  41f260:	00407f85 	.word	0x00407f85
  41f264:	00417ec5 	.word	0x00417ec5
  41f268:	0040552d 	.word	0x0040552d
  41f26c:	004054f1 	.word	0x004054f1

0041f270 <lv_img_signal>:
{
  41f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f274:	b085      	sub	sp, #20
  41f276:	4607      	mov	r7, r0
  41f278:	460c      	mov	r4, r1
  41f27a:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41f27c:	2908      	cmp	r1, #8
  41f27e:	d020      	beq.n	41f2c2 <lv_img_signal+0x52>
    res = ancestor_signal(img, sign, param);
  41f280:	4b98      	ldr	r3, [pc, #608]	; (41f4e4 <lv_img_signal+0x274>)
  41f282:	681b      	ldr	r3, [r3, #0]
  41f284:	4798      	blx	r3
  41f286:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41f288:	2801      	cmp	r0, #1
  41f28a:	d120      	bne.n	41f2ce <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41f28c:	2c07      	cmp	r4, #7
  41f28e:	d02a      	beq.n	41f2e6 <lv_img_signal+0x76>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  41f290:	4638      	mov	r0, r7
  41f292:	4b95      	ldr	r3, [pc, #596]	; (41f4e8 <lv_img_signal+0x278>)
  41f294:	4798      	blx	r3
  41f296:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41f298:	bb5c      	cbnz	r4, 41f2f2 <lv_img_signal+0x82>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41f29a:	7d03      	ldrb	r3, [r0, #20]
  41f29c:	f003 0303 	and.w	r3, r3, #3
  41f2a0:	3b01      	subs	r3, #1
  41f2a2:	b2db      	uxtb	r3, r3
  41f2a4:	2b01      	cmp	r3, #1
  41f2a6:	d812      	bhi.n	41f2ce <lv_img_signal+0x5e>
            lv_mem_free(ext->src);
  41f2a8:	6800      	ldr	r0, [r0, #0]
  41f2aa:	4b90      	ldr	r3, [pc, #576]	; (41f4ec <lv_img_signal+0x27c>)
  41f2ac:	4798      	blx	r3
            ext->src      = NULL;
  41f2ae:	2300      	movs	r3, #0
  41f2b0:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
  41f2b4:	f898 3014 	ldrb.w	r3, [r8, #20]
  41f2b8:	f043 0303 	orr.w	r3, r3, #3
  41f2bc:	f888 3014 	strb.w	r3, [r8, #20]
  41f2c0:	e005      	b.n	41f2ce <lv_img_signal+0x5e>
        info->result = lv_img_get_style(img, info->part);
  41f2c2:	7811      	ldrb	r1, [r2, #0]
  41f2c4:	4b8a      	ldr	r3, [pc, #552]	; (41f4f0 <lv_img_signal+0x280>)
  41f2c6:	4798      	blx	r3
  41f2c8:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41f2ca:	b120      	cbz	r0, 41f2d6 <lv_img_signal+0x66>
  41f2cc:	2601      	movs	r6, #1
}
  41f2ce:	4630      	mov	r0, r6
  41f2d0:	b005      	add	sp, #20
  41f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else return ancestor_signal(img, sign, param);
  41f2d6:	4b83      	ldr	r3, [pc, #524]	; (41f4e4 <lv_img_signal+0x274>)
  41f2d8:	681b      	ldr	r3, [r3, #0]
  41f2da:	462a      	mov	r2, r5
  41f2dc:	4621      	mov	r1, r4
  41f2de:	4638      	mov	r0, r7
  41f2e0:	4798      	blx	r3
  41f2e2:	4606      	mov	r6, r0
  41f2e4:	e7f3      	b.n	41f2ce <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41f2e6:	4983      	ldr	r1, [pc, #524]	; (41f4f4 <lv_img_signal+0x284>)
  41f2e8:	4628      	mov	r0, r5
  41f2ea:	4b83      	ldr	r3, [pc, #524]	; (41f4f8 <lv_img_signal+0x288>)
  41f2ec:	4798      	blx	r3
  41f2ee:	4606      	mov	r6, r0
  41f2f0:	e7ed      	b.n	41f2ce <lv_img_signal+0x5e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41f2f2:	2c04      	cmp	r4, #4
  41f2f4:	d027      	beq.n	41f346 <lv_img_signal+0xd6>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  41f2f6:	2c06      	cmp	r4, #6
  41f2f8:	d02f      	beq.n	41f35a <lv_img_signal+0xea>
    else if(sign == LV_SIGNAL_HIT_TEST) {
  41f2fa:	2c0a      	cmp	r4, #10
  41f2fc:	d1e7      	bne.n	41f2ce <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41f2fe:	2207      	movs	r2, #7
  41f300:	2100      	movs	r1, #0
  41f302:	4638      	mov	r0, r7
  41f304:	f8df a200 	ldr.w	sl, [pc, #512]	; 41f508 <lv_img_signal+0x298>
  41f308:	47d0      	blx	sl
        zoom = (zoom * ext->zoom) >> 8;
  41f30a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f30e:	fb03 f300 	mul.w	r3, r3, r0
  41f312:	121c      	asrs	r4, r3, #8
  41f314:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41f318:	2206      	movs	r2, #6
  41f31a:	2100      	movs	r1, #0
  41f31c:	4638      	mov	r0, r7
  41f31e:	47d0      	blx	sl
        angle += ext->angle;
  41f320:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  41f324:	4403      	add	r3, r0
  41f326:	fa0f fa83 	sxth.w	sl, r3
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  41f32a:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
  41f32e:	4638      	mov	r0, r7
  41f330:	4b72      	ldr	r3, [pc, #456]	; (41f4fc <lv_img_signal+0x28c>)
  41f332:	4798      	blx	r3
  41f334:	4583      	cmp	fp, r0
  41f336:	f000 8086 	beq.w	41f446 <lv_img_signal+0x1d6>
            info->result = lv_obj_is_point_on_coords(img, info->point);
  41f33a:	6829      	ldr	r1, [r5, #0]
  41f33c:	4638      	mov	r0, r7
  41f33e:	4b70      	ldr	r3, [pc, #448]	; (41f500 <lv_img_signal+0x290>)
  41f340:	4798      	blx	r3
  41f342:	7128      	strb	r0, [r5, #4]
  41f344:	e7c3      	b.n	41f2ce <lv_img_signal+0x5e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  41f346:	7d03      	ldrb	r3, [r0, #20]
  41f348:	f003 0303 	and.w	r3, r3, #3
  41f34c:	2b02      	cmp	r3, #2
  41f34e:	d1be      	bne.n	41f2ce <lv_img_signal+0x5e>
            lv_img_set_src(img, ext->src);
  41f350:	6801      	ldr	r1, [r0, #0]
  41f352:	4638      	mov	r0, r7
  41f354:	4b6b      	ldr	r3, [pc, #428]	; (41f504 <lv_img_signal+0x294>)
  41f356:	4798      	blx	r3
  41f358:	e7b9      	b.n	41f2ce <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41f35a:	2207      	movs	r2, #7
  41f35c:	2100      	movs	r1, #0
  41f35e:	4638      	mov	r0, r7
  41f360:	4d69      	ldr	r5, [pc, #420]	; (41f508 <lv_img_signal+0x298>)
  41f362:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
  41f364:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41f368:	fb03 f300 	mul.w	r3, r3, r0
  41f36c:	121c      	asrs	r4, r3, #8
  41f36e:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41f372:	2206      	movs	r2, #6
  41f374:	2100      	movs	r1, #0
  41f376:	4638      	mov	r0, r7
  41f378:	47a8      	blx	r5
        transf_angle += ext->angle;
  41f37a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  41f37e:	4403      	add	r3, r0
  41f380:	b21d      	sxth	r5, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
  41f382:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  41f386:	bf08      	it	eq
  41f388:	2d00      	cmpeq	r5, #0
  41f38a:	d126      	bne.n	41f3da <lv_img_signal+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f38c:	2212      	movs	r2, #18
  41f38e:	2100      	movs	r1, #0
  41f390:	4638      	mov	r0, r7
  41f392:	4d5d      	ldr	r5, [pc, #372]	; (41f508 <lv_img_signal+0x298>)
  41f394:	47a8      	blx	r5
  41f396:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f398:	2213      	movs	r2, #19
  41f39a:	2100      	movs	r1, #0
  41f39c:	4638      	mov	r0, r7
  41f39e:	47a8      	blx	r5
  41f3a0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f3a2:	2210      	movs	r2, #16
  41f3a4:	2100      	movs	r1, #0
  41f3a6:	4638      	mov	r0, r7
  41f3a8:	47a8      	blx	r5
  41f3aa:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f3ac:	2211      	movs	r2, #17
  41f3ae:	2100      	movs	r1, #0
  41f3b0:	4638      	mov	r0, r7
  41f3b2:	47a8      	blx	r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
  41f3b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
  41f3b8:	454b      	cmp	r3, r9
  41f3ba:	bfb8      	it	lt
  41f3bc:	464b      	movlt	r3, r9
  41f3be:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
  41f3c0:	4543      	cmp	r3, r8
  41f3c2:	bfb8      	it	lt
  41f3c4:	4643      	movlt	r3, r8
  41f3c6:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
  41f3c8:	42a3      	cmp	r3, r4
  41f3ca:	bfb8      	it	lt
  41f3cc:	4623      	movlt	r3, r4
  41f3ce:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
  41f3d0:	4298      	cmp	r0, r3
  41f3d2:	bfb8      	it	lt
  41f3d4:	4618      	movlt	r0, r3
  41f3d6:	8678      	strh	r0, [r7, #50]	; 0x32
  41f3d8:	e779      	b.n	41f2ce <lv_img_signal+0x5e>
            lv_coord_t w = lv_obj_get_width(img);
  41f3da:	4638      	mov	r0, r7
  41f3dc:	4b47      	ldr	r3, [pc, #284]	; (41f4fc <lv_img_signal+0x28c>)
  41f3de:	4798      	blx	r3
  41f3e0:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
  41f3e2:	4638      	mov	r0, r7
  41f3e4:	4b49      	ldr	r3, [pc, #292]	; (41f50c <lv_img_signal+0x29c>)
  41f3e6:	4798      	blx	r3
  41f3e8:	4681      	mov	r9, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
  41f3ea:	f108 030e 	add.w	r3, r8, #14
  41f3ee:	9301      	str	r3, [sp, #4]
  41f3f0:	b2a4      	uxth	r4, r4
  41f3f2:	9400      	str	r4, [sp, #0]
  41f3f4:	462b      	mov	r3, r5
  41f3f6:	4602      	mov	r2, r0
  41f3f8:	4651      	mov	r1, sl
  41f3fa:	a802      	add	r0, sp, #8
  41f3fc:	4c44      	ldr	r4, [pc, #272]	; (41f510 <lv_img_signal+0x2a0>)
  41f3fe:	47a0      	blx	r4
            lv_coord_t pad_ori = img->ext_draw_pad;
  41f400:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
  41f404:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  41f408:	1a9a      	subs	r2, r3, r2
  41f40a:	429a      	cmp	r2, r3
  41f40c:	bfb8      	it	lt
  41f40e:	461a      	movlt	r2, r3
  41f410:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
  41f412:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  41f416:	1a9a      	subs	r2, r3, r2
  41f418:	428a      	cmp	r2, r1
  41f41a:	bfb8      	it	lt
  41f41c:	460a      	movlt	r2, r1
  41f41e:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
  41f420:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  41f424:	441a      	add	r2, r3
  41f426:	eba2 020a 	sub.w	r2, r2, sl
  41f42a:	428a      	cmp	r2, r1
  41f42c:	bfb8      	it	lt
  41f42e:	460a      	movlt	r2, r1
  41f430:	b212      	sxth	r2, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
  41f432:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  41f436:	440b      	add	r3, r1
  41f438:	eba3 0309 	sub.w	r3, r3, r9
  41f43c:	4293      	cmp	r3, r2
  41f43e:	bfb8      	it	lt
  41f440:	4613      	movlt	r3, r2
  41f442:	867b      	strh	r3, [r7, #50]	; 0x32
  41f444:	e7a2      	b.n	41f38c <lv_img_signal+0x11c>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  41f446:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
  41f44a:	4638      	mov	r0, r7
  41f44c:	4b2f      	ldr	r3, [pc, #188]	; (41f50c <lv_img_signal+0x29c>)
  41f44e:	4798      	blx	r3
  41f450:	4583      	cmp	fp, r0
  41f452:	f47f af72 	bne.w	41f33a <lv_img_signal+0xca>
  41f456:	f1ba 0f00 	cmp.w	sl, #0
  41f45a:	bf08      	it	eq
  41f45c:	f5b9 7f80 	cmpeq.w	r9, #256	; 0x100
  41f460:	d108      	bne.n	41f474 <lv_img_signal+0x204>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  41f462:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  41f466:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
  41f46a:	2102      	movs	r1, #2
  41f46c:	fb93 f3f1 	sdiv	r3, r3, r1
  41f470:	429a      	cmp	r2, r3
  41f472:	d02e      	beq.n	41f4d2 <lv_img_signal+0x262>
            lv_coord_t w = lv_obj_get_width(img);
  41f474:	4638      	mov	r0, r7
  41f476:	4b21      	ldr	r3, [pc, #132]	; (41f4fc <lv_img_signal+0x28c>)
  41f478:	4798      	blx	r3
  41f47a:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(img);
  41f47c:	4638      	mov	r0, r7
  41f47e:	4b23      	ldr	r3, [pc, #140]	; (41f50c <lv_img_signal+0x29c>)
  41f480:	4798      	blx	r3
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
  41f482:	f108 030e 	add.w	r3, r8, #14
  41f486:	9301      	str	r3, [sp, #4]
  41f488:	b2a4      	uxth	r4, r4
  41f48a:	9400      	str	r4, [sp, #0]
  41f48c:	4653      	mov	r3, sl
  41f48e:	4602      	mov	r2, r0
  41f490:	4649      	mov	r1, r9
  41f492:	a802      	add	r0, sp, #8
  41f494:	4c1e      	ldr	r4, [pc, #120]	; (41f510 <lv_img_signal+0x2a0>)
  41f496:	47a0      	blx	r4
            coords.x1 += img->coords.x1;
  41f498:	8a3a      	ldrh	r2, [r7, #16]
  41f49a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41f49e:	4413      	add	r3, r2
  41f4a0:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += img->coords.y1;
  41f4a4:	8a7b      	ldrh	r3, [r7, #18]
  41f4a6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  41f4aa:	4419      	add	r1, r3
  41f4ac:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += img->coords.x1;
  41f4b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  41f4b4:	440a      	add	r2, r1
  41f4b6:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += img->coords.y1;
  41f4ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  41f4be:	4413      	add	r3, r2
  41f4c0:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
  41f4c4:	2200      	movs	r2, #0
  41f4c6:	6829      	ldr	r1, [r5, #0]
  41f4c8:	a802      	add	r0, sp, #8
  41f4ca:	4b12      	ldr	r3, [pc, #72]	; (41f514 <lv_img_signal+0x2a4>)
  41f4cc:	4798      	blx	r3
  41f4ce:	7128      	strb	r0, [r5, #4]
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  41f4d0:	e6fd      	b.n	41f2ce <lv_img_signal+0x5e>
  41f4d2:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  41f4d6:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
  41f4da:	fb93 f3f1 	sdiv	r3, r3, r1
  41f4de:	429a      	cmp	r2, r3
  41f4e0:	d1c8      	bne.n	41f474 <lv_img_signal+0x204>
  41f4e2:	e72a      	b.n	41f33a <lv_img_signal+0xca>
  41f4e4:	204147e8 	.word	0x204147e8
  41f4e8:	00407e25 	.word	0x00407e25
  41f4ec:	0041624d 	.word	0x0041624d
  41f4f0:	0041e865 	.word	0x0041e865
  41f4f4:	0042c3cc 	.word	0x0042c3cc
  41f4f8:	004080b1 	.word	0x004080b1
  41f4fc:	00405991 	.word	0x00405991
  41f500:	00408041 	.word	0x00408041
  41f504:	0041ef05 	.word	0x0041ef05
  41f508:	00407255 	.word	0x00407255
  41f50c:	004059c1 	.word	0x004059c1
  41f510:	00412471 	.word	0x00412471
  41f514:	0041525d 	.word	0x0041525d

0041f518 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
  41f518:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f51a:	4b05      	ldr	r3, [pc, #20]	; (41f530 <lv_label_get_dot_tmp+0x18>)
  41f51c:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
  41f51e:	7cc3      	ldrb	r3, [r0, #19]
  41f520:	f013 0f01 	tst.w	r3, #1
  41f524:	d101      	bne.n	41f52a <lv_label_get_dot_tmp+0x12>
        return ext->dot.tmp_ptr;
    }
    else {
        return ext->dot.tmp;
  41f526:	3004      	adds	r0, #4
    }
}
  41f528:	bd08      	pop	{r3, pc}
        return ext->dot.tmp_ptr;
  41f52a:	6840      	ldr	r0, [r0, #4]
  41f52c:	bd08      	pop	{r3, pc}
  41f52e:	bf00      	nop
  41f530:	00407e25 	.word	0x00407e25

0041f534 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
  41f534:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f536:	4b09      	ldr	r3, [pc, #36]	; (41f55c <lv_label_dot_tmp_free+0x28>)
  41f538:	4798      	blx	r3
  41f53a:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
  41f53c:	7cc3      	ldrb	r3, [r0, #19]
  41f53e:	f013 0f01 	tst.w	r3, #1
  41f542:	d003      	beq.n	41f54c <lv_label_dot_tmp_free+0x18>
  41f544:	6840      	ldr	r0, [r0, #4]
  41f546:	b108      	cbz	r0, 41f54c <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
  41f548:	4b05      	ldr	r3, [pc, #20]	; (41f560 <lv_label_dot_tmp_free+0x2c>)
  41f54a:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
  41f54c:	7ce3      	ldrb	r3, [r4, #19]
  41f54e:	f36f 0300 	bfc	r3, #0, #1
  41f552:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
  41f554:	2300      	movs	r3, #0
  41f556:	6063      	str	r3, [r4, #4]
  41f558:	bd10      	pop	{r4, pc}
  41f55a:	bf00      	nop
  41f55c:	00407e25 	.word	0x00407e25
  41f560:	0041624d 	.word	0x0041624d

0041f564 <lv_label_revert_dots>:
{
  41f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f566:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f568:	4b16      	ldr	r3, [pc, #88]	; (41f5c4 <lv_label_revert_dots+0x60>)
  41f56a:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
  41f56c:	7c83      	ldrb	r3, [r0, #18]
  41f56e:	f003 0307 	and.w	r3, r3, #7
  41f572:	2b02      	cmp	r3, #2
  41f574:	d000      	beq.n	41f578 <lv_label_revert_dots+0x14>
  41f576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41f578:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
  41f57a:	6881      	ldr	r1, [r0, #8]
  41f57c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f580:	4299      	cmp	r1, r3
  41f582:	d0f8      	beq.n	41f576 <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
  41f584:	4b10      	ldr	r3, [pc, #64]	; (41f5c8 <lv_label_revert_dots+0x64>)
  41f586:	681b      	ldr	r3, [r3, #0]
  41f588:	3903      	subs	r1, #3
  41f58a:	6800      	ldr	r0, [r0, #0]
  41f58c:	4798      	blx	r3
  41f58e:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(label);
  41f590:	4638      	mov	r0, r7
  41f592:	4b0e      	ldr	r3, [pc, #56]	; (41f5cc <lv_label_revert_dots+0x68>)
  41f594:	4798      	blx	r3
    uint8_t i      = 0;
  41f596:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
  41f598:	e003      	b.n	41f5a2 <lv_label_revert_dots+0x3e>
        ext->text[byte_i + i] = dot_tmp[i];
  41f59a:	5cc5      	ldrb	r5, [r0, r3]
  41f59c:	548d      	strb	r5, [r1, r2]
        i++;
  41f59e:	3301      	adds	r3, #1
  41f5a0:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
  41f5a2:	6821      	ldr	r1, [r4, #0]
  41f5a4:	18f2      	adds	r2, r6, r3
  41f5a6:	eb01 0e02 	add.w	lr, r1, r2
  41f5aa:	5c8d      	ldrb	r5, [r1, r2]
  41f5ac:	2d00      	cmp	r5, #0
  41f5ae:	d1f4      	bne.n	41f59a <lv_label_revert_dots+0x36>
    ext->text[byte_i + i] = dot_tmp[i];
  41f5b0:	5cc3      	ldrb	r3, [r0, r3]
  41f5b2:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
  41f5b6:	4638      	mov	r0, r7
  41f5b8:	4b05      	ldr	r3, [pc, #20]	; (41f5d0 <lv_label_revert_dots+0x6c>)
  41f5ba:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
  41f5bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f5c0:	60a3      	str	r3, [r4, #8]
  41f5c2:	e7d8      	b.n	41f576 <lv_label_revert_dots+0x12>
  41f5c4:	00407e25 	.word	0x00407e25
  41f5c8:	20400050 	.word	0x20400050
  41f5cc:	0041f519 	.word	0x0041f519
  41f5d0:	0041f535 	.word	0x0041f535

0041f5d4 <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
  41f5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41f5d8:	4606      	mov	r6, r0
  41f5da:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
  41f5dc:	4b12      	ldr	r3, [pc, #72]	; (41f628 <get_txt_coords+0x54>)
  41f5de:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f5e0:	2212      	movs	r2, #18
  41f5e2:	2100      	movs	r1, #0
  41f5e4:	4630      	mov	r0, r6
  41f5e6:	4d11      	ldr	r5, [pc, #68]	; (41f62c <get_txt_coords+0x58>)
  41f5e8:	47a8      	blx	r5
  41f5ea:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f5ec:	2213      	movs	r2, #19
  41f5ee:	2100      	movs	r1, #0
  41f5f0:	4630      	mov	r0, r6
  41f5f2:	47a8      	blx	r5
  41f5f4:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f5f6:	2210      	movs	r2, #16
  41f5f8:	2100      	movs	r1, #0
  41f5fa:	4630      	mov	r0, r6
  41f5fc:	47a8      	blx	r5
  41f5fe:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f600:	2211      	movs	r2, #17
  41f602:	2100      	movs	r1, #0
  41f604:	4630      	mov	r0, r6
  41f606:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
  41f608:	8823      	ldrh	r3, [r4, #0]
  41f60a:	4498      	add	r8, r3
  41f60c:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
  41f610:	88a3      	ldrh	r3, [r4, #4]
  41f612:	eba3 0309 	sub.w	r3, r3, r9
  41f616:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
  41f618:	8863      	ldrh	r3, [r4, #2]
  41f61a:	441f      	add	r7, r3
  41f61c:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
  41f61e:	88e3      	ldrh	r3, [r4, #6]
  41f620:	1a18      	subs	r0, r3, r0
  41f622:	80e0      	strh	r0, [r4, #6]
  41f624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41f628:	004058d1 	.word	0x004058d1
  41f62c:	00407255 	.word	0x00407255

0041f630 <lv_label_set_dot_tmp>:
{
  41f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f632:	4606      	mov	r6, r0
  41f634:	460f      	mov	r7, r1
  41f636:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f638:	4b13      	ldr	r3, [pc, #76]	; (41f688 <lv_label_set_dot_tmp+0x58>)
  41f63a:	4798      	blx	r3
  41f63c:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
  41f63e:	4630      	mov	r0, r6
  41f640:	4b12      	ldr	r3, [pc, #72]	; (41f68c <lv_label_set_dot_tmp+0x5c>)
  41f642:	4798      	blx	r3
    if(len > sizeof(char *)) {
  41f644:	2d04      	cmp	r5, #4
  41f646:	d911      	bls.n	41f66c <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
  41f648:	1c68      	adds	r0, r5, #1
  41f64a:	4b11      	ldr	r3, [pc, #68]	; (41f690 <lv_label_set_dot_tmp+0x60>)
  41f64c:	4798      	blx	r3
  41f64e:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
  41f650:	b1b8      	cbz	r0, 41f682 <lv_label_set_dot_tmp+0x52>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
  41f652:	462a      	mov	r2, r5
  41f654:	4639      	mov	r1, r7
  41f656:	4b0f      	ldr	r3, [pc, #60]	; (41f694 <lv_label_set_dot_tmp+0x64>)
  41f658:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
  41f65a:	6863      	ldr	r3, [r4, #4]
  41f65c:	2200      	movs	r2, #0
  41f65e:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
  41f660:	7ce3      	ldrb	r3, [r4, #19]
  41f662:	f043 0301 	orr.w	r3, r3, #1
  41f666:	74e3      	strb	r3, [r4, #19]
    return true;
  41f668:	2001      	movs	r0, #1
  41f66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
  41f66c:	7ce3      	ldrb	r3, [r4, #19]
  41f66e:	f36f 0300 	bfc	r3, #0, #1
  41f672:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
  41f674:	462a      	mov	r2, r5
  41f676:	4639      	mov	r1, r7
  41f678:	1d20      	adds	r0, r4, #4
  41f67a:	4b06      	ldr	r3, [pc, #24]	; (41f694 <lv_label_set_dot_tmp+0x64>)
  41f67c:	4798      	blx	r3
    return true;
  41f67e:	2001      	movs	r0, #1
  41f680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
  41f682:	2000      	movs	r0, #0
}
  41f684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41f686:	bf00      	nop
  41f688:	00407e25 	.word	0x00407e25
  41f68c:	0041f535 	.word	0x0041f535
  41f690:	00416189 	.word	0x00416189
  41f694:	00416399 	.word	0x00416399

0041f698 <lv_label_set_offset_y>:
{
  41f698:	b538      	push	{r3, r4, r5, lr}
  41f69a:	4604      	mov	r4, r0
  41f69c:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f69e:	4b03      	ldr	r3, [pc, #12]	; (41f6ac <lv_label_set_offset_y+0x14>)
  41f6a0:	4798      	blx	r3
    ext->offset.y        = y;
  41f6a2:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
  41f6a4:	4620      	mov	r0, r4
  41f6a6:	4b02      	ldr	r3, [pc, #8]	; (41f6b0 <lv_label_set_offset_y+0x18>)
  41f6a8:	4798      	blx	r3
  41f6aa:	bd38      	pop	{r3, r4, r5, pc}
  41f6ac:	00407e25 	.word	0x00407e25
  41f6b0:	00405d69 	.word	0x00405d69

0041f6b4 <lv_label_set_offset_x>:
{
  41f6b4:	b538      	push	{r3, r4, r5, lr}
  41f6b6:	4604      	mov	r4, r0
  41f6b8:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f6ba:	4b03      	ldr	r3, [pc, #12]	; (41f6c8 <lv_label_set_offset_x+0x14>)
  41f6bc:	4798      	blx	r3
    ext->offset.x        = x;
  41f6be:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
  41f6c0:	4620      	mov	r0, r4
  41f6c2:	4b02      	ldr	r3, [pc, #8]	; (41f6cc <lv_label_set_offset_x+0x18>)
  41f6c4:	4798      	blx	r3
  41f6c6:	bd38      	pop	{r3, r4, r5, pc}
  41f6c8:	00407e25 	.word	0x00407e25
  41f6cc:	00405d69 	.word	0x00405d69

0041f6d0 <lv_label_set_align>:
{
  41f6d0:	b538      	push	{r3, r4, r5, lr}
  41f6d2:	4604      	mov	r4, r0
  41f6d4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f6d6:	4b0c      	ldr	r3, [pc, #48]	; (41f708 <lv_label_set_align+0x38>)
  41f6d8:	4798      	blx	r3
  41f6da:	b928      	cbnz	r0, 41f6e8 <lv_label_set_align+0x18>
  41f6dc:	4622      	mov	r2, r4
  41f6de:	2300      	movs	r3, #0
  41f6e0:	480a      	ldr	r0, [pc, #40]	; (41f70c <lv_label_set_align+0x3c>)
  41f6e2:	490b      	ldr	r1, [pc, #44]	; (41f710 <lv_label_set_align+0x40>)
  41f6e4:	4788      	blx	r1
  41f6e6:	e7fe      	b.n	41f6e6 <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f6e8:	4620      	mov	r0, r4
  41f6ea:	4b0a      	ldr	r3, [pc, #40]	; (41f714 <lv_label_set_align+0x44>)
  41f6ec:	4798      	blx	r3
    if(ext->align == align) return;
  41f6ee:	7c83      	ldrb	r3, [r0, #18]
  41f6f0:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41f6f4:	42ab      	cmp	r3, r5
  41f6f6:	d006      	beq.n	41f706 <lv_label_set_align+0x36>
    ext->align = align;
  41f6f8:	7c83      	ldrb	r3, [r0, #18]
  41f6fa:	f365 1305 	bfi	r3, r5, #4, #2
  41f6fe:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
  41f700:	4620      	mov	r0, r4
  41f702:	4b05      	ldr	r3, [pc, #20]	; (41f718 <lv_label_set_align+0x48>)
  41f704:	4798      	blx	r3
  41f706:	bd38      	pop	{r3, r4, r5, pc}
  41f708:	00415a81 	.word	0x00415a81
  41f70c:	00428ca8 	.word	0x00428ca8
  41f710:	00415a8d 	.word	0x00415a8d
  41f714:	00407e25 	.word	0x00407e25
  41f718:	00405d69 	.word	0x00405d69

0041f71c <lv_label_get_text>:
{
  41f71c:	b510      	push	{r4, lr}
  41f71e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f720:	4b06      	ldr	r3, [pc, #24]	; (41f73c <lv_label_get_text+0x20>)
  41f722:	4798      	blx	r3
  41f724:	b928      	cbnz	r0, 41f732 <lv_label_get_text+0x16>
  41f726:	4622      	mov	r2, r4
  41f728:	2300      	movs	r3, #0
  41f72a:	4805      	ldr	r0, [pc, #20]	; (41f740 <lv_label_get_text+0x24>)
  41f72c:	4905      	ldr	r1, [pc, #20]	; (41f744 <lv_label_get_text+0x28>)
  41f72e:	4788      	blx	r1
  41f730:	e7fe      	b.n	41f730 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f732:	4620      	mov	r0, r4
  41f734:	4b04      	ldr	r3, [pc, #16]	; (41f748 <lv_label_get_text+0x2c>)
  41f736:	4798      	blx	r3
}
  41f738:	6800      	ldr	r0, [r0, #0]
  41f73a:	bd10      	pop	{r4, pc}
  41f73c:	00415a81 	.word	0x00415a81
  41f740:	00428ca8 	.word	0x00428ca8
  41f744:	00415a8d 	.word	0x00415a8d
  41f748:	00407e25 	.word	0x00407e25

0041f74c <lv_label_get_long_mode>:
{
  41f74c:	b510      	push	{r4, lr}
  41f74e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f750:	4b07      	ldr	r3, [pc, #28]	; (41f770 <lv_label_get_long_mode+0x24>)
  41f752:	4798      	blx	r3
  41f754:	b928      	cbnz	r0, 41f762 <lv_label_get_long_mode+0x16>
  41f756:	4622      	mov	r2, r4
  41f758:	2300      	movs	r3, #0
  41f75a:	4806      	ldr	r0, [pc, #24]	; (41f774 <lv_label_get_long_mode+0x28>)
  41f75c:	4906      	ldr	r1, [pc, #24]	; (41f778 <lv_label_get_long_mode+0x2c>)
  41f75e:	4788      	blx	r1
  41f760:	e7fe      	b.n	41f760 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f762:	4620      	mov	r0, r4
  41f764:	4b05      	ldr	r3, [pc, #20]	; (41f77c <lv_label_get_long_mode+0x30>)
  41f766:	4798      	blx	r3
    return ext->long_mode;
  41f768:	7c80      	ldrb	r0, [r0, #18]
}
  41f76a:	f000 0007 	and.w	r0, r0, #7
  41f76e:	bd10      	pop	{r4, pc}
  41f770:	00415a81 	.word	0x00415a81
  41f774:	00428ca8 	.word	0x00428ca8
  41f778:	00415a8d 	.word	0x00415a8d
  41f77c:	00407e25 	.word	0x00407e25

0041f780 <lv_label_get_align>:
{
  41f780:	b510      	push	{r4, lr}
  41f782:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f784:	4b09      	ldr	r3, [pc, #36]	; (41f7ac <lv_label_get_align+0x2c>)
  41f786:	4798      	blx	r3
  41f788:	b928      	cbnz	r0, 41f796 <lv_label_get_align+0x16>
  41f78a:	4622      	mov	r2, r4
  41f78c:	2300      	movs	r3, #0
  41f78e:	4808      	ldr	r0, [pc, #32]	; (41f7b0 <lv_label_get_align+0x30>)
  41f790:	4908      	ldr	r1, [pc, #32]	; (41f7b4 <lv_label_get_align+0x34>)
  41f792:	4788      	blx	r1
  41f794:	e7fe      	b.n	41f794 <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f796:	4620      	mov	r0, r4
  41f798:	4b07      	ldr	r3, [pc, #28]	; (41f7b8 <lv_label_get_align+0x38>)
  41f79a:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  41f79c:	7c80      	ldrb	r0, [r0, #18]
  41f79e:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  41f7a2:	2803      	cmp	r0, #3
  41f7a4:	d000      	beq.n	41f7a8 <lv_label_get_align+0x28>
}
  41f7a6:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  41f7a8:	2000      	movs	r0, #0
  41f7aa:	e7fc      	b.n	41f7a6 <lv_label_get_align+0x26>
  41f7ac:	00415a81 	.word	0x00415a81
  41f7b0:	00428ca8 	.word	0x00428ca8
  41f7b4:	00415a8d 	.word	0x00415a8d
  41f7b8:	00407e25 	.word	0x00407e25

0041f7bc <lv_label_get_recolor>:
{
  41f7bc:	b510      	push	{r4, lr}
  41f7be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f7c0:	4b07      	ldr	r3, [pc, #28]	; (41f7e0 <lv_label_get_recolor+0x24>)
  41f7c2:	4798      	blx	r3
  41f7c4:	b928      	cbnz	r0, 41f7d2 <lv_label_get_recolor+0x16>
  41f7c6:	4622      	mov	r2, r4
  41f7c8:	2300      	movs	r3, #0
  41f7ca:	4806      	ldr	r0, [pc, #24]	; (41f7e4 <lv_label_get_recolor+0x28>)
  41f7cc:	4906      	ldr	r1, [pc, #24]	; (41f7e8 <lv_label_get_recolor+0x2c>)
  41f7ce:	4788      	blx	r1
  41f7d0:	e7fe      	b.n	41f7d0 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f7d2:	4620      	mov	r0, r4
  41f7d4:	4b05      	ldr	r3, [pc, #20]	; (41f7ec <lv_label_get_recolor+0x30>)
  41f7d6:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
  41f7d8:	7c80      	ldrb	r0, [r0, #18]
}
  41f7da:	f3c0 1080 	ubfx	r0, r0, #6, #1
  41f7de:	bd10      	pop	{r4, pc}
  41f7e0:	00415a81 	.word	0x00415a81
  41f7e4:	00428ca8 	.word	0x00428ca8
  41f7e8:	00415a8d 	.word	0x00415a8d
  41f7ec:	00407e25 	.word	0x00407e25

0041f7f0 <lv_label_get_letter_on>:
{
  41f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f7f4:	b08f      	sub	sp, #60	; 0x3c
  41f7f6:	4604      	mov	r4, r0
  41f7f8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f7fa:	4b91      	ldr	r3, [pc, #580]	; (41fa40 <lv_label_get_letter_on+0x250>)
  41f7fc:	4798      	blx	r3
  41f7fe:	b928      	cbnz	r0, 41f80c <lv_label_get_letter_on+0x1c>
  41f800:	4622      	mov	r2, r4
  41f802:	2300      	movs	r3, #0
  41f804:	488f      	ldr	r0, [pc, #572]	; (41fa44 <lv_label_get_letter_on+0x254>)
  41f806:	4990      	ldr	r1, [pc, #576]	; (41fa48 <lv_label_get_letter_on+0x258>)
  41f808:	4788      	blx	r1
  41f80a:	e7fe      	b.n	41f80a <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
  41f80c:	4628      	mov	r0, r5
  41f80e:	4b8c      	ldr	r3, [pc, #560]	; (41fa40 <lv_label_get_letter_on+0x250>)
  41f810:	4798      	blx	r3
  41f812:	b928      	cbnz	r0, 41f820 <lv_label_get_letter_on+0x30>
  41f814:	462a      	mov	r2, r5
  41f816:	2300      	movs	r3, #0
  41f818:	488a      	ldr	r0, [pc, #552]	; (41fa44 <lv_label_get_letter_on+0x254>)
  41f81a:	498b      	ldr	r1, [pc, #556]	; (41fa48 <lv_label_get_letter_on+0x258>)
  41f81c:	4788      	blx	r1
  41f81e:	e7fe      	b.n	41f81e <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
  41f820:	882f      	ldrh	r7, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f822:	2212      	movs	r2, #18
  41f824:	2100      	movs	r1, #0
  41f826:	4620      	mov	r0, r4
  41f828:	4e88      	ldr	r6, [pc, #544]	; (41fa4c <lv_label_get_letter_on+0x25c>)
  41f82a:	47b0      	blx	r6
  41f82c:	b280      	uxth	r0, r0
  41f82e:	1a3f      	subs	r7, r7, r0
  41f830:	b23b      	sxth	r3, r7
  41f832:	9304      	str	r3, [sp, #16]
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
  41f834:	886d      	ldrh	r5, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f836:	2210      	movs	r2, #16
  41f838:	2100      	movs	r1, #0
  41f83a:	4620      	mov	r0, r4
  41f83c:	47b0      	blx	r6
  41f83e:	b280      	uxth	r0, r0
  41f840:	1a2d      	subs	r5, r5, r0
  41f842:	b22b      	sxth	r3, r5
  41f844:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
  41f846:	a90c      	add	r1, sp, #48	; 0x30
  41f848:	4620      	mov	r0, r4
  41f84a:	4b81      	ldr	r3, [pc, #516]	; (41fa50 <lv_label_get_letter_on+0x260>)
  41f84c:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
  41f84e:	4620      	mov	r0, r4
  41f850:	4b80      	ldr	r3, [pc, #512]	; (41fa54 <lv_label_get_letter_on+0x264>)
  41f852:	4798      	blx	r3
  41f854:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
  41f856:	4620      	mov	r0, r4
  41f858:	4b7f      	ldr	r3, [pc, #508]	; (41fa58 <lv_label_get_letter_on+0x268>)
  41f85a:	4798      	blx	r3
  41f85c:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f85e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41f862:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41f866:	1a9b      	subs	r3, r3, r2
  41f868:	b29b      	uxth	r3, r3
  41f86a:	3301      	adds	r3, #1
  41f86c:	b21b      	sxth	r3, r3
  41f86e:	9307      	str	r3, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41f870:	f248 028e 	movw	r2, #32910	; 0x808e
  41f874:	2100      	movs	r1, #0
  41f876:	4620      	mov	r0, r4
  41f878:	4b78      	ldr	r3, [pc, #480]	; (41fa5c <lv_label_get_letter_on+0x26c>)
  41f87a:	4798      	blx	r3
  41f87c:	4607      	mov	r7, r0
  41f87e:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41f880:	f248 0281 	movw	r2, #32897	; 0x8081
  41f884:	2100      	movs	r1, #0
  41f886:	4620      	mov	r0, r4
  41f888:	47b0      	blx	r6
  41f88a:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41f88c:	f248 0280 	movw	r2, #32896	; 0x8080
  41f890:	2100      	movs	r1, #0
  41f892:	4620      	mov	r0, r4
  41f894:	47b0      	blx	r6
  41f896:	9003      	str	r0, [sp, #12]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  41f898:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f89c:	7cab      	ldrb	r3, [r5, #18]
  41f89e:	f013 0f40 	tst.w	r3, #64	; 0x40
  41f8a2:	d133      	bne.n	41f90c <lv_label_get_letter_on+0x11c>
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
  41f8a4:	2500      	movs	r5, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41f8a6:	f013 0f80 	tst.w	r3, #128	; 0x80
  41f8aa:	d001      	beq.n	41f8b0 <lv_label_get_letter_on+0xc0>
  41f8ac:	f045 0502 	orr.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41f8b0:	f013 0f07 	tst.w	r3, #7
  41f8b4:	d101      	bne.n	41f8ba <lv_label_get_letter_on+0xca>
  41f8b6:	f045 0510 	orr.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
  41f8ba:	4620      	mov	r0, r4
  41f8bc:	4b68      	ldr	r3, [pc, #416]	; (41fa60 <lv_label_get_letter_on+0x270>)
  41f8be:	4798      	blx	r3
  41f8c0:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41f8c2:	2801      	cmp	r0, #1
  41f8c4:	d101      	bne.n	41f8ca <lv_label_get_letter_on+0xda>
  41f8c6:	f045 0504 	orr.w	r5, r5, #4
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41f8ca:	f1b9 0f02 	cmp.w	r9, #2
  41f8ce:	d101      	bne.n	41f8d4 <lv_label_get_letter_on+0xe4>
  41f8d0:	f045 0508 	orr.w	r5, r5, #8
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f8d4:	2400      	movs	r4, #0
  41f8d6:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
  41f8d8:	eb08 0b06 	add.w	fp, r8, r6
  41f8dc:	f818 3006 	ldrb.w	r3, [r8, r6]
  41f8e0:	2b00      	cmp	r3, #0
  41f8e2:	d055      	beq.n	41f990 <lv_label_get_letter_on+0x1a0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  41f8e4:	9500      	str	r5, [sp, #0]
  41f8e6:	9b07      	ldr	r3, [sp, #28]
  41f8e8:	9a03      	ldr	r2, [sp, #12]
  41f8ea:	9902      	ldr	r1, [sp, #8]
  41f8ec:	4658      	mov	r0, fp
  41f8ee:	4f5d      	ldr	r7, [pc, #372]	; (41fa64 <lv_label_get_letter_on+0x274>)
  41f8f0:	47b8      	blx	r7
  41f8f2:	4430      	add	r0, r6
        if(pos.y <= y + letter_height) {
  41f8f4:	eb04 030a 	add.w	r3, r4, sl
  41f8f8:	9a05      	ldr	r2, [sp, #20]
  41f8fa:	429a      	cmp	r2, r3
  41f8fc:	dd08      	ble.n	41f910 <lv_label_get_letter_on+0x120>
        y += letter_height + line_space;
  41f8fe:	9b06      	ldr	r3, [sp, #24]
  41f900:	4453      	add	r3, sl
  41f902:	fa14 f383 	uxtah	r3, r4, r3
  41f906:	b21c      	sxth	r4, r3
        line_start = new_line_start;
  41f908:	4606      	mov	r6, r0
  41f90a:	e7e5      	b.n	41f8d8 <lv_label_get_letter_on+0xe8>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f90c:	2501      	movs	r5, #1
  41f90e:	e7ca      	b.n	41f8a6 <lv_label_get_letter_on+0xb6>
  41f910:	4607      	mov	r7, r0
            uint32_t tmp = new_line_start;
  41f912:	a90e      	add	r1, sp, #56	; 0x38
  41f914:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  41f918:	4b53      	ldr	r3, [pc, #332]	; (41fa68 <lv_label_get_letter_on+0x278>)
  41f91a:	681b      	ldr	r3, [r3, #0]
  41f91c:	4640      	mov	r0, r8
  41f91e:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  41f920:	280a      	cmp	r0, #10
  41f922:	d003      	beq.n	41f92c <lv_label_get_letter_on+0x13c>
  41f924:	f818 3007 	ldrb.w	r3, [r8, r7]
  41f928:	b903      	cbnz	r3, 41f92c <lv_label_get_letter_on+0x13c>
  41f92a:	3701      	adds	r7, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
  41f92c:	f1b9 0f01 	cmp.w	r9, #1
  41f930:	d130      	bne.n	41f994 <lv_label_get_letter_on+0x1a4>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  41f932:	9500      	str	r5, [sp, #0]
  41f934:	9b03      	ldr	r3, [sp, #12]
  41f936:	9a02      	ldr	r2, [sp, #8]
  41f938:	1bb9      	subs	r1, r7, r6
  41f93a:	4658      	mov	r0, fp
  41f93c:	4c4b      	ldr	r4, [pc, #300]	; (41fa6c <lv_label_get_letter_on+0x27c>)
  41f93e:	47a0      	blx	r4
  41f940:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41f944:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41f948:	1a9b      	subs	r3, r3, r2
  41f94a:	b29b      	uxth	r3, r3
  41f94c:	3301      	adds	r3, #1
  41f94e:	b21b      	sxth	r3, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  41f950:	2b00      	cmp	r3, #0
  41f952:	da00      	bge.n	41f956 <lv_label_get_letter_on+0x166>
  41f954:	3301      	adds	r3, #1
  41f956:	105c      	asrs	r4, r3, #1
  41f958:	4603      	mov	r3, r0
  41f95a:	2800      	cmp	r0, #0
  41f95c:	da00      	bge.n	41f960 <lv_label_get_letter_on+0x170>
  41f95e:	1c43      	adds	r3, r0, #1
  41f960:	f343 034f 	sbfx	r3, r3, #1, #16
  41f964:	1ae4      	subs	r4, r4, r3
  41f966:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  41f968:	2300      	movs	r3, #0
  41f96a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
  41f96e:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
  41f970:	2f00      	cmp	r7, #0
  41f972:	d162      	bne.n	41fa3a <lv_label_get_letter_on+0x24a>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  41f974:	4c3e      	ldr	r4, [pc, #248]	; (41fa70 <lv_label_get_letter_on+0x280>)
  41f976:	6823      	ldr	r3, [r4, #0]
  41f978:	990a      	ldr	r1, [sp, #40]	; 0x28
  41f97a:	4658      	mov	r0, fp
  41f97c:	4798      	blx	r3
  41f97e:	4605      	mov	r5, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  41f980:	6823      	ldr	r3, [r4, #0]
  41f982:	4631      	mov	r1, r6
  41f984:	4640      	mov	r0, r8
  41f986:	4798      	blx	r3
}
  41f988:	4428      	add	r0, r5
  41f98a:	b00f      	add	sp, #60	; 0x3c
  41f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f990:	4637      	mov	r7, r6
  41f992:	e7cb      	b.n	41f92c <lv_label_get_letter_on+0x13c>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
  41f994:	f1b9 0f02 	cmp.w	r9, #2
  41f998:	d111      	bne.n	41f9be <lv_label_get_letter_on+0x1ce>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  41f99a:	9500      	str	r5, [sp, #0]
  41f99c:	9b03      	ldr	r3, [sp, #12]
  41f99e:	9a02      	ldr	r2, [sp, #8]
  41f9a0:	1bb9      	subs	r1, r7, r6
  41f9a2:	4658      	mov	r0, fp
  41f9a4:	4c31      	ldr	r4, [pc, #196]	; (41fa6c <lv_label_get_letter_on+0x27c>)
  41f9a6:	47a0      	blx	r4
  41f9a8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41f9ac:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41f9b0:	1a9b      	subs	r3, r3, r2
  41f9b2:	b29b      	uxth	r3, r3
  41f9b4:	3301      	adds	r3, #1
  41f9b6:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
  41f9b8:	1a1b      	subs	r3, r3, r0
  41f9ba:	b21c      	sxth	r4, r3
  41f9bc:	e7d4      	b.n	41f968 <lv_label_get_letter_on+0x178>
    lv_coord_t x = 0;
  41f9be:	2400      	movs	r4, #0
  41f9c0:	e7d2      	b.n	41f968 <lv_label_get_letter_on+0x178>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  41f9c2:	4652      	mov	r2, sl
  41f9c4:	9905      	ldr	r1, [sp, #20]
  41f9c6:	9802      	ldr	r0, [sp, #8]
  41f9c8:	4b2a      	ldr	r3, [pc, #168]	; (41fa74 <lv_label_get_letter_on+0x284>)
  41f9ca:	4798      	blx	r3
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
  41f9cc:	fa04 f380 	sxtah	r3, r4, r0
  41f9d0:	9a04      	ldr	r2, [sp, #16]
  41f9d2:	429a      	cmp	r2, r3
  41f9d4:	db2e      	blt.n	41fa34 <lv_label_get_letter_on+0x244>
  41f9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f9d8:	18f2      	adds	r2, r6, r3
  41f9da:	4297      	cmp	r7, r2
  41f9dc:	d02a      	beq.n	41fa34 <lv_label_get_letter_on+0x244>
  41f9de:	eb06 0209 	add.w	r2, r6, r9
  41f9e2:	f818 2002 	ldrb.w	r2, [r8, r2]
  41f9e6:	b32a      	cbz	r2, 41fa34 <lv_label_get_letter_on+0x244>
            x += gw;
  41f9e8:	4404      	add	r4, r0
            x += letter_space;
  41f9ea:	9a03      	ldr	r2, [sp, #12]
  41f9ec:	fa12 f484 	uxtah	r4, r2, r4
  41f9f0:	b224      	sxth	r4, r4
            i_act = i;
  41f9f2:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
  41f9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41f9f6:	4433      	add	r3, r6
  41f9f8:	429f      	cmp	r7, r3
  41f9fa:	d9bb      	bls.n	41f974 <lv_label_get_letter_on+0x184>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  41f9fc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 41fa7c <lv_label_get_letter_on+0x28c>
  41fa00:	f8da 3000 	ldr.w	r3, [sl]
  41fa04:	a90a      	add	r1, sp, #40	; 0x28
  41fa06:	4658      	mov	r0, fp
  41fa08:	4798      	blx	r3
  41fa0a:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  41fa0c:	f8da 3000 	ldr.w	r3, [sl]
  41fa10:	2100      	movs	r1, #0
  41fa12:	980a      	ldr	r0, [sp, #40]	; 0x28
  41fa14:	4458      	add	r0, fp
  41fa16:	4798      	blx	r3
  41fa18:	4682      	mov	sl, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  41fa1a:	f015 0f01 	tst.w	r5, #1
  41fa1e:	d0d0      	beq.n	41f9c2 <lv_label_get_letter_on+0x1d2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  41fa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41fa22:	f81b 1003 	ldrb.w	r1, [fp, r3]
  41fa26:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
  41fa2a:	4b13      	ldr	r3, [pc, #76]	; (41fa78 <lv_label_get_letter_on+0x288>)
  41fa2c:	4798      	blx	r3
  41fa2e:	2800      	cmp	r0, #0
  41fa30:	d1e0      	bne.n	41f9f4 <lv_label_get_letter_on+0x204>
  41fa32:	e7c6      	b.n	41f9c2 <lv_label_get_letter_on+0x1d2>
                i = i_act;
  41fa34:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
  41fa38:	e79c      	b.n	41f974 <lv_label_get_letter_on+0x184>
  41fa3a:	f04f 0900 	mov.w	r9, #0
  41fa3e:	e7d9      	b.n	41f9f4 <lv_label_get_letter_on+0x204>
  41fa40:	00415a81 	.word	0x00415a81
  41fa44:	00428ca8 	.word	0x00428ca8
  41fa48:	00415a8d 	.word	0x00415a8d
  41fa4c:	00407255 	.word	0x00407255
  41fa50:	0041f5d5 	.word	0x0041f5d5
  41fa54:	0041f71d 	.word	0x0041f71d
  41fa58:	00407e25 	.word	0x00407e25
  41fa5c:	0040714d 	.word	0x0040714d
  41fa60:	0041f781 	.word	0x0041f781
  41fa64:	004178c5 	.word	0x004178c5
  41fa68:	2040005c 	.word	0x2040005c
  41fa6c:	004179a5 	.word	0x004179a5
  41fa70:	20400054 	.word	0x20400054
  41fa74:	00413745 	.word	0x00413745
  41fa78:	00417711 	.word	0x00417711
  41fa7c:	20400058 	.word	0x20400058

0041fa80 <lv_label_get_text_sel_start>:
{
  41fa80:	b510      	push	{r4, lr}
  41fa82:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41fa84:	4b05      	ldr	r3, [pc, #20]	; (41fa9c <lv_label_get_text_sel_start+0x1c>)
  41fa86:	4798      	blx	r3
  41fa88:	b110      	cbz	r0, 41fa90 <lv_label_get_text_sel_start+0x10>
}
  41fa8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41fa8e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41fa90:	4622      	mov	r2, r4
  41fa92:	2300      	movs	r3, #0
  41fa94:	4802      	ldr	r0, [pc, #8]	; (41faa0 <lv_label_get_text_sel_start+0x20>)
  41fa96:	4903      	ldr	r1, [pc, #12]	; (41faa4 <lv_label_get_text_sel_start+0x24>)
  41fa98:	4788      	blx	r1
  41fa9a:	e7fe      	b.n	41fa9a <lv_label_get_text_sel_start+0x1a>
  41fa9c:	00415a81 	.word	0x00415a81
  41faa0:	00428ca8 	.word	0x00428ca8
  41faa4:	00415a8d 	.word	0x00415a8d

0041faa8 <lv_label_get_text_sel_end>:
{
  41faa8:	b510      	push	{r4, lr}
  41faaa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41faac:	4b05      	ldr	r3, [pc, #20]	; (41fac4 <lv_label_get_text_sel_end+0x1c>)
  41faae:	4798      	blx	r3
  41fab0:	b110      	cbz	r0, 41fab8 <lv_label_get_text_sel_end+0x10>
}
  41fab2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41fab6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41fab8:	4622      	mov	r2, r4
  41faba:	2300      	movs	r3, #0
  41fabc:	4802      	ldr	r0, [pc, #8]	; (41fac8 <lv_label_get_text_sel_end+0x20>)
  41fabe:	4903      	ldr	r1, [pc, #12]	; (41facc <lv_label_get_text_sel_end+0x24>)
  41fac0:	4788      	blx	r1
  41fac2:	e7fe      	b.n	41fac2 <lv_label_get_text_sel_end+0x1a>
  41fac4:	00415a81 	.word	0x00415a81
  41fac8:	00428ca8 	.word	0x00428ca8
  41facc:	00415a8d 	.word	0x00415a8d

0041fad0 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
  41fad0:	2a02      	cmp	r2, #2
  41fad2:	f000 812a 	beq.w	41fd2a <lv_label_design+0x25a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41fad6:	b10a      	cbz	r2, 41fadc <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
  41fad8:	2000      	movs	r0, #0
  41fada:	4770      	bx	lr
{
  41fadc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41fae0:	b0ab      	sub	sp, #172	; 0xac
  41fae2:	460f      	mov	r7, r1
  41fae4:	4606      	mov	r6, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41fae6:	4b92      	ldr	r3, [pc, #584]	; (41fd30 <lv_label_design+0x260>)
  41fae8:	4798      	blx	r3
  41faea:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41faec:	2204      	movs	r2, #4
  41faee:	2100      	movs	r1, #0
  41faf0:	4630      	mov	r0, r6
  41faf2:	4c90      	ldr	r4, [pc, #576]	; (41fd34 <lv_label_design+0x264>)
  41faf4:	47a0      	blx	r4
  41faf6:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  41faf8:	2205      	movs	r2, #5
  41fafa:	2100      	movs	r1, #0
  41fafc:	4630      	mov	r0, r6
  41fafe:	47a0      	blx	r4
        lv_area_copy(&bg_coords, &label->coords);
  41fb00:	f106 0410 	add.w	r4, r6, #16
    uint8_t * d8 = (uint8_t *)dst;
  41fb04:	aa06      	add	r2, sp, #24
  41fb06:	2308      	movs	r3, #8
  41fb08:	e004      	b.n	41fb14 <lv_label_design+0x44>
        *d8 = *s8;
  41fb0a:	f814 5b01 	ldrb.w	r5, [r4], #1
  41fb0e:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  41fb12:	3b01      	subs	r3, #1
    while(len) {
  41fb14:	2b00      	cmp	r3, #0
  41fb16:	d1f8      	bne.n	41fb0a <lv_label_design+0x3a>
        bg_coords.x1 -= w;
  41fb18:	fa1f f989 	uxth.w	r9, r9
  41fb1c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41fb20:	eba3 0309 	sub.w	r3, r3, r9
  41fb24:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
  41fb28:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  41fb2c:	4499      	add	r9, r3
  41fb2e:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
  41fb32:	b280      	uxth	r0, r0
  41fb34:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  41fb38:	1a1b      	subs	r3, r3, r0
  41fb3a:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
  41fb3e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41fb42:	4418      	add	r0, r3
  41fb44:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
  41fb48:	a815      	add	r0, sp, #84	; 0x54
  41fb4a:	4b7b      	ldr	r3, [pc, #492]	; (41fd38 <lv_label_design+0x268>)
  41fb4c:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
  41fb4e:	aa15      	add	r2, sp, #84	; 0x54
  41fb50:	2100      	movs	r1, #0
  41fb52:	4630      	mov	r0, r6
  41fb54:	4b79      	ldr	r3, [pc, #484]	; (41fd3c <lv_label_design+0x26c>)
  41fb56:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
  41fb58:	aa15      	add	r2, sp, #84	; 0x54
  41fb5a:	4639      	mov	r1, r7
  41fb5c:	a806      	add	r0, sp, #24
  41fb5e:	4b78      	ldr	r3, [pc, #480]	; (41fd40 <lv_label_design+0x270>)
  41fb60:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
  41fb62:	a908      	add	r1, sp, #32
  41fb64:	4630      	mov	r0, r6
  41fb66:	4b77      	ldr	r3, [pc, #476]	; (41fd44 <lv_label_design+0x274>)
  41fb68:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
  41fb6a:	aa08      	add	r2, sp, #32
  41fb6c:	4639      	mov	r1, r7
  41fb6e:	a80a      	add	r0, sp, #40	; 0x28
  41fb70:	4b75      	ldr	r3, [pc, #468]	; (41fd48 <lv_label_design+0x278>)
  41fb72:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
  41fb74:	b910      	cbnz	r0, 41fb7c <lv_label_design+0xac>
}
  41fb76:	b02b      	add	sp, #172	; 0xac
  41fb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
  41fb7c:	4630      	mov	r0, r6
  41fb7e:	4b73      	ldr	r3, [pc, #460]	; (41fd4c <lv_label_design+0x27c>)
  41fb80:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41fb82:	f898 3012 	ldrb.w	r3, [r8, #18]
  41fb86:	f013 0f40 	tst.w	r3, #64	; 0x40
  41fb8a:	d13f      	bne.n	41fc0c <lv_label_design+0x13c>
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  41fb8c:	2400      	movs	r4, #0
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41fb8e:	f013 0f80 	tst.w	r3, #128	; 0x80
  41fb92:	d13d      	bne.n	41fc10 <lv_label_design+0x140>
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41fb94:	f013 0f07 	tst.w	r3, #7
  41fb98:	d101      	bne.n	41fb9e <lv_label_design+0xce>
  41fb9a:	f044 0410 	orr.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41fb9e:	2801      	cmp	r0, #1
  41fba0:	d039      	beq.n	41fc16 <lv_label_design+0x146>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41fba2:	2802      	cmp	r0, #2
  41fba4:	d03a      	beq.n	41fc1c <lv_label_design+0x14c>
        lv_draw_label_dsc_init(&label_draw_dsc);
  41fba6:	a80c      	add	r0, sp, #48	; 0x30
  41fba8:	4b69      	ldr	r3, [pc, #420]	; (41fd50 <lv_label_design+0x280>)
  41fbaa:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
  41fbac:	4630      	mov	r0, r6
  41fbae:	4b69      	ldr	r3, [pc, #420]	; (41fd54 <lv_label_design+0x284>)
  41fbb0:	4798      	blx	r3
  41fbb2:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
  41fbb4:	4630      	mov	r0, r6
  41fbb6:	4b68      	ldr	r3, [pc, #416]	; (41fd58 <lv_label_design+0x288>)
  41fbb8:	4798      	blx	r3
  41fbba:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
  41fbbc:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  41fbc0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
  41fbc4:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41fbc8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
  41fbcc:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
  41fbd0:	aa0c      	add	r2, sp, #48	; 0x30
  41fbd2:	2100      	movs	r1, #0
  41fbd4:	4630      	mov	r0, r6
  41fbd6:	4b61      	ldr	r3, [pc, #388]	; (41fd5c <lv_label_design+0x28c>)
  41fbd8:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  41fbda:	f898 2012 	ldrb.w	r2, [r8, #18]
  41fbde:	f002 0307 	and.w	r3, r2, #7
  41fbe2:	3b03      	subs	r3, #3
  41fbe4:	b2db      	uxtb	r3, r3
  41fbe6:	2b01      	cmp	r3, #1
  41fbe8:	d91b      	bls.n	41fc22 <lv_label_design+0x152>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41fbea:	f8d8 3000 	ldr.w	r3, [r8]
  41fbee:	2200      	movs	r2, #0
  41fbf0:	9200      	str	r2, [sp, #0]
  41fbf2:	aa0c      	add	r2, sp, #48	; 0x30
  41fbf4:	a90a      	add	r1, sp, #40	; 0x28
  41fbf6:	a808      	add	r0, sp, #32
  41fbf8:	4d59      	ldr	r5, [pc, #356]	; (41fd60 <lv_label_design+0x290>)
  41fbfa:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  41fbfc:	f898 3012 	ldrb.w	r3, [r8, #18]
  41fc00:	f003 0307 	and.w	r3, r3, #7
  41fc04:	2b04      	cmp	r3, #4
  41fc06:	d034      	beq.n	41fc72 <lv_label_design+0x1a2>
    return LV_DESIGN_RES_OK;
  41fc08:	2000      	movs	r0, #0
  41fc0a:	e7b4      	b.n	41fb76 <lv_label_design+0xa6>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41fc0c:	2401      	movs	r4, #1
  41fc0e:	e7be      	b.n	41fb8e <lv_label_design+0xbe>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41fc10:	f044 0402 	orr.w	r4, r4, #2
  41fc14:	e7be      	b.n	41fb94 <lv_label_design+0xc4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41fc16:	f044 0404 	orr.w	r4, r4, #4
  41fc1a:	e7c2      	b.n	41fba2 <lv_label_design+0xd2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41fc1c:	f044 0408 	orr.w	r4, r4, #8
  41fc20:	e7c1      	b.n	41fba6 <lv_label_design+0xd6>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
  41fc22:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  41fc26:	2a20      	cmp	r2, #32
  41fc28:	bf18      	it	ne
  41fc2a:	2a10      	cmpne	r2, #16
  41fc2c:	d1dd      	bne.n	41fbea <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41fc2e:	f8d8 1000 	ldr.w	r1, [r8]
  41fc32:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  41fc36:	9402      	str	r4, [sp, #8]
  41fc38:	f647 4218 	movw	r2, #31768	; 0x7c18
  41fc3c:	9201      	str	r2, [sp, #4]
  41fc3e:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41fc42:	9200      	str	r2, [sp, #0]
  41fc44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41fc46:	a805      	add	r0, sp, #20
  41fc48:	4d46      	ldr	r5, [pc, #280]	; (41fd64 <lv_label_design+0x294>)
  41fc4a:	47a8      	blx	r5
            if(size.x > lv_area_get_width(&txt_coords)) {
  41fc4c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  41fc50:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41fc54:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  41fc58:	1a5b      	subs	r3, r3, r1
  41fc5a:	b29b      	uxth	r3, r3
  41fc5c:	3301      	adds	r3, #1
  41fc5e:	b21b      	sxth	r3, r3
  41fc60:	429a      	cmp	r2, r3
  41fc62:	ddc2      	ble.n	41fbea <lv_label_design+0x11a>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_RIGHT;
  41fc64:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
  41fc68:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
  41fc6c:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  41fc70:	e7bb      	b.n	41fbea <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41fc72:	f8d8 1000 	ldr.w	r1, [r8]
  41fc76:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  41fc7a:	9402      	str	r4, [sp, #8]
  41fc7c:	f647 4218 	movw	r2, #31768	; 0x7c18
  41fc80:	9201      	str	r2, [sp, #4]
  41fc82:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41fc86:	9200      	str	r2, [sp, #0]
  41fc88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41fc8a:	a805      	add	r0, sp, #20
  41fc8c:	4c35      	ldr	r4, [pc, #212]	; (41fd64 <lv_label_design+0x294>)
  41fc8e:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
  41fc90:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  41fc94:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41fc98:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  41fc9c:	1a5b      	subs	r3, r3, r1
  41fc9e:	b29b      	uxth	r3, r3
  41fca0:	3301      	adds	r3, #1
  41fca2:	b21b      	sxth	r3, r3
  41fca4:	429a      	cmp	r2, r3
  41fca6:	dc23      	bgt.n	41fcf0 <lv_label_design+0x220>
            if(size.y > lv_area_get_height(&txt_coords)) {
  41fca8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41fcac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  41fcb0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  41fcb4:	1a5b      	subs	r3, r3, r1
  41fcb6:	b29b      	uxth	r3, r3
  41fcb8:	3301      	adds	r3, #1
  41fcba:	b21b      	sxth	r3, r3
  41fcbc:	429a      	cmp	r2, r3
  41fcbe:	dda3      	ble.n	41fc08 <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x;
  41fcc0:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  41fcc4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  41fcc8:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  41fccc:	fa13 f382 	uxtah	r3, r3, r2
  41fcd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41fcd2:	8912      	ldrh	r2, [r2, #8]
  41fcd4:	fa12 f383 	uxtah	r3, r2, r3
  41fcd8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41fcdc:	f8d8 3000 	ldr.w	r3, [r8]
  41fce0:	2200      	movs	r2, #0
  41fce2:	9200      	str	r2, [sp, #0]
  41fce4:	aa0c      	add	r2, sp, #48	; 0x30
  41fce6:	a90a      	add	r1, sp, #40	; 0x28
  41fce8:	a808      	add	r0, sp, #32
  41fcea:	4c1d      	ldr	r4, [pc, #116]	; (41fd60 <lv_label_design+0x290>)
  41fcec:	47a0      	blx	r4
  41fcee:	e78b      	b.n	41fc08 <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  41fcf0:	f8b8 400e 	ldrh.w	r4, [r8, #14]
  41fcf4:	fa14 f282 	uxtah	r2, r4, r2
  41fcf8:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  41fcfa:	2220      	movs	r2, #32
  41fcfc:	4611      	mov	r1, r2
  41fcfe:	980e      	ldr	r0, [sp, #56]	; 0x38
  41fd00:	4b19      	ldr	r3, [pc, #100]	; (41fd68 <lv_label_design+0x298>)
  41fd02:	4798      	blx	r3
  41fd04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  41fd08:	fa14 f480 	uxtah	r4, r4, r0
  41fd0c:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y;
  41fd10:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41fd14:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41fd18:	f8d8 3000 	ldr.w	r3, [r8]
  41fd1c:	2200      	movs	r2, #0
  41fd1e:	9200      	str	r2, [sp, #0]
  41fd20:	aa0c      	add	r2, sp, #48	; 0x30
  41fd22:	a90a      	add	r1, sp, #40	; 0x28
  41fd24:	a808      	add	r0, sp, #32
  41fd26:	47a8      	blx	r5
  41fd28:	e7be      	b.n	41fca8 <lv_label_design+0x1d8>
        return LV_DESIGN_RES_NOT_COVER;
  41fd2a:	2002      	movs	r0, #2
  41fd2c:	4770      	bx	lr
  41fd2e:	bf00      	nop
  41fd30:	00407e25 	.word	0x00407e25
  41fd34:	00407255 	.word	0x00407255
  41fd38:	00412065 	.word	0x00412065
  41fd3c:	004080cd 	.word	0x004080cd
  41fd40:	004120b1 	.word	0x004120b1
  41fd44:	0041f5d5 	.word	0x0041f5d5
  41fd48:	004151bb 	.word	0x004151bb
  41fd4c:	0041f781 	.word	0x0041f781
  41fd50:	0040dc2d 	.word	0x0040dc2d
  41fd54:	0041fa81 	.word	0x0041fa81
  41fd58:	0041faa9 	.word	0x0041faa9
  41fd5c:	004086fd 	.word	0x004086fd
  41fd60:	0040dc75 	.word	0x0040dc75
  41fd64:	00417a51 	.word	0x00417a51
  41fd68:	00413745 	.word	0x00413745

0041fd6c <lv_label_get_style>:
    switch(type) {
  41fd6c:	b909      	cbnz	r1, 41fd72 <lv_label_get_style+0x6>
            style_dsc_p = &label->style_list;
  41fd6e:	3028      	adds	r0, #40	; 0x28
            break;
  41fd70:	4770      	bx	lr
            style_dsc_p = NULL;
  41fd72:	2000      	movs	r0, #0
}
  41fd74:	4770      	bx	lr
	...

0041fd78 <lv_label_refr_text>:
{
  41fd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41fd7c:	b09b      	sub	sp, #108	; 0x6c
  41fd7e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41fd80:	4b95      	ldr	r3, [pc, #596]	; (41ffd8 <lv_label_refr_text+0x260>)
  41fd82:	4798      	blx	r3
    if(ext->text == NULL) return;
  41fd84:	6803      	ldr	r3, [r0, #0]
  41fd86:	2b00      	cmp	r3, #0
  41fd88:	d049      	beq.n	41fe1e <lv_label_refr_text+0xa6>
  41fd8a:	4606      	mov	r6, r0
    get_txt_coords(label, &txt_coords);
  41fd8c:	a918      	add	r1, sp, #96	; 0x60
  41fd8e:	4628      	mov	r0, r5
  41fd90:	4b92      	ldr	r3, [pc, #584]	; (41ffdc <lv_label_refr_text+0x264>)
  41fd92:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41fd94:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  41fd98:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  41fd9c:	1ae4      	subs	r4, r4, r3
  41fd9e:	b2a4      	uxth	r4, r4
  41fda0:	3401      	adds	r4, #1
  41fda2:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41fda4:	f248 028e 	movw	r2, #32910	; 0x808e
  41fda8:	2100      	movs	r1, #0
  41fdaa:	4628      	mov	r0, r5
  41fdac:	4b8c      	ldr	r3, [pc, #560]	; (41ffe0 <lv_label_refr_text+0x268>)
  41fdae:	4798      	blx	r3
  41fdb0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41fdb2:	f248 0281 	movw	r2, #32897	; 0x8081
  41fdb6:	2100      	movs	r1, #0
  41fdb8:	4628      	mov	r0, r5
  41fdba:	4f8a      	ldr	r7, [pc, #552]	; (41ffe4 <lv_label_refr_text+0x26c>)
  41fdbc:	47b8      	blx	r7
  41fdbe:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41fdc0:	f248 0280 	movw	r2, #32896	; 0x8080
  41fdc4:	2100      	movs	r1, #0
  41fdc6:	4628      	mov	r0, r5
  41fdc8:	47b8      	blx	r7
  41fdca:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41fdcc:	7cb3      	ldrb	r3, [r6, #18]
  41fdce:	f013 0f40 	tst.w	r3, #64	; 0x40
  41fdd2:	d127      	bne.n	41fe24 <lv_label_refr_text+0xac>
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  41fdd4:	2200      	movs	r2, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41fdd6:	f013 0f80 	tst.w	r3, #128	; 0x80
  41fdda:	d125      	bne.n	41fe28 <lv_label_refr_text+0xb0>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41fddc:	f013 0f07 	tst.w	r3, #7
  41fde0:	d101      	bne.n	41fde6 <lv_label_refr_text+0x6e>
  41fde2:	f042 0210 	orr.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
  41fde6:	6831      	ldr	r1, [r6, #0]
  41fde8:	9202      	str	r2, [sp, #8]
  41fdea:	9401      	str	r4, [sp, #4]
  41fdec:	f8cd 9000 	str.w	r9, [sp]
  41fdf0:	463b      	mov	r3, r7
  41fdf2:	4642      	mov	r2, r8
  41fdf4:	a817      	add	r0, sp, #92	; 0x5c
  41fdf6:	4c7c      	ldr	r4, [pc, #496]	; (41ffe8 <lv_label_refr_text+0x270>)
  41fdf8:	47a0      	blx	r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
  41fdfa:	7cb3      	ldrb	r3, [r6, #18]
  41fdfc:	f013 0307 	ands.w	r3, r3, #7
  41fe00:	d015      	beq.n	41fe2e <lv_label_refr_text+0xb6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
  41fe02:	2b03      	cmp	r3, #3
  41fe04:	d039      	beq.n	41fe7a <lv_label_refr_text+0x102>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  41fe06:	2b04      	cmp	r3, #4
  41fe08:	f000 8104 	beq.w	420014 <lv_label_refr_text+0x29c>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
  41fe0c:	2b02      	cmp	r3, #2
  41fe0e:	f000 8180 	beq.w	420112 <lv_label_refr_text+0x39a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
  41fe12:	2b01      	cmp	r3, #1
  41fe14:	f000 821c 	beq.w	420250 <lv_label_refr_text+0x4d8>
    lv_obj_invalidate(label);
  41fe18:	4628      	mov	r0, r5
  41fe1a:	4b74      	ldr	r3, [pc, #464]	; (41ffec <lv_label_refr_text+0x274>)
  41fe1c:	4798      	blx	r3
}
  41fe1e:	b01b      	add	sp, #108	; 0x6c
  41fe20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41fe24:	2201      	movs	r2, #1
  41fe26:	e7d6      	b.n	41fdd6 <lv_label_refr_text+0x5e>
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41fe28:	f042 0202 	orr.w	r2, r2, #2
  41fe2c:	e7d6      	b.n	41fddc <lv_label_refr_text+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41fe2e:	2212      	movs	r2, #18
  41fe30:	2100      	movs	r1, #0
  41fe32:	4628      	mov	r0, r5
  41fe34:	4e6b      	ldr	r6, [pc, #428]	; (41ffe4 <lv_label_refr_text+0x26c>)
  41fe36:	47b0      	blx	r6
  41fe38:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41fe3a:	2213      	movs	r2, #19
  41fe3c:	2100      	movs	r1, #0
  41fe3e:	4628      	mov	r0, r5
  41fe40:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
  41fe42:	4420      	add	r0, r4
  41fe44:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
  41fe48:	4420      	add	r0, r4
  41fe4a:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41fe4e:	2210      	movs	r2, #16
  41fe50:	2100      	movs	r1, #0
  41fe52:	4628      	mov	r0, r5
  41fe54:	47b0      	blx	r6
  41fe56:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41fe58:	2211      	movs	r2, #17
  41fe5a:	2100      	movs	r1, #0
  41fe5c:	4628      	mov	r0, r5
  41fe5e:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  41fe60:	1822      	adds	r2, r4, r0
  41fe62:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  41fe66:	4402      	add	r2, r0
  41fe68:	b212      	sxth	r2, r2
  41fe6a:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        lv_obj_set_size(label, size.x, size.y);
  41fe6e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  41fe72:	4628      	mov	r0, r5
  41fe74:	4b5e      	ldr	r3, [pc, #376]	; (41fff0 <lv_label_refr_text+0x278>)
  41fe76:	4798      	blx	r3
  41fe78:	e7ce      	b.n	41fe18 <lv_label_refr_text+0xa0>
        lv_anim_init(&a);
  41fe7a:	a806      	add	r0, sp, #24
  41fe7c:	4b5d      	ldr	r3, [pc, #372]	; (41fff4 <lv_label_refr_text+0x27c>)
  41fe7e:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  41fe80:	9506      	str	r5, [sp, #24]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
  41fe82:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41fe86:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  41fe8a:	2220      	movs	r2, #32
  41fe8c:	4611      	mov	r1, r2
  41fe8e:	4640      	mov	r0, r8
  41fe90:	4b59      	ldr	r3, [pc, #356]	; (41fff8 <lv_label_refr_text+0x280>)
  41fe92:	4798      	blx	r3
  41fe94:	4438      	add	r0, r7
  41fe96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  41fe9a:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
  41fe9e:	89b0      	ldrh	r0, [r6, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  41fea0:	fb93 f3f0 	sdiv	r3, r3, r0
  41fea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41fea8:	b29b      	uxth	r3, r3
    a->playback_delay = delay;
  41feaa:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
  41feac:	9313      	str	r3, [sp, #76]	; 0x4c
        if(size.x > lv_area_get_width(&txt_coords)) {
  41feae:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  41feb2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41feb6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  41feba:	1a5b      	subs	r3, r3, r1
  41febc:	b29b      	uxth	r3, r3
  41febe:	3301      	adds	r3, #1
  41fec0:	b29b      	uxth	r3, r3
  41fec2:	b219      	sxth	r1, r3
  41fec4:	428a      	cmp	r2, r1
  41fec6:	dd49      	ble.n	41ff5c <lv_label_refr_text+0x1e4>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  41fec8:	b292      	uxth	r2, r2
  41feca:	1a9b      	subs	r3, r3, r2
  41fecc:	b21a      	sxth	r2, r3
    a->start = start;
  41fece:	2100      	movs	r1, #0
  41fed0:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41fed2:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41fed4:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41fed6:	4c49      	ldr	r4, [pc, #292]	; (41fffc <lv_label_refr_text+0x284>)
  41fed8:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41feda:	89b0      	ldrh	r0, [r6, #12]
  41fedc:	4b48      	ldr	r3, [pc, #288]	; (420000 <lv_label_refr_text+0x288>)
  41fede:	4798      	blx	r3
    a->time     = duration;
  41fee0:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  41fee2:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41fee4:	4621      	mov	r1, r4
  41fee6:	4628      	mov	r0, r5
  41fee8:	4b46      	ldr	r3, [pc, #280]	; (420004 <lv_label_refr_text+0x28c>)
  41feea:	4798      	blx	r3
            if(anim_cur) {
  41feec:	2800      	cmp	r0, #0
  41feee:	d032      	beq.n	41ff56 <lv_label_refr_text+0x1de>
                act_time = anim_cur->act_time;
  41fef0:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  41fef2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41fef6:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  41fefa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  41fefc:	428a      	cmp	r2, r1
  41fefe:	da11      	bge.n	41ff24 <lv_label_refr_text+0x1ac>
                a.act_time = act_time;      /*To keep the old position*/
  41ff00:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  41ff02:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  41ff06:	f36f 0200 	bfc	r2, #0, #1
  41ff0a:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  41ff0e:	b14b      	cbz	r3, 41ff24 <lv_label_refr_text+0x1ac>
                    a.playback_now = 1;
  41ff10:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41ff14:	f043 0301 	orr.w	r3, r3, #1
  41ff18:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  41ff1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  41ff1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41ff20:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  41ff22:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  41ff24:	a806      	add	r0, sp, #24
  41ff26:	4b38      	ldr	r3, [pc, #224]	; (420008 <lv_label_refr_text+0x290>)
  41ff28:	4798      	blx	r3
            hor_anim = true;
  41ff2a:	2401      	movs	r4, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41ff2c:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41ff30:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41ff34:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  41ff38:	1a5b      	subs	r3, r3, r1
  41ff3a:	b29b      	uxth	r3, r3
  41ff3c:	3301      	adds	r3, #1
  41ff3e:	b29b      	uxth	r3, r3
  41ff40:	b219      	sxth	r1, r3
  41ff42:	428a      	cmp	r2, r1
  41ff44:	dd00      	ble.n	41ff48 <lv_label_refr_text+0x1d0>
  41ff46:	b184      	cbz	r4, 41ff6a <lv_label_refr_text+0x1f2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41ff48:	4930      	ldr	r1, [pc, #192]	; (42000c <lv_label_refr_text+0x294>)
  41ff4a:	4628      	mov	r0, r5
  41ff4c:	4b30      	ldr	r3, [pc, #192]	; (420010 <lv_label_refr_text+0x298>)
  41ff4e:	4798      	blx	r3
            ext->offset.y = 0;
  41ff50:	2300      	movs	r3, #0
  41ff52:	8233      	strh	r3, [r6, #16]
  41ff54:	e760      	b.n	41fe18 <lv_label_refr_text+0xa0>
            bool playback_now = false;
  41ff56:	2300      	movs	r3, #0
            int32_t act_time = 0;
  41ff58:	461a      	mov	r2, r3
  41ff5a:	e7ce      	b.n	41fefa <lv_label_refr_text+0x182>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41ff5c:	4927      	ldr	r1, [pc, #156]	; (41fffc <lv_label_refr_text+0x284>)
  41ff5e:	4628      	mov	r0, r5
  41ff60:	4b2b      	ldr	r3, [pc, #172]	; (420010 <lv_label_refr_text+0x298>)
  41ff62:	4798      	blx	r3
            ext->offset.x = 0;
  41ff64:	2400      	movs	r4, #0
  41ff66:	81f4      	strh	r4, [r6, #14]
  41ff68:	e7e0      	b.n	41ff2c <lv_label_refr_text+0x1b4>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  41ff6a:	b292      	uxth	r2, r2
  41ff6c:	1a9a      	subs	r2, r3, r2
  41ff6e:	b292      	uxth	r2, r2
  41ff70:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  41ff74:	1ad2      	subs	r2, r2, r3
  41ff76:	b212      	sxth	r2, r2
    a->start = start;
  41ff78:	2100      	movs	r1, #0
  41ff7a:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41ff7c:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41ff7e:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41ff80:	4f22      	ldr	r7, [pc, #136]	; (42000c <lv_label_refr_text+0x294>)
  41ff82:	9707      	str	r7, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41ff84:	89b0      	ldrh	r0, [r6, #12]
  41ff86:	4b1e      	ldr	r3, [pc, #120]	; (420000 <lv_label_refr_text+0x288>)
  41ff88:	4798      	blx	r3
    a->time     = duration;
  41ff8a:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  41ff8c:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41ff8e:	4639      	mov	r1, r7
  41ff90:	4628      	mov	r0, r5
  41ff92:	4b1c      	ldr	r3, [pc, #112]	; (420004 <lv_label_refr_text+0x28c>)
  41ff94:	4798      	blx	r3
            if(anim_cur) {
  41ff96:	b1e8      	cbz	r0, 41ffd4 <lv_label_refr_text+0x25c>
                act_time = anim_cur->act_time;
  41ff98:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  41ff9a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
  41ff9e:	f004 0401 	and.w	r4, r4, #1
            if(act_time < a.time) {
  41ffa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41ffa4:	429a      	cmp	r2, r3
  41ffa6:	da11      	bge.n	41ffcc <lv_label_refr_text+0x254>
                a.act_time = act_time;      /*To keep the old position*/
  41ffa8:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  41ffaa:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  41ffae:	f36f 0300 	bfc	r3, #0, #1
  41ffb2:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                if(playback_now) {
  41ffb6:	b14c      	cbz	r4, 41ffcc <lv_label_refr_text+0x254>
                    a.playback_now = 1;
  41ffb8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41ffbc:	f043 0301 	orr.w	r3, r3, #1
  41ffc0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  41ffc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  41ffc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41ffc8:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  41ffca:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  41ffcc:	a806      	add	r0, sp, #24
  41ffce:	4b0e      	ldr	r3, [pc, #56]	; (420008 <lv_label_refr_text+0x290>)
  41ffd0:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41ffd2:	e721      	b.n	41fe18 <lv_label_refr_text+0xa0>
            int32_t act_time = 0;
  41ffd4:	2200      	movs	r2, #0
  41ffd6:	e7e4      	b.n	41ffa2 <lv_label_refr_text+0x22a>
  41ffd8:	00407e25 	.word	0x00407e25
  41ffdc:	0041f5d5 	.word	0x0041f5d5
  41ffe0:	0040714d 	.word	0x0040714d
  41ffe4:	00407255 	.word	0x00407255
  41ffe8:	00417a51 	.word	0x00417a51
  41ffec:	00405d69 	.word	0x00405d69
  41fff0:	00406a49 	.word	0x00406a49
  41fff4:	00414f95 	.word	0x00414f95
  41fff8:	00413745 	.word	0x00413745
  41fffc:	0041f6b5 	.word	0x0041f6b5
  420000:	00415119 	.word	0x00415119
  420004:	004150e5 	.word	0x004150e5
  420008:	0041504d 	.word	0x0041504d
  42000c:	0041f699 	.word	0x0041f699
  420010:	00414fe1 	.word	0x00414fe1
        lv_anim_init(&a);
  420014:	a806      	add	r0, sp, #24
  420016:	4b99      	ldr	r3, [pc, #612]	; (42027c <lv_label_refr_text+0x504>)
  420018:	4798      	blx	r3
    a->var     = var;
  42001a:	9506      	str	r5, [sp, #24]
    a->repeat_cnt       = cnt;
  42001c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  420020:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(size.x > lv_area_get_width(&txt_coords)) {
  420024:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  420028:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  42002c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  420030:	1a5b      	subs	r3, r3, r1
  420032:	b29b      	uxth	r3, r3
  420034:	3301      	adds	r3, #1
  420036:	b21b      	sxth	r3, r3
  420038:	429a      	cmp	r2, r3
  42003a:	dd3e      	ble.n	4200ba <lv_label_refr_text+0x342>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  42003c:	2220      	movs	r2, #32
  42003e:	4611      	mov	r1, r2
  420040:	4640      	mov	r0, r8
  420042:	4b8f      	ldr	r3, [pc, #572]	; (420280 <lv_label_refr_text+0x508>)
  420044:	4798      	blx	r3
  420046:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
  42004a:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  42004e:	1a82      	subs	r2, r0, r2
  420050:	b212      	sxth	r2, r2
    a->start = start;
  420052:	2100      	movs	r1, #0
  420054:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  420056:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  420058:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  42005a:	4c8a      	ldr	r4, [pc, #552]	; (420284 <lv_label_refr_text+0x50c>)
  42005c:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  42005e:	89b0      	ldrh	r0, [r6, #12]
  420060:	4b89      	ldr	r3, [pc, #548]	; (420288 <lv_label_refr_text+0x510>)
  420062:	4798      	blx	r3
    a->time     = duration;
  420064:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  420066:	4621      	mov	r1, r4
  420068:	4628      	mov	r0, r5
  42006a:	4b88      	ldr	r3, [pc, #544]	; (42028c <lv_label_refr_text+0x514>)
  42006c:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  42006e:	b310      	cbz	r0, 4200b6 <lv_label_refr_text+0x33e>
  420070:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  420072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  420074:	4293      	cmp	r3, r2
  420076:	da06      	bge.n	420086 <lv_label_refr_text+0x30e>
                a.act_time = act_time;      /*To keep the old position*/
  420078:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  42007a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  42007e:	f36f 0300 	bfc	r3, #0, #1
  420082:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  420086:	a806      	add	r0, sp, #24
  420088:	4b81      	ldr	r3, [pc, #516]	; (420290 <lv_label_refr_text+0x518>)
  42008a:	4798      	blx	r3
            hor_anim = true;
  42008c:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  42008e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  420092:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  420096:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
  42009a:	1a1b      	subs	r3, r3, r0
  42009c:	b29b      	uxth	r3, r3
  42009e:	3301      	adds	r3, #1
  4200a0:	b21b      	sxth	r3, r3
  4200a2:	429a      	cmp	r2, r3
  4200a4:	dd00      	ble.n	4200a8 <lv_label_refr_text+0x330>
  4200a6:	b179      	cbz	r1, 4200c8 <lv_label_refr_text+0x350>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4200a8:	497a      	ldr	r1, [pc, #488]	; (420294 <lv_label_refr_text+0x51c>)
  4200aa:	4628      	mov	r0, r5
  4200ac:	4b7a      	ldr	r3, [pc, #488]	; (420298 <lv_label_refr_text+0x520>)
  4200ae:	4798      	blx	r3
            ext->offset.y = 0;
  4200b0:	2300      	movs	r3, #0
  4200b2:	8233      	strh	r3, [r6, #16]
  4200b4:	e6b0      	b.n	41fe18 <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4200b6:	2300      	movs	r3, #0
  4200b8:	e7db      	b.n	420072 <lv_label_refr_text+0x2fa>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  4200ba:	4972      	ldr	r1, [pc, #456]	; (420284 <lv_label_refr_text+0x50c>)
  4200bc:	4628      	mov	r0, r5
  4200be:	4b76      	ldr	r3, [pc, #472]	; (420298 <lv_label_refr_text+0x520>)
  4200c0:	4798      	blx	r3
            ext->offset.x = 0;
  4200c2:	2100      	movs	r1, #0
  4200c4:	81f1      	strh	r1, [r6, #14]
  4200c6:	e7e2      	b.n	42008e <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  4200c8:	b292      	uxth	r2, r2
  4200ca:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  4200ce:	4252      	negs	r2, r2
  4200d0:	1ad2      	subs	r2, r2, r3
  4200d2:	b212      	sxth	r2, r2
    a->start = start;
  4200d4:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  4200d6:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  4200d8:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  4200da:	4c6e      	ldr	r4, [pc, #440]	; (420294 <lv_label_refr_text+0x51c>)
  4200dc:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  4200de:	89b0      	ldrh	r0, [r6, #12]
  4200e0:	4b69      	ldr	r3, [pc, #420]	; (420288 <lv_label_refr_text+0x510>)
  4200e2:	4798      	blx	r3
    a->time     = duration;
  4200e4:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4200e6:	4621      	mov	r1, r4
  4200e8:	4628      	mov	r0, r5
  4200ea:	4b68      	ldr	r3, [pc, #416]	; (42028c <lv_label_refr_text+0x514>)
  4200ec:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  4200ee:	b170      	cbz	r0, 42010e <lv_label_refr_text+0x396>
  4200f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  4200f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4200f4:	4293      	cmp	r3, r2
  4200f6:	da06      	bge.n	420106 <lv_label_refr_text+0x38e>
                a.act_time = act_time;      /*To keep the old position*/
  4200f8:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  4200fa:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  4200fe:	f36f 0300 	bfc	r3, #0, #1
  420102:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  420106:	a806      	add	r0, sp, #24
  420108:	4b61      	ldr	r3, [pc, #388]	; (420290 <lv_label_refr_text+0x518>)
  42010a:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  42010c:	e684      	b.n	41fe18 <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  42010e:	2300      	movs	r3, #0
  420110:	e7ef      	b.n	4200f2 <lv_label_refr_text+0x37a>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  420112:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  420116:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  42011a:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  42011e:	1a5b      	subs	r3, r3, r1
  420120:	b29b      	uxth	r3, r3
  420122:	3301      	adds	r3, #1
  420124:	b21b      	sxth	r3, r3
  420126:	429a      	cmp	r2, r3
  420128:	dc03      	bgt.n	420132 <lv_label_refr_text+0x3ba>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  42012a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  42012e:	60b3      	str	r3, [r6, #8]
  420130:	e672      	b.n	41fe18 <lv_label_refr_text+0xa0>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  420132:	4b5a      	ldr	r3, [pc, #360]	; (42029c <lv_label_refr_text+0x524>)
  420134:	681b      	ldr	r3, [r3, #0]
  420136:	6830      	ldr	r0, [r6, #0]
  420138:	4798      	blx	r3
  42013a:	2803      	cmp	r0, #3
  42013c:	d803      	bhi.n	420146 <lv_label_refr_text+0x3ce>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  42013e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  420142:	60b3      	str	r3, [r6, #8]
  420144:	e668      	b.n	41fe18 <lv_label_refr_text+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  420146:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  42014a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  42014e:	1ae4      	subs	r4, r4, r3
  420150:	b2a4      	uxth	r4, r4
  420152:	3401      	adds	r4, #1
  420154:	b2a4      	uxth	r4, r4
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  420156:	222e      	movs	r2, #46	; 0x2e
  420158:	4611      	mov	r1, r2
  42015a:	4640      	mov	r0, r8
  42015c:	4b48      	ldr	r3, [pc, #288]	; (420280 <lv_label_refr_text+0x508>)
  42015e:	4798      	blx	r3
  420160:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
  420162:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  420166:	4420      	add	r0, r4
  420168:	f8ad 0014 	strh.w	r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  42016c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  420170:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  420174:	1a9b      	subs	r3, r3, r2
  420176:	b29b      	uxth	r3, r3
  420178:	3301      	adds	r3, #1
  42017a:	b29b      	uxth	r3, r3
  42017c:	b218      	sxth	r0, r3
            p.y = lv_area_get_height(&txt_coords);
  42017e:	f8ad 0016 	strh.w	r0, [sp, #22]
  420182:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  420186:	eb09 0401 	add.w	r4, r9, r1
            y_overed = p.y %
  42018a:	fb90 f2f4 	sdiv	r2, r0, r4
  42018e:	fb04 0212 	mls	r2, r4, r2, r0
  420192:	b210      	sxth	r0, r2
            if(y_overed >= lv_font_get_line_height(font)) {
  420194:	4288      	cmp	r0, r1
  420196:	db16      	blt.n	4201c6 <lv_label_refr_text+0x44e>
                p.y -= y_overed;
  420198:	1a9b      	subs	r3, r3, r2
                p.y += lv_font_get_line_height(font);
  42019a:	b289      	uxth	r1, r1
  42019c:	fa11 f383 	uxtah	r3, r1, r3
  4201a0:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
  4201a4:	a905      	add	r1, sp, #20
  4201a6:	4628      	mov	r0, r5
  4201a8:	4b3d      	ldr	r3, [pc, #244]	; (4202a0 <lv_label_refr_text+0x528>)
  4201aa:	4798      	blx	r3
  4201ac:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
  4201ae:	6834      	ldr	r4, [r6, #0]
  4201b0:	4620      	mov	r0, r4
  4201b2:	4b3c      	ldr	r3, [pc, #240]	; (4202a4 <lv_label_refr_text+0x52c>)
  4201b4:	4798      	blx	r3
  4201b6:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
  4201b8:	4b3b      	ldr	r3, [pc, #236]	; (4202a8 <lv_label_refr_text+0x530>)
  4201ba:	681b      	ldr	r3, [r3, #0]
  4201bc:	4639      	mov	r1, r7
  4201be:	4620      	mov	r0, r4
  4201c0:	4798      	blx	r3
  4201c2:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  4201c4:	e00c      	b.n	4201e0 <lv_label_refr_text+0x468>
                p.y -= y_overed;
  4201c6:	1a9b      	subs	r3, r3, r2
  4201c8:	b29b      	uxth	r3, r3
                p.y -= line_space;
  4201ca:	eba3 0909 	sub.w	r9, r3, r9
  4201ce:	f8ad 9016 	strh.w	r9, [sp, #22]
  4201d2:	e7e7      	b.n	4201a4 <lv_label_refr_text+0x42c>
                _lv_txt_encoded_prev(ext->text, &byte_id);
  4201d4:	4b35      	ldr	r3, [pc, #212]	; (4202ac <lv_label_refr_text+0x534>)
  4201d6:	681b      	ldr	r3, [r3, #0]
  4201d8:	a906      	add	r1, sp, #24
  4201da:	6830      	ldr	r0, [r6, #0]
  4201dc:	4798      	blx	r3
                letter_id--;
  4201de:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  4201e0:	9c06      	ldr	r4, [sp, #24]
  4201e2:	f104 0803 	add.w	r8, r4, #3
  4201e6:	45c1      	cmp	r9, r8
  4201e8:	d3f4      	bcc.n	4201d4 <lv_label_refr_text+0x45c>
  4201ea:	f04f 0900 	mov.w	r9, #0
  4201ee:	46cb      	mov	fp, r9
  4201f0:	e012      	b.n	420218 <lv_label_refr_text+0x4a0>
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
  4201f2:	6830      	ldr	r0, [r6, #0]
  4201f4:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  4201f8:	f85a 2d50 	ldr.w	r2, [sl, #-80]!
  4201fc:	4b2c      	ldr	r3, [pc, #176]	; (4202b0 <lv_label_refr_text+0x538>)
  4201fe:	681b      	ldr	r3, [r3, #0]
  420200:	4410      	add	r0, r2
  420202:	4798      	blx	r3
  420204:	4481      	add	r9, r0
  420206:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
  42020a:	4b2a      	ldr	r3, [pc, #168]	; (4202b4 <lv_label_refr_text+0x53c>)
  42020c:	681b      	ldr	r3, [r3, #0]
  42020e:	4651      	mov	r1, sl
  420210:	6830      	ldr	r0, [r6, #0]
  420212:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  420214:	f10b 0b01 	add.w	fp, fp, #1
  420218:	f1bb 0f03 	cmp.w	fp, #3
  42021c:	d9e9      	bls.n	4201f2 <lv_label_refr_text+0x47a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
  42021e:	6831      	ldr	r1, [r6, #0]
  420220:	464a      	mov	r2, r9
  420222:	4421      	add	r1, r4
  420224:	4628      	mov	r0, r5
  420226:	4b24      	ldr	r3, [pc, #144]	; (4202b8 <lv_label_refr_text+0x540>)
  420228:	4798      	blx	r3
  42022a:	2800      	cmp	r0, #0
  42022c:	f43f adf4 	beq.w	41fe18 <lv_label_refr_text+0xa0>
  420230:	2300      	movs	r3, #0
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  420232:	2b02      	cmp	r3, #2
  420234:	d805      	bhi.n	420242 <lv_label_refr_text+0x4ca>
                    ext->text[byte_id_ori + i] = '.';
  420236:	6831      	ldr	r1, [r6, #0]
  420238:	191a      	adds	r2, r3, r4
  42023a:	202e      	movs	r0, #46	; 0x2e
  42023c:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  42023e:	3301      	adds	r3, #1
  420240:	e7f7      	b.n	420232 <lv_label_refr_text+0x4ba>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  420242:	6833      	ldr	r3, [r6, #0]
  420244:	2200      	movs	r2, #0
  420246:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  42024a:	3703      	adds	r7, #3
  42024c:	60b7      	str	r7, [r6, #8]
  42024e:	e5e3      	b.n	41fe18 <lv_label_refr_text+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  420250:	2210      	movs	r2, #16
  420252:	2100      	movs	r1, #0
  420254:	4628      	mov	r0, r5
  420256:	4e19      	ldr	r6, [pc, #100]	; (4202bc <lv_label_refr_text+0x544>)
  420258:	47b0      	blx	r6
  42025a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  42025c:	2211      	movs	r2, #17
  42025e:	2100      	movs	r1, #0
  420260:	4628      	mov	r0, r5
  420262:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  420264:	1821      	adds	r1, r4, r0
  420266:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  42026a:	4401      	add	r1, r0
  42026c:	b209      	sxth	r1, r1
  42026e:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        lv_obj_set_height(label, size.y);
  420272:	4628      	mov	r0, r5
  420274:	4b12      	ldr	r3, [pc, #72]	; (4202c0 <lv_label_refr_text+0x548>)
  420276:	4798      	blx	r3
  420278:	e5ce      	b.n	41fe18 <lv_label_refr_text+0xa0>
  42027a:	bf00      	nop
  42027c:	00414f95 	.word	0x00414f95
  420280:	00413745 	.word	0x00413745
  420284:	0041f6b5 	.word	0x0041f6b5
  420288:	00415119 	.word	0x00415119
  42028c:	004150e5 	.word	0x004150e5
  420290:	0041504d 	.word	0x0041504d
  420294:	0041f699 	.word	0x0041f699
  420298:	00414fe1 	.word	0x00414fe1
  42029c:	20400064 	.word	0x20400064
  4202a0:	0041f7f1 	.word	0x0041f7f1
  4202a4:	00423b81 	.word	0x00423b81
  4202a8:	20400050 	.word	0x20400050
  4202ac:	2040005c 	.word	0x2040005c
  4202b0:	20400060 	.word	0x20400060
  4202b4:	20400058 	.word	0x20400058
  4202b8:	0041f631 	.word	0x0041f631
  4202bc:	00407255 	.word	0x00407255
  4202c0:	00406b7d 	.word	0x00406b7d

004202c4 <lv_label_signal>:
{
  4202c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4202c8:	4607      	mov	r7, r0
  4202ca:	460c      	mov	r4, r1
  4202cc:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  4202ce:	2908      	cmp	r1, #8
  4202d0:	d014      	beq.n	4202fc <lv_label_signal+0x38>
    res = ancestor_signal(label, sign, param);
  4202d2:	4b31      	ldr	r3, [pc, #196]	; (420398 <lv_label_signal+0xd4>)
  4202d4:	681b      	ldr	r3, [r3, #0]
  4202d6:	4798      	blx	r3
  4202d8:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  4202da:	2801      	cmp	r0, #1
  4202dc:	d114      	bne.n	420308 <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  4202de:	2c07      	cmp	r4, #7
  4202e0:	d01d      	beq.n	42031e <lv_label_signal+0x5a>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4202e2:	4638      	mov	r0, r7
  4202e4:	4b2d      	ldr	r3, [pc, #180]	; (42039c <lv_label_signal+0xd8>)
  4202e6:	4798      	blx	r3
  4202e8:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  4202ea:	bb2c      	cbnz	r4, 420338 <lv_label_signal+0x74>
        if(ext->static_txt == 0) {
  4202ec:	7c83      	ldrb	r3, [r0, #18]
  4202ee:	f013 0f08 	tst.w	r3, #8
  4202f2:	d01a      	beq.n	42032a <lv_label_signal+0x66>
        lv_label_dot_tmp_free(label);
  4202f4:	4638      	mov	r0, r7
  4202f6:	4b2a      	ldr	r3, [pc, #168]	; (4203a0 <lv_label_signal+0xdc>)
  4202f8:	4798      	blx	r3
  4202fa:	e005      	b.n	420308 <lv_label_signal+0x44>
        info->result = lv_label_get_style(label, info->part);
  4202fc:	7811      	ldrb	r1, [r2, #0]
  4202fe:	4b29      	ldr	r3, [pc, #164]	; (4203a4 <lv_label_signal+0xe0>)
  420300:	4798      	blx	r3
  420302:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  420304:	b118      	cbz	r0, 42030e <lv_label_signal+0x4a>
  420306:	2601      	movs	r6, #1
}
  420308:	4630      	mov	r0, r6
  42030a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else return ancestor_signal(label, sign, param);
  42030e:	4b22      	ldr	r3, [pc, #136]	; (420398 <lv_label_signal+0xd4>)
  420310:	681b      	ldr	r3, [r3, #0]
  420312:	462a      	mov	r2, r5
  420314:	4621      	mov	r1, r4
  420316:	4638      	mov	r0, r7
  420318:	4798      	blx	r3
  42031a:	4606      	mov	r6, r0
  42031c:	e7f4      	b.n	420308 <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  42031e:	4922      	ldr	r1, [pc, #136]	; (4203a8 <lv_label_signal+0xe4>)
  420320:	4628      	mov	r0, r5
  420322:	4b22      	ldr	r3, [pc, #136]	; (4203ac <lv_label_signal+0xe8>)
  420324:	4798      	blx	r3
  420326:	4606      	mov	r6, r0
  420328:	e7ee      	b.n	420308 <lv_label_signal+0x44>
            lv_mem_free(ext->text);
  42032a:	6800      	ldr	r0, [r0, #0]
  42032c:	4b20      	ldr	r3, [pc, #128]	; (4203b0 <lv_label_signal+0xec>)
  42032e:	4798      	blx	r3
            ext->text = NULL;
  420330:	2300      	movs	r3, #0
  420332:	f8c8 3000 	str.w	r3, [r8]
  420336:	e7dd      	b.n	4202f4 <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  420338:	2c04      	cmp	r4, #4
  42033a:	d016      	beq.n	42036a <lv_label_signal+0xa6>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  42033c:	2c02      	cmp	r4, #2
  42033e:	d1e3      	bne.n	420308 <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  420340:	8abb      	ldrh	r3, [r7, #20]
  420342:	8a3a      	ldrh	r2, [r7, #16]
  420344:	1a9b      	subs	r3, r3, r2
  420346:	b29b      	uxth	r3, r3
  420348:	3301      	adds	r3, #1
  42034a:	b29b      	uxth	r3, r3
  42034c:	88aa      	ldrh	r2, [r5, #4]
  42034e:	8829      	ldrh	r1, [r5, #0]
  420350:	1a52      	subs	r2, r2, r1
  420352:	b292      	uxth	r2, r2
  420354:	3201      	adds	r2, #1
  420356:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  420358:	429a      	cmp	r2, r3
  42035a:	d00d      	beq.n	420378 <lv_label_signal+0xb4>
            lv_label_revert_dots(label);
  42035c:	4638      	mov	r0, r7
  42035e:	4b15      	ldr	r3, [pc, #84]	; (4203b4 <lv_label_signal+0xf0>)
  420360:	4798      	blx	r3
            lv_label_refr_text(label);
  420362:	4638      	mov	r0, r7
  420364:	4b14      	ldr	r3, [pc, #80]	; (4203b8 <lv_label_signal+0xf4>)
  420366:	4798      	blx	r3
  420368:	e7ce      	b.n	420308 <lv_label_signal+0x44>
        lv_label_revert_dots(label);
  42036a:	4638      	mov	r0, r7
  42036c:	4b11      	ldr	r3, [pc, #68]	; (4203b4 <lv_label_signal+0xf0>)
  42036e:	4798      	blx	r3
        lv_label_refr_text(label);
  420370:	4638      	mov	r0, r7
  420372:	4b11      	ldr	r3, [pc, #68]	; (4203b8 <lv_label_signal+0xf4>)
  420374:	4798      	blx	r3
  420376:	e7c7      	b.n	420308 <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  420378:	8afb      	ldrh	r3, [r7, #22]
  42037a:	8a7a      	ldrh	r2, [r7, #18]
  42037c:	1a9b      	subs	r3, r3, r2
  42037e:	b29b      	uxth	r3, r3
  420380:	3301      	adds	r3, #1
  420382:	b29b      	uxth	r3, r3
  420384:	88ea      	ldrh	r2, [r5, #6]
  420386:	8869      	ldrh	r1, [r5, #2]
  420388:	1a52      	subs	r2, r2, r1
  42038a:	b292      	uxth	r2, r2
  42038c:	3201      	adds	r2, #1
  42038e:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  420390:	429a      	cmp	r2, r3
  420392:	d1e3      	bne.n	42035c <lv_label_signal+0x98>
  420394:	e7b8      	b.n	420308 <lv_label_signal+0x44>
  420396:	bf00      	nop
  420398:	204147ec 	.word	0x204147ec
  42039c:	00407e25 	.word	0x00407e25
  4203a0:	0041f535 	.word	0x0041f535
  4203a4:	0041fd6d 	.word	0x0041fd6d
  4203a8:	0042c3dc 	.word	0x0042c3dc
  4203ac:	004080b1 	.word	0x004080b1
  4203b0:	0041624d 	.word	0x0041624d
  4203b4:	0041f565 	.word	0x0041f565
  4203b8:	0041fd79 	.word	0x0041fd79

004203bc <lv_label_set_text>:
{
  4203bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4203be:	4607      	mov	r7, r0
  4203c0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4203c2:	4b31      	ldr	r3, [pc, #196]	; (420488 <lv_label_set_text+0xcc>)
  4203c4:	4798      	blx	r3
  4203c6:	b928      	cbnz	r0, 4203d4 <lv_label_set_text+0x18>
  4203c8:	463a      	mov	r2, r7
  4203ca:	2300      	movs	r3, #0
  4203cc:	482f      	ldr	r0, [pc, #188]	; (42048c <lv_label_set_text+0xd0>)
  4203ce:	4930      	ldr	r1, [pc, #192]	; (420490 <lv_label_set_text+0xd4>)
  4203d0:	4788      	blx	r1
  4203d2:	e7fe      	b.n	4203d2 <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
  4203d4:	4638      	mov	r0, r7
  4203d6:	4b2f      	ldr	r3, [pc, #188]	; (420494 <lv_label_set_text+0xd8>)
  4203d8:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4203da:	4638      	mov	r0, r7
  4203dc:	4b2e      	ldr	r3, [pc, #184]	; (420498 <lv_label_set_text+0xdc>)
  4203de:	4798      	blx	r3
  4203e0:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
  4203e2:	b31d      	cbz	r5, 42042c <lv_label_set_text+0x70>
    LV_ASSERT_STR(text);
  4203e4:	4628      	mov	r0, r5
  4203e6:	4b28      	ldr	r3, [pc, #160]	; (420488 <lv_label_set_text+0xcc>)
  4203e8:	4798      	blx	r3
  4203ea:	b308      	cbz	r0, 420430 <lv_label_set_text+0x74>
    if(ext->text == text && ext->static_txt == 0) {
  4203ec:	6826      	ldr	r6, [r4, #0]
  4203ee:	42b5      	cmp	r5, r6
  4203f0:	d024      	beq.n	42043c <lv_label_set_text+0x80>
        if(ext->text != NULL && ext->static_txt == 0) {
  4203f2:	b11e      	cbz	r6, 4203fc <lv_label_set_text+0x40>
  4203f4:	7ca3      	ldrb	r3, [r4, #18]
  4203f6:	f013 0f08 	tst.w	r3, #8
  4203fa:	d038      	beq.n	42046e <lv_label_set_text+0xb2>
        size_t len = strlen(text) + 1;
  4203fc:	4628      	mov	r0, r5
  4203fe:	4b27      	ldr	r3, [pc, #156]	; (42049c <lv_label_set_text+0xe0>)
  420400:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
  420402:	3001      	adds	r0, #1
  420404:	4b26      	ldr	r3, [pc, #152]	; (4204a0 <lv_label_set_text+0xe4>)
  420406:	4798      	blx	r3
  420408:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  42040a:	4b1f      	ldr	r3, [pc, #124]	; (420488 <lv_label_set_text+0xcc>)
  42040c:	4798      	blx	r3
  42040e:	2800      	cmp	r0, #0
  420410:	d033      	beq.n	42047a <lv_label_set_text+0xbe>
        if(ext->text == NULL) return;
  420412:	6820      	ldr	r0, [r4, #0]
  420414:	b148      	cbz	r0, 42042a <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
  420416:	4629      	mov	r1, r5
  420418:	4b22      	ldr	r3, [pc, #136]	; (4204a4 <lv_label_set_text+0xe8>)
  42041a:	4798      	blx	r3
        ext->static_txt = 0;
  42041c:	7ca3      	ldrb	r3, [r4, #18]
  42041e:	f36f 03c3 	bfc	r3, #3, #1
  420422:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  420424:	4638      	mov	r0, r7
  420426:	4b20      	ldr	r3, [pc, #128]	; (4204a8 <lv_label_set_text+0xec>)
  420428:	4798      	blx	r3
  42042a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(text == NULL) text = ext->text;
  42042c:	6805      	ldr	r5, [r0, #0]
  42042e:	e7d9      	b.n	4203e4 <lv_label_set_text+0x28>
    LV_ASSERT_STR(text);
  420430:	462a      	mov	r2, r5
  420432:	2300      	movs	r3, #0
  420434:	4815      	ldr	r0, [pc, #84]	; (42048c <lv_label_set_text+0xd0>)
  420436:	4916      	ldr	r1, [pc, #88]	; (420490 <lv_label_set_text+0xd4>)
  420438:	4788      	blx	r1
  42043a:	e7fe      	b.n	42043a <lv_label_set_text+0x7e>
    if(ext->text == text && ext->static_txt == 0) {
  42043c:	7ca3      	ldrb	r3, [r4, #18]
  42043e:	f013 0f08 	tst.w	r3, #8
  420442:	d1d6      	bne.n	4203f2 <lv_label_set_text+0x36>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
  420444:	4630      	mov	r0, r6
  420446:	4b15      	ldr	r3, [pc, #84]	; (42049c <lv_label_set_text+0xe0>)
  420448:	4798      	blx	r3
  42044a:	1c41      	adds	r1, r0, #1
  42044c:	4630      	mov	r0, r6
  42044e:	4b17      	ldr	r3, [pc, #92]	; (4204ac <lv_label_set_text+0xf0>)
  420450:	4798      	blx	r3
  420452:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  420454:	4b0c      	ldr	r3, [pc, #48]	; (420488 <lv_label_set_text+0xcc>)
  420456:	4798      	blx	r3
  420458:	b928      	cbnz	r0, 420466 <lv_label_set_text+0xaa>
  42045a:	6822      	ldr	r2, [r4, #0]
  42045c:	2300      	movs	r3, #0
  42045e:	4814      	ldr	r0, [pc, #80]	; (4204b0 <lv_label_set_text+0xf4>)
  420460:	490b      	ldr	r1, [pc, #44]	; (420490 <lv_label_set_text+0xd4>)
  420462:	4788      	blx	r1
  420464:	e7fe      	b.n	420464 <lv_label_set_text+0xa8>
        if(ext->text == NULL) return;
  420466:	6823      	ldr	r3, [r4, #0]
  420468:	2b00      	cmp	r3, #0
  42046a:	d1db      	bne.n	420424 <lv_label_set_text+0x68>
  42046c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(ext->text);
  42046e:	4630      	mov	r0, r6
  420470:	4b10      	ldr	r3, [pc, #64]	; (4204b4 <lv_label_set_text+0xf8>)
  420472:	4798      	blx	r3
            ext->text = NULL;
  420474:	2300      	movs	r3, #0
  420476:	6023      	str	r3, [r4, #0]
  420478:	e7c0      	b.n	4203fc <lv_label_set_text+0x40>
        LV_ASSERT_MEM(ext->text);
  42047a:	6822      	ldr	r2, [r4, #0]
  42047c:	2300      	movs	r3, #0
  42047e:	480c      	ldr	r0, [pc, #48]	; (4204b0 <lv_label_set_text+0xf4>)
  420480:	4903      	ldr	r1, [pc, #12]	; (420490 <lv_label_set_text+0xd4>)
  420482:	4788      	blx	r1
  420484:	e7fe      	b.n	420484 <lv_label_set_text+0xc8>
  420486:	bf00      	nop
  420488:	00415a81 	.word	0x00415a81
  42048c:	00428ca8 	.word	0x00428ca8
  420490:	00415a8d 	.word	0x00415a8d
  420494:	00405d69 	.word	0x00405d69
  420498:	00407e25 	.word	0x00407e25
  42049c:	00423b81 	.word	0x00423b81
  4204a0:	00416189 	.word	0x00416189
  4204a4:	00423a9d 	.word	0x00423a9d
  4204a8:	0041fd79 	.word	0x0041fd79
  4204ac:	004164b9 	.word	0x004164b9
  4204b0:	00428c94 	.word	0x00428c94
  4204b4:	0041624d 	.word	0x0041624d

004204b8 <lv_label_set_text_fmt>:
{
  4204b8:	b40e      	push	{r1, r2, r3}
  4204ba:	b570      	push	{r4, r5, r6, lr}
  4204bc:	b083      	sub	sp, #12
  4204be:	4605      	mov	r5, r0
  4204c0:	9e07      	ldr	r6, [sp, #28]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4204c2:	4b1d      	ldr	r3, [pc, #116]	; (420538 <lv_label_set_text_fmt+0x80>)
  4204c4:	4798      	blx	r3
  4204c6:	b928      	cbnz	r0, 4204d4 <lv_label_set_text_fmt+0x1c>
  4204c8:	462a      	mov	r2, r5
  4204ca:	2300      	movs	r3, #0
  4204cc:	481b      	ldr	r0, [pc, #108]	; (42053c <lv_label_set_text_fmt+0x84>)
  4204ce:	491c      	ldr	r1, [pc, #112]	; (420540 <lv_label_set_text_fmt+0x88>)
  4204d0:	4788      	blx	r1
  4204d2:	e7fe      	b.n	4204d2 <lv_label_set_text_fmt+0x1a>
    LV_ASSERT_STR(fmt);
  4204d4:	4630      	mov	r0, r6
  4204d6:	4b18      	ldr	r3, [pc, #96]	; (420538 <lv_label_set_text_fmt+0x80>)
  4204d8:	4798      	blx	r3
  4204da:	b928      	cbnz	r0, 4204e8 <lv_label_set_text_fmt+0x30>
  4204dc:	4632      	mov	r2, r6
  4204de:	2300      	movs	r3, #0
  4204e0:	4816      	ldr	r0, [pc, #88]	; (42053c <lv_label_set_text_fmt+0x84>)
  4204e2:	4917      	ldr	r1, [pc, #92]	; (420540 <lv_label_set_text_fmt+0x88>)
  4204e4:	4788      	blx	r1
  4204e6:	e7fe      	b.n	4204e6 <lv_label_set_text_fmt+0x2e>
    lv_obj_invalidate(label);
  4204e8:	4628      	mov	r0, r5
  4204ea:	4b16      	ldr	r3, [pc, #88]	; (420544 <lv_label_set_text_fmt+0x8c>)
  4204ec:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4204ee:	4628      	mov	r0, r5
  4204f0:	4b15      	ldr	r3, [pc, #84]	; (420548 <lv_label_set_text_fmt+0x90>)
  4204f2:	4798      	blx	r3
  4204f4:	4604      	mov	r4, r0
    if(fmt == NULL) {
  4204f6:	b93e      	cbnz	r6, 420508 <lv_label_set_text_fmt+0x50>
        lv_label_refr_text(label);
  4204f8:	4628      	mov	r0, r5
  4204fa:	4b14      	ldr	r3, [pc, #80]	; (42054c <lv_label_set_text_fmt+0x94>)
  4204fc:	4798      	blx	r3
}
  4204fe:	b003      	add	sp, #12
  420500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  420504:	b003      	add	sp, #12
  420506:	4770      	bx	lr
    if(ext->text != NULL && ext->static_txt == 0) {
  420508:	6800      	ldr	r0, [r0, #0]
  42050a:	b138      	cbz	r0, 42051c <lv_label_set_text_fmt+0x64>
  42050c:	7ca3      	ldrb	r3, [r4, #18]
  42050e:	f013 0f08 	tst.w	r3, #8
  420512:	d103      	bne.n	42051c <lv_label_set_text_fmt+0x64>
        lv_mem_free(ext->text);
  420514:	4b0e      	ldr	r3, [pc, #56]	; (420550 <lv_label_set_text_fmt+0x98>)
  420516:	4798      	blx	r3
        ext->text = NULL;
  420518:	2300      	movs	r3, #0
  42051a:	6023      	str	r3, [r4, #0]
    va_start(args, fmt);
  42051c:	a908      	add	r1, sp, #32
  42051e:	9101      	str	r1, [sp, #4]
    ext->text = _lv_txt_set_text_vfmt(fmt, args);
  420520:	4630      	mov	r0, r6
  420522:	4b0c      	ldr	r3, [pc, #48]	; (420554 <lv_label_set_text_fmt+0x9c>)
  420524:	4798      	blx	r3
  420526:	6020      	str	r0, [r4, #0]
    ext->static_txt = 0; /*Now the text is dynamically allocated*/
  420528:	7ca3      	ldrb	r3, [r4, #18]
  42052a:	f36f 03c3 	bfc	r3, #3, #1
  42052e:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  420530:	4628      	mov	r0, r5
  420532:	4b06      	ldr	r3, [pc, #24]	; (42054c <lv_label_set_text_fmt+0x94>)
  420534:	4798      	blx	r3
  420536:	e7e2      	b.n	4204fe <lv_label_set_text_fmt+0x46>
  420538:	00415a81 	.word	0x00415a81
  42053c:	00428ca8 	.word	0x00428ca8
  420540:	00415a8d 	.word	0x00415a8d
  420544:	00405d69 	.word	0x00405d69
  420548:	00407e25 	.word	0x00407e25
  42054c:	0041fd79 	.word	0x0041fd79
  420550:	0041624d 	.word	0x0041624d
  420554:	00417b21 	.word	0x00417b21

00420558 <lv_label_set_text_static>:
{
  420558:	b570      	push	{r4, r5, r6, lr}
  42055a:	4605      	mov	r5, r0
  42055c:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  42055e:	4b10      	ldr	r3, [pc, #64]	; (4205a0 <lv_label_set_text_static+0x48>)
  420560:	4798      	blx	r3
  420562:	b928      	cbnz	r0, 420570 <lv_label_set_text_static+0x18>
  420564:	462a      	mov	r2, r5
  420566:	2300      	movs	r3, #0
  420568:	480e      	ldr	r0, [pc, #56]	; (4205a4 <lv_label_set_text_static+0x4c>)
  42056a:	490f      	ldr	r1, [pc, #60]	; (4205a8 <lv_label_set_text_static+0x50>)
  42056c:	4788      	blx	r1
  42056e:	e7fe      	b.n	42056e <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  420570:	4628      	mov	r0, r5
  420572:	4b0e      	ldr	r3, [pc, #56]	; (4205ac <lv_label_set_text_static+0x54>)
  420574:	4798      	blx	r3
  420576:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
  420578:	7c83      	ldrb	r3, [r0, #18]
  42057a:	f013 0f08 	tst.w	r3, #8
  42057e:	d105      	bne.n	42058c <lv_label_set_text_static+0x34>
  420580:	6800      	ldr	r0, [r0, #0]
  420582:	b118      	cbz	r0, 42058c <lv_label_set_text_static+0x34>
        lv_mem_free(ext->text);
  420584:	4b0a      	ldr	r3, [pc, #40]	; (4205b0 <lv_label_set_text_static+0x58>)
  420586:	4798      	blx	r3
        ext->text = NULL;
  420588:	2300      	movs	r3, #0
  42058a:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
  42058c:	b126      	cbz	r6, 420598 <lv_label_set_text_static+0x40>
        ext->static_txt = 1;
  42058e:	7ca3      	ldrb	r3, [r4, #18]
  420590:	f043 0308 	orr.w	r3, r3, #8
  420594:	74a3      	strb	r3, [r4, #18]
        ext->text       = (char *)text;
  420596:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
  420598:	4628      	mov	r0, r5
  42059a:	4b06      	ldr	r3, [pc, #24]	; (4205b4 <lv_label_set_text_static+0x5c>)
  42059c:	4798      	blx	r3
  42059e:	bd70      	pop	{r4, r5, r6, pc}
  4205a0:	00415a81 	.word	0x00415a81
  4205a4:	00428ca8 	.word	0x00428ca8
  4205a8:	00415a8d 	.word	0x00415a8d
  4205ac:	00407e25 	.word	0x00407e25
  4205b0:	0041624d 	.word	0x0041624d
  4205b4:	0041fd79 	.word	0x0041fd79

004205b8 <lv_label_set_long_mode>:
{
  4205b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4205ba:	4605      	mov	r5, r0
  4205bc:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  4205be:	4b20      	ldr	r3, [pc, #128]	; (420640 <lv_label_set_long_mode+0x88>)
  4205c0:	4798      	blx	r3
  4205c2:	b928      	cbnz	r0, 4205d0 <lv_label_set_long_mode+0x18>
  4205c4:	462a      	mov	r2, r5
  4205c6:	2300      	movs	r3, #0
  4205c8:	481e      	ldr	r0, [pc, #120]	; (420644 <lv_label_set_long_mode+0x8c>)
  4205ca:	491f      	ldr	r1, [pc, #124]	; (420648 <lv_label_set_long_mode+0x90>)
  4205cc:	4788      	blx	r1
  4205ce:	e7fe      	b.n	4205ce <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  4205d0:	4628      	mov	r0, r5
  4205d2:	4b1e      	ldr	r3, [pc, #120]	; (42064c <lv_label_set_long_mode+0x94>)
  4205d4:	4798      	blx	r3
  4205d6:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
  4205d8:	491d      	ldr	r1, [pc, #116]	; (420650 <lv_label_set_long_mode+0x98>)
  4205da:	4628      	mov	r0, r5
  4205dc:	4e1d      	ldr	r6, [pc, #116]	; (420654 <lv_label_set_long_mode+0x9c>)
  4205de:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
  4205e0:	491d      	ldr	r1, [pc, #116]	; (420658 <lv_label_set_long_mode+0xa0>)
  4205e2:	4628      	mov	r0, r5
  4205e4:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  4205e6:	491d      	ldr	r1, [pc, #116]	; (42065c <lv_label_set_long_mode+0xa4>)
  4205e8:	4628      	mov	r0, r5
  4205ea:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  4205ec:	491c      	ldr	r1, [pc, #112]	; (420660 <lv_label_set_long_mode+0xa8>)
  4205ee:	4628      	mov	r0, r5
  4205f0:	47b0      	blx	r6
    ext->offset.x = 0;
  4205f2:	2300      	movs	r3, #0
  4205f4:	81e3      	strh	r3, [r4, #14]
    ext->offset.y = 0;
  4205f6:	8223      	strh	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
  4205f8:	1efb      	subs	r3, r7, #3
  4205fa:	b2db      	uxtb	r3, r3
  4205fc:	2b02      	cmp	r3, #2
  4205fe:	d810      	bhi.n	420622 <lv_label_set_long_mode+0x6a>
        ext->expand = 1;
  420600:	7ca3      	ldrb	r3, [r4, #18]
  420602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  420606:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  420608:	7ca3      	ldrb	r3, [r4, #18]
  42060a:	f003 0307 	and.w	r3, r3, #7
  42060e:	2b02      	cmp	r3, #2
  420610:	d00c      	beq.n	42062c <lv_label_set_long_mode+0x74>
    ext->long_mode = long_mode;
  420612:	7ca3      	ldrb	r3, [r4, #18]
  420614:	f367 0302 	bfi	r3, r7, #0, #3
  420618:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  42061a:	4628      	mov	r0, r5
  42061c:	4b11      	ldr	r3, [pc, #68]	; (420664 <lv_label_set_long_mode+0xac>)
  42061e:	4798      	blx	r3
  420620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
  420622:	7ca3      	ldrb	r3, [r4, #18]
  420624:	f36f 13c7 	bfc	r3, #7, #1
  420628:	74a3      	strb	r3, [r4, #18]
  42062a:	e7ed      	b.n	420608 <lv_label_set_long_mode+0x50>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  42062c:	68a2      	ldr	r2, [r4, #8]
  42062e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  420632:	429a      	cmp	r2, r3
  420634:	d0ed      	beq.n	420612 <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
  420636:	4628      	mov	r0, r5
  420638:	4b0b      	ldr	r3, [pc, #44]	; (420668 <lv_label_set_long_mode+0xb0>)
  42063a:	4798      	blx	r3
  42063c:	e7e9      	b.n	420612 <lv_label_set_long_mode+0x5a>
  42063e:	bf00      	nop
  420640:	00415a81 	.word	0x00415a81
  420644:	00428ca8 	.word	0x00428ca8
  420648:	00415a8d 	.word	0x00415a8d
  42064c:	00407e25 	.word	0x00407e25
  420650:	00405f05 	.word	0x00405f05
  420654:	00414fe1 	.word	0x00414fe1
  420658:	00405f45 	.word	0x00405f45
  42065c:	0041f6b5 	.word	0x0041f6b5
  420660:	0041f699 	.word	0x0041f699
  420664:	0041fd79 	.word	0x0041fd79
  420668:	0041f565 	.word	0x0041f565

0042066c <lv_label_set_recolor>:
{
  42066c:	b538      	push	{r3, r4, r5, lr}
  42066e:	4604      	mov	r4, r0
  420670:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  420672:	4b0e      	ldr	r3, [pc, #56]	; (4206ac <lv_label_set_recolor+0x40>)
  420674:	4798      	blx	r3
  420676:	b928      	cbnz	r0, 420684 <lv_label_set_recolor+0x18>
  420678:	4622      	mov	r2, r4
  42067a:	2300      	movs	r3, #0
  42067c:	480c      	ldr	r0, [pc, #48]	; (4206b0 <lv_label_set_recolor+0x44>)
  42067e:	490d      	ldr	r1, [pc, #52]	; (4206b4 <lv_label_set_recolor+0x48>)
  420680:	4788      	blx	r1
  420682:	e7fe      	b.n	420682 <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  420684:	4620      	mov	r0, r4
  420686:	4b0c      	ldr	r3, [pc, #48]	; (4206b8 <lv_label_set_recolor+0x4c>)
  420688:	4798      	blx	r3
    if(ext->recolor == en) return;
  42068a:	7c83      	ldrb	r3, [r0, #18]
  42068c:	f3c3 1380 	ubfx	r3, r3, #6, #1
  420690:	42ab      	cmp	r3, r5
  420692:	d008      	beq.n	4206a6 <lv_label_set_recolor+0x3a>
    ext->recolor = en == false ? 0 : 1;
  420694:	b945      	cbnz	r5, 4206a8 <lv_label_set_recolor+0x3c>
  420696:	2200      	movs	r2, #0
  420698:	7c83      	ldrb	r3, [r0, #18]
  42069a:	f362 1386 	bfi	r3, r2, #6, #1
  42069e:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
  4206a0:	4620      	mov	r0, r4
  4206a2:	4b06      	ldr	r3, [pc, #24]	; (4206bc <lv_label_set_recolor+0x50>)
  4206a4:	4798      	blx	r3
  4206a6:	bd38      	pop	{r3, r4, r5, pc}
    ext->recolor = en == false ? 0 : 1;
  4206a8:	2201      	movs	r2, #1
  4206aa:	e7f5      	b.n	420698 <lv_label_set_recolor+0x2c>
  4206ac:	00415a81 	.word	0x00415a81
  4206b0:	00428ca8 	.word	0x00428ca8
  4206b4:	00415a8d 	.word	0x00415a8d
  4206b8:	00407e25 	.word	0x00407e25
  4206bc:	0041fd79 	.word	0x0041fd79

004206c0 <lv_label_create>:
{
  4206c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4206c4:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
  4206c6:	4b6b      	ldr	r3, [pc, #428]	; (420874 <lv_label_create+0x1b4>)
  4206c8:	4798      	blx	r3
  4206ca:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
  4206cc:	4b6a      	ldr	r3, [pc, #424]	; (420878 <lv_label_create+0x1b8>)
  4206ce:	4798      	blx	r3
  4206d0:	b1b0      	cbz	r0, 420700 <lv_label_create+0x40>
    if(new_label == NULL) return NULL;
  4206d2:	2c00      	cmp	r4, #0
  4206d4:	f000 8085 	beq.w	4207e2 <lv_label_create+0x122>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  4206d8:	4b68      	ldr	r3, [pc, #416]	; (42087c <lv_label_create+0x1bc>)
  4206da:	681b      	ldr	r3, [r3, #0]
  4206dc:	b1b3      	cbz	r3, 42070c <lv_label_create+0x4c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
  4206de:	2114      	movs	r1, #20
  4206e0:	4620      	mov	r0, r4
  4206e2:	4b67      	ldr	r3, [pc, #412]	; (420880 <lv_label_create+0x1c0>)
  4206e4:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
  4206e6:	4620      	mov	r0, r4
  4206e8:	4b66      	ldr	r3, [pc, #408]	; (420884 <lv_label_create+0x1c4>)
  4206ea:	4798      	blx	r3
  4206ec:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  4206ee:	4b62      	ldr	r3, [pc, #392]	; (420878 <lv_label_create+0x1b8>)
  4206f0:	4798      	blx	r3
  4206f2:	b988      	cbnz	r0, 420718 <lv_label_create+0x58>
  4206f4:	462a      	mov	r2, r5
  4206f6:	2300      	movs	r3, #0
  4206f8:	4863      	ldr	r0, [pc, #396]	; (420888 <lv_label_create+0x1c8>)
  4206fa:	4964      	ldr	r1, [pc, #400]	; (42088c <lv_label_create+0x1cc>)
  4206fc:	4788      	blx	r1
  4206fe:	e7fe      	b.n	4206fe <lv_label_create+0x3e>
    LV_ASSERT_MEM(new_label);
  420700:	4622      	mov	r2, r4
  420702:	2300      	movs	r3, #0
  420704:	4860      	ldr	r0, [pc, #384]	; (420888 <lv_label_create+0x1c8>)
  420706:	4961      	ldr	r1, [pc, #388]	; (42088c <lv_label_create+0x1cc>)
  420708:	4788      	blx	r1
  42070a:	e7fe      	b.n	42070a <lv_label_create+0x4a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  42070c:	4620      	mov	r0, r4
  42070e:	4b60      	ldr	r3, [pc, #384]	; (420890 <lv_label_create+0x1d0>)
  420710:	4798      	blx	r3
  420712:	4b5a      	ldr	r3, [pc, #360]	; (42087c <lv_label_create+0x1bc>)
  420714:	6018      	str	r0, [r3, #0]
  420716:	e7e2      	b.n	4206de <lv_label_create+0x1e>
    if(ext == NULL) {
  420718:	2d00      	cmp	r5, #0
  42071a:	d065      	beq.n	4207e8 <lv_label_create+0x128>
    ext->text       = NULL;
  42071c:	2300      	movs	r3, #0
  42071e:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
  420720:	7caa      	ldrb	r2, [r5, #18]
    ext->align      = LV_LABEL_ALIGN_AUTO;
  420722:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
  420726:	f64f 71ff 	movw	r1, #65535	; 0xffff
  42072a:	60a9      	str	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
  42072c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  420730:	f363 0202 	bfi	r2, r3, #0, #3
  420734:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  420736:	2219      	movs	r2, #25
  420738:	81aa      	strh	r2, [r5, #12]
    ext->offset.x = 0;
  42073a:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
  42073c:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
  42073e:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
  420740:	7cea      	ldrb	r2, [r5, #19]
  420742:	f363 0200 	bfi	r2, r3, #0, #1
  420746:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
  420748:	4952      	ldr	r1, [pc, #328]	; (420894 <lv_label_create+0x1d4>)
  42074a:	4620      	mov	r0, r4
  42074c:	4b52      	ldr	r3, [pc, #328]	; (420898 <lv_label_create+0x1d8>)
  42074e:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
  420750:	4952      	ldr	r1, [pc, #328]	; (42089c <lv_label_create+0x1dc>)
  420752:	4620      	mov	r0, r4
  420754:	4b52      	ldr	r3, [pc, #328]	; (4208a0 <lv_label_create+0x1e0>)
  420756:	4798      	blx	r3
    if(copy == NULL) {
  420758:	2f00      	cmp	r7, #0
  42075a:	d04a      	beq.n	4207f2 <lv_label_create+0x132>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  42075c:	4638      	mov	r0, r7
  42075e:	4b49      	ldr	r3, [pc, #292]	; (420884 <lv_label_create+0x1c4>)
  420760:	4798      	blx	r3
  420762:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
  420764:	4638      	mov	r0, r7
  420766:	4b4f      	ldr	r3, [pc, #316]	; (4208a4 <lv_label_create+0x1e4>)
  420768:	4798      	blx	r3
  42076a:	4601      	mov	r1, r0
  42076c:	4620      	mov	r0, r4
  42076e:	4b4e      	ldr	r3, [pc, #312]	; (4208a8 <lv_label_create+0x1e8>)
  420770:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
  420772:	4638      	mov	r0, r7
  420774:	4b4d      	ldr	r3, [pc, #308]	; (4208ac <lv_label_create+0x1ec>)
  420776:	4798      	blx	r3
  420778:	4601      	mov	r1, r0
  42077a:	4620      	mov	r0, r4
  42077c:	4b4c      	ldr	r3, [pc, #304]	; (4208b0 <lv_label_create+0x1f0>)
  42077e:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
  420780:	4638      	mov	r0, r7
  420782:	4b4c      	ldr	r3, [pc, #304]	; (4208b4 <lv_label_create+0x1f4>)
  420784:	4798      	blx	r3
  420786:	4601      	mov	r1, r0
  420788:	4620      	mov	r0, r4
  42078a:	4b4b      	ldr	r3, [pc, #300]	; (4208b8 <lv_label_create+0x1f8>)
  42078c:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
  42078e:	7cb3      	ldrb	r3, [r6, #18]
  420790:	f013 0f08 	tst.w	r3, #8
  420794:	d13e      	bne.n	420814 <lv_label_create+0x154>
            lv_label_set_text(new_label, lv_label_get_text(copy));
  420796:	4638      	mov	r0, r7
  420798:	4b48      	ldr	r3, [pc, #288]	; (4208bc <lv_label_create+0x1fc>)
  42079a:	4798      	blx	r3
  42079c:	4601      	mov	r1, r0
  42079e:	4620      	mov	r0, r4
  4207a0:	4b47      	ldr	r3, [pc, #284]	; (4208c0 <lv_label_create+0x200>)
  4207a2:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
  4207a4:	7cb3      	ldrb	r3, [r6, #18]
  4207a6:	f003 0307 	and.w	r3, r3, #7
  4207aa:	2b02      	cmp	r3, #2
  4207ac:	d03a      	beq.n	420824 <lv_label_create+0x164>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
  4207ae:	7cf3      	ldrb	r3, [r6, #19]
  4207b0:	f013 0f01 	tst.w	r3, #1
  4207b4:	d055      	beq.n	420862 <lv_label_create+0x1a2>
  4207b6:	6870      	ldr	r0, [r6, #4]
  4207b8:	2800      	cmp	r0, #0
  4207ba:	d052      	beq.n	420862 <lv_label_create+0x1a2>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
  4207bc:	4b41      	ldr	r3, [pc, #260]	; (4208c4 <lv_label_create+0x204>)
  4207be:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
  4207c0:	4602      	mov	r2, r0
  4207c2:	6869      	ldr	r1, [r5, #4]
  4207c4:	4620      	mov	r0, r4
  4207c6:	4b40      	ldr	r3, [pc, #256]	; (4208c8 <lv_label_create+0x208>)
  4207c8:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
  4207ca:	7cf2      	ldrb	r2, [r6, #19]
  4207cc:	7ceb      	ldrb	r3, [r5, #19]
  4207ce:	f362 0300 	bfi	r3, r2, #0, #1
  4207d2:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
  4207d4:	68b3      	ldr	r3, [r6, #8]
  4207d6:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4207d8:	22ff      	movs	r2, #255	; 0xff
  4207da:	4611      	mov	r1, r2
  4207dc:	4620      	mov	r0, r4
  4207de:	4b3b      	ldr	r3, [pc, #236]	; (4208cc <lv_label_create+0x20c>)
  4207e0:	4798      	blx	r3
}
  4207e2:	4620      	mov	r0, r4
  4207e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
  4207e8:	4620      	mov	r0, r4
  4207ea:	4b39      	ldr	r3, [pc, #228]	; (4208d0 <lv_label_create+0x210>)
  4207ec:	4798      	blx	r3
        return NULL;
  4207ee:	2400      	movs	r4, #0
  4207f0:	e7f7      	b.n	4207e2 <lv_label_create+0x122>
        lv_theme_apply(new_label, LV_THEME_LABEL);
  4207f2:	2112      	movs	r1, #18
  4207f4:	4620      	mov	r0, r4
  4207f6:	4b37      	ldr	r3, [pc, #220]	; (4208d4 <lv_label_create+0x214>)
  4207f8:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
  4207fa:	2100      	movs	r1, #0
  4207fc:	4620      	mov	r0, r4
  4207fe:	4b36      	ldr	r3, [pc, #216]	; (4208d8 <lv_label_create+0x218>)
  420800:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
  420802:	2100      	movs	r1, #0
  420804:	4620      	mov	r0, r4
  420806:	4b28      	ldr	r3, [pc, #160]	; (4208a8 <lv_label_create+0x1e8>)
  420808:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
  42080a:	4934      	ldr	r1, [pc, #208]	; (4208dc <lv_label_create+0x21c>)
  42080c:	4620      	mov	r0, r4
  42080e:	4b2c      	ldr	r3, [pc, #176]	; (4208c0 <lv_label_create+0x200>)
  420810:	4798      	blx	r3
  420812:	e7e6      	b.n	4207e2 <lv_label_create+0x122>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
  420814:	4638      	mov	r0, r7
  420816:	4b29      	ldr	r3, [pc, #164]	; (4208bc <lv_label_create+0x1fc>)
  420818:	4798      	blx	r3
  42081a:	4601      	mov	r1, r0
  42081c:	4620      	mov	r0, r4
  42081e:	4b30      	ldr	r3, [pc, #192]	; (4208e0 <lv_label_create+0x220>)
  420820:	4798      	blx	r3
  420822:	e7bf      	b.n	4207a4 <lv_label_create+0xe4>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
  420824:	682f      	ldr	r7, [r5, #0]
  420826:	6830      	ldr	r0, [r6, #0]
  420828:	4b2e      	ldr	r3, [pc, #184]	; (4208e4 <lv_label_create+0x224>)
  42082a:	4798      	blx	r3
  42082c:	4601      	mov	r1, r0
  42082e:	4638      	mov	r0, r7
  420830:	4b2d      	ldr	r3, [pc, #180]	; (4208e8 <lv_label_create+0x228>)
  420832:	4798      	blx	r3
  420834:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
  420836:	4b10      	ldr	r3, [pc, #64]	; (420878 <lv_label_create+0x1b8>)
  420838:	4798      	blx	r3
  42083a:	b928      	cbnz	r0, 420848 <lv_label_create+0x188>
  42083c:	682a      	ldr	r2, [r5, #0]
  42083e:	2300      	movs	r3, #0
  420840:	4811      	ldr	r0, [pc, #68]	; (420888 <lv_label_create+0x1c8>)
  420842:	4912      	ldr	r1, [pc, #72]	; (42088c <lv_label_create+0x1cc>)
  420844:	4788      	blx	r1
  420846:	e7fe      	b.n	420846 <lv_label_create+0x186>
            if(ext->text == NULL) return NULL;
  420848:	682f      	ldr	r7, [r5, #0]
  42084a:	b187      	cbz	r7, 42086e <lv_label_create+0x1ae>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
  42084c:	f8d6 8000 	ldr.w	r8, [r6]
  420850:	4640      	mov	r0, r8
  420852:	4b24      	ldr	r3, [pc, #144]	; (4208e4 <lv_label_create+0x224>)
  420854:	4798      	blx	r3
  420856:	4602      	mov	r2, r0
  420858:	4641      	mov	r1, r8
  42085a:	4638      	mov	r0, r7
  42085c:	4b23      	ldr	r3, [pc, #140]	; (4208ec <lv_label_create+0x22c>)
  42085e:	4798      	blx	r3
  420860:	e7a5      	b.n	4207ae <lv_label_create+0xee>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
  420862:	2204      	movs	r2, #4
  420864:	18b1      	adds	r1, r6, r2
  420866:	18a8      	adds	r0, r5, r2
  420868:	4b20      	ldr	r3, [pc, #128]	; (4208ec <lv_label_create+0x22c>)
  42086a:	4798      	blx	r3
  42086c:	e7ad      	b.n	4207ca <lv_label_create+0x10a>
            if(ext->text == NULL) return NULL;
  42086e:	2400      	movs	r4, #0
  420870:	e7b7      	b.n	4207e2 <lv_label_create+0x122>
  420872:	bf00      	nop
  420874:	00406625 	.word	0x00406625
  420878:	00415a81 	.word	0x00415a81
  42087c:	204147ec 	.word	0x204147ec
  420880:	00405751 	.word	0x00405751
  420884:	00407e25 	.word	0x00407e25
  420888:	00428c94 	.word	0x00428c94
  42088c:	00415a8d 	.word	0x00415a8d
  420890:	00407dd5 	.word	0x00407dd5
  420894:	0041fad1 	.word	0x0041fad1
  420898:	00405729 	.word	0x00405729
  42089c:	004202c5 	.word	0x004202c5
  4208a0:	004056ed 	.word	0x004056ed
  4208a4:	0041f74d 	.word	0x0041f74d
  4208a8:	004205b9 	.word	0x004205b9
  4208ac:	0041f7bd 	.word	0x0041f7bd
  4208b0:	0042066d 	.word	0x0042066d
  4208b4:	0041f781 	.word	0x0041f781
  4208b8:	0041f6d1 	.word	0x0041f6d1
  4208bc:	0041f71d 	.word	0x0041f71d
  4208c0:	004203bd 	.word	0x004203bd
  4208c4:	00423b81 	.word	0x00423b81
  4208c8:	0041f631 	.word	0x0041f631
  4208cc:	00407671 	.word	0x00407671
  4208d0:	00407f85 	.word	0x00407f85
  4208d4:	00417ec5 	.word	0x00417ec5
  4208d8:	0040552d 	.word	0x0040552d
  4208dc:	0042c3d4 	.word	0x0042c3d4
  4208e0:	00420559 	.word	0x00420559
  4208e4:	004162c1 	.word	0x004162c1
  4208e8:	004164b9 	.word	0x004164b9
  4208ec:	00416399 	.word	0x00416399

004208f0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4208f0:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4208f2:	4810      	ldr	r0, [pc, #64]	; (420934 <sysclk_init+0x44>)
  4208f4:	4b10      	ldr	r3, [pc, #64]	; (420938 <sysclk_init+0x48>)
  4208f6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4208f8:	213e      	movs	r1, #62	; 0x3e
  4208fa:	2000      	movs	r0, #0
  4208fc:	4b0f      	ldr	r3, [pc, #60]	; (42093c <sysclk_init+0x4c>)
  4208fe:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  420900:	4b0f      	ldr	r3, [pc, #60]	; (420940 <sysclk_init+0x50>)
  420902:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  420904:	2800      	cmp	r0, #0
  420906:	d0fb      	beq.n	420900 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  420908:	4b0e      	ldr	r3, [pc, #56]	; (420944 <sysclk_init+0x54>)
  42090a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  42090c:	4a0e      	ldr	r2, [pc, #56]	; (420948 <sysclk_init+0x58>)
  42090e:	4b0f      	ldr	r3, [pc, #60]	; (42094c <sysclk_init+0x5c>)
  420910:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  420912:	4b0f      	ldr	r3, [pc, #60]	; (420950 <sysclk_init+0x60>)
  420914:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  420916:	2800      	cmp	r0, #0
  420918:	d0fb      	beq.n	420912 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  42091a:	2002      	movs	r0, #2
  42091c:	4b0d      	ldr	r3, [pc, #52]	; (420954 <sysclk_init+0x64>)
  42091e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  420920:	2000      	movs	r0, #0
  420922:	4b0d      	ldr	r3, [pc, #52]	; (420958 <sysclk_init+0x68>)
  420924:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  420926:	4b0d      	ldr	r3, [pc, #52]	; (42095c <sysclk_init+0x6c>)
  420928:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  42092a:	480d      	ldr	r0, [pc, #52]	; (420960 <sysclk_init+0x70>)
  42092c:	4b02      	ldr	r3, [pc, #8]	; (420938 <sysclk_init+0x48>)
  42092e:	4798      	blx	r3
  420930:	bd08      	pop	{r3, pc}
  420932:	bf00      	nop
  420934:	07270e00 	.word	0x07270e00
  420938:	00421729 	.word	0x00421729
  42093c:	004211e9 	.word	0x004211e9
  420940:	0042123d 	.word	0x0042123d
  420944:	0042124d 	.word	0x0042124d
  420948:	20183f01 	.word	0x20183f01
  42094c:	400e0600 	.word	0x400e0600
  420950:	0042125d 	.word	0x0042125d
  420954:	00421159 	.word	0x00421159
  420958:	00421195 	.word	0x00421195
  42095c:	00421619 	.word	0x00421619
  420960:	11e1a300 	.word	0x11e1a300

00420964 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  420964:	b510      	push	{r4, lr}
  420966:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  420968:	4b10      	ldr	r3, [pc, #64]	; (4209ac <spi_master_init+0x48>)
  42096a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  42096c:	2380      	movs	r3, #128	; 0x80
  42096e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  420970:	6863      	ldr	r3, [r4, #4]
  420972:	f043 0301 	orr.w	r3, r3, #1
  420976:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  420978:	6863      	ldr	r3, [r4, #4]
  42097a:	f043 0310 	orr.w	r3, r3, #16
  42097e:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  420980:	6863      	ldr	r3, [r4, #4]
  420982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  420986:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  420988:	2100      	movs	r1, #0
  42098a:	4620      	mov	r0, r4
  42098c:	4b08      	ldr	r3, [pc, #32]	; (4209b0 <spi_master_init+0x4c>)
  42098e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  420990:	6863      	ldr	r3, [r4, #4]
  420992:	f023 0302 	bic.w	r3, r3, #2
  420996:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  420998:	6863      	ldr	r3, [r4, #4]
  42099a:	f023 0304 	bic.w	r3, r3, #4
  42099e:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4209a0:	2100      	movs	r1, #0
  4209a2:	4620      	mov	r0, r4
  4209a4:	4b03      	ldr	r3, [pc, #12]	; (4209b4 <spi_master_init+0x50>)
  4209a6:	4798      	blx	r3
  4209a8:	bd10      	pop	{r4, pc}
  4209aa:	bf00      	nop
  4209ac:	0042128d 	.word	0x0042128d
  4209b0:	004212b9 	.word	0x004212b9
  4209b4:	004212cf 	.word	0x004212cf

004209b8 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4209b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4209bc:	4604      	mov	r4, r0
  4209be:	460d      	mov	r5, r1
  4209c0:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4209c2:	4915      	ldr	r1, [pc, #84]	; (420a18 <spi_master_setup_device+0x60>)
  4209c4:	4618      	mov	r0, r3
  4209c6:	4b15      	ldr	r3, [pc, #84]	; (420a1c <spi_master_setup_device+0x64>)
  4209c8:	4798      	blx	r3
  4209ca:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  4209cc:	2300      	movs	r3, #0
  4209ce:	461a      	mov	r2, r3
  4209d0:	6829      	ldr	r1, [r5, #0]
  4209d2:	4620      	mov	r0, r4
  4209d4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 420a34 <spi_master_setup_device+0x7c>
  4209d8:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  4209da:	2208      	movs	r2, #8
  4209dc:	6829      	ldr	r1, [r5, #0]
  4209de:	4620      	mov	r0, r4
  4209e0:	4b0f      	ldr	r3, [pc, #60]	; (420a20 <spi_master_setup_device+0x68>)
  4209e2:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  4209e4:	b2fa      	uxtb	r2, r7
  4209e6:	6829      	ldr	r1, [r5, #0]
  4209e8:	4620      	mov	r0, r4
  4209ea:	4b0e      	ldr	r3, [pc, #56]	; (420a24 <spi_master_setup_device+0x6c>)
  4209ec:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  4209ee:	2208      	movs	r2, #8
  4209f0:	6829      	ldr	r1, [r5, #0]
  4209f2:	4620      	mov	r0, r4
  4209f4:	4b0c      	ldr	r3, [pc, #48]	; (420a28 <spi_master_setup_device+0x70>)
  4209f6:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  4209f8:	0872      	lsrs	r2, r6, #1
  4209fa:	6829      	ldr	r1, [r5, #0]
  4209fc:	4620      	mov	r0, r4
  4209fe:	4b0b      	ldr	r3, [pc, #44]	; (420a2c <spi_master_setup_device+0x74>)
  420a00:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  420a02:	f086 0201 	eor.w	r2, r6, #1
  420a06:	f002 0201 	and.w	r2, r2, #1
  420a0a:	6829      	ldr	r1, [r5, #0]
  420a0c:	4620      	mov	r0, r4
  420a0e:	4b08      	ldr	r3, [pc, #32]	; (420a30 <spi_master_setup_device+0x78>)
  420a10:	4798      	blx	r3
  420a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  420a16:	bf00      	nop
  420a18:	08f0d180 	.word	0x08f0d180
  420a1c:	00421393 	.word	0x00421393
  420a20:	00421379 	.word	0x00421379
  420a24:	004213ab 	.word	0x004213ab
  420a28:	00421325 	.word	0x00421325
  420a2c:	004212e1 	.word	0x004212e1
  420a30:	00421303 	.word	0x00421303
  420a34:	004213d9 	.word	0x004213d9

00420a38 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  420a38:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  420a3a:	6843      	ldr	r3, [r0, #4]
  420a3c:	f013 0f04 	tst.w	r3, #4
  420a40:	d005      	beq.n	420a4e <spi_select_device+0x16>
		return 1;
  420a42:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  420a44:	b143      	cbz	r3, 420a58 <spi_select_device+0x20>
		if (device->id < MAX_NUM_WITH_DECODER) {
  420a46:	6809      	ldr	r1, [r1, #0]
  420a48:	290f      	cmp	r1, #15
  420a4a:	d902      	bls.n	420a52 <spi_select_device+0x1a>
  420a4c:	bd08      	pop	{r3, pc}
		return 0;
  420a4e:	2300      	movs	r3, #0
  420a50:	e7f8      	b.n	420a44 <spi_select_device+0xc>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  420a52:	4b06      	ldr	r3, [pc, #24]	; (420a6c <spi_select_device+0x34>)
  420a54:	4798      	blx	r3
  420a56:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  420a58:	6809      	ldr	r1, [r1, #0]
  420a5a:	2903      	cmp	r1, #3
  420a5c:	d8f6      	bhi.n	420a4c <spi_select_device+0x14>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  420a5e:	2301      	movs	r3, #1
  420a60:	fa03 f101 	lsl.w	r1, r3, r1
  420a64:	43c9      	mvns	r1, r1
  420a66:	4b01      	ldr	r3, [pc, #4]	; (420a6c <spi_select_device+0x34>)
  420a68:	4798      	blx	r3
		}
	}
}
  420a6a:	e7ef      	b.n	420a4c <spi_select_device+0x14>
  420a6c:	004212b9 	.word	0x004212b9

00420a70 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  420a70:	b570      	push	{r4, r5, r6, lr}
  420a72:	460d      	mov	r5, r1
  420a74:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
  420a76:	4606      	mov	r6, r0
  420a78:	b158      	cbz	r0, 420a92 <_read+0x22>
		return -1;
  420a7a:	f04f 36ff 	mov.w	r6, #4294967295
  420a7e:	e00a      	b.n	420a96 <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  420a80:	4b06      	ldr	r3, [pc, #24]	; (420a9c <_read+0x2c>)
  420a82:	6818      	ldr	r0, [r3, #0]
  420a84:	4b06      	ldr	r3, [pc, #24]	; (420aa0 <_read+0x30>)
  420a86:	681b      	ldr	r3, [r3, #0]
  420a88:	4629      	mov	r1, r5
  420a8a:	4798      	blx	r3
		ptr++;
  420a8c:	3501      	adds	r5, #1
		nChars++;
  420a8e:	3601      	adds	r6, #1
	for (; len > 0; --len) {
  420a90:	3c01      	subs	r4, #1
  420a92:	2c00      	cmp	r4, #0
  420a94:	dcf4      	bgt.n	420a80 <_read+0x10>
	}
	return nChars;
}
  420a96:	4630      	mov	r0, r6
  420a98:	bd70      	pop	{r4, r5, r6, pc}
  420a9a:	bf00      	nop
  420a9c:	2043a334 	.word	0x2043a334
  420aa0:	2043a32c 	.word	0x2043a32c

00420aa4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  420aa4:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  420aa6:	3801      	subs	r0, #1
  420aa8:	2802      	cmp	r0, #2
  420aaa:	d80f      	bhi.n	420acc <_write+0x28>
  420aac:	4614      	mov	r4, r2
  420aae:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
  420ab0:	b18c      	cbz	r4, 420ad6 <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  420ab2:	4b0a      	ldr	r3, [pc, #40]	; (420adc <_write+0x38>)
  420ab4:	6818      	ldr	r0, [r3, #0]
  420ab6:	1c4e      	adds	r6, r1, #1
  420ab8:	4b09      	ldr	r3, [pc, #36]	; (420ae0 <_write+0x3c>)
  420aba:	681b      	ldr	r3, [r3, #0]
  420abc:	7809      	ldrb	r1, [r1, #0]
  420abe:	4798      	blx	r3
  420ac0:	2800      	cmp	r0, #0
  420ac2:	db06      	blt.n	420ad2 <_write+0x2e>
			return -1;
		}
		++nChars;
  420ac4:	3501      	adds	r5, #1
	for (; len != 0; --len) {
  420ac6:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  420ac8:	4631      	mov	r1, r6
  420aca:	e7f1      	b.n	420ab0 <_write+0xc>
		return -1;
  420acc:	f04f 35ff 	mov.w	r5, #4294967295
  420ad0:	e001      	b.n	420ad6 <_write+0x32>
			return -1;
  420ad2:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
  420ad6:	4628      	mov	r0, r5
  420ad8:	bd70      	pop	{r4, r5, r6, pc}
  420ada:	bf00      	nop
  420adc:	2043a334 	.word	0x2043a334
  420ae0:	2043a330 	.word	0x2043a330

00420ae4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  420ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  420ae8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  420aec:	4b9a      	ldr	r3, [pc, #616]	; (420d58 <board_init+0x274>)
  420aee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  420af0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420af4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  420af8:	4b98      	ldr	r3, [pc, #608]	; (420d5c <board_init+0x278>)
  420afa:	2200      	movs	r2, #0
  420afc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  420b00:	695a      	ldr	r2, [r3, #20]
  420b02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  420b06:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  420b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420b0c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  420b10:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  420b14:	f3c6 304e 	ubfx	r0, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  420b18:	f006 0507 	and.w	r5, r6, #7
  420b1c:	3504      	adds	r5, #4
    ways    = CCSIDR_WAYS(ccsidr);
  420b1e:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  420b22:	fab6 f486 	clz	r4, r6
    wshift  = __CLZ(ways) & 0x1f;
  420b26:	f004 041f 	and.w	r4, r4, #31
  __ASM volatile ("dsb");
  420b2a:	f3bf 8f4f 	dsb	sy
  420b2e:	e00e      	b.n	420b4e <board_init+0x6a>
    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
            } while(tmpways--);
  420b30:	4613      	mov	r3, r2
              sw = ((tmpways << wshift) | (sets << sshift));
  420b32:	fa03 f204 	lsl.w	r2, r3, r4
  420b36:	fa00 f105 	lsl.w	r1, r0, r5
  420b3a:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  420b3c:	4987      	ldr	r1, [pc, #540]	; (420d5c <board_init+0x278>)
  420b3e:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
            } while(tmpways--);
  420b42:	1e5a      	subs	r2, r3, #1
  420b44:	2b00      	cmp	r3, #0
  420b46:	d1f3      	bne.n	420b30 <board_init+0x4c>
        } while(sets--);
  420b48:	1e43      	subs	r3, r0, #1
  420b4a:	b110      	cbz	r0, 420b52 <board_init+0x6e>
  420b4c:	4618      	mov	r0, r3
         int32_t tmpways = ways;
  420b4e:	4633      	mov	r3, r6
  420b50:	e7ef      	b.n	420b32 <board_init+0x4e>
  420b52:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  420b56:	460b      	mov	r3, r1
  420b58:	694a      	ldr	r2, [r1, #20]
  420b5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  420b5e:	614a      	str	r2, [r1, #20]
  420b60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420b64:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  420b68:	4a7d      	ldr	r2, [pc, #500]	; (420d60 <board_init+0x27c>)
  420b6a:	497e      	ldr	r1, [pc, #504]	; (420d64 <board_init+0x280>)
  420b6c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  420b6e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  420b72:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  420b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420b78:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  420b7c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  420b80:	f022 0201 	bic.w	r2, r2, #1
  420b84:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  420b88:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  420b8c:	f022 0201 	bic.w	r2, r2, #1
  420b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  420b94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  420b98:	f3bf 8f6f 	isb	sy
  420b9c:	200a      	movs	r0, #10
  420b9e:	4c72      	ldr	r4, [pc, #456]	; (420d68 <board_init+0x284>)
  420ba0:	47a0      	blx	r4
  420ba2:	200b      	movs	r0, #11
  420ba4:	47a0      	blx	r4
  420ba6:	200c      	movs	r0, #12
  420ba8:	47a0      	blx	r4
  420baa:	2010      	movs	r0, #16
  420bac:	47a0      	blx	r4
  420bae:	2011      	movs	r0, #17
  420bb0:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  420bb2:	4e6e      	ldr	r6, [pc, #440]	; (420d6c <board_init+0x288>)
  420bb4:	f44f 7880 	mov.w	r8, #256	; 0x100
  420bb8:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  420bbc:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  420bc0:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  420bc4:	4c6a      	ldr	r4, [pc, #424]	; (420d70 <board_init+0x28c>)
  420bc6:	f44f 6500 	mov.w	r5, #2048	; 0x800
  420bca:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  420bcc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  420bd0:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  420bd2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420bd6:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  420bd8:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  420bda:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  420bde:	6f23      	ldr	r3, [r4, #112]	; 0x70
  420be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  420be4:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420be6:	6f63      	ldr	r3, [r4, #116]	; 0x74
  420be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  420bec:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  420bee:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  420bf2:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  420bf6:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  420bfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  420bfe:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420c00:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420c04:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  420c06:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420c08:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  420c0c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  420c0e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  420c12:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420c14:	6f62      	ldr	r2, [r4, #116]	; 0x74
  420c16:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  420c1a:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420c1c:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  420c1e:	4a55      	ldr	r2, [pc, #340]	; (420d74 <board_init+0x290>)
  420c20:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  420c24:	f043 0310 	orr.w	r3, r3, #16
  420c28:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  420c2c:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  420c30:	2310      	movs	r3, #16
  420c32:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  420c38:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  420c3a:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  420c40:	6f11      	ldr	r1, [r2, #112]	; 0x70
  420c42:	4319      	orrs	r1, r3
  420c44:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  420c46:	6f51      	ldr	r1, [r2, #116]	; 0x74
  420c48:	4319      	orrs	r1, r3
  420c4a:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420c4c:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  420c4e:	2208      	movs	r2, #8
  420c50:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420c52:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420c56:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  420c58:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420c5a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  420c5e:	6f21      	ldr	r1, [r4, #112]	; 0x70
  420c60:	f021 0108 	bic.w	r1, r1, #8
  420c64:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420c66:	6f61      	ldr	r1, [r4, #116]	; 0x74
  420c68:	f021 0108 	bic.w	r1, r1, #8
  420c6c:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420c6e:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  420c70:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  420c72:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  420c76:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  420c78:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  420c7a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  420c7e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  420c80:	f022 0210 	bic.w	r2, r2, #16
  420c84:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  420c86:	6f62      	ldr	r2, [r4, #116]	; 0x74
  420c88:	f022 0210 	bic.w	r2, r2, #16
  420c8c:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  420c8e:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  420c90:	2300      	movs	r3, #0
  420c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  420c96:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420c9a:	4630      	mov	r0, r6
  420c9c:	4f36      	ldr	r7, [pc, #216]	; (420d78 <board_init+0x294>)
  420c9e:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  420ca0:	2300      	movs	r3, #0
  420ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  420ca6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420caa:	4630      	mov	r0, r6
  420cac:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  420cae:	2301      	movs	r3, #1
  420cb0:	22ff      	movs	r2, #255	; 0xff
  420cb2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420cb6:	4630      	mov	r0, r6
  420cb8:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  420cba:	2301      	movs	r3, #1
  420cbc:	223f      	movs	r2, #63	; 0x3f
  420cbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420cc2:	482e      	ldr	r0, [pc, #184]	; (420d7c <board_init+0x298>)
  420cc4:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  420cc6:	2301      	movs	r3, #1
  420cc8:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  420ccc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420cd0:	4620      	mov	r0, r4
  420cd2:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  420cd4:	2301      	movs	r3, #1
  420cd6:	4642      	mov	r2, r8
  420cd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420cdc:	4630      	mov	r0, r6
  420cde:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  420ce0:	2301      	movs	r3, #1
  420ce2:	462a      	mov	r2, r5
  420ce4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420ce8:	4630      	mov	r0, r6
  420cea:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  420cec:	2301      	movs	r3, #1
  420cee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  420cf2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420cf6:	4822      	ldr	r0, [pc, #136]	; (420d80 <board_init+0x29c>)
  420cf8:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  420cfa:	2300      	movs	r3, #0
  420cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
  420d00:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d04:	4630      	mov	r0, r6
  420d06:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  420d08:	f44f 7100 	mov.w	r1, #512	; 0x200
  420d0c:	4630      	mov	r0, r6
  420d0e:	4b1d      	ldr	r3, [pc, #116]	; (420d84 <board_init+0x2a0>)
  420d10:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  420d12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d16:	2074      	movs	r0, #116	; 0x74
  420d18:	4c1b      	ldr	r4, [pc, #108]	; (420d88 <board_init+0x2a4>)
  420d1a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  420d1c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d20:	2075      	movs	r0, #117	; 0x75
  420d22:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  420d24:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d28:	2076      	movs	r0, #118	; 0x76
  420d2a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  420d2c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d30:	207b      	movs	r0, #123	; 0x7b
  420d32:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  420d34:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420d38:	2018      	movs	r0, #24
  420d3a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  420d3c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420d40:	2006      	movs	r0, #6
  420d42:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  420d44:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420d48:	2053      	movs	r0, #83	; 0x53
  420d4a:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  420d4c:	2053      	movs	r0, #83	; 0x53
  420d4e:	4b0f      	ldr	r3, [pc, #60]	; (420d8c <board_init+0x2a8>)
  420d50:	4798      	blx	r3
  420d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  420d56:	bf00      	nop
  420d58:	400e1850 	.word	0x400e1850
  420d5c:	e000ed00 	.word	0xe000ed00
  420d60:	400e0c00 	.word	0x400e0c00
  420d64:	5a00080c 	.word	0x5a00080c
  420d68:	0042126d 	.word	0x0042126d
  420d6c:	400e1200 	.word	0x400e1200
  420d70:	400e0e00 	.word	0x400e0e00
  420d74:	40088000 	.word	0x40088000
  420d78:	00420eb5 	.word	0x00420eb5
  420d7c:	400e1600 	.word	0x400e1600
  420d80:	400e1400 	.word	0x400e1400
  420d84:	00420d9b 	.word	0x00420d9b
  420d88:	00420f75 	.word	0x00420f75
  420d8c:	00420f5d 	.word	0x00420f5d

00420d90 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  420d90:	b90a      	cbnz	r2, 420d96 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  420d92:	6601      	str	r1, [r0, #96]	; 0x60
  420d94:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  420d96:	6641      	str	r1, [r0, #100]	; 0x64
  420d98:	4770      	bx	lr

00420d9a <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  420d9a:	6301      	str	r1, [r0, #48]	; 0x30
  420d9c:	4770      	bx	lr

00420d9e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  420d9e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  420da0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  420da4:	d039      	beq.n	420e1a <pio_set_peripheral+0x7c>
  420da6:	d813      	bhi.n	420dd0 <pio_set_peripheral+0x32>
  420da8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  420dac:	d025      	beq.n	420dfa <pio_set_peripheral+0x5c>
  420dae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  420db2:	d10a      	bne.n	420dca <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  420db4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  420db6:	4313      	orrs	r3, r2
  420db8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  420dba:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  420dbc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  420dbe:	ea21 0102 	bic.w	r1, r1, r2
  420dc2:	400b      	ands	r3, r1
  420dc4:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  420dc6:	6042      	str	r2, [r0, #4]
  420dc8:	4770      	bx	lr
	switch (ul_type) {
  420dca:	2900      	cmp	r1, #0
  420dcc:	d1fb      	bne.n	420dc6 <pio_set_peripheral+0x28>
  420dce:	4770      	bx	lr
  420dd0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  420dd4:	d020      	beq.n	420e18 <pio_set_peripheral+0x7a>
  420dd6:	d809      	bhi.n	420dec <pio_set_peripheral+0x4e>
  420dd8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  420ddc:	d1f3      	bne.n	420dc6 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  420dde:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  420de0:	4313      	orrs	r3, r2
  420de2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  420de4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  420de6:	4313      	orrs	r3, r2
  420de8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  420dea:	e7ec      	b.n	420dc6 <pio_set_peripheral+0x28>
	switch (ul_type) {
  420dec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  420df0:	d012      	beq.n	420e18 <pio_set_peripheral+0x7a>
  420df2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  420df6:	d00f      	beq.n	420e18 <pio_set_peripheral+0x7a>
  420df8:	e7e5      	b.n	420dc6 <pio_set_peripheral+0x28>
{
  420dfa:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  420dfc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  420dfe:	6f01      	ldr	r1, [r0, #112]	; 0x70
  420e00:	43d3      	mvns	r3, r2
  420e02:	401c      	ands	r4, r3
  420e04:	4021      	ands	r1, r4
  420e06:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  420e08:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  420e0a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  420e0c:	4023      	ands	r3, r4
  420e0e:	400b      	ands	r3, r1
  420e10:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  420e12:	6042      	str	r2, [r0, #4]
}
  420e14:	f85d 4b04 	ldr.w	r4, [sp], #4
  420e18:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  420e1a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  420e1c:	6f03      	ldr	r3, [r0, #112]	; 0x70
  420e1e:	ea21 0102 	bic.w	r1, r1, r2
  420e22:	400b      	ands	r3, r1
  420e24:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  420e26:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  420e28:	4313      	orrs	r3, r2
  420e2a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  420e2c:	e7cb      	b.n	420dc6 <pio_set_peripheral+0x28>

00420e2e <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  420e2e:	6441      	str	r1, [r0, #68]	; 0x44
  420e30:	4770      	bx	lr
	...

00420e34 <pio_set_input>:
{
  420e34:	b570      	push	{r4, r5, r6, lr}
  420e36:	4604      	mov	r4, r0
  420e38:	460d      	mov	r5, r1
  420e3a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  420e3c:	4b0d      	ldr	r3, [pc, #52]	; (420e74 <pio_set_input+0x40>)
  420e3e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  420e40:	f006 0201 	and.w	r2, r6, #1
  420e44:	4629      	mov	r1, r5
  420e46:	4620      	mov	r0, r4
  420e48:	4b0b      	ldr	r3, [pc, #44]	; (420e78 <pio_set_input+0x44>)
  420e4a:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  420e4c:	f016 0f0a 	tst.w	r6, #10
  420e50:	d009      	beq.n	420e66 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
  420e52:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  420e54:	f016 0f02 	tst.w	r6, #2
  420e58:	d107      	bne.n	420e6a <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  420e5a:	f016 0f08 	tst.w	r6, #8
  420e5e:	d006      	beq.n	420e6e <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  420e60:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  420e64:	e003      	b.n	420e6e <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
  420e66:	6265      	str	r5, [r4, #36]	; 0x24
  420e68:	e7f4      	b.n	420e54 <pio_set_input+0x20>
		p_pio->PIO_IFSCDR = ul_mask;
  420e6a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  420e6e:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  420e70:	6025      	str	r5, [r4, #0]
  420e72:	bd70      	pop	{r4, r5, r6, pc}
  420e74:	00420e2f 	.word	0x00420e2f
  420e78:	00420d91 	.word	0x00420d91

00420e7c <pio_set_output>:
{
  420e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420e7e:	4604      	mov	r4, r0
  420e80:	460d      	mov	r5, r1
  420e82:	4616      	mov	r6, r2
  420e84:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  420e86:	4b09      	ldr	r3, [pc, #36]	; (420eac <pio_set_output+0x30>)
  420e88:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  420e8a:	9a06      	ldr	r2, [sp, #24]
  420e8c:	4629      	mov	r1, r5
  420e8e:	4620      	mov	r0, r4
  420e90:	4b07      	ldr	r3, [pc, #28]	; (420eb0 <pio_set_output+0x34>)
  420e92:	4798      	blx	r3
	if (ul_multidrive_enable) {
  420e94:	b12f      	cbz	r7, 420ea2 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
  420e96:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
  420e98:	b92e      	cbnz	r6, 420ea6 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
  420e9a:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  420e9c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  420e9e:	6025      	str	r5, [r4, #0]
  420ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
  420ea2:	6565      	str	r5, [r4, #84]	; 0x54
  420ea4:	e7f8      	b.n	420e98 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  420ea6:	6325      	str	r5, [r4, #48]	; 0x30
  420ea8:	e7f8      	b.n	420e9c <pio_set_output+0x20>
  420eaa:	bf00      	nop
  420eac:	00420e2f 	.word	0x00420e2f
  420eb0:	00420d91 	.word	0x00420d91

00420eb4 <pio_configure>:
{
  420eb4:	b570      	push	{r4, r5, r6, lr}
  420eb6:	b082      	sub	sp, #8
  420eb8:	4604      	mov	r4, r0
  420eba:	4615      	mov	r5, r2
  420ebc:	461e      	mov	r6, r3
	switch (ul_type) {
  420ebe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  420ec2:	d014      	beq.n	420eee <pio_configure+0x3a>
  420ec4:	d90a      	bls.n	420edc <pio_configure+0x28>
  420ec6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  420eca:	d023      	beq.n	420f14 <pio_configure+0x60>
  420ecc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  420ed0:	d020      	beq.n	420f14 <pio_configure+0x60>
  420ed2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  420ed6:	d017      	beq.n	420f08 <pio_configure+0x54>
		return 0;
  420ed8:	2000      	movs	r0, #0
  420eda:	e013      	b.n	420f04 <pio_configure+0x50>
	switch (ul_type) {
  420edc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  420ee0:	d005      	beq.n	420eee <pio_configure+0x3a>
  420ee2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  420ee6:	d002      	beq.n	420eee <pio_configure+0x3a>
  420ee8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  420eec:	d1f4      	bne.n	420ed8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  420eee:	462a      	mov	r2, r5
  420ef0:	4620      	mov	r0, r4
  420ef2:	4b10      	ldr	r3, [pc, #64]	; (420f34 <pio_configure+0x80>)
  420ef4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  420ef6:	f006 0201 	and.w	r2, r6, #1
  420efa:	4629      	mov	r1, r5
  420efc:	4620      	mov	r0, r4
  420efe:	4b0e      	ldr	r3, [pc, #56]	; (420f38 <pio_configure+0x84>)
  420f00:	4798      	blx	r3
	return 1;
  420f02:	2001      	movs	r0, #1
}
  420f04:	b002      	add	sp, #8
  420f06:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  420f08:	461a      	mov	r2, r3
  420f0a:	4629      	mov	r1, r5
  420f0c:	4b0b      	ldr	r3, [pc, #44]	; (420f3c <pio_configure+0x88>)
  420f0e:	4798      	blx	r3
	return 1;
  420f10:	2001      	movs	r0, #1
		break;
  420f12:	e7f7      	b.n	420f04 <pio_configure+0x50>
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  420f14:	f006 0301 	and.w	r3, r6, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  420f18:	9300      	str	r3, [sp, #0]
  420f1a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  420f1e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  420f22:	bf14      	ite	ne
  420f24:	2200      	movne	r2, #0
  420f26:	2201      	moveq	r2, #1
  420f28:	4629      	mov	r1, r5
  420f2a:	4620      	mov	r0, r4
  420f2c:	4c04      	ldr	r4, [pc, #16]	; (420f40 <pio_configure+0x8c>)
  420f2e:	47a0      	blx	r4
	return 1;
  420f30:	2001      	movs	r0, #1
		break;
  420f32:	e7e7      	b.n	420f04 <pio_configure+0x50>
  420f34:	00420d9f 	.word	0x00420d9f
  420f38:	00420d91 	.word	0x00420d91
  420f3c:	00420e35 	.word	0x00420e35
  420f40:	00420e7d 	.word	0x00420e7d

00420f44 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  420f44:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  420f46:	4770      	bx	lr

00420f48 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  420f48:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  420f4a:	4770      	bx	lr

00420f4c <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  420f4c:	4b02      	ldr	r3, [pc, #8]	; (420f58 <pio_get_pin_group+0xc>)
  420f4e:	eb03 1050 	add.w	r0, r3, r0, lsr #5
#endif
	return p_pio;
}
  420f52:	0240      	lsls	r0, r0, #9
  420f54:	4770      	bx	lr
  420f56:	bf00      	nop
  420f58:	00200707 	.word	0x00200707

00420f5c <pio_set_pin_high>:
{
  420f5c:	b510      	push	{r4, lr}
  420f5e:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
  420f60:	4b03      	ldr	r3, [pc, #12]	; (420f70 <pio_set_pin_high+0x14>)
  420f62:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  420f64:	f004 041f 	and.w	r4, r4, #31
  420f68:	2301      	movs	r3, #1
  420f6a:	40a3      	lsls	r3, r4
  420f6c:	6303      	str	r3, [r0, #48]	; 0x30
  420f6e:	bd10      	pop	{r4, pc}
  420f70:	00420f4d 	.word	0x00420f4d

00420f74 <pio_configure_pin>:
{
  420f74:	b5f0      	push	{r4, r5, r6, r7, lr}
  420f76:	b083      	sub	sp, #12
  420f78:	4604      	mov	r4, r0
  420f7a:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
  420f7c:	4b42      	ldr	r3, [pc, #264]	; (421088 <pio_configure_pin+0x114>)
  420f7e:	4798      	blx	r3
  420f80:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
  420f82:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  420f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  420f8a:	d055      	beq.n	421038 <pio_configure_pin+0xc4>
  420f8c:	d80a      	bhi.n	420fa4 <pio_configure_pin+0x30>
  420f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  420f92:	d02d      	beq.n	420ff0 <pio_configure_pin+0x7c>
  420f94:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  420f98:	d03c      	beq.n	421014 <pio_configure_pin+0xa0>
  420f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  420f9e:	d014      	beq.n	420fca <pio_configure_pin+0x56>
		return 0;
  420fa0:	2000      	movs	r0, #0
  420fa2:	e023      	b.n	420fec <pio_configure_pin+0x78>
	switch (ul_flags & PIO_TYPE_Msk) {
  420fa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  420fa8:	d058      	beq.n	42105c <pio_configure_pin+0xe8>
  420faa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  420fae:	d055      	beq.n	42105c <pio_configure_pin+0xe8>
  420fb0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  420fb4:	d1f4      	bne.n	420fa0 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  420fb6:	f004 011f 	and.w	r1, r4, #31
  420fba:	2401      	movs	r4, #1
  420fbc:	462a      	mov	r2, r5
  420fbe:	fa04 f101 	lsl.w	r1, r4, r1
  420fc2:	4b32      	ldr	r3, [pc, #200]	; (42108c <pio_configure_pin+0x118>)
  420fc4:	4798      	blx	r3
	return 1;
  420fc6:	4620      	mov	r0, r4
		break;
  420fc8:	e010      	b.n	420fec <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  420fca:	f004 041f 	and.w	r4, r4, #31
  420fce:	2701      	movs	r7, #1
  420fd0:	fa07 f404 	lsl.w	r4, r7, r4
  420fd4:	4622      	mov	r2, r4
  420fd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  420fda:	4b2d      	ldr	r3, [pc, #180]	; (421090 <pio_configure_pin+0x11c>)
  420fdc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  420fde:	ea05 0207 	and.w	r2, r5, r7
  420fe2:	4621      	mov	r1, r4
  420fe4:	4630      	mov	r0, r6
  420fe6:	4b2b      	ldr	r3, [pc, #172]	; (421094 <pio_configure_pin+0x120>)
  420fe8:	4798      	blx	r3
	return 1;
  420fea:	4638      	mov	r0, r7
}
  420fec:	b003      	add	sp, #12
  420fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  420ff0:	f004 041f 	and.w	r4, r4, #31
  420ff4:	2701      	movs	r7, #1
  420ff6:	fa07 f404 	lsl.w	r4, r7, r4
  420ffa:	4622      	mov	r2, r4
  420ffc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  421000:	4b23      	ldr	r3, [pc, #140]	; (421090 <pio_configure_pin+0x11c>)
  421002:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  421004:	ea05 0207 	and.w	r2, r5, r7
  421008:	4621      	mov	r1, r4
  42100a:	4630      	mov	r0, r6
  42100c:	4b21      	ldr	r3, [pc, #132]	; (421094 <pio_configure_pin+0x120>)
  42100e:	4798      	blx	r3
	return 1;
  421010:	4638      	mov	r0, r7
		break;
  421012:	e7eb      	b.n	420fec <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  421014:	f004 041f 	and.w	r4, r4, #31
  421018:	2701      	movs	r7, #1
  42101a:	fa07 f404 	lsl.w	r4, r7, r4
  42101e:	4622      	mov	r2, r4
  421020:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  421024:	4b1a      	ldr	r3, [pc, #104]	; (421090 <pio_configure_pin+0x11c>)
  421026:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  421028:	ea05 0207 	and.w	r2, r5, r7
  42102c:	4621      	mov	r1, r4
  42102e:	4630      	mov	r0, r6
  421030:	4b18      	ldr	r3, [pc, #96]	; (421094 <pio_configure_pin+0x120>)
  421032:	4798      	blx	r3
	return 1;
  421034:	4638      	mov	r0, r7
		break;
  421036:	e7d9      	b.n	420fec <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  421038:	f004 041f 	and.w	r4, r4, #31
  42103c:	2701      	movs	r7, #1
  42103e:	fa07 f404 	lsl.w	r4, r7, r4
  421042:	4622      	mov	r2, r4
  421044:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  421048:	4b11      	ldr	r3, [pc, #68]	; (421090 <pio_configure_pin+0x11c>)
  42104a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  42104c:	ea05 0207 	and.w	r2, r5, r7
  421050:	4621      	mov	r1, r4
  421052:	4630      	mov	r0, r6
  421054:	4b0f      	ldr	r3, [pc, #60]	; (421094 <pio_configure_pin+0x120>)
  421056:	4798      	blx	r3
	return 1;
  421058:	4638      	mov	r0, r7
		break;
  42105a:	e7c7      	b.n	420fec <pio_configure_pin+0x78>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  42105c:	f004 011f 	and.w	r1, r4, #31
  421060:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  421062:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  421066:	ea05 0304 	and.w	r3, r5, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  42106a:	9300      	str	r3, [sp, #0]
  42106c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  421070:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  421074:	bf14      	ite	ne
  421076:	2200      	movne	r2, #0
  421078:	2201      	moveq	r2, #1
  42107a:	fa04 f101 	lsl.w	r1, r4, r1
  42107e:	4630      	mov	r0, r6
  421080:	4d05      	ldr	r5, [pc, #20]	; (421098 <pio_configure_pin+0x124>)
  421082:	47a8      	blx	r5
	return 1;
  421084:	4620      	mov	r0, r4
		break;
  421086:	e7b1      	b.n	420fec <pio_configure_pin+0x78>
  421088:	00420f4d 	.word	0x00420f4d
  42108c:	00420e35 	.word	0x00420e35
  421090:	00420d9f 	.word	0x00420d9f
  421094:	00420d91 	.word	0x00420d91
  421098:	00420e7d 	.word	0x00420e7d

0042109c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  42109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42109e:	4604      	mov	r4, r0
  4210a0:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4210a2:	4b11      	ldr	r3, [pc, #68]	; (4210e8 <pio_handler_process+0x4c>)
  4210a4:	4798      	blx	r3
  4210a6:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4210a8:	4620      	mov	r0, r4
  4210aa:	4b10      	ldr	r3, [pc, #64]	; (4210ec <pio_handler_process+0x50>)
  4210ac:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4210ae:	4005      	ands	r5, r0
  4210b0:	d001      	beq.n	4210b6 <pio_handler_process+0x1a>
  4210b2:	2400      	movs	r4, #0
  4210b4:	e003      	b.n	4210be <pio_handler_process+0x22>
  4210b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  4210b8:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
  4210ba:	2c06      	cmp	r4, #6
  4210bc:	d811      	bhi.n	4210e2 <pio_handler_process+0x46>
		while (status != 0) {
  4210be:	b18d      	cbz	r5, 4210e4 <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
  4210c0:	0123      	lsls	r3, r4, #4
  4210c2:	4a0b      	ldr	r2, [pc, #44]	; (4210f0 <pio_handler_process+0x54>)
  4210c4:	58d0      	ldr	r0, [r2, r3]
  4210c6:	42b0      	cmp	r0, r6
  4210c8:	d1f6      	bne.n	4210b8 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4210ca:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  4210ce:	6859      	ldr	r1, [r3, #4]
  4210d0:	420d      	tst	r5, r1
  4210d2:	d0f1      	beq.n	4210b8 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4210d4:	461f      	mov	r7, r3
  4210d6:	68db      	ldr	r3, [r3, #12]
  4210d8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4210da:	687b      	ldr	r3, [r7, #4]
  4210dc:	ea25 0503 	bic.w	r5, r5, r3
  4210e0:	e7ea      	b.n	4210b8 <pio_handler_process+0x1c>
  4210e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4210e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4210e6:	bf00      	nop
  4210e8:	00420f45 	.word	0x00420f45
  4210ec:	00420f49 	.word	0x00420f49
  4210f0:	204147f0 	.word	0x204147f0

004210f4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4210f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4210f6:	210a      	movs	r1, #10
  4210f8:	4801      	ldr	r0, [pc, #4]	; (421100 <PIOA_Handler+0xc>)
  4210fa:	4b02      	ldr	r3, [pc, #8]	; (421104 <PIOA_Handler+0x10>)
  4210fc:	4798      	blx	r3
  4210fe:	bd08      	pop	{r3, pc}
  421100:	400e0e00 	.word	0x400e0e00
  421104:	0042109d 	.word	0x0042109d

00421108 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  421108:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  42110a:	210b      	movs	r1, #11
  42110c:	4801      	ldr	r0, [pc, #4]	; (421114 <PIOB_Handler+0xc>)
  42110e:	4b02      	ldr	r3, [pc, #8]	; (421118 <PIOB_Handler+0x10>)
  421110:	4798      	blx	r3
  421112:	bd08      	pop	{r3, pc}
  421114:	400e1000 	.word	0x400e1000
  421118:	0042109d 	.word	0x0042109d

0042111c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  42111c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  42111e:	210c      	movs	r1, #12
  421120:	4801      	ldr	r0, [pc, #4]	; (421128 <PIOC_Handler+0xc>)
  421122:	4b02      	ldr	r3, [pc, #8]	; (42112c <PIOC_Handler+0x10>)
  421124:	4798      	blx	r3
  421126:	bd08      	pop	{r3, pc}
  421128:	400e1200 	.word	0x400e1200
  42112c:	0042109d 	.word	0x0042109d

00421130 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  421130:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  421132:	2110      	movs	r1, #16
  421134:	4801      	ldr	r0, [pc, #4]	; (42113c <PIOD_Handler+0xc>)
  421136:	4b02      	ldr	r3, [pc, #8]	; (421140 <PIOD_Handler+0x10>)
  421138:	4798      	blx	r3
  42113a:	bd08      	pop	{r3, pc}
  42113c:	400e1400 	.word	0x400e1400
  421140:	0042109d 	.word	0x0042109d

00421144 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  421144:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  421146:	2111      	movs	r1, #17
  421148:	4801      	ldr	r0, [pc, #4]	; (421150 <PIOE_Handler+0xc>)
  42114a:	4b02      	ldr	r3, [pc, #8]	; (421154 <PIOE_Handler+0x10>)
  42114c:	4798      	blx	r3
  42114e:	bd08      	pop	{r3, pc}
  421150:	400e1600 	.word	0x400e1600
  421154:	0042109d 	.word	0x0042109d

00421158 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  421158:	2803      	cmp	r0, #3
  42115a:	d010      	beq.n	42117e <pmc_mck_set_division+0x26>
  42115c:	2804      	cmp	r0, #4
  42115e:	d011      	beq.n	421184 <pmc_mck_set_division+0x2c>
  421160:	2802      	cmp	r0, #2
  421162:	d012      	beq.n	42118a <pmc_mck_set_division+0x32>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  421164:	2300      	movs	r3, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  421166:	490a      	ldr	r1, [pc, #40]	; (421190 <pmc_mck_set_division+0x38>)
  421168:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  42116a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  42116e:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  421170:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  421172:	4b07      	ldr	r3, [pc, #28]	; (421190 <pmc_mck_set_division+0x38>)
  421174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  421176:	f013 0f08 	tst.w	r3, #8
  42117a:	d0fa      	beq.n	421172 <pmc_mck_set_division+0x1a>
}
  42117c:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  42117e:	f44f 7340 	mov.w	r3, #768	; 0x300
			break;
  421182:	e7f0      	b.n	421166 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  421184:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
  421188:	e7ed      	b.n	421166 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  42118a:	f44f 7380 	mov.w	r3, #256	; 0x100
  42118e:	e7ea      	b.n	421166 <pmc_mck_set_division+0xe>
  421190:	400e0600 	.word	0x400e0600

00421194 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  421194:	4a13      	ldr	r2, [pc, #76]	; (4211e4 <pmc_switch_mck_to_pllack+0x50>)
  421196:	6b13      	ldr	r3, [r2, #48]	; 0x30
  421198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  42119c:	4318      	orrs	r0, r3
  42119e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4211a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4211a4:	4a0f      	ldr	r2, [pc, #60]	; (4211e4 <pmc_switch_mck_to_pllack+0x50>)
  4211a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4211a8:	f012 0f08 	tst.w	r2, #8
  4211ac:	d102      	bne.n	4211b4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4211ae:	b1a3      	cbz	r3, 4211da <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  4211b0:	3b01      	subs	r3, #1
  4211b2:	e7f7      	b.n	4211a4 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4211b4:	4a0b      	ldr	r2, [pc, #44]	; (4211e4 <pmc_switch_mck_to_pllack+0x50>)
  4211b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4211b8:	f023 0303 	bic.w	r3, r3, #3
  4211bc:	f043 0302 	orr.w	r3, r3, #2
  4211c0:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4211c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4211c6:	4a07      	ldr	r2, [pc, #28]	; (4211e4 <pmc_switch_mck_to_pllack+0x50>)
  4211c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4211ca:	f012 0f08 	tst.w	r2, #8
  4211ce:	d102      	bne.n	4211d6 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4211d0:	b12b      	cbz	r3, 4211de <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  4211d2:	3b01      	subs	r3, #1
  4211d4:	e7f7      	b.n	4211c6 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  4211d6:	2000      	movs	r0, #0
  4211d8:	4770      	bx	lr
			return 1;
  4211da:	2001      	movs	r0, #1
  4211dc:	4770      	bx	lr
			return 1;
  4211de:	2001      	movs	r0, #1
}
  4211e0:	4770      	bx	lr
  4211e2:	bf00      	nop
  4211e4:	400e0600 	.word	0x400e0600

004211e8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4211e8:	b9a0      	cbnz	r0, 421214 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4211ea:	4a0e      	ldr	r2, [pc, #56]	; (421224 <pmc_switch_mainck_to_xtal+0x3c>)
  4211ec:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4211ee:	4b0e      	ldr	r3, [pc, #56]	; (421228 <pmc_switch_mainck_to_xtal+0x40>)
  4211f0:	4003      	ands	r3, r0
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4211f2:	0209      	lsls	r1, r1, #8
  4211f4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4211f6:	4319      	orrs	r1, r3
  4211f8:	4b0c      	ldr	r3, [pc, #48]	; (42122c <pmc_switch_mainck_to_xtal+0x44>)
  4211fa:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4211fc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4211fe:	4b09      	ldr	r3, [pc, #36]	; (421224 <pmc_switch_mainck_to_xtal+0x3c>)
  421200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  421202:	f013 0f01 	tst.w	r3, #1
  421206:	d0fa      	beq.n	4211fe <pmc_switch_mainck_to_xtal+0x16>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  421208:	4a06      	ldr	r2, [pc, #24]	; (421224 <pmc_switch_mainck_to_xtal+0x3c>)
  42120a:	6a11      	ldr	r1, [r2, #32]
  42120c:	4b08      	ldr	r3, [pc, #32]	; (421230 <pmc_switch_mainck_to_xtal+0x48>)
  42120e:	430b      	orrs	r3, r1
  421210:	6213      	str	r3, [r2, #32]
  421212:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  421214:	4903      	ldr	r1, [pc, #12]	; (421224 <pmc_switch_mainck_to_xtal+0x3c>)
  421216:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  421218:	4a06      	ldr	r2, [pc, #24]	; (421234 <pmc_switch_mainck_to_xtal+0x4c>)
  42121a:	401a      	ands	r2, r3
  42121c:	4b06      	ldr	r3, [pc, #24]	; (421238 <pmc_switch_mainck_to_xtal+0x50>)
  42121e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  421220:	620b      	str	r3, [r1, #32]
  421222:	4770      	bx	lr
  421224:	400e0600 	.word	0x400e0600
  421228:	ffc8fffc 	.word	0xffc8fffc
  42122c:	00370001 	.word	0x00370001
  421230:	01370000 	.word	0x01370000
  421234:	fec8fffc 	.word	0xfec8fffc
  421238:	01370002 	.word	0x01370002

0042123c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  42123c:	4b02      	ldr	r3, [pc, #8]	; (421248 <pmc_osc_is_ready_mainck+0xc>)
  42123e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  421240:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  421244:	4770      	bx	lr
  421246:	bf00      	nop
  421248:	400e0600 	.word	0x400e0600

0042124c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  42124c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  421250:	4b01      	ldr	r3, [pc, #4]	; (421258 <pmc_disable_pllack+0xc>)
  421252:	629a      	str	r2, [r3, #40]	; 0x28
  421254:	4770      	bx	lr
  421256:	bf00      	nop
  421258:	400e0600 	.word	0x400e0600

0042125c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  42125c:	4b02      	ldr	r3, [pc, #8]	; (421268 <pmc_is_locked_pllack+0xc>)
  42125e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  421260:	f000 0002 	and.w	r0, r0, #2
  421264:	4770      	bx	lr
  421266:	bf00      	nop
  421268:	400e0600 	.word	0x400e0600

0042126c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  42126c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  421270:	4b05      	ldr	r3, [pc, #20]	; (421288 <pmc_enable_periph_clk+0x1c>)
  421272:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  421276:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  42127a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  42127e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  421282:	2000      	movs	r0, #0
  421284:	4770      	bx	lr
  421286:	bf00      	nop
  421288:	400e0600 	.word	0x400e0600

0042128c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  42128c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  42128e:	4b07      	ldr	r3, [pc, #28]	; (4212ac <spi_enable_clock+0x20>)
  421290:	4298      	cmp	r0, r3
  421292:	d003      	beq.n	42129c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  421294:	4b06      	ldr	r3, [pc, #24]	; (4212b0 <spi_enable_clock+0x24>)
  421296:	4298      	cmp	r0, r3
  421298:	d004      	beq.n	4212a4 <spi_enable_clock+0x18>
  42129a:	bd08      	pop	{r3, pc}
  42129c:	2015      	movs	r0, #21
  42129e:	4b05      	ldr	r3, [pc, #20]	; (4212b4 <spi_enable_clock+0x28>)
  4212a0:	4798      	blx	r3
  4212a2:	bd08      	pop	{r3, pc}
  4212a4:	202a      	movs	r0, #42	; 0x2a
  4212a6:	4b03      	ldr	r3, [pc, #12]	; (4212b4 <spi_enable_clock+0x28>)
  4212a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4212aa:	e7f6      	b.n	42129a <spi_enable_clock+0xe>
  4212ac:	40008000 	.word	0x40008000
  4212b0:	40058000 	.word	0x40058000
  4212b4:	0042126d 	.word	0x0042126d

004212b8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4212b8:	6843      	ldr	r3, [r0, #4]
  4212ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4212be:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4212c0:	6843      	ldr	r3, [r0, #4]
  4212c2:	0409      	lsls	r1, r1, #16
  4212c4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4212c8:	430b      	orrs	r3, r1
  4212ca:	6043      	str	r3, [r0, #4]
  4212cc:	4770      	bx	lr

004212ce <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4212ce:	6843      	ldr	r3, [r0, #4]
  4212d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4212d4:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4212d6:	6843      	ldr	r3, [r0, #4]
  4212d8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4212dc:	6041      	str	r1, [r0, #4]
  4212de:	4770      	bx	lr

004212e0 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4212e0:	b93a      	cbnz	r2, 4212f2 <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4212e2:	310c      	adds	r1, #12
  4212e4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4212e8:	f023 0301 	bic.w	r3, r3, #1
  4212ec:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4212f0:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4212f2:	310c      	adds	r1, #12
  4212f4:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4212f8:	f043 0301 	orr.w	r3, r3, #1
  4212fc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  421300:	4770      	bx	lr

00421302 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  421302:	b93a      	cbnz	r2, 421314 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  421304:	310c      	adds	r1, #12
  421306:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42130a:	f023 0302 	bic.w	r3, r3, #2
  42130e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  421312:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  421314:	310c      	adds	r1, #12
  421316:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42131a:	f043 0302 	orr.w	r3, r3, #2
  42131e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  421322:	4770      	bx	lr

00421324 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  421324:	2a04      	cmp	r2, #4
  421326:	d003      	beq.n	421330 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  421328:	b182      	cbz	r2, 42134c <spi_configure_cs_behavior+0x28>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  42132a:	2a08      	cmp	r2, #8
  42132c:	d01c      	beq.n	421368 <spi_configure_cs_behavior+0x44>
  42132e:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  421330:	310c      	adds	r1, #12
  421332:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  421336:	f023 0308 	bic.w	r3, r3, #8
  42133a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  42133e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  421342:	f043 0304 	orr.w	r3, r3, #4
  421346:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42134a:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  42134c:	310c      	adds	r1, #12
  42134e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  421352:	f023 0308 	bic.w	r3, r3, #8
  421356:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  42135a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42135e:	f023 0304 	bic.w	r3, r3, #4
  421362:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  421366:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  421368:	310c      	adds	r1, #12
  42136a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42136e:	f043 0308 	orr.w	r3, r3, #8
  421372:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
  421376:	e7da      	b.n	42132e <spi_configure_cs_behavior+0xa>

00421378 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  421378:	310c      	adds	r1, #12
  42137a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42137e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  421382:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  421386:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42138a:	431a      	orrs	r2, r3
  42138c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  421390:	4770      	bx	lr

00421392 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  421392:	4401      	add	r1, r0
  421394:	3901      	subs	r1, #1
  421396:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  42139a:	1e43      	subs	r3, r0, #1
  42139c:	2bfe      	cmp	r3, #254	; 0xfe
  42139e:	d801      	bhi.n	4213a4 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  4213a0:	b200      	sxth	r0, r0
  4213a2:	4770      	bx	lr
		return -1;
  4213a4:	f04f 30ff 	mov.w	r0, #4294967295
}
  4213a8:	4770      	bx	lr

004213aa <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4213aa:	b192      	cbz	r2, 4213d2 <spi_set_baudrate_div+0x28>
{
  4213ac:	b410      	push	{r4}
  4213ae:	4614      	mov	r4, r2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4213b0:	310c      	adds	r1, #12
  4213b2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4213b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4213ba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4213be:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  4213c2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4213c6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    return 0;
  4213ca:	2000      	movs	r0, #0
}
  4213cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4213d0:	4770      	bx	lr
        return -1;
  4213d2:	f04f 30ff 	mov.w	r0, #4294967295
  4213d6:	4770      	bx	lr

004213d8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4213d8:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4213da:	310c      	adds	r1, #12
  4213dc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  4213e0:	b2a4      	uxth	r4, r4
  4213e2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4213e6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
  4213ea:	061b      	lsls	r3, r3, #24
  4213ec:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4213f0:	4314      	orrs	r4, r2
  4213f2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
  4213f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4213fa:	4770      	bx	lr

004213fc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4213fc:	6943      	ldr	r3, [r0, #20]
  4213fe:	f013 0f02 	tst.w	r3, #2
  421402:	d002      	beq.n	42140a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  421404:	61c1      	str	r1, [r0, #28]
	return 0;
  421406:	2000      	movs	r0, #0
  421408:	4770      	bx	lr
		return 1;
  42140a:	2001      	movs	r0, #1
}
  42140c:	4770      	bx	lr

0042140e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  42140e:	6943      	ldr	r3, [r0, #20]
  421410:	f013 0f01 	tst.w	r3, #1
  421414:	d003      	beq.n	42141e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  421416:	6983      	ldr	r3, [r0, #24]
  421418:	700b      	strb	r3, [r1, #0]
	return 0;
  42141a:	2000      	movs	r0, #0
  42141c:	4770      	bx	lr
		return 1;
  42141e:	2001      	movs	r0, #1
}
  421420:	4770      	bx	lr

00421422 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  421422:	b430      	push	{r4, r5}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  421424:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  421428:	d317      	bcc.n	42145a <usart_set_async_baudrate+0x38>
		over = HIGH_FRQ_SAMPLE_DIV;
  42142a:	2410      	movs	r4, #16
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  42142c:	fb01 f104 	mul.w	r1, r1, r4
  421430:	084b      	lsrs	r3, r1, #1
  421432:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  421436:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  42143a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  42143c:	1e5d      	subs	r5, r3, #1
  42143e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  421442:	428d      	cmp	r5, r1
  421444:	d810      	bhi.n	421468 <usart_set_async_baudrate+0x46>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  421446:	2c08      	cmp	r4, #8
  421448:	d009      	beq.n	42145e <usart_set_async_baudrate+0x3c>
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  42144a:	0412      	lsls	r2, r2, #16
  42144c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  421450:	431a      	orrs	r2, r3
  421452:	6202      	str	r2, [r0, #32]

	return 0;
  421454:	2000      	movs	r0, #0
}
  421456:	bc30      	pop	{r4, r5}
  421458:	4770      	bx	lr
		over = LOW_FRQ_SAMPLE_DIV;
  42145a:	2408      	movs	r4, #8
  42145c:	e7e6      	b.n	42142c <usart_set_async_baudrate+0xa>
		p_usart->US_MR |= US_MR_OVER;
  42145e:	6841      	ldr	r1, [r0, #4]
  421460:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  421464:	6041      	str	r1, [r0, #4]
  421466:	e7f0      	b.n	42144a <usart_set_async_baudrate+0x28>
		return 1;
  421468:	2001      	movs	r0, #1
  42146a:	e7f4      	b.n	421456 <usart_set_async_baudrate+0x34>

0042146c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  42146c:	2340      	movs	r3, #64	; 0x40
  42146e:	6003      	str	r3, [r0, #0]
  421470:	4770      	bx	lr

00421472 <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  421472:	2388      	movs	r3, #136	; 0x88
  421474:	6003      	str	r3, [r0, #0]
  421476:	4770      	bx	lr

00421478 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  421478:	2310      	movs	r3, #16
  42147a:	6003      	str	r3, [r0, #0]
  42147c:	4770      	bx	lr

0042147e <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  42147e:	2324      	movs	r3, #36	; 0x24
  421480:	6003      	str	r3, [r0, #0]
  421482:	4770      	bx	lr

00421484 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  421484:	f44f 7380 	mov.w	r3, #256	; 0x100
  421488:	6003      	str	r3, [r0, #0]
  42148a:	4770      	bx	lr

0042148c <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  42148c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  421490:	6003      	str	r3, [r0, #0]
  421492:	4770      	bx	lr

00421494 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  421494:	6943      	ldr	r3, [r0, #20]
  421496:	f013 0f02 	tst.w	r3, #2
  42149a:	d004      	beq.n	4214a6 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  42149c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4214a0:	61c1      	str	r1, [r0, #28]
	return 0;
  4214a2:	2000      	movs	r0, #0
  4214a4:	4770      	bx	lr
		return 1;
  4214a6:	2001      	movs	r0, #1
}
  4214a8:	4770      	bx	lr

004214aa <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4214aa:	6943      	ldr	r3, [r0, #20]
  4214ac:	f013 0f01 	tst.w	r3, #1
  4214b0:	d005      	beq.n	4214be <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4214b2:	6983      	ldr	r3, [r0, #24]
  4214b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4214b8:	600b      	str	r3, [r1, #0]

	return 0;
  4214ba:	2000      	movs	r0, #0
  4214bc:	4770      	bx	lr
		return 1;
  4214be:	2001      	movs	r0, #1
}
  4214c0:	4770      	bx	lr
	...

004214c4 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4214c4:	4b01      	ldr	r3, [pc, #4]	; (4214cc <usart_disable_writeprotect+0x8>)
  4214c6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  4214ca:	4770      	bx	lr
  4214cc:	55534100 	.word	0x55534100

004214d0 <usart_reset>:
{
  4214d0:	b510      	push	{r4, lr}
  4214d2:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
  4214d4:	4b09      	ldr	r3, [pc, #36]	; (4214fc <usart_reset+0x2c>)
  4214d6:	4798      	blx	r3
	p_usart->US_MR = 0;
  4214d8:	2300      	movs	r3, #0
  4214da:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
  4214dc:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4214de:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
  4214e0:	4620      	mov	r0, r4
  4214e2:	4b07      	ldr	r3, [pc, #28]	; (421500 <usart_reset+0x30>)
  4214e4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4214e6:	4620      	mov	r0, r4
  4214e8:	4b06      	ldr	r3, [pc, #24]	; (421504 <usart_reset+0x34>)
  4214ea:	4798      	blx	r3
	usart_reset_status(p_usart);
  4214ec:	4620      	mov	r0, r4
  4214ee:	4b06      	ldr	r3, [pc, #24]	; (421508 <usart_reset+0x38>)
  4214f0:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
  4214f2:	4620      	mov	r0, r4
  4214f4:	4b05      	ldr	r3, [pc, #20]	; (42150c <usart_reset+0x3c>)
  4214f6:	4798      	blx	r3
  4214f8:	bd10      	pop	{r4, pc}
  4214fa:	bf00      	nop
  4214fc:	004214c5 	.word	0x004214c5
  421500:	00421473 	.word	0x00421473
  421504:	0042147f 	.word	0x0042147f
  421508:	00421485 	.word	0x00421485
  42150c:	0042148d 	.word	0x0042148d

00421510 <usart_init_rs232>:
{
  421510:	b570      	push	{r4, r5, r6, lr}
  421512:	4605      	mov	r5, r0
  421514:	460c      	mov	r4, r1
  421516:	4616      	mov	r6, r2
	usart_reset(p_usart);
  421518:	4b10      	ldr	r3, [pc, #64]	; (42155c <usart_init_rs232+0x4c>)
  42151a:	4798      	blx	r3
	ul_reg_val = 0;
  42151c:	2200      	movs	r2, #0
  42151e:	4b10      	ldr	r3, [pc, #64]	; (421560 <usart_init_rs232+0x50>)
  421520:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  421522:	b1b4      	cbz	r4, 421552 <usart_init_rs232+0x42>
  421524:	4632      	mov	r2, r6
  421526:	6821      	ldr	r1, [r4, #0]
  421528:	4628      	mov	r0, r5
  42152a:	4b0e      	ldr	r3, [pc, #56]	; (421564 <usart_init_rs232+0x54>)
  42152c:	4798      	blx	r3
  42152e:	4602      	mov	r2, r0
  421530:	b988      	cbnz	r0, 421556 <usart_init_rs232+0x46>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  421532:	6863      	ldr	r3, [r4, #4]
  421534:	68a1      	ldr	r1, [r4, #8]
  421536:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  421538:	6921      	ldr	r1, [r4, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  42153a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  42153c:	68e1      	ldr	r1, [r4, #12]
  42153e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  421540:	4907      	ldr	r1, [pc, #28]	; (421560 <usart_init_rs232+0x50>)
  421542:	6808      	ldr	r0, [r1, #0]
  421544:	4303      	orrs	r3, r0
  421546:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  421548:	6869      	ldr	r1, [r5, #4]
  42154a:	430b      	orrs	r3, r1
  42154c:	606b      	str	r3, [r5, #4]
}
  42154e:	4610      	mov	r0, r2
  421550:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  421552:	2201      	movs	r2, #1
  421554:	e7fb      	b.n	42154e <usart_init_rs232+0x3e>
  421556:	2201      	movs	r2, #1
  421558:	e7f9      	b.n	42154e <usart_init_rs232+0x3e>
  42155a:	bf00      	nop
  42155c:	004214d1 	.word	0x004214d1
  421560:	20414860 	.word	0x20414860
  421564:	00421423 	.word	0x00421423

00421568 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  421568:	e7fe      	b.n	421568 <Dummy_Handler>
	...

0042156c <Reset_Handler>:
{
  42156c:	b500      	push	{lr}
  42156e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  421570:	4b1e      	ldr	r3, [pc, #120]	; (4215ec <Reset_Handler+0x80>)
  421572:	4a1f      	ldr	r2, [pc, #124]	; (4215f0 <Reset_Handler+0x84>)
  421574:	429a      	cmp	r2, r3
  421576:	d009      	beq.n	42158c <Reset_Handler+0x20>
  421578:	4b1c      	ldr	r3, [pc, #112]	; (4215ec <Reset_Handler+0x80>)
  42157a:	4a1d      	ldr	r2, [pc, #116]	; (4215f0 <Reset_Handler+0x84>)
  42157c:	e003      	b.n	421586 <Reset_Handler+0x1a>
                        *pDest++ = *pSrc++;
  42157e:	6811      	ldr	r1, [r2, #0]
  421580:	6019      	str	r1, [r3, #0]
  421582:	3304      	adds	r3, #4
  421584:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  421586:	491b      	ldr	r1, [pc, #108]	; (4215f4 <Reset_Handler+0x88>)
  421588:	428b      	cmp	r3, r1
  42158a:	d3f8      	bcc.n	42157e <Reset_Handler+0x12>
                        *pDest++ = *pSrc++;
  42158c:	4b1a      	ldr	r3, [pc, #104]	; (4215f8 <Reset_Handler+0x8c>)
  42158e:	e002      	b.n	421596 <Reset_Handler+0x2a>
                *pDest++ = 0;
  421590:	2200      	movs	r2, #0
  421592:	601a      	str	r2, [r3, #0]
  421594:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  421596:	4a19      	ldr	r2, [pc, #100]	; (4215fc <Reset_Handler+0x90>)
  421598:	4293      	cmp	r3, r2
  42159a:	d3f9      	bcc.n	421590 <Reset_Handler+0x24>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  42159c:	4a18      	ldr	r2, [pc, #96]	; (421600 <Reset_Handler+0x94>)
  42159e:	4b19      	ldr	r3, [pc, #100]	; (421604 <Reset_Handler+0x98>)
  4215a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4215a4:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4215a6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4215aa:	fab3 f383 	clz	r3, r3
  4215ae:	095b      	lsrs	r3, r3, #5
  4215b0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4215b2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4215b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4215b8:	2200      	movs	r2, #0
  4215ba:	4b13      	ldr	r3, [pc, #76]	; (421608 <Reset_Handler+0x9c>)
  4215bc:	701a      	strb	r2, [r3, #0]
	return flags;
  4215be:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4215c0:	4a12      	ldr	r2, [pc, #72]	; (42160c <Reset_Handler+0xa0>)
  4215c2:	6813      	ldr	r3, [r2, #0]
  4215c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4215c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4215ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4215ce:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4215d2:	b129      	cbz	r1, 4215e0 <Reset_Handler+0x74>
		cpu_irq_enable();
  4215d4:	2201      	movs	r2, #1
  4215d6:	4b0c      	ldr	r3, [pc, #48]	; (421608 <Reset_Handler+0x9c>)
  4215d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4215da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4215de:	b662      	cpsie	i
        __libc_init_array();
  4215e0:	4b0b      	ldr	r3, [pc, #44]	; (421610 <Reset_Handler+0xa4>)
  4215e2:	4798      	blx	r3
        main();
  4215e4:	4b0b      	ldr	r3, [pc, #44]	; (421614 <Reset_Handler+0xa8>)
  4215e6:	4798      	blx	r3
  4215e8:	e7fe      	b.n	4215e8 <Reset_Handler+0x7c>
  4215ea:	bf00      	nop
  4215ec:	20400000 	.word	0x20400000
  4215f0:	0042e574 	.word	0x0042e574
  4215f4:	20400a20 	.word	0x20400a20
  4215f8:	20400a20 	.word	0x20400a20
  4215fc:	2043a36c 	.word	0x2043a36c
  421600:	e000ed00 	.word	0xe000ed00
  421604:	00400000 	.word	0x00400000
  421608:	20400068 	.word	0x20400068
  42160c:	e000ed88 	.word	0xe000ed88
  421610:	00422d85 	.word	0x00422d85
  421614:	00421ff5 	.word	0x00421ff5

00421618 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  421618:	4b3c      	ldr	r3, [pc, #240]	; (42170c <SystemCoreClockUpdate+0xf4>)
  42161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42161c:	f003 0303 	and.w	r3, r3, #3
  421620:	2b01      	cmp	r3, #1
  421622:	d020      	beq.n	421666 <SystemCoreClockUpdate+0x4e>
  421624:	b183      	cbz	r3, 421648 <SystemCoreClockUpdate+0x30>
  421626:	2b02      	cmp	r3, #2
  421628:	d039      	beq.n	42169e <SystemCoreClockUpdate+0x86>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  42162a:	4b38      	ldr	r3, [pc, #224]	; (42170c <SystemCoreClockUpdate+0xf4>)
  42162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42162e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  421632:	2b70      	cmp	r3, #112	; 0x70
  421634:	d062      	beq.n	4216fc <SystemCoreClockUpdate+0xe4>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  421636:	4b35      	ldr	r3, [pc, #212]	; (42170c <SystemCoreClockUpdate+0xf4>)
  421638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  42163a:	f3c2 1202 	ubfx	r2, r2, #4, #3
  42163e:	4934      	ldr	r1, [pc, #208]	; (421710 <SystemCoreClockUpdate+0xf8>)
  421640:	680b      	ldr	r3, [r1, #0]
  421642:	40d3      	lsrs	r3, r2
  421644:	600b      	str	r3, [r1, #0]
  421646:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  421648:	4b32      	ldr	r3, [pc, #200]	; (421714 <SystemCoreClockUpdate+0xfc>)
  42164a:	695b      	ldr	r3, [r3, #20]
  42164c:	f013 0f80 	tst.w	r3, #128	; 0x80
  421650:	d004      	beq.n	42165c <SystemCoreClockUpdate+0x44>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  421652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  421656:	4b2e      	ldr	r3, [pc, #184]	; (421710 <SystemCoreClockUpdate+0xf8>)
  421658:	601a      	str	r2, [r3, #0]
  42165a:	e7e6      	b.n	42162a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  42165c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  421660:	4b2b      	ldr	r3, [pc, #172]	; (421710 <SystemCoreClockUpdate+0xf8>)
  421662:	601a      	str	r2, [r3, #0]
  421664:	e7e1      	b.n	42162a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  421666:	4b29      	ldr	r3, [pc, #164]	; (42170c <SystemCoreClockUpdate+0xf4>)
  421668:	6a1b      	ldr	r3, [r3, #32]
  42166a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  42166e:	d003      	beq.n	421678 <SystemCoreClockUpdate+0x60>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  421670:	4a29      	ldr	r2, [pc, #164]	; (421718 <SystemCoreClockUpdate+0x100>)
  421672:	4b27      	ldr	r3, [pc, #156]	; (421710 <SystemCoreClockUpdate+0xf8>)
  421674:	601a      	str	r2, [r3, #0]
  421676:	e7d8      	b.n	42162a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  421678:	4a28      	ldr	r2, [pc, #160]	; (42171c <SystemCoreClockUpdate+0x104>)
  42167a:	4b25      	ldr	r3, [pc, #148]	; (421710 <SystemCoreClockUpdate+0xf8>)
  42167c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  42167e:	4b23      	ldr	r3, [pc, #140]	; (42170c <SystemCoreClockUpdate+0xf4>)
  421680:	6a1b      	ldr	r3, [r3, #32]
  421682:	f003 0370 	and.w	r3, r3, #112	; 0x70
  421686:	2b10      	cmp	r3, #16
  421688:	d005      	beq.n	421696 <SystemCoreClockUpdate+0x7e>
  42168a:	2b20      	cmp	r3, #32
  42168c:	d1cd      	bne.n	42162a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  42168e:	4a22      	ldr	r2, [pc, #136]	; (421718 <SystemCoreClockUpdate+0x100>)
  421690:	4b1f      	ldr	r3, [pc, #124]	; (421710 <SystemCoreClockUpdate+0xf8>)
  421692:	601a      	str	r2, [r3, #0]
          break;
  421694:	e7c9      	b.n	42162a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  421696:	4a22      	ldr	r2, [pc, #136]	; (421720 <SystemCoreClockUpdate+0x108>)
  421698:	4b1d      	ldr	r3, [pc, #116]	; (421710 <SystemCoreClockUpdate+0xf8>)
  42169a:	601a      	str	r2, [r3, #0]
          break;
  42169c:	e7c5      	b.n	42162a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  42169e:	4b1b      	ldr	r3, [pc, #108]	; (42170c <SystemCoreClockUpdate+0xf4>)
  4216a0:	6a1b      	ldr	r3, [r3, #32]
  4216a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4216a6:	d016      	beq.n	4216d6 <SystemCoreClockUpdate+0xbe>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4216a8:	4a1b      	ldr	r2, [pc, #108]	; (421718 <SystemCoreClockUpdate+0x100>)
  4216aa:	4b19      	ldr	r3, [pc, #100]	; (421710 <SystemCoreClockUpdate+0xf8>)
  4216ac:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4216ae:	4b17      	ldr	r3, [pc, #92]	; (42170c <SystemCoreClockUpdate+0xf4>)
  4216b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4216b2:	f003 0303 	and.w	r3, r3, #3
  4216b6:	2b02      	cmp	r3, #2
  4216b8:	d1b7      	bne.n	42162a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4216ba:	4814      	ldr	r0, [pc, #80]	; (42170c <SystemCoreClockUpdate+0xf4>)
  4216bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4216be:	f3c2 420a 	ubfx	r2, r2, #16, #11
  4216c2:	4913      	ldr	r1, [pc, #76]	; (421710 <SystemCoreClockUpdate+0xf8>)
  4216c4:	680b      	ldr	r3, [r1, #0]
  4216c6:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4216ca:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4216cc:	b2d2      	uxtb	r2, r2
  4216ce:	fbb3 f3f2 	udiv	r3, r3, r2
  4216d2:	600b      	str	r3, [r1, #0]
  4216d4:	e7a9      	b.n	42162a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4216d6:	4a11      	ldr	r2, [pc, #68]	; (42171c <SystemCoreClockUpdate+0x104>)
  4216d8:	4b0d      	ldr	r3, [pc, #52]	; (421710 <SystemCoreClockUpdate+0xf8>)
  4216da:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4216dc:	4b0b      	ldr	r3, [pc, #44]	; (42170c <SystemCoreClockUpdate+0xf4>)
  4216de:	6a1b      	ldr	r3, [r3, #32]
  4216e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4216e4:	2b10      	cmp	r3, #16
  4216e6:	d005      	beq.n	4216f4 <SystemCoreClockUpdate+0xdc>
  4216e8:	2b20      	cmp	r3, #32
  4216ea:	d1e0      	bne.n	4216ae <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 3U;
  4216ec:	4a0a      	ldr	r2, [pc, #40]	; (421718 <SystemCoreClockUpdate+0x100>)
  4216ee:	4b08      	ldr	r3, [pc, #32]	; (421710 <SystemCoreClockUpdate+0xf8>)
  4216f0:	601a      	str	r2, [r3, #0]
          break;
  4216f2:	e7dc      	b.n	4216ae <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 2U;
  4216f4:	4a0a      	ldr	r2, [pc, #40]	; (421720 <SystemCoreClockUpdate+0x108>)
  4216f6:	4b06      	ldr	r3, [pc, #24]	; (421710 <SystemCoreClockUpdate+0xf8>)
  4216f8:	601a      	str	r2, [r3, #0]
          break;
  4216fa:	e7d8      	b.n	4216ae <SystemCoreClockUpdate+0x96>
    SystemCoreClock /= 3U;
  4216fc:	4a04      	ldr	r2, [pc, #16]	; (421710 <SystemCoreClockUpdate+0xf8>)
  4216fe:	6813      	ldr	r3, [r2, #0]
  421700:	4908      	ldr	r1, [pc, #32]	; (421724 <SystemCoreClockUpdate+0x10c>)
  421702:	fba1 1303 	umull	r1, r3, r1, r3
  421706:	085b      	lsrs	r3, r3, #1
  421708:	6013      	str	r3, [r2, #0]
  42170a:	4770      	bx	lr
  42170c:	400e0600 	.word	0x400e0600
  421710:	2040006c 	.word	0x2040006c
  421714:	400e1810 	.word	0x400e1810
  421718:	00b71b00 	.word	0x00b71b00
  42171c:	003d0900 	.word	0x003d0900
  421720:	007a1200 	.word	0x007a1200
  421724:	aaaaaaab 	.word	0xaaaaaaab

00421728 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  421728:	4b17      	ldr	r3, [pc, #92]	; (421788 <system_init_flash+0x60>)
  42172a:	4298      	cmp	r0, r3
  42172c:	d912      	bls.n	421754 <system_init_flash+0x2c>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  42172e:	4b17      	ldr	r3, [pc, #92]	; (42178c <system_init_flash+0x64>)
  421730:	4298      	cmp	r0, r3
  421732:	d914      	bls.n	42175e <system_init_flash+0x36>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  421734:	4b16      	ldr	r3, [pc, #88]	; (421790 <system_init_flash+0x68>)
  421736:	4298      	cmp	r0, r3
  421738:	d915      	bls.n	421766 <system_init_flash+0x3e>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  42173a:	4b16      	ldr	r3, [pc, #88]	; (421794 <system_init_flash+0x6c>)
  42173c:	4298      	cmp	r0, r3
  42173e:	d916      	bls.n	42176e <system_init_flash+0x46>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  421740:	4b15      	ldr	r3, [pc, #84]	; (421798 <system_init_flash+0x70>)
  421742:	4298      	cmp	r0, r3
  421744:	d917      	bls.n	421776 <system_init_flash+0x4e>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  421746:	4b15      	ldr	r3, [pc, #84]	; (42179c <system_init_flash+0x74>)
  421748:	4298      	cmp	r0, r3
  42174a:	d919      	bls.n	421780 <system_init_flash+0x58>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  42174c:	4a14      	ldr	r2, [pc, #80]	; (4217a0 <system_init_flash+0x78>)
  42174e:	4b15      	ldr	r3, [pc, #84]	; (4217a4 <system_init_flash+0x7c>)
  421750:	601a      	str	r2, [r3, #0]
  421752:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  421754:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  421758:	4b12      	ldr	r3, [pc, #72]	; (4217a4 <system_init_flash+0x7c>)
  42175a:	601a      	str	r2, [r3, #0]
  42175c:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  42175e:	4a12      	ldr	r2, [pc, #72]	; (4217a8 <system_init_flash+0x80>)
  421760:	4b10      	ldr	r3, [pc, #64]	; (4217a4 <system_init_flash+0x7c>)
  421762:	601a      	str	r2, [r3, #0]
  421764:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  421766:	4a11      	ldr	r2, [pc, #68]	; (4217ac <system_init_flash+0x84>)
  421768:	4b0e      	ldr	r3, [pc, #56]	; (4217a4 <system_init_flash+0x7c>)
  42176a:	601a      	str	r2, [r3, #0]
  42176c:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  42176e:	4a10      	ldr	r2, [pc, #64]	; (4217b0 <system_init_flash+0x88>)
  421770:	4b0c      	ldr	r3, [pc, #48]	; (4217a4 <system_init_flash+0x7c>)
  421772:	601a      	str	r2, [r3, #0]
  421774:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  421776:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  42177a:	4b0a      	ldr	r3, [pc, #40]	; (4217a4 <system_init_flash+0x7c>)
  42177c:	601a      	str	r2, [r3, #0]
  42177e:	4770      	bx	lr
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  421780:	4a0c      	ldr	r2, [pc, #48]	; (4217b4 <system_init_flash+0x8c>)
  421782:	4b08      	ldr	r3, [pc, #32]	; (4217a4 <system_init_flash+0x7c>)
  421784:	601a      	str	r2, [r3, #0]
  421786:	4770      	bx	lr
  421788:	015ef3bf 	.word	0x015ef3bf
  42178c:	02bde77f 	.word	0x02bde77f
  421790:	041cdb3f 	.word	0x041cdb3f
  421794:	057bceff 	.word	0x057bceff
  421798:	06dac2bf 	.word	0x06dac2bf
  42179c:	0839b67f 	.word	0x0839b67f
  4217a0:	04000600 	.word	0x04000600
  4217a4:	400e0c00 	.word	0x400e0c00
  4217a8:	04000100 	.word	0x04000100
  4217ac:	04000200 	.word	0x04000200
  4217b0:	04000300 	.word	0x04000300
  4217b4:	04000500 	.word	0x04000500

004217b8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4217b8:	4b0a      	ldr	r3, [pc, #40]	; (4217e4 <_sbrk+0x2c>)
  4217ba:	681b      	ldr	r3, [r3, #0]
  4217bc:	b153      	cbz	r3, 4217d4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4217be:	4b09      	ldr	r3, [pc, #36]	; (4217e4 <_sbrk+0x2c>)
  4217c0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4217c2:	181a      	adds	r2, r3, r0
  4217c4:	4908      	ldr	r1, [pc, #32]	; (4217e8 <_sbrk+0x30>)
  4217c6:	4291      	cmp	r1, r2
  4217c8:	db08      	blt.n	4217dc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4217ca:	4610      	mov	r0, r2
  4217cc:	4a05      	ldr	r2, [pc, #20]	; (4217e4 <_sbrk+0x2c>)
  4217ce:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4217d0:	4618      	mov	r0, r3
  4217d2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4217d4:	4a05      	ldr	r2, [pc, #20]	; (4217ec <_sbrk+0x34>)
  4217d6:	4b03      	ldr	r3, [pc, #12]	; (4217e4 <_sbrk+0x2c>)
  4217d8:	601a      	str	r2, [r3, #0]
  4217da:	e7f0      	b.n	4217be <_sbrk+0x6>
		return (caddr_t) -1;	
  4217dc:	f04f 30ff 	mov.w	r0, #4294967295
}
  4217e0:	4770      	bx	lr
  4217e2:	bf00      	nop
  4217e4:	20414864 	.word	0x20414864
  4217e8:	2045fffc 	.word	0x2045fffc
  4217ec:	2043c570 	.word	0x2043c570

004217f0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4217f0:	f04f 30ff 	mov.w	r0, #4294967295
  4217f4:	4770      	bx	lr

004217f6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4217f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4217fa:	604b      	str	r3, [r1, #4]

	return 0;
}
  4217fc:	2000      	movs	r0, #0
  4217fe:	4770      	bx	lr

00421800 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  421800:	2001      	movs	r0, #1
  421802:	4770      	bx	lr

00421804 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  421804:	2000      	movs	r0, #0
  421806:	4770      	bx	lr

00421808 <power_handler>:
	else if(event == LV_EVENT_VALUE_CHANGED) {
		printf("Toggled\n");
	}
}

static void power_handler(lv_obj_t * obj, lv_event_t event) {
  421808:	b508      	push	{r3, lr}
	if(event == LV_EVENT_CLICKED) {
  42180a:	2906      	cmp	r1, #6
  42180c:	d002      	beq.n	421814 <power_handler+0xc>
		printf("Clicked\n");
	}
	else if(event == LV_EVENT_VALUE_CHANGED) {
  42180e:	2910      	cmp	r1, #16
  421810:	d004      	beq.n	42181c <power_handler+0x14>
  421812:	bd08      	pop	{r3, pc}
		printf("Clicked\n");
  421814:	4803      	ldr	r0, [pc, #12]	; (421824 <power_handler+0x1c>)
  421816:	4b04      	ldr	r3, [pc, #16]	; (421828 <power_handler+0x20>)
  421818:	4798      	blx	r3
  42181a:	bd08      	pop	{r3, pc}
		printf("Toggled\n");
  42181c:	4803      	ldr	r0, [pc, #12]	; (42182c <power_handler+0x24>)
  42181e:	4b02      	ldr	r3, [pc, #8]	; (421828 <power_handler+0x20>)
  421820:	4798      	blx	r3
	}
}
  421822:	e7f6      	b.n	421812 <power_handler+0xa>
  421824:	0042db9c 	.word	0x0042db9c
  421828:	00422dd5 	.word	0x00422dd5
  42182c:	0042dba8 	.word	0x0042dba8

00421830 <menu_handler>:
static void menu_handler(lv_obj_t * obj, lv_event_t event) {
  421830:	b508      	push	{r3, lr}
	if(event == LV_EVENT_CLICKED) {
  421832:	2906      	cmp	r1, #6
  421834:	d002      	beq.n	42183c <menu_handler+0xc>
	else if(event == LV_EVENT_VALUE_CHANGED) {
  421836:	2910      	cmp	r1, #16
  421838:	d004      	beq.n	421844 <menu_handler+0x14>
  42183a:	bd08      	pop	{r3, pc}
		printf("Clicked\n");
  42183c:	4803      	ldr	r0, [pc, #12]	; (42184c <menu_handler+0x1c>)
  42183e:	4b04      	ldr	r3, [pc, #16]	; (421850 <menu_handler+0x20>)
  421840:	4798      	blx	r3
  421842:	bd08      	pop	{r3, pc}
		printf("Toggled\n");
  421844:	4803      	ldr	r0, [pc, #12]	; (421854 <menu_handler+0x24>)
  421846:	4b02      	ldr	r3, [pc, #8]	; (421850 <menu_handler+0x20>)
  421848:	4798      	blx	r3
}
  42184a:	e7f6      	b.n	42183a <menu_handler+0xa>
  42184c:	0042db9c 	.word	0x0042db9c
  421850:	00422dd5 	.word	0x00422dd5
  421854:	0042dba8 	.word	0x0042dba8

00421858 <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  421858:	b570      	push	{r4, r5, r6, lr}
  42185a:	4605      	mov	r5, r0
  42185c:	460c      	mov	r4, r1
  42185e:	4616      	mov	r6, r2
	ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  421860:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  421864:	f9b4 0000 	ldrsh.w	r0, [r4]
  421868:	4b0d      	ldr	r3, [pc, #52]	; (4218a0 <my_flush_cb+0x48>)
  42186a:	4798      	blx	r3
  42186c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  421870:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  421874:	4b0b      	ldr	r3, [pc, #44]	; (4218a4 <my_flush_cb+0x4c>)
  421876:	4798      	blx	r3
	ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  421878:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  42187c:	f9b4 1000 	ldrsh.w	r1, [r4]
  421880:	1a5b      	subs	r3, r3, r1
  421882:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  421886:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  42188a:	1a89      	subs	r1, r1, r2
  42188c:	fb01 f103 	mul.w	r1, r1, r3
  421890:	4630      	mov	r0, r6
  421892:	4b05      	ldr	r3, [pc, #20]	; (4218a8 <my_flush_cb+0x50>)
  421894:	4798      	blx	r3
	
	/* IMPORTANT!!!
	* Inform the graphics library that you are ready with the flushing*/
	lv_disp_flush_ready(disp_drv);
  421896:	4628      	mov	r0, r5
  421898:	4b04      	ldr	r3, [pc, #16]	; (4218ac <my_flush_cb+0x54>)
  42189a:	4798      	blx	r3
  42189c:	bd70      	pop	{r4, r5, r6, pc}
  42189e:	bf00      	nop
  4218a0:	00400e29 	.word	0x00400e29
  4218a4:	00400e49 	.word	0x00400e49
  4218a8:	00400e99 	.word	0x00400e99
  4218ac:	004149cd 	.word	0x004149cd

004218b0 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  4218b0:	b510      	push	{r4, lr}
  4218b2:	b082      	sub	sp, #8
  4218b4:	460c      	mov	r4, r1
	int px, py, pressed;
	
	if (readPoint(&px, &py)) {
  4218b6:	4669      	mov	r1, sp
  4218b8:	a801      	add	r0, sp, #4
  4218ba:	4b07      	ldr	r3, [pc, #28]	; (4218d8 <my_input_read+0x28>)
  4218bc:	4798      	blx	r3
  4218be:	b940      	cbnz	r0, 4218d2 <my_input_read+0x22>
		data->state = LV_INDEV_STATE_PR;
	}
	else {
		data->state = LV_INDEV_STATE_REL;
  4218c0:	2300      	movs	r3, #0
  4218c2:	73a3      	strb	r3, [r4, #14]
	}
	
	data->point.x = px;
  4218c4:	9b01      	ldr	r3, [sp, #4]
  4218c6:	8023      	strh	r3, [r4, #0]
	data->point.y = py;
  4218c8:	9b00      	ldr	r3, [sp, #0]
  4218ca:	8063      	strh	r3, [r4, #2]
	return false; /*No buffering now so no more data read*/
}
  4218cc:	2000      	movs	r0, #0
  4218ce:	b002      	add	sp, #8
  4218d0:	bd10      	pop	{r4, pc}
		data->state = LV_INDEV_STATE_PR;
  4218d2:	2301      	movs	r3, #1
  4218d4:	73a3      	strb	r3, [r4, #14]
  4218d6:	e7f5      	b.n	4218c4 <my_input_read+0x14>
  4218d8:	00400b85 	.word	0x00400b85

004218dc <task_main>:
static void task_main(void *pvParameters) {
  4218dc:	b500      	push	{lr}
  4218de:	b083      	sub	sp, #12
		if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  4218e0:	2300      	movs	r3, #0
  4218e2:	461a      	mov	r2, r3
  4218e4:	f10d 0107 	add.w	r1, sp, #7
  4218e8:	4803      	ldr	r0, [pc, #12]	; (4218f8 <task_main+0x1c>)
  4218ea:	6800      	ldr	r0, [r0, #0]
  4218ec:	4c03      	ldr	r4, [pc, #12]	; (4218fc <task_main+0x20>)
  4218ee:	47a0      	blx	r4
		vTaskDelay(25);
  4218f0:	2019      	movs	r0, #25
  4218f2:	4b03      	ldr	r3, [pc, #12]	; (421900 <task_main+0x24>)
  4218f4:	4798      	blx	r3
  4218f6:	e7f3      	b.n	4218e0 <task_main+0x4>
  4218f8:	2043a340 	.word	0x2043a340
  4218fc:	00402135 	.word	0x00402135
  421900:	0040297d 	.word	0x0040297d

00421904 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  421904:	b530      	push	{r4, r5, lr}
  421906:	b083      	sub	sp, #12
  421908:	4604      	mov	r4, r0
  42190a:	460d      	mov	r5, r1
	uint32_t val = 0;
  42190c:	2300      	movs	r3, #0
  42190e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  421910:	4b28      	ldr	r3, [pc, #160]	; (4219b4 <usart_serial_getchar+0xb0>)
  421912:	4298      	cmp	r0, r3
  421914:	d013      	beq.n	42193e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  421916:	4b28      	ldr	r3, [pc, #160]	; (4219b8 <usart_serial_getchar+0xb4>)
  421918:	429c      	cmp	r4, r3
  42191a:	d017      	beq.n	42194c <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  42191c:	4b27      	ldr	r3, [pc, #156]	; (4219bc <usart_serial_getchar+0xb8>)
  42191e:	429c      	cmp	r4, r3
  421920:	d01b      	beq.n	42195a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  421922:	4b27      	ldr	r3, [pc, #156]	; (4219c0 <usart_serial_getchar+0xbc>)
  421924:	429c      	cmp	r4, r3
  421926:	d01f      	beq.n	421968 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  421928:	4b26      	ldr	r3, [pc, #152]	; (4219c4 <usart_serial_getchar+0xc0>)
  42192a:	429c      	cmp	r4, r3
  42192c:	d023      	beq.n	421976 <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  42192e:	4b26      	ldr	r3, [pc, #152]	; (4219c8 <usart_serial_getchar+0xc4>)
  421930:	429c      	cmp	r4, r3
  421932:	d02a      	beq.n	42198a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  421934:	4b25      	ldr	r3, [pc, #148]	; (4219cc <usart_serial_getchar+0xc8>)
  421936:	429c      	cmp	r4, r3
  421938:	d031      	beq.n	42199e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  42193a:	b003      	add	sp, #12
  42193c:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  42193e:	4629      	mov	r1, r5
  421940:	4620      	mov	r0, r4
  421942:	4b23      	ldr	r3, [pc, #140]	; (4219d0 <usart_serial_getchar+0xcc>)
  421944:	4798      	blx	r3
  421946:	2800      	cmp	r0, #0
  421948:	d1f9      	bne.n	42193e <usart_serial_getchar+0x3a>
  42194a:	e7e4      	b.n	421916 <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  42194c:	4629      	mov	r1, r5
  42194e:	4620      	mov	r0, r4
  421950:	4b1f      	ldr	r3, [pc, #124]	; (4219d0 <usart_serial_getchar+0xcc>)
  421952:	4798      	blx	r3
  421954:	2800      	cmp	r0, #0
  421956:	d1f9      	bne.n	42194c <usart_serial_getchar+0x48>
  421958:	e7e0      	b.n	42191c <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  42195a:	4629      	mov	r1, r5
  42195c:	4620      	mov	r0, r4
  42195e:	4b1c      	ldr	r3, [pc, #112]	; (4219d0 <usart_serial_getchar+0xcc>)
  421960:	4798      	blx	r3
  421962:	2800      	cmp	r0, #0
  421964:	d1f9      	bne.n	42195a <usart_serial_getchar+0x56>
  421966:	e7dc      	b.n	421922 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  421968:	4629      	mov	r1, r5
  42196a:	4620      	mov	r0, r4
  42196c:	4b18      	ldr	r3, [pc, #96]	; (4219d0 <usart_serial_getchar+0xcc>)
  42196e:	4798      	blx	r3
  421970:	2800      	cmp	r0, #0
  421972:	d1f9      	bne.n	421968 <usart_serial_getchar+0x64>
  421974:	e7d8      	b.n	421928 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  421976:	a901      	add	r1, sp, #4
  421978:	4620      	mov	r0, r4
  42197a:	4b16      	ldr	r3, [pc, #88]	; (4219d4 <usart_serial_getchar+0xd0>)
  42197c:	4798      	blx	r3
  42197e:	2800      	cmp	r0, #0
  421980:	d1f9      	bne.n	421976 <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  421982:	f89d 3004 	ldrb.w	r3, [sp, #4]
  421986:	702b      	strb	r3, [r5, #0]
  421988:	e7d1      	b.n	42192e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  42198a:	a901      	add	r1, sp, #4
  42198c:	4620      	mov	r0, r4
  42198e:	4b11      	ldr	r3, [pc, #68]	; (4219d4 <usart_serial_getchar+0xd0>)
  421990:	4798      	blx	r3
  421992:	2800      	cmp	r0, #0
  421994:	d1f9      	bne.n	42198a <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  421996:	f89d 3004 	ldrb.w	r3, [sp, #4]
  42199a:	702b      	strb	r3, [r5, #0]
  42199c:	e7ca      	b.n	421934 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  42199e:	a901      	add	r1, sp, #4
  4219a0:	4620      	mov	r0, r4
  4219a2:	4b0c      	ldr	r3, [pc, #48]	; (4219d4 <usart_serial_getchar+0xd0>)
  4219a4:	4798      	blx	r3
  4219a6:	2800      	cmp	r0, #0
  4219a8:	d1f9      	bne.n	42199e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  4219aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4219ae:	702b      	strb	r3, [r5, #0]
}
  4219b0:	e7c3      	b.n	42193a <usart_serial_getchar+0x36>
  4219b2:	bf00      	nop
  4219b4:	400e0800 	.word	0x400e0800
  4219b8:	400e0a00 	.word	0x400e0a00
  4219bc:	400e1a00 	.word	0x400e1a00
  4219c0:	400e1c00 	.word	0x400e1c00
  4219c4:	40024000 	.word	0x40024000
  4219c8:	40028000 	.word	0x40028000
  4219cc:	4002c000 	.word	0x4002c000
  4219d0:	0042140f 	.word	0x0042140f
  4219d4:	004214ab 	.word	0x004214ab

004219d8 <usart_serial_putchar>:
{
  4219d8:	b538      	push	{r3, r4, r5, lr}
  4219da:	4604      	mov	r4, r0
  4219dc:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  4219de:	4b27      	ldr	r3, [pc, #156]	; (421a7c <usart_serial_putchar+0xa4>)
  4219e0:	4298      	cmp	r0, r3
  4219e2:	d013      	beq.n	421a0c <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  4219e4:	4b26      	ldr	r3, [pc, #152]	; (421a80 <usart_serial_putchar+0xa8>)
  4219e6:	4298      	cmp	r0, r3
  4219e8:	d018      	beq.n	421a1c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4219ea:	4b26      	ldr	r3, [pc, #152]	; (421a84 <usart_serial_putchar+0xac>)
  4219ec:	4298      	cmp	r0, r3
  4219ee:	d01d      	beq.n	421a2c <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  4219f0:	4b25      	ldr	r3, [pc, #148]	; (421a88 <usart_serial_putchar+0xb0>)
  4219f2:	4298      	cmp	r0, r3
  4219f4:	d022      	beq.n	421a3c <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  4219f6:	4b25      	ldr	r3, [pc, #148]	; (421a8c <usart_serial_putchar+0xb4>)
  4219f8:	4298      	cmp	r0, r3
  4219fa:	d027      	beq.n	421a4c <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  4219fc:	4b24      	ldr	r3, [pc, #144]	; (421a90 <usart_serial_putchar+0xb8>)
  4219fe:	4298      	cmp	r0, r3
  421a00:	d02c      	beq.n	421a5c <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  421a02:	4b24      	ldr	r3, [pc, #144]	; (421a94 <usart_serial_putchar+0xbc>)
  421a04:	4298      	cmp	r0, r3
  421a06:	d031      	beq.n	421a6c <usart_serial_putchar+0x94>
	return 0;
  421a08:	2000      	movs	r0, #0
}
  421a0a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421a0c:	4629      	mov	r1, r5
  421a0e:	4620      	mov	r0, r4
  421a10:	4b21      	ldr	r3, [pc, #132]	; (421a98 <usart_serial_putchar+0xc0>)
  421a12:	4798      	blx	r3
  421a14:	2800      	cmp	r0, #0
  421a16:	d1f9      	bne.n	421a0c <usart_serial_putchar+0x34>
		return 1;
  421a18:	2001      	movs	r0, #1
  421a1a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421a1c:	4629      	mov	r1, r5
  421a1e:	4620      	mov	r0, r4
  421a20:	4b1d      	ldr	r3, [pc, #116]	; (421a98 <usart_serial_putchar+0xc0>)
  421a22:	4798      	blx	r3
  421a24:	2800      	cmp	r0, #0
  421a26:	d1f9      	bne.n	421a1c <usart_serial_putchar+0x44>
		return 1;
  421a28:	2001      	movs	r0, #1
  421a2a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421a2c:	4629      	mov	r1, r5
  421a2e:	4620      	mov	r0, r4
  421a30:	4b19      	ldr	r3, [pc, #100]	; (421a98 <usart_serial_putchar+0xc0>)
  421a32:	4798      	blx	r3
  421a34:	2800      	cmp	r0, #0
  421a36:	d1f9      	bne.n	421a2c <usart_serial_putchar+0x54>
		return 1;
  421a38:	2001      	movs	r0, #1
  421a3a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  421a3c:	4629      	mov	r1, r5
  421a3e:	4620      	mov	r0, r4
  421a40:	4b15      	ldr	r3, [pc, #84]	; (421a98 <usart_serial_putchar+0xc0>)
  421a42:	4798      	blx	r3
  421a44:	2800      	cmp	r0, #0
  421a46:	d1f9      	bne.n	421a3c <usart_serial_putchar+0x64>
		return 1;
  421a48:	2001      	movs	r0, #1
  421a4a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  421a4c:	4629      	mov	r1, r5
  421a4e:	4620      	mov	r0, r4
  421a50:	4b12      	ldr	r3, [pc, #72]	; (421a9c <usart_serial_putchar+0xc4>)
  421a52:	4798      	blx	r3
  421a54:	2800      	cmp	r0, #0
  421a56:	d1f9      	bne.n	421a4c <usart_serial_putchar+0x74>
		return 1;
  421a58:	2001      	movs	r0, #1
  421a5a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  421a5c:	4629      	mov	r1, r5
  421a5e:	4620      	mov	r0, r4
  421a60:	4b0e      	ldr	r3, [pc, #56]	; (421a9c <usart_serial_putchar+0xc4>)
  421a62:	4798      	blx	r3
  421a64:	2800      	cmp	r0, #0
  421a66:	d1f9      	bne.n	421a5c <usart_serial_putchar+0x84>
		return 1;
  421a68:	2001      	movs	r0, #1
  421a6a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  421a6c:	4629      	mov	r1, r5
  421a6e:	4620      	mov	r0, r4
  421a70:	4b0a      	ldr	r3, [pc, #40]	; (421a9c <usart_serial_putchar+0xc4>)
  421a72:	4798      	blx	r3
  421a74:	2800      	cmp	r0, #0
  421a76:	d1f9      	bne.n	421a6c <usart_serial_putchar+0x94>
		return 1;
  421a78:	2001      	movs	r0, #1
  421a7a:	bd38      	pop	{r3, r4, r5, pc}
  421a7c:	400e0800 	.word	0x400e0800
  421a80:	400e0a00 	.word	0x400e0a00
  421a84:	400e1a00 	.word	0x400e1a00
  421a88:	400e1c00 	.word	0x400e1c00
  421a8c:	40024000 	.word	0x40024000
  421a90:	40028000 	.word	0x40028000
  421a94:	4002c000 	.word	0x4002c000
  421a98:	004213fd 	.word	0x004213fd
  421a9c:	00421495 	.word	0x00421495

00421aa0 <configure_lcd>:
static void configure_lcd(void) {
  421aa0:	b510      	push	{r4, lr}
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  421aa2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  421aa6:	2074      	movs	r0, #116	; 0x74
  421aa8:	4c0b      	ldr	r4, [pc, #44]	; (421ad8 <configure_lcd+0x38>)
  421aaa:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  421aac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  421ab0:	2075      	movs	r0, #117	; 0x75
  421ab2:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  421ab4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  421ab8:	2076      	movs	r0, #118	; 0x76
  421aba:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  421abc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  421ac0:	207b      	movs	r0, #123	; 0x7b
  421ac2:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  421ac4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  421ac8:	2018      	movs	r0, #24
  421aca:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  421acc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  421ad0:	2006      	movs	r0, #6
  421ad2:	47a0      	blx	r4
  421ad4:	bd10      	pop	{r4, pc}
  421ad6:	bf00      	nop
  421ad8:	00420f75 	.word	0x00420f75

00421adc <configure_console>:
static void configure_console(void) {
  421adc:	b570      	push	{r4, r5, r6, lr}
  421ade:	b08a      	sub	sp, #40	; 0x28
	const usart_serial_options_t uart_serial_options = {
  421ae0:	4b1a      	ldr	r3, [pc, #104]	; (421b4c <configure_console+0x70>)
  421ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  421ae4:	ac0a      	add	r4, sp, #40	; 0x28
  421ae6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  421aea:	4d19      	ldr	r5, [pc, #100]	; (421b50 <configure_console+0x74>)
  421aec:	4b19      	ldr	r3, [pc, #100]	; (421b54 <configure_console+0x78>)
  421aee:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  421af0:	4a19      	ldr	r2, [pc, #100]	; (421b58 <configure_console+0x7c>)
  421af2:	4b1a      	ldr	r3, [pc, #104]	; (421b5c <configure_console+0x80>)
  421af4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  421af6:	4a1a      	ldr	r2, [pc, #104]	; (421b60 <configure_console+0x84>)
  421af8:	4b1a      	ldr	r3, [pc, #104]	; (421b64 <configure_console+0x88>)
  421afa:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  421afc:	9b06      	ldr	r3, [sp, #24]
  421afe:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  421b00:	9b07      	ldr	r3, [sp, #28]
  421b02:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  421b04:	9b08      	ldr	r3, [sp, #32]
  421b06:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  421b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  421b0a:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  421b0c:	2400      	movs	r4, #0
  421b0e:	9404      	str	r4, [sp, #16]
  421b10:	200e      	movs	r0, #14
  421b12:	4b15      	ldr	r3, [pc, #84]	; (421b68 <configure_console+0x8c>)
  421b14:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  421b16:	4a15      	ldr	r2, [pc, #84]	; (421b6c <configure_console+0x90>)
  421b18:	4669      	mov	r1, sp
  421b1a:	4628      	mov	r0, r5
  421b1c:	4b14      	ldr	r3, [pc, #80]	; (421b70 <configure_console+0x94>)
  421b1e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  421b20:	4628      	mov	r0, r5
  421b22:	4b14      	ldr	r3, [pc, #80]	; (421b74 <configure_console+0x98>)
  421b24:	4798      	blx	r3
		usart_enable_rx(p_usart);
  421b26:	4628      	mov	r0, r5
  421b28:	4b13      	ldr	r3, [pc, #76]	; (421b78 <configure_console+0x9c>)
  421b2a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  421b2c:	4e13      	ldr	r6, [pc, #76]	; (421b7c <configure_console+0xa0>)
  421b2e:	6833      	ldr	r3, [r6, #0]
  421b30:	4621      	mov	r1, r4
  421b32:	6898      	ldr	r0, [r3, #8]
  421b34:	4d12      	ldr	r5, [pc, #72]	; (421b80 <configure_console+0xa4>)
  421b36:	47a8      	blx	r5
	setbuf(stdin, NULL);
  421b38:	6833      	ldr	r3, [r6, #0]
  421b3a:	4621      	mov	r1, r4
  421b3c:	6858      	ldr	r0, [r3, #4]
  421b3e:	47a8      	blx	r5
	setbuf(stdout, NULL);
  421b40:	6833      	ldr	r3, [r6, #0]
  421b42:	4621      	mov	r1, r4
  421b44:	6898      	ldr	r0, [r3, #8]
  421b46:	47a8      	blx	r5
}
  421b48:	b00a      	add	sp, #40	; 0x28
  421b4a:	bd70      	pop	{r4, r5, r6, pc}
  421b4c:	0042c3e8 	.word	0x0042c3e8
  421b50:	40028000 	.word	0x40028000
  421b54:	2043a334 	.word	0x2043a334
  421b58:	004219d9 	.word	0x004219d9
  421b5c:	2043a330 	.word	0x2043a330
  421b60:	00421905 	.word	0x00421905
  421b64:	2043a32c 	.word	0x2043a32c
  421b68:	0042126d 	.word	0x0042126d
  421b6c:	08f0d180 	.word	0x08f0d180
  421b70:	00421511 	.word	0x00421511
  421b74:	0042146d 	.word	0x0042146d
  421b78:	00421479 	.word	0x00421479
  421b7c:	20400070 	.word	0x20400070
  421b80:	00423619 	.word	0x00423619

00421b84 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  421b84:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  421b86:	460a      	mov	r2, r1
  421b88:	4601      	mov	r1, r0
  421b8a:	4802      	ldr	r0, [pc, #8]	; (421b94 <vApplicationStackOverflowHook+0x10>)
  421b8c:	4b02      	ldr	r3, [pc, #8]	; (421b98 <vApplicationStackOverflowHook+0x14>)
  421b8e:	4798      	blx	r3
  421b90:	e7fe      	b.n	421b90 <vApplicationStackOverflowHook+0xc>
  421b92:	bf00      	nop
  421b94:	0042dbc4 	.word	0x0042dbc4
  421b98:	00422dd5 	.word	0x00422dd5

00421b9c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  421b9c:	4770      	bx	lr

00421b9e <vApplicationMallocFailedHook>:
  421b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  421ba2:	b672      	cpsid	i
  421ba4:	f383 8811 	msr	BASEPRI, r3
  421ba8:	f3bf 8f6f 	isb	sy
  421bac:	f3bf 8f4f 	dsb	sy
  421bb0:	b662      	cpsie	i
  421bb2:	e7fe      	b.n	421bb2 <vApplicationMallocFailedHook+0x14>

00421bb4 <RTC_Handler>:
{
  421bb4:	b530      	push	{r4, r5, lr}
  421bb6:	b083      	sub	sp, #12
	uint32_t ul_status = rtc_get_status(RTC);
  421bb8:	4812      	ldr	r0, [pc, #72]	; (421c04 <RTC_Handler+0x50>)
  421bba:	4b13      	ldr	r3, [pc, #76]	; (421c08 <RTC_Handler+0x54>)
  421bbc:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  421bbe:	f010 0f04 	tst.w	r0, #4
  421bc2:	d115      	bne.n	421bf0 <RTC_Handler+0x3c>
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  421bc4:	4d0f      	ldr	r5, [pc, #60]	; (421c04 <RTC_Handler+0x50>)
  421bc6:	2104      	movs	r1, #4
  421bc8:	4628      	mov	r0, r5
  421bca:	4c10      	ldr	r4, [pc, #64]	; (421c0c <RTC_Handler+0x58>)
  421bcc:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  421bce:	2102      	movs	r1, #2
  421bd0:	4628      	mov	r0, r5
  421bd2:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  421bd4:	2101      	movs	r1, #1
  421bd6:	4628      	mov	r0, r5
  421bd8:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  421bda:	2108      	movs	r1, #8
  421bdc:	4628      	mov	r0, r5
  421bde:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  421be0:	2110      	movs	r1, #16
  421be2:	4628      	mov	r0, r5
  421be4:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  421be6:	2120      	movs	r1, #32
  421be8:	4628      	mov	r0, r5
  421bea:	47a0      	blx	r4
}
  421bec:	b003      	add	sp, #12
  421bee:	bd30      	pop	{r4, r5, pc}
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  421bf0:	a902      	add	r1, sp, #8
  421bf2:	2300      	movs	r3, #0
  421bf4:	f841 3d04 	str.w	r3, [r1, #-4]!
		xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  421bf8:	4b05      	ldr	r3, [pc, #20]	; (421c10 <RTC_Handler+0x5c>)
  421bfa:	6818      	ldr	r0, [r3, #0]
  421bfc:	4b05      	ldr	r3, [pc, #20]	; (421c14 <RTC_Handler+0x60>)
  421bfe:	4798      	blx	r3
  421c00:	e7e0      	b.n	421bc4 <RTC_Handler+0x10>
  421c02:	bf00      	nop
  421c04:	400e1860 	.word	0x400e1860
  421c08:	004006f5 	.word	0x004006f5
  421c0c:	004006f9 	.word	0x004006f9
  421c10:	2043a338 	.word	0x2043a338
  421c14:	00402041 	.word	0x00402041

00421c18 <RTC_init>:
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  421c18:	b082      	sub	sp, #8
  421c1a:	b570      	push	{r4, r5, r6, lr}
  421c1c:	b082      	sub	sp, #8
  421c1e:	4605      	mov	r5, r0
  421c20:	460c      	mov	r4, r1
  421c22:	a906      	add	r1, sp, #24
  421c24:	e881 000c 	stmia.w	r1, {r2, r3}
	pmc_enable_periph_clk(ID_RTC);
  421c28:	2002      	movs	r0, #2
  421c2a:	4b1e      	ldr	r3, [pc, #120]	; (421ca4 <RTC_init+0x8c>)
  421c2c:	4798      	blx	r3
	rtc_set_hour_mode(rtc, 0);
  421c2e:	2100      	movs	r1, #0
  421c30:	4628      	mov	r0, r5
  421c32:	4b1d      	ldr	r3, [pc, #116]	; (421ca8 <RTC_init+0x90>)
  421c34:	4798      	blx	r3
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  421c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
  421c38:	9300      	str	r3, [sp, #0]
  421c3a:	9b08      	ldr	r3, [sp, #32]
  421c3c:	9a07      	ldr	r2, [sp, #28]
  421c3e:	9906      	ldr	r1, [sp, #24]
  421c40:	4628      	mov	r0, r5
  421c42:	4e1a      	ldr	r6, [pc, #104]	; (421cac <RTC_init+0x94>)
  421c44:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  421c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  421c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  421c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  421c4c:	4628      	mov	r0, r5
  421c4e:	4e18      	ldr	r6, [pc, #96]	; (421cb0 <RTC_init+0x98>)
  421c50:	47b0      	blx	r6
	NVIC_DisableIRQ(id_rtc);
  421c52:	b261      	sxtb	r1, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  421c54:	094a      	lsrs	r2, r1, #5
  421c56:	b2e4      	uxtb	r4, r4
  421c58:	f004 001f 	and.w	r0, r4, #31
  421c5c:	2301      	movs	r3, #1
  421c5e:	4083      	lsls	r3, r0
  421c60:	4814      	ldr	r0, [pc, #80]	; (421cb4 <RTC_init+0x9c>)
  421c62:	f102 0620 	add.w	r6, r2, #32
  421c66:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  421c6a:	f102 0660 	add.w	r6, r2, #96	; 0x60
  421c6e:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
  if(IRQn < 0) {
  421c72:	2900      	cmp	r1, #0
  421c74:	db10      	blt.n	421c98 <RTC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  421c76:	480f      	ldr	r0, [pc, #60]	; (421cb4 <RTC_init+0x9c>)
  421c78:	4408      	add	r0, r1
  421c7a:	2180      	movs	r1, #128	; 0x80
  421c7c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  421c80:	490c      	ldr	r1, [pc, #48]	; (421cb4 <RTC_init+0x9c>)
  421c82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	rtc_enable_interrupt(rtc,  irq_type);
  421c86:	990d      	ldr	r1, [sp, #52]	; 0x34
  421c88:	4628      	mov	r0, r5
  421c8a:	4b0b      	ldr	r3, [pc, #44]	; (421cb8 <RTC_init+0xa0>)
  421c8c:	4798      	blx	r3
}
  421c8e:	b002      	add	sp, #8
  421c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  421c94:	b002      	add	sp, #8
  421c96:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  421c98:	f004 040f 	and.w	r4, r4, #15
  421c9c:	4907      	ldr	r1, [pc, #28]	; (421cbc <RTC_init+0xa4>)
  421c9e:	2080      	movs	r0, #128	; 0x80
  421ca0:	5508      	strb	r0, [r1, r4]
  421ca2:	e7ed      	b.n	421c80 <RTC_init+0x68>
  421ca4:	0042126d 	.word	0x0042126d
  421ca8:	00400529 	.word	0x00400529
  421cac:	00400635 	.word	0x00400635
  421cb0:	004005a1 	.word	0x004005a1
  421cb4:	e000e100 	.word	0xe000e100
  421cb8:	0040053f 	.word	0x0040053f
  421cbc:	e000ed14 	.word	0xe000ed14

00421cc0 <task_clock>:
static void task_clock(void *pvParameters) {
  421cc0:	b530      	push	{r4, r5, lr}
  421cc2:	b091      	sub	sp, #68	; 0x44
	calendar rtc_initial = {2021, 5, 7, 18, 10, 59 ,1};
  421cc4:	ac09      	add	r4, sp, #36	; 0x24
  421cc6:	4d22      	ldr	r5, [pc, #136]	; (421d50 <task_clock+0x90>)
  421cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  421cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  421ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  421cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_SECEN);
  421cd4:	2304      	movs	r3, #4
  421cd6:	9305      	str	r3, [sp, #20]
  421cd8:	466c      	mov	r4, sp
  421cda:	ad0b      	add	r5, sp, #44	; 0x2c
  421cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  421cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  421ce0:	682b      	ldr	r3, [r5, #0]
  421ce2:	6023      	str	r3, [r4, #0]
  421ce4:	ab09      	add	r3, sp, #36	; 0x24
  421ce6:	cb0c      	ldmia	r3, {r2, r3}
  421ce8:	2102      	movs	r1, #2
  421cea:	481a      	ldr	r0, [pc, #104]	; (421d54 <task_clock+0x94>)
  421cec:	4c1a      	ldr	r4, [pc, #104]	; (421d58 <task_clock+0x98>)
  421cee:	47a0      	blx	r4
	int flag_pisca = 0;
  421cf0:	2500      	movs	r5, #0
  421cf2:	e00b      	b.n	421d0c <task_clock+0x4c>
				lv_label_set_text_fmt(labelHour, "%02d:", hour);
  421cf4:	9a08      	ldr	r2, [sp, #32]
  421cf6:	4919      	ldr	r1, [pc, #100]	; (421d5c <task_clock+0x9c>)
  421cf8:	4b19      	ldr	r3, [pc, #100]	; (421d60 <task_clock+0xa0>)
  421cfa:	6818      	ldr	r0, [r3, #0]
  421cfc:	4c19      	ldr	r4, [pc, #100]	; (421d64 <task_clock+0xa4>)
  421cfe:	47a0      	blx	r4
				lv_label_set_text_fmt(labelMin, "%02d", minute);
  421d00:	9a07      	ldr	r2, [sp, #28]
  421d02:	4919      	ldr	r1, [pc, #100]	; (421d68 <task_clock+0xa8>)
  421d04:	4b19      	ldr	r3, [pc, #100]	; (421d6c <task_clock+0xac>)
  421d06:	6818      	ldr	r0, [r3, #0]
  421d08:	47a0      	blx	r4
				flag_pisca = 1;
  421d0a:	2501      	movs	r5, #1
		if( xSemaphoreTake(xSemaphore, ( TickType_t ) 10 / portTICK_PERIOD_MS) == pdTRUE ){
  421d0c:	2300      	movs	r3, #0
  421d0e:	220a      	movs	r2, #10
  421d10:	4619      	mov	r1, r3
  421d12:	4817      	ldr	r0, [pc, #92]	; (421d70 <task_clock+0xb0>)
  421d14:	6800      	ldr	r0, [r0, #0]
  421d16:	4c17      	ldr	r4, [pc, #92]	; (421d74 <task_clock+0xb4>)
  421d18:	47a0      	blx	r4
  421d1a:	2801      	cmp	r0, #1
  421d1c:	d1f6      	bne.n	421d0c <task_clock+0x4c>
			rtc_get_time(RTC, &hour, &minute, &second);
  421d1e:	ab06      	add	r3, sp, #24
  421d20:	aa07      	add	r2, sp, #28
  421d22:	a908      	add	r1, sp, #32
  421d24:	480b      	ldr	r0, [pc, #44]	; (421d54 <task_clock+0x94>)
  421d26:	4c14      	ldr	r4, [pc, #80]	; (421d78 <task_clock+0xb8>)
  421d28:	47a0      	blx	r4
			if(flag_pisca == 0){
  421d2a:	2d00      	cmp	r5, #0
  421d2c:	d0e2      	beq.n	421cf4 <task_clock+0x34>
			else if(flag_pisca == 1){
  421d2e:	2d00      	cmp	r5, #0
  421d30:	d0ec      	beq.n	421d0c <task_clock+0x4c>
				lv_label_set_text_fmt(labelHour, "%02d", hour);
  421d32:	4d0d      	ldr	r5, [pc, #52]	; (421d68 <task_clock+0xa8>)
  421d34:	9a08      	ldr	r2, [sp, #32]
  421d36:	4629      	mov	r1, r5
  421d38:	4b09      	ldr	r3, [pc, #36]	; (421d60 <task_clock+0xa0>)
  421d3a:	6818      	ldr	r0, [r3, #0]
  421d3c:	4c09      	ldr	r4, [pc, #36]	; (421d64 <task_clock+0xa4>)
  421d3e:	47a0      	blx	r4
				lv_label_set_text_fmt(labelMin, "%02d", minute);
  421d40:	9a07      	ldr	r2, [sp, #28]
  421d42:	4629      	mov	r1, r5
  421d44:	4b09      	ldr	r3, [pc, #36]	; (421d6c <task_clock+0xac>)
  421d46:	6818      	ldr	r0, [r3, #0]
  421d48:	47a0      	blx	r4
				flag_pisca = 0;
  421d4a:	2500      	movs	r5, #0
  421d4c:	e7de      	b.n	421d0c <task_clock+0x4c>
  421d4e:	bf00      	nop
  421d50:	0042c3f8 	.word	0x0042c3f8
  421d54:	400e1860 	.word	0x400e1860
  421d58:	00421c19 	.word	0x00421c19
  421d5c:	0042dbb4 	.word	0x0042dbb4
  421d60:	2043a098 	.word	0x2043a098
  421d64:	004204b9 	.word	0x004204b9
  421d68:	0042dbbc 	.word	0x0042dbbc
  421d6c:	2043a0a0 	.word	0x2043a0a0
  421d70:	2043a338 	.word	0x2043a338
  421d74:	00402135 	.word	0x00402135
  421d78:	00400543 	.word	0x00400543

00421d7c <lv_oxi>:
lv_oxi(void) {
  421d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421d80:	b085      	sub	sp, #20
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  421d82:	4e77      	ldr	r6, [pc, #476]	; (421f60 <lv_oxi+0x1e4>)
  421d84:	47b0      	blx	r6
  421d86:	4d77      	ldr	r5, [pc, #476]	; (421f64 <lv_oxi+0x1e8>)
  421d88:	47a8      	blx	r5
	lv_obj_set_style_local_bg_color(lv_scr_act(), LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  421d8a:	4b77      	ldr	r3, [pc, #476]	; (421f68 <lv_oxi+0x1ec>)
  421d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  421d8e:	469b      	mov	fp, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  421d90:	2229      	movs	r2, #41	; 0x29
  421d92:	2100      	movs	r1, #0
  421d94:	4c75      	ldr	r4, [pc, #468]	; (421f6c <lv_oxi+0x1f0>)
  421d96:	47a0      	blx	r4
  421d98:	47b0      	blx	r6
  421d9a:	47a8      	blx	r5
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
  421d9c:	2100      	movs	r1, #0
  421d9e:	f8df 8208 	ldr.w	r8, [pc, #520]	; 421fa8 <lv_oxi+0x22c>
  421da2:	47c0      	blx	r8
  421da4:	4607      	mov	r7, r0
	lv_img_set_src(img1, &logo);
  421da6:	4972      	ldr	r1, [pc, #456]	; (421f70 <lv_oxi+0x1f4>)
  421da8:	f8df 9200 	ldr.w	r9, [pc, #512]	; 421fac <lv_oxi+0x230>
  421dac:	47c8      	blx	r9
	lv_obj_align(img1, NULL, LV_ALIGN_IN_TOP_LEFT, 5, 30);
  421dae:	231e      	movs	r3, #30
  421db0:	9300      	str	r3, [sp, #0]
  421db2:	2305      	movs	r3, #5
  421db4:	2201      	movs	r2, #1
  421db6:	2100      	movs	r1, #0
  421db8:	4638      	mov	r0, r7
  421dba:	4f6e      	ldr	r7, [pc, #440]	; (421f74 <lv_oxi+0x1f8>)
  421dbc:	47b8      	blx	r7
  421dbe:	47b0      	blx	r6
  421dc0:	47a8      	blx	r5
	lv_obj_t * health_txt = lv_img_create(lv_scr_act(), NULL);
  421dc2:	2100      	movs	r1, #0
  421dc4:	47c0      	blx	r8
  421dc6:	4680      	mov	r8, r0
	lv_img_set_src(health_txt, &health);
  421dc8:	496b      	ldr	r1, [pc, #428]	; (421f78 <lv_oxi+0x1fc>)
  421dca:	47c8      	blx	r9
	lv_obj_align(health_txt, NULL, LV_ALIGN_IN_TOP_LEFT, 50, 40);
  421dcc:	f04f 0a28 	mov.w	sl, #40	; 0x28
  421dd0:	f8cd a000 	str.w	sl, [sp]
  421dd4:	2332      	movs	r3, #50	; 0x32
  421dd6:	2201      	movs	r2, #1
  421dd8:	2100      	movs	r1, #0
  421dda:	4640      	mov	r0, r8
  421ddc:	47b8      	blx	r7
  421dde:	47b0      	blx	r6
  421de0:	47a8      	blx	r5
	lv_obj_t * btnMenu = lv_btn_create(lv_scr_act(), NULL);
  421de2:	2100      	movs	r1, #0
  421de4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 421fb0 <lv_oxi+0x234>
  421de8:	47c0      	blx	r8
  421dea:	4681      	mov	r9, r0
	lv_obj_set_event_cb(btnMenu, menu_handler);
  421dec:	4963      	ldr	r1, [pc, #396]	; (421f7c <lv_oxi+0x200>)
  421dee:	4b64      	ldr	r3, [pc, #400]	; (421f80 <lv_oxi+0x204>)
  421df0:	4798      	blx	r3
	lv_obj_set_width(btnMenu, 100);  lv_obj_set_height(btnMenu, 40);
  421df2:	2164      	movs	r1, #100	; 0x64
  421df4:	4648      	mov	r0, r9
  421df6:	4b63      	ldr	r3, [pc, #396]	; (421f84 <lv_oxi+0x208>)
  421df8:	4798      	blx	r3
  421dfa:	4651      	mov	r1, sl
  421dfc:	4648      	mov	r0, r9
  421dfe:	4b62      	ldr	r3, [pc, #392]	; (421f88 <lv_oxi+0x20c>)
  421e00:	4798      	blx	r3
	lv_obj_align(btnMenu, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, -10, -10);
  421e02:	f06f 0309 	mvn.w	r3, #9
  421e06:	9300      	str	r3, [sp, #0]
  421e08:	2206      	movs	r2, #6
  421e0a:	2100      	movs	r1, #0
  421e0c:	4648      	mov	r0, r9
  421e0e:	47b8      	blx	r7
  421e10:	f8ad b00e 	strh.w	fp, [sp, #14]
  421e14:	465b      	mov	r3, fp
  421e16:	2229      	movs	r2, #41	; 0x29
  421e18:	2100      	movs	r1, #0
  421e1a:	4648      	mov	r0, r9
  421e1c:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  421e1e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  421e22:	2239      	movs	r2, #57	; 0x39
  421e24:	2100      	movs	r1, #0
  421e26:	4648      	mov	r0, r9
  421e28:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  421e2a:	2302      	movs	r3, #2
  421e2c:	2230      	movs	r2, #48	; 0x30
  421e2e:	2100      	movs	r1, #0
  421e30:	4648      	mov	r0, r9
  421e32:	4f56      	ldr	r7, [pc, #344]	; (421f8c <lv_oxi+0x210>)
  421e34:	47b8      	blx	r7
	labelMenu = lv_label_create(btnMenu, NULL);
  421e36:	2100      	movs	r1, #0
  421e38:	4648      	mov	r0, r9
  421e3a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 421fb4 <lv_oxi+0x238>
  421e3e:	47c8      	blx	r9
  421e40:	f8df a174 	ldr.w	sl, [pc, #372]	; 421fb8 <lv_oxi+0x23c>
  421e44:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_recolor(labelMenu, true);
  421e48:	2101      	movs	r1, #1
  421e4a:	4b51      	ldr	r3, [pc, #324]	; (421f90 <lv_oxi+0x214>)
  421e4c:	4798      	blx	r3
	lv_label_set_text(labelMenu, "#00000   BEGIN  #");
  421e4e:	4951      	ldr	r1, [pc, #324]	; (421f94 <lv_oxi+0x218>)
  421e50:	f8da 0000 	ldr.w	r0, [sl]
  421e54:	f8df b164 	ldr.w	fp, [pc, #356]	; 421fbc <lv_oxi+0x240>
  421e58:	47d8      	blx	fp
  421e5a:	47b0      	blx	r6
  421e5c:	47a8      	blx	r5
	lv_obj_t * btnPower = lv_btn_create(lv_scr_act(), NULL);
  421e5e:	2100      	movs	r1, #0
  421e60:	47c0      	blx	r8
  421e62:	4680      	mov	r8, r0
	lv_obj_set_event_cb(btnPower, power_handler);
  421e64:	494c      	ldr	r1, [pc, #304]	; (421f98 <lv_oxi+0x21c>)
  421e66:	4b46      	ldr	r3, [pc, #280]	; (421f80 <lv_oxi+0x204>)
  421e68:	4798      	blx	r3
	lv_obj_set_width(btnPower, 30);  lv_obj_set_height(btnPower, 30);
  421e6a:	211e      	movs	r1, #30
  421e6c:	4640      	mov	r0, r8
  421e6e:	4b45      	ldr	r3, [pc, #276]	; (421f84 <lv_oxi+0x208>)
  421e70:	4798      	blx	r3
  421e72:	211e      	movs	r1, #30
  421e74:	4640      	mov	r0, r8
  421e76:	4b44      	ldr	r3, [pc, #272]	; (421f88 <lv_oxi+0x20c>)
  421e78:	4798      	blx	r3
	lv_obj_align(btnPower, NULL, LV_ALIGN_IN_TOP_LEFT, 10, 10);
  421e7a:	f04f 0a0a 	mov.w	sl, #10
  421e7e:	f8cd a000 	str.w	sl, [sp]
  421e82:	4653      	mov	r3, sl
  421e84:	2201      	movs	r2, #1
  421e86:	2100      	movs	r1, #0
  421e88:	4640      	mov	r0, r8
  421e8a:	4f3a      	ldr	r7, [pc, #232]	; (421f74 <lv_oxi+0x1f8>)
  421e8c:	47b8      	blx	r7
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  421e8e:	f8bd 700e 	ldrh.w	r7, [sp, #14]
  421e92:	463b      	mov	r3, r7
  421e94:	2229      	movs	r2, #41	; 0x29
  421e96:	2100      	movs	r1, #0
  421e98:	4640      	mov	r0, r8
  421e9a:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  421e9c:	463b      	mov	r3, r7
  421e9e:	2239      	movs	r2, #57	; 0x39
  421ea0:	2100      	movs	r1, #0
  421ea2:	4640      	mov	r0, r8
  421ea4:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  421ea6:	2300      	movs	r3, #0
  421ea8:	2230      	movs	r2, #48	; 0x30
  421eaa:	4619      	mov	r1, r3
  421eac:	4640      	mov	r0, r8
  421eae:	4f37      	ldr	r7, [pc, #220]	; (421f8c <lv_oxi+0x210>)
  421eb0:	47b8      	blx	r7
	labelPower = lv_label_create(btnPower, NULL);
  421eb2:	2100      	movs	r1, #0
  421eb4:	4640      	mov	r0, r8
  421eb6:	47c8      	blx	r9
  421eb8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 421fc0 <lv_oxi+0x244>
  421ebc:	f8c8 0000 	str.w	r0, [r8]
	lv_label_set_recolor(labelPower, true);
  421ec0:	2101      	movs	r1, #1
  421ec2:	4b33      	ldr	r3, [pc, #204]	; (421f90 <lv_oxi+0x214>)
  421ec4:	4798      	blx	r3
	lv_label_set_text(labelPower, "#00000 [  " LV_SYMBOL_POWER "  |#");
  421ec6:	4935      	ldr	r1, [pc, #212]	; (421f9c <lv_oxi+0x220>)
  421ec8:	f8d8 0000 	ldr.w	r0, [r8]
  421ecc:	47d8      	blx	fp
  421ece:	47b0      	blx	r6
  421ed0:	47a8      	blx	r5
	labelHour = lv_label_create(lv_scr_act(), NULL);
  421ed2:	2100      	movs	r1, #0
  421ed4:	47c8      	blx	r9
  421ed6:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 421fc4 <lv_oxi+0x248>
  421eda:	f8cb 0000 	str.w	r0, [fp]
	lv_obj_align(labelHour, NULL, LV_ALIGN_IN_TOP_MID, -13 , 10);
  421ede:	f8cd a000 	str.w	sl, [sp]
  421ee2:	f06f 030c 	mvn.w	r3, #12
  421ee6:	2202      	movs	r2, #2
  421ee8:	2100      	movs	r1, #0
  421eea:	4f22      	ldr	r7, [pc, #136]	; (421f74 <lv_oxi+0x1f8>)
  421eec:	47b8      	blx	r7
	lv_obj_set_style_local_text_color(labelHour, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_BLACK);
  421eee:	f04f 0800 	mov.w	r8, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  421ef2:	4643      	mov	r3, r8
  421ef4:	f248 0289 	movw	r2, #32905	; 0x8089
  421ef8:	4641      	mov	r1, r8
  421efa:	f8db 0000 	ldr.w	r0, [fp]
  421efe:	47a0      	blx	r4
  421f00:	47b0      	blx	r6
  421f02:	47a8      	blx	r5
	labelMin = lv_label_create(lv_scr_act(), NULL);
  421f04:	4641      	mov	r1, r8
  421f06:	47c8      	blx	r9
  421f08:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 421fc8 <lv_oxi+0x24c>
  421f0c:	f8cb 0000 	str.w	r0, [fp]
	lv_obj_align(labelMin, NULL, LV_ALIGN_IN_TOP_MID, 6 , 10);
  421f10:	f8cd a000 	str.w	sl, [sp]
  421f14:	2306      	movs	r3, #6
  421f16:	2202      	movs	r2, #2
  421f18:	4641      	mov	r1, r8
  421f1a:	47b8      	blx	r7
  421f1c:	4643      	mov	r3, r8
  421f1e:	f248 0289 	movw	r2, #32905	; 0x8089
  421f22:	4641      	mov	r1, r8
  421f24:	f8db 0000 	ldr.w	r0, [fp]
  421f28:	47a0      	blx	r4
  421f2a:	47b0      	blx	r6
  421f2c:	47a8      	blx	r5
	labelBat = lv_label_create(lv_scr_act(), NULL);
  421f2e:	4641      	mov	r1, r8
  421f30:	47c8      	blx	r9
  421f32:	4605      	mov	r5, r0
	lv_obj_align(labelBat, NULL, LV_ALIGN_IN_TOP_RIGHT, -5 , 5);
  421f34:	2305      	movs	r3, #5
  421f36:	9300      	str	r3, [sp, #0]
  421f38:	f06f 0304 	mvn.w	r3, #4
  421f3c:	2203      	movs	r2, #3
  421f3e:	4641      	mov	r1, r8
  421f40:	47b8      	blx	r7
  421f42:	4643      	mov	r3, r8
  421f44:	f248 0289 	movw	r2, #32905	; 0x8089
  421f48:	4641      	mov	r1, r8
  421f4a:	4628      	mov	r0, r5
  421f4c:	47a0      	blx	r4
	lv_label_set_text_fmt(labelBat, "%d%", 17);
  421f4e:	2211      	movs	r2, #17
  421f50:	4913      	ldr	r1, [pc, #76]	; (421fa0 <lv_oxi+0x224>)
  421f52:	4628      	mov	r0, r5
  421f54:	4b13      	ldr	r3, [pc, #76]	; (421fa4 <lv_oxi+0x228>)
  421f56:	4798      	blx	r3
}
  421f58:	b005      	add	sp, #20
  421f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421f5e:	bf00      	nop
  421f60:	004148ed 	.word	0x004148ed
  421f64:	004034c1 	.word	0x004034c1
  421f68:	0042c3e8 	.word	0x0042c3e8
  421f6c:	004077d1 	.word	0x004077d1
  421f70:	00427a70 	.word	0x00427a70
  421f74:	00406011 	.word	0x00406011
  421f78:	00425e4c 	.word	0x00425e4c
  421f7c:	00421831 	.word	0x00421831
  421f80:	004055c5 	.word	0x004055c5
  421f84:	00406b3d 	.word	0x00406b3d
  421f88:	00406b7d 	.word	0x00406b7d
  421f8c:	00407791 	.word	0x00407791
  421f90:	0042066d 	.word	0x0042066d
  421f94:	0042dae4 	.word	0x0042dae4
  421f98:	00421809 	.word	0x00421809
  421f9c:	0042daf8 	.word	0x0042daf8
  421fa0:	0042db0c 	.word	0x0042db0c
  421fa4:	004204b9 	.word	0x004204b9
  421fa8:	0041f0e5 	.word	0x0041f0e5
  421fac:	0041ef05 	.word	0x0041ef05
  421fb0:	0041d641 	.word	0x0041d641
  421fb4:	004206c1 	.word	0x004206c1
  421fb8:	2043a09c 	.word	0x2043a09c
  421fbc:	004203bd 	.word	0x004203bd
  421fc0:	2043a0a4 	.word	0x2043a0a4
  421fc4:	2043a098 	.word	0x2043a098
  421fc8:	2043a0a0 	.word	0x2043a0a0

00421fcc <task_lcd>:
static void task_lcd(void *pvParameters) {
  421fcc:	b508      	push	{r3, lr}
	lv_oxi();
  421fce:	4b05      	ldr	r3, [pc, #20]	; (421fe4 <task_lcd+0x18>)
  421fd0:	4798      	blx	r3
		lv_tick_inc(50);
  421fd2:	2032      	movs	r0, #50	; 0x32
  421fd4:	4b04      	ldr	r3, [pc, #16]	; (421fe8 <task_lcd+0x1c>)
  421fd6:	4798      	blx	r3
		lv_task_handler();
  421fd8:	4b04      	ldr	r3, [pc, #16]	; (421fec <task_lcd+0x20>)
  421fda:	4798      	blx	r3
		vTaskDelay(50);
  421fdc:	2032      	movs	r0, #50	; 0x32
  421fde:	4b04      	ldr	r3, [pc, #16]	; (421ff0 <task_lcd+0x24>)
  421fe0:	4798      	blx	r3
  421fe2:	e7f6      	b.n	421fd2 <task_lcd+0x6>
  421fe4:	00421d7d 	.word	0x00421d7d
  421fe8:	00414ced 	.word	0x00414ced
  421fec:	0041728d 	.word	0x0041728d
  421ff0:	0040297d 	.word	0x0040297d

00421ff4 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  421ff4:	b530      	push	{r4, r5, lr}
  421ff6:	b099      	sub	sp, #100	; 0x64
	/* board and sys init */
	board_init();
  421ff8:	4b3e      	ldr	r3, [pc, #248]	; (4220f4 <main+0x100>)
  421ffa:	4798      	blx	r3
	sysclk_init();
  421ffc:	4b3e      	ldr	r3, [pc, #248]	; (4220f8 <main+0x104>)
  421ffe:	4798      	blx	r3
	configure_console();
  422000:	4b3e      	ldr	r3, [pc, #248]	; (4220fc <main+0x108>)
  422002:	4798      	blx	r3

	/* LCd int */
	configure_lcd();
  422004:	4b3e      	ldr	r3, [pc, #248]	; (422100 <main+0x10c>)
  422006:	4798      	blx	r3
	ili9341_init();
  422008:	4b3e      	ldr	r3, [pc, #248]	; (422104 <main+0x110>)
  42200a:	4798      	blx	r3
	configure_touch();
  42200c:	4b3e      	ldr	r3, [pc, #248]	; (422108 <main+0x114>)
  42200e:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  422010:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  422014:	4b3d      	ldr	r3, [pc, #244]	; (42210c <main+0x118>)
  422016:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();
	
	/*LittlevGL init*/
	lv_init();
  422018:	4b3d      	ldr	r3, [pc, #244]	; (422110 <main+0x11c>)
  42201a:	4798      	blx	r3
	lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
	lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  42201c:	a80b      	add	r0, sp, #44	; 0x2c
  42201e:	4b3d      	ldr	r3, [pc, #244]	; (422114 <main+0x120>)
  422020:	4798      	blx	r3
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  422022:	4c3d      	ldr	r4, [pc, #244]	; (422118 <main+0x124>)
  422024:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  422028:	2200      	movs	r2, #0
  42202a:	493c      	ldr	r1, [pc, #240]	; (42211c <main+0x128>)
  42202c:	4620      	mov	r0, r4
  42202e:	4d3c      	ldr	r5, [pc, #240]	; (422120 <main+0x12c>)
  422030:	47a8      	blx	r5
	disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  422032:	940c      	str	r4, [sp, #48]	; 0x30
	disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  422034:	4b3b      	ldr	r3, [pc, #236]	; (422124 <main+0x130>)
  422036:	930e      	str	r3, [sp, #56]	; 0x38
	lv_disp_t * disp;
	disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  422038:	a80b      	add	r0, sp, #44	; 0x2c
  42203a:	4b3b      	ldr	r3, [pc, #236]	; (422128 <main+0x134>)
  42203c:	4798      	blx	r3
	
	/* Init input on LVGL */
	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  42203e:	a804      	add	r0, sp, #16
  422040:	4b3a      	ldr	r3, [pc, #232]	; (42212c <main+0x138>)
  422042:	4798      	blx	r3
	indev_drv.type = LV_INDEV_TYPE_POINTER;
  422044:	2401      	movs	r4, #1
  422046:	f88d 4010 	strb.w	r4, [sp, #16]
	indev_drv.read_cb = my_input_read;
  42204a:	4b39      	ldr	r3, [pc, #228]	; (422130 <main+0x13c>)
  42204c:	9305      	str	r3, [sp, #20]
	/*Register the driver in LVGL and save the created input device object*/
	lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  42204e:	a804      	add	r0, sp, #16
  422050:	4b38      	ldr	r3, [pc, #224]	; (422134 <main+0x140>)
  422052:	4798      	blx	r3
	
	xQueueOx = xQueueCreate(32, sizeof(char));
  422054:	2200      	movs	r2, #0
  422056:	4621      	mov	r1, r4
  422058:	2020      	movs	r0, #32
  42205a:	4d37      	ldr	r5, [pc, #220]	; (422138 <main+0x144>)
  42205c:	47a8      	blx	r5
  42205e:	4b37      	ldr	r3, [pc, #220]	; (42213c <main+0x148>)
  422060:	6018      	str	r0, [r3, #0]
	xSemaphore = xSemaphoreCreateBinary();
  422062:	2203      	movs	r2, #3
  422064:	2100      	movs	r1, #0
  422066:	4620      	mov	r0, r4
  422068:	47a8      	blx	r5
  42206a:	4b35      	ldr	r3, [pc, #212]	; (422140 <main+0x14c>)
  42206c:	6018      	str	r0, [r3, #0]

	if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  42206e:	2300      	movs	r3, #0
  422070:	9303      	str	r3, [sp, #12]
  422072:	9302      	str	r3, [sp, #8]
  422074:	9301      	str	r3, [sp, #4]
  422076:	9300      	str	r3, [sp, #0]
  422078:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  42207c:	4931      	ldr	r1, [pc, #196]	; (422144 <main+0x150>)
  42207e:	4832      	ldr	r0, [pc, #200]	; (422148 <main+0x154>)
  422080:	4c32      	ldr	r4, [pc, #200]	; (42214c <main+0x158>)
  422082:	47a0      	blx	r4
  422084:	2801      	cmp	r0, #1
  422086:	d002      	beq.n	42208e <main+0x9a>
		printf("Failed to create lcd task\r\n");
  422088:	4831      	ldr	r0, [pc, #196]	; (422150 <main+0x15c>)
  42208a:	4b32      	ldr	r3, [pc, #200]	; (422154 <main+0x160>)
  42208c:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_clock, "RTC", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  42208e:	2300      	movs	r3, #0
  422090:	9303      	str	r3, [sp, #12]
  422092:	9302      	str	r3, [sp, #8]
  422094:	9301      	str	r3, [sp, #4]
  422096:	9300      	str	r3, [sp, #0]
  422098:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  42209c:	492e      	ldr	r1, [pc, #184]	; (422158 <main+0x164>)
  42209e:	482f      	ldr	r0, [pc, #188]	; (42215c <main+0x168>)
  4220a0:	4c2a      	ldr	r4, [pc, #168]	; (42214c <main+0x158>)
  4220a2:	47a0      	blx	r4
  4220a4:	2801      	cmp	r0, #1
  4220a6:	d002      	beq.n	4220ae <main+0xba>
		printf("Failed to create RTC task\r\n");
  4220a8:	482d      	ldr	r0, [pc, #180]	; (422160 <main+0x16c>)
  4220aa:	4b2a      	ldr	r3, [pc, #168]	; (422154 <main+0x160>)
  4220ac:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  4220ae:	2300      	movs	r3, #0
  4220b0:	9303      	str	r3, [sp, #12]
  4220b2:	9302      	str	r3, [sp, #8]
  4220b4:	9301      	str	r3, [sp, #4]
  4220b6:	9300      	str	r3, [sp, #0]
  4220b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4220bc:	4929      	ldr	r1, [pc, #164]	; (422164 <main+0x170>)
  4220be:	482a      	ldr	r0, [pc, #168]	; (422168 <main+0x174>)
  4220c0:	4c22      	ldr	r4, [pc, #136]	; (42214c <main+0x158>)
  4220c2:	47a0      	blx	r4
  4220c4:	2801      	cmp	r0, #1
  4220c6:	d002      	beq.n	4220ce <main+0xda>
		printf("Failed to create APS task\r\n");
  4220c8:	4828      	ldr	r0, [pc, #160]	; (42216c <main+0x178>)
  4220ca:	4b22      	ldr	r3, [pc, #136]	; (422154 <main+0x160>)
  4220cc:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_main, "main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  4220ce:	2300      	movs	r3, #0
  4220d0:	9303      	str	r3, [sp, #12]
  4220d2:	9302      	str	r3, [sp, #8]
  4220d4:	9301      	str	r3, [sp, #4]
  4220d6:	9300      	str	r3, [sp, #0]
  4220d8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4220dc:	4924      	ldr	r1, [pc, #144]	; (422170 <main+0x17c>)
  4220de:	4825      	ldr	r0, [pc, #148]	; (422174 <main+0x180>)
  4220e0:	4c1a      	ldr	r4, [pc, #104]	; (42214c <main+0x158>)
  4220e2:	47a0      	blx	r4
  4220e4:	2801      	cmp	r0, #1
  4220e6:	d002      	beq.n	4220ee <main+0xfa>
		printf("Failed to create Main task\r\n");
  4220e8:	4823      	ldr	r0, [pc, #140]	; (422178 <main+0x184>)
  4220ea:	4b1a      	ldr	r3, [pc, #104]	; (422154 <main+0x160>)
  4220ec:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  4220ee:	4b23      	ldr	r3, [pc, #140]	; (42217c <main+0x188>)
  4220f0:	4798      	blx	r3
  4220f2:	e7fe      	b.n	4220f2 <main+0xfe>
  4220f4:	00420ae5 	.word	0x00420ae5
  4220f8:	004208f1 	.word	0x004208f1
  4220fc:	00421add 	.word	0x00421add
  422100:	00421aa1 	.word	0x00421aa1
  422104:	0040134d 	.word	0x0040134d
  422108:	00400839 	.word	0x00400839
  42210c:	400e1200 	.word	0x400e1200
  422110:	00405421 	.word	0x00405421
  422114:	00414875 	.word	0x00414875
  422118:	2043a068 	.word	0x2043a068
  42211c:	20414868 	.word	0x20414868
  422120:	004148cd 	.word	0x004148cd
  422124:	00421859 	.word	0x00421859
  422128:	00414a7d 	.word	0x00414a7d
  42212c:	00414bb5 	.word	0x00414bb5
  422130:	004218b1 	.word	0x004218b1
  422134:	00414be1 	.word	0x00414be1
  422138:	00401ccd 	.word	0x00401ccd
  42213c:	2043a340 	.word	0x2043a340
  422140:	2043a338 	.word	0x2043a338
  422144:	0042db10 	.word	0x0042db10
  422148:	00421fcd 	.word	0x00421fcd
  42214c:	00402525 	.word	0x00402525
  422150:	0042db14 	.word	0x0042db14
  422154:	00422dd5 	.word	0x00422dd5
  422158:	0042db30 	.word	0x0042db30
  42215c:	00421cc1 	.word	0x00421cc1
  422160:	0042db34 	.word	0x0042db34
  422164:	0042db50 	.word	0x0042db50
  422168:	00400389 	.word	0x00400389
  42216c:	0042db58 	.word	0x0042db58
  422170:	0042db74 	.word	0x0042db74
  422174:	004218dd 	.word	0x004218dd
  422178:	0042db7c 	.word	0x0042db7c
  42217c:	0040267d 	.word	0x0040267d

00422180 <arm_sin_f32>:
  422180:	ee06 0a90 	vmov	s13, r0
  422184:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 4221f4 <arm_sin_f32+0x74>
  422188:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  42218c:	ee26 7a87 	vmul.f32	s14, s13, s14
  422190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  422194:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  422198:	d504      	bpl.n	4221a4 <arm_sin_f32+0x24>
  42219a:	ee17 3a90 	vmov	r3, s15
  42219e:	3b01      	subs	r3, #1
  4221a0:	ee07 3a90 	vmov	s15, r3
  4221a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4221a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 4221f8 <arm_sin_f32+0x78>
  4221ac:	ee77 7a67 	vsub.f32	s15, s14, s15
  4221b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4221b4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  4221b8:	ee17 3a10 	vmov	r3, s14
  4221bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4221c0:	ee07 3a10 	vmov	s14, r3
  4221c4:	eef8 6a47 	vcvt.f32.u32	s13, s14
  4221c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4221cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
  4221d0:	4a0a      	ldr	r2, [pc, #40]	; (4221fc <arm_sin_f32+0x7c>)
  4221d2:	ee37 7a67 	vsub.f32	s14, s14, s15
  4221d6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  4221da:	ed91 6a00 	vldr	s12, [r1]
  4221de:	edd1 6a01 	vldr	s13, [r1, #4]
  4221e2:	ee27 7a06 	vmul.f32	s14, s14, s12
  4221e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4221ea:	ee77 7a27 	vadd.f32	s15, s14, s15
  4221ee:	ee17 0a90 	vmov	r0, s15
  4221f2:	4770      	bx	lr
  4221f4:	3e22f983 	.word	0x3e22f983
  4221f8:	44000000 	.word	0x44000000
  4221fc:	0042dbdc 	.word	0x0042dbdc

00422200 <__aeabi_drsub>:
  422200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  422204:	e002      	b.n	42220c <__adddf3>
  422206:	bf00      	nop

00422208 <__aeabi_dsub>:
  422208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0042220c <__adddf3>:
  42220c:	b530      	push	{r4, r5, lr}
  42220e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  422212:	ea4f 0543 	mov.w	r5, r3, lsl #1
  422216:	ea94 0f05 	teq	r4, r5
  42221a:	bf08      	it	eq
  42221c:	ea90 0f02 	teqeq	r0, r2
  422220:	bf1f      	itttt	ne
  422222:	ea54 0c00 	orrsne.w	ip, r4, r0
  422226:	ea55 0c02 	orrsne.w	ip, r5, r2
  42222a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  42222e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  422232:	f000 80e2 	beq.w	4223fa <__adddf3+0x1ee>
  422236:	ea4f 5454 	mov.w	r4, r4, lsr #21
  42223a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  42223e:	bfb8      	it	lt
  422240:	426d      	neglt	r5, r5
  422242:	dd0c      	ble.n	42225e <__adddf3+0x52>
  422244:	442c      	add	r4, r5
  422246:	ea80 0202 	eor.w	r2, r0, r2
  42224a:	ea81 0303 	eor.w	r3, r1, r3
  42224e:	ea82 0000 	eor.w	r0, r2, r0
  422252:	ea83 0101 	eor.w	r1, r3, r1
  422256:	ea80 0202 	eor.w	r2, r0, r2
  42225a:	ea81 0303 	eor.w	r3, r1, r3
  42225e:	2d36      	cmp	r5, #54	; 0x36
  422260:	bf88      	it	hi
  422262:	bd30      	pophi	{r4, r5, pc}
  422264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  422268:	ea4f 3101 	mov.w	r1, r1, lsl #12
  42226c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  422270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  422274:	d002      	beq.n	42227c <__adddf3+0x70>
  422276:	4240      	negs	r0, r0
  422278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42227c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  422280:	ea4f 3303 	mov.w	r3, r3, lsl #12
  422284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  422288:	d002      	beq.n	422290 <__adddf3+0x84>
  42228a:	4252      	negs	r2, r2
  42228c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  422290:	ea94 0f05 	teq	r4, r5
  422294:	f000 80a7 	beq.w	4223e6 <__adddf3+0x1da>
  422298:	f1a4 0401 	sub.w	r4, r4, #1
  42229c:	f1d5 0e20 	rsbs	lr, r5, #32
  4222a0:	db0d      	blt.n	4222be <__adddf3+0xb2>
  4222a2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4222a6:	fa22 f205 	lsr.w	r2, r2, r5
  4222aa:	1880      	adds	r0, r0, r2
  4222ac:	f141 0100 	adc.w	r1, r1, #0
  4222b0:	fa03 f20e 	lsl.w	r2, r3, lr
  4222b4:	1880      	adds	r0, r0, r2
  4222b6:	fa43 f305 	asr.w	r3, r3, r5
  4222ba:	4159      	adcs	r1, r3
  4222bc:	e00e      	b.n	4222dc <__adddf3+0xd0>
  4222be:	f1a5 0520 	sub.w	r5, r5, #32
  4222c2:	f10e 0e20 	add.w	lr, lr, #32
  4222c6:	2a01      	cmp	r2, #1
  4222c8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4222cc:	bf28      	it	cs
  4222ce:	f04c 0c02 	orrcs.w	ip, ip, #2
  4222d2:	fa43 f305 	asr.w	r3, r3, r5
  4222d6:	18c0      	adds	r0, r0, r3
  4222d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4222dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4222e0:	d507      	bpl.n	4222f2 <__adddf3+0xe6>
  4222e2:	f04f 0e00 	mov.w	lr, #0
  4222e6:	f1dc 0c00 	rsbs	ip, ip, #0
  4222ea:	eb7e 0000 	sbcs.w	r0, lr, r0
  4222ee:	eb6e 0101 	sbc.w	r1, lr, r1
  4222f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4222f6:	d31b      	bcc.n	422330 <__adddf3+0x124>
  4222f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4222fc:	d30c      	bcc.n	422318 <__adddf3+0x10c>
  4222fe:	0849      	lsrs	r1, r1, #1
  422300:	ea5f 0030 	movs.w	r0, r0, rrx
  422304:	ea4f 0c3c 	mov.w	ip, ip, rrx
  422308:	f104 0401 	add.w	r4, r4, #1
  42230c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  422310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  422314:	f080 809a 	bcs.w	42244c <__adddf3+0x240>
  422318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  42231c:	bf08      	it	eq
  42231e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  422322:	f150 0000 	adcs.w	r0, r0, #0
  422326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42232a:	ea41 0105 	orr.w	r1, r1, r5
  42232e:	bd30      	pop	{r4, r5, pc}
  422330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  422334:	4140      	adcs	r0, r0
  422336:	eb41 0101 	adc.w	r1, r1, r1
  42233a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42233e:	f1a4 0401 	sub.w	r4, r4, #1
  422342:	d1e9      	bne.n	422318 <__adddf3+0x10c>
  422344:	f091 0f00 	teq	r1, #0
  422348:	bf04      	itt	eq
  42234a:	4601      	moveq	r1, r0
  42234c:	2000      	moveq	r0, #0
  42234e:	fab1 f381 	clz	r3, r1
  422352:	bf08      	it	eq
  422354:	3320      	addeq	r3, #32
  422356:	f1a3 030b 	sub.w	r3, r3, #11
  42235a:	f1b3 0220 	subs.w	r2, r3, #32
  42235e:	da0c      	bge.n	42237a <__adddf3+0x16e>
  422360:	320c      	adds	r2, #12
  422362:	dd08      	ble.n	422376 <__adddf3+0x16a>
  422364:	f102 0c14 	add.w	ip, r2, #20
  422368:	f1c2 020c 	rsb	r2, r2, #12
  42236c:	fa01 f00c 	lsl.w	r0, r1, ip
  422370:	fa21 f102 	lsr.w	r1, r1, r2
  422374:	e00c      	b.n	422390 <__adddf3+0x184>
  422376:	f102 0214 	add.w	r2, r2, #20
  42237a:	bfd8      	it	le
  42237c:	f1c2 0c20 	rsble	ip, r2, #32
  422380:	fa01 f102 	lsl.w	r1, r1, r2
  422384:	fa20 fc0c 	lsr.w	ip, r0, ip
  422388:	bfdc      	itt	le
  42238a:	ea41 010c 	orrle.w	r1, r1, ip
  42238e:	4090      	lslle	r0, r2
  422390:	1ae4      	subs	r4, r4, r3
  422392:	bfa2      	ittt	ge
  422394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  422398:	4329      	orrge	r1, r5
  42239a:	bd30      	popge	{r4, r5, pc}
  42239c:	ea6f 0404 	mvn.w	r4, r4
  4223a0:	3c1f      	subs	r4, #31
  4223a2:	da1c      	bge.n	4223de <__adddf3+0x1d2>
  4223a4:	340c      	adds	r4, #12
  4223a6:	dc0e      	bgt.n	4223c6 <__adddf3+0x1ba>
  4223a8:	f104 0414 	add.w	r4, r4, #20
  4223ac:	f1c4 0220 	rsb	r2, r4, #32
  4223b0:	fa20 f004 	lsr.w	r0, r0, r4
  4223b4:	fa01 f302 	lsl.w	r3, r1, r2
  4223b8:	ea40 0003 	orr.w	r0, r0, r3
  4223bc:	fa21 f304 	lsr.w	r3, r1, r4
  4223c0:	ea45 0103 	orr.w	r1, r5, r3
  4223c4:	bd30      	pop	{r4, r5, pc}
  4223c6:	f1c4 040c 	rsb	r4, r4, #12
  4223ca:	f1c4 0220 	rsb	r2, r4, #32
  4223ce:	fa20 f002 	lsr.w	r0, r0, r2
  4223d2:	fa01 f304 	lsl.w	r3, r1, r4
  4223d6:	ea40 0003 	orr.w	r0, r0, r3
  4223da:	4629      	mov	r1, r5
  4223dc:	bd30      	pop	{r4, r5, pc}
  4223de:	fa21 f004 	lsr.w	r0, r1, r4
  4223e2:	4629      	mov	r1, r5
  4223e4:	bd30      	pop	{r4, r5, pc}
  4223e6:	f094 0f00 	teq	r4, #0
  4223ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4223ee:	bf06      	itte	eq
  4223f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4223f4:	3401      	addeq	r4, #1
  4223f6:	3d01      	subne	r5, #1
  4223f8:	e74e      	b.n	422298 <__adddf3+0x8c>
  4223fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4223fe:	bf18      	it	ne
  422400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  422404:	d029      	beq.n	42245a <__adddf3+0x24e>
  422406:	ea94 0f05 	teq	r4, r5
  42240a:	bf08      	it	eq
  42240c:	ea90 0f02 	teqeq	r0, r2
  422410:	d005      	beq.n	42241e <__adddf3+0x212>
  422412:	ea54 0c00 	orrs.w	ip, r4, r0
  422416:	bf04      	itt	eq
  422418:	4619      	moveq	r1, r3
  42241a:	4610      	moveq	r0, r2
  42241c:	bd30      	pop	{r4, r5, pc}
  42241e:	ea91 0f03 	teq	r1, r3
  422422:	bf1e      	ittt	ne
  422424:	2100      	movne	r1, #0
  422426:	2000      	movne	r0, #0
  422428:	bd30      	popne	{r4, r5, pc}
  42242a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  42242e:	d105      	bne.n	42243c <__adddf3+0x230>
  422430:	0040      	lsls	r0, r0, #1
  422432:	4149      	adcs	r1, r1
  422434:	bf28      	it	cs
  422436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  42243a:	bd30      	pop	{r4, r5, pc}
  42243c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  422440:	bf3c      	itt	cc
  422442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  422446:	bd30      	popcc	{r4, r5, pc}
  422448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  42244c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  422450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  422454:	f04f 0000 	mov.w	r0, #0
  422458:	bd30      	pop	{r4, r5, pc}
  42245a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  42245e:	bf1a      	itte	ne
  422460:	4619      	movne	r1, r3
  422462:	4610      	movne	r0, r2
  422464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  422468:	bf1c      	itt	ne
  42246a:	460b      	movne	r3, r1
  42246c:	4602      	movne	r2, r0
  42246e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  422472:	bf06      	itte	eq
  422474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  422478:	ea91 0f03 	teqeq	r1, r3
  42247c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  422480:	bd30      	pop	{r4, r5, pc}
  422482:	bf00      	nop

00422484 <__aeabi_ui2d>:
  422484:	f090 0f00 	teq	r0, #0
  422488:	bf04      	itt	eq
  42248a:	2100      	moveq	r1, #0
  42248c:	4770      	bxeq	lr
  42248e:	b530      	push	{r4, r5, lr}
  422490:	f44f 6480 	mov.w	r4, #1024	; 0x400
  422494:	f104 0432 	add.w	r4, r4, #50	; 0x32
  422498:	f04f 0500 	mov.w	r5, #0
  42249c:	f04f 0100 	mov.w	r1, #0
  4224a0:	e750      	b.n	422344 <__adddf3+0x138>
  4224a2:	bf00      	nop

004224a4 <__aeabi_i2d>:
  4224a4:	f090 0f00 	teq	r0, #0
  4224a8:	bf04      	itt	eq
  4224aa:	2100      	moveq	r1, #0
  4224ac:	4770      	bxeq	lr
  4224ae:	b530      	push	{r4, r5, lr}
  4224b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4224b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4224b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4224bc:	bf48      	it	mi
  4224be:	4240      	negmi	r0, r0
  4224c0:	f04f 0100 	mov.w	r1, #0
  4224c4:	e73e      	b.n	422344 <__adddf3+0x138>
  4224c6:	bf00      	nop

004224c8 <__aeabi_f2d>:
  4224c8:	0042      	lsls	r2, r0, #1
  4224ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4224ce:	ea4f 0131 	mov.w	r1, r1, rrx
  4224d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4224d6:	bf1f      	itttt	ne
  4224d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4224dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4224e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4224e4:	4770      	bxne	lr
  4224e6:	f092 0f00 	teq	r2, #0
  4224ea:	bf14      	ite	ne
  4224ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4224f0:	4770      	bxeq	lr
  4224f2:	b530      	push	{r4, r5, lr}
  4224f4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4224f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4224fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  422500:	e720      	b.n	422344 <__adddf3+0x138>
  422502:	bf00      	nop

00422504 <__aeabi_ul2d>:
  422504:	ea50 0201 	orrs.w	r2, r0, r1
  422508:	bf08      	it	eq
  42250a:	4770      	bxeq	lr
  42250c:	b530      	push	{r4, r5, lr}
  42250e:	f04f 0500 	mov.w	r5, #0
  422512:	e00a      	b.n	42252a <__aeabi_l2d+0x16>

00422514 <__aeabi_l2d>:
  422514:	ea50 0201 	orrs.w	r2, r0, r1
  422518:	bf08      	it	eq
  42251a:	4770      	bxeq	lr
  42251c:	b530      	push	{r4, r5, lr}
  42251e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  422522:	d502      	bpl.n	42252a <__aeabi_l2d+0x16>
  422524:	4240      	negs	r0, r0
  422526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42252a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  42252e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  422532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  422536:	f43f aedc 	beq.w	4222f2 <__adddf3+0xe6>
  42253a:	f04f 0203 	mov.w	r2, #3
  42253e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  422542:	bf18      	it	ne
  422544:	3203      	addne	r2, #3
  422546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  42254a:	bf18      	it	ne
  42254c:	3203      	addne	r2, #3
  42254e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  422552:	f1c2 0320 	rsb	r3, r2, #32
  422556:	fa00 fc03 	lsl.w	ip, r0, r3
  42255a:	fa20 f002 	lsr.w	r0, r0, r2
  42255e:	fa01 fe03 	lsl.w	lr, r1, r3
  422562:	ea40 000e 	orr.w	r0, r0, lr
  422566:	fa21 f102 	lsr.w	r1, r1, r2
  42256a:	4414      	add	r4, r2
  42256c:	e6c1      	b.n	4222f2 <__adddf3+0xe6>
  42256e:	bf00      	nop

00422570 <__aeabi_dmul>:
  422570:	b570      	push	{r4, r5, r6, lr}
  422572:	f04f 0cff 	mov.w	ip, #255	; 0xff
  422576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  42257a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  42257e:	bf1d      	ittte	ne
  422580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  422584:	ea94 0f0c 	teqne	r4, ip
  422588:	ea95 0f0c 	teqne	r5, ip
  42258c:	f000 f8de 	bleq	42274c <__aeabi_dmul+0x1dc>
  422590:	442c      	add	r4, r5
  422592:	ea81 0603 	eor.w	r6, r1, r3
  422596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  42259a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  42259e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4225a2:	bf18      	it	ne
  4225a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4225a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4225ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4225b0:	d038      	beq.n	422624 <__aeabi_dmul+0xb4>
  4225b2:	fba0 ce02 	umull	ip, lr, r0, r2
  4225b6:	f04f 0500 	mov.w	r5, #0
  4225ba:	fbe1 e502 	umlal	lr, r5, r1, r2
  4225be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4225c2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4225c6:	f04f 0600 	mov.w	r6, #0
  4225ca:	fbe1 5603 	umlal	r5, r6, r1, r3
  4225ce:	f09c 0f00 	teq	ip, #0
  4225d2:	bf18      	it	ne
  4225d4:	f04e 0e01 	orrne.w	lr, lr, #1
  4225d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4225dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4225e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4225e4:	d204      	bcs.n	4225f0 <__aeabi_dmul+0x80>
  4225e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4225ea:	416d      	adcs	r5, r5
  4225ec:	eb46 0606 	adc.w	r6, r6, r6
  4225f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4225f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4225f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4225fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  422600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  422604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  422608:	bf88      	it	hi
  42260a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  42260e:	d81e      	bhi.n	42264e <__aeabi_dmul+0xde>
  422610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  422614:	bf08      	it	eq
  422616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  42261a:	f150 0000 	adcs.w	r0, r0, #0
  42261e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  422622:	bd70      	pop	{r4, r5, r6, pc}
  422624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  422628:	ea46 0101 	orr.w	r1, r6, r1
  42262c:	ea40 0002 	orr.w	r0, r0, r2
  422630:	ea81 0103 	eor.w	r1, r1, r3
  422634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  422638:	bfc2      	ittt	gt
  42263a:	ebd4 050c 	rsbsgt	r5, r4, ip
  42263e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  422642:	bd70      	popgt	{r4, r5, r6, pc}
  422644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  422648:	f04f 0e00 	mov.w	lr, #0
  42264c:	3c01      	subs	r4, #1
  42264e:	f300 80ab 	bgt.w	4227a8 <__aeabi_dmul+0x238>
  422652:	f114 0f36 	cmn.w	r4, #54	; 0x36
  422656:	bfde      	ittt	le
  422658:	2000      	movle	r0, #0
  42265a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  42265e:	bd70      	pople	{r4, r5, r6, pc}
  422660:	f1c4 0400 	rsb	r4, r4, #0
  422664:	3c20      	subs	r4, #32
  422666:	da35      	bge.n	4226d4 <__aeabi_dmul+0x164>
  422668:	340c      	adds	r4, #12
  42266a:	dc1b      	bgt.n	4226a4 <__aeabi_dmul+0x134>
  42266c:	f104 0414 	add.w	r4, r4, #20
  422670:	f1c4 0520 	rsb	r5, r4, #32
  422674:	fa00 f305 	lsl.w	r3, r0, r5
  422678:	fa20 f004 	lsr.w	r0, r0, r4
  42267c:	fa01 f205 	lsl.w	r2, r1, r5
  422680:	ea40 0002 	orr.w	r0, r0, r2
  422684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  422688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  42268c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  422690:	fa21 f604 	lsr.w	r6, r1, r4
  422694:	eb42 0106 	adc.w	r1, r2, r6
  422698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  42269c:	bf08      	it	eq
  42269e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4226a2:	bd70      	pop	{r4, r5, r6, pc}
  4226a4:	f1c4 040c 	rsb	r4, r4, #12
  4226a8:	f1c4 0520 	rsb	r5, r4, #32
  4226ac:	fa00 f304 	lsl.w	r3, r0, r4
  4226b0:	fa20 f005 	lsr.w	r0, r0, r5
  4226b4:	fa01 f204 	lsl.w	r2, r1, r4
  4226b8:	ea40 0002 	orr.w	r0, r0, r2
  4226bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4226c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4226c4:	f141 0100 	adc.w	r1, r1, #0
  4226c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4226cc:	bf08      	it	eq
  4226ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4226d2:	bd70      	pop	{r4, r5, r6, pc}
  4226d4:	f1c4 0520 	rsb	r5, r4, #32
  4226d8:	fa00 f205 	lsl.w	r2, r0, r5
  4226dc:	ea4e 0e02 	orr.w	lr, lr, r2
  4226e0:	fa20 f304 	lsr.w	r3, r0, r4
  4226e4:	fa01 f205 	lsl.w	r2, r1, r5
  4226e8:	ea43 0302 	orr.w	r3, r3, r2
  4226ec:	fa21 f004 	lsr.w	r0, r1, r4
  4226f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4226f4:	fa21 f204 	lsr.w	r2, r1, r4
  4226f8:	ea20 0002 	bic.w	r0, r0, r2
  4226fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  422700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  422704:	bf08      	it	eq
  422706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  42270a:	bd70      	pop	{r4, r5, r6, pc}
  42270c:	f094 0f00 	teq	r4, #0
  422710:	d10f      	bne.n	422732 <__aeabi_dmul+0x1c2>
  422712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  422716:	0040      	lsls	r0, r0, #1
  422718:	eb41 0101 	adc.w	r1, r1, r1
  42271c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  422720:	bf08      	it	eq
  422722:	3c01      	subeq	r4, #1
  422724:	d0f7      	beq.n	422716 <__aeabi_dmul+0x1a6>
  422726:	ea41 0106 	orr.w	r1, r1, r6
  42272a:	f095 0f00 	teq	r5, #0
  42272e:	bf18      	it	ne
  422730:	4770      	bxne	lr
  422732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  422736:	0052      	lsls	r2, r2, #1
  422738:	eb43 0303 	adc.w	r3, r3, r3
  42273c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  422740:	bf08      	it	eq
  422742:	3d01      	subeq	r5, #1
  422744:	d0f7      	beq.n	422736 <__aeabi_dmul+0x1c6>
  422746:	ea43 0306 	orr.w	r3, r3, r6
  42274a:	4770      	bx	lr
  42274c:	ea94 0f0c 	teq	r4, ip
  422750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  422754:	bf18      	it	ne
  422756:	ea95 0f0c 	teqne	r5, ip
  42275a:	d00c      	beq.n	422776 <__aeabi_dmul+0x206>
  42275c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  422760:	bf18      	it	ne
  422762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  422766:	d1d1      	bne.n	42270c <__aeabi_dmul+0x19c>
  422768:	ea81 0103 	eor.w	r1, r1, r3
  42276c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  422770:	f04f 0000 	mov.w	r0, #0
  422774:	bd70      	pop	{r4, r5, r6, pc}
  422776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  42277a:	bf06      	itte	eq
  42277c:	4610      	moveq	r0, r2
  42277e:	4619      	moveq	r1, r3
  422780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  422784:	d019      	beq.n	4227ba <__aeabi_dmul+0x24a>
  422786:	ea94 0f0c 	teq	r4, ip
  42278a:	d102      	bne.n	422792 <__aeabi_dmul+0x222>
  42278c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  422790:	d113      	bne.n	4227ba <__aeabi_dmul+0x24a>
  422792:	ea95 0f0c 	teq	r5, ip
  422796:	d105      	bne.n	4227a4 <__aeabi_dmul+0x234>
  422798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  42279c:	bf1c      	itt	ne
  42279e:	4610      	movne	r0, r2
  4227a0:	4619      	movne	r1, r3
  4227a2:	d10a      	bne.n	4227ba <__aeabi_dmul+0x24a>
  4227a4:	ea81 0103 	eor.w	r1, r1, r3
  4227a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4227ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4227b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4227b4:	f04f 0000 	mov.w	r0, #0
  4227b8:	bd70      	pop	{r4, r5, r6, pc}
  4227ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4227be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4227c2:	bd70      	pop	{r4, r5, r6, pc}

004227c4 <__aeabi_ddiv>:
  4227c4:	b570      	push	{r4, r5, r6, lr}
  4227c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4227ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4227ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4227d2:	bf1d      	ittte	ne
  4227d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4227d8:	ea94 0f0c 	teqne	r4, ip
  4227dc:	ea95 0f0c 	teqne	r5, ip
  4227e0:	f000 f8a7 	bleq	422932 <__aeabi_ddiv+0x16e>
  4227e4:	eba4 0405 	sub.w	r4, r4, r5
  4227e8:	ea81 0e03 	eor.w	lr, r1, r3
  4227ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4227f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4227f4:	f000 8088 	beq.w	422908 <__aeabi_ddiv+0x144>
  4227f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4227fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  422800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  422804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  422808:	ea4f 2202 	mov.w	r2, r2, lsl #8
  42280c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  422810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  422814:	ea4f 2600 	mov.w	r6, r0, lsl #8
  422818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  42281c:	429d      	cmp	r5, r3
  42281e:	bf08      	it	eq
  422820:	4296      	cmpeq	r6, r2
  422822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  422826:	f504 7440 	add.w	r4, r4, #768	; 0x300
  42282a:	d202      	bcs.n	422832 <__aeabi_ddiv+0x6e>
  42282c:	085b      	lsrs	r3, r3, #1
  42282e:	ea4f 0232 	mov.w	r2, r2, rrx
  422832:	1ab6      	subs	r6, r6, r2
  422834:	eb65 0503 	sbc.w	r5, r5, r3
  422838:	085b      	lsrs	r3, r3, #1
  42283a:	ea4f 0232 	mov.w	r2, r2, rrx
  42283e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  422842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  422846:	ebb6 0e02 	subs.w	lr, r6, r2
  42284a:	eb75 0e03 	sbcs.w	lr, r5, r3
  42284e:	bf22      	ittt	cs
  422850:	1ab6      	subcs	r6, r6, r2
  422852:	4675      	movcs	r5, lr
  422854:	ea40 000c 	orrcs.w	r0, r0, ip
  422858:	085b      	lsrs	r3, r3, #1
  42285a:	ea4f 0232 	mov.w	r2, r2, rrx
  42285e:	ebb6 0e02 	subs.w	lr, r6, r2
  422862:	eb75 0e03 	sbcs.w	lr, r5, r3
  422866:	bf22      	ittt	cs
  422868:	1ab6      	subcs	r6, r6, r2
  42286a:	4675      	movcs	r5, lr
  42286c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  422870:	085b      	lsrs	r3, r3, #1
  422872:	ea4f 0232 	mov.w	r2, r2, rrx
  422876:	ebb6 0e02 	subs.w	lr, r6, r2
  42287a:	eb75 0e03 	sbcs.w	lr, r5, r3
  42287e:	bf22      	ittt	cs
  422880:	1ab6      	subcs	r6, r6, r2
  422882:	4675      	movcs	r5, lr
  422884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  422888:	085b      	lsrs	r3, r3, #1
  42288a:	ea4f 0232 	mov.w	r2, r2, rrx
  42288e:	ebb6 0e02 	subs.w	lr, r6, r2
  422892:	eb75 0e03 	sbcs.w	lr, r5, r3
  422896:	bf22      	ittt	cs
  422898:	1ab6      	subcs	r6, r6, r2
  42289a:	4675      	movcs	r5, lr
  42289c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4228a0:	ea55 0e06 	orrs.w	lr, r5, r6
  4228a4:	d018      	beq.n	4228d8 <__aeabi_ddiv+0x114>
  4228a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4228aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4228ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4228b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4228b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4228ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4228be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4228c2:	d1c0      	bne.n	422846 <__aeabi_ddiv+0x82>
  4228c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4228c8:	d10b      	bne.n	4228e2 <__aeabi_ddiv+0x11e>
  4228ca:	ea41 0100 	orr.w	r1, r1, r0
  4228ce:	f04f 0000 	mov.w	r0, #0
  4228d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4228d6:	e7b6      	b.n	422846 <__aeabi_ddiv+0x82>
  4228d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4228dc:	bf04      	itt	eq
  4228de:	4301      	orreq	r1, r0
  4228e0:	2000      	moveq	r0, #0
  4228e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4228e6:	bf88      	it	hi
  4228e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4228ec:	f63f aeaf 	bhi.w	42264e <__aeabi_dmul+0xde>
  4228f0:	ebb5 0c03 	subs.w	ip, r5, r3
  4228f4:	bf04      	itt	eq
  4228f6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4228fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4228fe:	f150 0000 	adcs.w	r0, r0, #0
  422902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  422906:	bd70      	pop	{r4, r5, r6, pc}
  422908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  42290c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  422910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  422914:	bfc2      	ittt	gt
  422916:	ebd4 050c 	rsbsgt	r5, r4, ip
  42291a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  42291e:	bd70      	popgt	{r4, r5, r6, pc}
  422920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  422924:	f04f 0e00 	mov.w	lr, #0
  422928:	3c01      	subs	r4, #1
  42292a:	e690      	b.n	42264e <__aeabi_dmul+0xde>
  42292c:	ea45 0e06 	orr.w	lr, r5, r6
  422930:	e68d      	b.n	42264e <__aeabi_dmul+0xde>
  422932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  422936:	ea94 0f0c 	teq	r4, ip
  42293a:	bf08      	it	eq
  42293c:	ea95 0f0c 	teqeq	r5, ip
  422940:	f43f af3b 	beq.w	4227ba <__aeabi_dmul+0x24a>
  422944:	ea94 0f0c 	teq	r4, ip
  422948:	d10a      	bne.n	422960 <__aeabi_ddiv+0x19c>
  42294a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  42294e:	f47f af34 	bne.w	4227ba <__aeabi_dmul+0x24a>
  422952:	ea95 0f0c 	teq	r5, ip
  422956:	f47f af25 	bne.w	4227a4 <__aeabi_dmul+0x234>
  42295a:	4610      	mov	r0, r2
  42295c:	4619      	mov	r1, r3
  42295e:	e72c      	b.n	4227ba <__aeabi_dmul+0x24a>
  422960:	ea95 0f0c 	teq	r5, ip
  422964:	d106      	bne.n	422974 <__aeabi_ddiv+0x1b0>
  422966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  42296a:	f43f aefd 	beq.w	422768 <__aeabi_dmul+0x1f8>
  42296e:	4610      	mov	r0, r2
  422970:	4619      	mov	r1, r3
  422972:	e722      	b.n	4227ba <__aeabi_dmul+0x24a>
  422974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  422978:	bf18      	it	ne
  42297a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  42297e:	f47f aec5 	bne.w	42270c <__aeabi_dmul+0x19c>
  422982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  422986:	f47f af0d 	bne.w	4227a4 <__aeabi_dmul+0x234>
  42298a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  42298e:	f47f aeeb 	bne.w	422768 <__aeabi_dmul+0x1f8>
  422992:	e712      	b.n	4227ba <__aeabi_dmul+0x24a>

00422994 <__aeabi_d2uiz>:
  422994:	004a      	lsls	r2, r1, #1
  422996:	d211      	bcs.n	4229bc <__aeabi_d2uiz+0x28>
  422998:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  42299c:	d211      	bcs.n	4229c2 <__aeabi_d2uiz+0x2e>
  42299e:	d50d      	bpl.n	4229bc <__aeabi_d2uiz+0x28>
  4229a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4229a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4229a8:	d40e      	bmi.n	4229c8 <__aeabi_d2uiz+0x34>
  4229aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4229ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4229b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4229b6:	fa23 f002 	lsr.w	r0, r3, r2
  4229ba:	4770      	bx	lr
  4229bc:	f04f 0000 	mov.w	r0, #0
  4229c0:	4770      	bx	lr
  4229c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4229c6:	d102      	bne.n	4229ce <__aeabi_d2uiz+0x3a>
  4229c8:	f04f 30ff 	mov.w	r0, #4294967295
  4229cc:	4770      	bx	lr
  4229ce:	f04f 0000 	mov.w	r0, #0
  4229d2:	4770      	bx	lr

004229d4 <__aeabi_d2f>:
  4229d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4229d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4229dc:	bf24      	itt	cs
  4229de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4229e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4229e6:	d90d      	bls.n	422a04 <__aeabi_d2f+0x30>
  4229e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4229ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4229f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4229f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4229f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4229fc:	bf08      	it	eq
  4229fe:	f020 0001 	biceq.w	r0, r0, #1
  422a02:	4770      	bx	lr
  422a04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  422a08:	d121      	bne.n	422a4e <__aeabi_d2f+0x7a>
  422a0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  422a0e:	bfbc      	itt	lt
  422a10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  422a14:	4770      	bxlt	lr
  422a16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  422a1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
  422a1e:	f1c2 0218 	rsb	r2, r2, #24
  422a22:	f1c2 0c20 	rsb	ip, r2, #32
  422a26:	fa10 f30c 	lsls.w	r3, r0, ip
  422a2a:	fa20 f002 	lsr.w	r0, r0, r2
  422a2e:	bf18      	it	ne
  422a30:	f040 0001 	orrne.w	r0, r0, #1
  422a34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  422a38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  422a3c:	fa03 fc0c 	lsl.w	ip, r3, ip
  422a40:	ea40 000c 	orr.w	r0, r0, ip
  422a44:	fa23 f302 	lsr.w	r3, r3, r2
  422a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
  422a4c:	e7cc      	b.n	4229e8 <__aeabi_d2f+0x14>
  422a4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
  422a52:	d107      	bne.n	422a64 <__aeabi_d2f+0x90>
  422a54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  422a58:	bf1e      	ittt	ne
  422a5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  422a5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  422a62:	4770      	bxne	lr
  422a64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  422a68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  422a6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  422a70:	4770      	bx	lr
  422a72:	bf00      	nop

00422a74 <__aeabi_uldivmod>:
  422a74:	b953      	cbnz	r3, 422a8c <__aeabi_uldivmod+0x18>
  422a76:	b94a      	cbnz	r2, 422a8c <__aeabi_uldivmod+0x18>
  422a78:	2900      	cmp	r1, #0
  422a7a:	bf08      	it	eq
  422a7c:	2800      	cmpeq	r0, #0
  422a7e:	bf1c      	itt	ne
  422a80:	f04f 31ff 	movne.w	r1, #4294967295
  422a84:	f04f 30ff 	movne.w	r0, #4294967295
  422a88:	f000 b97a 	b.w	422d80 <__aeabi_idiv0>
  422a8c:	f1ad 0c08 	sub.w	ip, sp, #8
  422a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  422a94:	f000 f806 	bl	422aa4 <__udivmoddi4>
  422a98:	f8dd e004 	ldr.w	lr, [sp, #4]
  422a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  422aa0:	b004      	add	sp, #16
  422aa2:	4770      	bx	lr

00422aa4 <__udivmoddi4>:
  422aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  422aa8:	468c      	mov	ip, r1
  422aaa:	460d      	mov	r5, r1
  422aac:	4604      	mov	r4, r0
  422aae:	9e08      	ldr	r6, [sp, #32]
  422ab0:	2b00      	cmp	r3, #0
  422ab2:	d151      	bne.n	422b58 <__udivmoddi4+0xb4>
  422ab4:	428a      	cmp	r2, r1
  422ab6:	4617      	mov	r7, r2
  422ab8:	d96d      	bls.n	422b96 <__udivmoddi4+0xf2>
  422aba:	fab2 fe82 	clz	lr, r2
  422abe:	f1be 0f00 	cmp.w	lr, #0
  422ac2:	d00b      	beq.n	422adc <__udivmoddi4+0x38>
  422ac4:	f1ce 0c20 	rsb	ip, lr, #32
  422ac8:	fa01 f50e 	lsl.w	r5, r1, lr
  422acc:	fa20 fc0c 	lsr.w	ip, r0, ip
  422ad0:	fa02 f70e 	lsl.w	r7, r2, lr
  422ad4:	ea4c 0c05 	orr.w	ip, ip, r5
  422ad8:	fa00 f40e 	lsl.w	r4, r0, lr
  422adc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  422ae0:	0c25      	lsrs	r5, r4, #16
  422ae2:	fbbc f8fa 	udiv	r8, ip, sl
  422ae6:	fa1f f987 	uxth.w	r9, r7
  422aea:	fb0a cc18 	mls	ip, sl, r8, ip
  422aee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  422af2:	fb08 f309 	mul.w	r3, r8, r9
  422af6:	42ab      	cmp	r3, r5
  422af8:	d90a      	bls.n	422b10 <__udivmoddi4+0x6c>
  422afa:	19ed      	adds	r5, r5, r7
  422afc:	f108 32ff 	add.w	r2, r8, #4294967295
  422b00:	f080 8123 	bcs.w	422d4a <__udivmoddi4+0x2a6>
  422b04:	42ab      	cmp	r3, r5
  422b06:	f240 8120 	bls.w	422d4a <__udivmoddi4+0x2a6>
  422b0a:	f1a8 0802 	sub.w	r8, r8, #2
  422b0e:	443d      	add	r5, r7
  422b10:	1aed      	subs	r5, r5, r3
  422b12:	b2a4      	uxth	r4, r4
  422b14:	fbb5 f0fa 	udiv	r0, r5, sl
  422b18:	fb0a 5510 	mls	r5, sl, r0, r5
  422b1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  422b20:	fb00 f909 	mul.w	r9, r0, r9
  422b24:	45a1      	cmp	r9, r4
  422b26:	d909      	bls.n	422b3c <__udivmoddi4+0x98>
  422b28:	19e4      	adds	r4, r4, r7
  422b2a:	f100 33ff 	add.w	r3, r0, #4294967295
  422b2e:	f080 810a 	bcs.w	422d46 <__udivmoddi4+0x2a2>
  422b32:	45a1      	cmp	r9, r4
  422b34:	f240 8107 	bls.w	422d46 <__udivmoddi4+0x2a2>
  422b38:	3802      	subs	r0, #2
  422b3a:	443c      	add	r4, r7
  422b3c:	eba4 0409 	sub.w	r4, r4, r9
  422b40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  422b44:	2100      	movs	r1, #0
  422b46:	2e00      	cmp	r6, #0
  422b48:	d061      	beq.n	422c0e <__udivmoddi4+0x16a>
  422b4a:	fa24 f40e 	lsr.w	r4, r4, lr
  422b4e:	2300      	movs	r3, #0
  422b50:	6034      	str	r4, [r6, #0]
  422b52:	6073      	str	r3, [r6, #4]
  422b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  422b58:	428b      	cmp	r3, r1
  422b5a:	d907      	bls.n	422b6c <__udivmoddi4+0xc8>
  422b5c:	2e00      	cmp	r6, #0
  422b5e:	d054      	beq.n	422c0a <__udivmoddi4+0x166>
  422b60:	2100      	movs	r1, #0
  422b62:	e886 0021 	stmia.w	r6, {r0, r5}
  422b66:	4608      	mov	r0, r1
  422b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  422b6c:	fab3 f183 	clz	r1, r3
  422b70:	2900      	cmp	r1, #0
  422b72:	f040 808e 	bne.w	422c92 <__udivmoddi4+0x1ee>
  422b76:	42ab      	cmp	r3, r5
  422b78:	d302      	bcc.n	422b80 <__udivmoddi4+0xdc>
  422b7a:	4282      	cmp	r2, r0
  422b7c:	f200 80fa 	bhi.w	422d74 <__udivmoddi4+0x2d0>
  422b80:	1a84      	subs	r4, r0, r2
  422b82:	eb65 0503 	sbc.w	r5, r5, r3
  422b86:	2001      	movs	r0, #1
  422b88:	46ac      	mov	ip, r5
  422b8a:	2e00      	cmp	r6, #0
  422b8c:	d03f      	beq.n	422c0e <__udivmoddi4+0x16a>
  422b8e:	e886 1010 	stmia.w	r6, {r4, ip}
  422b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  422b96:	b912      	cbnz	r2, 422b9e <__udivmoddi4+0xfa>
  422b98:	2701      	movs	r7, #1
  422b9a:	fbb7 f7f2 	udiv	r7, r7, r2
  422b9e:	fab7 fe87 	clz	lr, r7
  422ba2:	f1be 0f00 	cmp.w	lr, #0
  422ba6:	d134      	bne.n	422c12 <__udivmoddi4+0x16e>
  422ba8:	1beb      	subs	r3, r5, r7
  422baa:	0c3a      	lsrs	r2, r7, #16
  422bac:	fa1f fc87 	uxth.w	ip, r7
  422bb0:	2101      	movs	r1, #1
  422bb2:	fbb3 f8f2 	udiv	r8, r3, r2
  422bb6:	0c25      	lsrs	r5, r4, #16
  422bb8:	fb02 3318 	mls	r3, r2, r8, r3
  422bbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  422bc0:	fb0c f308 	mul.w	r3, ip, r8
  422bc4:	42ab      	cmp	r3, r5
  422bc6:	d907      	bls.n	422bd8 <__udivmoddi4+0x134>
  422bc8:	19ed      	adds	r5, r5, r7
  422bca:	f108 30ff 	add.w	r0, r8, #4294967295
  422bce:	d202      	bcs.n	422bd6 <__udivmoddi4+0x132>
  422bd0:	42ab      	cmp	r3, r5
  422bd2:	f200 80d1 	bhi.w	422d78 <__udivmoddi4+0x2d4>
  422bd6:	4680      	mov	r8, r0
  422bd8:	1aed      	subs	r5, r5, r3
  422bda:	b2a3      	uxth	r3, r4
  422bdc:	fbb5 f0f2 	udiv	r0, r5, r2
  422be0:	fb02 5510 	mls	r5, r2, r0, r5
  422be4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  422be8:	fb0c fc00 	mul.w	ip, ip, r0
  422bec:	45a4      	cmp	ip, r4
  422bee:	d907      	bls.n	422c00 <__udivmoddi4+0x15c>
  422bf0:	19e4      	adds	r4, r4, r7
  422bf2:	f100 33ff 	add.w	r3, r0, #4294967295
  422bf6:	d202      	bcs.n	422bfe <__udivmoddi4+0x15a>
  422bf8:	45a4      	cmp	ip, r4
  422bfa:	f200 80b8 	bhi.w	422d6e <__udivmoddi4+0x2ca>
  422bfe:	4618      	mov	r0, r3
  422c00:	eba4 040c 	sub.w	r4, r4, ip
  422c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  422c08:	e79d      	b.n	422b46 <__udivmoddi4+0xa2>
  422c0a:	4631      	mov	r1, r6
  422c0c:	4630      	mov	r0, r6
  422c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  422c12:	f1ce 0420 	rsb	r4, lr, #32
  422c16:	fa05 f30e 	lsl.w	r3, r5, lr
  422c1a:	fa07 f70e 	lsl.w	r7, r7, lr
  422c1e:	fa20 f804 	lsr.w	r8, r0, r4
  422c22:	0c3a      	lsrs	r2, r7, #16
  422c24:	fa25 f404 	lsr.w	r4, r5, r4
  422c28:	ea48 0803 	orr.w	r8, r8, r3
  422c2c:	fbb4 f1f2 	udiv	r1, r4, r2
  422c30:	ea4f 4518 	mov.w	r5, r8, lsr #16
  422c34:	fb02 4411 	mls	r4, r2, r1, r4
  422c38:	fa1f fc87 	uxth.w	ip, r7
  422c3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  422c40:	fb01 f30c 	mul.w	r3, r1, ip
  422c44:	42ab      	cmp	r3, r5
  422c46:	fa00 f40e 	lsl.w	r4, r0, lr
  422c4a:	d909      	bls.n	422c60 <__udivmoddi4+0x1bc>
  422c4c:	19ed      	adds	r5, r5, r7
  422c4e:	f101 30ff 	add.w	r0, r1, #4294967295
  422c52:	f080 808a 	bcs.w	422d6a <__udivmoddi4+0x2c6>
  422c56:	42ab      	cmp	r3, r5
  422c58:	f240 8087 	bls.w	422d6a <__udivmoddi4+0x2c6>
  422c5c:	3902      	subs	r1, #2
  422c5e:	443d      	add	r5, r7
  422c60:	1aeb      	subs	r3, r5, r3
  422c62:	fa1f f588 	uxth.w	r5, r8
  422c66:	fbb3 f0f2 	udiv	r0, r3, r2
  422c6a:	fb02 3310 	mls	r3, r2, r0, r3
  422c6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  422c72:	fb00 f30c 	mul.w	r3, r0, ip
  422c76:	42ab      	cmp	r3, r5
  422c78:	d907      	bls.n	422c8a <__udivmoddi4+0x1e6>
  422c7a:	19ed      	adds	r5, r5, r7
  422c7c:	f100 38ff 	add.w	r8, r0, #4294967295
  422c80:	d26f      	bcs.n	422d62 <__udivmoddi4+0x2be>
  422c82:	42ab      	cmp	r3, r5
  422c84:	d96d      	bls.n	422d62 <__udivmoddi4+0x2be>
  422c86:	3802      	subs	r0, #2
  422c88:	443d      	add	r5, r7
  422c8a:	1aeb      	subs	r3, r5, r3
  422c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  422c90:	e78f      	b.n	422bb2 <__udivmoddi4+0x10e>
  422c92:	f1c1 0720 	rsb	r7, r1, #32
  422c96:	fa22 f807 	lsr.w	r8, r2, r7
  422c9a:	408b      	lsls	r3, r1
  422c9c:	fa05 f401 	lsl.w	r4, r5, r1
  422ca0:	ea48 0303 	orr.w	r3, r8, r3
  422ca4:	fa20 fe07 	lsr.w	lr, r0, r7
  422ca8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  422cac:	40fd      	lsrs	r5, r7
  422cae:	ea4e 0e04 	orr.w	lr, lr, r4
  422cb2:	fbb5 f9fc 	udiv	r9, r5, ip
  422cb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  422cba:	fb0c 5519 	mls	r5, ip, r9, r5
  422cbe:	fa1f f883 	uxth.w	r8, r3
  422cc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  422cc6:	fb09 f408 	mul.w	r4, r9, r8
  422cca:	42ac      	cmp	r4, r5
  422ccc:	fa02 f201 	lsl.w	r2, r2, r1
  422cd0:	fa00 fa01 	lsl.w	sl, r0, r1
  422cd4:	d908      	bls.n	422ce8 <__udivmoddi4+0x244>
  422cd6:	18ed      	adds	r5, r5, r3
  422cd8:	f109 30ff 	add.w	r0, r9, #4294967295
  422cdc:	d243      	bcs.n	422d66 <__udivmoddi4+0x2c2>
  422cde:	42ac      	cmp	r4, r5
  422ce0:	d941      	bls.n	422d66 <__udivmoddi4+0x2c2>
  422ce2:	f1a9 0902 	sub.w	r9, r9, #2
  422ce6:	441d      	add	r5, r3
  422ce8:	1b2d      	subs	r5, r5, r4
  422cea:	fa1f fe8e 	uxth.w	lr, lr
  422cee:	fbb5 f0fc 	udiv	r0, r5, ip
  422cf2:	fb0c 5510 	mls	r5, ip, r0, r5
  422cf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  422cfa:	fb00 f808 	mul.w	r8, r0, r8
  422cfe:	45a0      	cmp	r8, r4
  422d00:	d907      	bls.n	422d12 <__udivmoddi4+0x26e>
  422d02:	18e4      	adds	r4, r4, r3
  422d04:	f100 35ff 	add.w	r5, r0, #4294967295
  422d08:	d229      	bcs.n	422d5e <__udivmoddi4+0x2ba>
  422d0a:	45a0      	cmp	r8, r4
  422d0c:	d927      	bls.n	422d5e <__udivmoddi4+0x2ba>
  422d0e:	3802      	subs	r0, #2
  422d10:	441c      	add	r4, r3
  422d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  422d16:	eba4 0408 	sub.w	r4, r4, r8
  422d1a:	fba0 8902 	umull	r8, r9, r0, r2
  422d1e:	454c      	cmp	r4, r9
  422d20:	46c6      	mov	lr, r8
  422d22:	464d      	mov	r5, r9
  422d24:	d315      	bcc.n	422d52 <__udivmoddi4+0x2ae>
  422d26:	d012      	beq.n	422d4e <__udivmoddi4+0x2aa>
  422d28:	b156      	cbz	r6, 422d40 <__udivmoddi4+0x29c>
  422d2a:	ebba 030e 	subs.w	r3, sl, lr
  422d2e:	eb64 0405 	sbc.w	r4, r4, r5
  422d32:	fa04 f707 	lsl.w	r7, r4, r7
  422d36:	40cb      	lsrs	r3, r1
  422d38:	431f      	orrs	r7, r3
  422d3a:	40cc      	lsrs	r4, r1
  422d3c:	6037      	str	r7, [r6, #0]
  422d3e:	6074      	str	r4, [r6, #4]
  422d40:	2100      	movs	r1, #0
  422d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  422d46:	4618      	mov	r0, r3
  422d48:	e6f8      	b.n	422b3c <__udivmoddi4+0x98>
  422d4a:	4690      	mov	r8, r2
  422d4c:	e6e0      	b.n	422b10 <__udivmoddi4+0x6c>
  422d4e:	45c2      	cmp	sl, r8
  422d50:	d2ea      	bcs.n	422d28 <__udivmoddi4+0x284>
  422d52:	ebb8 0e02 	subs.w	lr, r8, r2
  422d56:	eb69 0503 	sbc.w	r5, r9, r3
  422d5a:	3801      	subs	r0, #1
  422d5c:	e7e4      	b.n	422d28 <__udivmoddi4+0x284>
  422d5e:	4628      	mov	r0, r5
  422d60:	e7d7      	b.n	422d12 <__udivmoddi4+0x26e>
  422d62:	4640      	mov	r0, r8
  422d64:	e791      	b.n	422c8a <__udivmoddi4+0x1e6>
  422d66:	4681      	mov	r9, r0
  422d68:	e7be      	b.n	422ce8 <__udivmoddi4+0x244>
  422d6a:	4601      	mov	r1, r0
  422d6c:	e778      	b.n	422c60 <__udivmoddi4+0x1bc>
  422d6e:	3802      	subs	r0, #2
  422d70:	443c      	add	r4, r7
  422d72:	e745      	b.n	422c00 <__udivmoddi4+0x15c>
  422d74:	4608      	mov	r0, r1
  422d76:	e708      	b.n	422b8a <__udivmoddi4+0xe6>
  422d78:	f1a8 0802 	sub.w	r8, r8, #2
  422d7c:	443d      	add	r5, r7
  422d7e:	e72b      	b.n	422bd8 <__udivmoddi4+0x134>

00422d80 <__aeabi_idiv0>:
  422d80:	4770      	bx	lr
  422d82:	bf00      	nop

00422d84 <__libc_init_array>:
  422d84:	b570      	push	{r4, r5, r6, lr}
  422d86:	4e0f      	ldr	r6, [pc, #60]	; (422dc4 <__libc_init_array+0x40>)
  422d88:	4d0f      	ldr	r5, [pc, #60]	; (422dc8 <__libc_init_array+0x44>)
  422d8a:	1b76      	subs	r6, r6, r5
  422d8c:	10b6      	asrs	r6, r6, #2
  422d8e:	bf18      	it	ne
  422d90:	2400      	movne	r4, #0
  422d92:	d005      	beq.n	422da0 <__libc_init_array+0x1c>
  422d94:	3401      	adds	r4, #1
  422d96:	f855 3b04 	ldr.w	r3, [r5], #4
  422d9a:	4798      	blx	r3
  422d9c:	42a6      	cmp	r6, r4
  422d9e:	d1f9      	bne.n	422d94 <__libc_init_array+0x10>
  422da0:	4e0a      	ldr	r6, [pc, #40]	; (422dcc <__libc_init_array+0x48>)
  422da2:	4d0b      	ldr	r5, [pc, #44]	; (422dd0 <__libc_init_array+0x4c>)
  422da4:	1b76      	subs	r6, r6, r5
  422da6:	f00b fbcf 	bl	42e548 <_init>
  422daa:	10b6      	asrs	r6, r6, #2
  422dac:	bf18      	it	ne
  422dae:	2400      	movne	r4, #0
  422db0:	d006      	beq.n	422dc0 <__libc_init_array+0x3c>
  422db2:	3401      	adds	r4, #1
  422db4:	f855 3b04 	ldr.w	r3, [r5], #4
  422db8:	4798      	blx	r3
  422dba:	42a6      	cmp	r6, r4
  422dbc:	d1f9      	bne.n	422db2 <__libc_init_array+0x2e>
  422dbe:	bd70      	pop	{r4, r5, r6, pc}
  422dc0:	bd70      	pop	{r4, r5, r6, pc}
  422dc2:	bf00      	nop
  422dc4:	0042e554 	.word	0x0042e554
  422dc8:	0042e554 	.word	0x0042e554
  422dcc:	0042e55c 	.word	0x0042e55c
  422dd0:	0042e554 	.word	0x0042e554

00422dd4 <iprintf>:
  422dd4:	b40f      	push	{r0, r1, r2, r3}
  422dd6:	b500      	push	{lr}
  422dd8:	4907      	ldr	r1, [pc, #28]	; (422df8 <iprintf+0x24>)
  422dda:	b083      	sub	sp, #12
  422ddc:	ab04      	add	r3, sp, #16
  422dde:	6808      	ldr	r0, [r1, #0]
  422de0:	f853 2b04 	ldr.w	r2, [r3], #4
  422de4:	6881      	ldr	r1, [r0, #8]
  422de6:	9301      	str	r3, [sp, #4]
  422de8:	f000 ff78 	bl	423cdc <_vfiprintf_r>
  422dec:	b003      	add	sp, #12
  422dee:	f85d eb04 	ldr.w	lr, [sp], #4
  422df2:	b004      	add	sp, #16
  422df4:	4770      	bx	lr
  422df6:	bf00      	nop
  422df8:	20400070 	.word	0x20400070

00422dfc <malloc>:
  422dfc:	4b02      	ldr	r3, [pc, #8]	; (422e08 <malloc+0xc>)
  422dfe:	4601      	mov	r1, r0
  422e00:	6818      	ldr	r0, [r3, #0]
  422e02:	f000 b803 	b.w	422e0c <_malloc_r>
  422e06:	bf00      	nop
  422e08:	20400070 	.word	0x20400070

00422e0c <_malloc_r>:
  422e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422e10:	f101 060b 	add.w	r6, r1, #11
  422e14:	2e16      	cmp	r6, #22
  422e16:	b083      	sub	sp, #12
  422e18:	4605      	mov	r5, r0
  422e1a:	f240 809e 	bls.w	422f5a <_malloc_r+0x14e>
  422e1e:	f036 0607 	bics.w	r6, r6, #7
  422e22:	f100 80bd 	bmi.w	422fa0 <_malloc_r+0x194>
  422e26:	42b1      	cmp	r1, r6
  422e28:	f200 80ba 	bhi.w	422fa0 <_malloc_r+0x194>
  422e2c:	f000 fbb6 	bl	42359c <__malloc_lock>
  422e30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  422e34:	f0c0 8293 	bcc.w	42335e <_malloc_r+0x552>
  422e38:	0a73      	lsrs	r3, r6, #9
  422e3a:	f000 80b8 	beq.w	422fae <_malloc_r+0x1a2>
  422e3e:	2b04      	cmp	r3, #4
  422e40:	f200 8179 	bhi.w	423136 <_malloc_r+0x32a>
  422e44:	09b3      	lsrs	r3, r6, #6
  422e46:	f103 0039 	add.w	r0, r3, #57	; 0x39
  422e4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  422e4e:	00c3      	lsls	r3, r0, #3
  422e50:	4fbf      	ldr	r7, [pc, #764]	; (423150 <_malloc_r+0x344>)
  422e52:	443b      	add	r3, r7
  422e54:	f1a3 0108 	sub.w	r1, r3, #8
  422e58:	685c      	ldr	r4, [r3, #4]
  422e5a:	42a1      	cmp	r1, r4
  422e5c:	d106      	bne.n	422e6c <_malloc_r+0x60>
  422e5e:	e00c      	b.n	422e7a <_malloc_r+0x6e>
  422e60:	2a00      	cmp	r2, #0
  422e62:	f280 80aa 	bge.w	422fba <_malloc_r+0x1ae>
  422e66:	68e4      	ldr	r4, [r4, #12]
  422e68:	42a1      	cmp	r1, r4
  422e6a:	d006      	beq.n	422e7a <_malloc_r+0x6e>
  422e6c:	6863      	ldr	r3, [r4, #4]
  422e6e:	f023 0303 	bic.w	r3, r3, #3
  422e72:	1b9a      	subs	r2, r3, r6
  422e74:	2a0f      	cmp	r2, #15
  422e76:	ddf3      	ble.n	422e60 <_malloc_r+0x54>
  422e78:	4670      	mov	r0, lr
  422e7a:	693c      	ldr	r4, [r7, #16]
  422e7c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 423164 <_malloc_r+0x358>
  422e80:	4574      	cmp	r4, lr
  422e82:	f000 81ab 	beq.w	4231dc <_malloc_r+0x3d0>
  422e86:	6863      	ldr	r3, [r4, #4]
  422e88:	f023 0303 	bic.w	r3, r3, #3
  422e8c:	1b9a      	subs	r2, r3, r6
  422e8e:	2a0f      	cmp	r2, #15
  422e90:	f300 8190 	bgt.w	4231b4 <_malloc_r+0x3a8>
  422e94:	2a00      	cmp	r2, #0
  422e96:	f8c7 e014 	str.w	lr, [r7, #20]
  422e9a:	f8c7 e010 	str.w	lr, [r7, #16]
  422e9e:	f280 809d 	bge.w	422fdc <_malloc_r+0x1d0>
  422ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  422ea6:	f080 8161 	bcs.w	42316c <_malloc_r+0x360>
  422eaa:	08db      	lsrs	r3, r3, #3
  422eac:	f103 0c01 	add.w	ip, r3, #1
  422eb0:	1099      	asrs	r1, r3, #2
  422eb2:	687a      	ldr	r2, [r7, #4]
  422eb4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  422eb8:	f8c4 8008 	str.w	r8, [r4, #8]
  422ebc:	2301      	movs	r3, #1
  422ebe:	408b      	lsls	r3, r1
  422ec0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  422ec4:	4313      	orrs	r3, r2
  422ec6:	3908      	subs	r1, #8
  422ec8:	60e1      	str	r1, [r4, #12]
  422eca:	607b      	str	r3, [r7, #4]
  422ecc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  422ed0:	f8c8 400c 	str.w	r4, [r8, #12]
  422ed4:	1082      	asrs	r2, r0, #2
  422ed6:	2401      	movs	r4, #1
  422ed8:	4094      	lsls	r4, r2
  422eda:	429c      	cmp	r4, r3
  422edc:	f200 808b 	bhi.w	422ff6 <_malloc_r+0x1ea>
  422ee0:	421c      	tst	r4, r3
  422ee2:	d106      	bne.n	422ef2 <_malloc_r+0xe6>
  422ee4:	f020 0003 	bic.w	r0, r0, #3
  422ee8:	0064      	lsls	r4, r4, #1
  422eea:	421c      	tst	r4, r3
  422eec:	f100 0004 	add.w	r0, r0, #4
  422ef0:	d0fa      	beq.n	422ee8 <_malloc_r+0xdc>
  422ef2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  422ef6:	46cc      	mov	ip, r9
  422ef8:	4680      	mov	r8, r0
  422efa:	f8dc 300c 	ldr.w	r3, [ip, #12]
  422efe:	459c      	cmp	ip, r3
  422f00:	d107      	bne.n	422f12 <_malloc_r+0x106>
  422f02:	e16d      	b.n	4231e0 <_malloc_r+0x3d4>
  422f04:	2a00      	cmp	r2, #0
  422f06:	f280 817b 	bge.w	423200 <_malloc_r+0x3f4>
  422f0a:	68db      	ldr	r3, [r3, #12]
  422f0c:	459c      	cmp	ip, r3
  422f0e:	f000 8167 	beq.w	4231e0 <_malloc_r+0x3d4>
  422f12:	6859      	ldr	r1, [r3, #4]
  422f14:	f021 0103 	bic.w	r1, r1, #3
  422f18:	1b8a      	subs	r2, r1, r6
  422f1a:	2a0f      	cmp	r2, #15
  422f1c:	ddf2      	ble.n	422f04 <_malloc_r+0xf8>
  422f1e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  422f22:	f8d3 8008 	ldr.w	r8, [r3, #8]
  422f26:	9300      	str	r3, [sp, #0]
  422f28:	199c      	adds	r4, r3, r6
  422f2a:	4628      	mov	r0, r5
  422f2c:	f046 0601 	orr.w	r6, r6, #1
  422f30:	f042 0501 	orr.w	r5, r2, #1
  422f34:	605e      	str	r6, [r3, #4]
  422f36:	f8c8 c00c 	str.w	ip, [r8, #12]
  422f3a:	f8cc 8008 	str.w	r8, [ip, #8]
  422f3e:	617c      	str	r4, [r7, #20]
  422f40:	613c      	str	r4, [r7, #16]
  422f42:	f8c4 e00c 	str.w	lr, [r4, #12]
  422f46:	f8c4 e008 	str.w	lr, [r4, #8]
  422f4a:	6065      	str	r5, [r4, #4]
  422f4c:	505a      	str	r2, [r3, r1]
  422f4e:	f000 fb2b 	bl	4235a8 <__malloc_unlock>
  422f52:	9b00      	ldr	r3, [sp, #0]
  422f54:	f103 0408 	add.w	r4, r3, #8
  422f58:	e01e      	b.n	422f98 <_malloc_r+0x18c>
  422f5a:	2910      	cmp	r1, #16
  422f5c:	d820      	bhi.n	422fa0 <_malloc_r+0x194>
  422f5e:	f000 fb1d 	bl	42359c <__malloc_lock>
  422f62:	2610      	movs	r6, #16
  422f64:	2318      	movs	r3, #24
  422f66:	2002      	movs	r0, #2
  422f68:	4f79      	ldr	r7, [pc, #484]	; (423150 <_malloc_r+0x344>)
  422f6a:	443b      	add	r3, r7
  422f6c:	f1a3 0208 	sub.w	r2, r3, #8
  422f70:	685c      	ldr	r4, [r3, #4]
  422f72:	4294      	cmp	r4, r2
  422f74:	f000 813d 	beq.w	4231f2 <_malloc_r+0x3e6>
  422f78:	6863      	ldr	r3, [r4, #4]
  422f7a:	68e1      	ldr	r1, [r4, #12]
  422f7c:	68a6      	ldr	r6, [r4, #8]
  422f7e:	f023 0303 	bic.w	r3, r3, #3
  422f82:	4423      	add	r3, r4
  422f84:	4628      	mov	r0, r5
  422f86:	685a      	ldr	r2, [r3, #4]
  422f88:	60f1      	str	r1, [r6, #12]
  422f8a:	f042 0201 	orr.w	r2, r2, #1
  422f8e:	608e      	str	r6, [r1, #8]
  422f90:	605a      	str	r2, [r3, #4]
  422f92:	f000 fb09 	bl	4235a8 <__malloc_unlock>
  422f96:	3408      	adds	r4, #8
  422f98:	4620      	mov	r0, r4
  422f9a:	b003      	add	sp, #12
  422f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422fa0:	2400      	movs	r4, #0
  422fa2:	230c      	movs	r3, #12
  422fa4:	4620      	mov	r0, r4
  422fa6:	602b      	str	r3, [r5, #0]
  422fa8:	b003      	add	sp, #12
  422faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422fae:	2040      	movs	r0, #64	; 0x40
  422fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
  422fb4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  422fb8:	e74a      	b.n	422e50 <_malloc_r+0x44>
  422fba:	4423      	add	r3, r4
  422fbc:	68e1      	ldr	r1, [r4, #12]
  422fbe:	685a      	ldr	r2, [r3, #4]
  422fc0:	68a6      	ldr	r6, [r4, #8]
  422fc2:	f042 0201 	orr.w	r2, r2, #1
  422fc6:	60f1      	str	r1, [r6, #12]
  422fc8:	4628      	mov	r0, r5
  422fca:	608e      	str	r6, [r1, #8]
  422fcc:	605a      	str	r2, [r3, #4]
  422fce:	f000 faeb 	bl	4235a8 <__malloc_unlock>
  422fd2:	3408      	adds	r4, #8
  422fd4:	4620      	mov	r0, r4
  422fd6:	b003      	add	sp, #12
  422fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422fdc:	4423      	add	r3, r4
  422fde:	4628      	mov	r0, r5
  422fe0:	685a      	ldr	r2, [r3, #4]
  422fe2:	f042 0201 	orr.w	r2, r2, #1
  422fe6:	605a      	str	r2, [r3, #4]
  422fe8:	f000 fade 	bl	4235a8 <__malloc_unlock>
  422fec:	3408      	adds	r4, #8
  422fee:	4620      	mov	r0, r4
  422ff0:	b003      	add	sp, #12
  422ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422ff6:	68bc      	ldr	r4, [r7, #8]
  422ff8:	6863      	ldr	r3, [r4, #4]
  422ffa:	f023 0803 	bic.w	r8, r3, #3
  422ffe:	45b0      	cmp	r8, r6
  423000:	d304      	bcc.n	42300c <_malloc_r+0x200>
  423002:	eba8 0306 	sub.w	r3, r8, r6
  423006:	2b0f      	cmp	r3, #15
  423008:	f300 8085 	bgt.w	423116 <_malloc_r+0x30a>
  42300c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 423168 <_malloc_r+0x35c>
  423010:	4b50      	ldr	r3, [pc, #320]	; (423154 <_malloc_r+0x348>)
  423012:	f8d9 2000 	ldr.w	r2, [r9]
  423016:	681b      	ldr	r3, [r3, #0]
  423018:	3201      	adds	r2, #1
  42301a:	4433      	add	r3, r6
  42301c:	eb04 0a08 	add.w	sl, r4, r8
  423020:	f000 8155 	beq.w	4232ce <_malloc_r+0x4c2>
  423024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  423028:	330f      	adds	r3, #15
  42302a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  42302e:	f02b 0b0f 	bic.w	fp, fp, #15
  423032:	4659      	mov	r1, fp
  423034:	4628      	mov	r0, r5
  423036:	f000 fadd 	bl	4235f4 <_sbrk_r>
  42303a:	1c41      	adds	r1, r0, #1
  42303c:	4602      	mov	r2, r0
  42303e:	f000 80fc 	beq.w	42323a <_malloc_r+0x42e>
  423042:	4582      	cmp	sl, r0
  423044:	f200 80f7 	bhi.w	423236 <_malloc_r+0x42a>
  423048:	4b43      	ldr	r3, [pc, #268]	; (423158 <_malloc_r+0x34c>)
  42304a:	6819      	ldr	r1, [r3, #0]
  42304c:	4459      	add	r1, fp
  42304e:	6019      	str	r1, [r3, #0]
  423050:	f000 814d 	beq.w	4232ee <_malloc_r+0x4e2>
  423054:	f8d9 0000 	ldr.w	r0, [r9]
  423058:	3001      	adds	r0, #1
  42305a:	bf1b      	ittet	ne
  42305c:	eba2 0a0a 	subne.w	sl, r2, sl
  423060:	4451      	addne	r1, sl
  423062:	f8c9 2000 	streq.w	r2, [r9]
  423066:	6019      	strne	r1, [r3, #0]
  423068:	f012 0107 	ands.w	r1, r2, #7
  42306c:	f000 8115 	beq.w	42329a <_malloc_r+0x48e>
  423070:	f1c1 0008 	rsb	r0, r1, #8
  423074:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  423078:	4402      	add	r2, r0
  42307a:	3108      	adds	r1, #8
  42307c:	eb02 090b 	add.w	r9, r2, fp
  423080:	f3c9 090b 	ubfx	r9, r9, #0, #12
  423084:	eba1 0909 	sub.w	r9, r1, r9
  423088:	4649      	mov	r1, r9
  42308a:	4628      	mov	r0, r5
  42308c:	9301      	str	r3, [sp, #4]
  42308e:	9200      	str	r2, [sp, #0]
  423090:	f000 fab0 	bl	4235f4 <_sbrk_r>
  423094:	1c43      	adds	r3, r0, #1
  423096:	e89d 000c 	ldmia.w	sp, {r2, r3}
  42309a:	f000 8143 	beq.w	423324 <_malloc_r+0x518>
  42309e:	1a80      	subs	r0, r0, r2
  4230a0:	4448      	add	r0, r9
  4230a2:	f040 0001 	orr.w	r0, r0, #1
  4230a6:	6819      	ldr	r1, [r3, #0]
  4230a8:	60ba      	str	r2, [r7, #8]
  4230aa:	4449      	add	r1, r9
  4230ac:	42bc      	cmp	r4, r7
  4230ae:	6050      	str	r0, [r2, #4]
  4230b0:	6019      	str	r1, [r3, #0]
  4230b2:	d017      	beq.n	4230e4 <_malloc_r+0x2d8>
  4230b4:	f1b8 0f0f 	cmp.w	r8, #15
  4230b8:	f240 80fb 	bls.w	4232b2 <_malloc_r+0x4a6>
  4230bc:	6860      	ldr	r0, [r4, #4]
  4230be:	f1a8 020c 	sub.w	r2, r8, #12
  4230c2:	f022 0207 	bic.w	r2, r2, #7
  4230c6:	eb04 0e02 	add.w	lr, r4, r2
  4230ca:	f000 0001 	and.w	r0, r0, #1
  4230ce:	f04f 0c05 	mov.w	ip, #5
  4230d2:	4310      	orrs	r0, r2
  4230d4:	2a0f      	cmp	r2, #15
  4230d6:	6060      	str	r0, [r4, #4]
  4230d8:	f8ce c004 	str.w	ip, [lr, #4]
  4230dc:	f8ce c008 	str.w	ip, [lr, #8]
  4230e0:	f200 8117 	bhi.w	423312 <_malloc_r+0x506>
  4230e4:	4b1d      	ldr	r3, [pc, #116]	; (42315c <_malloc_r+0x350>)
  4230e6:	68bc      	ldr	r4, [r7, #8]
  4230e8:	681a      	ldr	r2, [r3, #0]
  4230ea:	4291      	cmp	r1, r2
  4230ec:	bf88      	it	hi
  4230ee:	6019      	strhi	r1, [r3, #0]
  4230f0:	4b1b      	ldr	r3, [pc, #108]	; (423160 <_malloc_r+0x354>)
  4230f2:	681a      	ldr	r2, [r3, #0]
  4230f4:	4291      	cmp	r1, r2
  4230f6:	6862      	ldr	r2, [r4, #4]
  4230f8:	bf88      	it	hi
  4230fa:	6019      	strhi	r1, [r3, #0]
  4230fc:	f022 0203 	bic.w	r2, r2, #3
  423100:	4296      	cmp	r6, r2
  423102:	eba2 0306 	sub.w	r3, r2, r6
  423106:	d801      	bhi.n	42310c <_malloc_r+0x300>
  423108:	2b0f      	cmp	r3, #15
  42310a:	dc04      	bgt.n	423116 <_malloc_r+0x30a>
  42310c:	4628      	mov	r0, r5
  42310e:	f000 fa4b 	bl	4235a8 <__malloc_unlock>
  423112:	2400      	movs	r4, #0
  423114:	e740      	b.n	422f98 <_malloc_r+0x18c>
  423116:	19a2      	adds	r2, r4, r6
  423118:	f043 0301 	orr.w	r3, r3, #1
  42311c:	f046 0601 	orr.w	r6, r6, #1
  423120:	6066      	str	r6, [r4, #4]
  423122:	4628      	mov	r0, r5
  423124:	60ba      	str	r2, [r7, #8]
  423126:	6053      	str	r3, [r2, #4]
  423128:	f000 fa3e 	bl	4235a8 <__malloc_unlock>
  42312c:	3408      	adds	r4, #8
  42312e:	4620      	mov	r0, r4
  423130:	b003      	add	sp, #12
  423132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423136:	2b14      	cmp	r3, #20
  423138:	d971      	bls.n	42321e <_malloc_r+0x412>
  42313a:	2b54      	cmp	r3, #84	; 0x54
  42313c:	f200 80a3 	bhi.w	423286 <_malloc_r+0x47a>
  423140:	0b33      	lsrs	r3, r6, #12
  423142:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  423146:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  42314a:	00c3      	lsls	r3, r0, #3
  42314c:	e680      	b.n	422e50 <_malloc_r+0x44>
  42314e:	bf00      	nop
  423150:	204004a0 	.word	0x204004a0
  423154:	2043a0d8 	.word	0x2043a0d8
  423158:	2043a0a8 	.word	0x2043a0a8
  42315c:	2043a0d0 	.word	0x2043a0d0
  423160:	2043a0d4 	.word	0x2043a0d4
  423164:	204004a8 	.word	0x204004a8
  423168:	204008a8 	.word	0x204008a8
  42316c:	0a5a      	lsrs	r2, r3, #9
  42316e:	2a04      	cmp	r2, #4
  423170:	d95b      	bls.n	42322a <_malloc_r+0x41e>
  423172:	2a14      	cmp	r2, #20
  423174:	f200 80ae 	bhi.w	4232d4 <_malloc_r+0x4c8>
  423178:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  42317c:	00c9      	lsls	r1, r1, #3
  42317e:	325b      	adds	r2, #91	; 0x5b
  423180:	eb07 0c01 	add.w	ip, r7, r1
  423184:	5879      	ldr	r1, [r7, r1]
  423186:	f1ac 0c08 	sub.w	ip, ip, #8
  42318a:	458c      	cmp	ip, r1
  42318c:	f000 8088 	beq.w	4232a0 <_malloc_r+0x494>
  423190:	684a      	ldr	r2, [r1, #4]
  423192:	f022 0203 	bic.w	r2, r2, #3
  423196:	4293      	cmp	r3, r2
  423198:	d273      	bcs.n	423282 <_malloc_r+0x476>
  42319a:	6889      	ldr	r1, [r1, #8]
  42319c:	458c      	cmp	ip, r1
  42319e:	d1f7      	bne.n	423190 <_malloc_r+0x384>
  4231a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4231a4:	687b      	ldr	r3, [r7, #4]
  4231a6:	60e2      	str	r2, [r4, #12]
  4231a8:	f8c4 c008 	str.w	ip, [r4, #8]
  4231ac:	6094      	str	r4, [r2, #8]
  4231ae:	f8cc 400c 	str.w	r4, [ip, #12]
  4231b2:	e68f      	b.n	422ed4 <_malloc_r+0xc8>
  4231b4:	19a1      	adds	r1, r4, r6
  4231b6:	f046 0c01 	orr.w	ip, r6, #1
  4231ba:	f042 0601 	orr.w	r6, r2, #1
  4231be:	f8c4 c004 	str.w	ip, [r4, #4]
  4231c2:	4628      	mov	r0, r5
  4231c4:	6179      	str	r1, [r7, #20]
  4231c6:	6139      	str	r1, [r7, #16]
  4231c8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4231cc:	f8c1 e008 	str.w	lr, [r1, #8]
  4231d0:	604e      	str	r6, [r1, #4]
  4231d2:	50e2      	str	r2, [r4, r3]
  4231d4:	f000 f9e8 	bl	4235a8 <__malloc_unlock>
  4231d8:	3408      	adds	r4, #8
  4231da:	e6dd      	b.n	422f98 <_malloc_r+0x18c>
  4231dc:	687b      	ldr	r3, [r7, #4]
  4231de:	e679      	b.n	422ed4 <_malloc_r+0xc8>
  4231e0:	f108 0801 	add.w	r8, r8, #1
  4231e4:	f018 0f03 	tst.w	r8, #3
  4231e8:	f10c 0c08 	add.w	ip, ip, #8
  4231ec:	f47f ae85 	bne.w	422efa <_malloc_r+0xee>
  4231f0:	e02d      	b.n	42324e <_malloc_r+0x442>
  4231f2:	68dc      	ldr	r4, [r3, #12]
  4231f4:	42a3      	cmp	r3, r4
  4231f6:	bf08      	it	eq
  4231f8:	3002      	addeq	r0, #2
  4231fa:	f43f ae3e 	beq.w	422e7a <_malloc_r+0x6e>
  4231fe:	e6bb      	b.n	422f78 <_malloc_r+0x16c>
  423200:	4419      	add	r1, r3
  423202:	461c      	mov	r4, r3
  423204:	684a      	ldr	r2, [r1, #4]
  423206:	68db      	ldr	r3, [r3, #12]
  423208:	f854 6f08 	ldr.w	r6, [r4, #8]!
  42320c:	f042 0201 	orr.w	r2, r2, #1
  423210:	604a      	str	r2, [r1, #4]
  423212:	4628      	mov	r0, r5
  423214:	60f3      	str	r3, [r6, #12]
  423216:	609e      	str	r6, [r3, #8]
  423218:	f000 f9c6 	bl	4235a8 <__malloc_unlock>
  42321c:	e6bc      	b.n	422f98 <_malloc_r+0x18c>
  42321e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  423222:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  423226:	00c3      	lsls	r3, r0, #3
  423228:	e612      	b.n	422e50 <_malloc_r+0x44>
  42322a:	099a      	lsrs	r2, r3, #6
  42322c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  423230:	00c9      	lsls	r1, r1, #3
  423232:	3238      	adds	r2, #56	; 0x38
  423234:	e7a4      	b.n	423180 <_malloc_r+0x374>
  423236:	42bc      	cmp	r4, r7
  423238:	d054      	beq.n	4232e4 <_malloc_r+0x4d8>
  42323a:	68bc      	ldr	r4, [r7, #8]
  42323c:	6862      	ldr	r2, [r4, #4]
  42323e:	f022 0203 	bic.w	r2, r2, #3
  423242:	e75d      	b.n	423100 <_malloc_r+0x2f4>
  423244:	f859 3908 	ldr.w	r3, [r9], #-8
  423248:	4599      	cmp	r9, r3
  42324a:	f040 8086 	bne.w	42335a <_malloc_r+0x54e>
  42324e:	f010 0f03 	tst.w	r0, #3
  423252:	f100 30ff 	add.w	r0, r0, #4294967295
  423256:	d1f5      	bne.n	423244 <_malloc_r+0x438>
  423258:	687b      	ldr	r3, [r7, #4]
  42325a:	ea23 0304 	bic.w	r3, r3, r4
  42325e:	607b      	str	r3, [r7, #4]
  423260:	0064      	lsls	r4, r4, #1
  423262:	429c      	cmp	r4, r3
  423264:	f63f aec7 	bhi.w	422ff6 <_malloc_r+0x1ea>
  423268:	2c00      	cmp	r4, #0
  42326a:	f43f aec4 	beq.w	422ff6 <_malloc_r+0x1ea>
  42326e:	421c      	tst	r4, r3
  423270:	4640      	mov	r0, r8
  423272:	f47f ae3e 	bne.w	422ef2 <_malloc_r+0xe6>
  423276:	0064      	lsls	r4, r4, #1
  423278:	421c      	tst	r4, r3
  42327a:	f100 0004 	add.w	r0, r0, #4
  42327e:	d0fa      	beq.n	423276 <_malloc_r+0x46a>
  423280:	e637      	b.n	422ef2 <_malloc_r+0xe6>
  423282:	468c      	mov	ip, r1
  423284:	e78c      	b.n	4231a0 <_malloc_r+0x394>
  423286:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  42328a:	d815      	bhi.n	4232b8 <_malloc_r+0x4ac>
  42328c:	0bf3      	lsrs	r3, r6, #15
  42328e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  423292:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  423296:	00c3      	lsls	r3, r0, #3
  423298:	e5da      	b.n	422e50 <_malloc_r+0x44>
  42329a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  42329e:	e6ed      	b.n	42307c <_malloc_r+0x270>
  4232a0:	687b      	ldr	r3, [r7, #4]
  4232a2:	1092      	asrs	r2, r2, #2
  4232a4:	2101      	movs	r1, #1
  4232a6:	fa01 f202 	lsl.w	r2, r1, r2
  4232aa:	4313      	orrs	r3, r2
  4232ac:	607b      	str	r3, [r7, #4]
  4232ae:	4662      	mov	r2, ip
  4232b0:	e779      	b.n	4231a6 <_malloc_r+0x39a>
  4232b2:	2301      	movs	r3, #1
  4232b4:	6053      	str	r3, [r2, #4]
  4232b6:	e729      	b.n	42310c <_malloc_r+0x300>
  4232b8:	f240 5254 	movw	r2, #1364	; 0x554
  4232bc:	4293      	cmp	r3, r2
  4232be:	d822      	bhi.n	423306 <_malloc_r+0x4fa>
  4232c0:	0cb3      	lsrs	r3, r6, #18
  4232c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4232c6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4232ca:	00c3      	lsls	r3, r0, #3
  4232cc:	e5c0      	b.n	422e50 <_malloc_r+0x44>
  4232ce:	f103 0b10 	add.w	fp, r3, #16
  4232d2:	e6ae      	b.n	423032 <_malloc_r+0x226>
  4232d4:	2a54      	cmp	r2, #84	; 0x54
  4232d6:	d829      	bhi.n	42332c <_malloc_r+0x520>
  4232d8:	0b1a      	lsrs	r2, r3, #12
  4232da:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4232de:	00c9      	lsls	r1, r1, #3
  4232e0:	326e      	adds	r2, #110	; 0x6e
  4232e2:	e74d      	b.n	423180 <_malloc_r+0x374>
  4232e4:	4b20      	ldr	r3, [pc, #128]	; (423368 <_malloc_r+0x55c>)
  4232e6:	6819      	ldr	r1, [r3, #0]
  4232e8:	4459      	add	r1, fp
  4232ea:	6019      	str	r1, [r3, #0]
  4232ec:	e6b2      	b.n	423054 <_malloc_r+0x248>
  4232ee:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4232f2:	2800      	cmp	r0, #0
  4232f4:	f47f aeae 	bne.w	423054 <_malloc_r+0x248>
  4232f8:	eb08 030b 	add.w	r3, r8, fp
  4232fc:	68ba      	ldr	r2, [r7, #8]
  4232fe:	f043 0301 	orr.w	r3, r3, #1
  423302:	6053      	str	r3, [r2, #4]
  423304:	e6ee      	b.n	4230e4 <_malloc_r+0x2d8>
  423306:	207f      	movs	r0, #127	; 0x7f
  423308:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  42330c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  423310:	e59e      	b.n	422e50 <_malloc_r+0x44>
  423312:	f104 0108 	add.w	r1, r4, #8
  423316:	4628      	mov	r0, r5
  423318:	9300      	str	r3, [sp, #0]
  42331a:	f001 fdfb 	bl	424f14 <_free_r>
  42331e:	9b00      	ldr	r3, [sp, #0]
  423320:	6819      	ldr	r1, [r3, #0]
  423322:	e6df      	b.n	4230e4 <_malloc_r+0x2d8>
  423324:	2001      	movs	r0, #1
  423326:	f04f 0900 	mov.w	r9, #0
  42332a:	e6bc      	b.n	4230a6 <_malloc_r+0x29a>
  42332c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  423330:	d805      	bhi.n	42333e <_malloc_r+0x532>
  423332:	0bda      	lsrs	r2, r3, #15
  423334:	f102 0178 	add.w	r1, r2, #120	; 0x78
  423338:	00c9      	lsls	r1, r1, #3
  42333a:	3277      	adds	r2, #119	; 0x77
  42333c:	e720      	b.n	423180 <_malloc_r+0x374>
  42333e:	f240 5154 	movw	r1, #1364	; 0x554
  423342:	428a      	cmp	r2, r1
  423344:	d805      	bhi.n	423352 <_malloc_r+0x546>
  423346:	0c9a      	lsrs	r2, r3, #18
  423348:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  42334c:	00c9      	lsls	r1, r1, #3
  42334e:	327c      	adds	r2, #124	; 0x7c
  423350:	e716      	b.n	423180 <_malloc_r+0x374>
  423352:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  423356:	227e      	movs	r2, #126	; 0x7e
  423358:	e712      	b.n	423180 <_malloc_r+0x374>
  42335a:	687b      	ldr	r3, [r7, #4]
  42335c:	e780      	b.n	423260 <_malloc_r+0x454>
  42335e:	08f0      	lsrs	r0, r6, #3
  423360:	f106 0308 	add.w	r3, r6, #8
  423364:	e600      	b.n	422f68 <_malloc_r+0x15c>
  423366:	bf00      	nop
  423368:	2043a0a8 	.word	0x2043a0a8

0042336c <memcmp>:
  42336c:	2a03      	cmp	r2, #3
  42336e:	b470      	push	{r4, r5, r6}
  423370:	d922      	bls.n	4233b8 <memcmp+0x4c>
  423372:	ea40 0301 	orr.w	r3, r0, r1
  423376:	079b      	lsls	r3, r3, #30
  423378:	d011      	beq.n	42339e <memcmp+0x32>
  42337a:	7803      	ldrb	r3, [r0, #0]
  42337c:	780c      	ldrb	r4, [r1, #0]
  42337e:	42a3      	cmp	r3, r4
  423380:	d11d      	bne.n	4233be <memcmp+0x52>
  423382:	440a      	add	r2, r1
  423384:	3101      	adds	r1, #1
  423386:	e005      	b.n	423394 <memcmp+0x28>
  423388:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  42338c:	f811 4b01 	ldrb.w	r4, [r1], #1
  423390:	42a3      	cmp	r3, r4
  423392:	d114      	bne.n	4233be <memcmp+0x52>
  423394:	4291      	cmp	r1, r2
  423396:	d1f7      	bne.n	423388 <memcmp+0x1c>
  423398:	2000      	movs	r0, #0
  42339a:	bc70      	pop	{r4, r5, r6}
  42339c:	4770      	bx	lr
  42339e:	680d      	ldr	r5, [r1, #0]
  4233a0:	6806      	ldr	r6, [r0, #0]
  4233a2:	42ae      	cmp	r6, r5
  4233a4:	460c      	mov	r4, r1
  4233a6:	4603      	mov	r3, r0
  4233a8:	f101 0104 	add.w	r1, r1, #4
  4233ac:	f100 0004 	add.w	r0, r0, #4
  4233b0:	d108      	bne.n	4233c4 <memcmp+0x58>
  4233b2:	3a04      	subs	r2, #4
  4233b4:	2a03      	cmp	r2, #3
  4233b6:	d8f2      	bhi.n	42339e <memcmp+0x32>
  4233b8:	2a00      	cmp	r2, #0
  4233ba:	d1de      	bne.n	42337a <memcmp+0xe>
  4233bc:	e7ec      	b.n	423398 <memcmp+0x2c>
  4233be:	1b18      	subs	r0, r3, r4
  4233c0:	bc70      	pop	{r4, r5, r6}
  4233c2:	4770      	bx	lr
  4233c4:	4621      	mov	r1, r4
  4233c6:	4618      	mov	r0, r3
  4233c8:	e7d7      	b.n	42337a <memcmp+0xe>
  4233ca:	bf00      	nop

004233cc <memcpy>:
  4233cc:	4684      	mov	ip, r0
  4233ce:	ea41 0300 	orr.w	r3, r1, r0
  4233d2:	f013 0303 	ands.w	r3, r3, #3
  4233d6:	d16d      	bne.n	4234b4 <memcpy+0xe8>
  4233d8:	3a40      	subs	r2, #64	; 0x40
  4233da:	d341      	bcc.n	423460 <memcpy+0x94>
  4233dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4233e0:	f840 3b04 	str.w	r3, [r0], #4
  4233e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4233e8:	f840 3b04 	str.w	r3, [r0], #4
  4233ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4233f0:	f840 3b04 	str.w	r3, [r0], #4
  4233f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4233f8:	f840 3b04 	str.w	r3, [r0], #4
  4233fc:	f851 3b04 	ldr.w	r3, [r1], #4
  423400:	f840 3b04 	str.w	r3, [r0], #4
  423404:	f851 3b04 	ldr.w	r3, [r1], #4
  423408:	f840 3b04 	str.w	r3, [r0], #4
  42340c:	f851 3b04 	ldr.w	r3, [r1], #4
  423410:	f840 3b04 	str.w	r3, [r0], #4
  423414:	f851 3b04 	ldr.w	r3, [r1], #4
  423418:	f840 3b04 	str.w	r3, [r0], #4
  42341c:	f851 3b04 	ldr.w	r3, [r1], #4
  423420:	f840 3b04 	str.w	r3, [r0], #4
  423424:	f851 3b04 	ldr.w	r3, [r1], #4
  423428:	f840 3b04 	str.w	r3, [r0], #4
  42342c:	f851 3b04 	ldr.w	r3, [r1], #4
  423430:	f840 3b04 	str.w	r3, [r0], #4
  423434:	f851 3b04 	ldr.w	r3, [r1], #4
  423438:	f840 3b04 	str.w	r3, [r0], #4
  42343c:	f851 3b04 	ldr.w	r3, [r1], #4
  423440:	f840 3b04 	str.w	r3, [r0], #4
  423444:	f851 3b04 	ldr.w	r3, [r1], #4
  423448:	f840 3b04 	str.w	r3, [r0], #4
  42344c:	f851 3b04 	ldr.w	r3, [r1], #4
  423450:	f840 3b04 	str.w	r3, [r0], #4
  423454:	f851 3b04 	ldr.w	r3, [r1], #4
  423458:	f840 3b04 	str.w	r3, [r0], #4
  42345c:	3a40      	subs	r2, #64	; 0x40
  42345e:	d2bd      	bcs.n	4233dc <memcpy+0x10>
  423460:	3230      	adds	r2, #48	; 0x30
  423462:	d311      	bcc.n	423488 <memcpy+0xbc>
  423464:	f851 3b04 	ldr.w	r3, [r1], #4
  423468:	f840 3b04 	str.w	r3, [r0], #4
  42346c:	f851 3b04 	ldr.w	r3, [r1], #4
  423470:	f840 3b04 	str.w	r3, [r0], #4
  423474:	f851 3b04 	ldr.w	r3, [r1], #4
  423478:	f840 3b04 	str.w	r3, [r0], #4
  42347c:	f851 3b04 	ldr.w	r3, [r1], #4
  423480:	f840 3b04 	str.w	r3, [r0], #4
  423484:	3a10      	subs	r2, #16
  423486:	d2ed      	bcs.n	423464 <memcpy+0x98>
  423488:	320c      	adds	r2, #12
  42348a:	d305      	bcc.n	423498 <memcpy+0xcc>
  42348c:	f851 3b04 	ldr.w	r3, [r1], #4
  423490:	f840 3b04 	str.w	r3, [r0], #4
  423494:	3a04      	subs	r2, #4
  423496:	d2f9      	bcs.n	42348c <memcpy+0xc0>
  423498:	3204      	adds	r2, #4
  42349a:	d008      	beq.n	4234ae <memcpy+0xe2>
  42349c:	07d2      	lsls	r2, r2, #31
  42349e:	bf1c      	itt	ne
  4234a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4234a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4234a8:	d301      	bcc.n	4234ae <memcpy+0xe2>
  4234aa:	880b      	ldrh	r3, [r1, #0]
  4234ac:	8003      	strh	r3, [r0, #0]
  4234ae:	4660      	mov	r0, ip
  4234b0:	4770      	bx	lr
  4234b2:	bf00      	nop
  4234b4:	2a08      	cmp	r2, #8
  4234b6:	d313      	bcc.n	4234e0 <memcpy+0x114>
  4234b8:	078b      	lsls	r3, r1, #30
  4234ba:	d08d      	beq.n	4233d8 <memcpy+0xc>
  4234bc:	f010 0303 	ands.w	r3, r0, #3
  4234c0:	d08a      	beq.n	4233d8 <memcpy+0xc>
  4234c2:	f1c3 0304 	rsb	r3, r3, #4
  4234c6:	1ad2      	subs	r2, r2, r3
  4234c8:	07db      	lsls	r3, r3, #31
  4234ca:	bf1c      	itt	ne
  4234cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4234d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4234d4:	d380      	bcc.n	4233d8 <memcpy+0xc>
  4234d6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4234da:	f820 3b02 	strh.w	r3, [r0], #2
  4234de:	e77b      	b.n	4233d8 <memcpy+0xc>
  4234e0:	3a04      	subs	r2, #4
  4234e2:	d3d9      	bcc.n	423498 <memcpy+0xcc>
  4234e4:	3a01      	subs	r2, #1
  4234e6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4234ea:	f800 3b01 	strb.w	r3, [r0], #1
  4234ee:	d2f9      	bcs.n	4234e4 <memcpy+0x118>
  4234f0:	780b      	ldrb	r3, [r1, #0]
  4234f2:	7003      	strb	r3, [r0, #0]
  4234f4:	784b      	ldrb	r3, [r1, #1]
  4234f6:	7043      	strb	r3, [r0, #1]
  4234f8:	788b      	ldrb	r3, [r1, #2]
  4234fa:	7083      	strb	r3, [r0, #2]
  4234fc:	4660      	mov	r0, ip
  4234fe:	4770      	bx	lr

00423500 <memset>:
  423500:	b470      	push	{r4, r5, r6}
  423502:	0786      	lsls	r6, r0, #30
  423504:	d046      	beq.n	423594 <memset+0x94>
  423506:	1e54      	subs	r4, r2, #1
  423508:	2a00      	cmp	r2, #0
  42350a:	d041      	beq.n	423590 <memset+0x90>
  42350c:	b2ca      	uxtb	r2, r1
  42350e:	4603      	mov	r3, r0
  423510:	e002      	b.n	423518 <memset+0x18>
  423512:	f114 34ff 	adds.w	r4, r4, #4294967295
  423516:	d33b      	bcc.n	423590 <memset+0x90>
  423518:	f803 2b01 	strb.w	r2, [r3], #1
  42351c:	079d      	lsls	r5, r3, #30
  42351e:	d1f8      	bne.n	423512 <memset+0x12>
  423520:	2c03      	cmp	r4, #3
  423522:	d92e      	bls.n	423582 <memset+0x82>
  423524:	b2cd      	uxtb	r5, r1
  423526:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  42352a:	2c0f      	cmp	r4, #15
  42352c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  423530:	d919      	bls.n	423566 <memset+0x66>
  423532:	f103 0210 	add.w	r2, r3, #16
  423536:	4626      	mov	r6, r4
  423538:	3e10      	subs	r6, #16
  42353a:	2e0f      	cmp	r6, #15
  42353c:	f842 5c10 	str.w	r5, [r2, #-16]
  423540:	f842 5c0c 	str.w	r5, [r2, #-12]
  423544:	f842 5c08 	str.w	r5, [r2, #-8]
  423548:	f842 5c04 	str.w	r5, [r2, #-4]
  42354c:	f102 0210 	add.w	r2, r2, #16
  423550:	d8f2      	bhi.n	423538 <memset+0x38>
  423552:	f1a4 0210 	sub.w	r2, r4, #16
  423556:	f022 020f 	bic.w	r2, r2, #15
  42355a:	f004 040f 	and.w	r4, r4, #15
  42355e:	3210      	adds	r2, #16
  423560:	2c03      	cmp	r4, #3
  423562:	4413      	add	r3, r2
  423564:	d90d      	bls.n	423582 <memset+0x82>
  423566:	461e      	mov	r6, r3
  423568:	4622      	mov	r2, r4
  42356a:	3a04      	subs	r2, #4
  42356c:	2a03      	cmp	r2, #3
  42356e:	f846 5b04 	str.w	r5, [r6], #4
  423572:	d8fa      	bhi.n	42356a <memset+0x6a>
  423574:	1f22      	subs	r2, r4, #4
  423576:	f022 0203 	bic.w	r2, r2, #3
  42357a:	3204      	adds	r2, #4
  42357c:	4413      	add	r3, r2
  42357e:	f004 0403 	and.w	r4, r4, #3
  423582:	b12c      	cbz	r4, 423590 <memset+0x90>
  423584:	b2c9      	uxtb	r1, r1
  423586:	441c      	add	r4, r3
  423588:	f803 1b01 	strb.w	r1, [r3], #1
  42358c:	429c      	cmp	r4, r3
  42358e:	d1fb      	bne.n	423588 <memset+0x88>
  423590:	bc70      	pop	{r4, r5, r6}
  423592:	4770      	bx	lr
  423594:	4614      	mov	r4, r2
  423596:	4603      	mov	r3, r0
  423598:	e7c2      	b.n	423520 <memset+0x20>
  42359a:	bf00      	nop

0042359c <__malloc_lock>:
  42359c:	4801      	ldr	r0, [pc, #4]	; (4235a4 <__malloc_lock+0x8>)
  42359e:	f001 bf53 	b.w	425448 <__retarget_lock_acquire_recursive>
  4235a2:	bf00      	nop
  4235a4:	2043a354 	.word	0x2043a354

004235a8 <__malloc_unlock>:
  4235a8:	4801      	ldr	r0, [pc, #4]	; (4235b0 <__malloc_unlock+0x8>)
  4235aa:	f001 bf4f 	b.w	42544c <__retarget_lock_release_recursive>
  4235ae:	bf00      	nop
  4235b0:	2043a354 	.word	0x2043a354

004235b4 <rand>:
  4235b4:	b410      	push	{r4}
  4235b6:	4b0c      	ldr	r3, [pc, #48]	; (4235e8 <rand+0x34>)
  4235b8:	480c      	ldr	r0, [pc, #48]	; (4235ec <rand+0x38>)
  4235ba:	6819      	ldr	r1, [r3, #0]
  4235bc:	4c0c      	ldr	r4, [pc, #48]	; (4235f0 <rand+0x3c>)
  4235be:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  4235c2:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  4235c6:	fb00 f002 	mul.w	r0, r0, r2
  4235ca:	fb04 0003 	mla	r0, r4, r3, r0
  4235ce:	fba2 2304 	umull	r2, r3, r2, r4
  4235d2:	4403      	add	r3, r0
  4235d4:	3201      	adds	r2, #1
  4235d6:	f143 0300 	adc.w	r3, r3, #0
  4235da:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  4235de:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  4235e2:	bc10      	pop	{r4}
  4235e4:	4770      	bx	lr
  4235e6:	bf00      	nop
  4235e8:	20400070 	.word	0x20400070
  4235ec:	5851f42d 	.word	0x5851f42d
  4235f0:	4c957f2d 	.word	0x4c957f2d

004235f4 <_sbrk_r>:
  4235f4:	b538      	push	{r3, r4, r5, lr}
  4235f6:	4c07      	ldr	r4, [pc, #28]	; (423614 <_sbrk_r+0x20>)
  4235f8:	2300      	movs	r3, #0
  4235fa:	4605      	mov	r5, r0
  4235fc:	4608      	mov	r0, r1
  4235fe:	6023      	str	r3, [r4, #0]
  423600:	f7fe f8da 	bl	4217b8 <_sbrk>
  423604:	1c43      	adds	r3, r0, #1
  423606:	d000      	beq.n	42360a <_sbrk_r+0x16>
  423608:	bd38      	pop	{r3, r4, r5, pc}
  42360a:	6823      	ldr	r3, [r4, #0]
  42360c:	2b00      	cmp	r3, #0
  42360e:	d0fb      	beq.n	423608 <_sbrk_r+0x14>
  423610:	602b      	str	r3, [r5, #0]
  423612:	bd38      	pop	{r3, r4, r5, pc}
  423614:	2043a368 	.word	0x2043a368

00423618 <setbuf>:
  423618:	2900      	cmp	r1, #0
  42361a:	bf0c      	ite	eq
  42361c:	2202      	moveq	r2, #2
  42361e:	2200      	movne	r2, #0
  423620:	f44f 6380 	mov.w	r3, #1024	; 0x400
  423624:	f000 b800 	b.w	423628 <setvbuf>

00423628 <setvbuf>:
  423628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42362c:	4c61      	ldr	r4, [pc, #388]	; (4237b4 <setvbuf+0x18c>)
  42362e:	6825      	ldr	r5, [r4, #0]
  423630:	b083      	sub	sp, #12
  423632:	4604      	mov	r4, r0
  423634:	460f      	mov	r7, r1
  423636:	4690      	mov	r8, r2
  423638:	461e      	mov	r6, r3
  42363a:	b115      	cbz	r5, 423642 <setvbuf+0x1a>
  42363c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  42363e:	2b00      	cmp	r3, #0
  423640:	d064      	beq.n	42370c <setvbuf+0xe4>
  423642:	f1b8 0f02 	cmp.w	r8, #2
  423646:	d006      	beq.n	423656 <setvbuf+0x2e>
  423648:	f1b8 0f01 	cmp.w	r8, #1
  42364c:	f200 809f 	bhi.w	42378e <setvbuf+0x166>
  423650:	2e00      	cmp	r6, #0
  423652:	f2c0 809c 	blt.w	42378e <setvbuf+0x166>
  423656:	6e63      	ldr	r3, [r4, #100]	; 0x64
  423658:	07d8      	lsls	r0, r3, #31
  42365a:	d534      	bpl.n	4236c6 <setvbuf+0x9e>
  42365c:	4621      	mov	r1, r4
  42365e:	4628      	mov	r0, r5
  423660:	f001 fada 	bl	424c18 <_fflush_r>
  423664:	6b21      	ldr	r1, [r4, #48]	; 0x30
  423666:	b141      	cbz	r1, 42367a <setvbuf+0x52>
  423668:	f104 0340 	add.w	r3, r4, #64	; 0x40
  42366c:	4299      	cmp	r1, r3
  42366e:	d002      	beq.n	423676 <setvbuf+0x4e>
  423670:	4628      	mov	r0, r5
  423672:	f001 fc4f 	bl	424f14 <_free_r>
  423676:	2300      	movs	r3, #0
  423678:	6323      	str	r3, [r4, #48]	; 0x30
  42367a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42367e:	2200      	movs	r2, #0
  423680:	61a2      	str	r2, [r4, #24]
  423682:	6062      	str	r2, [r4, #4]
  423684:	061a      	lsls	r2, r3, #24
  423686:	d43a      	bmi.n	4236fe <setvbuf+0xd6>
  423688:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  42368c:	f023 0303 	bic.w	r3, r3, #3
  423690:	f1b8 0f02 	cmp.w	r8, #2
  423694:	81a3      	strh	r3, [r4, #12]
  423696:	d01d      	beq.n	4236d4 <setvbuf+0xac>
  423698:	ab01      	add	r3, sp, #4
  42369a:	466a      	mov	r2, sp
  42369c:	4621      	mov	r1, r4
  42369e:	4628      	mov	r0, r5
  4236a0:	f001 fed6 	bl	425450 <__swhatbuf_r>
  4236a4:	89a3      	ldrh	r3, [r4, #12]
  4236a6:	4318      	orrs	r0, r3
  4236a8:	81a0      	strh	r0, [r4, #12]
  4236aa:	2e00      	cmp	r6, #0
  4236ac:	d132      	bne.n	423714 <setvbuf+0xec>
  4236ae:	9e00      	ldr	r6, [sp, #0]
  4236b0:	4630      	mov	r0, r6
  4236b2:	f7ff fba3 	bl	422dfc <malloc>
  4236b6:	4607      	mov	r7, r0
  4236b8:	2800      	cmp	r0, #0
  4236ba:	d06b      	beq.n	423794 <setvbuf+0x16c>
  4236bc:	89a3      	ldrh	r3, [r4, #12]
  4236be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4236c2:	81a3      	strh	r3, [r4, #12]
  4236c4:	e028      	b.n	423718 <setvbuf+0xf0>
  4236c6:	89a3      	ldrh	r3, [r4, #12]
  4236c8:	0599      	lsls	r1, r3, #22
  4236ca:	d4c7      	bmi.n	42365c <setvbuf+0x34>
  4236cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4236ce:	f001 febb 	bl	425448 <__retarget_lock_acquire_recursive>
  4236d2:	e7c3      	b.n	42365c <setvbuf+0x34>
  4236d4:	2500      	movs	r5, #0
  4236d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4236d8:	2600      	movs	r6, #0
  4236da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4236de:	f043 0302 	orr.w	r3, r3, #2
  4236e2:	2001      	movs	r0, #1
  4236e4:	60a6      	str	r6, [r4, #8]
  4236e6:	07ce      	lsls	r6, r1, #31
  4236e8:	81a3      	strh	r3, [r4, #12]
  4236ea:	6022      	str	r2, [r4, #0]
  4236ec:	6122      	str	r2, [r4, #16]
  4236ee:	6160      	str	r0, [r4, #20]
  4236f0:	d401      	bmi.n	4236f6 <setvbuf+0xce>
  4236f2:	0598      	lsls	r0, r3, #22
  4236f4:	d53e      	bpl.n	423774 <setvbuf+0x14c>
  4236f6:	4628      	mov	r0, r5
  4236f8:	b003      	add	sp, #12
  4236fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4236fe:	6921      	ldr	r1, [r4, #16]
  423700:	4628      	mov	r0, r5
  423702:	f001 fc07 	bl	424f14 <_free_r>
  423706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42370a:	e7bd      	b.n	423688 <setvbuf+0x60>
  42370c:	4628      	mov	r0, r5
  42370e:	f001 fadb 	bl	424cc8 <__sinit>
  423712:	e796      	b.n	423642 <setvbuf+0x1a>
  423714:	2f00      	cmp	r7, #0
  423716:	d0cb      	beq.n	4236b0 <setvbuf+0x88>
  423718:	6bab      	ldr	r3, [r5, #56]	; 0x38
  42371a:	2b00      	cmp	r3, #0
  42371c:	d033      	beq.n	423786 <setvbuf+0x15e>
  42371e:	9b00      	ldr	r3, [sp, #0]
  423720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  423724:	6027      	str	r7, [r4, #0]
  423726:	429e      	cmp	r6, r3
  423728:	bf1c      	itt	ne
  42372a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  42372e:	81a2      	strhne	r2, [r4, #12]
  423730:	f1b8 0f01 	cmp.w	r8, #1
  423734:	bf04      	itt	eq
  423736:	f042 0201 	orreq.w	r2, r2, #1
  42373a:	81a2      	strheq	r2, [r4, #12]
  42373c:	b292      	uxth	r2, r2
  42373e:	f012 0308 	ands.w	r3, r2, #8
  423742:	6127      	str	r7, [r4, #16]
  423744:	6166      	str	r6, [r4, #20]
  423746:	d00e      	beq.n	423766 <setvbuf+0x13e>
  423748:	07d1      	lsls	r1, r2, #31
  42374a:	d51a      	bpl.n	423782 <setvbuf+0x15a>
  42374c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  42374e:	4276      	negs	r6, r6
  423750:	2300      	movs	r3, #0
  423752:	f015 0501 	ands.w	r5, r5, #1
  423756:	61a6      	str	r6, [r4, #24]
  423758:	60a3      	str	r3, [r4, #8]
  42375a:	d009      	beq.n	423770 <setvbuf+0x148>
  42375c:	2500      	movs	r5, #0
  42375e:	4628      	mov	r0, r5
  423760:	b003      	add	sp, #12
  423762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  423766:	60a3      	str	r3, [r4, #8]
  423768:	6e65      	ldr	r5, [r4, #100]	; 0x64
  42376a:	f015 0501 	ands.w	r5, r5, #1
  42376e:	d1f5      	bne.n	42375c <setvbuf+0x134>
  423770:	0593      	lsls	r3, r2, #22
  423772:	d4c0      	bmi.n	4236f6 <setvbuf+0xce>
  423774:	6da0      	ldr	r0, [r4, #88]	; 0x58
  423776:	f001 fe69 	bl	42544c <__retarget_lock_release_recursive>
  42377a:	4628      	mov	r0, r5
  42377c:	b003      	add	sp, #12
  42377e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  423782:	60a6      	str	r6, [r4, #8]
  423784:	e7f0      	b.n	423768 <setvbuf+0x140>
  423786:	4628      	mov	r0, r5
  423788:	f001 fa9e 	bl	424cc8 <__sinit>
  42378c:	e7c7      	b.n	42371e <setvbuf+0xf6>
  42378e:	f04f 35ff 	mov.w	r5, #4294967295
  423792:	e7b0      	b.n	4236f6 <setvbuf+0xce>
  423794:	f8dd 9000 	ldr.w	r9, [sp]
  423798:	45b1      	cmp	r9, r6
  42379a:	d004      	beq.n	4237a6 <setvbuf+0x17e>
  42379c:	4648      	mov	r0, r9
  42379e:	f7ff fb2d 	bl	422dfc <malloc>
  4237a2:	4607      	mov	r7, r0
  4237a4:	b920      	cbnz	r0, 4237b0 <setvbuf+0x188>
  4237a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4237aa:	f04f 35ff 	mov.w	r5, #4294967295
  4237ae:	e792      	b.n	4236d6 <setvbuf+0xae>
  4237b0:	464e      	mov	r6, r9
  4237b2:	e783      	b.n	4236bc <setvbuf+0x94>
  4237b4:	20400070 	.word	0x20400070
	...
  4237c0:	eba2 0003 	sub.w	r0, r2, r3
  4237c4:	4770      	bx	lr
  4237c6:	bf00      	nop

004237c8 <strcmp>:
  4237c8:	7802      	ldrb	r2, [r0, #0]
  4237ca:	780b      	ldrb	r3, [r1, #0]
  4237cc:	2a01      	cmp	r2, #1
  4237ce:	bf28      	it	cs
  4237d0:	429a      	cmpcs	r2, r3
  4237d2:	d1f5      	bne.n	4237c0 <setvbuf+0x198>
  4237d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4237d8:	ea40 0401 	orr.w	r4, r0, r1
  4237dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4237e0:	f06f 0c00 	mvn.w	ip, #0
  4237e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
  4237e8:	b312      	cbz	r2, 423830 <strcmp+0x68>
  4237ea:	ea80 0401 	eor.w	r4, r0, r1
  4237ee:	f014 0f07 	tst.w	r4, #7
  4237f2:	d16a      	bne.n	4238ca <strcmp+0x102>
  4237f4:	f000 0407 	and.w	r4, r0, #7
  4237f8:	f020 0007 	bic.w	r0, r0, #7
  4237fc:	f004 0503 	and.w	r5, r4, #3
  423800:	f021 0107 	bic.w	r1, r1, #7
  423804:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  423808:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  42380c:	f014 0f04 	tst.w	r4, #4
  423810:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  423814:	fa0c f405 	lsl.w	r4, ip, r5
  423818:	ea62 0204 	orn	r2, r2, r4
  42381c:	ea66 0604 	orn	r6, r6, r4
  423820:	d00a      	beq.n	423838 <strcmp+0x70>
  423822:	ea63 0304 	orn	r3, r3, r4
  423826:	4662      	mov	r2, ip
  423828:	ea67 0704 	orn	r7, r7, r4
  42382c:	4666      	mov	r6, ip
  42382e:	e003      	b.n	423838 <strcmp+0x70>
  423830:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  423834:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  423838:	fa82 f54c 	uadd8	r5, r2, ip
  42383c:	ea82 0406 	eor.w	r4, r2, r6
  423840:	faa4 f48c 	sel	r4, r4, ip
  423844:	bb6c      	cbnz	r4, 4238a2 <strcmp+0xda>
  423846:	fa83 f54c 	uadd8	r5, r3, ip
  42384a:	ea83 0507 	eor.w	r5, r3, r7
  42384e:	faa5 f58c 	sel	r5, r5, ip
  423852:	b995      	cbnz	r5, 42387a <strcmp+0xb2>
  423854:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  423858:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  42385c:	fa82 f54c 	uadd8	r5, r2, ip
  423860:	ea82 0406 	eor.w	r4, r2, r6
  423864:	faa4 f48c 	sel	r4, r4, ip
  423868:	fa83 f54c 	uadd8	r5, r3, ip
  42386c:	ea83 0507 	eor.w	r5, r3, r7
  423870:	faa5 f58c 	sel	r5, r5, ip
  423874:	4325      	orrs	r5, r4
  423876:	d0db      	beq.n	423830 <strcmp+0x68>
  423878:	b99c      	cbnz	r4, 4238a2 <strcmp+0xda>
  42387a:	ba2d      	rev	r5, r5
  42387c:	fab5 f485 	clz	r4, r5
  423880:	f024 0407 	bic.w	r4, r4, #7
  423884:	fa27 f104 	lsr.w	r1, r7, r4
  423888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  42388c:	fa23 f304 	lsr.w	r3, r3, r4
  423890:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  423894:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  423898:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  42389c:	eba0 0001 	sub.w	r0, r0, r1
  4238a0:	4770      	bx	lr
  4238a2:	ba24      	rev	r4, r4
  4238a4:	fab4 f484 	clz	r4, r4
  4238a8:	f024 0407 	bic.w	r4, r4, #7
  4238ac:	fa26 f104 	lsr.w	r1, r6, r4
  4238b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4238b4:	fa22 f204 	lsr.w	r2, r2, r4
  4238b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4238bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4238c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4238c4:	eba0 0001 	sub.w	r0, r0, r1
  4238c8:	4770      	bx	lr
  4238ca:	f014 0f03 	tst.w	r4, #3
  4238ce:	d13c      	bne.n	42394a <strcmp+0x182>
  4238d0:	f010 0403 	ands.w	r4, r0, #3
  4238d4:	d128      	bne.n	423928 <strcmp+0x160>
  4238d6:	f850 2b08 	ldr.w	r2, [r0], #8
  4238da:	f851 3b08 	ldr.w	r3, [r1], #8
  4238de:	fa82 f54c 	uadd8	r5, r2, ip
  4238e2:	ea82 0503 	eor.w	r5, r2, r3
  4238e6:	faa5 f58c 	sel	r5, r5, ip
  4238ea:	b95d      	cbnz	r5, 423904 <strcmp+0x13c>
  4238ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4238f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4238f4:	fa82 f54c 	uadd8	r5, r2, ip
  4238f8:	ea82 0503 	eor.w	r5, r2, r3
  4238fc:	faa5 f58c 	sel	r5, r5, ip
  423900:	2d00      	cmp	r5, #0
  423902:	d0e8      	beq.n	4238d6 <strcmp+0x10e>
  423904:	ba2d      	rev	r5, r5
  423906:	fab5 f485 	clz	r4, r5
  42390a:	f024 0407 	bic.w	r4, r4, #7
  42390e:	fa23 f104 	lsr.w	r1, r3, r4
  423912:	fa22 f204 	lsr.w	r2, r2, r4
  423916:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42391a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42391e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  423922:	eba0 0001 	sub.w	r0, r0, r1
  423926:	4770      	bx	lr
  423928:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  42392c:	f020 0003 	bic.w	r0, r0, #3
  423930:	f850 2b08 	ldr.w	r2, [r0], #8
  423934:	f021 0103 	bic.w	r1, r1, #3
  423938:	f851 3b08 	ldr.w	r3, [r1], #8
  42393c:	fa0c f404 	lsl.w	r4, ip, r4
  423940:	ea62 0204 	orn	r2, r2, r4
  423944:	ea63 0304 	orn	r3, r3, r4
  423948:	e7c9      	b.n	4238de <strcmp+0x116>
  42394a:	f010 0403 	ands.w	r4, r0, #3
  42394e:	d01a      	beq.n	423986 <strcmp+0x1be>
  423950:	eba1 0104 	sub.w	r1, r1, r4
  423954:	f020 0003 	bic.w	r0, r0, #3
  423958:	07e4      	lsls	r4, r4, #31
  42395a:	f850 2b04 	ldr.w	r2, [r0], #4
  42395e:	d006      	beq.n	42396e <strcmp+0x1a6>
  423960:	d20f      	bcs.n	423982 <strcmp+0x1ba>
  423962:	788b      	ldrb	r3, [r1, #2]
  423964:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  423968:	1ae4      	subs	r4, r4, r3
  42396a:	d106      	bne.n	42397a <strcmp+0x1b2>
  42396c:	b12b      	cbz	r3, 42397a <strcmp+0x1b2>
  42396e:	78cb      	ldrb	r3, [r1, #3]
  423970:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  423974:	1ae4      	subs	r4, r4, r3
  423976:	d100      	bne.n	42397a <strcmp+0x1b2>
  423978:	b91b      	cbnz	r3, 423982 <strcmp+0x1ba>
  42397a:	4620      	mov	r0, r4
  42397c:	f85d 4b10 	ldr.w	r4, [sp], #16
  423980:	4770      	bx	lr
  423982:	f101 0104 	add.w	r1, r1, #4
  423986:	f850 2b04 	ldr.w	r2, [r0], #4
  42398a:	07cc      	lsls	r4, r1, #31
  42398c:	f021 0103 	bic.w	r1, r1, #3
  423990:	f851 3b04 	ldr.w	r3, [r1], #4
  423994:	d848      	bhi.n	423a28 <strcmp+0x260>
  423996:	d224      	bcs.n	4239e2 <strcmp+0x21a>
  423998:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  42399c:	fa82 f54c 	uadd8	r5, r2, ip
  4239a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  4239a4:	faa5 f58c 	sel	r5, r5, ip
  4239a8:	d10a      	bne.n	4239c0 <strcmp+0x1f8>
  4239aa:	b965      	cbnz	r5, 4239c6 <strcmp+0x1fe>
  4239ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4239b0:	ea84 0402 	eor.w	r4, r4, r2
  4239b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  4239b8:	d10e      	bne.n	4239d8 <strcmp+0x210>
  4239ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4239be:	e7eb      	b.n	423998 <strcmp+0x1d0>
  4239c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4239c4:	e055      	b.n	423a72 <strcmp+0x2aa>
  4239c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4239ca:	d14d      	bne.n	423a68 <strcmp+0x2a0>
  4239cc:	7808      	ldrb	r0, [r1, #0]
  4239ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4239d2:	f1c0 0000 	rsb	r0, r0, #0
  4239d6:	4770      	bx	lr
  4239d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4239dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  4239e0:	e047      	b.n	423a72 <strcmp+0x2aa>
  4239e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  4239e6:	fa82 f54c 	uadd8	r5, r2, ip
  4239ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  4239ee:	faa5 f58c 	sel	r5, r5, ip
  4239f2:	d10a      	bne.n	423a0a <strcmp+0x242>
  4239f4:	b965      	cbnz	r5, 423a10 <strcmp+0x248>
  4239f6:	f851 3b04 	ldr.w	r3, [r1], #4
  4239fa:	ea84 0402 	eor.w	r4, r4, r2
  4239fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  423a02:	d10c      	bne.n	423a1e <strcmp+0x256>
  423a04:	f850 2b04 	ldr.w	r2, [r0], #4
  423a08:	e7eb      	b.n	4239e2 <strcmp+0x21a>
  423a0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  423a0e:	e030      	b.n	423a72 <strcmp+0x2aa>
  423a10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  423a14:	d128      	bne.n	423a68 <strcmp+0x2a0>
  423a16:	880b      	ldrh	r3, [r1, #0]
  423a18:	ea4f 4212 	mov.w	r2, r2, lsr #16
  423a1c:	e029      	b.n	423a72 <strcmp+0x2aa>
  423a1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  423a22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  423a26:	e024      	b.n	423a72 <strcmp+0x2aa>
  423a28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  423a2c:	fa82 f54c 	uadd8	r5, r2, ip
  423a30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  423a34:	faa5 f58c 	sel	r5, r5, ip
  423a38:	d10a      	bne.n	423a50 <strcmp+0x288>
  423a3a:	b965      	cbnz	r5, 423a56 <strcmp+0x28e>
  423a3c:	f851 3b04 	ldr.w	r3, [r1], #4
  423a40:	ea84 0402 	eor.w	r4, r4, r2
  423a44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  423a48:	d109      	bne.n	423a5e <strcmp+0x296>
  423a4a:	f850 2b04 	ldr.w	r2, [r0], #4
  423a4e:	e7eb      	b.n	423a28 <strcmp+0x260>
  423a50:	ea4f 6313 	mov.w	r3, r3, lsr #24
  423a54:	e00d      	b.n	423a72 <strcmp+0x2aa>
  423a56:	f015 0fff 	tst.w	r5, #255	; 0xff
  423a5a:	d105      	bne.n	423a68 <strcmp+0x2a0>
  423a5c:	680b      	ldr	r3, [r1, #0]
  423a5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  423a62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  423a66:	e004      	b.n	423a72 <strcmp+0x2aa>
  423a68:	f04f 0000 	mov.w	r0, #0
  423a6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  423a70:	4770      	bx	lr
  423a72:	ba12      	rev	r2, r2
  423a74:	ba1b      	rev	r3, r3
  423a76:	fa82 f44c 	uadd8	r4, r2, ip
  423a7a:	ea82 0403 	eor.w	r4, r2, r3
  423a7e:	faa4 f58c 	sel	r5, r4, ip
  423a82:	fab5 f485 	clz	r4, r5
  423a86:	fa02 f204 	lsl.w	r2, r2, r4
  423a8a:	fa03 f304 	lsl.w	r3, r3, r4
  423a8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  423a92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  423a96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  423a9a:	4770      	bx	lr

00423a9c <strcpy>:
  423a9c:	ea80 0201 	eor.w	r2, r0, r1
  423aa0:	4684      	mov	ip, r0
  423aa2:	f012 0f03 	tst.w	r2, #3
  423aa6:	d14f      	bne.n	423b48 <strcpy+0xac>
  423aa8:	f011 0f03 	tst.w	r1, #3
  423aac:	d132      	bne.n	423b14 <strcpy+0x78>
  423aae:	f84d 4d04 	str.w	r4, [sp, #-4]!
  423ab2:	f011 0f04 	tst.w	r1, #4
  423ab6:	f851 3b04 	ldr.w	r3, [r1], #4
  423aba:	d00b      	beq.n	423ad4 <strcpy+0x38>
  423abc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  423ac0:	439a      	bics	r2, r3
  423ac2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  423ac6:	bf04      	itt	eq
  423ac8:	f84c 3b04 	streq.w	r3, [ip], #4
  423acc:	f851 3b04 	ldreq.w	r3, [r1], #4
  423ad0:	d116      	bne.n	423b00 <strcpy+0x64>
  423ad2:	bf00      	nop
  423ad4:	f851 4b04 	ldr.w	r4, [r1], #4
  423ad8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  423adc:	439a      	bics	r2, r3
  423ade:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  423ae2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  423ae6:	d10b      	bne.n	423b00 <strcpy+0x64>
  423ae8:	f84c 3b04 	str.w	r3, [ip], #4
  423aec:	43a2      	bics	r2, r4
  423aee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  423af2:	bf04      	itt	eq
  423af4:	f851 3b04 	ldreq.w	r3, [r1], #4
  423af8:	f84c 4b04 	streq.w	r4, [ip], #4
  423afc:	d0ea      	beq.n	423ad4 <strcpy+0x38>
  423afe:	4623      	mov	r3, r4
  423b00:	f80c 3b01 	strb.w	r3, [ip], #1
  423b04:	f013 0fff 	tst.w	r3, #255	; 0xff
  423b08:	ea4f 2333 	mov.w	r3, r3, ror #8
  423b0c:	d1f8      	bne.n	423b00 <strcpy+0x64>
  423b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  423b12:	4770      	bx	lr
  423b14:	f011 0f01 	tst.w	r1, #1
  423b18:	d006      	beq.n	423b28 <strcpy+0x8c>
  423b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
  423b1e:	f80c 2b01 	strb.w	r2, [ip], #1
  423b22:	2a00      	cmp	r2, #0
  423b24:	bf08      	it	eq
  423b26:	4770      	bxeq	lr
  423b28:	f011 0f02 	tst.w	r1, #2
  423b2c:	d0bf      	beq.n	423aae <strcpy+0x12>
  423b2e:	f831 2b02 	ldrh.w	r2, [r1], #2
  423b32:	f012 0fff 	tst.w	r2, #255	; 0xff
  423b36:	bf16      	itet	ne
  423b38:	f82c 2b02 	strhne.w	r2, [ip], #2
  423b3c:	f88c 2000 	strbeq.w	r2, [ip]
  423b40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  423b44:	d1b3      	bne.n	423aae <strcpy+0x12>
  423b46:	4770      	bx	lr
  423b48:	f811 2b01 	ldrb.w	r2, [r1], #1
  423b4c:	f80c 2b01 	strb.w	r2, [ip], #1
  423b50:	2a00      	cmp	r2, #0
  423b52:	d1f9      	bne.n	423b48 <strcpy+0xac>
  423b54:	4770      	bx	lr
  423b56:	bf00      	nop
	...

00423b80 <strlen>:
  423b80:	f890 f000 	pld	[r0]
  423b84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  423b88:	f020 0107 	bic.w	r1, r0, #7
  423b8c:	f06f 0c00 	mvn.w	ip, #0
  423b90:	f010 0407 	ands.w	r4, r0, #7
  423b94:	f891 f020 	pld	[r1, #32]
  423b98:	f040 8049 	bne.w	423c2e <strlen+0xae>
  423b9c:	f04f 0400 	mov.w	r4, #0
  423ba0:	f06f 0007 	mvn.w	r0, #7
  423ba4:	e9d1 2300 	ldrd	r2, r3, [r1]
  423ba8:	f891 f040 	pld	[r1, #64]	; 0x40
  423bac:	f100 0008 	add.w	r0, r0, #8
  423bb0:	fa82 f24c 	uadd8	r2, r2, ip
  423bb4:	faa4 f28c 	sel	r2, r4, ip
  423bb8:	fa83 f34c 	uadd8	r3, r3, ip
  423bbc:	faa2 f38c 	sel	r3, r2, ip
  423bc0:	bb4b      	cbnz	r3, 423c16 <strlen+0x96>
  423bc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  423bc6:	fa82 f24c 	uadd8	r2, r2, ip
  423bca:	f100 0008 	add.w	r0, r0, #8
  423bce:	faa4 f28c 	sel	r2, r4, ip
  423bd2:	fa83 f34c 	uadd8	r3, r3, ip
  423bd6:	faa2 f38c 	sel	r3, r2, ip
  423bda:	b9e3      	cbnz	r3, 423c16 <strlen+0x96>
  423bdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  423be0:	fa82 f24c 	uadd8	r2, r2, ip
  423be4:	f100 0008 	add.w	r0, r0, #8
  423be8:	faa4 f28c 	sel	r2, r4, ip
  423bec:	fa83 f34c 	uadd8	r3, r3, ip
  423bf0:	faa2 f38c 	sel	r3, r2, ip
  423bf4:	b97b      	cbnz	r3, 423c16 <strlen+0x96>
  423bf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  423bfa:	f101 0120 	add.w	r1, r1, #32
  423bfe:	fa82 f24c 	uadd8	r2, r2, ip
  423c02:	f100 0008 	add.w	r0, r0, #8
  423c06:	faa4 f28c 	sel	r2, r4, ip
  423c0a:	fa83 f34c 	uadd8	r3, r3, ip
  423c0e:	faa2 f38c 	sel	r3, r2, ip
  423c12:	2b00      	cmp	r3, #0
  423c14:	d0c6      	beq.n	423ba4 <strlen+0x24>
  423c16:	2a00      	cmp	r2, #0
  423c18:	bf04      	itt	eq
  423c1a:	3004      	addeq	r0, #4
  423c1c:	461a      	moveq	r2, r3
  423c1e:	ba12      	rev	r2, r2
  423c20:	fab2 f282 	clz	r2, r2
  423c24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  423c28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  423c2c:	4770      	bx	lr
  423c2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  423c32:	f004 0503 	and.w	r5, r4, #3
  423c36:	f1c4 0000 	rsb	r0, r4, #0
  423c3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  423c3e:	f014 0f04 	tst.w	r4, #4
  423c42:	f891 f040 	pld	[r1, #64]	; 0x40
  423c46:	fa0c f505 	lsl.w	r5, ip, r5
  423c4a:	ea62 0205 	orn	r2, r2, r5
  423c4e:	bf1c      	itt	ne
  423c50:	ea63 0305 	ornne	r3, r3, r5
  423c54:	4662      	movne	r2, ip
  423c56:	f04f 0400 	mov.w	r4, #0
  423c5a:	e7a9      	b.n	423bb0 <strlen+0x30>

00423c5c <__sprint_r.part.0>:
  423c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423c60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  423c62:	049c      	lsls	r4, r3, #18
  423c64:	4693      	mov	fp, r2
  423c66:	d52f      	bpl.n	423cc8 <__sprint_r.part.0+0x6c>
  423c68:	6893      	ldr	r3, [r2, #8]
  423c6a:	6812      	ldr	r2, [r2, #0]
  423c6c:	b353      	cbz	r3, 423cc4 <__sprint_r.part.0+0x68>
  423c6e:	460e      	mov	r6, r1
  423c70:	4607      	mov	r7, r0
  423c72:	f102 0908 	add.w	r9, r2, #8
  423c76:	e919 0420 	ldmdb	r9, {r5, sl}
  423c7a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  423c7e:	d017      	beq.n	423cb0 <__sprint_r.part.0+0x54>
  423c80:	3d04      	subs	r5, #4
  423c82:	2400      	movs	r4, #0
  423c84:	e001      	b.n	423c8a <__sprint_r.part.0+0x2e>
  423c86:	45a0      	cmp	r8, r4
  423c88:	d010      	beq.n	423cac <__sprint_r.part.0+0x50>
  423c8a:	4632      	mov	r2, r6
  423c8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  423c90:	4638      	mov	r0, r7
  423c92:	f001 f8bb 	bl	424e0c <_fputwc_r>
  423c96:	1c43      	adds	r3, r0, #1
  423c98:	f104 0401 	add.w	r4, r4, #1
  423c9c:	d1f3      	bne.n	423c86 <__sprint_r.part.0+0x2a>
  423c9e:	2300      	movs	r3, #0
  423ca0:	f8cb 3008 	str.w	r3, [fp, #8]
  423ca4:	f8cb 3004 	str.w	r3, [fp, #4]
  423ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423cac:	f8db 3008 	ldr.w	r3, [fp, #8]
  423cb0:	f02a 0a03 	bic.w	sl, sl, #3
  423cb4:	eba3 030a 	sub.w	r3, r3, sl
  423cb8:	f8cb 3008 	str.w	r3, [fp, #8]
  423cbc:	f109 0908 	add.w	r9, r9, #8
  423cc0:	2b00      	cmp	r3, #0
  423cc2:	d1d8      	bne.n	423c76 <__sprint_r.part.0+0x1a>
  423cc4:	2000      	movs	r0, #0
  423cc6:	e7ea      	b.n	423c9e <__sprint_r.part.0+0x42>
  423cc8:	f001 fa0a 	bl	4250e0 <__sfvwrite_r>
  423ccc:	2300      	movs	r3, #0
  423cce:	f8cb 3008 	str.w	r3, [fp, #8]
  423cd2:	f8cb 3004 	str.w	r3, [fp, #4]
  423cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423cda:	bf00      	nop

00423cdc <_vfiprintf_r>:
  423cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423ce0:	b0ad      	sub	sp, #180	; 0xb4
  423ce2:	461d      	mov	r5, r3
  423ce4:	468b      	mov	fp, r1
  423ce6:	4690      	mov	r8, r2
  423ce8:	9307      	str	r3, [sp, #28]
  423cea:	9006      	str	r0, [sp, #24]
  423cec:	b118      	cbz	r0, 423cf6 <_vfiprintf_r+0x1a>
  423cee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  423cf0:	2b00      	cmp	r3, #0
  423cf2:	f000 80f3 	beq.w	423edc <_vfiprintf_r+0x200>
  423cf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423cfa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  423cfe:	07df      	lsls	r7, r3, #31
  423d00:	b281      	uxth	r1, r0
  423d02:	d402      	bmi.n	423d0a <_vfiprintf_r+0x2e>
  423d04:	058e      	lsls	r6, r1, #22
  423d06:	f140 80fc 	bpl.w	423f02 <_vfiprintf_r+0x226>
  423d0a:	048c      	lsls	r4, r1, #18
  423d0c:	d40a      	bmi.n	423d24 <_vfiprintf_r+0x48>
  423d0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423d12:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  423d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  423d1a:	f8ab 100c 	strh.w	r1, [fp, #12]
  423d1e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  423d22:	b289      	uxth	r1, r1
  423d24:	0708      	lsls	r0, r1, #28
  423d26:	f140 80b3 	bpl.w	423e90 <_vfiprintf_r+0x1b4>
  423d2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  423d2e:	2b00      	cmp	r3, #0
  423d30:	f000 80ae 	beq.w	423e90 <_vfiprintf_r+0x1b4>
  423d34:	f001 031a 	and.w	r3, r1, #26
  423d38:	2b0a      	cmp	r3, #10
  423d3a:	f000 80b5 	beq.w	423ea8 <_vfiprintf_r+0x1cc>
  423d3e:	2300      	movs	r3, #0
  423d40:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  423d44:	930b      	str	r3, [sp, #44]	; 0x2c
  423d46:	9311      	str	r3, [sp, #68]	; 0x44
  423d48:	9310      	str	r3, [sp, #64]	; 0x40
  423d4a:	9303      	str	r3, [sp, #12]
  423d4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  423d50:	46ca      	mov	sl, r9
  423d52:	f8cd b010 	str.w	fp, [sp, #16]
  423d56:	f898 3000 	ldrb.w	r3, [r8]
  423d5a:	4644      	mov	r4, r8
  423d5c:	b1fb      	cbz	r3, 423d9e <_vfiprintf_r+0xc2>
  423d5e:	2b25      	cmp	r3, #37	; 0x25
  423d60:	d102      	bne.n	423d68 <_vfiprintf_r+0x8c>
  423d62:	e01c      	b.n	423d9e <_vfiprintf_r+0xc2>
  423d64:	2b25      	cmp	r3, #37	; 0x25
  423d66:	d003      	beq.n	423d70 <_vfiprintf_r+0x94>
  423d68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  423d6c:	2b00      	cmp	r3, #0
  423d6e:	d1f9      	bne.n	423d64 <_vfiprintf_r+0x88>
  423d70:	eba4 0508 	sub.w	r5, r4, r8
  423d74:	b19d      	cbz	r5, 423d9e <_vfiprintf_r+0xc2>
  423d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  423d78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423d7a:	f8ca 8000 	str.w	r8, [sl]
  423d7e:	3301      	adds	r3, #1
  423d80:	442a      	add	r2, r5
  423d82:	2b07      	cmp	r3, #7
  423d84:	f8ca 5004 	str.w	r5, [sl, #4]
  423d88:	9211      	str	r2, [sp, #68]	; 0x44
  423d8a:	9310      	str	r3, [sp, #64]	; 0x40
  423d8c:	dd7a      	ble.n	423e84 <_vfiprintf_r+0x1a8>
  423d8e:	2a00      	cmp	r2, #0
  423d90:	f040 84b0 	bne.w	4246f4 <_vfiprintf_r+0xa18>
  423d94:	9b03      	ldr	r3, [sp, #12]
  423d96:	9210      	str	r2, [sp, #64]	; 0x40
  423d98:	442b      	add	r3, r5
  423d9a:	46ca      	mov	sl, r9
  423d9c:	9303      	str	r3, [sp, #12]
  423d9e:	7823      	ldrb	r3, [r4, #0]
  423da0:	2b00      	cmp	r3, #0
  423da2:	f000 83e0 	beq.w	424566 <_vfiprintf_r+0x88a>
  423da6:	2000      	movs	r0, #0
  423da8:	f04f 0300 	mov.w	r3, #0
  423dac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  423db0:	f104 0801 	add.w	r8, r4, #1
  423db4:	7862      	ldrb	r2, [r4, #1]
  423db6:	4605      	mov	r5, r0
  423db8:	4606      	mov	r6, r0
  423dba:	4603      	mov	r3, r0
  423dbc:	f04f 34ff 	mov.w	r4, #4294967295
  423dc0:	f108 0801 	add.w	r8, r8, #1
  423dc4:	f1a2 0120 	sub.w	r1, r2, #32
  423dc8:	2958      	cmp	r1, #88	; 0x58
  423dca:	f200 82de 	bhi.w	42438a <_vfiprintf_r+0x6ae>
  423dce:	e8df f011 	tbh	[pc, r1, lsl #1]
  423dd2:	0221      	.short	0x0221
  423dd4:	02dc02dc 	.word	0x02dc02dc
  423dd8:	02dc0229 	.word	0x02dc0229
  423ddc:	02dc02dc 	.word	0x02dc02dc
  423de0:	02dc02dc 	.word	0x02dc02dc
  423de4:	028902dc 	.word	0x028902dc
  423de8:	02dc0295 	.word	0x02dc0295
  423dec:	02bd00a2 	.word	0x02bd00a2
  423df0:	019f02dc 	.word	0x019f02dc
  423df4:	01a401a4 	.word	0x01a401a4
  423df8:	01a401a4 	.word	0x01a401a4
  423dfc:	01a401a4 	.word	0x01a401a4
  423e00:	01a401a4 	.word	0x01a401a4
  423e04:	02dc01a4 	.word	0x02dc01a4
  423e08:	02dc02dc 	.word	0x02dc02dc
  423e0c:	02dc02dc 	.word	0x02dc02dc
  423e10:	02dc02dc 	.word	0x02dc02dc
  423e14:	02dc02dc 	.word	0x02dc02dc
  423e18:	01b202dc 	.word	0x01b202dc
  423e1c:	02dc02dc 	.word	0x02dc02dc
  423e20:	02dc02dc 	.word	0x02dc02dc
  423e24:	02dc02dc 	.word	0x02dc02dc
  423e28:	02dc02dc 	.word	0x02dc02dc
  423e2c:	02dc02dc 	.word	0x02dc02dc
  423e30:	02dc0197 	.word	0x02dc0197
  423e34:	02dc02dc 	.word	0x02dc02dc
  423e38:	02dc02dc 	.word	0x02dc02dc
  423e3c:	02dc019b 	.word	0x02dc019b
  423e40:	025302dc 	.word	0x025302dc
  423e44:	02dc02dc 	.word	0x02dc02dc
  423e48:	02dc02dc 	.word	0x02dc02dc
  423e4c:	02dc02dc 	.word	0x02dc02dc
  423e50:	02dc02dc 	.word	0x02dc02dc
  423e54:	02dc02dc 	.word	0x02dc02dc
  423e58:	021b025a 	.word	0x021b025a
  423e5c:	02dc02dc 	.word	0x02dc02dc
  423e60:	026e02dc 	.word	0x026e02dc
  423e64:	02dc021b 	.word	0x02dc021b
  423e68:	027302dc 	.word	0x027302dc
  423e6c:	01f502dc 	.word	0x01f502dc
  423e70:	02090182 	.word	0x02090182
  423e74:	02dc02d7 	.word	0x02dc02d7
  423e78:	02dc029a 	.word	0x02dc029a
  423e7c:	02dc00a7 	.word	0x02dc00a7
  423e80:	022e02dc 	.word	0x022e02dc
  423e84:	f10a 0a08 	add.w	sl, sl, #8
  423e88:	9b03      	ldr	r3, [sp, #12]
  423e8a:	442b      	add	r3, r5
  423e8c:	9303      	str	r3, [sp, #12]
  423e8e:	e786      	b.n	423d9e <_vfiprintf_r+0xc2>
  423e90:	4659      	mov	r1, fp
  423e92:	9806      	ldr	r0, [sp, #24]
  423e94:	f000 fdac 	bl	4249f0 <__swsetup_r>
  423e98:	bb18      	cbnz	r0, 423ee2 <_vfiprintf_r+0x206>
  423e9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  423e9e:	f001 031a 	and.w	r3, r1, #26
  423ea2:	2b0a      	cmp	r3, #10
  423ea4:	f47f af4b 	bne.w	423d3e <_vfiprintf_r+0x62>
  423ea8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  423eac:	2b00      	cmp	r3, #0
  423eae:	f6ff af46 	blt.w	423d3e <_vfiprintf_r+0x62>
  423eb2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423eb6:	07db      	lsls	r3, r3, #31
  423eb8:	d405      	bmi.n	423ec6 <_vfiprintf_r+0x1ea>
  423eba:	058f      	lsls	r7, r1, #22
  423ebc:	d403      	bmi.n	423ec6 <_vfiprintf_r+0x1ea>
  423ebe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  423ec2:	f001 fac3 	bl	42544c <__retarget_lock_release_recursive>
  423ec6:	462b      	mov	r3, r5
  423ec8:	4642      	mov	r2, r8
  423eca:	4659      	mov	r1, fp
  423ecc:	9806      	ldr	r0, [sp, #24]
  423ece:	f000 fd4d 	bl	42496c <__sbprintf>
  423ed2:	9003      	str	r0, [sp, #12]
  423ed4:	9803      	ldr	r0, [sp, #12]
  423ed6:	b02d      	add	sp, #180	; 0xb4
  423ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423edc:	f000 fef4 	bl	424cc8 <__sinit>
  423ee0:	e709      	b.n	423cf6 <_vfiprintf_r+0x1a>
  423ee2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  423ee6:	07d9      	lsls	r1, r3, #31
  423ee8:	d404      	bmi.n	423ef4 <_vfiprintf_r+0x218>
  423eea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  423eee:	059a      	lsls	r2, r3, #22
  423ef0:	f140 84aa 	bpl.w	424848 <_vfiprintf_r+0xb6c>
  423ef4:	f04f 33ff 	mov.w	r3, #4294967295
  423ef8:	9303      	str	r3, [sp, #12]
  423efa:	9803      	ldr	r0, [sp, #12]
  423efc:	b02d      	add	sp, #180	; 0xb4
  423efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423f02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  423f06:	f001 fa9f 	bl	425448 <__retarget_lock_acquire_recursive>
  423f0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  423f0e:	b281      	uxth	r1, r0
  423f10:	e6fb      	b.n	423d0a <_vfiprintf_r+0x2e>
  423f12:	4276      	negs	r6, r6
  423f14:	9207      	str	r2, [sp, #28]
  423f16:	f043 0304 	orr.w	r3, r3, #4
  423f1a:	f898 2000 	ldrb.w	r2, [r8]
  423f1e:	e74f      	b.n	423dc0 <_vfiprintf_r+0xe4>
  423f20:	9608      	str	r6, [sp, #32]
  423f22:	069e      	lsls	r6, r3, #26
  423f24:	f100 8450 	bmi.w	4247c8 <_vfiprintf_r+0xaec>
  423f28:	9907      	ldr	r1, [sp, #28]
  423f2a:	06dd      	lsls	r5, r3, #27
  423f2c:	460a      	mov	r2, r1
  423f2e:	f100 83ef 	bmi.w	424710 <_vfiprintf_r+0xa34>
  423f32:	0658      	lsls	r0, r3, #25
  423f34:	f140 83ec 	bpl.w	424710 <_vfiprintf_r+0xa34>
  423f38:	880e      	ldrh	r6, [r1, #0]
  423f3a:	3104      	adds	r1, #4
  423f3c:	2700      	movs	r7, #0
  423f3e:	2201      	movs	r2, #1
  423f40:	9107      	str	r1, [sp, #28]
  423f42:	f04f 0100 	mov.w	r1, #0
  423f46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  423f4a:	2500      	movs	r5, #0
  423f4c:	1c61      	adds	r1, r4, #1
  423f4e:	f000 8116 	beq.w	42417e <_vfiprintf_r+0x4a2>
  423f52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  423f56:	9102      	str	r1, [sp, #8]
  423f58:	ea56 0107 	orrs.w	r1, r6, r7
  423f5c:	f040 8114 	bne.w	424188 <_vfiprintf_r+0x4ac>
  423f60:	2c00      	cmp	r4, #0
  423f62:	f040 835c 	bne.w	42461e <_vfiprintf_r+0x942>
  423f66:	2a00      	cmp	r2, #0
  423f68:	f040 83b7 	bne.w	4246da <_vfiprintf_r+0x9fe>
  423f6c:	f013 0301 	ands.w	r3, r3, #1
  423f70:	9305      	str	r3, [sp, #20]
  423f72:	f000 8457 	beq.w	424824 <_vfiprintf_r+0xb48>
  423f76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  423f7a:	2330      	movs	r3, #48	; 0x30
  423f7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  423f80:	9b05      	ldr	r3, [sp, #20]
  423f82:	42a3      	cmp	r3, r4
  423f84:	bfb8      	it	lt
  423f86:	4623      	movlt	r3, r4
  423f88:	9301      	str	r3, [sp, #4]
  423f8a:	b10d      	cbz	r5, 423f90 <_vfiprintf_r+0x2b4>
  423f8c:	3301      	adds	r3, #1
  423f8e:	9301      	str	r3, [sp, #4]
  423f90:	9b02      	ldr	r3, [sp, #8]
  423f92:	f013 0302 	ands.w	r3, r3, #2
  423f96:	9309      	str	r3, [sp, #36]	; 0x24
  423f98:	d002      	beq.n	423fa0 <_vfiprintf_r+0x2c4>
  423f9a:	9b01      	ldr	r3, [sp, #4]
  423f9c:	3302      	adds	r3, #2
  423f9e:	9301      	str	r3, [sp, #4]
  423fa0:	9b02      	ldr	r3, [sp, #8]
  423fa2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  423fa6:	930a      	str	r3, [sp, #40]	; 0x28
  423fa8:	f040 8217 	bne.w	4243da <_vfiprintf_r+0x6fe>
  423fac:	9b08      	ldr	r3, [sp, #32]
  423fae:	9a01      	ldr	r2, [sp, #4]
  423fb0:	1a9d      	subs	r5, r3, r2
  423fb2:	2d00      	cmp	r5, #0
  423fb4:	f340 8211 	ble.w	4243da <_vfiprintf_r+0x6fe>
  423fb8:	2d10      	cmp	r5, #16
  423fba:	f340 8490 	ble.w	4248de <_vfiprintf_r+0xc02>
  423fbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  423fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423fc2:	4ec4      	ldr	r6, [pc, #784]	; (4242d4 <_vfiprintf_r+0x5f8>)
  423fc4:	46d6      	mov	lr, sl
  423fc6:	2710      	movs	r7, #16
  423fc8:	46a2      	mov	sl, r4
  423fca:	4619      	mov	r1, r3
  423fcc:	9c06      	ldr	r4, [sp, #24]
  423fce:	e007      	b.n	423fe0 <_vfiprintf_r+0x304>
  423fd0:	f101 0c02 	add.w	ip, r1, #2
  423fd4:	f10e 0e08 	add.w	lr, lr, #8
  423fd8:	4601      	mov	r1, r0
  423fda:	3d10      	subs	r5, #16
  423fdc:	2d10      	cmp	r5, #16
  423fde:	dd11      	ble.n	424004 <_vfiprintf_r+0x328>
  423fe0:	1c48      	adds	r0, r1, #1
  423fe2:	3210      	adds	r2, #16
  423fe4:	2807      	cmp	r0, #7
  423fe6:	9211      	str	r2, [sp, #68]	; 0x44
  423fe8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  423fec:	9010      	str	r0, [sp, #64]	; 0x40
  423fee:	ddef      	ble.n	423fd0 <_vfiprintf_r+0x2f4>
  423ff0:	2a00      	cmp	r2, #0
  423ff2:	f040 81e4 	bne.w	4243be <_vfiprintf_r+0x6e2>
  423ff6:	3d10      	subs	r5, #16
  423ff8:	2d10      	cmp	r5, #16
  423ffa:	4611      	mov	r1, r2
  423ffc:	f04f 0c01 	mov.w	ip, #1
  424000:	46ce      	mov	lr, r9
  424002:	dced      	bgt.n	423fe0 <_vfiprintf_r+0x304>
  424004:	4654      	mov	r4, sl
  424006:	4661      	mov	r1, ip
  424008:	46f2      	mov	sl, lr
  42400a:	442a      	add	r2, r5
  42400c:	2907      	cmp	r1, #7
  42400e:	9211      	str	r2, [sp, #68]	; 0x44
  424010:	f8ca 6000 	str.w	r6, [sl]
  424014:	f8ca 5004 	str.w	r5, [sl, #4]
  424018:	9110      	str	r1, [sp, #64]	; 0x40
  42401a:	f300 82ec 	bgt.w	4245f6 <_vfiprintf_r+0x91a>
  42401e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  424022:	f10a 0a08 	add.w	sl, sl, #8
  424026:	1c48      	adds	r0, r1, #1
  424028:	2d00      	cmp	r5, #0
  42402a:	f040 81de 	bne.w	4243ea <_vfiprintf_r+0x70e>
  42402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  424030:	2b00      	cmp	r3, #0
  424032:	f000 81f8 	beq.w	424426 <_vfiprintf_r+0x74a>
  424036:	3202      	adds	r2, #2
  424038:	a90e      	add	r1, sp, #56	; 0x38
  42403a:	2302      	movs	r3, #2
  42403c:	2807      	cmp	r0, #7
  42403e:	9211      	str	r2, [sp, #68]	; 0x44
  424040:	9010      	str	r0, [sp, #64]	; 0x40
  424042:	e88a 000a 	stmia.w	sl, {r1, r3}
  424046:	f340 81ea 	ble.w	42441e <_vfiprintf_r+0x742>
  42404a:	2a00      	cmp	r2, #0
  42404c:	f040 838c 	bne.w	424768 <_vfiprintf_r+0xa8c>
  424050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  424052:	2b80      	cmp	r3, #128	; 0x80
  424054:	f04f 0001 	mov.w	r0, #1
  424058:	4611      	mov	r1, r2
  42405a:	46ca      	mov	sl, r9
  42405c:	f040 81e7 	bne.w	42442e <_vfiprintf_r+0x752>
  424060:	9b08      	ldr	r3, [sp, #32]
  424062:	9d01      	ldr	r5, [sp, #4]
  424064:	1b5e      	subs	r6, r3, r5
  424066:	2e00      	cmp	r6, #0
  424068:	f340 81e1 	ble.w	42442e <_vfiprintf_r+0x752>
  42406c:	2e10      	cmp	r6, #16
  42406e:	4d9a      	ldr	r5, [pc, #616]	; (4242d8 <_vfiprintf_r+0x5fc>)
  424070:	f340 8450 	ble.w	424914 <_vfiprintf_r+0xc38>
  424074:	46d4      	mov	ip, sl
  424076:	2710      	movs	r7, #16
  424078:	46a2      	mov	sl, r4
  42407a:	9c06      	ldr	r4, [sp, #24]
  42407c:	e007      	b.n	42408e <_vfiprintf_r+0x3b2>
  42407e:	f101 0e02 	add.w	lr, r1, #2
  424082:	f10c 0c08 	add.w	ip, ip, #8
  424086:	4601      	mov	r1, r0
  424088:	3e10      	subs	r6, #16
  42408a:	2e10      	cmp	r6, #16
  42408c:	dd11      	ble.n	4240b2 <_vfiprintf_r+0x3d6>
  42408e:	1c48      	adds	r0, r1, #1
  424090:	3210      	adds	r2, #16
  424092:	2807      	cmp	r0, #7
  424094:	9211      	str	r2, [sp, #68]	; 0x44
  424096:	e88c 00a0 	stmia.w	ip, {r5, r7}
  42409a:	9010      	str	r0, [sp, #64]	; 0x40
  42409c:	ddef      	ble.n	42407e <_vfiprintf_r+0x3a2>
  42409e:	2a00      	cmp	r2, #0
  4240a0:	f040 829d 	bne.w	4245de <_vfiprintf_r+0x902>
  4240a4:	3e10      	subs	r6, #16
  4240a6:	2e10      	cmp	r6, #16
  4240a8:	f04f 0e01 	mov.w	lr, #1
  4240ac:	4611      	mov	r1, r2
  4240ae:	46cc      	mov	ip, r9
  4240b0:	dced      	bgt.n	42408e <_vfiprintf_r+0x3b2>
  4240b2:	4654      	mov	r4, sl
  4240b4:	46e2      	mov	sl, ip
  4240b6:	4432      	add	r2, r6
  4240b8:	f1be 0f07 	cmp.w	lr, #7
  4240bc:	9211      	str	r2, [sp, #68]	; 0x44
  4240be:	e88a 0060 	stmia.w	sl, {r5, r6}
  4240c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4240c6:	f300 8369 	bgt.w	42479c <_vfiprintf_r+0xac0>
  4240ca:	f10a 0a08 	add.w	sl, sl, #8
  4240ce:	f10e 0001 	add.w	r0, lr, #1
  4240d2:	4671      	mov	r1, lr
  4240d4:	e1ab      	b.n	42442e <_vfiprintf_r+0x752>
  4240d6:	9608      	str	r6, [sp, #32]
  4240d8:	f013 0220 	ands.w	r2, r3, #32
  4240dc:	f040 838c 	bne.w	4247f8 <_vfiprintf_r+0xb1c>
  4240e0:	f013 0110 	ands.w	r1, r3, #16
  4240e4:	f040 831a 	bne.w	42471c <_vfiprintf_r+0xa40>
  4240e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4240ec:	f000 8316 	beq.w	42471c <_vfiprintf_r+0xa40>
  4240f0:	9807      	ldr	r0, [sp, #28]
  4240f2:	460a      	mov	r2, r1
  4240f4:	4601      	mov	r1, r0
  4240f6:	3104      	adds	r1, #4
  4240f8:	8806      	ldrh	r6, [r0, #0]
  4240fa:	9107      	str	r1, [sp, #28]
  4240fc:	2700      	movs	r7, #0
  4240fe:	e720      	b.n	423f42 <_vfiprintf_r+0x266>
  424100:	9608      	str	r6, [sp, #32]
  424102:	f043 0310 	orr.w	r3, r3, #16
  424106:	e7e7      	b.n	4240d8 <_vfiprintf_r+0x3fc>
  424108:	9608      	str	r6, [sp, #32]
  42410a:	f043 0310 	orr.w	r3, r3, #16
  42410e:	e708      	b.n	423f22 <_vfiprintf_r+0x246>
  424110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  424114:	f898 2000 	ldrb.w	r2, [r8]
  424118:	e652      	b.n	423dc0 <_vfiprintf_r+0xe4>
  42411a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42411e:	2600      	movs	r6, #0
  424120:	f818 2b01 	ldrb.w	r2, [r8], #1
  424124:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  424128:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  42412c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  424130:	2909      	cmp	r1, #9
  424132:	d9f5      	bls.n	424120 <_vfiprintf_r+0x444>
  424134:	e646      	b.n	423dc4 <_vfiprintf_r+0xe8>
  424136:	9608      	str	r6, [sp, #32]
  424138:	2800      	cmp	r0, #0
  42413a:	f040 8408 	bne.w	42494e <_vfiprintf_r+0xc72>
  42413e:	f043 0310 	orr.w	r3, r3, #16
  424142:	069e      	lsls	r6, r3, #26
  424144:	f100 834c 	bmi.w	4247e0 <_vfiprintf_r+0xb04>
  424148:	06dd      	lsls	r5, r3, #27
  42414a:	f100 82f3 	bmi.w	424734 <_vfiprintf_r+0xa58>
  42414e:	0658      	lsls	r0, r3, #25
  424150:	f140 82f0 	bpl.w	424734 <_vfiprintf_r+0xa58>
  424154:	9d07      	ldr	r5, [sp, #28]
  424156:	f9b5 6000 	ldrsh.w	r6, [r5]
  42415a:	462a      	mov	r2, r5
  42415c:	17f7      	asrs	r7, r6, #31
  42415e:	3204      	adds	r2, #4
  424160:	4630      	mov	r0, r6
  424162:	4639      	mov	r1, r7
  424164:	9207      	str	r2, [sp, #28]
  424166:	2800      	cmp	r0, #0
  424168:	f171 0200 	sbcs.w	r2, r1, #0
  42416c:	f2c0 835d 	blt.w	42482a <_vfiprintf_r+0xb4e>
  424170:	1c61      	adds	r1, r4, #1
  424172:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  424176:	f04f 0201 	mov.w	r2, #1
  42417a:	f47f aeea 	bne.w	423f52 <_vfiprintf_r+0x276>
  42417e:	ea56 0107 	orrs.w	r1, r6, r7
  424182:	f000 824d 	beq.w	424620 <_vfiprintf_r+0x944>
  424186:	9302      	str	r3, [sp, #8]
  424188:	2a01      	cmp	r2, #1
  42418a:	f000 828c 	beq.w	4246a6 <_vfiprintf_r+0x9ca>
  42418e:	2a02      	cmp	r2, #2
  424190:	f040 825c 	bne.w	42464c <_vfiprintf_r+0x970>
  424194:	980b      	ldr	r0, [sp, #44]	; 0x2c
  424196:	46cb      	mov	fp, r9
  424198:	0933      	lsrs	r3, r6, #4
  42419a:	f006 010f 	and.w	r1, r6, #15
  42419e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4241a2:	093a      	lsrs	r2, r7, #4
  4241a4:	461e      	mov	r6, r3
  4241a6:	4617      	mov	r7, r2
  4241a8:	5c43      	ldrb	r3, [r0, r1]
  4241aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4241ae:	ea56 0307 	orrs.w	r3, r6, r7
  4241b2:	d1f1      	bne.n	424198 <_vfiprintf_r+0x4bc>
  4241b4:	eba9 030b 	sub.w	r3, r9, fp
  4241b8:	9305      	str	r3, [sp, #20]
  4241ba:	e6e1      	b.n	423f80 <_vfiprintf_r+0x2a4>
  4241bc:	2800      	cmp	r0, #0
  4241be:	f040 83c0 	bne.w	424942 <_vfiprintf_r+0xc66>
  4241c2:	0699      	lsls	r1, r3, #26
  4241c4:	f100 8367 	bmi.w	424896 <_vfiprintf_r+0xbba>
  4241c8:	06da      	lsls	r2, r3, #27
  4241ca:	f100 80f1 	bmi.w	4243b0 <_vfiprintf_r+0x6d4>
  4241ce:	065b      	lsls	r3, r3, #25
  4241d0:	f140 80ee 	bpl.w	4243b0 <_vfiprintf_r+0x6d4>
  4241d4:	9a07      	ldr	r2, [sp, #28]
  4241d6:	6813      	ldr	r3, [r2, #0]
  4241d8:	3204      	adds	r2, #4
  4241da:	9207      	str	r2, [sp, #28]
  4241dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4241e0:	801a      	strh	r2, [r3, #0]
  4241e2:	e5b8      	b.n	423d56 <_vfiprintf_r+0x7a>
  4241e4:	9807      	ldr	r0, [sp, #28]
  4241e6:	4a3d      	ldr	r2, [pc, #244]	; (4242dc <_vfiprintf_r+0x600>)
  4241e8:	9608      	str	r6, [sp, #32]
  4241ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4241ec:	6806      	ldr	r6, [r0, #0]
  4241ee:	2278      	movs	r2, #120	; 0x78
  4241f0:	2130      	movs	r1, #48	; 0x30
  4241f2:	3004      	adds	r0, #4
  4241f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4241f8:	f043 0302 	orr.w	r3, r3, #2
  4241fc:	9007      	str	r0, [sp, #28]
  4241fe:	2700      	movs	r7, #0
  424200:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  424204:	2202      	movs	r2, #2
  424206:	e69c      	b.n	423f42 <_vfiprintf_r+0x266>
  424208:	9608      	str	r6, [sp, #32]
  42420a:	2800      	cmp	r0, #0
  42420c:	d099      	beq.n	424142 <_vfiprintf_r+0x466>
  42420e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424212:	e796      	b.n	424142 <_vfiprintf_r+0x466>
  424214:	f898 2000 	ldrb.w	r2, [r8]
  424218:	2d00      	cmp	r5, #0
  42421a:	f47f add1 	bne.w	423dc0 <_vfiprintf_r+0xe4>
  42421e:	2001      	movs	r0, #1
  424220:	2520      	movs	r5, #32
  424222:	e5cd      	b.n	423dc0 <_vfiprintf_r+0xe4>
  424224:	f043 0301 	orr.w	r3, r3, #1
  424228:	f898 2000 	ldrb.w	r2, [r8]
  42422c:	e5c8      	b.n	423dc0 <_vfiprintf_r+0xe4>
  42422e:	9608      	str	r6, [sp, #32]
  424230:	2800      	cmp	r0, #0
  424232:	f040 8393 	bne.w	42495c <_vfiprintf_r+0xc80>
  424236:	4929      	ldr	r1, [pc, #164]	; (4242dc <_vfiprintf_r+0x600>)
  424238:	910b      	str	r1, [sp, #44]	; 0x2c
  42423a:	069f      	lsls	r7, r3, #26
  42423c:	f100 82e8 	bmi.w	424810 <_vfiprintf_r+0xb34>
  424240:	9807      	ldr	r0, [sp, #28]
  424242:	06de      	lsls	r6, r3, #27
  424244:	4601      	mov	r1, r0
  424246:	f100 8270 	bmi.w	42472a <_vfiprintf_r+0xa4e>
  42424a:	065d      	lsls	r5, r3, #25
  42424c:	f140 826d 	bpl.w	42472a <_vfiprintf_r+0xa4e>
  424250:	3104      	adds	r1, #4
  424252:	8806      	ldrh	r6, [r0, #0]
  424254:	9107      	str	r1, [sp, #28]
  424256:	2700      	movs	r7, #0
  424258:	07d8      	lsls	r0, r3, #31
  42425a:	f140 8222 	bpl.w	4246a2 <_vfiprintf_r+0x9c6>
  42425e:	ea56 0107 	orrs.w	r1, r6, r7
  424262:	f000 821e 	beq.w	4246a2 <_vfiprintf_r+0x9c6>
  424266:	2130      	movs	r1, #48	; 0x30
  424268:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  42426c:	f043 0302 	orr.w	r3, r3, #2
  424270:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  424274:	2202      	movs	r2, #2
  424276:	e664      	b.n	423f42 <_vfiprintf_r+0x266>
  424278:	9608      	str	r6, [sp, #32]
  42427a:	2800      	cmp	r0, #0
  42427c:	f040 836b 	bne.w	424956 <_vfiprintf_r+0xc7a>
  424280:	4917      	ldr	r1, [pc, #92]	; (4242e0 <_vfiprintf_r+0x604>)
  424282:	910b      	str	r1, [sp, #44]	; 0x2c
  424284:	e7d9      	b.n	42423a <_vfiprintf_r+0x55e>
  424286:	9907      	ldr	r1, [sp, #28]
  424288:	9608      	str	r6, [sp, #32]
  42428a:	680a      	ldr	r2, [r1, #0]
  42428c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  424290:	f04f 0000 	mov.w	r0, #0
  424294:	460a      	mov	r2, r1
  424296:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  42429a:	3204      	adds	r2, #4
  42429c:	2001      	movs	r0, #1
  42429e:	9001      	str	r0, [sp, #4]
  4242a0:	9207      	str	r2, [sp, #28]
  4242a2:	9005      	str	r0, [sp, #20]
  4242a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4242a8:	9302      	str	r3, [sp, #8]
  4242aa:	2400      	movs	r4, #0
  4242ac:	e670      	b.n	423f90 <_vfiprintf_r+0x2b4>
  4242ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4242b2:	f898 2000 	ldrb.w	r2, [r8]
  4242b6:	e583      	b.n	423dc0 <_vfiprintf_r+0xe4>
  4242b8:	f898 2000 	ldrb.w	r2, [r8]
  4242bc:	2a6c      	cmp	r2, #108	; 0x6c
  4242be:	bf03      	ittte	eq
  4242c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4242c4:	f043 0320 	orreq.w	r3, r3, #32
  4242c8:	f108 0801 	addeq.w	r8, r8, #1
  4242cc:	f043 0310 	orrne.w	r3, r3, #16
  4242d0:	e576      	b.n	423dc0 <_vfiprintf_r+0xe4>
  4242d2:	bf00      	nop
  4242d4:	0042e414 	.word	0x0042e414
  4242d8:	0042e424 	.word	0x0042e424
  4242dc:	0042e3f8 	.word	0x0042e3f8
  4242e0:	0042e3e4 	.word	0x0042e3e4
  4242e4:	9907      	ldr	r1, [sp, #28]
  4242e6:	680e      	ldr	r6, [r1, #0]
  4242e8:	460a      	mov	r2, r1
  4242ea:	2e00      	cmp	r6, #0
  4242ec:	f102 0204 	add.w	r2, r2, #4
  4242f0:	f6ff ae0f 	blt.w	423f12 <_vfiprintf_r+0x236>
  4242f4:	9207      	str	r2, [sp, #28]
  4242f6:	f898 2000 	ldrb.w	r2, [r8]
  4242fa:	e561      	b.n	423dc0 <_vfiprintf_r+0xe4>
  4242fc:	f898 2000 	ldrb.w	r2, [r8]
  424300:	2001      	movs	r0, #1
  424302:	252b      	movs	r5, #43	; 0x2b
  424304:	e55c      	b.n	423dc0 <_vfiprintf_r+0xe4>
  424306:	9907      	ldr	r1, [sp, #28]
  424308:	9608      	str	r6, [sp, #32]
  42430a:	f8d1 b000 	ldr.w	fp, [r1]
  42430e:	f04f 0200 	mov.w	r2, #0
  424312:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  424316:	1d0e      	adds	r6, r1, #4
  424318:	f1bb 0f00 	cmp.w	fp, #0
  42431c:	f000 82e5 	beq.w	4248ea <_vfiprintf_r+0xc0e>
  424320:	1c67      	adds	r7, r4, #1
  424322:	f000 82c4 	beq.w	4248ae <_vfiprintf_r+0xbd2>
  424326:	4622      	mov	r2, r4
  424328:	2100      	movs	r1, #0
  42432a:	4658      	mov	r0, fp
  42432c:	9301      	str	r3, [sp, #4]
  42432e:	f001 f91f 	bl	425570 <memchr>
  424332:	9b01      	ldr	r3, [sp, #4]
  424334:	2800      	cmp	r0, #0
  424336:	f000 82e5 	beq.w	424904 <_vfiprintf_r+0xc28>
  42433a:	eba0 020b 	sub.w	r2, r0, fp
  42433e:	9205      	str	r2, [sp, #20]
  424340:	9607      	str	r6, [sp, #28]
  424342:	9302      	str	r3, [sp, #8]
  424344:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  424348:	2400      	movs	r4, #0
  42434a:	e619      	b.n	423f80 <_vfiprintf_r+0x2a4>
  42434c:	f898 2000 	ldrb.w	r2, [r8]
  424350:	2a2a      	cmp	r2, #42	; 0x2a
  424352:	f108 0701 	add.w	r7, r8, #1
  424356:	f000 82e9 	beq.w	42492c <_vfiprintf_r+0xc50>
  42435a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42435e:	2909      	cmp	r1, #9
  424360:	46b8      	mov	r8, r7
  424362:	f04f 0400 	mov.w	r4, #0
  424366:	f63f ad2d 	bhi.w	423dc4 <_vfiprintf_r+0xe8>
  42436a:	f818 2b01 	ldrb.w	r2, [r8], #1
  42436e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  424372:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  424376:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42437a:	2909      	cmp	r1, #9
  42437c:	d9f5      	bls.n	42436a <_vfiprintf_r+0x68e>
  42437e:	e521      	b.n	423dc4 <_vfiprintf_r+0xe8>
  424380:	f043 0320 	orr.w	r3, r3, #32
  424384:	f898 2000 	ldrb.w	r2, [r8]
  424388:	e51a      	b.n	423dc0 <_vfiprintf_r+0xe4>
  42438a:	9608      	str	r6, [sp, #32]
  42438c:	2800      	cmp	r0, #0
  42438e:	f040 82db 	bne.w	424948 <_vfiprintf_r+0xc6c>
  424392:	2a00      	cmp	r2, #0
  424394:	f000 80e7 	beq.w	424566 <_vfiprintf_r+0x88a>
  424398:	2101      	movs	r1, #1
  42439a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  42439e:	f04f 0200 	mov.w	r2, #0
  4243a2:	9101      	str	r1, [sp, #4]
  4243a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4243a8:	9105      	str	r1, [sp, #20]
  4243aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4243ae:	e77b      	b.n	4242a8 <_vfiprintf_r+0x5cc>
  4243b0:	9a07      	ldr	r2, [sp, #28]
  4243b2:	6813      	ldr	r3, [r2, #0]
  4243b4:	3204      	adds	r2, #4
  4243b6:	9207      	str	r2, [sp, #28]
  4243b8:	9a03      	ldr	r2, [sp, #12]
  4243ba:	601a      	str	r2, [r3, #0]
  4243bc:	e4cb      	b.n	423d56 <_vfiprintf_r+0x7a>
  4243be:	aa0f      	add	r2, sp, #60	; 0x3c
  4243c0:	9904      	ldr	r1, [sp, #16]
  4243c2:	4620      	mov	r0, r4
  4243c4:	f7ff fc4a 	bl	423c5c <__sprint_r.part.0>
  4243c8:	2800      	cmp	r0, #0
  4243ca:	f040 8139 	bne.w	424640 <_vfiprintf_r+0x964>
  4243ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4243d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4243d2:	f101 0c01 	add.w	ip, r1, #1
  4243d6:	46ce      	mov	lr, r9
  4243d8:	e5ff      	b.n	423fda <_vfiprintf_r+0x2fe>
  4243da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4243dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4243de:	1c48      	adds	r0, r1, #1
  4243e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4243e4:	2d00      	cmp	r5, #0
  4243e6:	f43f ae22 	beq.w	42402e <_vfiprintf_r+0x352>
  4243ea:	3201      	adds	r2, #1
  4243ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4243f0:	2101      	movs	r1, #1
  4243f2:	2807      	cmp	r0, #7
  4243f4:	9211      	str	r2, [sp, #68]	; 0x44
  4243f6:	9010      	str	r0, [sp, #64]	; 0x40
  4243f8:	f8ca 5000 	str.w	r5, [sl]
  4243fc:	f8ca 1004 	str.w	r1, [sl, #4]
  424400:	f340 8108 	ble.w	424614 <_vfiprintf_r+0x938>
  424404:	2a00      	cmp	r2, #0
  424406:	f040 81bc 	bne.w	424782 <_vfiprintf_r+0xaa6>
  42440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42440c:	2b00      	cmp	r3, #0
  42440e:	f43f ae1f 	beq.w	424050 <_vfiprintf_r+0x374>
  424412:	ab0e      	add	r3, sp, #56	; 0x38
  424414:	2202      	movs	r2, #2
  424416:	4608      	mov	r0, r1
  424418:	931c      	str	r3, [sp, #112]	; 0x70
  42441a:	921d      	str	r2, [sp, #116]	; 0x74
  42441c:	46ca      	mov	sl, r9
  42441e:	4601      	mov	r1, r0
  424420:	f10a 0a08 	add.w	sl, sl, #8
  424424:	3001      	adds	r0, #1
  424426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  424428:	2b80      	cmp	r3, #128	; 0x80
  42442a:	f43f ae19 	beq.w	424060 <_vfiprintf_r+0x384>
  42442e:	9b05      	ldr	r3, [sp, #20]
  424430:	1ae4      	subs	r4, r4, r3
  424432:	2c00      	cmp	r4, #0
  424434:	dd2e      	ble.n	424494 <_vfiprintf_r+0x7b8>
  424436:	2c10      	cmp	r4, #16
  424438:	4db3      	ldr	r5, [pc, #716]	; (424708 <_vfiprintf_r+0xa2c>)
  42443a:	dd1e      	ble.n	42447a <_vfiprintf_r+0x79e>
  42443c:	46d6      	mov	lr, sl
  42443e:	2610      	movs	r6, #16
  424440:	9f06      	ldr	r7, [sp, #24]
  424442:	f8dd a010 	ldr.w	sl, [sp, #16]
  424446:	e006      	b.n	424456 <_vfiprintf_r+0x77a>
  424448:	1c88      	adds	r0, r1, #2
  42444a:	f10e 0e08 	add.w	lr, lr, #8
  42444e:	4619      	mov	r1, r3
  424450:	3c10      	subs	r4, #16
  424452:	2c10      	cmp	r4, #16
  424454:	dd10      	ble.n	424478 <_vfiprintf_r+0x79c>
  424456:	1c4b      	adds	r3, r1, #1
  424458:	3210      	adds	r2, #16
  42445a:	2b07      	cmp	r3, #7
  42445c:	9211      	str	r2, [sp, #68]	; 0x44
  42445e:	e88e 0060 	stmia.w	lr, {r5, r6}
  424462:	9310      	str	r3, [sp, #64]	; 0x40
  424464:	ddf0      	ble.n	424448 <_vfiprintf_r+0x76c>
  424466:	2a00      	cmp	r2, #0
  424468:	d165      	bne.n	424536 <_vfiprintf_r+0x85a>
  42446a:	3c10      	subs	r4, #16
  42446c:	2c10      	cmp	r4, #16
  42446e:	f04f 0001 	mov.w	r0, #1
  424472:	4611      	mov	r1, r2
  424474:	46ce      	mov	lr, r9
  424476:	dcee      	bgt.n	424456 <_vfiprintf_r+0x77a>
  424478:	46f2      	mov	sl, lr
  42447a:	4422      	add	r2, r4
  42447c:	2807      	cmp	r0, #7
  42447e:	9211      	str	r2, [sp, #68]	; 0x44
  424480:	f8ca 5000 	str.w	r5, [sl]
  424484:	f8ca 4004 	str.w	r4, [sl, #4]
  424488:	9010      	str	r0, [sp, #64]	; 0x40
  42448a:	f300 8085 	bgt.w	424598 <_vfiprintf_r+0x8bc>
  42448e:	f10a 0a08 	add.w	sl, sl, #8
  424492:	3001      	adds	r0, #1
  424494:	9905      	ldr	r1, [sp, #20]
  424496:	f8ca b000 	str.w	fp, [sl]
  42449a:	440a      	add	r2, r1
  42449c:	2807      	cmp	r0, #7
  42449e:	9211      	str	r2, [sp, #68]	; 0x44
  4244a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4244a4:	9010      	str	r0, [sp, #64]	; 0x40
  4244a6:	f340 8082 	ble.w	4245ae <_vfiprintf_r+0x8d2>
  4244aa:	2a00      	cmp	r2, #0
  4244ac:	f040 8118 	bne.w	4246e0 <_vfiprintf_r+0xa04>
  4244b0:	9b02      	ldr	r3, [sp, #8]
  4244b2:	9210      	str	r2, [sp, #64]	; 0x40
  4244b4:	0758      	lsls	r0, r3, #29
  4244b6:	d535      	bpl.n	424524 <_vfiprintf_r+0x848>
  4244b8:	9b08      	ldr	r3, [sp, #32]
  4244ba:	9901      	ldr	r1, [sp, #4]
  4244bc:	1a5c      	subs	r4, r3, r1
  4244be:	2c00      	cmp	r4, #0
  4244c0:	f340 80e7 	ble.w	424692 <_vfiprintf_r+0x9b6>
  4244c4:	46ca      	mov	sl, r9
  4244c6:	2c10      	cmp	r4, #16
  4244c8:	f340 8218 	ble.w	4248fc <_vfiprintf_r+0xc20>
  4244cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4244ce:	4e8f      	ldr	r6, [pc, #572]	; (42470c <_vfiprintf_r+0xa30>)
  4244d0:	9f06      	ldr	r7, [sp, #24]
  4244d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4244d6:	2510      	movs	r5, #16
  4244d8:	e006      	b.n	4244e8 <_vfiprintf_r+0x80c>
  4244da:	1c88      	adds	r0, r1, #2
  4244dc:	f10a 0a08 	add.w	sl, sl, #8
  4244e0:	4619      	mov	r1, r3
  4244e2:	3c10      	subs	r4, #16
  4244e4:	2c10      	cmp	r4, #16
  4244e6:	dd11      	ble.n	42450c <_vfiprintf_r+0x830>
  4244e8:	1c4b      	adds	r3, r1, #1
  4244ea:	3210      	adds	r2, #16
  4244ec:	2b07      	cmp	r3, #7
  4244ee:	9211      	str	r2, [sp, #68]	; 0x44
  4244f0:	f8ca 6000 	str.w	r6, [sl]
  4244f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4244f8:	9310      	str	r3, [sp, #64]	; 0x40
  4244fa:	ddee      	ble.n	4244da <_vfiprintf_r+0x7fe>
  4244fc:	bb42      	cbnz	r2, 424550 <_vfiprintf_r+0x874>
  4244fe:	3c10      	subs	r4, #16
  424500:	2c10      	cmp	r4, #16
  424502:	f04f 0001 	mov.w	r0, #1
  424506:	4611      	mov	r1, r2
  424508:	46ca      	mov	sl, r9
  42450a:	dced      	bgt.n	4244e8 <_vfiprintf_r+0x80c>
  42450c:	4422      	add	r2, r4
  42450e:	2807      	cmp	r0, #7
  424510:	9211      	str	r2, [sp, #68]	; 0x44
  424512:	f8ca 6000 	str.w	r6, [sl]
  424516:	f8ca 4004 	str.w	r4, [sl, #4]
  42451a:	9010      	str	r0, [sp, #64]	; 0x40
  42451c:	dd51      	ble.n	4245c2 <_vfiprintf_r+0x8e6>
  42451e:	2a00      	cmp	r2, #0
  424520:	f040 819b 	bne.w	42485a <_vfiprintf_r+0xb7e>
  424524:	9b03      	ldr	r3, [sp, #12]
  424526:	9a08      	ldr	r2, [sp, #32]
  424528:	9901      	ldr	r1, [sp, #4]
  42452a:	428a      	cmp	r2, r1
  42452c:	bfac      	ite	ge
  42452e:	189b      	addge	r3, r3, r2
  424530:	185b      	addlt	r3, r3, r1
  424532:	9303      	str	r3, [sp, #12]
  424534:	e04e      	b.n	4245d4 <_vfiprintf_r+0x8f8>
  424536:	aa0f      	add	r2, sp, #60	; 0x3c
  424538:	4651      	mov	r1, sl
  42453a:	4638      	mov	r0, r7
  42453c:	f7ff fb8e 	bl	423c5c <__sprint_r.part.0>
  424540:	2800      	cmp	r0, #0
  424542:	f040 813f 	bne.w	4247c4 <_vfiprintf_r+0xae8>
  424546:	9910      	ldr	r1, [sp, #64]	; 0x40
  424548:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42454a:	1c48      	adds	r0, r1, #1
  42454c:	46ce      	mov	lr, r9
  42454e:	e77f      	b.n	424450 <_vfiprintf_r+0x774>
  424550:	aa0f      	add	r2, sp, #60	; 0x3c
  424552:	4659      	mov	r1, fp
  424554:	4638      	mov	r0, r7
  424556:	f7ff fb81 	bl	423c5c <__sprint_r.part.0>
  42455a:	b960      	cbnz	r0, 424576 <_vfiprintf_r+0x89a>
  42455c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42455e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  424560:	1c48      	adds	r0, r1, #1
  424562:	46ca      	mov	sl, r9
  424564:	e7bd      	b.n	4244e2 <_vfiprintf_r+0x806>
  424566:	9b11      	ldr	r3, [sp, #68]	; 0x44
  424568:	f8dd b010 	ldr.w	fp, [sp, #16]
  42456c:	2b00      	cmp	r3, #0
  42456e:	f040 81d4 	bne.w	42491a <_vfiprintf_r+0xc3e>
  424572:	2300      	movs	r3, #0
  424574:	9310      	str	r3, [sp, #64]	; 0x40
  424576:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42457a:	f013 0f01 	tst.w	r3, #1
  42457e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  424582:	d102      	bne.n	42458a <_vfiprintf_r+0x8ae>
  424584:	059a      	lsls	r2, r3, #22
  424586:	f140 80de 	bpl.w	424746 <_vfiprintf_r+0xa6a>
  42458a:	065b      	lsls	r3, r3, #25
  42458c:	f53f acb2 	bmi.w	423ef4 <_vfiprintf_r+0x218>
  424590:	9803      	ldr	r0, [sp, #12]
  424592:	b02d      	add	sp, #180	; 0xb4
  424594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424598:	2a00      	cmp	r2, #0
  42459a:	f040 8106 	bne.w	4247aa <_vfiprintf_r+0xace>
  42459e:	9a05      	ldr	r2, [sp, #20]
  4245a0:	921d      	str	r2, [sp, #116]	; 0x74
  4245a2:	2301      	movs	r3, #1
  4245a4:	9211      	str	r2, [sp, #68]	; 0x44
  4245a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4245aa:	9310      	str	r3, [sp, #64]	; 0x40
  4245ac:	46ca      	mov	sl, r9
  4245ae:	f10a 0a08 	add.w	sl, sl, #8
  4245b2:	9b02      	ldr	r3, [sp, #8]
  4245b4:	0759      	lsls	r1, r3, #29
  4245b6:	d504      	bpl.n	4245c2 <_vfiprintf_r+0x8e6>
  4245b8:	9b08      	ldr	r3, [sp, #32]
  4245ba:	9901      	ldr	r1, [sp, #4]
  4245bc:	1a5c      	subs	r4, r3, r1
  4245be:	2c00      	cmp	r4, #0
  4245c0:	dc81      	bgt.n	4244c6 <_vfiprintf_r+0x7ea>
  4245c2:	9b03      	ldr	r3, [sp, #12]
  4245c4:	9908      	ldr	r1, [sp, #32]
  4245c6:	9801      	ldr	r0, [sp, #4]
  4245c8:	4281      	cmp	r1, r0
  4245ca:	bfac      	ite	ge
  4245cc:	185b      	addge	r3, r3, r1
  4245ce:	181b      	addlt	r3, r3, r0
  4245d0:	9303      	str	r3, [sp, #12]
  4245d2:	bb72      	cbnz	r2, 424632 <_vfiprintf_r+0x956>
  4245d4:	2300      	movs	r3, #0
  4245d6:	9310      	str	r3, [sp, #64]	; 0x40
  4245d8:	46ca      	mov	sl, r9
  4245da:	f7ff bbbc 	b.w	423d56 <_vfiprintf_r+0x7a>
  4245de:	aa0f      	add	r2, sp, #60	; 0x3c
  4245e0:	9904      	ldr	r1, [sp, #16]
  4245e2:	4620      	mov	r0, r4
  4245e4:	f7ff fb3a 	bl	423c5c <__sprint_r.part.0>
  4245e8:	bb50      	cbnz	r0, 424640 <_vfiprintf_r+0x964>
  4245ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4245ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4245ee:	f101 0e01 	add.w	lr, r1, #1
  4245f2:	46cc      	mov	ip, r9
  4245f4:	e548      	b.n	424088 <_vfiprintf_r+0x3ac>
  4245f6:	2a00      	cmp	r2, #0
  4245f8:	f040 8140 	bne.w	42487c <_vfiprintf_r+0xba0>
  4245fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  424600:	2900      	cmp	r1, #0
  424602:	f000 811b 	beq.w	42483c <_vfiprintf_r+0xb60>
  424606:	2201      	movs	r2, #1
  424608:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  42460c:	4610      	mov	r0, r2
  42460e:	921d      	str	r2, [sp, #116]	; 0x74
  424610:	911c      	str	r1, [sp, #112]	; 0x70
  424612:	46ca      	mov	sl, r9
  424614:	4601      	mov	r1, r0
  424616:	f10a 0a08 	add.w	sl, sl, #8
  42461a:	3001      	adds	r0, #1
  42461c:	e507      	b.n	42402e <_vfiprintf_r+0x352>
  42461e:	9b02      	ldr	r3, [sp, #8]
  424620:	2a01      	cmp	r2, #1
  424622:	f000 8098 	beq.w	424756 <_vfiprintf_r+0xa7a>
  424626:	2a02      	cmp	r2, #2
  424628:	d10d      	bne.n	424646 <_vfiprintf_r+0x96a>
  42462a:	9302      	str	r3, [sp, #8]
  42462c:	2600      	movs	r6, #0
  42462e:	2700      	movs	r7, #0
  424630:	e5b0      	b.n	424194 <_vfiprintf_r+0x4b8>
  424632:	aa0f      	add	r2, sp, #60	; 0x3c
  424634:	9904      	ldr	r1, [sp, #16]
  424636:	9806      	ldr	r0, [sp, #24]
  424638:	f7ff fb10 	bl	423c5c <__sprint_r.part.0>
  42463c:	2800      	cmp	r0, #0
  42463e:	d0c9      	beq.n	4245d4 <_vfiprintf_r+0x8f8>
  424640:	f8dd b010 	ldr.w	fp, [sp, #16]
  424644:	e797      	b.n	424576 <_vfiprintf_r+0x89a>
  424646:	9302      	str	r3, [sp, #8]
  424648:	2600      	movs	r6, #0
  42464a:	2700      	movs	r7, #0
  42464c:	4649      	mov	r1, r9
  42464e:	e000      	b.n	424652 <_vfiprintf_r+0x976>
  424650:	4659      	mov	r1, fp
  424652:	08f2      	lsrs	r2, r6, #3
  424654:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  424658:	08f8      	lsrs	r0, r7, #3
  42465a:	f006 0307 	and.w	r3, r6, #7
  42465e:	4607      	mov	r7, r0
  424660:	4616      	mov	r6, r2
  424662:	3330      	adds	r3, #48	; 0x30
  424664:	ea56 0207 	orrs.w	r2, r6, r7
  424668:	f801 3c01 	strb.w	r3, [r1, #-1]
  42466c:	f101 3bff 	add.w	fp, r1, #4294967295
  424670:	d1ee      	bne.n	424650 <_vfiprintf_r+0x974>
  424672:	9a02      	ldr	r2, [sp, #8]
  424674:	07d6      	lsls	r6, r2, #31
  424676:	f57f ad9d 	bpl.w	4241b4 <_vfiprintf_r+0x4d8>
  42467a:	2b30      	cmp	r3, #48	; 0x30
  42467c:	f43f ad9a 	beq.w	4241b4 <_vfiprintf_r+0x4d8>
  424680:	3902      	subs	r1, #2
  424682:	2330      	movs	r3, #48	; 0x30
  424684:	f80b 3c01 	strb.w	r3, [fp, #-1]
  424688:	eba9 0301 	sub.w	r3, r9, r1
  42468c:	9305      	str	r3, [sp, #20]
  42468e:	468b      	mov	fp, r1
  424690:	e476      	b.n	423f80 <_vfiprintf_r+0x2a4>
  424692:	9b03      	ldr	r3, [sp, #12]
  424694:	9a08      	ldr	r2, [sp, #32]
  424696:	428a      	cmp	r2, r1
  424698:	bfac      	ite	ge
  42469a:	189b      	addge	r3, r3, r2
  42469c:	185b      	addlt	r3, r3, r1
  42469e:	9303      	str	r3, [sp, #12]
  4246a0:	e798      	b.n	4245d4 <_vfiprintf_r+0x8f8>
  4246a2:	2202      	movs	r2, #2
  4246a4:	e44d      	b.n	423f42 <_vfiprintf_r+0x266>
  4246a6:	2f00      	cmp	r7, #0
  4246a8:	bf08      	it	eq
  4246aa:	2e0a      	cmpeq	r6, #10
  4246ac:	d352      	bcc.n	424754 <_vfiprintf_r+0xa78>
  4246ae:	46cb      	mov	fp, r9
  4246b0:	4630      	mov	r0, r6
  4246b2:	4639      	mov	r1, r7
  4246b4:	220a      	movs	r2, #10
  4246b6:	2300      	movs	r3, #0
  4246b8:	f7fe f9dc 	bl	422a74 <__aeabi_uldivmod>
  4246bc:	3230      	adds	r2, #48	; 0x30
  4246be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4246c2:	4630      	mov	r0, r6
  4246c4:	4639      	mov	r1, r7
  4246c6:	2300      	movs	r3, #0
  4246c8:	220a      	movs	r2, #10
  4246ca:	f7fe f9d3 	bl	422a74 <__aeabi_uldivmod>
  4246ce:	4606      	mov	r6, r0
  4246d0:	460f      	mov	r7, r1
  4246d2:	ea56 0307 	orrs.w	r3, r6, r7
  4246d6:	d1eb      	bne.n	4246b0 <_vfiprintf_r+0x9d4>
  4246d8:	e56c      	b.n	4241b4 <_vfiprintf_r+0x4d8>
  4246da:	9405      	str	r4, [sp, #20]
  4246dc:	46cb      	mov	fp, r9
  4246de:	e44f      	b.n	423f80 <_vfiprintf_r+0x2a4>
  4246e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4246e2:	9904      	ldr	r1, [sp, #16]
  4246e4:	9806      	ldr	r0, [sp, #24]
  4246e6:	f7ff fab9 	bl	423c5c <__sprint_r.part.0>
  4246ea:	2800      	cmp	r0, #0
  4246ec:	d1a8      	bne.n	424640 <_vfiprintf_r+0x964>
  4246ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4246f0:	46ca      	mov	sl, r9
  4246f2:	e75e      	b.n	4245b2 <_vfiprintf_r+0x8d6>
  4246f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4246f6:	9904      	ldr	r1, [sp, #16]
  4246f8:	9806      	ldr	r0, [sp, #24]
  4246fa:	f7ff faaf 	bl	423c5c <__sprint_r.part.0>
  4246fe:	2800      	cmp	r0, #0
  424700:	d19e      	bne.n	424640 <_vfiprintf_r+0x964>
  424702:	46ca      	mov	sl, r9
  424704:	f7ff bbc0 	b.w	423e88 <_vfiprintf_r+0x1ac>
  424708:	0042e424 	.word	0x0042e424
  42470c:	0042e414 	.word	0x0042e414
  424710:	3104      	adds	r1, #4
  424712:	6816      	ldr	r6, [r2, #0]
  424714:	9107      	str	r1, [sp, #28]
  424716:	2201      	movs	r2, #1
  424718:	2700      	movs	r7, #0
  42471a:	e412      	b.n	423f42 <_vfiprintf_r+0x266>
  42471c:	9807      	ldr	r0, [sp, #28]
  42471e:	4601      	mov	r1, r0
  424720:	3104      	adds	r1, #4
  424722:	6806      	ldr	r6, [r0, #0]
  424724:	9107      	str	r1, [sp, #28]
  424726:	2700      	movs	r7, #0
  424728:	e40b      	b.n	423f42 <_vfiprintf_r+0x266>
  42472a:	680e      	ldr	r6, [r1, #0]
  42472c:	3104      	adds	r1, #4
  42472e:	9107      	str	r1, [sp, #28]
  424730:	2700      	movs	r7, #0
  424732:	e591      	b.n	424258 <_vfiprintf_r+0x57c>
  424734:	9907      	ldr	r1, [sp, #28]
  424736:	680e      	ldr	r6, [r1, #0]
  424738:	460a      	mov	r2, r1
  42473a:	17f7      	asrs	r7, r6, #31
  42473c:	3204      	adds	r2, #4
  42473e:	9207      	str	r2, [sp, #28]
  424740:	4630      	mov	r0, r6
  424742:	4639      	mov	r1, r7
  424744:	e50f      	b.n	424166 <_vfiprintf_r+0x48a>
  424746:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42474a:	f000 fe7f 	bl	42544c <__retarget_lock_release_recursive>
  42474e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  424752:	e71a      	b.n	42458a <_vfiprintf_r+0x8ae>
  424754:	9b02      	ldr	r3, [sp, #8]
  424756:	9302      	str	r3, [sp, #8]
  424758:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  42475c:	3630      	adds	r6, #48	; 0x30
  42475e:	2301      	movs	r3, #1
  424760:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  424764:	9305      	str	r3, [sp, #20]
  424766:	e40b      	b.n	423f80 <_vfiprintf_r+0x2a4>
  424768:	aa0f      	add	r2, sp, #60	; 0x3c
  42476a:	9904      	ldr	r1, [sp, #16]
  42476c:	9806      	ldr	r0, [sp, #24]
  42476e:	f7ff fa75 	bl	423c5c <__sprint_r.part.0>
  424772:	2800      	cmp	r0, #0
  424774:	f47f af64 	bne.w	424640 <_vfiprintf_r+0x964>
  424778:	9910      	ldr	r1, [sp, #64]	; 0x40
  42477a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42477c:	1c48      	adds	r0, r1, #1
  42477e:	46ca      	mov	sl, r9
  424780:	e651      	b.n	424426 <_vfiprintf_r+0x74a>
  424782:	aa0f      	add	r2, sp, #60	; 0x3c
  424784:	9904      	ldr	r1, [sp, #16]
  424786:	9806      	ldr	r0, [sp, #24]
  424788:	f7ff fa68 	bl	423c5c <__sprint_r.part.0>
  42478c:	2800      	cmp	r0, #0
  42478e:	f47f af57 	bne.w	424640 <_vfiprintf_r+0x964>
  424792:	9910      	ldr	r1, [sp, #64]	; 0x40
  424794:	9a11      	ldr	r2, [sp, #68]	; 0x44
  424796:	1c48      	adds	r0, r1, #1
  424798:	46ca      	mov	sl, r9
  42479a:	e448      	b.n	42402e <_vfiprintf_r+0x352>
  42479c:	2a00      	cmp	r2, #0
  42479e:	f040 8091 	bne.w	4248c4 <_vfiprintf_r+0xbe8>
  4247a2:	2001      	movs	r0, #1
  4247a4:	4611      	mov	r1, r2
  4247a6:	46ca      	mov	sl, r9
  4247a8:	e641      	b.n	42442e <_vfiprintf_r+0x752>
  4247aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4247ac:	9904      	ldr	r1, [sp, #16]
  4247ae:	9806      	ldr	r0, [sp, #24]
  4247b0:	f7ff fa54 	bl	423c5c <__sprint_r.part.0>
  4247b4:	2800      	cmp	r0, #0
  4247b6:	f47f af43 	bne.w	424640 <_vfiprintf_r+0x964>
  4247ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4247bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4247be:	3001      	adds	r0, #1
  4247c0:	46ca      	mov	sl, r9
  4247c2:	e667      	b.n	424494 <_vfiprintf_r+0x7b8>
  4247c4:	46d3      	mov	fp, sl
  4247c6:	e6d6      	b.n	424576 <_vfiprintf_r+0x89a>
  4247c8:	9e07      	ldr	r6, [sp, #28]
  4247ca:	3607      	adds	r6, #7
  4247cc:	f026 0207 	bic.w	r2, r6, #7
  4247d0:	f102 0108 	add.w	r1, r2, #8
  4247d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4247d8:	9107      	str	r1, [sp, #28]
  4247da:	2201      	movs	r2, #1
  4247dc:	f7ff bbb1 	b.w	423f42 <_vfiprintf_r+0x266>
  4247e0:	9e07      	ldr	r6, [sp, #28]
  4247e2:	3607      	adds	r6, #7
  4247e4:	f026 0607 	bic.w	r6, r6, #7
  4247e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4247ec:	f106 0208 	add.w	r2, r6, #8
  4247f0:	9207      	str	r2, [sp, #28]
  4247f2:	4606      	mov	r6, r0
  4247f4:	460f      	mov	r7, r1
  4247f6:	e4b6      	b.n	424166 <_vfiprintf_r+0x48a>
  4247f8:	9e07      	ldr	r6, [sp, #28]
  4247fa:	3607      	adds	r6, #7
  4247fc:	f026 0207 	bic.w	r2, r6, #7
  424800:	f102 0108 	add.w	r1, r2, #8
  424804:	e9d2 6700 	ldrd	r6, r7, [r2]
  424808:	9107      	str	r1, [sp, #28]
  42480a:	2200      	movs	r2, #0
  42480c:	f7ff bb99 	b.w	423f42 <_vfiprintf_r+0x266>
  424810:	9e07      	ldr	r6, [sp, #28]
  424812:	3607      	adds	r6, #7
  424814:	f026 0107 	bic.w	r1, r6, #7
  424818:	f101 0008 	add.w	r0, r1, #8
  42481c:	9007      	str	r0, [sp, #28]
  42481e:	e9d1 6700 	ldrd	r6, r7, [r1]
  424822:	e519      	b.n	424258 <_vfiprintf_r+0x57c>
  424824:	46cb      	mov	fp, r9
  424826:	f7ff bbab 	b.w	423f80 <_vfiprintf_r+0x2a4>
  42482a:	252d      	movs	r5, #45	; 0x2d
  42482c:	4276      	negs	r6, r6
  42482e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  424832:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424836:	2201      	movs	r2, #1
  424838:	f7ff bb88 	b.w	423f4c <_vfiprintf_r+0x270>
  42483c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42483e:	b9b3      	cbnz	r3, 42486e <_vfiprintf_r+0xb92>
  424840:	4611      	mov	r1, r2
  424842:	2001      	movs	r0, #1
  424844:	46ca      	mov	sl, r9
  424846:	e5f2      	b.n	42442e <_vfiprintf_r+0x752>
  424848:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42484c:	f000 fdfe 	bl	42544c <__retarget_lock_release_recursive>
  424850:	f04f 33ff 	mov.w	r3, #4294967295
  424854:	9303      	str	r3, [sp, #12]
  424856:	f7ff bb50 	b.w	423efa <_vfiprintf_r+0x21e>
  42485a:	aa0f      	add	r2, sp, #60	; 0x3c
  42485c:	9904      	ldr	r1, [sp, #16]
  42485e:	9806      	ldr	r0, [sp, #24]
  424860:	f7ff f9fc 	bl	423c5c <__sprint_r.part.0>
  424864:	2800      	cmp	r0, #0
  424866:	f47f aeeb 	bne.w	424640 <_vfiprintf_r+0x964>
  42486a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42486c:	e6a9      	b.n	4245c2 <_vfiprintf_r+0x8e6>
  42486e:	ab0e      	add	r3, sp, #56	; 0x38
  424870:	2202      	movs	r2, #2
  424872:	931c      	str	r3, [sp, #112]	; 0x70
  424874:	921d      	str	r2, [sp, #116]	; 0x74
  424876:	2001      	movs	r0, #1
  424878:	46ca      	mov	sl, r9
  42487a:	e5d0      	b.n	42441e <_vfiprintf_r+0x742>
  42487c:	aa0f      	add	r2, sp, #60	; 0x3c
  42487e:	9904      	ldr	r1, [sp, #16]
  424880:	9806      	ldr	r0, [sp, #24]
  424882:	f7ff f9eb 	bl	423c5c <__sprint_r.part.0>
  424886:	2800      	cmp	r0, #0
  424888:	f47f aeda 	bne.w	424640 <_vfiprintf_r+0x964>
  42488c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42488e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  424890:	1c48      	adds	r0, r1, #1
  424892:	46ca      	mov	sl, r9
  424894:	e5a4      	b.n	4243e0 <_vfiprintf_r+0x704>
  424896:	9a07      	ldr	r2, [sp, #28]
  424898:	9903      	ldr	r1, [sp, #12]
  42489a:	6813      	ldr	r3, [r2, #0]
  42489c:	17cd      	asrs	r5, r1, #31
  42489e:	4608      	mov	r0, r1
  4248a0:	3204      	adds	r2, #4
  4248a2:	4629      	mov	r1, r5
  4248a4:	9207      	str	r2, [sp, #28]
  4248a6:	e9c3 0100 	strd	r0, r1, [r3]
  4248aa:	f7ff ba54 	b.w	423d56 <_vfiprintf_r+0x7a>
  4248ae:	4658      	mov	r0, fp
  4248b0:	9607      	str	r6, [sp, #28]
  4248b2:	9302      	str	r3, [sp, #8]
  4248b4:	f7ff f964 	bl	423b80 <strlen>
  4248b8:	2400      	movs	r4, #0
  4248ba:	9005      	str	r0, [sp, #20]
  4248bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4248c0:	f7ff bb5e 	b.w	423f80 <_vfiprintf_r+0x2a4>
  4248c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4248c6:	9904      	ldr	r1, [sp, #16]
  4248c8:	9806      	ldr	r0, [sp, #24]
  4248ca:	f7ff f9c7 	bl	423c5c <__sprint_r.part.0>
  4248ce:	2800      	cmp	r0, #0
  4248d0:	f47f aeb6 	bne.w	424640 <_vfiprintf_r+0x964>
  4248d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4248d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4248d8:	1c48      	adds	r0, r1, #1
  4248da:	46ca      	mov	sl, r9
  4248dc:	e5a7      	b.n	42442e <_vfiprintf_r+0x752>
  4248de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4248e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4248e2:	4e20      	ldr	r6, [pc, #128]	; (424964 <_vfiprintf_r+0xc88>)
  4248e4:	3101      	adds	r1, #1
  4248e6:	f7ff bb90 	b.w	42400a <_vfiprintf_r+0x32e>
  4248ea:	2c06      	cmp	r4, #6
  4248ec:	bf28      	it	cs
  4248ee:	2406      	movcs	r4, #6
  4248f0:	9405      	str	r4, [sp, #20]
  4248f2:	9607      	str	r6, [sp, #28]
  4248f4:	9401      	str	r4, [sp, #4]
  4248f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 424968 <_vfiprintf_r+0xc8c>
  4248fa:	e4d5      	b.n	4242a8 <_vfiprintf_r+0x5cc>
  4248fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4248fe:	4e19      	ldr	r6, [pc, #100]	; (424964 <_vfiprintf_r+0xc88>)
  424900:	3001      	adds	r0, #1
  424902:	e603      	b.n	42450c <_vfiprintf_r+0x830>
  424904:	9405      	str	r4, [sp, #20]
  424906:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42490a:	9607      	str	r6, [sp, #28]
  42490c:	9302      	str	r3, [sp, #8]
  42490e:	4604      	mov	r4, r0
  424910:	f7ff bb36 	b.w	423f80 <_vfiprintf_r+0x2a4>
  424914:	4686      	mov	lr, r0
  424916:	f7ff bbce 	b.w	4240b6 <_vfiprintf_r+0x3da>
  42491a:	9806      	ldr	r0, [sp, #24]
  42491c:	aa0f      	add	r2, sp, #60	; 0x3c
  42491e:	4659      	mov	r1, fp
  424920:	f7ff f99c 	bl	423c5c <__sprint_r.part.0>
  424924:	2800      	cmp	r0, #0
  424926:	f43f ae24 	beq.w	424572 <_vfiprintf_r+0x896>
  42492a:	e624      	b.n	424576 <_vfiprintf_r+0x89a>
  42492c:	9907      	ldr	r1, [sp, #28]
  42492e:	f898 2001 	ldrb.w	r2, [r8, #1]
  424932:	680c      	ldr	r4, [r1, #0]
  424934:	3104      	adds	r1, #4
  424936:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  42493a:	46b8      	mov	r8, r7
  42493c:	9107      	str	r1, [sp, #28]
  42493e:	f7ff ba3f 	b.w	423dc0 <_vfiprintf_r+0xe4>
  424942:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424946:	e43c      	b.n	4241c2 <_vfiprintf_r+0x4e6>
  424948:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42494c:	e521      	b.n	424392 <_vfiprintf_r+0x6b6>
  42494e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424952:	f7ff bbf4 	b.w	42413e <_vfiprintf_r+0x462>
  424956:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42495a:	e491      	b.n	424280 <_vfiprintf_r+0x5a4>
  42495c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  424960:	e469      	b.n	424236 <_vfiprintf_r+0x55a>
  424962:	bf00      	nop
  424964:	0042e414 	.word	0x0042e414
  424968:	0042e40c 	.word	0x0042e40c

0042496c <__sbprintf>:
  42496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424970:	460c      	mov	r4, r1
  424972:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  424976:	8989      	ldrh	r1, [r1, #12]
  424978:	6e66      	ldr	r6, [r4, #100]	; 0x64
  42497a:	89e5      	ldrh	r5, [r4, #14]
  42497c:	9619      	str	r6, [sp, #100]	; 0x64
  42497e:	f021 0102 	bic.w	r1, r1, #2
  424982:	4606      	mov	r6, r0
  424984:	69e0      	ldr	r0, [r4, #28]
  424986:	f8ad 100c 	strh.w	r1, [sp, #12]
  42498a:	4617      	mov	r7, r2
  42498c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  424990:	6a62      	ldr	r2, [r4, #36]	; 0x24
  424992:	f8ad 500e 	strh.w	r5, [sp, #14]
  424996:	4698      	mov	r8, r3
  424998:	ad1a      	add	r5, sp, #104	; 0x68
  42499a:	2300      	movs	r3, #0
  42499c:	9007      	str	r0, [sp, #28]
  42499e:	a816      	add	r0, sp, #88	; 0x58
  4249a0:	9209      	str	r2, [sp, #36]	; 0x24
  4249a2:	9306      	str	r3, [sp, #24]
  4249a4:	9500      	str	r5, [sp, #0]
  4249a6:	9504      	str	r5, [sp, #16]
  4249a8:	9102      	str	r1, [sp, #8]
  4249aa:	9105      	str	r1, [sp, #20]
  4249ac:	f000 fd48 	bl	425440 <__retarget_lock_init_recursive>
  4249b0:	4643      	mov	r3, r8
  4249b2:	463a      	mov	r2, r7
  4249b4:	4669      	mov	r1, sp
  4249b6:	4630      	mov	r0, r6
  4249b8:	f7ff f990 	bl	423cdc <_vfiprintf_r>
  4249bc:	1e05      	subs	r5, r0, #0
  4249be:	db07      	blt.n	4249d0 <__sbprintf+0x64>
  4249c0:	4630      	mov	r0, r6
  4249c2:	4669      	mov	r1, sp
  4249c4:	f000 f928 	bl	424c18 <_fflush_r>
  4249c8:	2800      	cmp	r0, #0
  4249ca:	bf18      	it	ne
  4249cc:	f04f 35ff 	movne.w	r5, #4294967295
  4249d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4249d4:	065b      	lsls	r3, r3, #25
  4249d6:	d503      	bpl.n	4249e0 <__sbprintf+0x74>
  4249d8:	89a3      	ldrh	r3, [r4, #12]
  4249da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4249de:	81a3      	strh	r3, [r4, #12]
  4249e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4249e2:	f000 fd2f 	bl	425444 <__retarget_lock_close_recursive>
  4249e6:	4628      	mov	r0, r5
  4249e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4249ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004249f0 <__swsetup_r>:
  4249f0:	b538      	push	{r3, r4, r5, lr}
  4249f2:	4b30      	ldr	r3, [pc, #192]	; (424ab4 <__swsetup_r+0xc4>)
  4249f4:	681b      	ldr	r3, [r3, #0]
  4249f6:	4605      	mov	r5, r0
  4249f8:	460c      	mov	r4, r1
  4249fa:	b113      	cbz	r3, 424a02 <__swsetup_r+0x12>
  4249fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4249fe:	2a00      	cmp	r2, #0
  424a00:	d038      	beq.n	424a74 <__swsetup_r+0x84>
  424a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424a06:	b293      	uxth	r3, r2
  424a08:	0718      	lsls	r0, r3, #28
  424a0a:	d50c      	bpl.n	424a26 <__swsetup_r+0x36>
  424a0c:	6920      	ldr	r0, [r4, #16]
  424a0e:	b1a8      	cbz	r0, 424a3c <__swsetup_r+0x4c>
  424a10:	f013 0201 	ands.w	r2, r3, #1
  424a14:	d01e      	beq.n	424a54 <__swsetup_r+0x64>
  424a16:	6963      	ldr	r3, [r4, #20]
  424a18:	2200      	movs	r2, #0
  424a1a:	425b      	negs	r3, r3
  424a1c:	61a3      	str	r3, [r4, #24]
  424a1e:	60a2      	str	r2, [r4, #8]
  424a20:	b1f0      	cbz	r0, 424a60 <__swsetup_r+0x70>
  424a22:	2000      	movs	r0, #0
  424a24:	bd38      	pop	{r3, r4, r5, pc}
  424a26:	06d9      	lsls	r1, r3, #27
  424a28:	d53c      	bpl.n	424aa4 <__swsetup_r+0xb4>
  424a2a:	0758      	lsls	r0, r3, #29
  424a2c:	d426      	bmi.n	424a7c <__swsetup_r+0x8c>
  424a2e:	6920      	ldr	r0, [r4, #16]
  424a30:	f042 0308 	orr.w	r3, r2, #8
  424a34:	81a3      	strh	r3, [r4, #12]
  424a36:	b29b      	uxth	r3, r3
  424a38:	2800      	cmp	r0, #0
  424a3a:	d1e9      	bne.n	424a10 <__swsetup_r+0x20>
  424a3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  424a40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  424a44:	d0e4      	beq.n	424a10 <__swsetup_r+0x20>
  424a46:	4628      	mov	r0, r5
  424a48:	4621      	mov	r1, r4
  424a4a:	f000 fd2f 	bl	4254ac <__smakebuf_r>
  424a4e:	89a3      	ldrh	r3, [r4, #12]
  424a50:	6920      	ldr	r0, [r4, #16]
  424a52:	e7dd      	b.n	424a10 <__swsetup_r+0x20>
  424a54:	0799      	lsls	r1, r3, #30
  424a56:	bf58      	it	pl
  424a58:	6962      	ldrpl	r2, [r4, #20]
  424a5a:	60a2      	str	r2, [r4, #8]
  424a5c:	2800      	cmp	r0, #0
  424a5e:	d1e0      	bne.n	424a22 <__swsetup_r+0x32>
  424a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424a64:	061a      	lsls	r2, r3, #24
  424a66:	d5dd      	bpl.n	424a24 <__swsetup_r+0x34>
  424a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  424a6c:	81a3      	strh	r3, [r4, #12]
  424a6e:	f04f 30ff 	mov.w	r0, #4294967295
  424a72:	bd38      	pop	{r3, r4, r5, pc}
  424a74:	4618      	mov	r0, r3
  424a76:	f000 f927 	bl	424cc8 <__sinit>
  424a7a:	e7c2      	b.n	424a02 <__swsetup_r+0x12>
  424a7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  424a7e:	b151      	cbz	r1, 424a96 <__swsetup_r+0xa6>
  424a80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  424a84:	4299      	cmp	r1, r3
  424a86:	d004      	beq.n	424a92 <__swsetup_r+0xa2>
  424a88:	4628      	mov	r0, r5
  424a8a:	f000 fa43 	bl	424f14 <_free_r>
  424a8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424a92:	2300      	movs	r3, #0
  424a94:	6323      	str	r3, [r4, #48]	; 0x30
  424a96:	2300      	movs	r3, #0
  424a98:	6920      	ldr	r0, [r4, #16]
  424a9a:	6063      	str	r3, [r4, #4]
  424a9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  424aa0:	6020      	str	r0, [r4, #0]
  424aa2:	e7c5      	b.n	424a30 <__swsetup_r+0x40>
  424aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  424aa8:	2309      	movs	r3, #9
  424aaa:	602b      	str	r3, [r5, #0]
  424aac:	f04f 30ff 	mov.w	r0, #4294967295
  424ab0:	81a2      	strh	r2, [r4, #12]
  424ab2:	bd38      	pop	{r3, r4, r5, pc}
  424ab4:	20400070 	.word	0x20400070

00424ab8 <register_fini>:
  424ab8:	4b02      	ldr	r3, [pc, #8]	; (424ac4 <register_fini+0xc>)
  424aba:	b113      	cbz	r3, 424ac2 <register_fini+0xa>
  424abc:	4802      	ldr	r0, [pc, #8]	; (424ac8 <register_fini+0x10>)
  424abe:	f000 b805 	b.w	424acc <atexit>
  424ac2:	4770      	bx	lr
  424ac4:	00000000 	.word	0x00000000
  424ac8:	00424d39 	.word	0x00424d39

00424acc <atexit>:
  424acc:	2300      	movs	r3, #0
  424ace:	4601      	mov	r1, r0
  424ad0:	461a      	mov	r2, r3
  424ad2:	4618      	mov	r0, r3
  424ad4:	f001 b890 	b.w	425bf8 <__register_exitproc>

00424ad8 <__sflush_r>:
  424ad8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  424adc:	b29a      	uxth	r2, r3
  424ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424ae2:	460d      	mov	r5, r1
  424ae4:	0711      	lsls	r1, r2, #28
  424ae6:	4680      	mov	r8, r0
  424ae8:	d43a      	bmi.n	424b60 <__sflush_r+0x88>
  424aea:	686a      	ldr	r2, [r5, #4]
  424aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  424af0:	2a00      	cmp	r2, #0
  424af2:	81ab      	strh	r3, [r5, #12]
  424af4:	dd6f      	ble.n	424bd6 <__sflush_r+0xfe>
  424af6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  424af8:	2c00      	cmp	r4, #0
  424afa:	d049      	beq.n	424b90 <__sflush_r+0xb8>
  424afc:	2200      	movs	r2, #0
  424afe:	b29b      	uxth	r3, r3
  424b00:	f8d8 6000 	ldr.w	r6, [r8]
  424b04:	f8c8 2000 	str.w	r2, [r8]
  424b08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  424b0c:	d067      	beq.n	424bde <__sflush_r+0x106>
  424b0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  424b10:	075f      	lsls	r7, r3, #29
  424b12:	d505      	bpl.n	424b20 <__sflush_r+0x48>
  424b14:	6869      	ldr	r1, [r5, #4]
  424b16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  424b18:	1a52      	subs	r2, r2, r1
  424b1a:	b10b      	cbz	r3, 424b20 <__sflush_r+0x48>
  424b1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  424b1e:	1ad2      	subs	r2, r2, r3
  424b20:	2300      	movs	r3, #0
  424b22:	69e9      	ldr	r1, [r5, #28]
  424b24:	4640      	mov	r0, r8
  424b26:	47a0      	blx	r4
  424b28:	1c44      	adds	r4, r0, #1
  424b2a:	d03c      	beq.n	424ba6 <__sflush_r+0xce>
  424b2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  424b30:	692a      	ldr	r2, [r5, #16]
  424b32:	602a      	str	r2, [r5, #0]
  424b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  424b38:	2200      	movs	r2, #0
  424b3a:	81ab      	strh	r3, [r5, #12]
  424b3c:	04db      	lsls	r3, r3, #19
  424b3e:	606a      	str	r2, [r5, #4]
  424b40:	d447      	bmi.n	424bd2 <__sflush_r+0xfa>
  424b42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  424b44:	f8c8 6000 	str.w	r6, [r8]
  424b48:	b311      	cbz	r1, 424b90 <__sflush_r+0xb8>
  424b4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  424b4e:	4299      	cmp	r1, r3
  424b50:	d002      	beq.n	424b58 <__sflush_r+0x80>
  424b52:	4640      	mov	r0, r8
  424b54:	f000 f9de 	bl	424f14 <_free_r>
  424b58:	2000      	movs	r0, #0
  424b5a:	6328      	str	r0, [r5, #48]	; 0x30
  424b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424b60:	692e      	ldr	r6, [r5, #16]
  424b62:	b1ae      	cbz	r6, 424b90 <__sflush_r+0xb8>
  424b64:	682c      	ldr	r4, [r5, #0]
  424b66:	602e      	str	r6, [r5, #0]
  424b68:	0791      	lsls	r1, r2, #30
  424b6a:	bf0c      	ite	eq
  424b6c:	696b      	ldreq	r3, [r5, #20]
  424b6e:	2300      	movne	r3, #0
  424b70:	1ba4      	subs	r4, r4, r6
  424b72:	60ab      	str	r3, [r5, #8]
  424b74:	e00a      	b.n	424b8c <__sflush_r+0xb4>
  424b76:	4623      	mov	r3, r4
  424b78:	4632      	mov	r2, r6
  424b7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  424b7c:	69e9      	ldr	r1, [r5, #28]
  424b7e:	4640      	mov	r0, r8
  424b80:	47b8      	blx	r7
  424b82:	2800      	cmp	r0, #0
  424b84:	eba4 0400 	sub.w	r4, r4, r0
  424b88:	4406      	add	r6, r0
  424b8a:	dd04      	ble.n	424b96 <__sflush_r+0xbe>
  424b8c:	2c00      	cmp	r4, #0
  424b8e:	dcf2      	bgt.n	424b76 <__sflush_r+0x9e>
  424b90:	2000      	movs	r0, #0
  424b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424b96:	89ab      	ldrh	r3, [r5, #12]
  424b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  424b9c:	81ab      	strh	r3, [r5, #12]
  424b9e:	f04f 30ff 	mov.w	r0, #4294967295
  424ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424ba6:	f8d8 4000 	ldr.w	r4, [r8]
  424baa:	2c1d      	cmp	r4, #29
  424bac:	d8f3      	bhi.n	424b96 <__sflush_r+0xbe>
  424bae:	4b19      	ldr	r3, [pc, #100]	; (424c14 <__sflush_r+0x13c>)
  424bb0:	40e3      	lsrs	r3, r4
  424bb2:	43db      	mvns	r3, r3
  424bb4:	f013 0301 	ands.w	r3, r3, #1
  424bb8:	d1ed      	bne.n	424b96 <__sflush_r+0xbe>
  424bba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  424bbe:	606b      	str	r3, [r5, #4]
  424bc0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  424bc4:	6929      	ldr	r1, [r5, #16]
  424bc6:	81ab      	strh	r3, [r5, #12]
  424bc8:	04da      	lsls	r2, r3, #19
  424bca:	6029      	str	r1, [r5, #0]
  424bcc:	d5b9      	bpl.n	424b42 <__sflush_r+0x6a>
  424bce:	2c00      	cmp	r4, #0
  424bd0:	d1b7      	bne.n	424b42 <__sflush_r+0x6a>
  424bd2:	6528      	str	r0, [r5, #80]	; 0x50
  424bd4:	e7b5      	b.n	424b42 <__sflush_r+0x6a>
  424bd6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  424bd8:	2a00      	cmp	r2, #0
  424bda:	dc8c      	bgt.n	424af6 <__sflush_r+0x1e>
  424bdc:	e7d8      	b.n	424b90 <__sflush_r+0xb8>
  424bde:	2301      	movs	r3, #1
  424be0:	69e9      	ldr	r1, [r5, #28]
  424be2:	4640      	mov	r0, r8
  424be4:	47a0      	blx	r4
  424be6:	1c43      	adds	r3, r0, #1
  424be8:	4602      	mov	r2, r0
  424bea:	d002      	beq.n	424bf2 <__sflush_r+0x11a>
  424bec:	89ab      	ldrh	r3, [r5, #12]
  424bee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  424bf0:	e78e      	b.n	424b10 <__sflush_r+0x38>
  424bf2:	f8d8 3000 	ldr.w	r3, [r8]
  424bf6:	2b00      	cmp	r3, #0
  424bf8:	d0f8      	beq.n	424bec <__sflush_r+0x114>
  424bfa:	2b1d      	cmp	r3, #29
  424bfc:	d001      	beq.n	424c02 <__sflush_r+0x12a>
  424bfe:	2b16      	cmp	r3, #22
  424c00:	d102      	bne.n	424c08 <__sflush_r+0x130>
  424c02:	f8c8 6000 	str.w	r6, [r8]
  424c06:	e7c3      	b.n	424b90 <__sflush_r+0xb8>
  424c08:	89ab      	ldrh	r3, [r5, #12]
  424c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  424c0e:	81ab      	strh	r3, [r5, #12]
  424c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424c14:	20400001 	.word	0x20400001

00424c18 <_fflush_r>:
  424c18:	b538      	push	{r3, r4, r5, lr}
  424c1a:	460d      	mov	r5, r1
  424c1c:	4604      	mov	r4, r0
  424c1e:	b108      	cbz	r0, 424c24 <_fflush_r+0xc>
  424c20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  424c22:	b1bb      	cbz	r3, 424c54 <_fflush_r+0x3c>
  424c24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  424c28:	b188      	cbz	r0, 424c4e <_fflush_r+0x36>
  424c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  424c2c:	07db      	lsls	r3, r3, #31
  424c2e:	d401      	bmi.n	424c34 <_fflush_r+0x1c>
  424c30:	0581      	lsls	r1, r0, #22
  424c32:	d517      	bpl.n	424c64 <_fflush_r+0x4c>
  424c34:	4620      	mov	r0, r4
  424c36:	4629      	mov	r1, r5
  424c38:	f7ff ff4e 	bl	424ad8 <__sflush_r>
  424c3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  424c3e:	07da      	lsls	r2, r3, #31
  424c40:	4604      	mov	r4, r0
  424c42:	d402      	bmi.n	424c4a <_fflush_r+0x32>
  424c44:	89ab      	ldrh	r3, [r5, #12]
  424c46:	059b      	lsls	r3, r3, #22
  424c48:	d507      	bpl.n	424c5a <_fflush_r+0x42>
  424c4a:	4620      	mov	r0, r4
  424c4c:	bd38      	pop	{r3, r4, r5, pc}
  424c4e:	4604      	mov	r4, r0
  424c50:	4620      	mov	r0, r4
  424c52:	bd38      	pop	{r3, r4, r5, pc}
  424c54:	f000 f838 	bl	424cc8 <__sinit>
  424c58:	e7e4      	b.n	424c24 <_fflush_r+0xc>
  424c5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  424c5c:	f000 fbf6 	bl	42544c <__retarget_lock_release_recursive>
  424c60:	4620      	mov	r0, r4
  424c62:	bd38      	pop	{r3, r4, r5, pc}
  424c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
  424c66:	f000 fbef 	bl	425448 <__retarget_lock_acquire_recursive>
  424c6a:	e7e3      	b.n	424c34 <_fflush_r+0x1c>

00424c6c <_cleanup_r>:
  424c6c:	4901      	ldr	r1, [pc, #4]	; (424c74 <_cleanup_r+0x8>)
  424c6e:	f000 bbaf 	b.w	4253d0 <_fwalk_reent>
  424c72:	bf00      	nop
  424c74:	00425ce1 	.word	0x00425ce1

00424c78 <std.isra.0>:
  424c78:	b510      	push	{r4, lr}
  424c7a:	2300      	movs	r3, #0
  424c7c:	4604      	mov	r4, r0
  424c7e:	8181      	strh	r1, [r0, #12]
  424c80:	81c2      	strh	r2, [r0, #14]
  424c82:	6003      	str	r3, [r0, #0]
  424c84:	6043      	str	r3, [r0, #4]
  424c86:	6083      	str	r3, [r0, #8]
  424c88:	6643      	str	r3, [r0, #100]	; 0x64
  424c8a:	6103      	str	r3, [r0, #16]
  424c8c:	6143      	str	r3, [r0, #20]
  424c8e:	6183      	str	r3, [r0, #24]
  424c90:	4619      	mov	r1, r3
  424c92:	2208      	movs	r2, #8
  424c94:	305c      	adds	r0, #92	; 0x5c
  424c96:	f7fe fc33 	bl	423500 <memset>
  424c9a:	4807      	ldr	r0, [pc, #28]	; (424cb8 <std.isra.0+0x40>)
  424c9c:	4907      	ldr	r1, [pc, #28]	; (424cbc <std.isra.0+0x44>)
  424c9e:	4a08      	ldr	r2, [pc, #32]	; (424cc0 <std.isra.0+0x48>)
  424ca0:	4b08      	ldr	r3, [pc, #32]	; (424cc4 <std.isra.0+0x4c>)
  424ca2:	6220      	str	r0, [r4, #32]
  424ca4:	61e4      	str	r4, [r4, #28]
  424ca6:	6261      	str	r1, [r4, #36]	; 0x24
  424ca8:	62a2      	str	r2, [r4, #40]	; 0x28
  424caa:	62e3      	str	r3, [r4, #44]	; 0x2c
  424cac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  424cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  424cb4:	f000 bbc4 	b.w	425440 <__retarget_lock_init_recursive>
  424cb8:	00425a25 	.word	0x00425a25
  424cbc:	00425a49 	.word	0x00425a49
  424cc0:	00425a85 	.word	0x00425a85
  424cc4:	00425aa5 	.word	0x00425aa5

00424cc8 <__sinit>:
  424cc8:	b510      	push	{r4, lr}
  424cca:	4604      	mov	r4, r0
  424ccc:	4812      	ldr	r0, [pc, #72]	; (424d18 <__sinit+0x50>)
  424cce:	f000 fbbb 	bl	425448 <__retarget_lock_acquire_recursive>
  424cd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  424cd4:	b9d2      	cbnz	r2, 424d0c <__sinit+0x44>
  424cd6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  424cda:	4810      	ldr	r0, [pc, #64]	; (424d1c <__sinit+0x54>)
  424cdc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  424ce0:	2103      	movs	r1, #3
  424ce2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  424ce6:	63e0      	str	r0, [r4, #60]	; 0x3c
  424ce8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  424cec:	6860      	ldr	r0, [r4, #4]
  424cee:	2104      	movs	r1, #4
  424cf0:	f7ff ffc2 	bl	424c78 <std.isra.0>
  424cf4:	2201      	movs	r2, #1
  424cf6:	2109      	movs	r1, #9
  424cf8:	68a0      	ldr	r0, [r4, #8]
  424cfa:	f7ff ffbd 	bl	424c78 <std.isra.0>
  424cfe:	2202      	movs	r2, #2
  424d00:	2112      	movs	r1, #18
  424d02:	68e0      	ldr	r0, [r4, #12]
  424d04:	f7ff ffb8 	bl	424c78 <std.isra.0>
  424d08:	2301      	movs	r3, #1
  424d0a:	63a3      	str	r3, [r4, #56]	; 0x38
  424d0c:	4802      	ldr	r0, [pc, #8]	; (424d18 <__sinit+0x50>)
  424d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  424d12:	f000 bb9b 	b.w	42544c <__retarget_lock_release_recursive>
  424d16:	bf00      	nop
  424d18:	2043a350 	.word	0x2043a350
  424d1c:	00424c6d 	.word	0x00424c6d

00424d20 <__sfp_lock_acquire>:
  424d20:	4801      	ldr	r0, [pc, #4]	; (424d28 <__sfp_lock_acquire+0x8>)
  424d22:	f000 bb91 	b.w	425448 <__retarget_lock_acquire_recursive>
  424d26:	bf00      	nop
  424d28:	2043a364 	.word	0x2043a364

00424d2c <__sfp_lock_release>:
  424d2c:	4801      	ldr	r0, [pc, #4]	; (424d34 <__sfp_lock_release+0x8>)
  424d2e:	f000 bb8d 	b.w	42544c <__retarget_lock_release_recursive>
  424d32:	bf00      	nop
  424d34:	2043a364 	.word	0x2043a364

00424d38 <__libc_fini_array>:
  424d38:	b538      	push	{r3, r4, r5, lr}
  424d3a:	4c0a      	ldr	r4, [pc, #40]	; (424d64 <__libc_fini_array+0x2c>)
  424d3c:	4d0a      	ldr	r5, [pc, #40]	; (424d68 <__libc_fini_array+0x30>)
  424d3e:	1b64      	subs	r4, r4, r5
  424d40:	10a4      	asrs	r4, r4, #2
  424d42:	d00a      	beq.n	424d5a <__libc_fini_array+0x22>
  424d44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  424d48:	3b01      	subs	r3, #1
  424d4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  424d4e:	3c01      	subs	r4, #1
  424d50:	f855 3904 	ldr.w	r3, [r5], #-4
  424d54:	4798      	blx	r3
  424d56:	2c00      	cmp	r4, #0
  424d58:	d1f9      	bne.n	424d4e <__libc_fini_array+0x16>
  424d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  424d5e:	f009 bbfd 	b.w	42e55c <_fini>
  424d62:	bf00      	nop
  424d64:	0042e56c 	.word	0x0042e56c
  424d68:	0042e568 	.word	0x0042e568

00424d6c <__fputwc>:
  424d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  424d70:	b082      	sub	sp, #8
  424d72:	4680      	mov	r8, r0
  424d74:	4689      	mov	r9, r1
  424d76:	4614      	mov	r4, r2
  424d78:	f000 fb54 	bl	425424 <__locale_mb_cur_max>
  424d7c:	2801      	cmp	r0, #1
  424d7e:	d036      	beq.n	424dee <__fputwc+0x82>
  424d80:	464a      	mov	r2, r9
  424d82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  424d86:	a901      	add	r1, sp, #4
  424d88:	4640      	mov	r0, r8
  424d8a:	f000 fee7 	bl	425b5c <_wcrtomb_r>
  424d8e:	1c42      	adds	r2, r0, #1
  424d90:	4606      	mov	r6, r0
  424d92:	d025      	beq.n	424de0 <__fputwc+0x74>
  424d94:	b3a8      	cbz	r0, 424e02 <__fputwc+0x96>
  424d96:	f89d e004 	ldrb.w	lr, [sp, #4]
  424d9a:	2500      	movs	r5, #0
  424d9c:	f10d 0a04 	add.w	sl, sp, #4
  424da0:	e009      	b.n	424db6 <__fputwc+0x4a>
  424da2:	6823      	ldr	r3, [r4, #0]
  424da4:	1c5a      	adds	r2, r3, #1
  424da6:	6022      	str	r2, [r4, #0]
  424da8:	f883 e000 	strb.w	lr, [r3]
  424dac:	3501      	adds	r5, #1
  424dae:	42b5      	cmp	r5, r6
  424db0:	d227      	bcs.n	424e02 <__fputwc+0x96>
  424db2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  424db6:	68a3      	ldr	r3, [r4, #8]
  424db8:	3b01      	subs	r3, #1
  424dba:	2b00      	cmp	r3, #0
  424dbc:	60a3      	str	r3, [r4, #8]
  424dbe:	daf0      	bge.n	424da2 <__fputwc+0x36>
  424dc0:	69a7      	ldr	r7, [r4, #24]
  424dc2:	42bb      	cmp	r3, r7
  424dc4:	4671      	mov	r1, lr
  424dc6:	4622      	mov	r2, r4
  424dc8:	4640      	mov	r0, r8
  424dca:	db02      	blt.n	424dd2 <__fputwc+0x66>
  424dcc:	f1be 0f0a 	cmp.w	lr, #10
  424dd0:	d1e7      	bne.n	424da2 <__fputwc+0x36>
  424dd2:	f000 fe6b 	bl	425aac <__swbuf_r>
  424dd6:	1c43      	adds	r3, r0, #1
  424dd8:	d1e8      	bne.n	424dac <__fputwc+0x40>
  424dda:	b002      	add	sp, #8
  424ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  424de0:	89a3      	ldrh	r3, [r4, #12]
  424de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  424de6:	81a3      	strh	r3, [r4, #12]
  424de8:	b002      	add	sp, #8
  424dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  424dee:	f109 33ff 	add.w	r3, r9, #4294967295
  424df2:	2bfe      	cmp	r3, #254	; 0xfe
  424df4:	d8c4      	bhi.n	424d80 <__fputwc+0x14>
  424df6:	fa5f fe89 	uxtb.w	lr, r9
  424dfa:	4606      	mov	r6, r0
  424dfc:	f88d e004 	strb.w	lr, [sp, #4]
  424e00:	e7cb      	b.n	424d9a <__fputwc+0x2e>
  424e02:	4648      	mov	r0, r9
  424e04:	b002      	add	sp, #8
  424e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  424e0a:	bf00      	nop

00424e0c <_fputwc_r>:
  424e0c:	b530      	push	{r4, r5, lr}
  424e0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  424e10:	f013 0f01 	tst.w	r3, #1
  424e14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  424e18:	4614      	mov	r4, r2
  424e1a:	b083      	sub	sp, #12
  424e1c:	4605      	mov	r5, r0
  424e1e:	b29a      	uxth	r2, r3
  424e20:	d101      	bne.n	424e26 <_fputwc_r+0x1a>
  424e22:	0590      	lsls	r0, r2, #22
  424e24:	d51c      	bpl.n	424e60 <_fputwc_r+0x54>
  424e26:	0490      	lsls	r0, r2, #18
  424e28:	d406      	bmi.n	424e38 <_fputwc_r+0x2c>
  424e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  424e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  424e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  424e34:	81a3      	strh	r3, [r4, #12]
  424e36:	6662      	str	r2, [r4, #100]	; 0x64
  424e38:	4628      	mov	r0, r5
  424e3a:	4622      	mov	r2, r4
  424e3c:	f7ff ff96 	bl	424d6c <__fputwc>
  424e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  424e42:	07da      	lsls	r2, r3, #31
  424e44:	4605      	mov	r5, r0
  424e46:	d402      	bmi.n	424e4e <_fputwc_r+0x42>
  424e48:	89a3      	ldrh	r3, [r4, #12]
  424e4a:	059b      	lsls	r3, r3, #22
  424e4c:	d502      	bpl.n	424e54 <_fputwc_r+0x48>
  424e4e:	4628      	mov	r0, r5
  424e50:	b003      	add	sp, #12
  424e52:	bd30      	pop	{r4, r5, pc}
  424e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424e56:	f000 faf9 	bl	42544c <__retarget_lock_release_recursive>
  424e5a:	4628      	mov	r0, r5
  424e5c:	b003      	add	sp, #12
  424e5e:	bd30      	pop	{r4, r5, pc}
  424e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424e62:	9101      	str	r1, [sp, #4]
  424e64:	f000 faf0 	bl	425448 <__retarget_lock_acquire_recursive>
  424e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424e6c:	9901      	ldr	r1, [sp, #4]
  424e6e:	b29a      	uxth	r2, r3
  424e70:	e7d9      	b.n	424e26 <_fputwc_r+0x1a>
  424e72:	bf00      	nop

00424e74 <_malloc_trim_r>:
  424e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  424e76:	4f24      	ldr	r7, [pc, #144]	; (424f08 <_malloc_trim_r+0x94>)
  424e78:	460c      	mov	r4, r1
  424e7a:	4606      	mov	r6, r0
  424e7c:	f7fe fb8e 	bl	42359c <__malloc_lock>
  424e80:	68bb      	ldr	r3, [r7, #8]
  424e82:	685d      	ldr	r5, [r3, #4]
  424e84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  424e88:	310f      	adds	r1, #15
  424e8a:	f025 0503 	bic.w	r5, r5, #3
  424e8e:	4429      	add	r1, r5
  424e90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  424e94:	f021 010f 	bic.w	r1, r1, #15
  424e98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  424e9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  424ea0:	db07      	blt.n	424eb2 <_malloc_trim_r+0x3e>
  424ea2:	2100      	movs	r1, #0
  424ea4:	4630      	mov	r0, r6
  424ea6:	f7fe fba5 	bl	4235f4 <_sbrk_r>
  424eaa:	68bb      	ldr	r3, [r7, #8]
  424eac:	442b      	add	r3, r5
  424eae:	4298      	cmp	r0, r3
  424eb0:	d004      	beq.n	424ebc <_malloc_trim_r+0x48>
  424eb2:	4630      	mov	r0, r6
  424eb4:	f7fe fb78 	bl	4235a8 <__malloc_unlock>
  424eb8:	2000      	movs	r0, #0
  424eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424ebc:	4261      	negs	r1, r4
  424ebe:	4630      	mov	r0, r6
  424ec0:	f7fe fb98 	bl	4235f4 <_sbrk_r>
  424ec4:	3001      	adds	r0, #1
  424ec6:	d00d      	beq.n	424ee4 <_malloc_trim_r+0x70>
  424ec8:	4b10      	ldr	r3, [pc, #64]	; (424f0c <_malloc_trim_r+0x98>)
  424eca:	68ba      	ldr	r2, [r7, #8]
  424ecc:	6819      	ldr	r1, [r3, #0]
  424ece:	1b2d      	subs	r5, r5, r4
  424ed0:	f045 0501 	orr.w	r5, r5, #1
  424ed4:	4630      	mov	r0, r6
  424ed6:	1b09      	subs	r1, r1, r4
  424ed8:	6055      	str	r5, [r2, #4]
  424eda:	6019      	str	r1, [r3, #0]
  424edc:	f7fe fb64 	bl	4235a8 <__malloc_unlock>
  424ee0:	2001      	movs	r0, #1
  424ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424ee4:	2100      	movs	r1, #0
  424ee6:	4630      	mov	r0, r6
  424ee8:	f7fe fb84 	bl	4235f4 <_sbrk_r>
  424eec:	68ba      	ldr	r2, [r7, #8]
  424eee:	1a83      	subs	r3, r0, r2
  424ef0:	2b0f      	cmp	r3, #15
  424ef2:	ddde      	ble.n	424eb2 <_malloc_trim_r+0x3e>
  424ef4:	4c06      	ldr	r4, [pc, #24]	; (424f10 <_malloc_trim_r+0x9c>)
  424ef6:	4905      	ldr	r1, [pc, #20]	; (424f0c <_malloc_trim_r+0x98>)
  424ef8:	6824      	ldr	r4, [r4, #0]
  424efa:	f043 0301 	orr.w	r3, r3, #1
  424efe:	1b00      	subs	r0, r0, r4
  424f00:	6053      	str	r3, [r2, #4]
  424f02:	6008      	str	r0, [r1, #0]
  424f04:	e7d5      	b.n	424eb2 <_malloc_trim_r+0x3e>
  424f06:	bf00      	nop
  424f08:	204004a0 	.word	0x204004a0
  424f0c:	2043a0a8 	.word	0x2043a0a8
  424f10:	204008a8 	.word	0x204008a8

00424f14 <_free_r>:
  424f14:	2900      	cmp	r1, #0
  424f16:	d044      	beq.n	424fa2 <_free_r+0x8e>
  424f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424f1c:	460d      	mov	r5, r1
  424f1e:	4680      	mov	r8, r0
  424f20:	f7fe fb3c 	bl	42359c <__malloc_lock>
  424f24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  424f28:	4969      	ldr	r1, [pc, #420]	; (4250d0 <_free_r+0x1bc>)
  424f2a:	f027 0301 	bic.w	r3, r7, #1
  424f2e:	f1a5 0408 	sub.w	r4, r5, #8
  424f32:	18e2      	adds	r2, r4, r3
  424f34:	688e      	ldr	r6, [r1, #8]
  424f36:	6850      	ldr	r0, [r2, #4]
  424f38:	42b2      	cmp	r2, r6
  424f3a:	f020 0003 	bic.w	r0, r0, #3
  424f3e:	d05e      	beq.n	424ffe <_free_r+0xea>
  424f40:	07fe      	lsls	r6, r7, #31
  424f42:	6050      	str	r0, [r2, #4]
  424f44:	d40b      	bmi.n	424f5e <_free_r+0x4a>
  424f46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  424f4a:	1be4      	subs	r4, r4, r7
  424f4c:	f101 0e08 	add.w	lr, r1, #8
  424f50:	68a5      	ldr	r5, [r4, #8]
  424f52:	4575      	cmp	r5, lr
  424f54:	443b      	add	r3, r7
  424f56:	d06d      	beq.n	425034 <_free_r+0x120>
  424f58:	68e7      	ldr	r7, [r4, #12]
  424f5a:	60ef      	str	r7, [r5, #12]
  424f5c:	60bd      	str	r5, [r7, #8]
  424f5e:	1815      	adds	r5, r2, r0
  424f60:	686d      	ldr	r5, [r5, #4]
  424f62:	07ed      	lsls	r5, r5, #31
  424f64:	d53e      	bpl.n	424fe4 <_free_r+0xd0>
  424f66:	f043 0201 	orr.w	r2, r3, #1
  424f6a:	6062      	str	r2, [r4, #4]
  424f6c:	50e3      	str	r3, [r4, r3]
  424f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  424f72:	d217      	bcs.n	424fa4 <_free_r+0x90>
  424f74:	08db      	lsrs	r3, r3, #3
  424f76:	1c58      	adds	r0, r3, #1
  424f78:	109a      	asrs	r2, r3, #2
  424f7a:	684d      	ldr	r5, [r1, #4]
  424f7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  424f80:	60a7      	str	r7, [r4, #8]
  424f82:	2301      	movs	r3, #1
  424f84:	4093      	lsls	r3, r2
  424f86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  424f8a:	432b      	orrs	r3, r5
  424f8c:	3a08      	subs	r2, #8
  424f8e:	60e2      	str	r2, [r4, #12]
  424f90:	604b      	str	r3, [r1, #4]
  424f92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  424f96:	60fc      	str	r4, [r7, #12]
  424f98:	4640      	mov	r0, r8
  424f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  424f9e:	f7fe bb03 	b.w	4235a8 <__malloc_unlock>
  424fa2:	4770      	bx	lr
  424fa4:	0a5a      	lsrs	r2, r3, #9
  424fa6:	2a04      	cmp	r2, #4
  424fa8:	d852      	bhi.n	425050 <_free_r+0x13c>
  424faa:	099a      	lsrs	r2, r3, #6
  424fac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  424fb0:	00ff      	lsls	r7, r7, #3
  424fb2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  424fb6:	19c8      	adds	r0, r1, r7
  424fb8:	59ca      	ldr	r2, [r1, r7]
  424fba:	3808      	subs	r0, #8
  424fbc:	4290      	cmp	r0, r2
  424fbe:	d04f      	beq.n	425060 <_free_r+0x14c>
  424fc0:	6851      	ldr	r1, [r2, #4]
  424fc2:	f021 0103 	bic.w	r1, r1, #3
  424fc6:	428b      	cmp	r3, r1
  424fc8:	d232      	bcs.n	425030 <_free_r+0x11c>
  424fca:	6892      	ldr	r2, [r2, #8]
  424fcc:	4290      	cmp	r0, r2
  424fce:	d1f7      	bne.n	424fc0 <_free_r+0xac>
  424fd0:	68c3      	ldr	r3, [r0, #12]
  424fd2:	60a0      	str	r0, [r4, #8]
  424fd4:	60e3      	str	r3, [r4, #12]
  424fd6:	609c      	str	r4, [r3, #8]
  424fd8:	60c4      	str	r4, [r0, #12]
  424fda:	4640      	mov	r0, r8
  424fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  424fe0:	f7fe bae2 	b.w	4235a8 <__malloc_unlock>
  424fe4:	6895      	ldr	r5, [r2, #8]
  424fe6:	4f3b      	ldr	r7, [pc, #236]	; (4250d4 <_free_r+0x1c0>)
  424fe8:	42bd      	cmp	r5, r7
  424fea:	4403      	add	r3, r0
  424fec:	d040      	beq.n	425070 <_free_r+0x15c>
  424fee:	68d0      	ldr	r0, [r2, #12]
  424ff0:	60e8      	str	r0, [r5, #12]
  424ff2:	f043 0201 	orr.w	r2, r3, #1
  424ff6:	6085      	str	r5, [r0, #8]
  424ff8:	6062      	str	r2, [r4, #4]
  424ffa:	50e3      	str	r3, [r4, r3]
  424ffc:	e7b7      	b.n	424f6e <_free_r+0x5a>
  424ffe:	07ff      	lsls	r7, r7, #31
  425000:	4403      	add	r3, r0
  425002:	d407      	bmi.n	425014 <_free_r+0x100>
  425004:	f855 2c08 	ldr.w	r2, [r5, #-8]
  425008:	1aa4      	subs	r4, r4, r2
  42500a:	4413      	add	r3, r2
  42500c:	68a0      	ldr	r0, [r4, #8]
  42500e:	68e2      	ldr	r2, [r4, #12]
  425010:	60c2      	str	r2, [r0, #12]
  425012:	6090      	str	r0, [r2, #8]
  425014:	4a30      	ldr	r2, [pc, #192]	; (4250d8 <_free_r+0x1c4>)
  425016:	6812      	ldr	r2, [r2, #0]
  425018:	f043 0001 	orr.w	r0, r3, #1
  42501c:	4293      	cmp	r3, r2
  42501e:	6060      	str	r0, [r4, #4]
  425020:	608c      	str	r4, [r1, #8]
  425022:	d3b9      	bcc.n	424f98 <_free_r+0x84>
  425024:	4b2d      	ldr	r3, [pc, #180]	; (4250dc <_free_r+0x1c8>)
  425026:	4640      	mov	r0, r8
  425028:	6819      	ldr	r1, [r3, #0]
  42502a:	f7ff ff23 	bl	424e74 <_malloc_trim_r>
  42502e:	e7b3      	b.n	424f98 <_free_r+0x84>
  425030:	4610      	mov	r0, r2
  425032:	e7cd      	b.n	424fd0 <_free_r+0xbc>
  425034:	1811      	adds	r1, r2, r0
  425036:	6849      	ldr	r1, [r1, #4]
  425038:	07c9      	lsls	r1, r1, #31
  42503a:	d444      	bmi.n	4250c6 <_free_r+0x1b2>
  42503c:	6891      	ldr	r1, [r2, #8]
  42503e:	68d2      	ldr	r2, [r2, #12]
  425040:	60ca      	str	r2, [r1, #12]
  425042:	4403      	add	r3, r0
  425044:	f043 0001 	orr.w	r0, r3, #1
  425048:	6091      	str	r1, [r2, #8]
  42504a:	6060      	str	r0, [r4, #4]
  42504c:	50e3      	str	r3, [r4, r3]
  42504e:	e7a3      	b.n	424f98 <_free_r+0x84>
  425050:	2a14      	cmp	r2, #20
  425052:	d816      	bhi.n	425082 <_free_r+0x16e>
  425054:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  425058:	00ff      	lsls	r7, r7, #3
  42505a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  42505e:	e7aa      	b.n	424fb6 <_free_r+0xa2>
  425060:	10aa      	asrs	r2, r5, #2
  425062:	2301      	movs	r3, #1
  425064:	684d      	ldr	r5, [r1, #4]
  425066:	4093      	lsls	r3, r2
  425068:	432b      	orrs	r3, r5
  42506a:	604b      	str	r3, [r1, #4]
  42506c:	4603      	mov	r3, r0
  42506e:	e7b0      	b.n	424fd2 <_free_r+0xbe>
  425070:	f043 0201 	orr.w	r2, r3, #1
  425074:	614c      	str	r4, [r1, #20]
  425076:	610c      	str	r4, [r1, #16]
  425078:	60e5      	str	r5, [r4, #12]
  42507a:	60a5      	str	r5, [r4, #8]
  42507c:	6062      	str	r2, [r4, #4]
  42507e:	50e3      	str	r3, [r4, r3]
  425080:	e78a      	b.n	424f98 <_free_r+0x84>
  425082:	2a54      	cmp	r2, #84	; 0x54
  425084:	d806      	bhi.n	425094 <_free_r+0x180>
  425086:	0b1a      	lsrs	r2, r3, #12
  425088:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  42508c:	00ff      	lsls	r7, r7, #3
  42508e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  425092:	e790      	b.n	424fb6 <_free_r+0xa2>
  425094:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  425098:	d806      	bhi.n	4250a8 <_free_r+0x194>
  42509a:	0bda      	lsrs	r2, r3, #15
  42509c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4250a0:	00ff      	lsls	r7, r7, #3
  4250a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4250a6:	e786      	b.n	424fb6 <_free_r+0xa2>
  4250a8:	f240 5054 	movw	r0, #1364	; 0x554
  4250ac:	4282      	cmp	r2, r0
  4250ae:	d806      	bhi.n	4250be <_free_r+0x1aa>
  4250b0:	0c9a      	lsrs	r2, r3, #18
  4250b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4250b6:	00ff      	lsls	r7, r7, #3
  4250b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4250bc:	e77b      	b.n	424fb6 <_free_r+0xa2>
  4250be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4250c2:	257e      	movs	r5, #126	; 0x7e
  4250c4:	e777      	b.n	424fb6 <_free_r+0xa2>
  4250c6:	f043 0101 	orr.w	r1, r3, #1
  4250ca:	6061      	str	r1, [r4, #4]
  4250cc:	6013      	str	r3, [r2, #0]
  4250ce:	e763      	b.n	424f98 <_free_r+0x84>
  4250d0:	204004a0 	.word	0x204004a0
  4250d4:	204004a8 	.word	0x204004a8
  4250d8:	204008ac 	.word	0x204008ac
  4250dc:	2043a0d8 	.word	0x2043a0d8

004250e0 <__sfvwrite_r>:
  4250e0:	6893      	ldr	r3, [r2, #8]
  4250e2:	2b00      	cmp	r3, #0
  4250e4:	d073      	beq.n	4251ce <__sfvwrite_r+0xee>
  4250e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4250ea:	898b      	ldrh	r3, [r1, #12]
  4250ec:	b083      	sub	sp, #12
  4250ee:	460c      	mov	r4, r1
  4250f0:	0719      	lsls	r1, r3, #28
  4250f2:	9000      	str	r0, [sp, #0]
  4250f4:	4616      	mov	r6, r2
  4250f6:	d526      	bpl.n	425146 <__sfvwrite_r+0x66>
  4250f8:	6922      	ldr	r2, [r4, #16]
  4250fa:	b322      	cbz	r2, 425146 <__sfvwrite_r+0x66>
  4250fc:	f013 0002 	ands.w	r0, r3, #2
  425100:	6835      	ldr	r5, [r6, #0]
  425102:	d02c      	beq.n	42515e <__sfvwrite_r+0x7e>
  425104:	f04f 0900 	mov.w	r9, #0
  425108:	4fb0      	ldr	r7, [pc, #704]	; (4253cc <__sfvwrite_r+0x2ec>)
  42510a:	46c8      	mov	r8, r9
  42510c:	46b2      	mov	sl, r6
  42510e:	45b8      	cmp	r8, r7
  425110:	4643      	mov	r3, r8
  425112:	464a      	mov	r2, r9
  425114:	bf28      	it	cs
  425116:	463b      	movcs	r3, r7
  425118:	9800      	ldr	r0, [sp, #0]
  42511a:	f1b8 0f00 	cmp.w	r8, #0
  42511e:	d050      	beq.n	4251c2 <__sfvwrite_r+0xe2>
  425120:	69e1      	ldr	r1, [r4, #28]
  425122:	6a66      	ldr	r6, [r4, #36]	; 0x24
  425124:	47b0      	blx	r6
  425126:	2800      	cmp	r0, #0
  425128:	dd58      	ble.n	4251dc <__sfvwrite_r+0xfc>
  42512a:	f8da 3008 	ldr.w	r3, [sl, #8]
  42512e:	1a1b      	subs	r3, r3, r0
  425130:	4481      	add	r9, r0
  425132:	eba8 0800 	sub.w	r8, r8, r0
  425136:	f8ca 3008 	str.w	r3, [sl, #8]
  42513a:	2b00      	cmp	r3, #0
  42513c:	d1e7      	bne.n	42510e <__sfvwrite_r+0x2e>
  42513e:	2000      	movs	r0, #0
  425140:	b003      	add	sp, #12
  425142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  425146:	4621      	mov	r1, r4
  425148:	9800      	ldr	r0, [sp, #0]
  42514a:	f7ff fc51 	bl	4249f0 <__swsetup_r>
  42514e:	2800      	cmp	r0, #0
  425150:	f040 8133 	bne.w	4253ba <__sfvwrite_r+0x2da>
  425154:	89a3      	ldrh	r3, [r4, #12]
  425156:	6835      	ldr	r5, [r6, #0]
  425158:	f013 0002 	ands.w	r0, r3, #2
  42515c:	d1d2      	bne.n	425104 <__sfvwrite_r+0x24>
  42515e:	f013 0901 	ands.w	r9, r3, #1
  425162:	d145      	bne.n	4251f0 <__sfvwrite_r+0x110>
  425164:	464f      	mov	r7, r9
  425166:	9601      	str	r6, [sp, #4]
  425168:	b337      	cbz	r7, 4251b8 <__sfvwrite_r+0xd8>
  42516a:	059a      	lsls	r2, r3, #22
  42516c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  425170:	f140 8083 	bpl.w	42527a <__sfvwrite_r+0x19a>
  425174:	4547      	cmp	r7, r8
  425176:	46c3      	mov	fp, r8
  425178:	f0c0 80ab 	bcc.w	4252d2 <__sfvwrite_r+0x1f2>
  42517c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  425180:	f040 80ac 	bne.w	4252dc <__sfvwrite_r+0x1fc>
  425184:	6820      	ldr	r0, [r4, #0]
  425186:	46ba      	mov	sl, r7
  425188:	465a      	mov	r2, fp
  42518a:	4649      	mov	r1, r9
  42518c:	f000 fa40 	bl	425610 <memmove>
  425190:	68a2      	ldr	r2, [r4, #8]
  425192:	6823      	ldr	r3, [r4, #0]
  425194:	eba2 0208 	sub.w	r2, r2, r8
  425198:	445b      	add	r3, fp
  42519a:	60a2      	str	r2, [r4, #8]
  42519c:	6023      	str	r3, [r4, #0]
  42519e:	9a01      	ldr	r2, [sp, #4]
  4251a0:	6893      	ldr	r3, [r2, #8]
  4251a2:	eba3 030a 	sub.w	r3, r3, sl
  4251a6:	44d1      	add	r9, sl
  4251a8:	eba7 070a 	sub.w	r7, r7, sl
  4251ac:	6093      	str	r3, [r2, #8]
  4251ae:	2b00      	cmp	r3, #0
  4251b0:	d0c5      	beq.n	42513e <__sfvwrite_r+0x5e>
  4251b2:	89a3      	ldrh	r3, [r4, #12]
  4251b4:	2f00      	cmp	r7, #0
  4251b6:	d1d8      	bne.n	42516a <__sfvwrite_r+0x8a>
  4251b8:	f8d5 9000 	ldr.w	r9, [r5]
  4251bc:	686f      	ldr	r7, [r5, #4]
  4251be:	3508      	adds	r5, #8
  4251c0:	e7d2      	b.n	425168 <__sfvwrite_r+0x88>
  4251c2:	f8d5 9000 	ldr.w	r9, [r5]
  4251c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4251ca:	3508      	adds	r5, #8
  4251cc:	e79f      	b.n	42510e <__sfvwrite_r+0x2e>
  4251ce:	2000      	movs	r0, #0
  4251d0:	4770      	bx	lr
  4251d2:	4621      	mov	r1, r4
  4251d4:	9800      	ldr	r0, [sp, #0]
  4251d6:	f7ff fd1f 	bl	424c18 <_fflush_r>
  4251da:	b370      	cbz	r0, 42523a <__sfvwrite_r+0x15a>
  4251dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4251e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4251e4:	f04f 30ff 	mov.w	r0, #4294967295
  4251e8:	81a3      	strh	r3, [r4, #12]
  4251ea:	b003      	add	sp, #12
  4251ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4251f0:	4681      	mov	r9, r0
  4251f2:	4633      	mov	r3, r6
  4251f4:	464e      	mov	r6, r9
  4251f6:	46a8      	mov	r8, r5
  4251f8:	469a      	mov	sl, r3
  4251fa:	464d      	mov	r5, r9
  4251fc:	b34e      	cbz	r6, 425252 <__sfvwrite_r+0x172>
  4251fe:	b380      	cbz	r0, 425262 <__sfvwrite_r+0x182>
  425200:	6820      	ldr	r0, [r4, #0]
  425202:	6923      	ldr	r3, [r4, #16]
  425204:	6962      	ldr	r2, [r4, #20]
  425206:	45b1      	cmp	r9, r6
  425208:	46cb      	mov	fp, r9
  42520a:	bf28      	it	cs
  42520c:	46b3      	movcs	fp, r6
  42520e:	4298      	cmp	r0, r3
  425210:	465f      	mov	r7, fp
  425212:	d904      	bls.n	42521e <__sfvwrite_r+0x13e>
  425214:	68a3      	ldr	r3, [r4, #8]
  425216:	4413      	add	r3, r2
  425218:	459b      	cmp	fp, r3
  42521a:	f300 80a6 	bgt.w	42536a <__sfvwrite_r+0x28a>
  42521e:	4593      	cmp	fp, r2
  425220:	db4b      	blt.n	4252ba <__sfvwrite_r+0x1da>
  425222:	4613      	mov	r3, r2
  425224:	6a67      	ldr	r7, [r4, #36]	; 0x24
  425226:	69e1      	ldr	r1, [r4, #28]
  425228:	9800      	ldr	r0, [sp, #0]
  42522a:	462a      	mov	r2, r5
  42522c:	47b8      	blx	r7
  42522e:	1e07      	subs	r7, r0, #0
  425230:	ddd4      	ble.n	4251dc <__sfvwrite_r+0xfc>
  425232:	ebb9 0907 	subs.w	r9, r9, r7
  425236:	d0cc      	beq.n	4251d2 <__sfvwrite_r+0xf2>
  425238:	2001      	movs	r0, #1
  42523a:	f8da 3008 	ldr.w	r3, [sl, #8]
  42523e:	1bdb      	subs	r3, r3, r7
  425240:	443d      	add	r5, r7
  425242:	1bf6      	subs	r6, r6, r7
  425244:	f8ca 3008 	str.w	r3, [sl, #8]
  425248:	2b00      	cmp	r3, #0
  42524a:	f43f af78 	beq.w	42513e <__sfvwrite_r+0x5e>
  42524e:	2e00      	cmp	r6, #0
  425250:	d1d5      	bne.n	4251fe <__sfvwrite_r+0x11e>
  425252:	f108 0308 	add.w	r3, r8, #8
  425256:	e913 0060 	ldmdb	r3, {r5, r6}
  42525a:	4698      	mov	r8, r3
  42525c:	3308      	adds	r3, #8
  42525e:	2e00      	cmp	r6, #0
  425260:	d0f9      	beq.n	425256 <__sfvwrite_r+0x176>
  425262:	4632      	mov	r2, r6
  425264:	210a      	movs	r1, #10
  425266:	4628      	mov	r0, r5
  425268:	f000 f982 	bl	425570 <memchr>
  42526c:	2800      	cmp	r0, #0
  42526e:	f000 80a1 	beq.w	4253b4 <__sfvwrite_r+0x2d4>
  425272:	3001      	adds	r0, #1
  425274:	eba0 0905 	sub.w	r9, r0, r5
  425278:	e7c2      	b.n	425200 <__sfvwrite_r+0x120>
  42527a:	6820      	ldr	r0, [r4, #0]
  42527c:	6923      	ldr	r3, [r4, #16]
  42527e:	4298      	cmp	r0, r3
  425280:	d802      	bhi.n	425288 <__sfvwrite_r+0x1a8>
  425282:	6963      	ldr	r3, [r4, #20]
  425284:	429f      	cmp	r7, r3
  425286:	d25d      	bcs.n	425344 <__sfvwrite_r+0x264>
  425288:	45b8      	cmp	r8, r7
  42528a:	bf28      	it	cs
  42528c:	46b8      	movcs	r8, r7
  42528e:	4642      	mov	r2, r8
  425290:	4649      	mov	r1, r9
  425292:	f000 f9bd 	bl	425610 <memmove>
  425296:	68a3      	ldr	r3, [r4, #8]
  425298:	6822      	ldr	r2, [r4, #0]
  42529a:	eba3 0308 	sub.w	r3, r3, r8
  42529e:	4442      	add	r2, r8
  4252a0:	60a3      	str	r3, [r4, #8]
  4252a2:	6022      	str	r2, [r4, #0]
  4252a4:	b10b      	cbz	r3, 4252aa <__sfvwrite_r+0x1ca>
  4252a6:	46c2      	mov	sl, r8
  4252a8:	e779      	b.n	42519e <__sfvwrite_r+0xbe>
  4252aa:	4621      	mov	r1, r4
  4252ac:	9800      	ldr	r0, [sp, #0]
  4252ae:	f7ff fcb3 	bl	424c18 <_fflush_r>
  4252b2:	2800      	cmp	r0, #0
  4252b4:	d192      	bne.n	4251dc <__sfvwrite_r+0xfc>
  4252b6:	46c2      	mov	sl, r8
  4252b8:	e771      	b.n	42519e <__sfvwrite_r+0xbe>
  4252ba:	465a      	mov	r2, fp
  4252bc:	4629      	mov	r1, r5
  4252be:	f000 f9a7 	bl	425610 <memmove>
  4252c2:	68a2      	ldr	r2, [r4, #8]
  4252c4:	6823      	ldr	r3, [r4, #0]
  4252c6:	eba2 020b 	sub.w	r2, r2, fp
  4252ca:	445b      	add	r3, fp
  4252cc:	60a2      	str	r2, [r4, #8]
  4252ce:	6023      	str	r3, [r4, #0]
  4252d0:	e7af      	b.n	425232 <__sfvwrite_r+0x152>
  4252d2:	6820      	ldr	r0, [r4, #0]
  4252d4:	46b8      	mov	r8, r7
  4252d6:	46ba      	mov	sl, r7
  4252d8:	46bb      	mov	fp, r7
  4252da:	e755      	b.n	425188 <__sfvwrite_r+0xa8>
  4252dc:	6962      	ldr	r2, [r4, #20]
  4252de:	6820      	ldr	r0, [r4, #0]
  4252e0:	6921      	ldr	r1, [r4, #16]
  4252e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4252e6:	eba0 0a01 	sub.w	sl, r0, r1
  4252ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4252ee:	f10a 0001 	add.w	r0, sl, #1
  4252f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4252f6:	4438      	add	r0, r7
  4252f8:	4540      	cmp	r0, r8
  4252fa:	4642      	mov	r2, r8
  4252fc:	bf84      	itt	hi
  4252fe:	4680      	movhi	r8, r0
  425300:	4642      	movhi	r2, r8
  425302:	055b      	lsls	r3, r3, #21
  425304:	d544      	bpl.n	425390 <__sfvwrite_r+0x2b0>
  425306:	4611      	mov	r1, r2
  425308:	9800      	ldr	r0, [sp, #0]
  42530a:	f7fd fd7f 	bl	422e0c <_malloc_r>
  42530e:	4683      	mov	fp, r0
  425310:	2800      	cmp	r0, #0
  425312:	d055      	beq.n	4253c0 <__sfvwrite_r+0x2e0>
  425314:	4652      	mov	r2, sl
  425316:	6921      	ldr	r1, [r4, #16]
  425318:	f7fe f858 	bl	4233cc <memcpy>
  42531c:	89a3      	ldrh	r3, [r4, #12]
  42531e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  425322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  425326:	81a3      	strh	r3, [r4, #12]
  425328:	eb0b 000a 	add.w	r0, fp, sl
  42532c:	eba8 030a 	sub.w	r3, r8, sl
  425330:	f8c4 b010 	str.w	fp, [r4, #16]
  425334:	f8c4 8014 	str.w	r8, [r4, #20]
  425338:	6020      	str	r0, [r4, #0]
  42533a:	60a3      	str	r3, [r4, #8]
  42533c:	46b8      	mov	r8, r7
  42533e:	46ba      	mov	sl, r7
  425340:	46bb      	mov	fp, r7
  425342:	e721      	b.n	425188 <__sfvwrite_r+0xa8>
  425344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  425348:	42b9      	cmp	r1, r7
  42534a:	bf28      	it	cs
  42534c:	4639      	movcs	r1, r7
  42534e:	464a      	mov	r2, r9
  425350:	fb91 f1f3 	sdiv	r1, r1, r3
  425354:	9800      	ldr	r0, [sp, #0]
  425356:	6a66      	ldr	r6, [r4, #36]	; 0x24
  425358:	fb03 f301 	mul.w	r3, r3, r1
  42535c:	69e1      	ldr	r1, [r4, #28]
  42535e:	47b0      	blx	r6
  425360:	f1b0 0a00 	subs.w	sl, r0, #0
  425364:	f73f af1b 	bgt.w	42519e <__sfvwrite_r+0xbe>
  425368:	e738      	b.n	4251dc <__sfvwrite_r+0xfc>
  42536a:	461a      	mov	r2, r3
  42536c:	4629      	mov	r1, r5
  42536e:	9301      	str	r3, [sp, #4]
  425370:	f000 f94e 	bl	425610 <memmove>
  425374:	6822      	ldr	r2, [r4, #0]
  425376:	9b01      	ldr	r3, [sp, #4]
  425378:	9800      	ldr	r0, [sp, #0]
  42537a:	441a      	add	r2, r3
  42537c:	6022      	str	r2, [r4, #0]
  42537e:	4621      	mov	r1, r4
  425380:	f7ff fc4a 	bl	424c18 <_fflush_r>
  425384:	9b01      	ldr	r3, [sp, #4]
  425386:	2800      	cmp	r0, #0
  425388:	f47f af28 	bne.w	4251dc <__sfvwrite_r+0xfc>
  42538c:	461f      	mov	r7, r3
  42538e:	e750      	b.n	425232 <__sfvwrite_r+0x152>
  425390:	9800      	ldr	r0, [sp, #0]
  425392:	f000 f9a1 	bl	4256d8 <_realloc_r>
  425396:	4683      	mov	fp, r0
  425398:	2800      	cmp	r0, #0
  42539a:	d1c5      	bne.n	425328 <__sfvwrite_r+0x248>
  42539c:	9d00      	ldr	r5, [sp, #0]
  42539e:	6921      	ldr	r1, [r4, #16]
  4253a0:	4628      	mov	r0, r5
  4253a2:	f7ff fdb7 	bl	424f14 <_free_r>
  4253a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4253aa:	220c      	movs	r2, #12
  4253ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4253b0:	602a      	str	r2, [r5, #0]
  4253b2:	e715      	b.n	4251e0 <__sfvwrite_r+0x100>
  4253b4:	f106 0901 	add.w	r9, r6, #1
  4253b8:	e722      	b.n	425200 <__sfvwrite_r+0x120>
  4253ba:	f04f 30ff 	mov.w	r0, #4294967295
  4253be:	e6bf      	b.n	425140 <__sfvwrite_r+0x60>
  4253c0:	9a00      	ldr	r2, [sp, #0]
  4253c2:	230c      	movs	r3, #12
  4253c4:	6013      	str	r3, [r2, #0]
  4253c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4253ca:	e709      	b.n	4251e0 <__sfvwrite_r+0x100>
  4253cc:	7ffffc00 	.word	0x7ffffc00

004253d0 <_fwalk_reent>:
  4253d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4253d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4253d8:	d01f      	beq.n	42541a <_fwalk_reent+0x4a>
  4253da:	4688      	mov	r8, r1
  4253dc:	4606      	mov	r6, r0
  4253de:	f04f 0900 	mov.w	r9, #0
  4253e2:	687d      	ldr	r5, [r7, #4]
  4253e4:	68bc      	ldr	r4, [r7, #8]
  4253e6:	3d01      	subs	r5, #1
  4253e8:	d411      	bmi.n	42540e <_fwalk_reent+0x3e>
  4253ea:	89a3      	ldrh	r3, [r4, #12]
  4253ec:	2b01      	cmp	r3, #1
  4253ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4253f2:	d908      	bls.n	425406 <_fwalk_reent+0x36>
  4253f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4253f8:	3301      	adds	r3, #1
  4253fa:	4621      	mov	r1, r4
  4253fc:	4630      	mov	r0, r6
  4253fe:	d002      	beq.n	425406 <_fwalk_reent+0x36>
  425400:	47c0      	blx	r8
  425402:	ea49 0900 	orr.w	r9, r9, r0
  425406:	1c6b      	adds	r3, r5, #1
  425408:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42540c:	d1ed      	bne.n	4253ea <_fwalk_reent+0x1a>
  42540e:	683f      	ldr	r7, [r7, #0]
  425410:	2f00      	cmp	r7, #0
  425412:	d1e6      	bne.n	4253e2 <_fwalk_reent+0x12>
  425414:	4648      	mov	r0, r9
  425416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42541a:	46b9      	mov	r9, r7
  42541c:	4648      	mov	r0, r9
  42541e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  425422:	bf00      	nop

00425424 <__locale_mb_cur_max>:
  425424:	4b04      	ldr	r3, [pc, #16]	; (425438 <__locale_mb_cur_max+0x14>)
  425426:	4a05      	ldr	r2, [pc, #20]	; (42543c <__locale_mb_cur_max+0x18>)
  425428:	681b      	ldr	r3, [r3, #0]
  42542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42542c:	2b00      	cmp	r3, #0
  42542e:	bf08      	it	eq
  425430:	4613      	moveq	r3, r2
  425432:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  425436:	4770      	bx	lr
  425438:	20400070 	.word	0x20400070
  42543c:	204008b4 	.word	0x204008b4

00425440 <__retarget_lock_init_recursive>:
  425440:	4770      	bx	lr
  425442:	bf00      	nop

00425444 <__retarget_lock_close_recursive>:
  425444:	4770      	bx	lr
  425446:	bf00      	nop

00425448 <__retarget_lock_acquire_recursive>:
  425448:	4770      	bx	lr
  42544a:	bf00      	nop

0042544c <__retarget_lock_release_recursive>:
  42544c:	4770      	bx	lr
  42544e:	bf00      	nop

00425450 <__swhatbuf_r>:
  425450:	b570      	push	{r4, r5, r6, lr}
  425452:	460c      	mov	r4, r1
  425454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425458:	2900      	cmp	r1, #0
  42545a:	b090      	sub	sp, #64	; 0x40
  42545c:	4615      	mov	r5, r2
  42545e:	461e      	mov	r6, r3
  425460:	db14      	blt.n	42548c <__swhatbuf_r+0x3c>
  425462:	aa01      	add	r2, sp, #4
  425464:	f000 fc9e 	bl	425da4 <_fstat_r>
  425468:	2800      	cmp	r0, #0
  42546a:	db0f      	blt.n	42548c <__swhatbuf_r+0x3c>
  42546c:	9a02      	ldr	r2, [sp, #8]
  42546e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  425472:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  425476:	fab2 f282 	clz	r2, r2
  42547a:	0952      	lsrs	r2, r2, #5
  42547c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  425480:	f44f 6000 	mov.w	r0, #2048	; 0x800
  425484:	6032      	str	r2, [r6, #0]
  425486:	602b      	str	r3, [r5, #0]
  425488:	b010      	add	sp, #64	; 0x40
  42548a:	bd70      	pop	{r4, r5, r6, pc}
  42548c:	89a2      	ldrh	r2, [r4, #12]
  42548e:	2300      	movs	r3, #0
  425490:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  425494:	6033      	str	r3, [r6, #0]
  425496:	d004      	beq.n	4254a2 <__swhatbuf_r+0x52>
  425498:	2240      	movs	r2, #64	; 0x40
  42549a:	4618      	mov	r0, r3
  42549c:	602a      	str	r2, [r5, #0]
  42549e:	b010      	add	sp, #64	; 0x40
  4254a0:	bd70      	pop	{r4, r5, r6, pc}
  4254a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4254a6:	602b      	str	r3, [r5, #0]
  4254a8:	b010      	add	sp, #64	; 0x40
  4254aa:	bd70      	pop	{r4, r5, r6, pc}

004254ac <__smakebuf_r>:
  4254ac:	898a      	ldrh	r2, [r1, #12]
  4254ae:	0792      	lsls	r2, r2, #30
  4254b0:	460b      	mov	r3, r1
  4254b2:	d506      	bpl.n	4254c2 <__smakebuf_r+0x16>
  4254b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4254b8:	2101      	movs	r1, #1
  4254ba:	601a      	str	r2, [r3, #0]
  4254bc:	611a      	str	r2, [r3, #16]
  4254be:	6159      	str	r1, [r3, #20]
  4254c0:	4770      	bx	lr
  4254c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4254c4:	b083      	sub	sp, #12
  4254c6:	ab01      	add	r3, sp, #4
  4254c8:	466a      	mov	r2, sp
  4254ca:	460c      	mov	r4, r1
  4254cc:	4606      	mov	r6, r0
  4254ce:	f7ff ffbf 	bl	425450 <__swhatbuf_r>
  4254d2:	9900      	ldr	r1, [sp, #0]
  4254d4:	4605      	mov	r5, r0
  4254d6:	4630      	mov	r0, r6
  4254d8:	f7fd fc98 	bl	422e0c <_malloc_r>
  4254dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4254e0:	b1d8      	cbz	r0, 42551a <__smakebuf_r+0x6e>
  4254e2:	9a01      	ldr	r2, [sp, #4]
  4254e4:	4f15      	ldr	r7, [pc, #84]	; (42553c <__smakebuf_r+0x90>)
  4254e6:	9900      	ldr	r1, [sp, #0]
  4254e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4254ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4254ee:	81a3      	strh	r3, [r4, #12]
  4254f0:	6020      	str	r0, [r4, #0]
  4254f2:	6120      	str	r0, [r4, #16]
  4254f4:	6161      	str	r1, [r4, #20]
  4254f6:	b91a      	cbnz	r2, 425500 <__smakebuf_r+0x54>
  4254f8:	432b      	orrs	r3, r5
  4254fa:	81a3      	strh	r3, [r4, #12]
  4254fc:	b003      	add	sp, #12
  4254fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  425500:	4630      	mov	r0, r6
  425502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  425506:	f000 fc61 	bl	425dcc <_isatty_r>
  42550a:	b1a0      	cbz	r0, 425536 <__smakebuf_r+0x8a>
  42550c:	89a3      	ldrh	r3, [r4, #12]
  42550e:	f023 0303 	bic.w	r3, r3, #3
  425512:	f043 0301 	orr.w	r3, r3, #1
  425516:	b21b      	sxth	r3, r3
  425518:	e7ee      	b.n	4254f8 <__smakebuf_r+0x4c>
  42551a:	059a      	lsls	r2, r3, #22
  42551c:	d4ee      	bmi.n	4254fc <__smakebuf_r+0x50>
  42551e:	f023 0303 	bic.w	r3, r3, #3
  425522:	f104 0243 	add.w	r2, r4, #67	; 0x43
  425526:	f043 0302 	orr.w	r3, r3, #2
  42552a:	2101      	movs	r1, #1
  42552c:	81a3      	strh	r3, [r4, #12]
  42552e:	6022      	str	r2, [r4, #0]
  425530:	6122      	str	r2, [r4, #16]
  425532:	6161      	str	r1, [r4, #20]
  425534:	e7e2      	b.n	4254fc <__smakebuf_r+0x50>
  425536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42553a:	e7dd      	b.n	4254f8 <__smakebuf_r+0x4c>
  42553c:	00424c6d 	.word	0x00424c6d

00425540 <__ascii_mbtowc>:
  425540:	b082      	sub	sp, #8
  425542:	b149      	cbz	r1, 425558 <__ascii_mbtowc+0x18>
  425544:	b15a      	cbz	r2, 42555e <__ascii_mbtowc+0x1e>
  425546:	b16b      	cbz	r3, 425564 <__ascii_mbtowc+0x24>
  425548:	7813      	ldrb	r3, [r2, #0]
  42554a:	600b      	str	r3, [r1, #0]
  42554c:	7812      	ldrb	r2, [r2, #0]
  42554e:	1c10      	adds	r0, r2, #0
  425550:	bf18      	it	ne
  425552:	2001      	movne	r0, #1
  425554:	b002      	add	sp, #8
  425556:	4770      	bx	lr
  425558:	a901      	add	r1, sp, #4
  42555a:	2a00      	cmp	r2, #0
  42555c:	d1f3      	bne.n	425546 <__ascii_mbtowc+0x6>
  42555e:	4610      	mov	r0, r2
  425560:	b002      	add	sp, #8
  425562:	4770      	bx	lr
  425564:	f06f 0001 	mvn.w	r0, #1
  425568:	e7f4      	b.n	425554 <__ascii_mbtowc+0x14>
  42556a:	bf00      	nop
  42556c:	0000      	movs	r0, r0
	...

00425570 <memchr>:
  425570:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  425574:	2a10      	cmp	r2, #16
  425576:	db2b      	blt.n	4255d0 <memchr+0x60>
  425578:	f010 0f07 	tst.w	r0, #7
  42557c:	d008      	beq.n	425590 <memchr+0x20>
  42557e:	f810 3b01 	ldrb.w	r3, [r0], #1
  425582:	3a01      	subs	r2, #1
  425584:	428b      	cmp	r3, r1
  425586:	d02d      	beq.n	4255e4 <memchr+0x74>
  425588:	f010 0f07 	tst.w	r0, #7
  42558c:	b342      	cbz	r2, 4255e0 <memchr+0x70>
  42558e:	d1f6      	bne.n	42557e <memchr+0xe>
  425590:	b4f0      	push	{r4, r5, r6, r7}
  425592:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  425596:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  42559a:	f022 0407 	bic.w	r4, r2, #7
  42559e:	f07f 0700 	mvns.w	r7, #0
  4255a2:	2300      	movs	r3, #0
  4255a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4255a8:	3c08      	subs	r4, #8
  4255aa:	ea85 0501 	eor.w	r5, r5, r1
  4255ae:	ea86 0601 	eor.w	r6, r6, r1
  4255b2:	fa85 f547 	uadd8	r5, r5, r7
  4255b6:	faa3 f587 	sel	r5, r3, r7
  4255ba:	fa86 f647 	uadd8	r6, r6, r7
  4255be:	faa5 f687 	sel	r6, r5, r7
  4255c2:	b98e      	cbnz	r6, 4255e8 <memchr+0x78>
  4255c4:	d1ee      	bne.n	4255a4 <memchr+0x34>
  4255c6:	bcf0      	pop	{r4, r5, r6, r7}
  4255c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4255cc:	f002 0207 	and.w	r2, r2, #7
  4255d0:	b132      	cbz	r2, 4255e0 <memchr+0x70>
  4255d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4255d6:	3a01      	subs	r2, #1
  4255d8:	ea83 0301 	eor.w	r3, r3, r1
  4255dc:	b113      	cbz	r3, 4255e4 <memchr+0x74>
  4255de:	d1f8      	bne.n	4255d2 <memchr+0x62>
  4255e0:	2000      	movs	r0, #0
  4255e2:	4770      	bx	lr
  4255e4:	3801      	subs	r0, #1
  4255e6:	4770      	bx	lr
  4255e8:	2d00      	cmp	r5, #0
  4255ea:	bf06      	itte	eq
  4255ec:	4635      	moveq	r5, r6
  4255ee:	3803      	subeq	r0, #3
  4255f0:	3807      	subne	r0, #7
  4255f2:	f015 0f01 	tst.w	r5, #1
  4255f6:	d107      	bne.n	425608 <memchr+0x98>
  4255f8:	3001      	adds	r0, #1
  4255fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4255fe:	bf02      	ittt	eq
  425600:	3001      	addeq	r0, #1
  425602:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  425606:	3001      	addeq	r0, #1
  425608:	bcf0      	pop	{r4, r5, r6, r7}
  42560a:	3801      	subs	r0, #1
  42560c:	4770      	bx	lr
  42560e:	bf00      	nop

00425610 <memmove>:
  425610:	4288      	cmp	r0, r1
  425612:	b5f0      	push	{r4, r5, r6, r7, lr}
  425614:	d90d      	bls.n	425632 <memmove+0x22>
  425616:	188b      	adds	r3, r1, r2
  425618:	4298      	cmp	r0, r3
  42561a:	d20a      	bcs.n	425632 <memmove+0x22>
  42561c:	1884      	adds	r4, r0, r2
  42561e:	2a00      	cmp	r2, #0
  425620:	d051      	beq.n	4256c6 <memmove+0xb6>
  425622:	4622      	mov	r2, r4
  425624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  425628:	f802 4d01 	strb.w	r4, [r2, #-1]!
  42562c:	4299      	cmp	r1, r3
  42562e:	d1f9      	bne.n	425624 <memmove+0x14>
  425630:	bdf0      	pop	{r4, r5, r6, r7, pc}
  425632:	2a0f      	cmp	r2, #15
  425634:	d948      	bls.n	4256c8 <memmove+0xb8>
  425636:	ea41 0300 	orr.w	r3, r1, r0
  42563a:	079b      	lsls	r3, r3, #30
  42563c:	d146      	bne.n	4256cc <memmove+0xbc>
  42563e:	f100 0410 	add.w	r4, r0, #16
  425642:	f101 0310 	add.w	r3, r1, #16
  425646:	4615      	mov	r5, r2
  425648:	f853 6c10 	ldr.w	r6, [r3, #-16]
  42564c:	f844 6c10 	str.w	r6, [r4, #-16]
  425650:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  425654:	f844 6c0c 	str.w	r6, [r4, #-12]
  425658:	f853 6c08 	ldr.w	r6, [r3, #-8]
  42565c:	f844 6c08 	str.w	r6, [r4, #-8]
  425660:	3d10      	subs	r5, #16
  425662:	f853 6c04 	ldr.w	r6, [r3, #-4]
  425666:	f844 6c04 	str.w	r6, [r4, #-4]
  42566a:	2d0f      	cmp	r5, #15
  42566c:	f103 0310 	add.w	r3, r3, #16
  425670:	f104 0410 	add.w	r4, r4, #16
  425674:	d8e8      	bhi.n	425648 <memmove+0x38>
  425676:	f1a2 0310 	sub.w	r3, r2, #16
  42567a:	f023 030f 	bic.w	r3, r3, #15
  42567e:	f002 0e0f 	and.w	lr, r2, #15
  425682:	3310      	adds	r3, #16
  425684:	f1be 0f03 	cmp.w	lr, #3
  425688:	4419      	add	r1, r3
  42568a:	4403      	add	r3, r0
  42568c:	d921      	bls.n	4256d2 <memmove+0xc2>
  42568e:	1f1e      	subs	r6, r3, #4
  425690:	460d      	mov	r5, r1
  425692:	4674      	mov	r4, lr
  425694:	3c04      	subs	r4, #4
  425696:	f855 7b04 	ldr.w	r7, [r5], #4
  42569a:	f846 7f04 	str.w	r7, [r6, #4]!
  42569e:	2c03      	cmp	r4, #3
  4256a0:	d8f8      	bhi.n	425694 <memmove+0x84>
  4256a2:	f1ae 0404 	sub.w	r4, lr, #4
  4256a6:	f024 0403 	bic.w	r4, r4, #3
  4256aa:	3404      	adds	r4, #4
  4256ac:	4421      	add	r1, r4
  4256ae:	4423      	add	r3, r4
  4256b0:	f002 0203 	and.w	r2, r2, #3
  4256b4:	b162      	cbz	r2, 4256d0 <memmove+0xc0>
  4256b6:	3b01      	subs	r3, #1
  4256b8:	440a      	add	r2, r1
  4256ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4256be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4256c2:	428a      	cmp	r2, r1
  4256c4:	d1f9      	bne.n	4256ba <memmove+0xaa>
  4256c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4256c8:	4603      	mov	r3, r0
  4256ca:	e7f3      	b.n	4256b4 <memmove+0xa4>
  4256cc:	4603      	mov	r3, r0
  4256ce:	e7f2      	b.n	4256b6 <memmove+0xa6>
  4256d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4256d2:	4672      	mov	r2, lr
  4256d4:	e7ee      	b.n	4256b4 <memmove+0xa4>
  4256d6:	bf00      	nop

004256d8 <_realloc_r>:
  4256d8:	2900      	cmp	r1, #0
  4256da:	f000 8095 	beq.w	425808 <_realloc_r+0x130>
  4256de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4256e2:	460d      	mov	r5, r1
  4256e4:	4616      	mov	r6, r2
  4256e6:	b083      	sub	sp, #12
  4256e8:	4680      	mov	r8, r0
  4256ea:	f106 070b 	add.w	r7, r6, #11
  4256ee:	f7fd ff55 	bl	42359c <__malloc_lock>
  4256f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4256f6:	2f16      	cmp	r7, #22
  4256f8:	f02e 0403 	bic.w	r4, lr, #3
  4256fc:	f1a5 0908 	sub.w	r9, r5, #8
  425700:	d83c      	bhi.n	42577c <_realloc_r+0xa4>
  425702:	2210      	movs	r2, #16
  425704:	4617      	mov	r7, r2
  425706:	42be      	cmp	r6, r7
  425708:	d83d      	bhi.n	425786 <_realloc_r+0xae>
  42570a:	4294      	cmp	r4, r2
  42570c:	da43      	bge.n	425796 <_realloc_r+0xbe>
  42570e:	4bc4      	ldr	r3, [pc, #784]	; (425a20 <_realloc_r+0x348>)
  425710:	6899      	ldr	r1, [r3, #8]
  425712:	eb09 0004 	add.w	r0, r9, r4
  425716:	4288      	cmp	r0, r1
  425718:	f000 80b4 	beq.w	425884 <_realloc_r+0x1ac>
  42571c:	6843      	ldr	r3, [r0, #4]
  42571e:	f023 0101 	bic.w	r1, r3, #1
  425722:	4401      	add	r1, r0
  425724:	6849      	ldr	r1, [r1, #4]
  425726:	07c9      	lsls	r1, r1, #31
  425728:	d54c      	bpl.n	4257c4 <_realloc_r+0xec>
  42572a:	f01e 0f01 	tst.w	lr, #1
  42572e:	f000 809b 	beq.w	425868 <_realloc_r+0x190>
  425732:	4631      	mov	r1, r6
  425734:	4640      	mov	r0, r8
  425736:	f7fd fb69 	bl	422e0c <_malloc_r>
  42573a:	4606      	mov	r6, r0
  42573c:	2800      	cmp	r0, #0
  42573e:	d03a      	beq.n	4257b6 <_realloc_r+0xde>
  425740:	f855 3c04 	ldr.w	r3, [r5, #-4]
  425744:	f023 0301 	bic.w	r3, r3, #1
  425748:	444b      	add	r3, r9
  42574a:	f1a0 0208 	sub.w	r2, r0, #8
  42574e:	429a      	cmp	r2, r3
  425750:	f000 8121 	beq.w	425996 <_realloc_r+0x2be>
  425754:	1f22      	subs	r2, r4, #4
  425756:	2a24      	cmp	r2, #36	; 0x24
  425758:	f200 8107 	bhi.w	42596a <_realloc_r+0x292>
  42575c:	2a13      	cmp	r2, #19
  42575e:	f200 80db 	bhi.w	425918 <_realloc_r+0x240>
  425762:	4603      	mov	r3, r0
  425764:	462a      	mov	r2, r5
  425766:	6811      	ldr	r1, [r2, #0]
  425768:	6019      	str	r1, [r3, #0]
  42576a:	6851      	ldr	r1, [r2, #4]
  42576c:	6059      	str	r1, [r3, #4]
  42576e:	6892      	ldr	r2, [r2, #8]
  425770:	609a      	str	r2, [r3, #8]
  425772:	4629      	mov	r1, r5
  425774:	4640      	mov	r0, r8
  425776:	f7ff fbcd 	bl	424f14 <_free_r>
  42577a:	e01c      	b.n	4257b6 <_realloc_r+0xde>
  42577c:	f027 0707 	bic.w	r7, r7, #7
  425780:	2f00      	cmp	r7, #0
  425782:	463a      	mov	r2, r7
  425784:	dabf      	bge.n	425706 <_realloc_r+0x2e>
  425786:	2600      	movs	r6, #0
  425788:	230c      	movs	r3, #12
  42578a:	4630      	mov	r0, r6
  42578c:	f8c8 3000 	str.w	r3, [r8]
  425790:	b003      	add	sp, #12
  425792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  425796:	462e      	mov	r6, r5
  425798:	1be3      	subs	r3, r4, r7
  42579a:	2b0f      	cmp	r3, #15
  42579c:	d81e      	bhi.n	4257dc <_realloc_r+0x104>
  42579e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4257a2:	f003 0301 	and.w	r3, r3, #1
  4257a6:	4323      	orrs	r3, r4
  4257a8:	444c      	add	r4, r9
  4257aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4257ae:	6863      	ldr	r3, [r4, #4]
  4257b0:	f043 0301 	orr.w	r3, r3, #1
  4257b4:	6063      	str	r3, [r4, #4]
  4257b6:	4640      	mov	r0, r8
  4257b8:	f7fd fef6 	bl	4235a8 <__malloc_unlock>
  4257bc:	4630      	mov	r0, r6
  4257be:	b003      	add	sp, #12
  4257c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4257c4:	f023 0303 	bic.w	r3, r3, #3
  4257c8:	18e1      	adds	r1, r4, r3
  4257ca:	4291      	cmp	r1, r2
  4257cc:	db1f      	blt.n	42580e <_realloc_r+0x136>
  4257ce:	68c3      	ldr	r3, [r0, #12]
  4257d0:	6882      	ldr	r2, [r0, #8]
  4257d2:	462e      	mov	r6, r5
  4257d4:	60d3      	str	r3, [r2, #12]
  4257d6:	460c      	mov	r4, r1
  4257d8:	609a      	str	r2, [r3, #8]
  4257da:	e7dd      	b.n	425798 <_realloc_r+0xc0>
  4257dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4257e0:	eb09 0107 	add.w	r1, r9, r7
  4257e4:	f002 0201 	and.w	r2, r2, #1
  4257e8:	444c      	add	r4, r9
  4257ea:	f043 0301 	orr.w	r3, r3, #1
  4257ee:	4317      	orrs	r7, r2
  4257f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4257f4:	604b      	str	r3, [r1, #4]
  4257f6:	6863      	ldr	r3, [r4, #4]
  4257f8:	f043 0301 	orr.w	r3, r3, #1
  4257fc:	3108      	adds	r1, #8
  4257fe:	6063      	str	r3, [r4, #4]
  425800:	4640      	mov	r0, r8
  425802:	f7ff fb87 	bl	424f14 <_free_r>
  425806:	e7d6      	b.n	4257b6 <_realloc_r+0xde>
  425808:	4611      	mov	r1, r2
  42580a:	f7fd baff 	b.w	422e0c <_malloc_r>
  42580e:	f01e 0f01 	tst.w	lr, #1
  425812:	d18e      	bne.n	425732 <_realloc_r+0x5a>
  425814:	f855 1c08 	ldr.w	r1, [r5, #-8]
  425818:	eba9 0a01 	sub.w	sl, r9, r1
  42581c:	f8da 1004 	ldr.w	r1, [sl, #4]
  425820:	f021 0103 	bic.w	r1, r1, #3
  425824:	440b      	add	r3, r1
  425826:	4423      	add	r3, r4
  425828:	4293      	cmp	r3, r2
  42582a:	db25      	blt.n	425878 <_realloc_r+0x1a0>
  42582c:	68c2      	ldr	r2, [r0, #12]
  42582e:	6881      	ldr	r1, [r0, #8]
  425830:	4656      	mov	r6, sl
  425832:	60ca      	str	r2, [r1, #12]
  425834:	6091      	str	r1, [r2, #8]
  425836:	f8da 100c 	ldr.w	r1, [sl, #12]
  42583a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42583e:	1f22      	subs	r2, r4, #4
  425840:	2a24      	cmp	r2, #36	; 0x24
  425842:	60c1      	str	r1, [r0, #12]
  425844:	6088      	str	r0, [r1, #8]
  425846:	f200 8094 	bhi.w	425972 <_realloc_r+0x29a>
  42584a:	2a13      	cmp	r2, #19
  42584c:	d96f      	bls.n	42592e <_realloc_r+0x256>
  42584e:	6829      	ldr	r1, [r5, #0]
  425850:	f8ca 1008 	str.w	r1, [sl, #8]
  425854:	6869      	ldr	r1, [r5, #4]
  425856:	f8ca 100c 	str.w	r1, [sl, #12]
  42585a:	2a1b      	cmp	r2, #27
  42585c:	f200 80a2 	bhi.w	4259a4 <_realloc_r+0x2cc>
  425860:	3508      	adds	r5, #8
  425862:	f10a 0210 	add.w	r2, sl, #16
  425866:	e063      	b.n	425930 <_realloc_r+0x258>
  425868:	f855 3c08 	ldr.w	r3, [r5, #-8]
  42586c:	eba9 0a03 	sub.w	sl, r9, r3
  425870:	f8da 1004 	ldr.w	r1, [sl, #4]
  425874:	f021 0103 	bic.w	r1, r1, #3
  425878:	1863      	adds	r3, r4, r1
  42587a:	4293      	cmp	r3, r2
  42587c:	f6ff af59 	blt.w	425732 <_realloc_r+0x5a>
  425880:	4656      	mov	r6, sl
  425882:	e7d8      	b.n	425836 <_realloc_r+0x15e>
  425884:	6841      	ldr	r1, [r0, #4]
  425886:	f021 0b03 	bic.w	fp, r1, #3
  42588a:	44a3      	add	fp, r4
  42588c:	f107 0010 	add.w	r0, r7, #16
  425890:	4583      	cmp	fp, r0
  425892:	da56      	bge.n	425942 <_realloc_r+0x26a>
  425894:	f01e 0f01 	tst.w	lr, #1
  425898:	f47f af4b 	bne.w	425732 <_realloc_r+0x5a>
  42589c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4258a0:	eba9 0a01 	sub.w	sl, r9, r1
  4258a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4258a8:	f021 0103 	bic.w	r1, r1, #3
  4258ac:	448b      	add	fp, r1
  4258ae:	4558      	cmp	r0, fp
  4258b0:	dce2      	bgt.n	425878 <_realloc_r+0x1a0>
  4258b2:	4656      	mov	r6, sl
  4258b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4258b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4258bc:	1f22      	subs	r2, r4, #4
  4258be:	2a24      	cmp	r2, #36	; 0x24
  4258c0:	60c1      	str	r1, [r0, #12]
  4258c2:	6088      	str	r0, [r1, #8]
  4258c4:	f200 808f 	bhi.w	4259e6 <_realloc_r+0x30e>
  4258c8:	2a13      	cmp	r2, #19
  4258ca:	f240 808a 	bls.w	4259e2 <_realloc_r+0x30a>
  4258ce:	6829      	ldr	r1, [r5, #0]
  4258d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4258d4:	6869      	ldr	r1, [r5, #4]
  4258d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4258da:	2a1b      	cmp	r2, #27
  4258dc:	f200 808a 	bhi.w	4259f4 <_realloc_r+0x31c>
  4258e0:	3508      	adds	r5, #8
  4258e2:	f10a 0210 	add.w	r2, sl, #16
  4258e6:	6829      	ldr	r1, [r5, #0]
  4258e8:	6011      	str	r1, [r2, #0]
  4258ea:	6869      	ldr	r1, [r5, #4]
  4258ec:	6051      	str	r1, [r2, #4]
  4258ee:	68a9      	ldr	r1, [r5, #8]
  4258f0:	6091      	str	r1, [r2, #8]
  4258f2:	eb0a 0107 	add.w	r1, sl, r7
  4258f6:	ebab 0207 	sub.w	r2, fp, r7
  4258fa:	f042 0201 	orr.w	r2, r2, #1
  4258fe:	6099      	str	r1, [r3, #8]
  425900:	604a      	str	r2, [r1, #4]
  425902:	f8da 3004 	ldr.w	r3, [sl, #4]
  425906:	f003 0301 	and.w	r3, r3, #1
  42590a:	431f      	orrs	r7, r3
  42590c:	4640      	mov	r0, r8
  42590e:	f8ca 7004 	str.w	r7, [sl, #4]
  425912:	f7fd fe49 	bl	4235a8 <__malloc_unlock>
  425916:	e751      	b.n	4257bc <_realloc_r+0xe4>
  425918:	682b      	ldr	r3, [r5, #0]
  42591a:	6003      	str	r3, [r0, #0]
  42591c:	686b      	ldr	r3, [r5, #4]
  42591e:	6043      	str	r3, [r0, #4]
  425920:	2a1b      	cmp	r2, #27
  425922:	d82d      	bhi.n	425980 <_realloc_r+0x2a8>
  425924:	f100 0308 	add.w	r3, r0, #8
  425928:	f105 0208 	add.w	r2, r5, #8
  42592c:	e71b      	b.n	425766 <_realloc_r+0x8e>
  42592e:	4632      	mov	r2, r6
  425930:	6829      	ldr	r1, [r5, #0]
  425932:	6011      	str	r1, [r2, #0]
  425934:	6869      	ldr	r1, [r5, #4]
  425936:	6051      	str	r1, [r2, #4]
  425938:	68a9      	ldr	r1, [r5, #8]
  42593a:	6091      	str	r1, [r2, #8]
  42593c:	461c      	mov	r4, r3
  42593e:	46d1      	mov	r9, sl
  425940:	e72a      	b.n	425798 <_realloc_r+0xc0>
  425942:	eb09 0107 	add.w	r1, r9, r7
  425946:	ebab 0b07 	sub.w	fp, fp, r7
  42594a:	f04b 0201 	orr.w	r2, fp, #1
  42594e:	6099      	str	r1, [r3, #8]
  425950:	604a      	str	r2, [r1, #4]
  425952:	f855 3c04 	ldr.w	r3, [r5, #-4]
  425956:	f003 0301 	and.w	r3, r3, #1
  42595a:	431f      	orrs	r7, r3
  42595c:	4640      	mov	r0, r8
  42595e:	f845 7c04 	str.w	r7, [r5, #-4]
  425962:	f7fd fe21 	bl	4235a8 <__malloc_unlock>
  425966:	462e      	mov	r6, r5
  425968:	e728      	b.n	4257bc <_realloc_r+0xe4>
  42596a:	4629      	mov	r1, r5
  42596c:	f7ff fe50 	bl	425610 <memmove>
  425970:	e6ff      	b.n	425772 <_realloc_r+0x9a>
  425972:	4629      	mov	r1, r5
  425974:	4630      	mov	r0, r6
  425976:	461c      	mov	r4, r3
  425978:	46d1      	mov	r9, sl
  42597a:	f7ff fe49 	bl	425610 <memmove>
  42597e:	e70b      	b.n	425798 <_realloc_r+0xc0>
  425980:	68ab      	ldr	r3, [r5, #8]
  425982:	6083      	str	r3, [r0, #8]
  425984:	68eb      	ldr	r3, [r5, #12]
  425986:	60c3      	str	r3, [r0, #12]
  425988:	2a24      	cmp	r2, #36	; 0x24
  42598a:	d017      	beq.n	4259bc <_realloc_r+0x2e4>
  42598c:	f100 0310 	add.w	r3, r0, #16
  425990:	f105 0210 	add.w	r2, r5, #16
  425994:	e6e7      	b.n	425766 <_realloc_r+0x8e>
  425996:	f850 3c04 	ldr.w	r3, [r0, #-4]
  42599a:	f023 0303 	bic.w	r3, r3, #3
  42599e:	441c      	add	r4, r3
  4259a0:	462e      	mov	r6, r5
  4259a2:	e6f9      	b.n	425798 <_realloc_r+0xc0>
  4259a4:	68a9      	ldr	r1, [r5, #8]
  4259a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4259aa:	68e9      	ldr	r1, [r5, #12]
  4259ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4259b0:	2a24      	cmp	r2, #36	; 0x24
  4259b2:	d00c      	beq.n	4259ce <_realloc_r+0x2f6>
  4259b4:	3510      	adds	r5, #16
  4259b6:	f10a 0218 	add.w	r2, sl, #24
  4259ba:	e7b9      	b.n	425930 <_realloc_r+0x258>
  4259bc:	692b      	ldr	r3, [r5, #16]
  4259be:	6103      	str	r3, [r0, #16]
  4259c0:	696b      	ldr	r3, [r5, #20]
  4259c2:	6143      	str	r3, [r0, #20]
  4259c4:	f105 0218 	add.w	r2, r5, #24
  4259c8:	f100 0318 	add.w	r3, r0, #24
  4259cc:	e6cb      	b.n	425766 <_realloc_r+0x8e>
  4259ce:	692a      	ldr	r2, [r5, #16]
  4259d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4259d4:	696a      	ldr	r2, [r5, #20]
  4259d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4259da:	3518      	adds	r5, #24
  4259dc:	f10a 0220 	add.w	r2, sl, #32
  4259e0:	e7a6      	b.n	425930 <_realloc_r+0x258>
  4259e2:	4632      	mov	r2, r6
  4259e4:	e77f      	b.n	4258e6 <_realloc_r+0x20e>
  4259e6:	4629      	mov	r1, r5
  4259e8:	4630      	mov	r0, r6
  4259ea:	9301      	str	r3, [sp, #4]
  4259ec:	f7ff fe10 	bl	425610 <memmove>
  4259f0:	9b01      	ldr	r3, [sp, #4]
  4259f2:	e77e      	b.n	4258f2 <_realloc_r+0x21a>
  4259f4:	68a9      	ldr	r1, [r5, #8]
  4259f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4259fa:	68e9      	ldr	r1, [r5, #12]
  4259fc:	f8ca 1014 	str.w	r1, [sl, #20]
  425a00:	2a24      	cmp	r2, #36	; 0x24
  425a02:	d003      	beq.n	425a0c <_realloc_r+0x334>
  425a04:	3510      	adds	r5, #16
  425a06:	f10a 0218 	add.w	r2, sl, #24
  425a0a:	e76c      	b.n	4258e6 <_realloc_r+0x20e>
  425a0c:	692a      	ldr	r2, [r5, #16]
  425a0e:	f8ca 2018 	str.w	r2, [sl, #24]
  425a12:	696a      	ldr	r2, [r5, #20]
  425a14:	f8ca 201c 	str.w	r2, [sl, #28]
  425a18:	3518      	adds	r5, #24
  425a1a:	f10a 0220 	add.w	r2, sl, #32
  425a1e:	e762      	b.n	4258e6 <_realloc_r+0x20e>
  425a20:	204004a0 	.word	0x204004a0

00425a24 <__sread>:
  425a24:	b510      	push	{r4, lr}
  425a26:	460c      	mov	r4, r1
  425a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425a2c:	f000 f9f6 	bl	425e1c <_read_r>
  425a30:	2800      	cmp	r0, #0
  425a32:	db03      	blt.n	425a3c <__sread+0x18>
  425a34:	6d23      	ldr	r3, [r4, #80]	; 0x50
  425a36:	4403      	add	r3, r0
  425a38:	6523      	str	r3, [r4, #80]	; 0x50
  425a3a:	bd10      	pop	{r4, pc}
  425a3c:	89a3      	ldrh	r3, [r4, #12]
  425a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  425a42:	81a3      	strh	r3, [r4, #12]
  425a44:	bd10      	pop	{r4, pc}
  425a46:	bf00      	nop

00425a48 <__swrite>:
  425a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  425a4c:	4616      	mov	r6, r2
  425a4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  425a52:	461f      	mov	r7, r3
  425a54:	05d3      	lsls	r3, r2, #23
  425a56:	460c      	mov	r4, r1
  425a58:	4605      	mov	r5, r0
  425a5a:	d507      	bpl.n	425a6c <__swrite+0x24>
  425a5c:	2200      	movs	r2, #0
  425a5e:	2302      	movs	r3, #2
  425a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425a64:	f000 f9c4 	bl	425df0 <_lseek_r>
  425a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  425a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  425a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  425a74:	81a2      	strh	r2, [r4, #12]
  425a76:	463b      	mov	r3, r7
  425a78:	4632      	mov	r2, r6
  425a7a:	4628      	mov	r0, r5
  425a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  425a80:	f000 b8a4 	b.w	425bcc <_write_r>

00425a84 <__sseek>:
  425a84:	b510      	push	{r4, lr}
  425a86:	460c      	mov	r4, r1
  425a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425a8c:	f000 f9b0 	bl	425df0 <_lseek_r>
  425a90:	89a3      	ldrh	r3, [r4, #12]
  425a92:	1c42      	adds	r2, r0, #1
  425a94:	bf0e      	itee	eq
  425a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  425a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  425a9e:	6520      	strne	r0, [r4, #80]	; 0x50
  425aa0:	81a3      	strh	r3, [r4, #12]
  425aa2:	bd10      	pop	{r4, pc}

00425aa4 <__sclose>:
  425aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  425aa8:	f000 b908 	b.w	425cbc <_close_r>

00425aac <__swbuf_r>:
  425aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  425aae:	460d      	mov	r5, r1
  425ab0:	4614      	mov	r4, r2
  425ab2:	4606      	mov	r6, r0
  425ab4:	b110      	cbz	r0, 425abc <__swbuf_r+0x10>
  425ab6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  425ab8:	2b00      	cmp	r3, #0
  425aba:	d04b      	beq.n	425b54 <__swbuf_r+0xa8>
  425abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  425ac0:	69a3      	ldr	r3, [r4, #24]
  425ac2:	60a3      	str	r3, [r4, #8]
  425ac4:	b291      	uxth	r1, r2
  425ac6:	0708      	lsls	r0, r1, #28
  425ac8:	d539      	bpl.n	425b3e <__swbuf_r+0x92>
  425aca:	6923      	ldr	r3, [r4, #16]
  425acc:	2b00      	cmp	r3, #0
  425ace:	d036      	beq.n	425b3e <__swbuf_r+0x92>
  425ad0:	b2ed      	uxtb	r5, r5
  425ad2:	0489      	lsls	r1, r1, #18
  425ad4:	462f      	mov	r7, r5
  425ad6:	d515      	bpl.n	425b04 <__swbuf_r+0x58>
  425ad8:	6822      	ldr	r2, [r4, #0]
  425ada:	6961      	ldr	r1, [r4, #20]
  425adc:	1ad3      	subs	r3, r2, r3
  425ade:	428b      	cmp	r3, r1
  425ae0:	da1c      	bge.n	425b1c <__swbuf_r+0x70>
  425ae2:	3301      	adds	r3, #1
  425ae4:	68a1      	ldr	r1, [r4, #8]
  425ae6:	1c50      	adds	r0, r2, #1
  425ae8:	3901      	subs	r1, #1
  425aea:	60a1      	str	r1, [r4, #8]
  425aec:	6020      	str	r0, [r4, #0]
  425aee:	7015      	strb	r5, [r2, #0]
  425af0:	6962      	ldr	r2, [r4, #20]
  425af2:	429a      	cmp	r2, r3
  425af4:	d01a      	beq.n	425b2c <__swbuf_r+0x80>
  425af6:	89a3      	ldrh	r3, [r4, #12]
  425af8:	07db      	lsls	r3, r3, #31
  425afa:	d501      	bpl.n	425b00 <__swbuf_r+0x54>
  425afc:	2d0a      	cmp	r5, #10
  425afe:	d015      	beq.n	425b2c <__swbuf_r+0x80>
  425b00:	4638      	mov	r0, r7
  425b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  425b04:	6e61      	ldr	r1, [r4, #100]	; 0x64
  425b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  425b0a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  425b0e:	81a2      	strh	r2, [r4, #12]
  425b10:	6822      	ldr	r2, [r4, #0]
  425b12:	6661      	str	r1, [r4, #100]	; 0x64
  425b14:	6961      	ldr	r1, [r4, #20]
  425b16:	1ad3      	subs	r3, r2, r3
  425b18:	428b      	cmp	r3, r1
  425b1a:	dbe2      	blt.n	425ae2 <__swbuf_r+0x36>
  425b1c:	4621      	mov	r1, r4
  425b1e:	4630      	mov	r0, r6
  425b20:	f7ff f87a 	bl	424c18 <_fflush_r>
  425b24:	b940      	cbnz	r0, 425b38 <__swbuf_r+0x8c>
  425b26:	6822      	ldr	r2, [r4, #0]
  425b28:	2301      	movs	r3, #1
  425b2a:	e7db      	b.n	425ae4 <__swbuf_r+0x38>
  425b2c:	4621      	mov	r1, r4
  425b2e:	4630      	mov	r0, r6
  425b30:	f7ff f872 	bl	424c18 <_fflush_r>
  425b34:	2800      	cmp	r0, #0
  425b36:	d0e3      	beq.n	425b00 <__swbuf_r+0x54>
  425b38:	f04f 37ff 	mov.w	r7, #4294967295
  425b3c:	e7e0      	b.n	425b00 <__swbuf_r+0x54>
  425b3e:	4621      	mov	r1, r4
  425b40:	4630      	mov	r0, r6
  425b42:	f7fe ff55 	bl	4249f0 <__swsetup_r>
  425b46:	2800      	cmp	r0, #0
  425b48:	d1f6      	bne.n	425b38 <__swbuf_r+0x8c>
  425b4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  425b4e:	6923      	ldr	r3, [r4, #16]
  425b50:	b291      	uxth	r1, r2
  425b52:	e7bd      	b.n	425ad0 <__swbuf_r+0x24>
  425b54:	f7ff f8b8 	bl	424cc8 <__sinit>
  425b58:	e7b0      	b.n	425abc <__swbuf_r+0x10>
  425b5a:	bf00      	nop

00425b5c <_wcrtomb_r>:
  425b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  425b5e:	4606      	mov	r6, r0
  425b60:	b085      	sub	sp, #20
  425b62:	461f      	mov	r7, r3
  425b64:	b189      	cbz	r1, 425b8a <_wcrtomb_r+0x2e>
  425b66:	4c10      	ldr	r4, [pc, #64]	; (425ba8 <_wcrtomb_r+0x4c>)
  425b68:	4d10      	ldr	r5, [pc, #64]	; (425bac <_wcrtomb_r+0x50>)
  425b6a:	6824      	ldr	r4, [r4, #0]
  425b6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  425b6e:	2c00      	cmp	r4, #0
  425b70:	bf08      	it	eq
  425b72:	462c      	moveq	r4, r5
  425b74:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  425b78:	47a0      	blx	r4
  425b7a:	1c43      	adds	r3, r0, #1
  425b7c:	d103      	bne.n	425b86 <_wcrtomb_r+0x2a>
  425b7e:	2200      	movs	r2, #0
  425b80:	238a      	movs	r3, #138	; 0x8a
  425b82:	603a      	str	r2, [r7, #0]
  425b84:	6033      	str	r3, [r6, #0]
  425b86:	b005      	add	sp, #20
  425b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  425b8a:	460c      	mov	r4, r1
  425b8c:	4906      	ldr	r1, [pc, #24]	; (425ba8 <_wcrtomb_r+0x4c>)
  425b8e:	4a07      	ldr	r2, [pc, #28]	; (425bac <_wcrtomb_r+0x50>)
  425b90:	6809      	ldr	r1, [r1, #0]
  425b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
  425b94:	2900      	cmp	r1, #0
  425b96:	bf08      	it	eq
  425b98:	4611      	moveq	r1, r2
  425b9a:	4622      	mov	r2, r4
  425b9c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  425ba0:	a901      	add	r1, sp, #4
  425ba2:	47a0      	blx	r4
  425ba4:	e7e9      	b.n	425b7a <_wcrtomb_r+0x1e>
  425ba6:	bf00      	nop
  425ba8:	20400070 	.word	0x20400070
  425bac:	204008b4 	.word	0x204008b4

00425bb0 <__ascii_wctomb>:
  425bb0:	b121      	cbz	r1, 425bbc <__ascii_wctomb+0xc>
  425bb2:	2aff      	cmp	r2, #255	; 0xff
  425bb4:	d804      	bhi.n	425bc0 <__ascii_wctomb+0x10>
  425bb6:	700a      	strb	r2, [r1, #0]
  425bb8:	2001      	movs	r0, #1
  425bba:	4770      	bx	lr
  425bbc:	4608      	mov	r0, r1
  425bbe:	4770      	bx	lr
  425bc0:	238a      	movs	r3, #138	; 0x8a
  425bc2:	6003      	str	r3, [r0, #0]
  425bc4:	f04f 30ff 	mov.w	r0, #4294967295
  425bc8:	4770      	bx	lr
  425bca:	bf00      	nop

00425bcc <_write_r>:
  425bcc:	b570      	push	{r4, r5, r6, lr}
  425bce:	460d      	mov	r5, r1
  425bd0:	4c08      	ldr	r4, [pc, #32]	; (425bf4 <_write_r+0x28>)
  425bd2:	4611      	mov	r1, r2
  425bd4:	4606      	mov	r6, r0
  425bd6:	461a      	mov	r2, r3
  425bd8:	4628      	mov	r0, r5
  425bda:	2300      	movs	r3, #0
  425bdc:	6023      	str	r3, [r4, #0]
  425bde:	f7fa ff61 	bl	420aa4 <_write>
  425be2:	1c43      	adds	r3, r0, #1
  425be4:	d000      	beq.n	425be8 <_write_r+0x1c>
  425be6:	bd70      	pop	{r4, r5, r6, pc}
  425be8:	6823      	ldr	r3, [r4, #0]
  425bea:	2b00      	cmp	r3, #0
  425bec:	d0fb      	beq.n	425be6 <_write_r+0x1a>
  425bee:	6033      	str	r3, [r6, #0]
  425bf0:	bd70      	pop	{r4, r5, r6, pc}
  425bf2:	bf00      	nop
  425bf4:	2043a368 	.word	0x2043a368

00425bf8 <__register_exitproc>:
  425bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  425bfc:	4d2c      	ldr	r5, [pc, #176]	; (425cb0 <__register_exitproc+0xb8>)
  425bfe:	4606      	mov	r6, r0
  425c00:	6828      	ldr	r0, [r5, #0]
  425c02:	4698      	mov	r8, r3
  425c04:	460f      	mov	r7, r1
  425c06:	4691      	mov	r9, r2
  425c08:	f7ff fc1e 	bl	425448 <__retarget_lock_acquire_recursive>
  425c0c:	4b29      	ldr	r3, [pc, #164]	; (425cb4 <__register_exitproc+0xbc>)
  425c0e:	681c      	ldr	r4, [r3, #0]
  425c10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  425c14:	2b00      	cmp	r3, #0
  425c16:	d03e      	beq.n	425c96 <__register_exitproc+0x9e>
  425c18:	685a      	ldr	r2, [r3, #4]
  425c1a:	2a1f      	cmp	r2, #31
  425c1c:	dc1c      	bgt.n	425c58 <__register_exitproc+0x60>
  425c1e:	f102 0e01 	add.w	lr, r2, #1
  425c22:	b176      	cbz	r6, 425c42 <__register_exitproc+0x4a>
  425c24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  425c28:	2401      	movs	r4, #1
  425c2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  425c2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  425c32:	4094      	lsls	r4, r2
  425c34:	4320      	orrs	r0, r4
  425c36:	2e02      	cmp	r6, #2
  425c38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  425c3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  425c40:	d023      	beq.n	425c8a <__register_exitproc+0x92>
  425c42:	3202      	adds	r2, #2
  425c44:	f8c3 e004 	str.w	lr, [r3, #4]
  425c48:	6828      	ldr	r0, [r5, #0]
  425c4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  425c4e:	f7ff fbfd 	bl	42544c <__retarget_lock_release_recursive>
  425c52:	2000      	movs	r0, #0
  425c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  425c58:	4b17      	ldr	r3, [pc, #92]	; (425cb8 <__register_exitproc+0xc0>)
  425c5a:	b30b      	cbz	r3, 425ca0 <__register_exitproc+0xa8>
  425c5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  425c60:	f7fd f8cc 	bl	422dfc <malloc>
  425c64:	4603      	mov	r3, r0
  425c66:	b1d8      	cbz	r0, 425ca0 <__register_exitproc+0xa8>
  425c68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  425c6c:	6002      	str	r2, [r0, #0]
  425c6e:	2100      	movs	r1, #0
  425c70:	6041      	str	r1, [r0, #4]
  425c72:	460a      	mov	r2, r1
  425c74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  425c78:	f04f 0e01 	mov.w	lr, #1
  425c7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  425c80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  425c84:	2e00      	cmp	r6, #0
  425c86:	d0dc      	beq.n	425c42 <__register_exitproc+0x4a>
  425c88:	e7cc      	b.n	425c24 <__register_exitproc+0x2c>
  425c8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  425c8e:	430c      	orrs	r4, r1
  425c90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  425c94:	e7d5      	b.n	425c42 <__register_exitproc+0x4a>
  425c96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  425c9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  425c9e:	e7bb      	b.n	425c18 <__register_exitproc+0x20>
  425ca0:	6828      	ldr	r0, [r5, #0]
  425ca2:	f7ff fbd3 	bl	42544c <__retarget_lock_release_recursive>
  425ca6:	f04f 30ff 	mov.w	r0, #4294967295
  425caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  425cae:	bf00      	nop
  425cb0:	204008b0 	.word	0x204008b0
  425cb4:	0042e3e0 	.word	0x0042e3e0
  425cb8:	00422dfd 	.word	0x00422dfd

00425cbc <_close_r>:
  425cbc:	b538      	push	{r3, r4, r5, lr}
  425cbe:	4c07      	ldr	r4, [pc, #28]	; (425cdc <_close_r+0x20>)
  425cc0:	2300      	movs	r3, #0
  425cc2:	4605      	mov	r5, r0
  425cc4:	4608      	mov	r0, r1
  425cc6:	6023      	str	r3, [r4, #0]
  425cc8:	f7fb fd92 	bl	4217f0 <_close>
  425ccc:	1c43      	adds	r3, r0, #1
  425cce:	d000      	beq.n	425cd2 <_close_r+0x16>
  425cd0:	bd38      	pop	{r3, r4, r5, pc}
  425cd2:	6823      	ldr	r3, [r4, #0]
  425cd4:	2b00      	cmp	r3, #0
  425cd6:	d0fb      	beq.n	425cd0 <_close_r+0x14>
  425cd8:	602b      	str	r3, [r5, #0]
  425cda:	bd38      	pop	{r3, r4, r5, pc}
  425cdc:	2043a368 	.word	0x2043a368

00425ce0 <_fclose_r>:
  425ce0:	b570      	push	{r4, r5, r6, lr}
  425ce2:	b159      	cbz	r1, 425cfc <_fclose_r+0x1c>
  425ce4:	4605      	mov	r5, r0
  425ce6:	460c      	mov	r4, r1
  425ce8:	b110      	cbz	r0, 425cf0 <_fclose_r+0x10>
  425cea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  425cec:	2b00      	cmp	r3, #0
  425cee:	d03c      	beq.n	425d6a <_fclose_r+0x8a>
  425cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  425cf2:	07d8      	lsls	r0, r3, #31
  425cf4:	d505      	bpl.n	425d02 <_fclose_r+0x22>
  425cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  425cfa:	b92b      	cbnz	r3, 425d08 <_fclose_r+0x28>
  425cfc:	2600      	movs	r6, #0
  425cfe:	4630      	mov	r0, r6
  425d00:	bd70      	pop	{r4, r5, r6, pc}
  425d02:	89a3      	ldrh	r3, [r4, #12]
  425d04:	0599      	lsls	r1, r3, #22
  425d06:	d53c      	bpl.n	425d82 <_fclose_r+0xa2>
  425d08:	4621      	mov	r1, r4
  425d0a:	4628      	mov	r0, r5
  425d0c:	f7fe fee4 	bl	424ad8 <__sflush_r>
  425d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  425d12:	4606      	mov	r6, r0
  425d14:	b133      	cbz	r3, 425d24 <_fclose_r+0x44>
  425d16:	69e1      	ldr	r1, [r4, #28]
  425d18:	4628      	mov	r0, r5
  425d1a:	4798      	blx	r3
  425d1c:	2800      	cmp	r0, #0
  425d1e:	bfb8      	it	lt
  425d20:	f04f 36ff 	movlt.w	r6, #4294967295
  425d24:	89a3      	ldrh	r3, [r4, #12]
  425d26:	061a      	lsls	r2, r3, #24
  425d28:	d422      	bmi.n	425d70 <_fclose_r+0x90>
  425d2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  425d2c:	b141      	cbz	r1, 425d40 <_fclose_r+0x60>
  425d2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  425d32:	4299      	cmp	r1, r3
  425d34:	d002      	beq.n	425d3c <_fclose_r+0x5c>
  425d36:	4628      	mov	r0, r5
  425d38:	f7ff f8ec 	bl	424f14 <_free_r>
  425d3c:	2300      	movs	r3, #0
  425d3e:	6323      	str	r3, [r4, #48]	; 0x30
  425d40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  425d42:	b121      	cbz	r1, 425d4e <_fclose_r+0x6e>
  425d44:	4628      	mov	r0, r5
  425d46:	f7ff f8e5 	bl	424f14 <_free_r>
  425d4a:	2300      	movs	r3, #0
  425d4c:	6463      	str	r3, [r4, #68]	; 0x44
  425d4e:	f7fe ffe7 	bl	424d20 <__sfp_lock_acquire>
  425d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
  425d54:	2200      	movs	r2, #0
  425d56:	07db      	lsls	r3, r3, #31
  425d58:	81a2      	strh	r2, [r4, #12]
  425d5a:	d50e      	bpl.n	425d7a <_fclose_r+0x9a>
  425d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  425d5e:	f7ff fb71 	bl	425444 <__retarget_lock_close_recursive>
  425d62:	f7fe ffe3 	bl	424d2c <__sfp_lock_release>
  425d66:	4630      	mov	r0, r6
  425d68:	bd70      	pop	{r4, r5, r6, pc}
  425d6a:	f7fe ffad 	bl	424cc8 <__sinit>
  425d6e:	e7bf      	b.n	425cf0 <_fclose_r+0x10>
  425d70:	6921      	ldr	r1, [r4, #16]
  425d72:	4628      	mov	r0, r5
  425d74:	f7ff f8ce 	bl	424f14 <_free_r>
  425d78:	e7d7      	b.n	425d2a <_fclose_r+0x4a>
  425d7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  425d7c:	f7ff fb66 	bl	42544c <__retarget_lock_release_recursive>
  425d80:	e7ec      	b.n	425d5c <_fclose_r+0x7c>
  425d82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  425d84:	f7ff fb60 	bl	425448 <__retarget_lock_acquire_recursive>
  425d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  425d8c:	2b00      	cmp	r3, #0
  425d8e:	d1bb      	bne.n	425d08 <_fclose_r+0x28>
  425d90:	6e66      	ldr	r6, [r4, #100]	; 0x64
  425d92:	f016 0601 	ands.w	r6, r6, #1
  425d96:	d1b1      	bne.n	425cfc <_fclose_r+0x1c>
  425d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  425d9a:	f7ff fb57 	bl	42544c <__retarget_lock_release_recursive>
  425d9e:	4630      	mov	r0, r6
  425da0:	bd70      	pop	{r4, r5, r6, pc}
  425da2:	bf00      	nop

00425da4 <_fstat_r>:
  425da4:	b538      	push	{r3, r4, r5, lr}
  425da6:	460b      	mov	r3, r1
  425da8:	4c07      	ldr	r4, [pc, #28]	; (425dc8 <_fstat_r+0x24>)
  425daa:	4605      	mov	r5, r0
  425dac:	4611      	mov	r1, r2
  425dae:	4618      	mov	r0, r3
  425db0:	2300      	movs	r3, #0
  425db2:	6023      	str	r3, [r4, #0]
  425db4:	f7fb fd1f 	bl	4217f6 <_fstat>
  425db8:	1c43      	adds	r3, r0, #1
  425dba:	d000      	beq.n	425dbe <_fstat_r+0x1a>
  425dbc:	bd38      	pop	{r3, r4, r5, pc}
  425dbe:	6823      	ldr	r3, [r4, #0]
  425dc0:	2b00      	cmp	r3, #0
  425dc2:	d0fb      	beq.n	425dbc <_fstat_r+0x18>
  425dc4:	602b      	str	r3, [r5, #0]
  425dc6:	bd38      	pop	{r3, r4, r5, pc}
  425dc8:	2043a368 	.word	0x2043a368

00425dcc <_isatty_r>:
  425dcc:	b538      	push	{r3, r4, r5, lr}
  425dce:	4c07      	ldr	r4, [pc, #28]	; (425dec <_isatty_r+0x20>)
  425dd0:	2300      	movs	r3, #0
  425dd2:	4605      	mov	r5, r0
  425dd4:	4608      	mov	r0, r1
  425dd6:	6023      	str	r3, [r4, #0]
  425dd8:	f7fb fd12 	bl	421800 <_isatty>
  425ddc:	1c43      	adds	r3, r0, #1
  425dde:	d000      	beq.n	425de2 <_isatty_r+0x16>
  425de0:	bd38      	pop	{r3, r4, r5, pc}
  425de2:	6823      	ldr	r3, [r4, #0]
  425de4:	2b00      	cmp	r3, #0
  425de6:	d0fb      	beq.n	425de0 <_isatty_r+0x14>
  425de8:	602b      	str	r3, [r5, #0]
  425dea:	bd38      	pop	{r3, r4, r5, pc}
  425dec:	2043a368 	.word	0x2043a368

00425df0 <_lseek_r>:
  425df0:	b570      	push	{r4, r5, r6, lr}
  425df2:	460d      	mov	r5, r1
  425df4:	4c08      	ldr	r4, [pc, #32]	; (425e18 <_lseek_r+0x28>)
  425df6:	4611      	mov	r1, r2
  425df8:	4606      	mov	r6, r0
  425dfa:	461a      	mov	r2, r3
  425dfc:	4628      	mov	r0, r5
  425dfe:	2300      	movs	r3, #0
  425e00:	6023      	str	r3, [r4, #0]
  425e02:	f7fb fcff 	bl	421804 <_lseek>
  425e06:	1c43      	adds	r3, r0, #1
  425e08:	d000      	beq.n	425e0c <_lseek_r+0x1c>
  425e0a:	bd70      	pop	{r4, r5, r6, pc}
  425e0c:	6823      	ldr	r3, [r4, #0]
  425e0e:	2b00      	cmp	r3, #0
  425e10:	d0fb      	beq.n	425e0a <_lseek_r+0x1a>
  425e12:	6033      	str	r3, [r6, #0]
  425e14:	bd70      	pop	{r4, r5, r6, pc}
  425e16:	bf00      	nop
  425e18:	2043a368 	.word	0x2043a368

00425e1c <_read_r>:
  425e1c:	b570      	push	{r4, r5, r6, lr}
  425e1e:	460d      	mov	r5, r1
  425e20:	4c08      	ldr	r4, [pc, #32]	; (425e44 <_read_r+0x28>)
  425e22:	4611      	mov	r1, r2
  425e24:	4606      	mov	r6, r0
  425e26:	461a      	mov	r2, r3
  425e28:	4628      	mov	r0, r5
  425e2a:	2300      	movs	r3, #0
  425e2c:	6023      	str	r3, [r4, #0]
  425e2e:	f7fa fe1f 	bl	420a70 <_read>
  425e32:	1c43      	adds	r3, r0, #1
  425e34:	d000      	beq.n	425e38 <_read_r+0x1c>
  425e36:	bd70      	pop	{r4, r5, r6, pc}
  425e38:	6823      	ldr	r3, [r4, #0]
  425e3a:	2b00      	cmp	r3, #0
  425e3c:	d0fb      	beq.n	425e36 <_read_r+0x1a>
  425e3e:	6033      	str	r3, [r6, #0]
  425e40:	bd70      	pop	{r4, r5, r6, pc}
  425e42:	bf00      	nop
  425e44:	2043a368 	.word	0x2043a368
  425e48:	00474345 	.word	0x00474345

00425e4c <health>:
  425e4c:	03e1d004 00001c18 00425e58              ........X^B.

00425e58 <health_map>:
  425e58:	ffffffff ffffffff ffffffff ffffffff     ................
  425e68:	ffffffff ffffffff ffffffff ffffffff     ................
  425e78:	ffffffff ffffffff ffffffff ffffffff     ................
  425e88:	ffffffff ffffffff ffffffff ffffffff     ................
  425e98:	ffffffff ffffffff ffffffff ffffffff     ................
  425ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  425eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  425f08:	ffffffff ffffffff ffffffff ffffffff     ................
  425f18:	ffffffff ffffffff ffffffff ffffffff     ................
  425f28:	ffffffff ffffffff ffffffff ffffffff     ................
  425f38:	ffffffff ffffffff ffffffff ffffffff     ................
  425f48:	ffffffff ffffffff ffffffff ffffffff     ................
  425f58:	ffffffff ffffffff ffffffff ffffffff     ................
  425f68:	ffffffff ffffffff ffffffff ffffffff     ................
  425f78:	ffffffff ffffffff ffffffff ffffffff     ................
  425f88:	ffffffff ffffffff ffffffff ffffffff     ................
  425f98:	ffffffff ffffffff ffffffff ffffffff     ................
  425fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  426008:	ffffffff ffffffff ffffffff ffffffff     ................
  426018:	ffffffff ffffffff ffffffff ffffffff     ................
  426028:	ffffffff ffffffff ffffffff ffffffff     ................
  426038:	ffffffff ffffffff ffffffff ffffffff     ................
  426048:	ffffffff ffffffff ffffffff ffffffff     ................
  426058:	ffffffff ffffffff ffffffff ffffffff     ................
  426068:	ffffffff ffffffff ffffffff ffffffff     ................
  426078:	ffffffff ffffffff ffffffff ffffffff     ................
  426088:	ffffffff ffffffff ffffffff ffffffff     ................
  426098:	ffffffff ffffffff ffffffff ffffffff     ................
  4260a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4260b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4260c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4260d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4260e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4260f8:	ffffffff dfffffff ffffdfff ffffffff     ................
  426108:	ffffffff ffffffff dbe6ffff ffffdbe6     ................
  426118:	ffffffff dbe6dbe6 dbe6dbe6 ffffffff     ................
  426128:	dbe6ffff dbe6dbe6 dbe6dbe6 3defdbe6     ...............=
  426138:	ffffffff ffffffff 1cefffff dbe6dbe6     ................
  426148:	ffff7df7 ffffffff dbe6bfff dbe6dbe6     .}..............
  426158:	ffffdbe6 ffffffff dbe6ffff dbe6dbe6     ................
  426168:	dbe6dbe6 dbe6dbe6 ffffdbe6 ffffffff     ................
  426178:	dbe61cef ffffffff 5df7ffff dbe65df7     ...........].]..
  426188:	fffffbe6 dbe6ffff dbe6dbe6 dbe6dbe6     ................
  426198:	5defdbe6 ffffffff ffffffff dbe6dbe6     ...]............
  4261a8:	dbe6dbe6 dbe6dbe6 dbe6dbe6 bffffce6     ................
  4261b8:	dbe61cef dbe6dbe6 ffffffff bfffffff     ................
  4261c8:	dbe6dbe6 dbe6dbe6 ffff5df7 dbe6fbe6     .........]......
  4261d8:	dfffdbe6 ffffffff ffffffff 729c5def     .............].r
  4261e8:	55b5729c ffff9ade ffffffff ffffffff     .r.U............
  4261f8:	6962ffff ffff6962 ffffffff 69626962     ..bibi......bibi
  426208:	69626962 ffffffff 6962ffff 69626962     bibi......bibibi
  426218:	69626962 10946962 ffffffff ffffffff     bibibi..........
  426228:	4d7bffff 69626962 ffffb2a4 ffffffff     ..{Mbibi........
  426238:	6962bbde 69626962 ffff6962 ffffffff     ..bibibibi......
  426248:	6962ffff 69626962 69626962 69626962     ..bibibibibibibi
  426258:	ffff6962 ffffffff 6962ae8b ffff7ef7     bi........bi.~..
  426268:	f3acffff 6962f3ac ffffaa6a 6962ffff     ......bij.....bi
  426278:	69626962 69626962 2c7b6962 ffffffff     bibibibibi{,....
  426288:	9ef7ffff 69626962 69626962 69626962     ....bibibibibibi
  426298:	69626962 bbde2c7b 6962ae8b 69626962     bibi{,....bibibi
  4262a8:	ffff9ef7 59d6ffff 69626962 69626962     .......Ybibibibi
  4262b8:	fffff3ac 6962cb72 fbe66962 ffffffff     ....r.bibi......
  4262c8:	96bdffff 82302c7b 82308230 18ce085a     ....{,0.0.0.Z...
  4262d8:	ffffffff ffffffff 8230ffff ffff8230     ..........0.0...
  4262e8:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  4262f8:	8230ffff 82308230 82308230 aa6a8230     ..0.0.0.0.0.0.j.
  426308:	ffffffff ffffffff 2441ffff 82308230     ..........A$0.0.
  426318:	ffff285a ffffffff 823059d6 82308230     Z(.......Y0.0.0.
  426328:	ffff8230 ffffffff 8230ffff 82308230     0.........0.0.0.
  426338:	82308230 82308230 ffff8230 ffffffff     0.0.0.0.0.......
  426348:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  426358:	ffffe338 8230ffff 82308230 82308230     8.....0.0.0.0.0.
  426368:	82308230 ffff96bd 5defffff 82308230     0.0........]0.0.
  426378:	82308230 82308230 82308230 59d68649     0.0.0.0.0.0.I..Y
  426388:	8230285a 82308230 ffff9ade 719cffff     Z(0.0.0........q
  426398:	82308230 82308230 ffffef8b 82300439     0.0.0.0.....9.0.
  4263a8:	9ad68230 ffffffff 24417ef7 82308230     0........~A$0.0.
  4263b8:	82308230 a6518230 ffffffff ffffffff     0.0.0.Q.........
  4263c8:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  4263d8:	82308230 ffffffff 8230ffff 82308230     0.0.......0.0.0.
  4263e8:	82308230 aa6a8230 ffffffff ffffffff     0.0.0.j.........
  4263f8:	82303def 82308230 ffff0439 ffffffff     .=0.0.0.9.......
  426408:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  426418:	8230ffff 82308230 82308230 82308230     ..0.0.0.0.0.0.0.
  426428:	ffff8230 ffffffff 8230285a ffff5def     0.......Z(0..]..
  426438:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  426448:	82308230 82308230 82308230 1ce78230     0.0.0.0.0.0.0...
  426458:	5defffff 82308230 82308230 82308230     ...]0.0.0.0.0.0.
  426468:	82308230 59d68649 8230285a 82308230     0.0.I..YZ(0.0.0.
  426478:	ffffd3ac 0439ffff 82308230 82308230     ......9.0.0.0.0.
  426488:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426498:	82304541 a6498230 e338a649 82308230     AE0.0.I.I.8.0.0.
  4264a8:	ffff9ef7 ffffffff 8230ffff ffff8230     ..........0.0...
  4264b8:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  4264c8:	8230ffff 24418230 085a085a ae8b085a     ..0.0.A$Z.Z.Z...
  4264d8:	ffffffff ffffffff 8230bade 82308230     ..........0.0.0.
  4264e8:	ffffa230 ffffffff 823059d6 82308230     0........Y0.0.0.
  4264f8:	ffff8230 ffffffff 085affff 085a085a     0.........Z.Z.Z.
  426508:	82308230 085a6549 ffff085a ffffffff     0.0.IeZ.Z.......
  426518:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  426528:	ffffe338 8230ffff 82308230 6d834541     8.....0.0.0.AE.m
  426538:	c330e859 6d838230 5defffff 82308230     Y.0.0..m...]0.0.
  426548:	085aa651 085a085a 085a085a 9adecb6a     Q.Z.Z.Z.Z.Z.j...
  426558:	8230285a 82308230 ffffcf8b e338ffff     Z(0.0.0.......8.
  426568:	82308230 82308230 ffffef8b 82300439     0.0.0.0.....9.0.
  426578:	9ad68230 ffffffff 82308230 dbe68230     0.......0.0.0...
  426588:	ae8bdbe6 82308230 ffffbbde ffffffff     ....0.0.........
  426598:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  4265a8:	82308230 ffffffff 8230ffff 2c7b8230     0.0.......0.0.{,
  4265b8:	79d679d6 dbe679d6 ffffffff ffffffff     .y.y.y..........
  4265c8:	8230f7c5 82300439 ffff8230 ffffffff     ..0.9.0.0.......
  4265d8:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  4265e8:	79d6ffff 79d679d6 82308230 79d6319c     ...y.y.y0.0..1.y
  4265f8:	ffff79d6 ffffffff 8230285a ffff5def     .y......Z(0..]..
  426608:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  426618:	82308230 ffff6962 0c7379d6 24418230     0.0.bi...ys.0.A$
  426628:	5defffff 82308230 79d634b5 79d679d6     ...]0.0..4.y.y.y
  426638:	79d679d6 9ef79ade 8230285a 82308230     .y.y....Z(0.0.0.
  426648:	ffffcb72 c338ffff 82308230 82308230     r.....8.0.0.0.0.
  426658:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426668:	82308230 ffff8230 3cefffff 82308230     0.0.0......<0.0.
  426678:	fffff4ac ffffffff 8230ffff ffff8230     ..........0.0...
  426688:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  426698:	8230ffff cf8b8230 ffffffff ffffffff     ..0.0...........
  4266a8:	ffffffff ffffffff 82301094 8230085a     ..........0.Z.0.
  4266b8:	ffff8230 ffffffff 823059d6 82308230     0........Y0.0.0.
  4266c8:	ffff8230 ffffffff ffffffff ffffffff     0...............
  4266d8:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  4266e8:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  4266f8:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  426708:	1cefffff c3308230 5defffff 82308230     ....0.0....]0.0.
  426718:	ffff79d6 ffffffff ffffffff ffffffff     .y..............
  426728:	8230285a 82308230 ffffe751 a230ffff     Z(0.0.0.Q.....0.
  426738:	82308230 82308230 ffffef8b 82300439     0.0.0.0.....9.0.
  426748:	9ad68230 ffffffff 82308230 ffff8230     0.......0.0.0...
  426758:	ffffffff 8230e338 ffff4d7b ffffffff     ....8.0.{M......
  426768:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  426778:	82308230 ffffffff 8230ffff cf8b8230     0.0.......0.0...
  426788:	ffffffff ffffffff ffffffff ffffffff     ................
  426798:	8230c338 82301094 beff8230 ffffffff     8.0...0.0.......
  4267a8:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  4267b8:	ffffffff ffffffff 82308230 ffff35b5     ........0.0..5..
  4267c8:	ffffffff ffffffff 8230285a ffff5def     ........Z(0..]..
  4267d8:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  4267e8:	82308230 ffff6962 ffffffff 82308230     0.0.bi......0.0.
  4267f8:	5defffff 82308230 ffff79d6 ffffffff     ...]0.0..y......
  426808:	ffffffff ffffffff 8230285a 82308230     ........Z(0.0.0.
  426818:	ffff8230 8230fbe6 82308230 82308230     0.....0.0.0.0.0.
  426828:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426838:	82308230 ffffe338 ffffffff 82304541     0.0.8.......AE0.
  426848:	ffff2862 ffffffff 8230ffff ffff8230     b(........0.0...
  426858:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  426868:	8230ffff cf8b8230 ffffffff ffffffff     ..0.0...........
  426878:	ffffffff ffffffff 82308230 e338f3ac     ........0.0...8.
  426888:	3cef8230 ffffffff 823059d6 82308230     0..<.....Y0.0.0.
  426898:	ffff8230 ffffffff ffffffff ffffffff     0...............
  4268a8:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  4268b8:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  4268c8:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  4268d8:	ffffffff 82308230 5def5def 82308230     ....0.0..].]0.0.
  4268e8:	ffff79d6 ffffffff ffffffff ffffffff     .y..............
  4268f8:	8230285a 82308230 beff8230 823018ce     Z(0.0.0.0.....0.
  426908:	82308230 82308230 ffffef8b 82300439     0.0.0.0.....9.0.
  426918:	9ad68230 ffffffff 82308230 ffff0439     0.......0.0.9...
  426928:	ffffffff 285acb6a ffff8e83 ffffffff     ....j.Z(........
  426938:	8230ffff dbe68230 dbe6dbe6 82308230     ..0.0.......0.0.
  426948:	82308230 ffffffff 8230ffff cf8b8230     0.0.......0.0...
  426958:	ffffffff ffffffff ffffffff ffffffff     ................
  426968:	82308230 6549f7c5 dbde8230 ffffffff     0.0...Ie0.......
  426978:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  426988:	ffffffff ffffffff 82308230 ffff35b5     ........0.0..5..
  426998:	ffffffff ffffffff 8230285a dbe659d6     ........Z(0..Y..
  4269a8:	6d83dbe6 82306d83 ffffe338 8230ffff     ...m.m0.8.....0.
  4269b8:	82308230 ffff6962 ffffffff 82308230     0.0.bi......0.0.
  4269c8:	5def1cef 82308230 ffff79d6 ffffffff     ...]0.0..y......
  4269d8:	ffffffff ffffffff 8230285a 82308230     ........Z(0.0.0.
  4269e8:	7ef78230 823055b5 82308230 82308230     0..~.U0.0.0.0.0.
  4269f8:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426a08:	82308230 ffff0439 ffffffff 9adedbde     0.0.9...........
  426a18:	fffffbe6 ffffffff 8230ffff 45418230     ..........0.0.AE
  426a28:	45414541 82308230 82308230 ffffffff     AEAE0.0.0.0.....
  426a38:	8230ffff a6518230 2c7b2c7b 7ad62c7b     ..0.0.Q.{,{,{,.z
  426a48:	ffffffff ffffffff 82308230 e751fce6     ........0.0...Q.
  426a58:	f4ac8230 ffffffff 823059d6 82308230     0........Y0.0.0.
  426a68:	ffff8230 ffffffff ffffffff ffffffff     0...............
  426a78:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  426a88:	8230285a 45412441 e3384541 8230e338     Z(0.A$AEAE8.8.0.
  426a98:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  426aa8:	ffffffff 82308230 5def1cef 82308230     ....0.0....]0.0.
  426ab8:	2c7b8a6a 2c7b2c7b 2c7b2c7b ffff96bd     j.{,{,{,{,{,....
  426ac8:	8230285a 82308230 3def8230 8230719c     Z(0.0.0.0..=.q0.
  426ad8:	82308230 82308230 ffffef8b 82300439     0.0.0.0.....9.0.
  426ae8:	9ad68230 ffffffff 82308230 ffff0439     0.......0.0.9...
  426af8:	ffffffff ffffffff ffffffff ffffffff     ................
  426b08:	8230ffff 82308230 82308230 82308230     ..0.0.0.0.0.0.0.
  426b18:	82308230 ffffffff 8230ffff 82308230     0.0.......0.0.0.
  426b28:	82308230 b6c58230 ffffffff 3094ffff     0.0.0..........0
  426b38:	82308230 cf8bffff 65498230 ffffffff     0.0.....0.Ie....
  426b48:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  426b58:	ffffffff ffffffff 82308230 ffff35b5     ........0.0..5..
  426b68:	ffffffff ffffffff 8230285a 82308230     ........Z(0.0.0.
  426b78:	82308230 82308230 ffffe338 8230ffff     0.0.0.0.8.....0.
  426b88:	82308230 ffff6962 ffffffff 82308230     0.0.bi......0.0.
  426b98:	5def38ce 82308230 82308230 82308230     .8.]0.0.0.0.0.0.
  426ba8:	82308230 ffff519c 8230285a a2308230     0.0..Q..Z(0.0.0.
  426bb8:	f4ac8230 82306962 c330c330 82308230     0...bi0.0.0.0.0.
  426bc8:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426bd8:	82308230 ffff4541 ffffffff ffffffff     0.0.AE..........
  426be8:	ffffffff ffffffff 8230ffff 82308230     ..........0.0.0.
  426bf8:	82308230 82308230 82308230 ffffffff     0.0.0.0.0.0.....
  426c08:	8230ffff 82308230 82308230 b6c58230     ..0.0.0.0.0.0...
  426c18:	dfffffff 8a6adfff 82308230 14b5ffff     ......j.0.0.....
  426c28:	82308230 ffffffff 823059d6 82308230     0.0......Y0.0.0.
  426c38:	ffff8230 ffffffff ffffffff ffffffff     0...............
  426c48:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  426c58:	8230285a 82308230 82308230 82308230     Z(0.0.0.0.0.0.0.
  426c68:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  426c78:	ffffffff 82308230 5def38ce 82308230     ....0.0..8.]0.0.
  426c88:	82308230 82308230 82308230 ffff519c     0.0.0.0.0.0..Q..
  426c98:	8230285a e7518230 4d7b8230 82306549     Z(0.0.Q.0.{MIe0.
  426ca8:	04410441 82308230 ffffef8b 82300439     A.A.0.0.....9.0.
  426cb8:	9ad68230 ffffffff 82308230 ffff4541     0.......0.0.AE..
  426cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  426cd8:	8230ffff 82308230 82308230 82308230     ..0.0.0.0.0.0.0.
  426ce8:	82308230 ffffffff 8230ffff 82308230     0.0.......0.0.0.
  426cf8:	82308230 b6c58230 fbe6ffff a651fbe6     0.0.0.........Q.
  426d08:	82308230 9adeffff 82308230 ffffffff     0.0.....0.0.....
  426d18:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  426d28:	ffffffff ffffffff 82308230 ffff35b5     ........0.0..5..
  426d38:	ffffffff ffffffff 8230285a 82308230     ........Z(0.0.0.
  426d48:	82308230 82308230 ffffe338 8230ffff     0.0.0.0.8.....0.
  426d58:	82308230 ffff6962 ffffffff 82308230     0.0.bi......0.0.
  426d68:	5def38ce 82308230 82308230 82308230     .8.]0.0.0.0.0.0.
  426d78:	82308230 ffff519c 8230285a ae8b8230     0.0..Q..Z(0.0...
  426d88:	c7518230 8230a230 86498649 82308230     0.Q.0.0.I.I.0.0.
  426d98:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426da8:	82308230 ffff4541 ffffffff ffffffff     0.0.AE..........
  426db8:	ffffffff ffffffff 8230ffff 9ef78230     ..........0.0...
  426dc8:	9ef79ef7 82308230 82308230 ffffffff     ....0.0.0.0.....
  426dd8:	8230ffff eb728230 d7c5d7c5 5defd7c5     ..0.0.r........]
  426de8:	96bdffff 244196bd 82308230 ffffffff     ......A$0.0.....
  426df8:	82308230 ffffffff 823059d6 82308230     0.0......Y0.0.0.
  426e08:	ffff8230 ffffffff ffffffff ffffffff     0...............
  426e18:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  426e28:	8230285a 9ef7fbe6 ae8b9ef7 8230ae8b     Z(0...........0.
  426e38:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  426e48:	ffffffff 82308230 5def1ce7 82308230     ....0.0....]0.0.
  426e58:	d7c5b2a4 d7c5d7c5 d7c5d7c5 fffffbe6     ................
  426e68:	8230285a b7c58230 a2308230 82308230     Z(0.0...0.0.0.0.
  426e78:	e751e751 82308230 ffffef8b 82300439     Q.Q.0.0.....9.0.
  426e88:	9ad68230 ffffffff 82308230 ffff4541     0.......0.0.AE..
  426e98:	ffffffff ffffffff ffffffff ffffffff     ................
  426ea8:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  426eb8:	82308230 ffffffff 8230ffff cf8b8230     0.0.......0.0...
  426ec8:	ffffffff ffffffff cb6affff 8230cb6a     ..........j.j.0.
  426ed8:	82308230 82308230 82308230 ffffffff     0.0.0.0.0.0.....
  426ee8:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  426ef8:	ffffffff ffffffff 82308230 ffff35b5     ........0.0..5..
  426f08:	ffffffff ffffffff 8230285a ffff5def     ........Z(0..]..
  426f18:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  426f28:	82308230 ffff6962 ffffffff 82308230     0.0.bi......0.0.
  426f38:	5def5def 82308230 ffff79d6 ffffffff     .].]0.0..y......
  426f48:	ffffffff ffffffff 8230285a beff8230     ........Z(0.0...
  426f58:	82308230 82308230 d3acd3ac 82308230     0.0.0.0.....0.0.
  426f68:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  426f78:	82308230 ffff0439 ffffffff 8230e751     0.0.9.......Q.0.
  426f88:	ffff8230 ffffffff 8230ffff ffff8230     0.........0.0...
  426f98:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  426fa8:	8230ffff cf8b8230 ffffffff ffffffff     ..0.0...........
  426fb8:	e759ffff 8230e759 82308230 82308230     ..Y.Y.0.0.0.0.0.
  426fc8:	82308230 ffffffff 823059d6 82308230     0.0......Y0.0.0.
  426fd8:	ffff8230 ffffffff ffffffff ffffffff     0...............
  426fe8:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  426ff8:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  427008:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  427018:	ffffffff 82308230 5defdfff 82308230     ....0.0....]0.0.
  427028:	ffff79d6 ffffffff ffffffff ffffffff     .y..............
  427038:	8230285a dfff8230 82308230 82308230     Z(0.0...0.0.0.0.
  427048:	79d679d6 82308230 ffffef8b 82300439     .y.y0.0.....9.0.
  427058:	9ad68230 ffffffff 82308230 ffff0439     0.......0.0.9...
  427068:	ffffffff 8230a651 ffff8230 ffffffff     ....Q.0.0.......
  427078:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  427088:	82308230 ffffffff 8230ffff cf8b8230     0.0.......0.0...
  427098:	ffffffff ffffffff 0439ffff 82300439     ..........9.9.0.
  4270a8:	82308230 82308230 82308230 ffff7df7     0.0.0.0.0.0..}..
  4270b8:	823059d6 82308230 ffff8230 ffffffff     .Y0.0.0.0.......
  4270c8:	ffffffff ffffffff 82308230 ffff35b5     ........0.0..5..
  4270d8:	ffffffff ffffffff 8230285a ffff5def     ........Z(0..]..
  4270e8:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  4270f8:	82308230 ffff6962 ffffffff a2308230     0.0.bi......0.0.
  427108:	5defffff 82308230 ffff79d6 ffffffff     ...]0.0..y......
  427118:	ffffffff ffffffff 8230285a ffff8230     ........Z(0.0...
  427128:	82308230 e3388230 bfffbfff 82308230     0.0.0.8.....0.0.
  427138:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  427148:	82308230 ffffe338 ffffffff 8230a649     0.0.8.......I.0.
  427158:	ffff8230 ffffffff 8230ffff ffff8230     0.........0.0...
  427168:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  427178:	8230ffff cf8b8230 ffffffff ffffffff     ..0.0...........
  427188:	8230ffff 82308230 82308230 82308230     ..0.0.0.0.0.0.0.
  427198:	82308230 ffff38ce 823059d6 82308230     0.0..8...Y0.0.0.
  4271a8:	ffff8230 ffffffff ffffffff ffffffff     0...............
  4271b8:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  4271c8:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  4271d8:	ffffe338 8230ffff 82308230 ffff6962     8.....0.0.0.bi..
  4271e8:	ffffffff a2308230 5defffff 82308230     ....0.0....]0.0.
  4271f8:	ffff79d6 ffffffff ffffffff ffffffff     .y..............
  427208:	8230285a ffff8230 8230c338 49628230     Z(0.0...8.0.0.bI
  427218:	ffffffff 82308230 ffffef8b 82300439     ....0.0.....9.0.
  427228:	9ad68230 ffffffff 82308230 ffffa230     0.......0.0.0...
  427238:	ffffffff 82304541 ffffc751 ffffffff     ....AE0.Q.......
  427248:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  427258:	82308230 ffffffff 8230ffff 2c7b8230     0.0.......0.0.{,
  427268:	79d679d6 9ade79d6 8230ffff 82308230     .y.y.y....0.0.0.
  427278:	fce68230 ffffffff 8230b6bd ffff8e83     0.........0.....
  427288:	823059d6 82308230 79d68230 79d679d6     .Y0.0.0.0..y.y.y
  427298:	dfff79d6 ffffffff 82308230 ffff35b5     .y......0.0..5..
  4272a8:	ffffffff ffffffff 8230285a ffff5def     ........Z(0..]..
  4272b8:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  4272c8:	82308230 ffff6962 0c7339ce c7518230     0.0.bi...9s.0.Q.
  4272d8:	5defffff 82308230 79d634b5 79d679d6     ...]0.0..4.y.y.y
  4272e8:	79d679d6 3def79d6 8230285a ffff8230     .y.y.y.=Z(0.0...
  4272f8:	8230cb72 79d68230 ffffffff 82308230     r.0.0..y....0.0.
  427308:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  427318:	82308230 ffff8230 1cefffff 82308230     0.0.0.......0.0.
  427328:	ffff34b5 ffffffff 8230ffff ffff8230     .4........0.0...
  427338:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  427348:	8230ffff 24418230 085a085a 8a6a085a     ..0.0.A$Z.Z.Z.j.
  427358:	8230ffff 82308230 9ef78230 ffffffff     ..0.0.0.0.......
  427368:	8230bade ffff8a6a 823059d6 82308230     ..0.j....Y0.0.0.
  427378:	085a8230 085a085a 7ef7085a ffffffff     0.Z.Z.Z.Z..~....
  427388:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  427398:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  4273a8:	ffffe338 8230ffff 82308230 4d7b4541     8.....0.0.0.AE{M
  4273b8:	c330c751 f4ac8230 5defffff 82308230     Q.0.0......]0.0.
  4273c8:	085aa651 085a085a 085a085a 14b5085a     Q.Z.Z.Z.Z.Z.Z...
  4273d8:	8230285a ffff8230 8230ef93 7ef78230     Z(0.0.....0.0..~
  4273e8:	ffffffff 82308230 ffffef8b 82300439     ....0.0.....9.0.
  4273f8:	9ad68230 ffffffff 82308230 7ad68230     0.......0.0.0..z
  427408:	6d837ad6 82308230 fffffbe6 ffffffff     .z.m0.0.........
  427418:	8230ffff ffff8230 ffffffff 82308230     ..0.0.......0.0.
  427428:	82308230 ffffffff 8230ffff 82308230     0.0.......0.0.0.
  427438:	82308230 45418230 8230ffff 82308230     0.0.0.AE..0.0.0.
  427448:	ffffa230 ffffffff 82301cef ffff6549     0.........0.Ie..
  427458:	823059d6 82308230 82308230 82308230     .Y0.0.0.0.0.0.0.
  427468:	5def8230 ffffffff 82308230 ffff35b5     0..]....0.0..5..
  427478:	ffffffff ffffffff 8230285a ffff5def     ........Z(0..]..
  427488:	ef8bffff 8230ef8b ffffe338 8230ffff     ......0.8.....0.
  427498:	82308230 82308230 82308230 beff8230     0.0.0.0.0.0.0...
  4274a8:	5defffff 82308230 82308230 82308230     ...]0.0.0.0.0.0.
  4274b8:	82308230 719c8230 8230285a ffff8230     0.0.0..qZ(0.0...
  4274c8:	8230d3ac bfff8230 ffffffff 82308230     ..0.0.......0.0.
  4274d8:	ffffef8b 82300439 9ad68230 ffffffff     ....9.0.0.......
  4274e8:	8230a651 86498230 c3388649 82308230     Q.0.0.I.I.8.0.0.
  4274f8:	ffffbfff ffffffff 8230ffff ffff8230     ..........0.0...
  427508:	ffffffff 82308230 82308230 ffffffff     ....0.0.0.0.....
  427518:	8230ffff 82308230 82308230 45418230     ..0.0.0.0.0.0.AE
  427528:	8230ffff 82308230 ffff2441 ffffffff     ..0.0.0.A$......
  427538:	82307df7 ffff8230 823059d6 82308230     .}0.0....Y0.0.0.
  427548:	82308230 82308230 5def8230 ffffffff     0.0.0.0.0..]....
  427558:	82308230 ffff35b5 ffffffff ffffffff     0.0..5..........
  427568:	8230285a ffff5def ef8bffff 8230ef8b     Z(0..]........0.
  427578:	ffffe338 8230ffff 82308230 82308230     8.....0.0.0.0.0.
  427588:	82308230 ffffc751 5defffff 82308230     0.0.Q......]0.0.
  427598:	82308230 82308230 82308230 719c8230     0.0.0.0.0.0.0..q
  4275a8:	8230285a ffff8230 823018ce dfff8230     Z(0.0.....0.0...
  4275b8:	ffffffff 82308230 ffffef8b 82300439     ....0.0.....9.0.
  4275c8:	9ad68230 ffffffff 8230929c 82308230     0.........0.0.0.
  4275d8:	82308230 a2308230 ffffffff ffffffff     0.0.0.0.........
  4275e8:	6d83ffff ffff6d83 ffffffff 6d836d83     ...m.m.......m.m
  4275f8:	6d836d83 ffffffff 6d83ffff 6d836d83     .m.m.......m.m.m
  427608:	6d836d83 cf8b6d83 6d83ffff 6d836d83     .m.m.m.....m.m.m
  427618:	ffff519c ffffffff 6d83ffff ffff6d83     .Q.........m.m..
  427628:	6d83fbe6 6d836d83 6d836d83 6d836d83     ...m.m.m.m.m.m.m
  427638:	9ef76d83 ffffffff 6d836d83 ffff59d6     .m.......m.m.Y..
  427648:	ffffffff ffffffff 6d83719c ffff9ef7     .........q.m....
  427658:	75bdffff 6d8375bd ffff8e83 6d83ffff     ...u.u.m.......m
  427668:	6d836d83 6d836d83 af8b6d83 ffffffff     .m.m.m.m.m......
  427678:	9ef7ffff 6d836d83 6d836d83 6d836d83     .....m.m.m.m.m.m
  427688:	6d836d83 d7c56d83 6d83719c ffff6d83     .m.m.m...q.m.m..
  427698:	6d83dfff ffffae83 ffffffff 6d836d83     ...m.........m.m
  4276a8:	ffff75bd 6d83ae8b 1cef6d83 ffffffff     .u.....m.m......
  4276b8:	f8cdffff 8230ae8b c3308230 9adeaa6a     ......0.0.0.j...
  4276c8:	ffffffff ffffffff 7df7ffff ffff7df7     ...........}.}..
  4276d8:	ffffffff 7df77df7 7df77df7 ffffffff     .....}.}.}.}....
  4276e8:	7df7ffff 7df77df7 7df77df7 7ef77df7     ...}.}.}.}.}.}.~
  4276f8:	7df7ffff 7df77df7 ffff9ef7 ffffffff     ...}.}.}........
  427708:	7df7ffff ffff7df7 7df7ffff 7df77df7     ...}.}.....}.}.}
  427718:	7df77df7 7df77df7 ffff7df7 ffffffff     .}.}.}.}.}......
  427728:	7df77df7 ffffdfff ffffffff ffffffff     .}.}............
  427738:	7df79ef7 ffffffff bfffffff 7df7bfff     ...}...........}
  427748:	ffff7ef7 7df7ffff 7df77df7 7df77df7     .~.....}.}.}.}.}
  427758:	beff7df7 ffffffff ffffffff 7df77df7     .}...........}.}
  427768:	7df77df7 7df77df7 7df77df7 bfff7df7     .}.}.}.}.}.}.}..
  427778:	7df79ef7 ffff7df7 7df7ffff ffff9ef7     ...}.}.....}....
  427788:	ffffffff 7df77df7 ffffbfff 7df77ef7     .....}.}.....~.}
  427798:	ffff7df7 ffffffff ffffffff b7c5bef7     .}..............
  4277a8:	d7c5b7c5 ffff1ce7 ffffffff ffffffff     ................
  4277b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4277c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4277d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4277e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4277f8:	ffffffff ffffffff ffffffff ffffffff     ................
  427808:	ffffffff ffffffff ffffffff ffffffff     ................
  427818:	ffffffff ffffffff ffffffff ffffffff     ................
  427828:	ffffffff ffffffff ffffffff ffffffff     ................
  427838:	ffffffff ffffffff ffffffff ffffffff     ................
  427848:	ffffffff ffffffff ffffffff ffffffff     ................
  427858:	ffffffff ffffffff ffffffff ffffffff     ................
  427868:	ffffffff ffffffff ffffffff ffffffff     ................
  427878:	ffffffff ffffffff ffffffff ffffffff     ................
  427888:	ffffffff ffffffff ffffffff ffffffff     ................
  427898:	ffffffff ffffffff ffffffff ffffffff     ................
  4278a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4278b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4278c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4278d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4278e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4278f8:	ffffffff ffffffff ffffffff ffffffff     ................
  427908:	ffffffff ffffffff ffffffff ffffffff     ................
  427918:	ffffffff ffffffff ffffffff ffffffff     ................
  427928:	ffffffff ffffffff ffffffff ffffffff     ................
  427938:	ffffffff ffffffff ffffffff ffffffff     ................
  427948:	ffffffff ffffffff ffffffff ffffffff     ................
  427958:	ffffffff ffffffff ffffffff ffffffff     ................
  427968:	ffffffff ffffffff ffffffff ffffffff     ................
  427978:	ffffffff ffffffff ffffffff ffffffff     ................
  427988:	ffffffff ffffffff ffffffff ffffffff     ................
  427998:	ffffffff ffffffff ffffffff ffffffff     ................
  4279a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4279b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4279c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4279d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4279e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4279f8:	ffffffff ffffffff ffffffff ffffffff     ................
  427a08:	ffffffff ffffffff ffffffff ffffffff     ................
  427a18:	ffffffff ffffffff ffffffff ffffffff     ................
  427a28:	ffffffff ffffffff ffffffff ffffffff     ................
  427a38:	ffffffff ffffffff ffffffff ffffffff     ................
  427a48:	ffffffff ffffffff ffffffff ffffffff     ................
  427a58:	ffffffff ffffffff ffffffff ffffffff     ................
  427a68:	ffffffff ffffffff                       ........

00427a70 <logo>:
  427a70:	0600c004 00001200 00427a7c              ........|zB.

00427a7c <logo_map>:
  427a7c:	ffffffff ffffffff ffffffff ffffffff     ................
  427a8c:	ffffffff ffffffff ffffffff ffffffff     ................
  427a9c:	ffffffff ffffffff ffffffff ffffffff     ................
  427aac:	ffffffff ffffffff ffffffff ffffffff     ................
  427abc:	ffffffff ffffffff ffffffff ffffffff     ................
  427acc:	ffffffff ffffffff ffffffff ffffffff     ................
  427adc:	ffffffff ffffffff ffffffff ffffffff     ................
  427aec:	ffffffff ffffffff ffffffff ffffffff     ................
  427afc:	ffffffff ffffffff ffffffff ffffffff     ................
  427b0c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b1c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b2c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b3c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b4c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b5c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b6c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b7c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b8c:	ffffffff ffffffff ffffffff ffffffff     ................
  427b9c:	ffffffff ffffffff ffffffff ffffffff     ................
  427bac:	ffffffff ffffffff ffffffff ffffffff     ................
  427bbc:	ffffffff ffffffff ffffffff ffffffff     ................
  427bcc:	ffffffff ffffffff ffffffff ffffffff     ................
  427bdc:	ffffffff ffffffff ffffffff ffffffff     ................
  427bec:	ffffffff ffffffff ffffffff ffffffff     ................
  427bfc:	ffffffff ffffffff ffffffff ffffffff     ................
  427c0c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c1c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c2c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c3c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c4c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c5c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c6c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c7c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c8c:	ffffffff ffffffff ffffffff ffffffff     ................
  427c9c:	ffffffff ffffffff ffffffff ffffffff     ................
  427cac:	ffffffff ffffffff ffffffff ffffffff     ................
  427cbc:	ffffffff ffffffff ffffffff ffffffff     ................
  427ccc:	ffffffff ffffffff ffffffff ffffffff     ................
  427cdc:	ffffffff ffffffff ffffffff ffffffff     ................
  427cec:	ffffffff ffffffff ffffffff ffffffff     ................
  427cfc:	ffffffff ffffffff ffffffff ffffffff     ................
  427d0c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d1c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d2c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d3c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d4c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d5c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d6c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d7c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d8c:	ffffffff ffffffff ffffffff ffffffff     ................
  427d9c:	ffffffff ffffffff ffffffff ffffffff     ................
  427dac:	ffffffff ffffffff ffffffff ffffffff     ................
  427dbc:	ffffffff ffffffff ffffffff ffffffff     ................
  427dcc:	ffffffff ffffffff ffffffff ffffffff     ................
  427ddc:	ffffffff ffffffff ffffffff ffffffff     ................
  427dec:	ffffffff ffffffff ffffffff ffffffff     ................
  427dfc:	ffffffff ffffffff ffffffff ffffffff     ................
  427e0c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e1c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e2c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e3c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e4c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e5c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e6c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e7c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e8c:	ffffffff ffffffff ffffffff ffffffff     ................
  427e9c:	ffffffff ffffffff ffffffff ffffffff     ................
  427eac:	ffffffff ffffffff ffffffff ffffffff     ................
  427ebc:	ffffffff ffffffff ffffffff ffffffff     ................
  427ecc:	ffffffff ffffffff ffffffff ffffffff     ................
  427edc:	ffffffff ffffffff ffffffff ffffffff     ................
  427eec:	ffffffff ffffffff ffffffff ffffffff     ................
  427efc:	ffffffff ffffffff ffffffff ffffffff     ................
  427f0c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f1c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f2c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f3c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f4c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f5c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f6c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f7c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f8c:	ffffffff ffffffff ffffffff ffffffff     ................
  427f9c:	ffffffff ffffffff ffffffff ffffffff     ................
  427fac:	ffffffff ffffffff ffffffff ffffffff     ................
  427fbc:	ffffffff ffffffff ffffffff ffffffff     ................
  427fcc:	ffffffff ffffffff ffffffff ffffffff     ................
  427fdc:	ffffffff ffffffff ffffffff ffffffff     ................
  427fec:	ffffffff e4a0e4a0 ffffffff ffffffff     ................
  427ffc:	ffffffff ffffffff ffffffff ffffffff     ................
  42800c:	ffffffff ffffffff ffffffff ffffffff     ................
  42801c:	ffffffff ffffffff ffffffff ffffffff     ................
  42802c:	ffffffff ffffffff ffffffff ffffffff     ................
  42803c:	ffffffff ffffffff ffffffff ffffffff     ................
  42804c:	ffffffff e4a8e4a8 dfffb7e5 ffffffff     ................
  42805c:	ffffffff ffffffff ffffffff ffffffff     ................
  42806c:	ffffffff ffffffff ffffffff ffffffff     ................
  42807c:	ffffffff ffffffff ffffffff ffffffff     ................
  42808c:	ffffffff ffffffff 0df3ffff fffff0f3     ................
  42809c:	ffffffff ffffffff ffffffff ffffffff     ................
  4280ac:	ffffffff e4b0e4b0 8ed304b1 ffffffff     ................
  4280bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4280cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4280dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4280ec:	ffffffff ffffffff e4e0ffff 66e9e4e0     ...............f
  4280fc:	ffff18fe ffffffff ffffffff ffffffff     ................
  42810c:	ffffffff e4c0e4c0 6ed325c9 ffffffff     .........%.n....
  42811c:	ffffffff ffffffff ffffffff ffffffff     ................
  42812c:	ffffffff ffffffff ffffffff ffffffff     ................
  42813c:	ffffffff ffffffff ffffffff ffffffff     ................
  42814c:	ffffffff ffffffff e4d8ffff e4d8e4d8     ................
  42815c:	ffff29e2 ffffffff ffffffff ffffffff     .)..............
  42816c:	ffffffff e4d0e4d0 55cd14ed ffffffff     ...........U....
  42817c:	ffffffff ffffffff ffffffff ffffffff     ................
  42818c:	ffffffff ffffffff ffffffff ffffffff     ................
  42819c:	ffffffff ffffffff ffffffff ffffffff     ................
  4281ac:	ffffffff ffffffff e4d8ffff e4d8e4d8     ................
  4281bc:	ffffe4d8 ffffffff ffffffff ffffffff     ................
  4281cc:	ffffffff 66e1e4e0 e478d7d5 ffffffff     .......f..x.....
  4281dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4281ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4281fc:	ffffffff ffffffff ffffffff ffffffff     ................
  42820c:	ffffffff ffffffff e4d0ffff e4d0e4d0     ................
  42821c:	ffffe4d0 ffffffff ffffffff ffffffff     ................
  42822c:	ffffffff 55f5a7e9 6270698a ffffffff     .......U.ipb....
  42823c:	ffffffff ffffffff ffffffff ffffffff     ................
  42824c:	ffffffff ffffffff ffffffff ffffffff     ................
  42825c:	ffffffff ffffffff ffffffff ffffffff     ................
  42826c:	ffffffff ffffffff e4c8ffff e4c8e4c8     ................
  42827c:	ffffe4c8 ffffffff ffffffff ffffffff     ................
  42828c:	ffffffff 7df7ffff 82886260 ffffffff     .......}`b......
  42829c:	ffffffff ffffffff ffffffff ffffffff     ................
  4282ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4282bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4282cc:	ffffffff ffffffff e4c8ffff e4c0e4c8     ................
  4282dc:	29c2e4c0 8ec3ecc2 18e6b3d4 38e639e6     ...).........9.8
  4282ec:	96d538de 6260298a a3a06268 ffffffff     .8...)`bhb......
  4282fc:	ffffffff ffffffff ffffffff ffffffff     ................
  42830c:	ffffffff ffffffff ffffffff ffffffff     ................
  42831c:	ffffffff ffffffff ffffffff ffffffff     ................
  42832c:	ffffffff ffffffff e4c0ffff e4c0e4c0     ................
  42833c:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  42834c:	62688270 62606260 c4b06270 ffffffff     p.hb`b`bpb......
  42835c:	ffffffff ffffffff ffffffff ffffffff     ................
  42836c:	ffffffff ffffffff ffffffff ffffffff     ................
  42837c:	ffffffff ffffffff ffffffff ffffffff     ................
  42838c:	ffffffff ffffffff e4b8ffff e4c0e4c0     ................
  42839c:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  4283ac:	62688270 62606260 e4c8a3a0 ffffffff     p.hb`b`b........
  4283bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4283cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4283dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4283ec:	ffffffff ffffffff e4c0ffff e4c0e4e0     ................
  4283fc:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  42840c:	62688270 62686260 e4c0e4c0 ffffffff     p.hb`bhb........
  42841c:	ffffffff ffffffff ffffffff ffffffff     ................
  42842c:	ffffffff ffffffff ffffffff ffffffff     ................
  42843c:	ffffffff ffffffff ffffffff ffffffff     ................
  42844c:	ffffffff ffffffff e4d8ffff cfe3e4e0     ................
  42845c:	bfffdbfe dfffdfff 9effbfff 9aee9eff     ................
  42846c:	d7d5d7d5 e4b8c4a8 e4b8e4b8 ffffffff     ................
  42847c:	ffffffff ffffffff ffffffff ffffffff     ................
  42848c:	ffffffff ffffffff ffffffff ffffffff     ................
  42849c:	ffffffff ffffffff ffffffff ffffffff     ................
  4284ac:	ffffffff ffffffff 04e9ffff ffffe4e0     ................
  4284bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4284cc:	ffffffff e4b8e4b8 e4b8e4b8 ffffffff     ................
  4284dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4284ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4284fc:	ffffffff ffffffff ffffffff ffffffff     ................
  42850c:	ffffffff ffffffff 04e9ffff 71d40deb     ...............q
  42851c:	ffff0cbb ffffffff ffffffff ffffffff     ................
  42852c:	ffffffff e4b0e4b0 e4b0e4b0 ffffffff     ................
  42853c:	ffffffff ffffffff ffffffff ffffffff     ................
  42854c:	ffffffff ffffffff ffffffff ffffffff     ................
  42855c:	ffffffff ffffffff ffffffff ffffffff     ................
  42856c:	ffffffff ffffffff 0debffff e4a89eff     ................
  42857c:	ffffe4a8 ffffffff ffffffff ffffffff     ................
  42858c:	ffffffff e4a8e4a8 e4a8e4a8 ffffffff     ................
  42859c:	ffffffff ffffffff ffffffff ffffffff     ................
  4285ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4285bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4285cc:	ffffffff ffffffff bbfeffff e4a8f4dc     ................
  4285dc:	ffffe4a8 ffffffff ffffffff ffffffff     ................
  4285ec:	ffffffff e4a8e4a8 e4a8e4a8 ffffffff     ................
  4285fc:	ffffffff ffffffff ffffffff ffffffff     ................
  42860c:	ffffffff ffffffff ffffffff ffffffff     ................
  42861c:	ffffffff ffffffff ffffffff ffffffff     ................
  42862c:	ffffffff ffffffff efdbffff e4b8e4b8     ................
  42863c:	ffffe4b8 ffffffff ffffffff ffffffff     ................
  42864c:	ffffffff e4a0ccc2 e4a0e4a0 ffffffff     ................
  42865c:	ffffffff ffffffff ffffffff ffffffff     ................
  42866c:	ffffffff ffffffff ffffffff ffffffff     ................
  42867c:	ffffffff ffffffff ffffffff ffffffff     ................
  42868c:	ffffffff ffffffff e4c0ffff e4c0e4c0     ................
  42869c:	ffffe4c0 ffffffff ffffffff ffffffff     ................
  4286ac:	ffffffff 29b2ffff e4a0e4a0 ffffffff     .......)........
  4286bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4286cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4286dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4286ec:	ffffffff ffffffff 05d1ffff e4c8e4c8     ................
  4286fc:	ffffe4c8 ffffffff ffffffff ffffffff     ................
  42870c:	ffffffff 3cf7ffff 86a1e8a9 ffffffff     .......<........
  42871c:	ffffffff ffffffff ffffffff ffffffff     ................
  42872c:	ffffffff ffffffff ffffffff ffffffff     ................
  42873c:	ffffffff ffffffff ffffffff ffffffff     ................
  42874c:	ffffffff ffffffff ffffffff 87e9ffff     ................
  42875c:	ffff46e9 ffffffff ffffffff ffffffff     .F..............
  42876c:	ffffffff ffffffff ffffffff ffffffff     ................
  42877c:	ffffffff ffffffff ffffffff ffffffff     ................
  42878c:	ffffffff ffffffff ffffffff ffffffff     ................
  42879c:	ffffffff ffffffff ffffffff ffffffff     ................
  4287ac:	ffffffff ffffffff ffffffff 9afeffff     ................
  4287bc:	ffff96fd ffffffff ffffffff ffffffff     ................
  4287cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4287dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4287ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4287fc:	ffffffff ffffffff ffffffff ffffffff     ................
  42880c:	ffffffff ffffffff ffffffff ffffffff     ................
  42881c:	ffffffff ffffffff ffffffff ffffffff     ................
  42882c:	ffffffff ffffffff ffffffff ffffffff     ................
  42883c:	ffffffff ffffffff ffffffff ffffffff     ................
  42884c:	ffffffff ffffffff ffffffff ffffffff     ................
  42885c:	ffffffff ffffffff ffffffff ffffffff     ................
  42886c:	ffffffff ffffffff ffffffff ffffffff     ................
  42887c:	ffffffff ffffffff ffffffff ffffffff     ................
  42888c:	ffffffff ffffffff ffffffff ffffffff     ................
  42889c:	ffffffff ffffffff ffffffff ffffffff     ................
  4288ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4288bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4288cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4288dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4288ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4288fc:	ffffffff ffffffff ffffffff ffffffff     ................
  42890c:	ffffffff ffffffff ffffffff ffffffff     ................
  42891c:	ffffffff ffffffff ffffffff ffffffff     ................
  42892c:	ffffffff ffffffff ffffffff ffffffff     ................
  42893c:	ffffffff ffffffff ffffffff ffffffff     ................
  42894c:	ffffffff ffffffff ffffffff ffffffff     ................
  42895c:	ffffffff ffffffff ffffffff ffffffff     ................
  42896c:	ffffffff ffffffff ffffffff ffffffff     ................
  42897c:	ffffffff ffffffff ffffffff ffffffff     ................
  42898c:	ffffffff ffffffff ffffffff ffffffff     ................
  42899c:	ffffffff ffffffff ffffffff ffffffff     ................
  4289ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4289bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4289cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4289dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4289ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4289fc:	ffffffff ffffffff ffffffff ffffffff     ................
  428a0c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a1c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a2c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a3c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a4c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a5c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a6c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a7c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a8c:	ffffffff ffffffff ffffffff ffffffff     ................
  428a9c:	ffffffff ffffffff ffffffff ffffffff     ................
  428aac:	ffffffff ffffffff ffffffff ffffffff     ................
  428abc:	ffffffff ffffffff ffffffff ffffffff     ................
  428acc:	ffffffff ffffffff ffffffff ffffffff     ................
  428adc:	ffffffff ffffffff ffffffff ffffffff     ................
  428aec:	ffffffff ffffffff ffffffff ffffffff     ................
  428afc:	ffffffff ffffffff ffffffff ffffffff     ................
  428b0c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b1c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b2c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b3c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b4c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b5c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b6c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b7c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b8c:	ffffffff ffffffff ffffffff ffffffff     ................
  428b9c:	ffffffff ffffffff ffffffff ffffffff     ................
  428bac:	ffffffff ffffffff ffffffff ffffffff     ................
  428bbc:	ffffffff ffffffff ffffffff ffffffff     ................
  428bcc:	ffffffff ffffffff ffffffff ffffffff     ................
  428bdc:	ffffffff ffffffff ffffffff ffffffff     ................
  428bec:	ffffffff ffffffff ffffffff ffffffff     ................
  428bfc:	ffffffff ffffffff ffffffff ffffffff     ................
  428c0c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c1c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c2c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c3c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c4c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c5c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c6c:	ffffffff ffffffff ffffffff ffffffff     ................
  428c7c:	454c4449 00000000 51726d54 00000000     IDLE....TmrQ....
  428c8c:	20726d54 00637653 2074754f 6d20666f     Tmr Svc.Out of m
  428c9c:	726f6d65 00000079 0000ffff 4c4c554e     emory.......NULL
  428cac:	696f7020 7265746e 00000000 6f5f766c      pointer....lv_o
  428cbc:	00006a62 0000ffff 640a6f4e 00617461     bj......No.data.

00428ccc <_lv_bpp1_opa_table>:
  428ccc:	0000ff00                                ....

00428cd0 <_lv_bpp2_opa_table>:
  428cd0:	ffaa5500                                .U..

00428cd4 <_lv_bpp4_opa_table>:
  428cd4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

00428ce4 <_lv_bpp8_opa_table>:
  428ce4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  428cf4:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  428d04:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  428d14:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  428d24:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  428d34:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  428d44:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  428d54:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  428d64:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  428d74:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  428d84:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  428d94:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  428da4:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  428db4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  428dc4:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  428dd4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00428de4 <wcorr.10557>:
  428de4:	81808080 83828281 87868584 8d8c8a89     ................
  428df4:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  428e04:	000000b5 0000ffff ffaa5500 33221100     .........U...."3
  428e14:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  428e24:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  428e34:	006e6962                                bin.

00428e38 <cmaps>:
  428e38:	00000020 0001005f 00000000 00000000      ..._...........
  428e48:	00020000 000000b0 0060f7f3 0042c1cc     ..........`...B.
  428e58:	00000000 0003003b                       ....;...

00428e60 <glyph_dsc>:
	...
  428e68:	03c00000 00000000 03c00000 00000a03     ................
  428e78:	0580000f 05000505 09d0001c 00000a0a     ................
  428e88:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  428e98:	09a000ce ff000b0a 02f00105 05000503     ................
  428ea8:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  428eb8:	05a00145 05000606 08200157 02000708     E.......W. .....
  428ec8:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  428ed8:	03300183 00000303 04f00188 ffff0e07     ..0.............
  428ee8:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  428ef8:	081001fa 00000a08 08000222 00000a08     ........".......
  428f08:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  428f18:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  428f28:	090002f9 00000a09 08a00326 00000a08     ........&.......
  428f38:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  428f48:	0820036b 01000808 0820038b 02000608     k. ....... .....
  428f58:	082003a3 01000808 080003c3 00000a08     .. .............
  428f68:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  428f78:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  428f88:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  428f98:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  428fa8:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  428fb8:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  428fc8:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  428fd8:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  428fe8:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  428ff8:	0a300764 00010a09 08b00791 00000a09     d.0.............
  429008:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  429018:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  429028:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  429038:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  429048:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  429058:	0830099e 02010607 070009b3 ff000107     ..0.............
  429068:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  429078:	099009dc 00010b08 08000a08 00000808     ................
  429088:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  429098:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  4290a8:	09900acd 00010b08 03e00af9 00010b02     ................
  4290b8:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  4290c8:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  4290d8:	09900b92 00010808 08e00bb2 00000809     ................
  4290e8:	09900bd6 fd010b08 09900c02 fd000b09     ................
  4290f8:	05c00c34 00010805 07000c48 00000807     4.......H.......
  429108:	05d00c64 00000a06 09800c82 00010808     d...............
  429118:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  429128:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  429138:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  429148:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  429158:	08200dbc 03000308 05e00dc8 06000506     .. .............
  429168:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  429178:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  429188:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  429198:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  4291a8:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  4291b8:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  4291c8:	070011de ff000c07 0a801208 ff000c0b     ................
  4291d8:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  4291e8:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  4291f8:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  429208:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  429218:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  429228:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  429238:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  429248:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  429258:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  429268:	11801801 00000b12 0e001864 00000b0e     ........d.......
  429278:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  429288:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  429298:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  4292a8:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  4292b8:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  4292c8:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  4292d8:	11801d3e 00000a12 11801d98 00000a12     >...............
  4292e8:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  4292f8:	11801ea6 00000a12 11801f00 ff000c12     ................
  429308:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  429318:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  429328:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

00429338 <gylph_bitmap>:
  429338:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  429348:	88f09109 f080081f 00000088 3c200d00     .............. <
  429358:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  429368:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  429378:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  429388:	00000070 0000000e 0000e000 30eaef19     p..............0
  429398:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  4293a8:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  4293b8:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  4293c8:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  4293d8:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  4293e8:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  4293f8:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  429408:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  429418:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  429428:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  429438:	00000000 f0011f00 00f0001f 0bf10300     ................
  429448:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  429458:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  429468:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  429478:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  429488:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  429498:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  4294a8:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  4294b8:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  4294c8:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  4294d8:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  4294e8:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  4294f8:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  429508:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  429518:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  429528:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  429538:	0001c07e 0000f106 0000f006 0000900d     ~...............
  429548:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  429558:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  429568:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  429578:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  429588:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  429598:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  4295a8:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  4295b8:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  4295c8:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  4295d8:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  4295e8:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  4295f8:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  429608:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  429618:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  429628:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  429638:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  429648:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  429658:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  429668:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  429678:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  429688:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  429698:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  4296a8:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  4296b8:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  4296c8:	00303333 00000000 1f000000 03f3ffff     330.............
  4296d8:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  4296e8:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  4296f8:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  429708:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  429718:	00000000 0000800b 0000900c daef6c00     .............l..
  429728:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  429738:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  429748:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  429758:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  429768:	00e50190 00000000 10a43d00 00000028     .........=..(...
  429778:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  429788:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  429798:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  4297a8:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  4297b8:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  4297c8:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  4297d8:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  4297e8:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  4297f8:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  429808:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  429818:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  429828:	0000008e 00008eda 008e9d00 8e9d0000     ................
  429838:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  429848:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  429858:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  429868:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  429878:	8e414444 8e000000 8e000000 8f000000     DDA.............
  429888:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  429898:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  4298a8:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  4298b8:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  4298c8:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  4298d8:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  4298e8:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  4298f8:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  429908:	00bc4404 00c00900 00009c00 0000c009     .D..............
  429918:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  429928:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  429938:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  429948:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  429958:	00008ea0 00008e00 00008e00 00008e00     ................
  429968:	00008e00 00008e00 00008e00 00008e00     ................
  429978:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  429988:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  429998:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  4299a8:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  4299b8:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  4299c8:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  4299d8:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  4299e8:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  4299f8:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  429a08:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  429a18:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  429a28:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  429a38:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  429a48:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  429a58:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  429a68:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  429a78:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  429a88:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  429a98:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  429aa8:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  429ab8:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  429ac8:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  429ad8:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  429ae8:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  429af8:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  429b08:	00c00900 009c0000 c0090000 9c000000     ................
  429b18:	09000000 000000c0 9c00009c a90b0000     ................
  429b28:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  429b38:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  429b48:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  429b58:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  429b68:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  429b78:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  429b88:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  429b98:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  429ba8:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  429bb8:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  429bc8:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  429bd8:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  429be8:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  429bf8:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  429c08:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  429c18:	e8000090 0000f105 00e6f305 fd0c0000     ................
  429c28:	00000000 0000403f 00f30200 2f000000     ....?@........./
  429c38:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  429c48:	030000f3 010000f6 000000ea 000000cc     ................
  429c58:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  429c68:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  429c78:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  429c88:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  429c98:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  429ca8:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  429cb8:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  429cc8:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  429cd8:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  429ce8:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  429cf8:	b05d740b f0040000 f2eece04 f214821f     .t].............
  429d08:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  429d18:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  429d28:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  429d38:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  429d48:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  429d58:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  429d68:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  429d78:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  429d88:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  429d98:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  429da8:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  429db8:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  429dc8:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  429dd8:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  429de8:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  429df8:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  429e08:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  429e18:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  429e28:	0000baf5 0000baf5 00a8baf5 babababa     ................
  429e38:	babababa 00b00a00 00000099 0a00ab00     ................
  429e48:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  429e58:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  429e68:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  429e78:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  429e88:	baf30700 babababa babababa 9eb9baba     ................
  429e98:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  429ea8:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  429eb8:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  429ec8:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  429ed8:	00baf400 00baf500 00baf500 00baf500     ................
  429ee8:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  429ef8:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  429f08:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  429f18:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  429f28:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  429f38:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  429f48:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  429f58:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  429f68:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  429f78:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  429f88:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  429f98:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  429fa8:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  429fb8:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  429fc8:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  429fd8:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  429fe8:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  429ff8:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  42a008:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  42a018:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  42a028:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  42a038:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  42a048:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  42a058:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  42a068:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  42a078:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  42a088:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  42a098:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  42a0a8:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  42a0b8:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  42a0c8:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  42a0d8:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  42a0e8:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  42a0f8:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  42a108:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  42a120:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  42a130:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  42a140:	0000ed10 000094af 0a00d00e 000000f1     ................
  42a150:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  42a160:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  42a170:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  42a180:	000000a3 18500000 84888888 ddbffa05     ......P.........
  42a190:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  42a1a0:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  42a1b0:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  42a1c0:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  42a1d0:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  42a1e0:	2fffffff ffffffff ff0effef 01feffff     .../............
  42a1f0:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  42a200:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  42a210:	87688688 88888807 1fffff86 ffffffff     ..h.............
  42a220:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  42a230:	01000000 00000050 f81d0000 00000000     ....P...........
  42a240:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  42a250:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  42a260:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  42a270:	000000e2 207d0000 00000000 00000000     ......} ........
  42a280:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  42a290:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  42a2a0:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  42a2b0:	00006003 00001100 00000000 000000ff     .`..............
  42a2c0:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  42a2d0:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  42a2e0:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  42a2f0:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  42a300:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  42a310:	0050fdff 44020000 00000020 00000000     ..P....D .......
  42a320:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  42a330:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  42a340:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  42a350:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  42a360:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  42a370:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  42a380:	00004077 03000000 00410310 9f000000     w@........A.....
  42a390:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  42a3a0:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  42a3b0:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  42a3c0:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  42a3d0:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  42a3e0:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  42a3f0:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  42a400:	0c000000 0000c0ff ff0c0000 000000c0     ................
  42a410:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  42a420:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  42a430:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  42a440:	ffffffff ffffffff faffffff ccaccfb3     ................
  42a450:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  42a460:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  42a470:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  42a480:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  42a490:	ffff8b98 fffffffc ffffffff fffffffc     ................
  42a4a0:	ffffffff ffff9ffb ffffffff 000000f6     ................
  42a4b0:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  42a4c0:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  42a4d0:	0100c06f 8effffff de010050 0000edee     o.......P.......
  42a4e0:	00000000 22222200 21000000 10ffffff     ....."""...!....
  42a4f0:	fff80800 0010bcfb fcfff41e df010010     ................
  42a500:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  42a510:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  42a520:	fffffffd ffffffff ffffffff ffffffff     ................
  42a530:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  42a540:	70020000 02000000 000000ef 00f0ef02     ...p............
  42a550:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  42a560:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  42a570:	05000000 000000ff 00c00500 00000000     ................
  42a580:	00000000 07000000 00000070 05007002     ........p....p..
  42a590:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  42a5a0:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  42a5b0:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  42a5c0:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  42a5d0:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  42a5e0:	000010bf 09000000 000000e3 02000000     ................
  42a5f0:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  42a600:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  42a610:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  42a620:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  42a630:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  42a640:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  42a650:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  42a660:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  42a670:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  42a680:	00000000 00000200 0c000000 000020fb     ............. ..
  42a690:	ffff0000 00000090 e6ffff0f ff000000     ................
  42a6a0:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  42a6b0:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  42a6c0:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  42a6d0:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  42a6e0:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  42a6f0:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  42a700:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  42a710:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  42a720:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  42a730:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  42a740:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  42a750:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  42a760:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  42a770:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  42a780:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  42a790:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  42a7a0:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  42a7b0:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  42a7c0:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  42a7d0:	0000fa03 00000000 00120000 00000000     ................
  42a7e0:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  42a7f0:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  42a800:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  42a810:	99999999 88055099 88888888 ffff0f70     .....P......p...
  42a820:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  42a830:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  42a840:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  42a850:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  42a860:	00f4cf00 e0cf0000 a4000000 00000000     ................
  42a870:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  42a880:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  42a890:	ff080090 ff080090 ff080090 ff020090     ................
  42a8a0:	07000090 00000080 50040000 00000000     ...........P....
  42a8b0:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  42a8c0:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  42a8d0:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  42a8e0:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  42a8f0:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  42a900:	0f989999 ffffffff ffdff3ff ffffffff     ................
  42a910:	00000020 00000000 64560100 00000000      .........Vd....
  42a920:	effebf03 000010f9 0310fa7f 0800e4df     ................
  42a930:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  42a940:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  42a950:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  42a960:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  42a978:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  42a988:	ef040000 ffefffac 00000091 00a1ff1c     ................
  42a998:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  42a9a8:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  42a9b8:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  42a9c8:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  42a9d8:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  42a9e8:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  42aa00:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  42aa10:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  42aa20:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  42aa30:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  42aa40:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  42aa50:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  42aa60:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  42aa70:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  42aa80:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  42aa90:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  42aaa0:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  42aab0:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  42aac0:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  42aad0:	07000000 000000a0 b0ff0800 08000000     ................
  42aae0:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  42aaf0:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  42ab00:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  42ab10:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  42ab20:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  42ab30:	00000000 00001300 30080000 00000000     ...........0....
  42ab40:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  42ab50:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  42ab60:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  42ab70:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  42ab80:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  42ab90:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  42aba0:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  42abb0:	ffffffb6 ffffffff ffffffff ffffffff     ................
  42abc0:	ffffffff ffffffff ffffffff ffffffff     ................
  42abd0:	ffffffff ffffffff ffffffff ffffffff     ................
  42abe0:	ffafffff ffffffff 000000f9 00000000     ................
  42abf0:	dd010000 00000010 d1ff1d00 01000000     ................
  42ac00:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  42ac10:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  42ac20:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  42ac30:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  42ac40:	ffffefdd ffffffff accfb3fa cccccccc     ................
  42ac50:	0000cacc 02000000 00000000 ff040000     ................
  42ac60:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  42ac70:	00000000 c0ffff06 00000000 00f7ff08     ................
  42ac80:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  42ac90:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  42aca0:	00fbef15 ffffef00 0000faff ffffff0b     ................
  42acb0:	000000f7 a2ffff7f 02000000 000085ba     ................
  42acc0:	04000000 00000086 faff0610 d1df0200     ................
  42acd0:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  42ace0:	0000fadf fbffff8d 06000000 0000fdff     ................
  42acf0:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  42ad00:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  42ad10:	10da08f1 00620200 00000000 00000000     ......b.........
  42ad20:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  42ad30:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  42ad40:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  42ad50:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  42ad60:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  42ad70:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  42ad80:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  42ad90:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  42ada0:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  42adb0:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  42adc0:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  42add0:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  42ade0:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  42adf0:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  42ae00:	7f000000 000000f3 0000a0bf 0010ff00     ................
  42ae10:	00f80300 c0030000 00000000 00000020     ............ ...
  42ae20:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  42ae30:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  42ae40:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  42ae50:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  42ae60:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  42ae70:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  42ae80:	00000000 0000af00 8f010000 000030fa     .............0..
  42ae90:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  42aea0:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  42aeb0:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  42aec0:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  42aed0:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  42aee0:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  42aef0:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  42af00:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  42af10:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  42af20:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  42af30:	ffffffff 0000f6ff 00000000 00000002     ................
  42af40:	05000000 0000b0df ef070000 0000d0ff     ................
  42af50:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  42af60:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  42af70:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  42af80:	fbff0e00 00000000 f4ff0e00 00000000     ................
  42af90:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  42afa0:	00fd0d00 00000000 00b30400 55350000     ..............5U
  42afb0:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  42afc0:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  42afd0:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  42afe0:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  42aff0:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  42b000:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  42b010:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  42b020:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  42b030:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  42b040:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  42b050:	00000000 00960200 00000000 ff0d0000     ................
  42b060:	00000050 0e000000 000060ff 00000000     P........`......
  42b070:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  42b080:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  42b090:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  42b0a0:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  42b0b0:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  42b0c0:	ffffffff 0050ffff 00000000 00000000     ......P.........
  42b0d0:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  42b0e0:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  42b0f0:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  42b100:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  42b110:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  42b120:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  42b130:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  42b140:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  42b150:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  42b160:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  42b170:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  42b180:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  42b190:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  42b1a0:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  42b1b0:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  42b1c0:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  42b1d0:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  42b1e0:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  42b1f0:	000000fc 0f000000 0000fcf7 00000000     ................
  42b200:	00fcfa0c 00000000 fcfa0100 00000000     ................
  42b210:	fa070000 000000fc 0f000000 bbbbfefa     ................
  42b220:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  42b23c:	0000b207 00000000 00fadf0a 00000000     ................
  42b24c:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  42b25c:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  42b26c:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  42b27c:	00100000 00000000 00e83ec4 00000000     .........>......
  42b28c:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  42b2a4:	10010000 07000000 00b3ffef 8ffdaf00     ................
  42b2b4:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  42b2c4:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  42b2d4:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  42b2e4:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  42b2f4:	10febffe dcac0300 00000081 00004334     ............4C..
  42b304:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  42b314:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  42b324:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  42b334:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  42b344:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  42b354:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  42b364:	00200100 00000000 0050ff04 02000000     .. .......P.....
  42b374:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  42b384:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  42b394:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  42b3a4:	ffffff04 040000b0 b0ffffff bf000000     ................
  42b3b4:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  42b3c4:	000000b0 60a80900 00000000 17000000     .......`........
  42b3d4:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  42b3e4:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  42b3f4:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  42b404:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  42b414:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  42b424:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  42b434:	00000000 ef030000 03e2ffff bfcefbfb     ................
  42b444:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  42b454:	fffffffa ffafffff faffffff ffffffff     ................
  42b464:	ffffafff fffaffff ffffffff ffffffaf     ................
  42b474:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  42b484:	0000a8aa 00000000 00000300 00000000     ................
  42b494:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  42b4a4:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  42b4b4:	ffffff8f 00fdffff 0000f77f 00000000     ................
  42b4c4:	0000606f 00000000 00000030 00000000     o`......0.......

0042b4d4 <kern_class_values>:
  42b4d4:	00000100 00000000 00000100 00000002     ................
  42b4e4:	00000200 00000000 00000000 00000000     ................
  42b4f4:	00010000 00000000 00000000 00000000     ................
  42b504:	000a0100 0000fb06 f3f40000 04050b02     ................
  42b514:	010b02f7 00070209 00000000 00000000     ................
  42b524:	020d0000 000000fe 00000000 00000000     ................
  42b534:	f9000400 00000000 0404fc00 00fe0000     ................
  42b544:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  42b554:	fe0000fd 0000fc00 00000000 fe000000     ................
  42b564:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  42b574:	04070202 000004fc 000000f3 00000000     ................
  42b584:	00000000 000000f8 00000000 00000000     ................
  42b594:	fa000000 f700f5fd 000000fe 00090000     ................
  42b5a4:	01fffef9 0000fc00 0000effe 00000000     ................
  42b5b4:	00000000 09feee00 00000000 00000000     ................
  42b5c4:	00000000 000000f7 00000000 07000000     ................
  42b5d4:	00000200 000000fc 00000000 00000000     ................
  42b5e4:	00000000 02090000 00000001 00000000     ................
	...
  42b614:	000000f8 00000000 00000000 00000000     ................
  42b624:	00000000 02000000 fe070204 fe040000     ................
  42b634:	0602e1f9 00fd0004 00070008 00eb0007     ................
  42b644:	070007fd 000204fe 00fe0100 0012fc00     ................
  42b654:	00070012 07040309 f8000000 00000000     ................
  42b664:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  42b67c:	0000f100 00000000 00000000 00000000     ................
  42b68c:	00f40100 000000f2 1600fe00 0202fdfd     ................
  42b69c:	02fd00fe 00f40000 00000000 00000000     ................
  42b6ac:	00ea0000 00000002 00000000 00000000     ................
  42b6bc:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  42b6cc:	0300f100 00fd00fb 00000000 00000000     ................
  42b6dc:	06000000 0000e507 00000000 00000000     ................
  42b6ec:	000b0000 00000002 02020000 ff00fcfd     ................
  42b6fc:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  42b70c:	00fcf9f9 00fc00fc fe000000 00020000     ................
  42b71c:	0100fe02 02000000 000000fe ff0202fe     ................
  42b72c:	fc000000 0000ff00 01000000 00fe0300     ................
  42b73c:	00fc00fd 0700fe00 00fe0000 00000000     ................
  42b74c:	fefe01ff 00fe0000 000000fe 00000000     ................
  42b75c:	ffff0000 00fdfe00 00000000 fe000001     ................
  42b76c:	fefefe00 00000000 00000000 0000ff00     ................
  42b77c:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  42b78c:	fffa0006 f5ff00fd f402fe02 01000002     ................
  42b79c:	fef400f4 f500feed 00060400 00000003     ................
  42b7ac:	fc000000 00f900fd 00fe0000 00fe0000     ................
  42b7bc:	00000000 ff00ffff 000000fd 00000000     ................
  42b7cc:	fe00fefe 0000fefd 000000fe 00000000     ................
  42b7dc:	00000000 fd00fefe fc00fe00 fd000002     ................
  42b7ec:	00020201 00000000 0000fe00 02000000     ................
  42b7fc:	00fe0000 00fdfefe 00000000 00020000     ................
  42b80c:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  42b81c:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  42b82c:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  42b83c:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  42b84c:	02000200 00000000 00000000 fe000000     ................
  42b85c:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  42b86c:	00fe0000 01000000 000000ff 00000002     ................
  42b87c:	00000000 00000b00 00000000 00000002     ................
  42b88c:	000000fe 00000000 00000000 000200fc     ................
	...
  42b8a8:	000000fe 000000fc 00f9f500 f5fd0000     ................
  42b8b8:	02fe0000 0000fa00 00000000 00000000     ................
  42b8c8:	fc0000fc 00000000 00000000 00000000     ................
  42b8d8:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  42b8e8:	00000000 00f90000 fefd00fe f9fafb00     ................
  42b8f8:	00fc00fe 000000f9 00001200 fd000001     ................
  42b908:	f6000200 00000000 07fceb00 00f7fe07     ................
  42b918:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  42b928:	f30000f7 00000d00 000000ff fafeffff     ................
  42b938:	00eb00f9 00000000 00000000 00000001     ................
	...
  42b954:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  42b96c:	00ff0000 040000fc fb0003ff fafffe02     ................
  42b97c:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  42b98c:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  42b99c:	00000002 00000000 0002fc00 fdfe00fd     ................
  42b9ac:	fefefef9 fffdfeff 00000000 fefefe00     ................
  42b9bc:	00000000 fe00fe03 fe000000 fdfefefd     ................
  42b9cc:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  42b9dc:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  42b9ec:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  42b9fc:	0007fcfc 00000000 00000000 00000002     ................
	...
  42ba20:	000000fc 00000000 00000000 00000000     ................
	...
  42ba4c:	000000fe 00000000 00000000 00000000     ................
	...
  42ba68:	fefe0000 00000000 00000000 00000000     ................
  42ba78:	fd0000fd fefe0000 00000000 000000fe     ................
  42ba88:	0000ff00 fe000000 00000000 00fc00fd     ................
  42ba98:	00f90000 0004fb02 0000f5fe f700fefb     ................
  42baa8:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  42bab8:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  42bac8:	fef00000 f8fb0507 00f90100 04fefef5     ................
  42bad8:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  42bae8:	0000fe00 feff0000 f100fef7 00000000     ................
  42baf8:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  42bb08:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  42bb18:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  42bb28:	03000000 09fc0200 fdfefe00 00000000     ................
  42bb38:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  42bb48:	00000009 00001200 fd000001 00000200     ................
	...
  42bb64:	0000fcfe ff000000 fe000000 fc0000fe     ................
  42bb74:	fc0000fe 00ff0400 00000000 00000100     ................
  42bb84:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  42bb94:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  42bba4:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  42bbb4:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  42bbc4:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  42bbd4:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  42bbe4:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  42bbf4:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  42bc04:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  42bc14:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  42bc24:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  42bc34:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  42bc44:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  42bc54:	04fc0204 fff90000 0100ff00 0000fe01     ................
  42bc64:	00000000 000000fe 00070200 0000fd00     ................
  42bc74:	fefe0000 000000fd 00000201 00020000     ................
  42bc84:	000900fe fd010104 00000400 00000200     ................
	...
  42bc9c:	06000700 00000000 00000000 00000000     ................
  42bcac:	00f30000 070004fe 03160000 0202fcfc     ................
  42bcbc:	00f501fe 00f30b00 00000000 00000000     ................
  42bccc:	09f10000 0000001f 00000000 00000000     ................
  42bcdc:	0000f300 00000000 00000000 00000000     ................
	...
  42bcf8:	fc0000fc 000000fe 00000000 00000000     ................
	...
  42bd10:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  42bd20:	02020000 000000fd 00000000 00000000     ................
  42bd30:	000006e3 00000000 00000000 00000000     ................
  42bd40:	fa000000 fa000000 00000000 0000fffb     ................
  42bd50:	fd00fb00 0000f500 00000000 00000000     ................
  42bd60:	0000f100 00010000 00000000 0000fe00     ................
  42bd70:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  42bd80:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  42bd90:	00f10000 0000fffa 00000000 fcfd0000     ................
  42bda0:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  42bdb0:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  42bdc0:	f5fe00fb fe0000fe 000000fe fe000200     ................
  42bdd0:	0004fefc 00000000 00000000 00000000     ................
	...
  42bdfc:	00030000 00000000 fe00fb00 fc000000     ................
  42be0c:	00000002 00fcfefa fe00fa00 0000f500     ................
  42be1c:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  42be2c:	00000000 fffdfe00 000001fd 0700fd04     ................
  42be3c:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  42be54:	0b0e0000 fe00fefc 00120a12 00020000     ................
  42be64:	00000800 000000fc 00000000 00fe0000     ................
  42be74:	00000000 03000000 00000000 f7fefded     ................
  42be84:	f10000f5 00000000 00000000 00000000     ................
  42be94:	00000000 0000fc00 00000000 fe000000     ................
	...
  42beac:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  42becc:	000000fe fe0002fb f9020402 02fe0000     ................
  42bedc:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  42beec:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  42bf04:	0000fe00 00000000 00030000 ed000000     ................
  42bf14:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  42bf2c:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  42bf3c:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  42bf4c:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  42bf64:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  42bf7c:	000000f3 00000000 00000000 fd00fefe     ................
  42bf8c:	00000000 fc0000fe fc0002fe fa00fefc     ................
  42bf9c:	fdfefbfe 0000fc00 00000000 00000000     ................
  42bfac:	0700f100 00fc0000 fd000000 0000fe00     ................
  42bfbc:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  42bfcc:	020302fa fe070207 f70000fa faf90000     ................
  42bfdc:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  42bfec:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  42bffc:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  42c00c:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  42c01c:	0002fe00 fe000000 fd020000 fd000001     ................
  42c02c:	00fd00fe 00000000 00000000 00000000     ................
  42c03c:	00000000 000500f2 0000fe00 00000000     ................
  42c04c:	0000fefe 05000400 00000000 01f3f200     ................
  42c05c:	f704070a 08000902 00000400 00000000     ................
  42c06c:	00000000 00000c00 00000000 00000000     ................
	...

0042c084 <kern_classes>:
  42c084:	0042b4d4 0042c094 0042c130 0000313d     ..B...B.0.B.=1..

0042c094 <kern_left_class_mapping>:
  42c094:	02010000 05040300 08070602 0a090a09     ................
  42c0a4:	0d000c0b 11100f0e 140c1312 00000014     ................
  42c0b4:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  42c0c4:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  42c0d4:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  42c0e4:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  42c0f4:	0000093d 00000000 00000000 00000000     =...............
	...

0042c130 <kern_right_class_mapping>:
  42c130:	02010000 05040300 08070602 0a090a09     ................
  42c140:	0e0d0c0b 0c11100f 15141312 00000015     ................
  42c150:	19181716 19191917 1a191917 19191919     ................
  42c160:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  42c170:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  42c180:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  42c190:	00000931 00000000 00000000 00000000     1...............
	...

0042c1cc <unicode_list_1>:
  42c1cc:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  42c1dc:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  42c1ec:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  42c1fc:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  42c20c:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  42c21c:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  42c22c:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  42c23c:	f712f4aa 0000f7f2 0000ffff              ............

0042c248 <lv_anim_path_def>:
  42c248:	00414d39 00000000 0000ffff              9MA.........

0042c254 <hex.5775>:
  42c254:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  42c264:	00000000                                ....

0042c268 <sin0_90_table>:
  42c268:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  42c278:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  42c288:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  42c298:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  42c2a8:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  42c2b8:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  42c2c8:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  42c2d8:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  42c2e8:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  42c2f8:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  42c308:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  42c318:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  42c328:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  42c338:	7461636f 20612065 2077656e 66667562     ocate a new buff
  42c348:	28207265 72636e69 65736165 756f7920     er (increase you
  42c358:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  42c368:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  42c378:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  42c388:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  42c398:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  42c3a8:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  42c3b8:	008c80ef 625f766c 00006e74 635f766c     ....lv_btn..lv_c
  42c3c8:	00746e6f 695f766c 0000676d 74786554     ont.lv_img..Text
  42c3d8:	00000000 6c5f766c 6c656261 00000000     ....lv_label....
  42c3e8:	0001c200 000000c0 00000800 00000000     ................
  42c3f8:	000007e5 00000005 00000007 00000012     ................
  42c408:	0000000a 0000003b 00000001 0000ffff     ....;...........

0042c418 <ecg>:
  42c418:	0000050a 00000508 00000506 00000505     ................
  42c428:	00000503 00000501 00000500 000004fe     ................
  42c438:	000004fc 000004fb 000004f9 000004f8     ................
  42c448:	000004f6 000004f5 000004f3 000004f2     ................
  42c458:	000004f1 000004ef 000004ee 000004ed     ................
  42c468:	000004eb 000004ea 000004e9 000004e7     ................
  42c478:	000004e6 000004e5 000004e3 000004e2     ................
  42c488:	000004e1 000004e0 000004df 000004de     ................
  42c498:	000004dd 000004dc 000004db 000004da     ................
  42c4a8:	000004d9 000004d8 000004d8 000004d7     ................
  42c4b8:	000004d7 000004d6 000004d6 000004d5     ................
  42c4c8:	000004d5 000004d5 000004d4 000004d4     ................
  42c4d8:	000004d4 000004d4 000004d3 000004d3     ................
  42c4e8:	000004d3 000004d3 000004d2 000004d2     ................
  42c4f8:	000004d1 000004d1 000004d0 000004d0     ................
  42c508:	000004cf 000004ce 000004cd 000004cc     ................
  42c518:	000004cb 000004ca 000004c8 000004c7     ................
  42c528:	000004c6 000004c4 000004c3 000004c2     ................
  42c538:	000004c1 000004bf 000004be 000004bd     ................
  42c548:	000004bc 000004bb 000004ba 000004b9     ................
  42c558:	000004b8 000004b8 000004b7 000004b7     ................
  42c568:	000004b6 000004b6 000004b6 000004b6     ................
  42c578:	000004b6 000004b6 000004b6 000004b6     ................
  42c588:	000004b6 000004b6 000004b6 000004b6     ................
  42c598:	000004b6 000004b5 000004b5 000004b5     ................
  42c5a8:	000004b5 000004b5 000004b4 000004b4     ................
  42c5b8:	000004b3 000004b2 000004b2 000004b1     ................
  42c5c8:	000004b0 000004af 000004ae 000004ad     ................
  42c5d8:	000004ad 000004ab 000004aa 000004a9     ................
  42c5e8:	000004a8 000004a7 000004a6 000004a5     ................
  42c5f8:	000004a3 000004a2 000004a1 000004a0     ................
  42c608:	0000049f 0000049d 0000049c 0000049b     ................
  42c618:	0000049a 00000498 00000497 00000496     ................
  42c628:	00000495 00000493 00000492 00000491     ................
  42c638:	00000490 0000048e 0000048d 0000048c     ................
  42c648:	0000048b 0000048a 00000489 00000487     ................
  42c658:	00000486 00000485 00000484 00000483     ................
  42c668:	00000482 00000480 0000047f 0000047e     ............~...
  42c678:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  42c688:	00000476 00000474 00000472 00000470     v...t...r...p...
  42c698:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  42c6a8:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  42c6b8:	00000459 00000456 00000453 00000450     Y...V...S...P...
  42c6c8:	0000044d 00000449 00000446 00000443     M...I...F...C...
  42c6d8:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  42c6e8:	00000431 0000042e 0000042a 00000427     1.......*...'...
  42c6f8:	00000423 00000420 0000041c 00000418     #... ...........
  42c708:	00000415 00000411 0000040d 00000409     ................
  42c718:	00000405 00000401 000003fd 000003f9     ................
  42c728:	000003f5 000003f1 000003ec 000003e8     ................
  42c738:	000003e4 000003df 000003da 000003d6     ................
  42c748:	000003d1 000003cc 000003c7 000003c2     ................
  42c758:	000003bd 000003b8 000003b3 000003ad     ................
  42c768:	000003a8 000003a2 0000039d 00000397     ................
  42c778:	00000391 0000038b 00000385 0000037f     ................
  42c788:	00000379 00000373 0000036d 00000366     y...s...m...f...
  42c798:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  42c7a8:	00000346 0000033f 00000339 00000332     F...?...9...2...
  42c7b8:	0000032b 00000325 0000031e 00000318     +...%...........
  42c7c8:	00000311 0000030b 00000305 000002fe     ................
  42c7d8:	000002f8 000002f2 000002ec 000002e6     ................
  42c7e8:	000002e1 000002db 000002d5 000002d0     ................
  42c7f8:	000002ca 000002c5 000002bf 000002ba     ................
  42c808:	000002b5 000002af 000002aa 000002a5     ................
  42c818:	000002a0 0000029a 00000295 00000290     ................
  42c828:	0000028a 00000285 00000280 0000027a     ............z...
  42c838:	00000275 00000270 0000026a 00000265     u...p...j...e...
  42c848:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  42c858:	00000249 00000243 0000023d 00000237     I...C...=...7...
  42c868:	00000232 0000022c 00000226 00000220     2...,...&... ...
  42c878:	0000021a 00000214 0000020e 00000208     ................
  42c888:	00000202 000001fc 000001f6 000001ef     ................
  42c898:	000001e9 000001e3 000001dd 000001d7     ................
  42c8a8:	000001d0 000001ca 000001c4 000001be     ................
  42c8b8:	000001b8 000001b2 000001ab 000001a5     ................
  42c8c8:	0000019f 00000199 00000193 0000018d     ................
  42c8d8:	00000187 00000182 0000017c 00000176     ........|...v...
  42c8e8:	00000170 0000016b 00000165 00000160     p...k...e...`...
  42c8f8:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  42c908:	00000146 00000142 0000013d 00000138     F...B...=...8...
  42c918:	00000134 00000130 0000012c 00000128     4...0...,...(...
  42c928:	00000124 00000120 0000011c 00000119     $... ...........
  42c938:	00000115 00000112 0000010e 0000010a     ................
  42c948:	00000107 00000103 00000100 000000fc     ................
  42c958:	000000f8 000000f4 000000f0 000000ec     ................
  42c968:	000000e8 000000e3 000000df 000000da     ................
  42c978:	000000d5 000000d0 000000cb 000000c6     ................
  42c988:	000000c0 000000bb 000000b6 000000b0     ................
  42c998:	000000ab 000000a6 000000a1 0000009c     ................
  42c9a8:	00000097 00000093 0000008e 0000008a     ................
  42c9b8:	00000086 00000082 0000007e 0000007b     ........~...{...
  42c9c8:	00000078 00000075 00000073 00000070     x...u...s...p...
  42c9d8:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  42c9e8:	00000066 00000064 00000062 00000060     f...d...b...`...
  42c9f8:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  42ca08:	00000057 00000055 00000052 00000050     W...U...R...P...
  42ca18:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  42ca28:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  42ca38:	00000038 00000035 00000032 00000030     8...5...2...0...
  42ca48:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  42ca58:	00000024 00000023 00000021 0000001f     $...#...!.......
  42ca68:	0000001e 0000001d 0000001c 0000001b     ................
  42ca78:	0000001a 00000019 00000019 00000018     ................
  42ca88:	00000017 00000017 00000016 00000016     ................
  42ca98:	00000015 00000015 00000014 00000013     ................
  42caa8:	00000012 00000012 00000011 0000000f     ................
  42cab8:	0000000e 0000000d 0000000c 0000000a     ................
  42cac8:	00000009 00000007 00000006 00000005     ................
  42cad8:	00000004 00000003 00000002 00000001     ................
	...
  42cb00:	00000001 00000002 00000004 00000005     ................
  42cb10:	00000007 00000009 0000000b 0000000e     ................
  42cb20:	00000010 00000013 00000016 00000019     ................
  42cb30:	0000001b 0000001e 00000021 00000024     ........!...$...
  42cb40:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  42cb50:	00000031 00000033 00000036 00000038     1...3...6...8...
  42cb60:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  42cb70:	00000040 00000042 00000043 00000045     @...B...C...E...
  42cb80:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  42cb90:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  42cba0:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  42cbb0:	00000060 00000063 00000066 00000069     `...c...f...i...
  42cbc0:	0000006c 00000070 00000073 00000076     l...p...s...v...
  42cbd0:	00000079 0000007c 00000080 00000083     y...|...........
  42cbe0:	00000086 00000089 0000008c 0000008f     ................
  42cbf0:	00000091 00000094 00000097 00000099     ................
  42cc00:	0000009b 0000009e 000000a0 000000a2     ................
  42cc10:	000000a4 000000a6 000000a8 000000aa     ................
  42cc20:	000000ac 000000ae 000000b0 000000b3     ................
  42cc30:	000000b5 000000b7 000000ba 000000bc     ................
  42cc40:	000000bf 000000c1 000000c4 000000c7     ................
  42cc50:	000000ca 000000cd 000000d0 000000d3     ................
  42cc60:	000000d7 000000da 000000dd 000000e1     ................
  42cc70:	000000e4 000000e8 000000eb 000000ef     ................
  42cc80:	000000f2 000000f6 000000f9 000000fc     ................
  42cc90:	00000100 00000103 00000106 00000109     ................
  42cca0:	0000010d 00000110 00000113 00000116     ................
  42ccb0:	00000119 0000011c 00000120 00000123     ........ ...#...
  42ccc0:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  42ccd0:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  42cce0:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  42ccf0:	00000154 00000158 0000015d 00000161     T...X...]...a...
  42cd00:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  42cd10:	00000179 0000017d 00000182 00000187     y...}...........
  42cd20:	0000018b 00000190 00000195 00000199     ................
  42cd30:	0000019e 000001a2 000001a6 000001aa     ................
  42cd40:	000001ae 000001b3 000001b7 000001bb     ................
  42cd50:	000001bf 000001c3 000001c7 000001cb     ................
  42cd60:	000001cf 000001d3 000001d7 000001db     ................
  42cd70:	000001df 000001e3 000001e8 000001ec     ................
  42cd80:	000001f0 000001f5 000001fa 000001ff     ................
  42cd90:	00000203 00000208 0000020d 00000212     ................
  42cda0:	00000217 0000021d 00000222 00000227     ........"...'...
  42cdb0:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  42cdc0:	00000241 00000246 0000024b 00000250     A...F...K...P...
  42cdd0:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  42cde0:	00000267 0000026b 00000270 00000274     g...k...p...t...
  42cdf0:	00000278 0000027d 00000281 00000285     x...}...........
  42ce00:	00000289 0000028e 00000292 00000296     ................
  42ce10:	0000029a 0000029f 000002a3 000002a7     ................
  42ce20:	000002ac 000002b0 000002b5 000002b9     ................
  42ce30:	000002be 000002c3 000002c7 000002cc     ................
  42ce40:	000002d1 000002d6 000002db 000002e0     ................
  42ce50:	000002e5 000002ea 000002ef 000002f4     ................
  42ce60:	000002f9 000002fe 00000303 00000309     ................
  42ce70:	0000030e 00000313 00000318 0000031d     ................
  42ce80:	00000323 00000328 0000032d 00000333     #...(...-...3...
  42ce90:	00000338 0000033d 00000343 00000348     8...=...C...H...
  42cea0:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  42ceb0:	00000363 00000368 0000036e 00000373     c...h...n...s...
  42cec0:	00000379 0000037e 00000384 00000389     y...~...........
  42ced0:	0000038f 00000394 0000039a 0000039f     ................
  42cee0:	000003a5 000003aa 000003b0 000003b5     ................
  42cef0:	000003bb 000003c0 000003c6 000003cb     ................
  42cf00:	000003d1 000003d6 000003dc 000003e1     ................
  42cf10:	000003e6 000003ec 000003f1 000003f7     ................
  42cf20:	000003fc 00000401 00000407 0000040c     ................
  42cf30:	00000411 00000416 0000041c 00000421     ............!...
  42cf40:	00000426 0000042c 00000431 00000436     &...,...1...6...
  42cf50:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  42cf60:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  42cf70:	00000467 0000046d 00000472 00000478     g...m...r...x...
  42cf80:	0000047e 00000483 00000489 0000048f     ~...............
  42cf90:	00000494 0000049a 000004a0 000004a6     ................
  42cfa0:	000004ab 000004b1 000004b7 000004bd     ................
  42cfb0:	000004c3 000004c8 000004ce 000004d4     ................
  42cfc0:	000004da 000004df 000004e5 000004eb     ................
  42cfd0:	000004f1 000004f7 000004fc 00000502     ................
  42cfe0:	00000508 0000050e 00000514 0000051a     ................
  42cff0:	00000520 00000526 0000052c 00000532      ...&...,...2...
  42d000:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  42d010:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  42d020:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  42d030:	00000584 0000058b 00000592 00000598     ................
  42d040:	0000059f 000005a6 000005ac 000005b3     ................
  42d050:	000005ba 000005c1 000005c8 000005cf     ................
  42d060:	000005d6 000005dd 000005e4 000005ec     ................
  42d070:	000005f3 000005fa 00000601 00000609     ................
  42d080:	00000610 00000617 0000061f 00000626     ............&...
  42d090:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  42d0a0:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  42d0b0:	0000066a 00000672 0000067a 00000681     j...r...z.......
  42d0c0:	00000689 00000691 00000699 000006a1     ................
  42d0d0:	000006a9 000006b1 000006b9 000006c1     ................
  42d0e0:	000006c9 000006d1 000006d9 000006e1     ................
  42d0f0:	000006ea 000006f2 000006fb 00000703     ................
  42d100:	0000070c 00000715 0000071d 00000726     ............&...
  42d110:	0000072f 00000738 00000740 00000749     /...8...@...I...
  42d120:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  42d130:	00000775 0000077e 00000787 00000790     u...~...........
  42d140:	00000798 000007a1 000007aa 000007b2     ................
  42d150:	000007bb 000007c3 000007cc 000007d4     ................
  42d160:	000007dc 000007e5 000007ed 000007f6     ................
  42d170:	000007fe 00000806 0000080f 00000817     ................
  42d180:	00000820 00000829 00000831 0000083a      ...)...1...:...
  42d190:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  42d1a0:	00000867 00000870 00000879 00000883     g...p...y.......
  42d1b0:	0000088c 00000895 0000089e 000008a7     ................
  42d1c0:	000008b0 000008b9 000008c2 000008cb     ................
  42d1d0:	000008d3 000008dc 000008e4 000008ec     ................
  42d1e0:	000008f4 000008fc 00000903 0000090a     ................
  42d1f0:	00000911 00000918 0000091f 00000925     ............%...
  42d200:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  42d210:	00000943 00000949 0000094e 00000954     C...I...N...T...
  42d220:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  42d230:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  42d240:	00000985 0000098b 00000990 00000996     ................
  42d250:	0000099b 000009a1 000009a6 000009ac     ................
  42d260:	000009b1 000009b7 000009bc 000009c1     ................
  42d270:	000009c6 000009cb 000009cf 000009d4     ................
  42d280:	000009d8 000009dc 000009e0 000009e4     ................
  42d290:	000009e8 000009eb 000009ee 000009f1     ................
  42d2a0:	000009f4 000009f7 000009f9 000009fb     ................
  42d2b0:	000009fe 00000a00 00000a02 00000a03     ................
  42d2c0:	00000a05 00000a07 00000a08 00000a0a     ................
  42d2d0:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  42d2e0:	00000a0f 00000a10 00000a11 00000a12     ................
  42d2f0:	00000a13 00000a14 00000a14 00000a15     ................
  42d300:	00000a16 00000a16 00000a16 00000a17     ................
  42d310:	00000a17 00000a17 00000a17 00000a17     ................
  42d320:	00000a16 00000a16 00000a16 00000a15     ................
  42d330:	00000a15 00000a14 00000a13 00000a12     ................
  42d340:	00000a11 00000a10 00000a0f 00000a0e     ................
  42d350:	00000a0c 00000a0b 00000a09 00000a08     ................
  42d360:	00000a06 00000a04 00000a02 00000a01     ................
  42d370:	000009ff 000009fc 000009fa 000009f8     ................
  42d380:	000009f6 000009f4 000009f1 000009ef     ................
  42d390:	000009ec 000009ea 000009e7 000009e5     ................
  42d3a0:	000009e2 000009e0 000009dd 000009db     ................
  42d3b0:	000009d8 000009d6 000009d3 000009d1     ................
  42d3c0:	000009ce 000009cc 000009c9 000009c7     ................
  42d3d0:	000009c4 000009c2 000009c0 000009be     ................
  42d3e0:	000009bc 000009b9 000009b7 000009b5     ................
  42d3f0:	000009b3 000009b1 000009af 000009ad     ................
  42d400:	000009ab 000009a9 000009a7 000009a5     ................
  42d410:	000009a3 000009a1 0000099f 0000099d     ................
  42d420:	0000099b 00000999 00000997 00000995     ................
  42d430:	00000993 00000991 0000098f 0000098d     ................
  42d440:	0000098b 00000989 00000987 00000985     ................
  42d450:	00000983 00000981 0000097f 0000097d     ............}...
  42d460:	0000097b 00000979 00000977 00000975     {...y...w...u...
  42d470:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  42d480:	0000096b 00000969 00000967 00000965     k...i...g...e...
  42d490:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  42d4a0:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  42d4b0:	00000955 00000953 00000952 00000950     U...S...R...P...
  42d4c0:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  42d4d0:	00000949 00000948 00000947 00000946     I...H...G...F...
  42d4e0:	00000945 00000943 00000942 00000941     E...C...B...A...
  42d4f0:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  42d500:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  42d510:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  42d520:	00000939 00000938 00000937 00000936     9...8...7...6...
  42d530:	00000935 00000934 00000932 00000930     5...4...2...0...
  42d540:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  42d550:	00000924 00000920 0000091d 00000919     $... ...........
  42d560:	00000915 00000910 0000090b 00000906     ................
  42d570:	00000901 000008fc 000008f6 000008f0     ................
  42d580:	000008ea 000008e4 000008de 000008d8     ................
  42d590:	000008d1 000008cb 000008c5 000008be     ................
  42d5a0:	000008b8 000008b2 000008ac 000008a6     ................
  42d5b0:	000008a0 0000089a 00000894 0000088f     ................
  42d5c0:	00000889 00000884 0000087e 00000879     ........~...y...
  42d5d0:	00000873 0000086d 00000868 00000862     s...m...h...b...
  42d5e0:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  42d5f0:	00000844 0000083d 00000837 00000830     D...=...7...0...
  42d600:	00000829 00000821 0000081a 00000812     )...!...........
  42d610:	0000080a 00000802 000007fa 000007f2     ................
  42d620:	000007eb 000007e4 000007dd 000007d7     ................
  42d630:	000007d2 000007cd 000007c9 000007c6     ................
  42d640:	000007c3 000007c2 000007c2 000007c3     ................
  42d650:	000007c5 000007c8 000007cd 000007d3     ................
  42d660:	000007da 000007e2 000007eb 000007f6     ................
  42d670:	00000802 0000080f 0000081e 0000082e     ................
  42d680:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  42d690:	00000890 000008a7 000008c0 000008da     ................
  42d6a0:	000008f4 00000910 0000092d 0000094c     ........-...L...
  42d6b0:	0000096b 0000098b 000009ad 000009cf     k...............
  42d6c0:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  42d6d0:	00000a8a 00000ab2 00000adb 00000b05     ................
  42d6e0:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  42d6f0:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  42d700:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  42d710:	00000d51 00000d80 00000dad 00000ddb     Q...............
  42d720:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  42d730:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  42d740:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  42d750:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  42d760:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  42d770:	00000fff 00000ffd 00000ff9 00000ff1     ................
  42d780:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  42d790:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  42d7a0:	00000f38 00000f17 00000ef3 00000ecd     8...............
  42d7b0:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  42d7c0:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  42d7d0:	00000d29 00000cf4 00000cbd 00000c86     )...............
  42d7e0:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  42d7f0:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  42d800:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  42d810:	000009ab 00000976 00000942 0000090e     ....v...B.......
  42d820:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  42d830:	00000821 000007f6 000007cc 000007a4     !...............
  42d840:	0000077d 00000758 00000734 00000712     }...X...4.......
  42d850:	000006f1 000006d2 000006b4 00000698     ................
  42d860:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  42d870:	00000621 0000060e 000005fb 000005ea     !...............
  42d880:	000005da 000005cc 000005be 000005b2     ................
  42d890:	000005a7 0000059e 00000595 0000058e     ................
  42d8a0:	00000588 00000583 0000057e 0000057b     ........~...{...
  42d8b0:	00000579 00000577 00000576 00000576     y...w...v...v...
  42d8c0:	00000576 00000577 00000579 0000057b     v...w...y...{...
  42d8d0:	0000057e 00000582 00000585 0000058a     ~...............
  42d8e0:	0000058e 00000593 00000598 0000059e     ................
  42d8f0:	000005a3 000005a9 000005af 000005b5     ................
  42d900:	000005bb 000005c1 000005c7 000005cd     ................
  42d910:	000005d3 000005d9 000005df 000005e5     ................
  42d920:	000005eb 000005f0 000005f6 000005fb     ................
  42d930:	00000600 00000604 00000609 0000060d     ................
  42d940:	00000611 00000615 00000618 0000061c     ................
  42d950:	0000061f 00000621 00000624 00000626     ....!...$...&...
  42d960:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  42d970:	0000062d 0000062d 0000062e 0000062e     -...-...........
  42d980:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  42d990:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  42d9a0:	00000627 00000625 00000623 00000621     '...%...#...!...
  42d9b0:	0000061f 0000061d 0000061b 00000618     ................
  42d9c0:	00000616 00000613 00000610 0000060d     ................
  42d9d0:	0000060a 00000606 00000603 000005ff     ................
  42d9e0:	000005fc 000005f8 000005f4 000005f1     ................
  42d9f0:	000005ed 000005e9 000005e5 000005e0     ................
  42da00:	000005dc 000005d8 000005d4 000005d0     ................
  42da10:	000005cb 000005c7 000005c3 000005be     ................
  42da20:	000005ba 000005b5 000005b1 000005ad     ................
  42da30:	000005a8 000005a4 0000059f 0000059b     ................
  42da40:	00000597 00000592 0000058e 0000058a     ................
  42da50:	00000586 00000582 0000057e 0000057a     ........~...z...
  42da60:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  42da70:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  42da80:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  42da90:	0000054a 00000547 00000544 00000540     J...G...D...@...
  42daa0:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  42dab0:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  42dac0:	00000522 0000051e 0000051b 00000517     "...............
  42dad0:	00000514 00000510 0000050d 00000509     ................

0042dae0 <g_ecgSize>:
  42dae0:	000005b2 30303023 20203030 47454220     ....#00000   BEG
  42daf0:	20204e49 00000023 30303023 5b203030     IN  #...#00000 [
  42db00:	80ef2020 7c202091 00000023 00256425       ...  |#...%d%.
  42db10:	0044434c 6c696146 74206465 7263206f     LCD.Failed to cr
  42db20:	65746165 64636c20 73617420 000a0d6b     eate lcd task...
  42db30:	00435452 6c696146 74206465 7263206f     RTC.Failed to cr
  42db40:	65746165 43545220 73617420 000a0d6b     eate RTC task...
  42db50:	32535041 00000000 6c696146 74206465     APS2....Failed t
  42db60:	7263206f 65746165 53504120 73617420     o create APS tas
  42db70:	000a0d6b 6e69616d 00000000 6c696146     k...main....Fail
  42db80:	74206465 7263206f 65746165 69614d20     ed to create Mai
  42db90:	6174206e 0a0d6b73 00000000 63696c43     n task......Clic
  42dba0:	0a64656b 00000000 67676f54 0a64656c     ked.....Toggled.
  42dbb0:	00000000 64323025 0000003a 64323025     ....%02d:...%02d
  42dbc0:	00000000 63617473 766f206b 6c667265     ....stack overfl
  42dbd0:	2520776f 73252078 00000a0d              ow %x %s....

0042dbdc <sinTable_f32>:
  42dbdc:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  42dbec:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  42dbfc:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  42dc0c:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  42dc1c:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  42dc2c:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  42dc3c:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  42dc4c:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  42dc5c:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  42dc6c:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  42dc7c:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  42dc8c:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  42dc9c:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  42dcac:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  42dcbc:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  42dccc:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  42dcdc:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  42dcec:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  42dcfc:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  42dd0c:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  42dd1c:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  42dd2c:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  42dd3c:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  42dd4c:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  42dd5c:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  42dd6c:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  42dd7c:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  42dd8c:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  42dd9c:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  42ddac:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  42ddbc:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  42ddcc:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  42dddc:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  42ddec:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  42ddfc:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  42de0c:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  42de1c:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  42de2c:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  42de3c:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  42de4c:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  42de5c:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  42de6c:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  42de7c:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  42de8c:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  42de9c:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  42deac:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  42debc:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  42decc:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  42dedc:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  42deec:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  42defc:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  42df0c:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  42df1c:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  42df2c:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  42df3c:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  42df4c:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  42df5c:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  42df6c:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  42df7c:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  42df8c:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  42df9c:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  42dfac:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  42dfbc:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  42dfcc:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  42dfdc:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  42dfec:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  42dffc:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  42e00c:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  42e01c:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  42e02c:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  42e03c:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  42e04c:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  42e05c:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  42e06c:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  42e07c:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  42e08c:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  42e09c:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  42e0ac:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  42e0bc:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  42e0cc:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  42e0dc:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  42e0ec:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  42e0fc:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  42e10c:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  42e11c:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  42e12c:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  42e13c:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  42e14c:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  42e15c:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  42e16c:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  42e17c:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  42e18c:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  42e19c:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  42e1ac:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  42e1bc:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  42e1cc:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  42e1dc:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  42e1ec:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  42e1fc:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  42e20c:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  42e21c:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  42e22c:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  42e23c:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  42e24c:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  42e25c:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  42e26c:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  42e27c:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  42e28c:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  42e29c:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  42e2ac:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  42e2bc:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  42e2cc:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  42e2dc:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  42e2ec:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  42e2fc:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  42e30c:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  42e31c:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  42e32c:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  42e33c:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  42e34c:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  42e35c:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  42e36c:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  42e37c:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  42e38c:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  42e39c:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  42e3ac:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  42e3bc:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  42e3cc:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  42e3dc:	80000000                                ....

0042e3e0 <_global_impure_ptr>:
  42e3e0:	20400078 33323130 37363534 42413938     x.@ 0123456789AB
  42e3f0:	46454443 00000000 33323130 37363534     CDEF....01234567
  42e400:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  42e410:	0000296c                                l)..

0042e414 <blanks.7217>:
  42e414:	20202020 20202020 20202020 20202020                     

0042e424 <zeroes.7218>:
  42e424:	30303030 30303030 30303030 30303030     0000000000000000
  42e434:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0042e444 <_ctype_>:
  42e444:	20202000 20202020 28282020 20282828     .         ((((( 
  42e454:	20202020 20202020 20202020 20202020                     
  42e464:	10108820 10101010 10101010 10101010      ...............
  42e474:	04040410 04040404 10040404 10101010     ................
  42e484:	41411010 41414141 01010101 01010101     ..AAAAAA........
  42e494:	01010101 01010101 01010101 10101010     ................
  42e4a4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  42e4b4:	02020202 02020202 02020202 10101010     ................
  42e4c4:	00000020 00000000 00000000 00000000      ...............
	...

0042e548 <_init>:
  42e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42e54a:	bf00      	nop
  42e54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42e54e:	bc08      	pop	{r3}
  42e550:	469e      	mov	lr, r3
  42e552:	4770      	bx	lr

0042e554 <__init_array_start>:
  42e554:	00424ab9 	.word	0x00424ab9

0042e558 <__frame_dummy_init_array_entry>:
  42e558:	0040018d                                ..@.

0042e55c <_fini>:
  42e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42e55e:	bf00      	nop
  42e560:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42e562:	bc08      	pop	{r3}
  42e564:	469e      	mov	lr, r3
  42e566:	4770      	bx	lr

0042e568 <__fini_array_start>:
  42e568:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <font_dsc>:
20400010:	9338 0042 8e60 0042 8e38 0042 c084 0042     8.B.`.B.8.B...B.
20400020:	0010 2802 0000 0000 0000 0000               ...(........

2040002c <lv_font_montserrat_14>:
2040002c:	47b9 0041 46ad 0041 0010 0003 ff00 0001     .GA..FA.........
2040003c:	0010 2040                                   ..@ 

20400040 <mem_buf_small>:
20400040:	c760 2040 0010 0000 c770 2040 0010 0000     `.@ ....p.@ ....

20400050 <_lv_txt_encoded_get_byte_id>:
20400050:	768d 0041                                   .vA.

20400054 <_lv_txt_encoded_get_char_id>:
20400054:	76b9 0041                                   .vA.

20400058 <_lv_txt_encoded_next>:
20400058:	7535 0041                                   5uA.

2040005c <_lv_txt_encoded_prev>:
2040005c:	7635 0041                                   5vA.

20400060 <_lv_txt_encoded_size>:
20400060:	7501 0041                                   .uA.

20400064 <_lv_txt_get_encoded_length>:
20400064:	76e5 0041                                   .vA.

20400068 <g_interrupt_enabled>:
20400068:	0001 0000                                   ....

2040006c <SystemCoreClock>:
2040006c:	0900 003d                                   ..=.

20400070 <_impure_ptr>:
20400070:	0078 2040 0000 0000                         x.@ ....

20400078 <impure_data>:
20400078:	0000 0000 0364 2040 03cc 2040 0434 2040     ....d.@ ..@ 4.@ 
	...
20400120:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400130:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004a0 <__malloc_av_>:
	...
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 

204008a8 <__malloc_sbrk_base>:
204008a8:	ffff ffff                                   ....

204008ac <__malloc_trim_threshold>:
204008ac:	0000 0002                                   ....

204008b0 <__atexit_recursive_mutex>:
204008b0:	a344 2043                                   D.C 

204008b4 <__global_locale>:
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400974:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400994:	5bb1 0042 5541 0042 0000 0000 e444 0042     .[B.AUB.....D.B.
204009a4:	e440 0042 db98 0042 db98 0042 db98 0042     @.B...B...B...B.
204009b4:	db98 0042 db98 0042 db98 0042 db98 0042     ..B...B...B...B.
204009c4:	db98 0042 db98 0042 ffff ffff ffff ffff     ..B...B.........
204009d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
